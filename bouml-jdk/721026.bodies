class SAXParserFactoryImpl
!!!4874498.java!!!	newSAXParser() : SAXParser
        SAXParser saxParserImpl;
        try {
            saxParserImpl = new SAXParserImpl(this, features, fSecureProcess);
        } catch (SAXException se) {
            // Translate to ParserConfigurationException
            throw new ParserConfigurationException(se.getMessage());
        }
        return saxParserImpl;
!!!4874626.java!!!	newSAXParserImpl() : SAXParserImpl
        SAXParserImpl saxParserImpl;
        try {
            saxParserImpl = new SAXParserImpl(this, features);
        } catch (SAXNotSupportedException e) {
            throw e;
        } catch (SAXNotRecognizedException e) {
            throw e;
        } catch (SAXException se) {
            throw new ParserConfigurationException(se.getMessage());
        }
        return saxParserImpl;
!!!4874754.java!!!	setFeature(inout name : String, inout value : boolean) : void
        if (name == null) {
            throw new NullPointerException();
        }
        // If this is the secure processing feature, save it then return.
        if (name.equals(XMLConstants.FEATURE_SECURE_PROCESSING)) {
            if (System.getSecurityManager() != null && (!value)) {
                throw new ParserConfigurationException(
                        SAXMessageFormatter.formatMessage(null,
                        "jaxp-secureprocessing-feature", null));
            }
            fSecureProcess = value;
            putInFeatures(name, value);
            return;
        }

        // XXX This is ugly.  We have to collect the features and then
        // later create an XMLReader to verify the features.
        putInFeatures(name, value);
        // Test the feature by possibly throwing SAX exceptions
        try {
            newSAXParserImpl();
        } catch (SAXNotSupportedException e) {
            features.remove(name);
            throw e;
        } catch (SAXNotRecognizedException e) {
            features.remove(name);
            throw e;
        }
!!!4874882.java!!!	getFeature(inout name : String) : boolean
        if (name == null) {
            throw new NullPointerException();
        }
        if (name.equals(XMLConstants.FEATURE_SECURE_PROCESSING)) {
            return fSecureProcess;
        }
        // Check for valid name by creating a dummy XMLReader to get
        // feature value
        return newSAXParserImpl().getXMLReader().getFeature(name);
!!!4875010.java!!!	getSchema() : Schema
        return grammar;
!!!4875138.java!!!	setSchema(inout grammar : Schema) : void
        this.grammar = grammar;
!!!4875266.java!!!	isXIncludeAware() : boolean
        return getFromFeatures(XINCLUDE_FEATURE);
!!!4875394.java!!!	setXIncludeAware(inout state : boolean) : void
        putInFeatures(XINCLUDE_FEATURE, state);
!!!4875522.java!!!	setValidating(inout validating : boolean) : void
        putInFeatures(VALIDATION_FEATURE, validating);
!!!4875650.java!!!	isValidating() : boolean
         return getFromFeatures(VALIDATION_FEATURE);
!!!4875778.java!!!	putInFeatures(inout name : String, inout value : boolean) : void
         if (features == null) {
            features = new HashMap<>();
        }
        features.put(name, value ? Boolean.TRUE : Boolean.FALSE);
!!!4875906.java!!!	getFromFeatures(inout name : String) : boolean
         if (features == null){
            return false;
         }
         else {
             Boolean value = features.get(name);
             return (value == null) ? false : value;
         }
!!!4876034.java!!!	isNamespaceAware() : boolean
        return getFromFeatures(NAMESPACES_FEATURE);
!!!4876162.java!!!	setNamespaceAware(inout awareness : boolean) : void
       putInFeatures(NAMESPACES_FEATURE, awareness);
