class Thread
!!!128642.java!!!	nextThreadNum() : int
        return threadInitNumber++;
!!!128770.java!!!	nextThreadID() : long
        return ++threadSeqNumber;
!!!128898.java!!!	blockedOn(inout b : Interruptible) : void
        synchronized (blockerLock) {
            blocker = b;
        }
!!!129410.java!!!	sleep(in millis : long, in nanos : int) : void
        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
                                "nanosecond timeout value out of range");
        }

        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {
            millis++;
        }

        sleep(millis);
!!!129538.java!!!	init(inout g : ThreadGroup, inout target : Runnable, inout name : String, in stackSize : long) : void
        init(g, target, name, stackSize, null, true);
!!!129666.java!!!	init(inout g : ThreadGroup, inout target : Runnable, inout name : String, in stackSize : long, inout acc : AccessControlContext, inout inheritThreadLocals : boolean) : void
        if (name == null) {
            throw new NullPointerException("name cannot be null");
        }

        this.name = name;

        Thread parent = currentThread();
        SecurityManager security = System.getSecurityManager();
        if (g == null) {
            /* Determine if it's an applet or not */

            /* If there is a security manager, ask the security manager
               what to do. */
            if (security != null) {
                g = security.getThreadGroup();
            }

            /* If the security doesn't have a strong opinion of the matter
               use the parent thread group. */
            if (g == null) {
                g = parent.getThreadGroup();
            }
        }

        /* checkAccess regardless of whether or not threadgroup is
           explicitly passed in. */
        g.checkAccess();

        /*
         * Do we have the required permissions?
         */
        if (security != null) {
            if (isCCLOverridden(getClass())) {
                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
            }
        }

        g.addUnstarted();

        this.group = g;
        this.daemon = parent.isDaemon();
        this.priority = parent.getPriority();
        if (security == null || isCCLOverridden(parent.getClass()))
            this.contextClassLoader = parent.getContextClassLoader();
        else
            this.contextClassLoader = parent.contextClassLoader;
        this.inheritedAccessControlContext =
                acc != null ? acc : AccessController.getContext();
        this.target = target;
        setPriority(priority);
        if (inheritThreadLocals && parent.inheritableThreadLocals != null)
            this.inheritableThreadLocals =
                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);
        /* Stash the specified stack size in case the VM cares */
        this.stackSize = stackSize;

        /* Set thread ID */
        tid = nextThreadID();
!!!129794.java!!!	clone() : Object
        throw new CloneNotSupportedException();
!!!129922.java!!!	Thread()
        init(null, null, "Thread-" + nextThreadNum(), 0);
!!!130050.java!!!	Thread(inout target : Runnable)
        init(null, target, "Thread-" + nextThreadNum(), 0);
!!!130178.java!!!	Thread(inout target : Runnable, inout acc : AccessControlContext)
        init(null, target, "Thread-" + nextThreadNum(), 0, acc, false);
!!!130306.java!!!	Thread(inout group : ThreadGroup, inout target : Runnable)
        init(group, target, "Thread-" + nextThreadNum(), 0);
!!!130434.java!!!	Thread(inout name : String)
        init(null, null, name, 0);
!!!130562.java!!!	Thread(inout group : ThreadGroup, inout name : String)
        init(group, null, name, 0);
!!!130690.java!!!	Thread(inout target : Runnable, inout name : String)
        init(null, target, name, 0);
!!!130818.java!!!	Thread(inout group : ThreadGroup, inout target : Runnable, inout name : String)
        init(group, target, name, 0);
!!!130946.java!!!	Thread(inout group : ThreadGroup, inout target : Runnable, inout name : String, in stackSize : long)
        init(group, target, name, stackSize);
!!!131074.java!!!	start() : void
        /**
         * This method is not invoked for the main method thread or "system"
         * group threads created/set up by the VM. Any new functionality added
         * to this method in the future may have to also be added to the VM.
         *
         * A zero status value corresponds to state "NEW".
         */
        if (threadStatus != 0)
            throw new IllegalThreadStateException();

        /* Notify the group that this thread is about to be started
         * so that it can be added to the group's list of threads
         * and the group's unstarted count can be decremented. */
        group.add(this);

        boolean started = false;
        try {
            start0();
            started = true;
        } finally {
            try {
                if (!started) {
                    group.threadStartFailed(this);
                }
            } catch (Throwable ignore) {
                /* do nothing. If start0 threw a Throwable then
                  it will be passed up the call stack */
            }
        }
!!!131330.java!!!	run() : void
        if (target != null) {
            target.run();
        }
!!!131458.java!!!	exit() : void
        if (group != null) {
            group.threadTerminated(this);
            group = null;
        }
        /* Aggressively null out all reference fields: see bug 4006245 */
        target = null;
        /* Speed the release of some of these resources */
        threadLocals = null;
        inheritableThreadLocals = null;
        inheritedAccessControlContext = null;
        blocker = null;
        uncaughtExceptionHandler = null;
!!!131586.java!!!	stop() : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            checkAccess();
            if (this != Thread.currentThread()) {
                security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);
            }
        }
        // A zero status value corresponds to "NEW", it can't change to
        // not-NEW because we hold the lock.
        if (threadStatus != 0) {
            resume(); // Wake up thread if it was suspended; no-op otherwise
        }

        // The VM can handle all thread states
        stop0(new ThreadDeath());
!!!131714.java!!!	stop(inout obj : Throwable) : void
        throw new UnsupportedOperationException();
!!!131842.java!!!	interrupt() : void
        if (this != Thread.currentThread())
            checkAccess();

        synchronized (blockerLock) {
            Interruptible b = blocker;
            if (b != null) {
                interrupt0();           // Just to set the interrupt flag
                b.interrupt(this);
                return;
            }
        }
        interrupt0();
!!!131970.java!!!	interrupted() : boolean
        return currentThread().isInterrupted(true);
!!!132098.java!!!	isInterrupted() : boolean
        return isInterrupted(false);
!!!132354.java!!!	destroy() : void
        throw new NoSuchMethodError();
!!!132610.java!!!	suspend() : void
        checkAccess();
        suspend0();
!!!132738.java!!!	resume() : void
        checkAccess();
        resume0();
!!!132866.java!!!	setPriority(in newPriority : int) : void
        ThreadGroup g;
        checkAccess();
        if (newPriority > MAX_PRIORITY || newPriority < MIN_PRIORITY) {
            throw new IllegalArgumentException();
        }
        if((g = getThreadGroup()) != null) {
            if (newPriority > g.getMaxPriority()) {
                newPriority = g.getMaxPriority();
            }
            setPriority0(priority = newPriority);
        }
!!!132994.java!!!	getPriority() : int
        return priority;
!!!133122.java!!!	setName(inout name : String) : void
        checkAccess();
        if (name == null) {
            throw new NullPointerException("name cannot be null");
        }

        this.name = name;
        if (threadStatus != 0) {
            setNativeName(name);
        }
!!!133250.java!!!	getName() : String
        return name;
!!!133378.java!!!	getThreadGroup() : ThreadGroup
        return group;
!!!133506.java!!!	activeCount() : int
        return currentThread().getThreadGroup().activeCount();
!!!133634.java!!!	enumerate(inout tarray : Thread [[]]) : int
        return currentThread().getThreadGroup().enumerate(tarray);
!!!133890.java!!!	join(in millis : long) : void
        long base = System.currentTimeMillis();
        long now = 0;

        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (millis == 0) {
            while (isAlive()) {
                wait(0);
            }
        } else {
            while (isAlive()) {
                long delay = millis - now;
                if (delay <= 0) {
                    break;
                }
                wait(delay);
                now = System.currentTimeMillis() - base;
            }
        }
!!!134018.java!!!	join(in millis : long, in nanos : int) : void

        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
                                "nanosecond timeout value out of range");
        }

        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {
            millis++;
        }

        join(millis);
!!!134146.java!!!	join() : void
        join(0);
!!!134274.java!!!	dumpStack() : void
        new Exception("Stack trace").printStackTrace();
!!!134402.java!!!	setDaemon(inout on : boolean) : void
        checkAccess();
        if (isAlive()) {
            throw new IllegalThreadStateException();
        }
        daemon = on;
!!!134530.java!!!	isDaemon() : boolean
        return daemon;
!!!134658.java!!!	checkAccess() : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkAccess(this);
        }
!!!134786.java!!!	toString() : String
        ThreadGroup group = getThreadGroup();
        if (group != null) {
            return "Thread[" + getName() + "," + getPriority() + "," +
                           group.getName() + "]";
        } else {
            return "Thread[" + getName() + "," + getPriority() + "," +
                            "" + "]";
        }
!!!134914.java!!!	getContextClassLoader() : ClassLoader
        if (contextClassLoader == null)
            return null;
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            ClassLoader.checkClassLoaderPermission(contextClassLoader,
                                                   Reflection.getCallerClass());
        }
        return contextClassLoader;
!!!135042.java!!!	setContextClassLoader(inout cl : ClassLoader) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new RuntimePermission("setContextClassLoader"));
        }
        contextClassLoader = cl;
!!!135298.java!!!	getStackTrace() : StackTraceElement
        if (this != Thread.currentThread()) {
            // check for getStackTrace permission
            SecurityManager security = System.getSecurityManager();
            if (security != null) {
                security.checkPermission(
                    SecurityConstants.GET_STACK_TRACE_PERMISSION);
            }
            // optimization so we do not call into the vm for threads that
            // have not yet started or have terminated
            if (!isAlive()) {
                return EMPTY_STACK_TRACE;
            }
            StackTraceElement[][] stackTraceArray = dumpThreads(new Thread[] {this});
            StackTraceElement[] stackTrace = stackTraceArray[0];
            // a thread that was alive during the previous isAlive call may have
            // since terminated, therefore not having a stacktrace.
            if (stackTrace == null) {
                stackTrace = EMPTY_STACK_TRACE;
            }
            return stackTrace;
        } else {
            // Don't need JVM help for current thread
            return (new Exception()).getStackTrace();
        }
!!!135426.java!!!	getAllStackTraces() : Map
        // check for getStackTrace permission
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkPermission(
                SecurityConstants.GET_STACK_TRACE_PERMISSION);
            security.checkPermission(
                SecurityConstants.MODIFY_THREADGROUP_PERMISSION);
        }

        // Get a snapshot of the list of all threads
        Thread[] threads = getThreads();
        StackTraceElement[][] traces = dumpThreads(threads);
        Map<Thread, StackTraceElement[]> m = new HashMap<>(threads.length);
        for (int i = 0; i < threads.length; i++) {
            StackTraceElement[] stackTrace = traces[i];
            if (stackTrace != null) {
                m.put(threads[i], stackTrace);
            }
            // else terminated so we don't put it in the map
        }
        return m;
!!!135554.java!!!	isCCLOverridden(inout cl : Class) : boolean
        if (cl == Thread.class)
            return false;

        processQueue(Caches.subclassAuditsQueue, Caches.subclassAudits);
        WeakClassKey key = new WeakClassKey(cl, Caches.subclassAuditsQueue);
        Boolean result = Caches.subclassAudits.get(key);
        if (result == null) {
            result = Boolean.valueOf(auditSubclass(cl));
            Caches.subclassAudits.putIfAbsent(key, result);
        }

        return result.booleanValue();
!!!135682.java!!!	auditSubclass(in subcl : Class) : boolean
        Boolean result = AccessController.doPrivileged(
            new PrivilegedAction<Boolean>() {
                public Boolean run() {
                    for (Class<?> cl = subcl;
                         cl != Thread.class;
                         cl = cl.getSuperclass())
                    {
                        try {
                            cl.getDeclaredMethod("getContextClassLoader", new Class<?>[0]);
                            return Boolean.TRUE;
                        } catch (NoSuchMethodException ex) {
                        }
                        try {
                            Class<?>[] params = {ClassLoader.class};
                            cl.getDeclaredMethod("setContextClassLoader", params);
                            return Boolean.TRUE;
                        } catch (NoSuchMethodException ex) {
                        }
                    }
                    return Boolean.FALSE;
                }
            }
        );
        return result.booleanValue();
!!!136066.java!!!	getId() : long
        return tid;
!!!136194.java!!!	getState() : Thread::State
        // get current thread state
        return sun.misc.VM.toThreadState(threadStatus);
!!!136450.java!!!	setDefaultUncaughtExceptionHandler(inout eh : Thread::UncaughtExceptionHandler) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(
                new RuntimePermission("setDefaultUncaughtExceptionHandler")
                    );
        }

         defaultUncaughtExceptionHandler = eh;
!!!136578.java!!!	getDefaultUncaughtExceptionHandler() : Thread::UncaughtExceptionHandler
        return defaultUncaughtExceptionHandler;
!!!136706.java!!!	getUncaughtExceptionHandler() : Thread::UncaughtExceptionHandler
        return uncaughtExceptionHandler != null ?
            uncaughtExceptionHandler : group;
!!!136834.java!!!	setUncaughtExceptionHandler(inout eh : Thread::UncaughtExceptionHandler) : void
        checkAccess();
        uncaughtExceptionHandler = eh;
!!!136962.java!!!	dispatchUncaughtException(inout e : Throwable) : void
        getUncaughtExceptionHandler().uncaughtException(this, e);
!!!137090.java!!!	processQueue(inout queue : ReferenceQueue, inout map : ConcurrentMap) : void
        Reference<? extends Class<?>> ref;
        while((ref = queue.poll()) != null) {
            map.remove(ref);
        }
