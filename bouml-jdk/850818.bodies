class TreePath
!!!6055298.java!!!	getPath(inout unit : CompilationUnitTree, inout target : Tree) : TreePath
        return getPath(new TreePath(unit), target);
!!!6055426.java!!!	getPath(inout path : TreePath, inout target : Tree) : TreePath
        path.getClass();
        target.getClass();

        class Result extends Error {
            static final long serialVersionUID = -5942088234594905625L;
            TreePath path;
            Result(TreePath path) {
                this.path = path;
            }
        }

        class PathFinder extends TreePathScanner<TreePath,Tree> {
            public TreePath scan(Tree tree, Tree target) {
                if (tree == target) {
                    throw new Result(new TreePath(getCurrentPath(), target));
                }
                return super.scan(tree, target);
            }
        }

        if (path.getLeaf() == target) {
            return path;
        }

        try {
            new PathFinder().scan(path, target);
        } catch (Result result) {
            return result.path;
        }
        return null;
!!!6055554.java!!!	TreePath(inout t : CompilationUnitTree)
        this(null, t);
!!!6055682.java!!!	TreePath(inout p : TreePath, inout t : Tree)
        if (t.getKind() == Tree.Kind.COMPILATION_UNIT) {
            compilationUnit = (CompilationUnitTree) t;
            parent = null;
        }
        else {
            compilationUnit = p.compilationUnit;
            parent = p;
        }
        leaf = t;
!!!6055810.java!!!	getCompilationUnit() : CompilationUnitTree
        return compilationUnit;
!!!6055938.java!!!	getLeaf() : Tree
        return leaf;
!!!6056066.java!!!	getParentPath() : TreePath
        return parent;
!!!6056194.java!!!	iterator() : Iterator
        return new Iterator<Tree>() {
            @Override
            public boolean hasNext() {
                return next != null;
            }

            @Override
            public Tree next() {
                Tree t = next.leaf;
                next = next.parent;
                return t;
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException();
            }

            private TreePath next = TreePath.this;
        };
