class Clipboard
!!!6388226.java!!!	Clipboard(inout name : String)
        this.name = name;
!!!6388354.java!!!	getName() : String
        return name;
!!!6388482.java!!!	setContents(inout contents : Transferable, inout owner : ClipboardOwner) : void
        final ClipboardOwner oldOwner = this.owner;
        final Transferable oldContents = this.contents;

        this.owner = owner;
        this.contents = contents;

        if (oldOwner != null && oldOwner != owner) {
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    oldOwner.lostOwnership(Clipboard.this, oldContents);
                }
            });
        }
        fireFlavorsChanged();
!!!6388610.java!!!	getContents(inout requestor : Object) : Transferable
        return contents;
!!!6388738.java!!!	getAvailableDataFlavors() : DataFlavor
        Transferable cntnts = getContents(null);
        if (cntnts == null) {
            return new DataFlavor[0];
        }
        return cntnts.getTransferDataFlavors();
!!!6388866.java!!!	isDataFlavorAvailable(inout flavor : DataFlavor) : boolean
        if (flavor == null) {
            throw new NullPointerException("flavor");
        }

        Transferable cntnts = getContents(null);
        if (cntnts == null) {
            return false;
        }
        return cntnts.isDataFlavorSupported(flavor);
!!!6388994.java!!!	getData(inout flavor : DataFlavor) : Object
        if (flavor == null) {
            throw new NullPointerException("flavor");
        }

        Transferable cntnts = getContents(null);
        if (cntnts == null) {
            throw new UnsupportedFlavorException(flavor);
        }
        return cntnts.getTransferData(flavor);
!!!6389122.java!!!	addFlavorListener(inout listener : FlavorListener) : void
        if (listener == null) {
            return;
        }
        if (flavorListeners == null) {
            currentDataFlavors = getAvailableDataFlavorSet();
            flavorListeners = new EventListenerAggregate(FlavorListener.class);
        }
        flavorListeners.add(listener);
!!!6389250.java!!!	removeFlavorListener(inout listener : FlavorListener) : void
        if (listener == null || flavorListeners == null) {
            return;
        }
        flavorListeners.remove(listener);
!!!6389378.java!!!	getFlavorListeners() : FlavorListener
        return flavorListeners == null ? new FlavorListener[0] :
                (FlavorListener[])flavorListeners.getListenersCopy();
!!!6389506.java!!!	fireFlavorsChanged() : void
        if (flavorListeners == null) {
            return;
        }
        Set<DataFlavor> prevDataFlavors = currentDataFlavors;
        currentDataFlavors = getAvailableDataFlavorSet();
        if (prevDataFlavors.equals(currentDataFlavors)) {
            return;
        }
        FlavorListener[] flavorListenerArray =
                (FlavorListener[])flavorListeners.getListenersInternal();
        for (int i = 0; i < flavorListenerArray.length; i++) {
            final FlavorListener listener = flavorListenerArray[i];
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    listener.flavorsChanged(new FlavorEvent(Clipboard.this));
                }
            });
        }
!!!6389634.java!!!	getAvailableDataFlavorSet() : Set
        Set<DataFlavor> set = new HashSet<>();
        Transferable contents = getContents(null);
        if (contents != null) {
            DataFlavor[] flavors = contents.getTransferDataFlavors();
            if (flavors != null) {
                set.addAll(Arrays.asList(flavors));
            }
        }
        return set;
