format 222
"bind" // jdk1.8::javax::xml::bind
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/xml/bind/"
  java_package "javax.xml.bind"
  classview 180610 "bind"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1404802 "Binder"
      abstract visibility public 
      nformals 1
      formal name "XmlNode" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enable synchronization between XML infoset nodes and JAXB objects
representing same XML document.

<p>
An instance of this class maintains the association between XML nodes of
an infoset preserving view and a JAXB representation of an XML document.
Navigation between the two views is provided by the methods
{@link #getXMLNode(Object)} and {@link #getJAXBNode(Object)}.

<p>
Modifications can be made to either the infoset preserving view or the
JAXB representation of the document while the other view remains
unmodified. The binder is able to synchronize the changes made in the
modified view back into the other view using the appropriate
Binder update methods, {@link #updateXML(Object, Object)} or
{@link #updateJAXB(Object)}.

<p>
A typical usage scenario is the following:
<ul>
  <li>load XML document into an XML infoset representation</li>
  <li>{@link #unmarshal(Object)} XML infoset view to JAXB view.
      (Note to conserve resources, it is possible to only unmarshal a
      subtree of the XML infoset view to the JAXB view.)</li>
  <li>application access/updates JAXB view of XML document.</li>
  <li>{@link #updateXML(Object)} synchronizes modifications to JAXB view
      back into the XML infoset view. Update operation preserves as
      much of original XML infoset as possible (i.e. comments, PI, ...)</li>
</ul>

<p>
A Binder instance is created using the factory method
{@link JAXBContext#createBinder()} or {@link JAXBContext#createBinder(Class)}.

<p>
The template parameter, <code>XmlNode</code>, is the
root interface/class for the XML infoset preserving representation.
A Binder implementation is required to minimally support
an <code>XmlNode</code> value of <code>org.w3c.dom.Node.class</code>.
A Binder implementation can support alternative XML infoset
preserving representations.

@author
    Kohsuke Kawaguchi (kohsuke.kawaguchi@sun.com)
    Joseph Fialli

@since JAXB 2.0
"
      operation 11933186 "unmarshal"
	abstract cpp_inline public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "xmlNode" explicit_type "XmlNode"
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML infoset view to a JAXB object tree.

<p>
This method is similar to {@link Unmarshaller#unmarshal(Node)}
with the addition of maintaining the association between XML nodes
and the produced JAXB objects, enabling future update operations,
{@link #updateXML(Object, Object)} or {@link #updateJAXB(Object)}.

<p>
When {@link #getSchema()} is non-null, <code>xmlNode</code>
and its descendants is validated during this operation.

<p>
This method throws {@link UnmarshalException} when the Binder's
{@link JAXBContext} does not have a mapping for the XML element name
or the type, specifiable via <tt>@xsi:type</tt>, of <tt>xmlNode</tt>
to a JAXB mapped class. The method {@link #unmarshal(Object, Class)}
enables an application to specify the JAXB mapped class that
the <tt>xmlNode</tt> should be mapped to.

@param xmlNode
     the document/element to unmarshal XML data from.

@return
     the newly created root object of the JAXB object tree.

@throws JAXBException
     If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Binder</tt> is unable to perform the XML to Java
    binding.
@throws IllegalArgumentException
     If the node parameter is null
"
      end

      operation 11933314 "unmarshal"
	abstract cpp_inline public return_type class_ref 1405058 // JAXBElement
	nparams 2
	  param inout name "xmlNode" explicit_type "XmlNode"
	  param inout name "declaredType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML root element by provided <tt>declaredType</tt>
to a JAXB object tree.

<p>
Implements <a href=\"Unmarshaller.html#unmarshalByDeclaredType\">Unmarshal by Declared Type</a>

<p>
This method is similar to {@link Unmarshaller#unmarshal(Node, Class)}
with the addition of maintaining the association between XML nodes
and the produced JAXB objects, enabling future update operations,
{@link #updateXML(Object, Object)} or {@link #updateJAXB(Object)}.

<p>
When {@link #getSchema()} is non-null, <code>xmlNode</code>
and its descendants is validated during this operation.

@param xmlNode
     the document/element to unmarshal XML data from.
@param declaredType
     appropriate JAXB mapped class to hold <tt>node</tt>'s XML data.

@return
<a href=\"JAXBElement.html\">JAXB Element</a> representation
of <tt>node</tt>

@throws JAXBException
     If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Binder</tt> is unable to perform the XML to Java
    binding.
@throws IllegalArgumentException
     If any of the input parameters are null
@since JAXB2.0
"
      end

      operation 11933442 "marshal"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xmlNode" explicit_type "XmlNode"
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal a JAXB object tree to a new XML document.

<p>
This method is similar to {@link Marshaller#marshal(Object, Node)}
with the addition of maintaining the association between JAXB objects
and the produced XML nodes,
enabling future update operations such as
{@link #updateXML(Object, Object)} or {@link #updateJAXB(Object)}.

<p>
When {@link #getSchema()} is non-null, the marshalled
xml content is validated during this operation.

@param jaxbObject
     The content tree to be marshalled.
@param xmlNode
     The parameter must be a Node that accepts children.

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Binder</tt> is unable to marshal <tt>jaxbObject</tt> (or any
     object reachable from <tt>jaxbObject</tt>).

@throws IllegalArgumentException
     If any of the method parameters are null
"
      end

      operation 11933570 "getXMLNode"
	abstract cpp_inline public explicit_return_type "XmlNode"
	nparams 1
	  param inout name "jaxbObject" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the XML element associated with the given JAXB object.

<p>
Once a JAXB object tree is associated with an XML fragment,
this method enables navigation between the two trees.

<p>
An association between an XML element and a JAXB object is
established by the bind methods and the update methods.
Note that this association is partial; not all XML elements
have associated JAXB objects, and not all JAXB objects have
associated XML elements.

@param jaxbObject An instance that is reachable from a prior
                  call to a bind or update method that returned
                  a JAXB object tree.

@return
     null if the specified JAXB object is not known to this
     {@link Binder}, or if it is not associated with an
     XML element.

@throws IllegalArgumentException
     If the jaxbObject parameter is null
"
      end

      operation 11933698 "getJAXBNode"
	abstract cpp_inline public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "xmlNode" explicit_type "XmlNode"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the JAXB object associated with the given XML element.

<p>
Once a JAXB object tree is associated with an XML fragment,
this method enables navigation between the two trees.

<p>
An association between an XML element and a JAXB object is
established by the unmarshal, marshal and update methods.
Note that this association is partial; not all XML elements
have associated JAXB objects, and not all JAXB objects have
associated XML elements.

@return
     null if the specified XML node is not known to this
     {@link Binder}, or if it is not associated with a
     JAXB object.

@throws IllegalArgumentException
     If the node parameter is null
"
      end

      operation 11933826 "updateXML"
	abstract cpp_inline public explicit_return_type "XmlNode"
	nparams 1
	  param inout name "jaxbObject" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes an JAXB object and updates
its associated XML node and its descendants.

<p>
This is a convenience method of:
<pre>
updateXML( jaxbObject, getXMLNode(jaxbObject));
</pre>

@throws JAXBException
     If any unexpected problem occurs updating corresponding XML content.
@throws IllegalArgumentException
     If the jaxbObject parameter is null
"
      end

      operation 11933954 "updateXML"
	abstract cpp_inline public explicit_return_type "XmlNode"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xmlNode" explicit_type "XmlNode"
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes in JAXB object tree are updated in its associated XML parse tree.

<p>
This operation can be thought of as an \"in-place\" marshalling.
The difference is that instead of creating a whole new XML tree,
this operation updates an existing tree while trying to preserve
the XML as much as possible.

<p>
For example, unknown elements/attributes in XML that were not bound
to JAXB will be left untouched (whereas a marshalling operation
would create a new tree that doesn't contain any of those.)

<p>
As a side-effect, this operation updates the association between
XML nodes and JAXB objects.

@param jaxbObject root of potentially modified JAXB object tree
@param xmlNode    root of update target XML parse tree

@return
     Returns the updated XML node. Typically, this is the same
     node you passed in as <i>xmlNode</i>, but it maybe
     a different object, for example when the tag name of the object
     has changed.

@throws JAXBException
     If any unexpected problem occurs updating corresponding XML content.
@throws IllegalArgumentException
     If any of the input parameters are null
"
      end

      operation 11934082 "updateJAXB"
	abstract cpp_inline public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "xmlNode" explicit_type "XmlNode"
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes an XML node and updates its associated JAXB object and its descendants.

<p>
This operation can be thought of as an \"in-place\" unmarshalling.
The difference is that instead of creating a whole new JAXB tree,
this operation updates an existing tree, reusing as much JAXB objects
as possible.

<p>
As a side-effect, this operation updates the association between
XML nodes and JAXB objects.

@return
     Returns the updated JAXB object. Typically, this is the same
     object that was returned from earlier
     {@link #marshal(Object,Object)} or
     {@link #updateJAXB(Object)} method invocation,
     but it maybe
     a different object, for example when the name of the XML
     element has changed.

@throws JAXBException
     If any unexpected problem occurs updating corresponding JAXB mapped content.
@throws IllegalArgumentException
     If node parameter is null
"
      end

      operation 11934210 "setSchema"
	abstract cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "schema" type class_ref 719490 // Schema
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether marshal, unmarshal and update methods
performs validation on their XML content.

@param schema set to null to disable validation.

@see Unmarshaller#setSchema(Schema)
"
      end

      operation 11934338 "getSchema"
	abstract cpp_inline public return_type class_ref 719490 // Schema
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the last {@link Schema} object (including null) set by the
{@link #setSchema(Schema)} method.

@return the Schema object for validation or null if not present
"
      end

      operation 11934466 "setEventHandler"
	abstract cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1405186 // ValidationEventHandler
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allow an application to register a <tt>ValidationEventHandler</tt>.
<p>
The <tt>ValidationEventHandler</tt> will be called by the JAXB Provider
if any validation errors are encountered during calls to any of the
Binder unmarshal, marshal and update methods.

<p>
Calling this method with a null parameter will cause the Binder
to revert back to the default default event handler.

@param handler the validation event handler
@throws JAXBException if an error was encountered while setting the
        event handler
"
      end

      operation 11934594 "getEventHandler"
	abstract cpp_inline public return_type class_ref 1405186 // ValidationEventHandler
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current event handler or the default event handler if one
hasn't been set.

@return the current ValidationEventHandler or the default event handler
        if it hasn't been set
@throws JAXBException if an error was encountered while getting the
        current event handler
"
      end

      operation 11934722 "setProperty"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Set the particular property in the underlying implementation of
<tt>Binder</tt>.  This method can only be used to set one of
the standard JAXB defined unmarshal/marshal properties
or a provider specific property for binder, unmarshal or marshal.
Attempting to set an undefined property will result in
a PropertyException being thrown.  See
<a href=\"Unmarshaller.html#supportedProps\">Supported Unmarshal Properties</a>
and
<a href=\"Marshaller.html#supportedProps\">Supported Marshal Properties</a>.

@param name the name of the property to be set. This value can either
             be specified using one of the constant fields or a user
             supplied string.
@param value the value of the property to be set

@throws PropertyException when there is an error processing the given
                           property or value
@throws IllegalArgumentException
     If the name parameter is null
"
      end

      operation 11934850 "getProperty"
	abstract cpp_inline public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the particular property in the underlying implementation of
<tt>Binder</tt>.  This method can only
be used to get one of
the standard JAXB defined unmarshal/marshal properties
or a provider specific property for binder, unmarshal or marshal.
Attempting to get an undefined property will result in
a PropertyException being thrown.  See
<a href=\"Unmarshaller.html#supportedProps\">Supported Unmarshal Properties</a>
and
<a href=\"Marshaller.html#supportedProps\">Supported Marshal Properties</a>.

@param name the name of the property to retrieve
@return the value of the requested property

@throws PropertyException
     when there is an error retrieving the given property or value
     property name
@throws IllegalArgumentException
     If the name parameter is null
"
      end
    end

    class 1404930 "JAXBException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the root exception class for all JAXB exceptions.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li></ul>
@see JAXBContext
@see Marshaller
@see Unmarshaller
@since JAXB1.0
"
      classrelation 4753154 // <generalisation>
	relation 4753154 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4753154 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 4753282 // errorCode (<unidirectional association>)
	relation 4753282 --->
	  a role_name "errorCode" private
	    comment "
Vendor specific error code


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4753282 // errorCode (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4753410 // linkedException (<unidirectional association>)
	relation 4753410 --->
	  a role_name "linkedException" volatile private
	    comment "
Exception reference


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4753410 // linkedException (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      attribute 2616962 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -5621384651494307979L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 11964418 "JAXBException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JAXBException with the specified detail message.  The
errorCode and linkedException will default to null.

@param message a description of the exception
"
      end

      operation 11964546 "JAXBException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JAXBException with the specified detail message and vendor
specific errorCode.  The linkedException will default to null.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
"
      end

      operation 11964674 "JAXBException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JAXBException with a linkedException.  The detail message and
vendor specific errorCode will default to null.

@param exception the linked exception
"
      end

      operation 11964802 "JAXBException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JAXBException with the specified detail message and
linkedException.  The errorCode will default to null.

@param message a description of the exception
@param exception the linked exception
"
      end

      operation 11964930 "JAXBException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JAXBException with the specified detail message, vendor
specific errorCode, and linkedException.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
@param exception the linked exception
"
      end

      operation 11965058 "getErrorCode"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the vendor specific error code

@return a string specifying the vendor specific error code
"
      end

      operation 11965186 "getLinkedException"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the linked exception

@return the linked Exception, null if none exists
"
      end

      operation 11965314 "setLinkedException"
	public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a linked Exception.

@param exception the linked Exception (A null value is permitted and
                 indicates that the linked exception does not exist or
                 is unknown).
"
      end

      operation 11965442 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a short description of this JAXBException.

"
      end

      operation 11965570 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128258 // PrintStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this JAXBException and its stack trace (including the stack trace
of the linkedException if it is non-null) to the PrintStream.

@param s PrintStream to use for output
"
      end

      operation 11965698 "printStackTrace"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this JAXBException and its stack trace (including the stack trace
of the linkedException if it is non-null) to <tt>System.err</tt>.

"
      end

      operation 11965826 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 195330 // PrintWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this JAXBException and its stack trace (including the stack trace
of the linkedException if it is non-null) to the PrintWriter.

@param s PrintWriter to use for output
"
      end

      operation 11965954 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1405058 "JAXBElement"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>JAXB representation of an Xml Element.</p>

<p>This class represents information about an Xml Element from both the element
declaration within a schema and the element instance value within an xml document
with the following properties
<ul>
  <li>element's xml tag <b><tt>name</tt></b></li>
  <li><b><tt>value</tt></b> represents the element instance's atttribute(s) and content model</li>
  <li>element declaration's <b><tt>declaredType</tt></b> (<tt>xs:element @type</tt> attribute)</li>
  <li><b><tt>scope</tt></b> of element declaration</li>
  <li>boolean <b><tt>nil</tt></b> property. (element instance's <tt><b>xsi:nil</b></tt> attribute)</li>
</ul>

<p>The <tt>declaredType</tt> and <tt>scope</tt> property are the
JAXB class binding for the xml type definition.
</p>

<p><b><tt>Scope</tt></b> is either {@link GlobalScope} or the Java class representing the
complex type definition containing the schema element declaration.
</p>

<p>There is a property constraint that if <b><tt>value</tt></b> is <tt>null</tt>,
then <tt>nil</tt> must be <tt>true</tt>. The converse is not true to enable
representing a nil element with attribute(s). If <tt>nil</tt> is true, it is possible
that <tt>value</tt> is non-null so it can hold the value of the attributes
associated with a nil element.
</p>

@author Kohsuke Kawaguchi, Joe Fialli
@since JAXB 2.0
"
      classrelation 4752642 // <realization>
	relation 4752642 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4752642 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 4752770 // name (<unidirectional association>)
	relation 4752770 --->
	  a role_name "name" const_relation protected
	    comment " xml element tag name 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4752770 // name (<unidirectional association>)
	  b parent class_ref 673666 // QName
      end

      classrelation 4752898 // declaredType (<unidirectional association>)
	relation 4752898 --->
	  a role_name "declaredType" const_relation protected
	    comment " Java datatype binding for xml element declaration's type. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 4752898 // declaredType (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 4753026 // scope (<unidirectional association>)
	relation 4753026 --->
	  a role_name "scope" const_relation protected
	    comment " Scope of xml element declaration representing this xml element instance.
 Can be one of the following values:
 - {@link GlobalScope} for global xml element declaration.
 - local element declaration has a scope set to the Java class
    representation of complex type defintion containing
    xml element declaration.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4753026 // scope (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 2616578 "value"
	protected explicit_type "T"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " xml element value.
Represents content model and attributes of an xml element instance. 
"
      end

      attribute 2616706 "nil"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true iff the xml element instance has xsi:nil=\"true\". 
"
      end

      class 1407618 "GlobalScope"
	visibility public 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 11963010 "JAXBElement"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 673666 // QName
	  param inout name "declaredType" type class_ref 130818 // Class
	  param inout name "scope" type class_ref 130818 // Class
	  param inout name "value" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct an xml element instance.</p>

@param name          Java binding of xml element tag name
@param declaredType  Java binding of xml element declaration's type
@param scope
     Java binding of scope of xml element declaration.
     Passing null is the same as passing <tt>GlobalScope.class</tt>
@param value
     Java instance representing xml element's value.
@see #getScope()
@see #isTypeSubstituted()
"
      end

      operation 11963138 "JAXBElement"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 673666 // QName
	  param inout name "declaredType" type class_ref 130818 // Class
	  param inout name "value" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an xml element instance.

This is just a convenience method for <tt>new JAXBElement(name,declaredType,GlobalScope.class,value)</tt>
"
      end

      operation 11963266 "getDeclaredType"
	cpp_inline public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java binding of the xml element declaration's type attribute.
"
      end

      operation 11963394 "getName"
	cpp_inline public return_type class_ref 673666 // QName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the xml element tag name.
"
      end

      operation 11963522 "setValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "t" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the content model and attributes of this xml element.</p>

<p>When this property is set to <tt>null</tt>, <tt>isNil()</tt> must by <tt>true</tt>.
   Details of constraint are described at {@link #isNil()}.</p>

@see #isTypeSubstituted()
"
      end

      operation 11963650 "getValue"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the content model and attribute values for this element.</p>

<p>See {@link #isNil()} for a description of a property constraint when
this value is <tt>null</tt></p>
"
      end

      operation 11963778 "getScope"
	cpp_inline public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns scope of xml element declaration.

@see #isGlobalScope()
@return <tt>GlobalScope.class</tt> if this element is of global scope.
"
      end

      operation 11963906 "isNil"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns <tt>true</tt> iff this element instance content model
is nil.</p>

<p>This property always returns <tt>true</tt> when {@link #getValue()} is null.
Note that the converse is not true, when this property is <tt>true</tt>,
{@link #getValue()} can contain a non-null value for attribute(s). It is
valid for a nil xml element to have attribute(s).</p>
"
      end

      operation 11964034 "setNil"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set whether this element has nil content.</p>

@see #isNil()
"
      end

      operation 11964162 "isGlobalScope"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience methods
(Not necessary but they do unambiguously conceptualize
 the rationale behind this class' fields.)


Returns true iff this xml element declaration is global.
"
      end

      operation 11964290 "isTypeSubstituted"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true iff this xml element instance's value has a different
type than xml element declaration's declared type.
"
      end

      attribute 2616834 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1405186 "ValidationEventHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A basic event handler interface for validation errors.

<p>
If an application needs to implement customized event handling, it must
implement this interface and then register it with either the
{@link Unmarshaller#setEventHandler(ValidationEventHandler) Unmarshaller},
the {@link Validator#setEventHandler(ValidationEventHandler) Validator}, or
the {@link Marshaller#setEventHandler(ValidationEventHandler) Marshaller}.
The JAXB Provider will then report validation errors and warnings encountered
during the unmarshal, marshal, and validate operations to these event
handlers.

<p>
If the <tt>handleEvent</tt> method throws an unchecked runtime exception,
the JAXB Provider must treat that as if the method returned false, effectively
terminating whatever operation was in progress at the time (unmarshal,
validate, or marshal).

<p>
Modifying the Java content tree within your event handler is undefined
by the specification and may result in unexpected behaviour.

<p>
Failing to return false from the <tt>handleEvent</tt> method after
encountering a fatal error is undefined by the specification and may result
in unexpected behavior.

<p>
<b>Default Event Handler</b>
<blockquote>
   See: <a href=\"Validator.html#defaulthandler\">Validator javadocs</a>
</blockquote>

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see Unmarshaller
@see Validator
@see Marshaller
@see ValidationEvent
@see javax.xml.bind.util.ValidationEventCollector
@since JAXB1.0
"
      operation 11978498 "handleEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 1408514 // ValidationEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of a validation warning or error.

The ValidationEvent will have a
{@link ValidationEventLocator ValidationEventLocator} embedded in it that
indicates where the error or warning occurred.

<p>
If an unchecked runtime exception is thrown from this method, the JAXB
provider will treat it as if the method returned false and interrupt
the current unmarshal, validate, or marshal operation.

@param event the encapsulated validation event information.  It is a
provider error if this parameter is null.
@return true if the JAXB Provider should attempt to continue the current
        unmarshal, validate, or marshal operation after handling this
        warning/error, false if the provider should terminate the current
        operation with the appropriate <tt>UnmarshalException</tt>,
        <tt>ValidationException</tt>, or <tt>MarshalException</tt>.
@throws IllegalArgumentException if the event object is null.
"
      end
    end

    class 1405314 "PropertyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception indicates that an error was encountered while getting or
setting a property.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see JAXBContext
@see Validator
@see Unmarshaller
@since JAXB1.0
"
      classrelation 4755970 // <generalisation>
	relation 4755970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4755970 // <generalisation>
	  b parent class_ref 1404930 // JAXBException
      end

      operation 11971458 "PropertyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PropertyException with the specified detail message.  The
errorCode and linkedException will default to null.

@param message a description of the exception
"
      end

      operation 11971586 "PropertyException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PropertyException with the specified detail message and
vendor specific errorCode.  The linkedException will default to null.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
"
      end

      operation 11971714 "PropertyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PropertyException with a linkedException.  The detail
message and vendor specific errorCode will default to null.

@param exception the linked exception
"
      end

      operation 11971842 "PropertyException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PropertyException with the specified detail message and
linkedException.  The errorCode will default to null.

@param message a description of the exception
@param exception the linked exception
"
      end

      operation 11971970 "PropertyException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PropertyException with the specified detail message, vendor
specific errorCode, and linkedException.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
@param exception the linked exception
"
      end

      operation 11972098 "PropertyException"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PropertyException whose message field is set based on the
name of the property and value.toString().

@param name the name of the property related to this exception
@param value the value of the property related to this exception
"
      end
    end

    class 1405442 "ContextFinder"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is package private and therefore is not exposed as part of the
JAXB API.

This code is designed to implement the JAXB 1.0 spec pluggability feature

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li></ul>
@see JAXBContext
"
      classrelation 4750850 // logger (<unidirectional association>)
	relation 4750850 --->
	  a role_name "logger" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4750850 // logger (<unidirectional association>)
	  b parent class_ref 215298 // Logger
      end

      extra_member 188290 "initialization"
	
	cpp "" ""
	java "  static {
        logger = Logger.getLogger(\"javax.xml.bind\");
        try {
            if (AccessController.doPrivileged(new GetPropertyAction(\"jaxb.debug\")) != null) {
                // disconnect the logger from a bigger framework (if any)
                // and take the matters into our own hands
                logger.setUseParentHandlers(false);
                logger.setLevel(Level.ALL);
                ConsoleHandler handler = new ConsoleHandler();
                handler.setLevel(Level.ALL);
                logger.addHandler(handler);
            } else {
                // don't change the setting of this logger
                // to honor what other frameworks
                // have done on configurations.
            }
        } catch(Throwable t) {
            // just to be extra safe. in particular System.getProperty may throw
            // SecurityException.
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 11934978 "handleInvocationTargetException"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 193410 // InvocationTargetException
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the {@link InvocationTargetException} wraps an exception that shouldn't be wrapped,
throw the wrapped exception.
"
      end

      operation 11935106 "handleClassCastException"
	class_operation private return_type class_ref 1404930 // JAXBException
	nparams 2
	  param inout name "originalType" type class_ref 130818 // Class
	  param inout name "targetType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if two types (JAXBContext in this case) will generate a ClassCastException.

For example, (targetType)originalType

@param originalType
         The Class object of the type being cast
@param targetType
         The Class object of the type that is being cast to
@return JAXBException to be thrown.
"
      end

      operation 11935234 "newInstance"
	class_operation package return_type class_ref 1405570 // JAXBContext
	nparams 4
	  param inout name "contextPath" type class_ref 128130 // String
	  param inout name "className" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	  param inout name "properties" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an instance of a class using the specified ClassLoader
"
      end

      operation 11935362 "newInstance"
	class_operation package return_type class_ref 1405570 // JAXBContext
	nparams 4
	  param inout name "contextPath" type class_ref 128130 // String
	  param inout name "spFactory" type class_ref 130818 // Class
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	  param inout name "properties" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11935490 "newInstance"
	class_operation package return_type class_ref 1405570 // JAXBContext
	nparams 3
	  param inout name "classes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "properties" type class_ref 130178 // Map
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an instance of a class using the thread context ClassLoader
"
      end

      operation 11935618 "newInstance"
	class_operation package return_type class_ref 1405570 // JAXBContext
	nparams 3
	  param inout name "classes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "properties" type class_ref 130178 // Map
	  param inout name "spFactory" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11935746 "find"
	class_operation package return_type class_ref 1405570 // JAXBContext
	nparams 4
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "contextPath" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	  param inout name "properties" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11935874 "find"
	class_operation package return_type class_ref 1405570 // JAXBContext
	nparams 2
	  param inout name "classes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "properties" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11936002 "lookupJaxbContextUsingOsgiServiceLoader"
	class_operation private return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11936130 "loadJAXBProperties"
	class_operation private return_type class_ref 240130 // Properties
	nparams 2
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	  param inout name "propFileName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11936258 "which"
	class_operation package return_type class_ref 243458 // URL
	nparams 2
	  param inout name "clazz" type class_ref 130818 // Class
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Search the given ClassLoader for an instance of the specified class and
return a string representation of the URL that points to the resource.

@param clazz
         The class to search for
@param loader
         The ClassLoader to search.  If this parameter is null, then the
         system class loader will be searched
@return
         the URL for the class or null if it wasn't found
"
      end

      operation 11936386 "which"
	class_operation package return_type class_ref 243458 // URL
	nparams 1
	  param inout name "clazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the URL for the Class from it's ClassLoader.

Convenience method for {@link #which(Class, ClassLoader)}.

Equivalent to calling: which(clazz, clazz.getClassLoader())

@param clazz
         The class to search for
@return
         the URL for the class or null if it wasn't found
"
      end

      classrelation 4750978 // PLATFORM_DEFAULT_FACTORY_CLASS (<unidirectional association>)
	relation 4750978 --->
	  a role_name "PLATFORM_DEFAULT_FACTORY_CLASS" init_value " \"com.sun.xml.internal.bind.v2.ContextFactory\"" class_relation const_relation private
	    comment "
When JAXB is in J2SE, rt.jar has to have a JAXB implementation.
However, rt.jar cannot have META-INF/services/javax.xml.bind.JAXBContext
because if it has, it will take precedence over any file that applications have
in their jar files.

<p>
When the user bundles his own JAXB implementation, we'd like to use it, and we
want the platform default to be used only when there's no other JAXB provider.

<p>
For this reason, we have to hard-code the class name into the API.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4750978 // PLATFORM_DEFAULT_FACTORY_CLASS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11936514 "safeLoadClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the class, provided that the calling thread has an access to the class being loaded.
"
      end

      operation 11936642 "getContextClassLoader"
	class_operation private return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11936770 "getClassClassLoader"
	class_operation private return_type class_ref 129026 // ClassLoader
	nparams 1
	  param in name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11936898 "getSystemClassLoader"
	class_operation private return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1405570 "JAXBContext"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
The <tt>JAXBContext</tt> class provides the client's entry point to the
JAXB API. It provides an abstraction for managing the XML/Java binding
information necessary to implement the JAXB binding framework operations:
unmarshal, marshal and validate.

<p>A client application normally obtains new instances of this class using
one of these two styles for newInstance methods, although there are other
specialized forms of the method available:

<ul>
  <li>{@link #newInstance(String,ClassLoader) JAXBContext.newInstance( \"com.acme.foo:com.acme.bar\" )} <br/>
  The JAXBContext instance is initialized from a list of colon
  separated Java package names. Each java package contains
  JAXB mapped classes, schema-derived classes and/or user annotated
  classes. Additionally, the java package may contain JAXB package annotations
  that must be processed. (see JLS, Section 7.4.1 \"Named Packages\").
  </li>
  <li>{@link #newInstance(Class...) JAXBContext.newInstance( com.acme.foo.Foo.class )} <br/>
   The JAXBContext instance is initialized with class(es)
   passed as parameter(s) and classes that are statically reachable from
   these class(es). See {@link #newInstance(Class...)} for details.
  </li>
</ul>

<p>
<i><B>SPEC REQUIREMENT:</B> the provider must supply an implementation
class containing the following method signatures:</i>

<pre>
public static JAXBContext createContext( String contextPath, ClassLoader classLoader, Map&lt;String,Object> properties ) throws JAXBException
public static JAXBContext createContext( Class[] classes, Map&lt;String,Object> properties ) throws JAXBException
</pre>

<p><i>
The following JAXB 1.0 requirement is only required for schema to
java interface/implementation binding. It does not apply to JAXB annotated
classes. JAXB Providers must generate a <tt>jaxb.properties</tt> file in
each package containing schema derived classes.  The property file must
contain a property named <tt>javax.xml.bind.context.factory</tt> whose
value is the name of the class that implements the <tt>createContext</tt>
APIs.</i>

<p><i>
The class supplied by the provider does not have to be assignable to
<tt>javax.xml.bind.JAXBContext</tt>, it simply has to provide a class that
implements the <tt>createContext</tt> APIs.</i>

<p><i>
In addition, the provider must call the
{@link DatatypeConverter#setDatatypeConverter(DatatypeConverterInterface)
DatatypeConverter.setDatatypeConverter} api prior to any client
invocations of the marshal and unmarshal methods.  This is necessary to
configure the datatype converter that will be used during these operations.</i>

<a name=\"Unmarshalling\"></a>
<h3>Unmarshalling</h3>
<p>
The {@link Unmarshaller} class provides the client application the ability
to convert XML data into a tree of Java content objects.
The unmarshal method allows for
any global XML element declared in the schema to be unmarshalled as
the root of an instance document.
Additionally, the unmarshal method allows for an unrecognized root element that
has  an xsi:type attribute's value that references a type definition declared in
the schema  to be unmarshalled as the root of an instance document.
The <tt>JAXBContext</tt> object
allows the merging of global elements and type definitions across a set of schemas (listed
in the <tt>contextPath</tt>). Since each schema in the schema set can belong
to distinct namespaces, the unification of schemas to an unmarshalling
context should be namespace independent.  This means that a client
application is able to unmarshal XML documents that are instances of
any of the schemas listed in the <tt>contextPath</tt>.  For example:

<pre>
       JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo:com.acme.bar\" );
       Unmarshaller u = jc.createUnmarshaller();
       FooObject fooObj = (FooObject)u.unmarshal( new File( \"foo.xml\" ) ); // ok
       BarObject barObj = (BarObject)u.unmarshal( new File( \"bar.xml\" ) ); // ok
       BazObject bazObj = (BazObject)u.unmarshal( new File( \"baz.xml\" ) ); // error, \"com.acme.baz\" not in contextPath
</pre>

<p>
The client application may also generate Java content trees explicitly rather
than unmarshalling existing XML data.  For all JAXB-annotated value classes,
an application can create content using constructors.
For schema-derived interface/implementation classes and for the
creation of elements that are not bound to a JAXB-annotated
class, an application needs to have access and knowledge about each of
the schema derived <tt> ObjectFactory</tt> classes that exist in each of
java packages contained in the <tt>contextPath</tt>.  For each schema
derived java class, there is a static factory method that produces objects
of that type.  For example,
assume that after compiling a schema, you have a package <tt>com.acme.foo</tt>
that contains a schema derived interface named <tt>PurchaseOrder</tt>.  In
order to create objects of that type, the client application would use the
factory method like this:

<pre>
      com.acme.foo.PurchaseOrder po =
          com.acme.foo.ObjectFactory.createPurchaseOrder();
</pre>

<p>
Once the client application has an instance of the the schema derived object,
it can use the mutator methods to set content on it.

<p>
For more information on the generated <tt>ObjectFactory</tt> classes, see
Section 4.2 <i>Java Package</i> of the specification.

<p>
<i><B>SPEC REQUIREMENT:</B> the provider must generate a class in each
package that contains all of the necessary object factory methods for that
package named ObjectFactory as well as the static
<tt>newInstance( javaContentInterface )</tt> method</i>

<h3>Marshalling</h3>
<p>
The {@link Marshaller} class provides the client application the ability
to convert a Java content tree back into XML data.  There is no difference
between marshalling a content tree that is created manually using the factory
methods and marshalling a content tree that is the result an <tt>unmarshal
</tt> operation.  Clients can marshal a java content tree back to XML data
to a <tt>java.io.OutputStream</tt> or a <tt>java.io.Writer</tt>.  The
marshalling process can alternatively produce SAX2 event streams to a
registered <tt>ContentHandler</tt> or produce a DOM Node object.
Client applications have control over the output encoding as well as
whether or not to marshal the XML data as a complete document or
as a fragment.

<p>
Here is a simple example that unmarshals an XML document and then marshals
it back out:

<pre>
       JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );

       // unmarshal from foo.xml
       Unmarshaller u = jc.createUnmarshaller();
       FooObject fooObj = (FooObject)u.unmarshal( new File( \"foo.xml\" ) );

       // marshal to System.out
       Marshaller m = jc.createMarshaller();
       m.marshal( fooObj, System.out );
</pre>


<h3>Validation</h3>
<p>
Validation has been changed significantly since JAXB 1.0.  The {@link Validator}
class has been deprecated and made optional.  This means that you are advised
not to use this class and, in fact, it may not even be available depending on
your JAXB provider.  JAXB 1.0 client applications that rely on <tt>Validator</tt>
will still work properly when deployed with the JAXB 1.0 runtime system.

In JAXB 2.0, the {@link Unmarshaller} has included convenince methods that expose
the JAXP 1.3 {@link javax.xml.validation} framework.  Please refer to the
{@link Unmarshaller#setSchema(javax.xml.validation.Schema)} API for more
information.


<h3>JAXB Runtime Binding Framework Compatibility</h3>
<p>
The following JAXB 1.0 restriction only applies to binding schema to
interfaces/implementation classes.
Since this binding does not require a common runtime system, a JAXB
client application must not attempt to mix runtime objects (<tt>JAXBContext,
Marshaller</tt>, etc. ) from different providers.  This does not
mean that the client application isn't portable, it simply means that a
client has to use a runtime system provided by the same provider that was
used to compile the schema.


<h3>Discovery of JAXB implementation</h3>
<p>
When one of the <tt>newInstance</tt> methods is called, a JAXB implementation is discovered
by the following steps.

<ol>
<li>
For each package/class explicitly passed in to the {@link #newInstance} method, in the order they are specified,
<tt>jaxb.properties</tt> file is looked up in its package, by using the associated classloader &mdash;
this is {@link Class#getClassLoader() the owner class loader} for a {@link Class} argument, and for a package
the specified {@link ClassLoader}.

<p>
If such a file is discovered, it is {@link Properties#load(InputStream) loaded} as a property file, and
the value of the {@link #JAXB_CONTEXT_FACTORY} key will be assumed to be the provider factory class.
This class is then loaded by the associated classloader discussed above.

<p>
This phase of the look up allows some packages to force the use of a certain JAXB implementation.
(For example, perhaps the schema compiler has generated some vendor extension in the code.)

<li>
If the system property {@link #JAXB_CONTEXT_FACTORY} exists, then its value is assumed to be the provider
factory class. This phase of the look up enables per-JVM override of the JAXB implementation.

<li>
Look for <tt>/META-INF/services/javax.xml.bind.JAXBContext</tt> file in the associated classloader.
This file follows the standard service descriptor convention, and if such a file exists, its content
is assumed to be the provider factory class. This phase of the look up is for automatic discovery.
It allows users to just put a JAXB implementation in a classpath and use it without any furhter configuration.

<li>
Finally, if all the steps above fail, then the rest of the look up is unspecified. That said,
the recommended behavior is to simply look for some hard-coded platform default JAXB implementation.
This phase of the look up is so that JavaSE can have its own JAXB implementation as the last resort.
</ol>

<p>
Once the provider factory class is discovered, its
<tt>public static JAXBContext createContext(String,ClassLoader,Map)</tt> method
(see {@link #newInstance(String, ClassLoader, Map)} for the parameter semantics.)
or <tt>public static JAXBContext createContet(Class[],Map)</tt> method
(see {@link #newInstance(Class[], Map)} for the parameter semantics) are invoked
to create a {@link JAXBContext}.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see Marshaller
@see Unmarshaller
@see S 7.4.1 \"Named Packages\" in Java Language Specification</a>
@since JAXB1.0
"
      classrelation 4752514 // JAXB_CONTEXT_FACTORY (<unidirectional association>)
	relation 4752514 --->
	  a role_name "JAXB_CONTEXT_FACTORY" init_value "
        \"javax.xml.bind.context.factory\"" class_relation const_relation public
	    comment "
The name of the property that contains the name of the class capable
of creating new <tt>JAXBContext</tt> objects.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4752514 // JAXB_CONTEXT_FACTORY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11961218 "JAXBContext"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11961346 "newInstance"
	class_operation public return_type class_ref 1405570 // JAXBContext
	nparams 1
	  param inout name "contextPath" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Obtain a new instance of a <tt>JAXBContext</tt> class.

<p>
This is a convenience method to invoke the
{@link #newInstance(String,ClassLoader)} method with
the context class loader of the current thread.

@throws JAXBException if an error was encountered while creating the
                      <tt>JAXBContext</tt> such as
<ol>
  <li>failure to locate either ObjectFactory.class or jaxb.index in the packages</li>
  <li>an ambiguity among global elements contained in the contextPath</li>
  <li>failure to locate a value for the context factory provider property</li>
  <li>mixing schema derived packages from different providers on the same contextPath</li>
</ol>
"
      end

      operation 11961474 "newInstance"
	class_operation public return_type class_ref 1405570 // JAXBContext
	nparams 2
	  param inout name "contextPath" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Obtain a new instance of a <tt>JAXBContext</tt> class.

<p>
The client application must supply a context path which is a list of
colon (':', \\u005Cu003A) separated java package names that contain
schema-derived classes and/or fully qualified JAXB-annotated classes.
Schema-derived
code is registered with the JAXBContext by the
ObjectFactory.class generated per package.
Alternatively than being listed in the context path, programmer
annotated JAXB mapped classes can be listed in a
<tt>jaxb.index</tt> resource file, format described below.
Note that a java package can contain both schema-derived classes and
user annotated JAXB classes. Additionally, the java package may
contain JAXB package annotations  that must be processed. (see JLS,
Section 7.4.1 \"Named Packages\").
</p>

<p>
Every package listed on the contextPath must meet <b>one or both</b> of the
following conditions otherwise a <tt>JAXBException</tt> will be thrown:
</p>
<ol>
  <li>it must contain ObjectFactory.class</li>
  <li>it must contain jaxb.index</li>
</ol>

<p>
<b>Format for jaxb.index</b>
<p>
The file contains a newline-separated list of class names.
Space and tab characters, as well as blank
lines, are ignored. The comment character
is '#' (0x23); on each line all characters following the first comment
character are ignored. The file must be encoded in UTF-8. Classes that
are reachable, as defined in {@link #newInstance(Class...)}, from the
listed classes are also registered with JAXBContext.
<p>
Constraints on class name occuring in a <tt>jaxb.index</tt> file are:
<ul>
  <li>Must not end with \".class\".</li>
  <li>Class names are resolved relative to package containing
      <tt>jaxb.index</tt> file. Only classes occuring directly in package
      containing <tt>jaxb.index</tt> file are allowed.</li>
  <li>Fully qualified class names are not allowed.
      A qualified class name,relative to current package,
      is only allowed to specify a nested or inner class.</li>
</ul>

<p>
To maintain compatibility with JAXB 1.0 schema to java
interface/implementation binding, enabled by schema customization
<tt>&lt;jaxb:globalBindings valueClass=\"false\"></tt>,
the JAXB provider will ensure that each package on the context path
has a <tt>jaxb.properties</tt> file which contains a value for the
<tt>javax.xml.bind.context.factory</tt> property and that all values
resolve to the same provider.  This requirement does not apply to
JAXB annotated classes.

<p>
If there are any global XML element name collisions across the various
packages listed on the <tt>contextPath</tt>, a <tt>JAXBException</tt>
will be thrown.

<p>
Mixing generated interface/impl bindings from multiple JAXB Providers
in the same context path may result in a <tt>JAXBException</tt>
being thrown.

<p>
The steps involved in discovering the JAXB implementation is discussed in the class javadoc.

@param contextPath list of java package names that contain schema
                   derived class and/or java to schema (JAXB-annotated)
                   mapped classes
@param classLoader
     This class loader will be used to locate the implementation
     classes.

@return a new instance of a <tt>JAXBContext</tt>
@throws JAXBException if an error was encountered while creating the
                      <tt>JAXBContext</tt> such as
<ol>
  <li>failure to locate either ObjectFactory.class or jaxb.index in the packages</li>
  <li>an ambiguity among global elements contained in the contextPath</li>
  <li>failure to locate a value for the context factory provider property</li>
  <li>mixing schema derived packages from different providers on the same contextPath</li>
</ol>
"
      end

      operation 11961602 "newInstance"
	class_operation public return_type class_ref 1405570 // JAXBContext
	nparams 3
	  param inout name "contextPath" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	  param inout name "properties" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String,?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Obtain a new instance of a <tt>JAXBContext</tt> class.

<p>
This is mostly the same as {@link JAXBContext#newInstance(String, ClassLoader)},
but this version allows you to pass in provider-specific properties to configure
the instantiation of {@link JAXBContext}.

<p>
The interpretation of properties is up to implementations. Implementations should
throw <tt>JAXBException</tt> if it finds properties that it doesn't understand.

@param contextPath list of java package names that contain schema derived classes
@param classLoader
     This class loader will be used to locate the implementation classes.
@param properties
     provider-specific properties. Can be null, which means the same thing as passing
     in an empty map.

@return a new instance of a <tt>JAXBContext</tt>
@throws JAXBException if an error was encountered while creating the
                      <tt>JAXBContext</tt> such as
<ol>
  <li>failure to locate either ObjectFactory.class or jaxb.index in the packages</li>
  <li>an ambiguity among global elements contained in the contextPath</li>
  <li>failure to locate a value for the context factory provider property</li>
  <li>mixing schema derived packages from different providers on the same contextPath</li>
</ol>
@since JAXB2.0
"
      end

      operation 11961730 "newInstance"
	class_operation public return_type class_ref 1405570 // JAXBContext
	nparams 1
	  param inout name "" explicit_type "Class...classesToBeBound"
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TODO: resurrect this once we introduce external annotations
    /**
     * <p>
     * Obtain a new instance of a <tt>JAXBContext</tt> class.
     *
     * <p>
     * The client application must supply a list of classes that the new
     * context object needs to recognize.
     *
     * Not only the new context will recognize all the classes specified,
     * but it will also recognize any classes that are directly/indirectly
     * referenced statically from the specified classes.
     *
     * For example, in the following Java code, if you do
     * <tt>newInstance(Foo.class)</tt>, the newly created {@link JAXBContext}
     * will recognize both <tt>Foo</tt> and <tt>Bar</tt>, but not <tt>Zot</tt>:
     * <pre>
     * class Foo {
     *      Bar b;
     * }
     * class Bar { int x; }
     * class Zot extends Bar { int y; }
     * </pre>
     *
     * Therefore, a typical client application only needs to specify the
     * top-level classes, but it needs to be careful.
     *
     * TODO: if we are to define other mechanisms, refer to them.
     *
     * @param externalBindings
     *      list of external binding files. Can be null or empty if none is used.
     *      when specified, those files determine how the classes are bound.
     *
     * @param classesToBeBound
     *      list of java classes to be recognized by the new {@link JAXBContext}.
     *      Can be empty, in which case a {@link JAXBContext} that only knows about
     *      spec-defined classes will be returned.
     *
     * @return
     *      A new instance of a <tt>JAXBContext</tt>. Always non-null valid object.
     *
     * @throws JAXBException
     *      if an error was encountered while creating the
     *      <tt>JAXBContext</tt>, such as (but not limited to):
     * <ol>
     *  <li>No JAXB implementation was discovered
     *  <li>Classes use JAXB annotations incorrectly
     *  <li>Classes have colliding annotations (i.e., two classes with the same type name)
     *  <li>Specified external bindings are incorrect
     *  <li>The JAXB implementation was unable to locate
     *      provider-specific out-of-band information (such as additional
     *      files generated at the development time.)
     * </ol>
     *
     * @throws IllegalArgumentException
     *      if the parameter contains {@code null} (i.e., {@code newInstance(null);})
     *
     * @since JAXB2.0
     */
    public static JAXBContext newInstance( Source[] externalBindings, Class... classesToBeBound )
        throws JAXBException {

        // empty class list is not an error, because the context will still include
        // spec-specified classes like String and Integer.
        // if(classesToBeBound.length==0)
        //    throw new IllegalArgumentException();

        // but it is an error to have nulls in it.
        for( int i=classesToBeBound.length-1; i>=0; i-- )
            if(classesToBeBound[i]==null)
                throw new IllegalArgumentException();

        return ContextFinder.find(externalBindings,classesToBeBound);
    }

<p>
Obtain a new instance of a <tt>JAXBContext</tt> class.

<p>
The client application must supply a list of classes that the new
context object needs to recognize.

Not only the new context will recognize all the classes specified,
but it will also recognize any classes that are directly/indirectly
referenced statically from the specified classes. Subclasses of
referenced classes nor <tt>&#64;XmlTransient</tt> referenced classes
are not registered with JAXBContext.

For example, in the following Java code, if you do
<tt>newInstance(Foo.class)</tt>, the newly created {@link JAXBContext}
will recognize both <tt>Foo</tt> and <tt>Bar</tt>, but not <tt>Zot</tt> or <tt>FooBar</tt>:
<pre>
class Foo {
     &#64;XmlTransient FooBar c;
     Bar b;
}
class Bar { int x; }
class Zot extends Bar { int y; }
class FooBar { }
</pre>

Therefore, a typical client application only needs to specify the
top-level classes, but it needs to be careful.

<p>
Note that for each java package registered with JAXBContext,
when the optional package annotations exist, they must be processed.
(see JLS, Section 7.4.1 \"Named Packages\").

<p>
The steps involved in discovering the JAXB implementation is discussed in the class javadoc.

@param classesToBeBound
     list of java classes to be recognized by the new {@link JAXBContext}.
     Can be empty, in which case a {@link JAXBContext} that only knows about
     spec-defined classes will be returned.

@return
     A new instance of a <tt>JAXBContext</tt>. Always non-null valid object.

@throws JAXBException
     if an error was encountered while creating the
     <tt>JAXBContext</tt>, such as (but not limited to):
<ol>
 <li>No JAXB implementation was discovered
 <li>Classes use JAXB annotations incorrectly
 <li>Classes have colliding annotations (i.e., two classes with the same type name)
 <li>The JAXB implementation was unable to locate
     provider-specific out-of-band information (such as additional
     files generated at the development time.)
</ol>

@throws IllegalArgumentException
     if the parameter contains {@code null} (i.e., {@code newInstance(null);})

@since JAXB2.0
"
      end

      operation 11961858 "newInstance"
	class_operation public return_type class_ref 1405570 // JAXBContext
	nparams 2
	  param inout name "classesToBeBound" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "properties" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}<String,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Obtain a new instance of a <tt>JAXBContext</tt> class.

<p>
An overloading of {@link JAXBContext#newInstance(Class...)}
to configure 'properties' for this instantiation of {@link JAXBContext}.

<p>
The interpretation of properties is up to implementations. Implementations should
throw <tt>JAXBException</tt> if it finds properties that it doesn't understand.

@param classesToBeBound
     list of java classes to be recognized by the new {@link JAXBContext}.
     Can be empty, in which case a {@link JAXBContext} that only knows about
     spec-defined classes will be returned.
@param properties
     provider-specific properties. Can be null, which means the same thing as passing
     in an empty map.

@return
     A new instance of a <tt>JAXBContext</tt>. Always non-null valid object.

@throws JAXBException
     if an error was encountered while creating the
     <tt>JAXBContext</tt>, such as (but not limited to):
<ol>
 <li>No JAXB implementation was discovered
 <li>Classes use JAXB annotations incorrectly
 <li>Classes have colliding annotations (i.e., two classes with the same type name)
 <li>The JAXB implementation was unable to locate
     provider-specific out-of-band information (such as additional
     files generated at the development time.)
</ol>

@throws IllegalArgumentException
     if the parameter contains {@code null} (i.e., {@code newInstance(null,someMap);})

@since JAXB2.0
"
      end

      operation 11961986 "createUnmarshaller"
	abstract public return_type class_ref 1406978 // Unmarshaller
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an <tt>Unmarshaller</tt> object that can be used to convert XML
data into a java content tree.

@return an <tt>Unmarshaller</tt> object

@throws JAXBException if an error was encountered while creating the
                      <tt>Unmarshaller</tt> object
"
      end

      operation 11962114 "createMarshaller"
	abstract public return_type class_ref 1407106 // Marshaller
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>Marshaller</tt> object that can be used to convert a
java content tree into XML data.

@return a <tt>Marshaller</tt> object

@throws JAXBException if an error was encountered while creating the
                      <tt>Marshaller</tt> object
"
      end

      operation 11962242 "createValidator"
	abstract public return_type class_ref 1407234 // Validator
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@link Validator} has been made optional and deprecated in JAXB 2.0.  Please
refer to the javadoc for {@link Validator} for more detail.
<p>
Create a <tt>Validator</tt> object that can be used to validate a
java content tree against its source schema.

@return a <tt>Validator</tt> object

@throws JAXBException if an error was encountered while creating the
                      <tt>Validator</tt> object
@deprecated since JAXB2.0
"
      end

      operation 11962370 "createBinder"
	public return_type class_ref 1404802 // Binder
	nparams 1
	  param inout name "domType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>Binder</tt> object that can be used for
associative/in-place unmarshalling/marshalling.

@param domType select the DOM API to use by passing in its DOM Node class.

@return always a new valid <tt>Binder</tt> object.

@throws UnsupportedOperationException
     if DOM API corresponding to <tt>domType</tt> is not supported by
     the implementation.

@since JAXB2.0
"
      end

      operation 11962498 "createBinder"
	public return_type class_ref 1404802 // Binder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Node> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>Binder</tt> for W3C DOM.

@return always a new valid <tt>Binder</tt> object.

@since JAXB2.0
"
      end

      operation 11962626 "createJAXBIntrospector"
	public return_type class_ref 1407362 // JAXBIntrospector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>JAXBIntrospector</tt> object that can be used to
introspect JAXB objects.

@return
     always return a non-null valid <tt>JAXBIntrospector</tt> object.

@throws UnsupportedOperationException
     Calling this method on JAXB 1.0 implementations will throw
     an UnsupportedOperationException.

@since JAXB2.0
"
      end

      operation 11962754 "generateSchema"
	public explicit_return_type "void"
	nparams 1
	  param inout name "outputResolver" type class_ref 1407490 // SchemaOutputResolver
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the schema documents for this context.

@param outputResolver
     this object controls the output to which schemas
     will be sent.

@throws IOException
     if {@link SchemaOutputResolver} throws an {@link IOException}.

@throws UnsupportedOperationException
     Calling this method on JAXB 1.0 implementations will throw
     an UnsupportedOperationException.

@since JAXB 2.0
"
      end

      operation 11962882 "getContextClassLoader"
	class_operation private return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1405698 "DataBindingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception that represents a failure in a JAXB operation.

<p>
This exception differs from {@link JAXBException} in that
this is an unchecked exception, while <tt>JAXBException</tt>
is a checked exception.

@see JAXB
@since JAXB2.1
"
      classrelation 4751106 // <generalisation>
	relation 4751106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4751106 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 11937026 "DataBindingException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11937154 "DataBindingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1405826 "DatatypeConverter"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
The javaType binding declaration can be used to customize the binding of
an XML schema datatype to a Java datatype. Customizations can involve
writing a parse and print method for parsing and printing lexical
representations of a XML schema datatype respectively. However, writing
parse and print methods requires knowledge of the lexical representations (
<a href=\"http://www.w3.org/TR/xmlschema-2/\"> XML Schema Part2: Datatypes
specification </a>) and hence may be difficult to write.
</p>
<p>
This class makes it easier to write parse and print methods. It defines
static parse and print methods that provide access to a JAXB provider's
implementation of parse and print methods. These methods are invoked by
custom parse and print methods. For example, the binding of xsd:dateTime
to a long can be customized using parse and print methods as follows:
<blockquote>
   <pre>
   // Customized parse method
   public long myParseCal( String dateTimeString ) {
       java.util.Calendar cal = DatatypeConverter.parseDateTime(dateTimeString);
       long longval = convert_calendar_to_long(cal); //application specific
       return longval;
   }

   // Customized print method
   public String myPrintCal( Long longval ) {
       java.util.Calendar cal = convert_long_to_calendar(longval) ; //application specific
       String dateTimeString = DatatypeConverter.printDateTime(cal);
       return dateTimeString;
   }
   </pre>
</blockquote>
<p>
There is a static parse and print method corresponding to each parse and
print method respectively in the {@link DatatypeConverterInterface
DatatypeConverterInterface}.
<p>
The static methods defined in the class can also be used to specify
a parse or a print method in a javaType binding declaration.
</p>
<p>
JAXB Providers are required to call the
{@link #setDatatypeConverter(DatatypeConverterInterface)
setDatatypeConverter} api at some point before the first marshal or unmarshal
operation (perhaps during the call to JAXBContext.newInstance).  This step is
necessary to configure the converter that should be used to perform the
print and parse functionality.
</p>

<p>
A print method for a XML schema datatype can output any lexical
representation that is valid with respect to the XML schema datatype.
If an error is encountered during conversion, then an IllegalArgumentException,
or a subclass of IllegalArgumentException must be thrown by the method.
</p>

@author <ul><li>Sekhar Vajjhala, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Ryan Shoemaker,Sun Microsystems Inc.</li></ul>
@see DatatypeConverterInterface
@see ParseConversionEvent
@see PrintConversionEvent
@since JAXB1.0
"
      classrelation 4751234 // theConverter (<unidirectional association>)
	relation 4751234 --->
	  a role_name "theConverter" init_value " null" class_relation volatile private
	    comment " delegate to this instance of DatatypeConverter
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4751234 // theConverter (<unidirectional association>)
	  b parent class_ref 1405954 // DatatypeConverterInterface
      end

      classrelation 4751362 // SET_DATATYPE_CONVERTER_PERMISSION (<unidirectional association>)
	relation 4751362 --->
	  a role_name "SET_DATATYPE_CONVERTER_PERMISSION" init_value "
                           new JAXBPermission(\"setDatatypeConverter\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4751362 // SET_DATATYPE_CONVERTER_PERMISSION (<unidirectional association>)
	  b parent class_ref 1406082 // JAXBPermission
      end

      operation 11937282 "DatatypeConverter"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11937410 "setDatatypeConverter"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "converter" type class_ref 1405954 // DatatypeConverterInterface
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is for JAXB provider use only.
<p>
JAXB Providers are required to call this method at some point before
allowing any of the JAXB client marshal or unmarshal operations to
occur.  This is necessary to configure the datatype converter that
should be used to perform the print and parse conversions.

<p>
Calling this api repeatedly will have no effect - the
DatatypeConverterInterface instance passed into the first invocation is
the one that will be used from then on.

@param converter an instance of a class that implements the
DatatypeConverterInterface class - this parameter must not be null.
@throws IllegalArgumentException if the parameter is null
@throws SecurityException
     If the {@link SecurityManager} in charge denies the access to
     set the datatype converter.
@see JAXBPermission
"
      end

      operation 11937538 "initConverter"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11937666 "parseString"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "lexicalXSDString" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Convert the lexical XSD string argument into a String value.
@param lexicalXSDString
    A string containing a lexical representation of
    xsd:string.
@return
    A String value represented by the string argument.
"
      end

      operation 11937794 "parseInteger"
	class_operation public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "lexicalXSDInteger" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Convert the string argument into a BigInteger value.
@param lexicalXSDInteger
    A string containing a lexical representation of
    xsd:integer.
@return
    A BigInteger value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDInteger</code> is not a valid string representation of a {@link java.math.BigInteger} value.
"
      end

      operation 11937922 "parseInt"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "lexicalXSDInt" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Convert the string argument into an int value.
@param lexicalXSDInt
    A string containing a lexical representation of
    xsd:int.
@return
    A int value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDInt</code> is not a valid string representation of an <code>int</code> value.
"
      end

      operation 11938050 "parseLong"
	class_operation public explicit_return_type "long"
	nparams 1
	  param inout name "lexicalXSDLong" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a long value.
@param lexicalXSDLong
    A string containing lexical representation of
    xsd:long.
@return
    A long value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDLong</code> is not a valid string representation of a <code>long</code> value.
"
      end

      operation 11938178 "parseShort"
	class_operation public explicit_return_type "short"
	nparams 1
	  param inout name "lexicalXSDShort" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a short value.
@param lexicalXSDShort
    A string containing lexical representation of
    xsd:short.
@return
    A short value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDShort</code> is not a valid string representation of a <code>short</code> value.
"
      end

      operation 11938306 "parseDecimal"
	class_operation public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "lexicalXSDDecimal" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a BigDecimal value.
@param lexicalXSDDecimal
    A string containing lexical representation of
    xsd:decimal.
@return
    A BigDecimal value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDDecimal</code> is not a valid string representation of {@link java.math.BigDecimal}.
"
      end

      operation 11938434 "parseFloat"
	class_operation public explicit_return_type "float"
	nparams 1
	  param inout name "lexicalXSDFloat" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a float value.
@param lexicalXSDFloat
    A string containing lexical representation of
    xsd:float.
@return
    A float value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDFloat</code> is not a valid string representation of a <code>float</code> value.
"
      end

      operation 11938562 "parseDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "lexicalXSDDouble" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a double value.
@param lexicalXSDDouble
    A string containing lexical representation of
    xsd:double.
@return
    A double value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDDouble</code> is not a valid string representation of a <code>double</code> value.
"
      end

      operation 11938690 "parseBoolean"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "lexicalXSDBoolean" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a boolean value.
@param lexicalXSDBoolean
    A string containing lexical representation of
    xsd:boolean.
@return
    A boolean value represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:boolean.
"
      end

      operation 11938818 "parseByte"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDByte" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a byte value.
@param lexicalXSDByte
    A string containing lexical representation of
    xsd:byte.
@return
    A byte value represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:byte.
"
      end

      operation 11938946 "parseQName"
	class_operation public return_type class_ref 673666 // QName
	nparams 2
	  param inout name "lexicalXSDQName" type class_ref 128130 // String
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a byte value.

<p>
String parameter <tt>lexicalXSDQname</tt> must conform to lexical value space specifed at
<a href=\"http://www.w3.org/TR/xmlschema-2/#QName\">XML Schema Part 2:Datatypes specification:QNames</a>

@param lexicalXSDQName
    A string containing lexical representation of xsd:QName.
@param nsc
    A namespace context for interpreting a prefix within a QName.
@return
    A QName value represented by the string argument.
@throws IllegalArgumentException  if string parameter does not conform to XML Schema Part 2 specification or
     if namespace prefix of <tt>lexicalXSDQname</tt> is not bound to a URI in NamespaceContext <tt>nsc</tt>.
"
      end

      operation 11939074 "parseDateTime"
	class_operation public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDDateTime" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a Calendar value.
@param lexicalXSDDateTime
    A string containing lexical representation of
    xsd:datetime.
@return
    A Calendar object represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:dateTime.
"
      end

      operation 11939202 "parseBase64Binary"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDBase64Binary" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into an array of bytes.
@param lexicalXSDBase64Binary
    A string containing lexical representation
    of xsd:base64Binary.
@return
    An array of bytes represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:base64Binary
"
      end

      operation 11939330 "parseHexBinary"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDHexBinary" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into an array of bytes.
@param lexicalXSDHexBinary
    A string containing lexical representation of
    xsd:hexBinary.
@return
    An array of bytes represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:hexBinary.
"
      end

      operation 11939458 "parseUnsignedInt"
	class_operation public explicit_return_type "long"
	nparams 1
	  param inout name "lexicalXSDUnsignedInt" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a long value.
@param lexicalXSDUnsignedInt
    A string containing lexical representation
    of xsd:unsignedInt.
@return
    A long value represented by the string argument.
@throws NumberFormatException if string parameter can not be parsed into a <tt>long</tt> value.
"
      end

      operation 11939586 "parseUnsignedShort"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "lexicalXSDUnsignedShort" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into an int value.
@param lexicalXSDUnsignedShort
    A string containing lexical
    representation of xsd:unsignedShort.
@return
    An int value represented by the string argument.
@throws NumberFormatException if string parameter can not be parsed into an <tt>int</tt> value.
"
      end

      operation 11939714 "parseTime"
	class_operation public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDTime" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a Calendar value.
@param lexicalXSDTime
    A string containing lexical representation of
    xsd:time.
@return
    A Calendar value represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:Time.
"
      end

      operation 11939842 "parseDate"
	class_operation public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDDate" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a Calendar value.
@param lexicalXSDDate
     A string containing lexical representation of
    xsd:Date.
@return
    A Calendar value represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:Date.
"
      end

      operation 11939970 "parseAnySimpleType"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "lexicalXSDAnySimpleType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Return a string containing the lexical representation of the
simple type.
@param lexicalXSDAnySimpleType
    A string containing lexical
    representation of the simple type.
@return
    A string containing the lexical representation of the
    simple type.
"
      end

      operation 11940098 "printString"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a string.
@param val
    A string value.
@return
    A string containing a lexical representation of xsd:string.

 also indicate the print methods produce a lexical
 representation for given Java datatypes."
      end

      operation 11940226 "printInteger"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a BigInteger value into a string.
@param val
    A BigInteger value
@return
    A string containing a lexical representation of xsd:integer
@throws IllegalArgumentException <tt>val</tt> is null.
"
      end

      operation 11940354 "printInt"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an int value into a string.
@param val
    An int value
@return
    A string containing a lexical representation of xsd:int
"
      end

      operation 11940482 "printLong"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts A long value into a string.
@param val
    A long value
@return
    A string containing a lexical representation of xsd:long
"
      end

      operation 11940610 "printShort"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a short value into a string.
@param val
    A short value
@return
    A string containing a lexical representation of xsd:short
"
      end

      operation 11940738 "printDecimal"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a BigDecimal value into a string.
@param val
    A BigDecimal value
@return
    A string containing a lexical representation of xsd:decimal
@throws IllegalArgumentException <tt>val</tt> is null.
"
      end

      operation 11940866 "printFloat"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a float value into a string.
@param val
    A float value
@return
    A string containing a lexical representation of xsd:float
"
      end

      operation 11940994 "printDouble"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a double value into a string.
@param val
    A double value
@return
    A string containing a lexical representation of xsd:double
"
      end

      operation 11941122 "printBoolean"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a boolean value into a string.
@param val
    A boolean value
@return
    A string containing a lexical representation of xsd:boolean
"
      end

      operation 11941250 "printByte"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a byte value into a string.
@param val
    A byte value
@return
    A string containing a lexical representation of xsd:byte
"
      end

      operation 11941378 "printQName"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "val" type class_ref 673666 // QName
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a QName instance into a string.
@param val
    A QName value
@param nsc
    A namespace context for interpreting a prefix within a QName.
@return
    A string containing a lexical representation of QName
@throws IllegalArgumentException if <tt>val</tt> is null or
if <tt>nsc</tt> is non-null or <tt>nsc.getPrefix(nsprefixFromVal)</tt> is null.
"
      end

      operation 11941506 "printDateTime"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a Calendar value into a string.
@param val
    A Calendar value
@return
    A string containing a lexical representation of xsd:dateTime
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11941634 "printBase64Binary"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an array of bytes into a string.
@param val
    An array of bytes
@return
    A string containing a lexical representation of xsd:base64Binary
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11941762 "printHexBinary"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an array of bytes into a string.
@param val
    An array of bytes
@return
    A string containing a lexical representation of xsd:hexBinary
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11941890 "printUnsignedInt"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a long value into a string.
@param val
    A long value
@return
    A string containing a lexical representation of xsd:unsignedInt
"
      end

      operation 11942018 "printUnsignedShort"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an int value into a string.
@param val
    An int value
@return
    A string containing a lexical representation of xsd:unsignedShort
"
      end

      operation 11942146 "printTime"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a Calendar value into a string.
@param val
    A Calendar value
@return
    A string containing a lexical representation of xsd:time
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11942274 "printDate"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a Calendar value into a string.
@param val
    A Calendar value
@return
    A string containing a lexical representation of xsd:date
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11942402 "printAnySimpleType"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a string value into a string.
@param val
    A string value
@return
    A string containing a lexical representation of xsd:AnySimpleType
"
      end
    end

    class 1405954 "DatatypeConverterInterface"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
The DatatypeConverterInterface is for JAXB provider use only. A
JAXB provider must supply a class that implements this interface.
JAXB Providers are required to call the
{@link DatatypeConverter#setDatatypeConverter(DatatypeConverterInterface)
DatatypeConverter.setDatatypeConverter} api at
some point before the first marshal or unmarshal operation (perhaps during
the call to JAXBContext.newInstance).  This step is necessary to configure
the converter that should be used to perform the print and parse
functionality.  Calling this api repeatedly will have no effect - the
DatatypeConverter instance passed into the first invocation is the one that
will be used from then on.
</p>

<p>
This interface defines the parse and print methods. There is one
parse and print method for each XML schema datatype specified in the
the default binding Table 5-1 in the JAXB specification.
</p>

<p>
The parse and print methods defined here are invoked by the static parse
and print methods defined in the {@link DatatypeConverter DatatypeConverter}
class.
</p>

<p>
A parse method for a XML schema datatype must be capable of converting any
lexical representation of the XML schema datatype ( specified by the
<a href=\"http://www.w3.org/TR/xmlschema-2/\"> XML Schema Part2: Datatypes
specification</a> into a value in the value space of the XML schema datatype.
If an error is encountered during conversion, then an IllegalArgumentException
or a subclass of IllegalArgumentException must be thrown by the method.

</p>

<p>
A print method for a XML schema datatype can output any lexical
representation that is valid with respect to the XML schema datatype.
If an error is encountered during conversion, then an IllegalArgumentException,
or a subclass of IllegalArgumentException must be thrown by the method.
</p>

The prefix xsd: is used to refer to XML schema datatypes
<a href=\"http://www.w3.org/TR/xmlschema-2/\"> XML Schema Part2: Datatypes
specification.</a>

<p>
@author <ul><li>Sekhar Vajjhala, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Ryan Shoemaker,Sun Microsystems Inc.</li></ul>
@see DatatypeConverter
@see ParseConversionEvent
@see PrintConversionEvent
@since JAXB1.0
"
      operation 11942530 "parseString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "lexicalXSDString" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Convert the string argument into a string.
@param lexicalXSDString
    A lexical representation of the XML Schema datatype xsd:string
@return
    A string that is the same as the input string.
"
      end

      operation 11942658 "parseInteger"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "lexicalXSDInteger" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Convert the string argument into a BigInteger value.
@param lexicalXSDInteger
    A string containing a lexical representation of
    xsd:integer.
@return
    A BigInteger value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDInteger</code> is not a valid string representation of a {@link java.math.BigInteger} value.
"
      end

      operation 11942786 "parseInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "lexicalXSDInt" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Convert the string argument into an int value.
@param lexicalXSDInt
    A string containing a lexical representation of
    xsd:int.
@return
    An int value represented byte the string argument.
@throws NumberFormatException <code>lexicalXSDInt</code> is not a valid string representation of an <code>int</code> value.
"
      end

      operation 11942914 "parseLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "lexicalXSDLong" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a long value.
@param lexicalXSDLong
    A string containing lexical representation of
    xsd:long.
@return
    A long value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDLong</code> is not a valid string representation of a <code>long</code> value.
"
      end

      operation 11943042 "parseShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "lexicalXSDShort" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a short value.
@param lexicalXSDShort
    A string containing lexical representation of
    xsd:short.
@return
    A short value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDShort</code> is not a valid string representation of a <code>short</code> value.
"
      end

      operation 11943170 "parseDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "lexicalXSDDecimal" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a BigDecimal value.
@param lexicalXSDDecimal
    A string containing lexical representation of
    xsd:decimal.
@return
    A BigDecimal value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDDecimal</code> is not a valid string representation of {@link java.math.BigDecimal}.
"
      end

      operation 11943298 "parseFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "lexicalXSDFloat" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a float value.
@param lexicalXSDFloat
    A string containing lexical representation of
    xsd:float.
@return
    A float value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDFloat</code> is not a valid string representation of a <code>float</code> value.
"
      end

      operation 11943426 "parseDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "lexicalXSDDouble" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a double value.
@param lexicalXSDDouble
    A string containing lexical representation of
    xsd:double.
@return
    A double value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDDouble</code> is not a valid string representation of a <code>double</code> value.
"
      end

      operation 11943554 "parseBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "lexicalXSDBoolean" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a boolean value.
@param lexicalXSDBoolean
    A string containing lexical representation of
    xsd:boolean.
@return
    A boolean value represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:boolean.
"
      end

      operation 11943682 "parseByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDByte" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a byte value.
@param lexicalXSDByte
    A string containing lexical representation of
    xsd:byte.
@return
    A byte value represented by the string argument.
@throws NumberFormatException <code>lexicalXSDByte</code> does not contain a parseable byte.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:byte.
"
      end

      operation 11943810 "parseQName"
	public return_type class_ref 673666 // QName
	nparams 2
	  param inout name "lexicalXSDQName" type class_ref 128130 // String
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a QName value.

<p>
String parameter <tt>lexicalXSDQname</tt> must conform to lexical value space specifed at
<a href=\"http://www.w3.org/TR/xmlschema-2/#QName\">XML Schema Part 2:Datatypes specification:QNames</a>

@param lexicalXSDQName
    A string containing lexical representation of xsd:QName.
@param nsc
    A namespace context for interpreting a prefix within a QName.
@return
    A QName value represented by the string argument.
@throws IllegalArgumentException  if string parameter does not conform to XML Schema Part 2 specification or
     if namespace prefix of <tt>lexicalXSDQname</tt> is not bound to a URI in NamespaceContext <tt>nsc</tt>.
"
      end

      operation 11943938 "parseDateTime"
	public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDDateTime" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a Calendar value.
@param lexicalXSDDateTime
    A string containing lexical representation of
    xsd:datetime.
@return
    A Calendar object represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:dateTime.
"
      end

      operation 11944066 "parseBase64Binary"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDBase64Binary" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into an array of bytes.
@param lexicalXSDBase64Binary
    A string containing lexical representation
    of xsd:base64Binary.
@return
    An array of bytes represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:base64Binary
"
      end

      operation 11944194 "parseHexBinary"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDHexBinary" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into an array of bytes.
@param lexicalXSDHexBinary
    A string containing lexical representation of
    xsd:hexBinary.
@return
    An array of bytes represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:hexBinary.
"
      end

      operation 11944322 "parseUnsignedInt"
	public explicit_return_type "long"
	nparams 1
	  param inout name "lexicalXSDUnsignedInt" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a long value.
@param lexicalXSDUnsignedInt
    A string containing lexical representation
    of xsd:unsignedInt.
@return
    A long value represented by the string argument.
@throws NumberFormatException if string parameter can not be parsed into a <tt>long</tt> value.
"
      end

      operation 11944450 "parseUnsignedShort"
	public explicit_return_type "int"
	nparams 1
	  param inout name "lexicalXSDUnsignedShort" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into an int value.
@param lexicalXSDUnsignedShort
    A string containing lexical
    representation of xsd:unsignedShort.
@return
    An int value represented by the string argument.
@throws NumberFormatException if string parameter can not be parsed into an <tt>int</tt> value.
"
      end

      operation 11944578 "parseTime"
	public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDTime" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a Calendar value.
@param lexicalXSDTime
    A string containing lexical representation of
    xsd:Time.
@return
    A Calendar value represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:Time.
"
      end

      operation 11944706 "parseDate"
	public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDDate" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a Calendar value.
@param lexicalXSDDate
    A string containing lexical representation of
    xsd:Date.
@return
    A Calendar value represented by the string argument.
@throws IllegalArgumentException if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:Date.
"
      end

      operation 11944834 "parseAnySimpleType"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "lexicalXSDAnySimpleType" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Return a string containing the lexical representation of the
simple type.
@param lexicalXSDAnySimpleType
    A string containing lexical
    representation of the simple type.
@return
    A string containing the lexical representation of the
    simple type.
"
      end

      operation 11944962 "printString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts the string argument into a string.
@param val
    A string value.
@return
    A string containing a lexical representation of xsd:string
"
      end

      operation 11945090 "printInteger"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a BigInteger value into a string.
@param val
    A BigInteger value
@return
    A string containing a lexical representation of xsd:integer
@throws IllegalArgumentException <tt>val</tt> is null.
"
      end

      operation 11945218 "printInt"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an int value into a string.
@param val
    An int value
@return
    A string containing a lexical representation of xsd:int
"
      end

      operation 11945346 "printLong"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a long value into a string.
@param val
    A long value
@return
    A string containing a lexical representation of xsd:long
"
      end

      operation 11945474 "printShort"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "short"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a short value into a string.
@param val
    A short value
@return
    A string containing a lexical representation of xsd:short
"
      end

      operation 11945602 "printDecimal"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a BigDecimal value into a string.
@param val
    A BigDecimal value
@return
    A string containing a lexical representation of xsd:decimal
@throws IllegalArgumentException <tt>val</tt> is null.
"
      end

      operation 11945730 "printFloat"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a float value into a string.
@param val
    A float value
@return
    A string containing a lexical representation of xsd:float
"
      end

      operation 11945858 "printDouble"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a double value into a string.
@param val
    A double value
@return
    A string containing a lexical representation of xsd:double
"
      end

      operation 11945986 "printBoolean"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a boolean value into a string.
@param val
    A boolean value
@return
    A string containing a lexical representation of xsd:boolean
"
      end

      operation 11946114 "printByte"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "byte"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a byte value into a string.
@param val
    A byte value
@return
    A string containing a lexical representation of xsd:byte
"
      end

      operation 11946242 "printQName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "val" type class_ref 673666 // QName
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a QName instance into a string.
@param val
    A QName value
@param nsc
    A namespace context for interpreting a prefix within a QName.
@return
    A string containing a lexical representation of QName
@throws IllegalArgumentException if <tt>val</tt> is null or
if <tt>nsc</tt> is non-null or <tt>nsc.getPrefix(nsprefixFromVal)</tt> is null.
"
      end

      operation 11946370 "printDateTime"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a Calendar value into a string.
@param val
    A Calendar value
@return
    A string containing a lexical representation of xsd:dateTime
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11946498 "printBase64Binary"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "byte"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an array of bytes into a string.
@param val
    an array of bytes
@return
    A string containing a lexical representation of xsd:base64Binary
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11946626 "printHexBinary"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "byte"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an array of bytes into a string.
@param val
    an array of bytes
@return
    A string containing a lexical representation of xsd:hexBinary
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11946754 "printUnsignedInt"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a long value into a string.
@param val
    A long value
@return
    A string containing a lexical representation of xsd:unsignedInt
"
      end

      operation 11946882 "printUnsignedShort"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts an int value into a string.
@param val
    An int value
@return
    A string containing a lexical representation of xsd:unsignedShort
"
      end

      operation 11947010 "printTime"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a Calendar value into a string.
@param val
    A Calendar value
@return
    A string containing a lexical representation of xsd:time
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11947138 "printDate"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a Calendar value into a string.
@param val
    A Calendar value
@return
    A string containing a lexical representation of xsd:date
@throws IllegalArgumentException if <tt>val</tt> is null.
"
      end

      operation 11947266 "printAnySimpleType"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Converts a string value into a string.
@param val
    A string value
@return
    A string containing a lexical representation of xsd:AnySimpleType
"
      end
    end

    class 1406082 "JAXBPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is for JAXB permissions. A {@code JAXBPermission}
contains a name (also referred to as a \"target name\") but
no actions list; you either have the named permission
or you don't.

<P>
The target name is the name of the JAXB permission (see below).

<P>
The following table lists all the possible {@code JAXBPermission} target names,
and for each provides a description of what the permission allows
and a discussion of the risks of granting code the permission.
<P>

<table border=1 cellpadding=5 summary=\"Permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>setDatatypeConverter</td>
  <td>
    Allows the code to set VM-wide {@link DatatypeConverterInterface}
    via {@link DatatypeConverter#setDatatypeConverter(DatatypeConverterInterface) the setDatatypeConverter method}
    that all the methods on {@link DatatypeConverter} uses.
  </td>
  <td>
    Malicious code can set {@link DatatypeConverterInterface}, which has
    VM-wide singleton semantics,  before a genuine JAXB implementation sets one.
    This allows malicious code to gain access to objects that it may otherwise
    not have access to, such as {@link java.awt.Frame#getFrames()} that belongs to
    another application running in the same JVM.
  </td>
</tr>
</table>

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

@author Joe Fialli
@since JAXB 2.2

 code was borrowed originally from java.lang.RuntimePermission. "
      classrelation 4753538 // <generalisation>
	relation 4753538 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4753538 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      operation 11966466 "JAXBPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new JAXBPermission with the specified name.

@param name
The name of the JAXBPermission. As of 2.2 only \"setDatatypeConverter\"
is defined.
"
      end

      attribute 2617090 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1406210 "DatatypeConverterImpl"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is the JAXB RI's default implementation of the
{@link DatatypeConverterInterface}.

<p>
When client applications specify the use of the static print/parse
methods in {@link DatatypeConverter}, it will delegate
to this class.

<p>
This class is responsible for whitespace normalization.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li></ul>
@since JAXB2.1
"
      classrelation 4751490 // <realization>
	relation 4751490 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4751490 // <realization>
	  b parent class_ref 1405954 // DatatypeConverterInterface
      end

      classrelation 4751618 // theInstance (<unidirectional association>)
	relation 4751618 --->
	  a role_name "theInstance" init_value " new DatatypeConverterImpl()" class_relation const_relation public
	    comment "
To avoid re-creating instances, we cache one instance.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4751618 // theInstance (<unidirectional association>)
	  b parent class_ref 1405954 // DatatypeConverterInterface
      end

      operation 11947394 "DatatypeConverterImpl"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11947522 "parseString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "lexicalXSDString" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11947650 "parseInteger"
	public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "lexicalXSDInteger" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11947778 "_parseInteger"
	class_operation public return_type class_ref 686338 // BigInteger
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11947906 "printInteger"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11948034 "_printInteger"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11948162 "parseInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11948290 "_parseInt"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Faster but less robust String->int conversion.

Note that:
<ol>
 <li>XML Schema allows '+', but {@link Integer#valueOf(String)} is not.
 <li>XML Schema allows leading and trailing (but not in-between) whitespaces.
     {@link Integer#valueOf(String)} doesn't allow any.
</ol>
"
      end

      operation 11948418 "parseLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "lexicalXSLong" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11948546 "_parseLong"
	class_operation public explicit_return_type "long"
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11948674 "parseShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "lexicalXSDShort" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11948802 "_parseShort"
	class_operation public explicit_return_type "short"
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11948930 "printShort"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949058 "_printShort"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949186 "parseDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "content" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949314 "_parseDecimal"
	class_operation public return_type class_ref 145794 // BigDecimal
	nparams 1
	  param inout name "content" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949442 "parseFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "lexicalXSDFloat" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949570 "_parseFloat"
	class_operation public explicit_return_type "float"
	nparams 1
	  param inout name "_val" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949698 "printFloat"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "v" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949826 "_printFloat"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "v" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11949954 "parseDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "lexicalXSDDouble" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950082 "_parseDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param inout name "_val" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950210 "parseBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "lexicalXSDBoolean" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950338 "_parseBoolean"
	class_operation public return_type class_ref 315010 // Boolean
	nparams 1
	  param inout name "literal" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950466 "printBoolean"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950594 "_printBoolean"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950722 "parseByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDByte" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950850 "_parseByte"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "literal" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11950978 "printByte"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11951106 "_printByte"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11951234 "parseQName"
	public return_type class_ref 673666 // QName
	nparams 2
	  param inout name "lexicalXSDQName" type class_ref 128130 // String
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11951362 "_parseQName"
	class_operation public return_type class_ref 673666 // QName
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return null if fails to convert.
"
      end

      operation 11951490 "parseDateTime"
	public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDDateTime" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11951618 "_parseDateTime"
	class_operation public return_type class_ref 723202 // GregorianCalendar
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11951746 "printDateTime"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11951874 "_printDateTime"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11952002 "parseBase64Binary"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "lexicalXSDBase64Binary" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11952130 "parseHexBinary"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11952258 "hexToBin"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2616066 "hexCode"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " \"0123456789ABCDEF\".toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 11952386 "printHexBinary"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11952514 "parseUnsignedInt"
	public explicit_return_type "long"
	nparams 1
	  param inout name "lexicalXSDUnsignedInt" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11952642 "printUnsignedInt"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11952770 "parseUnsignedShort"
	public explicit_return_type "int"
	nparams 1
	  param inout name "lexicalXSDUnsignedShort" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11952898 "parseTime"
	public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDTime" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953026 "printTime"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953154 "parseDate"
	public return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "lexicalXSDDate" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953282 "printDate"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953410 "_printDate"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953538 "parseAnySimpleType"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "lexicalXSDAnySimpleType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953666 "printString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953794 "printInt"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11953922 "_printInt"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954050 "printLong"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954178 "_printLong"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954306 "printDecimal"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954434 "_printDecimal"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954562 "printDouble"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "v" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954690 "_printDouble"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "v" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954818 "printQName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "val" type class_ref 673666 // QName
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11954946 "_printQName"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "val" type class_ref 673666 // QName
	  param inout name "nsc" type class_ref 673794 // NamespaceContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11955074 "printBase64Binary"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11955202 "printUnsignedShort"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11955330 "printAnySimpleType"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11955458 "installHook"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Just return the string passed as a parameter but
installs an instance of this class as the DatatypeConverter
implementation. Used from static fixed value initializers.
"
      end

      attribute 2616194 "decodeMap"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " initDecodeMap()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " base64 decoder
"
      end

      attribute 2616322 "PADDING"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 127"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 11955586 "initDecodeMap"
	class_operation private explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11955714 "guessLength"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "computes the length of binary data speculatively.

<p>
Our requirement is to create byte[] of the exact length to store the binary data.
If we do this in a straight-forward way, it takes two passes over the data.
Experiments show that this is a non-trivial overhead (35% or so is spent on
the first pass in calculating the length.)

<p>
So the approach here is that we compute the length speculatively, without looking
at the whole contents. The obtained speculative value is never less than the
actual length of the binary data, but it may be bigger. So if the speculation
goes wrong, we'll pay the cost of reallocation and buffer copying.

<p>
If the base64 text is tightly packed with no indentation nor illegal char
(like what most web services produce), then the speculation of this method
will be correct, so we get the performance benefit.
"
      end

      operation 11955842 "_parseBase64Binary"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param text
     base64Binary data is likely to be long, and decoding requires
     each character to be accessed twice (once for counting length, another
     for decoding.)

     A benchmark showed that taking {@link String} is faster, presumably
     because JIT can inline a lot of string access (with data of 1K chars, it was twice as fast)
"
      end

      attribute 2616450 "encodeMap"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " initEncodeMap()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 11955970 "initEncodeMap"
	class_operation private explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11956098 "encode"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11956226 "encodeByte"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11956354 "_printBase64Binary"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11956482 "_printBase64Binary"
	class_operation public return_type class_ref 128130 // String
	nparams 3
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11956610 "_printBase64Binary"
	class_operation public explicit_return_type "int"
	nparams 5
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "buf" explicit_type "char"
	multiplicity "[]"
	  param in name "ptr" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes a byte array into a char array by doing base64 encoding.

The caller must supply a big enough buffer.

@return
     the value of {@code ptr+((len+2)/3)*4}, which is the new offset
     in the output buffer where the further bytes should be placed.
"
      end

      operation 11956738 "_printBase64Binary"
	class_operation public explicit_return_type "int"
	nparams 5
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "out" explicit_type "byte"
	multiplicity "[]"
	  param in name "ptr" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes a byte array into another byte array by first doing base64 encoding
then encoding the result in ASCII.

The caller must supply a big enough buffer.

@return
     the value of {@code ptr+((len+2)/3)*4}, which is the new offset
     in the output buffer where the further bytes should be placed.
"
      end

      operation 11956866 "removeOptionalPlus"
	class_operation private return_type class_ref 429442 // CharSequence
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11956994 "isDigitOrPeriodOrSign"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 4751746 // datatypeFactory (<unidirectional association>)
	relation 4751746 --->
	  a role_name "datatypeFactory" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4751746 // datatypeFactory (<unidirectional association>)
	  b parent class_ref 683266 // DatatypeFactory
      end

      extra_member 188418 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            datatypeFactory = DatatypeFactory.newInstance();
        } catch (DatatypeConfigurationException e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 1406338 "CalendarFormatter"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 11957122 "doFormat"
	  class_operation public return_type class_ref 128130 // String
	  nparams 2
	    param inout name "format" type class_ref 128130 // String
	    param inout name "cal" type class_ref 723586 // Calendar
	  nexceptions 1
	    exception class_ref 187778 // IllegalArgumentException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11957250 "formatYear"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "cal" type class_ref 723586 // Calendar
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11957378 "formatMonth"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "cal" type class_ref 723586 // Calendar
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11957506 "formatDays"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "cal" type class_ref 723586 // Calendar
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11957634 "formatHours"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "cal" type class_ref 723586 // Calendar
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11957762 "formatMinutes"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "cal" type class_ref 723586 // Calendar
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11957890 "formatSeconds"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "cal" type class_ref 723586 // Calendar
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11958018 "formatTimeZone"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "cal" type class_ref 723586 // Calendar
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " formats time zone specifier. "
	end

	operation 11958146 "formatTwoDigits"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param in name "n" explicit_type "int"
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " formats Integer into two-character-wide string. "
	end
      end
    end

    class 1406466 "Element"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is an element marker interface.

Under certain circumstances, it is necessary for the binding compiler to
generate derived java content classes that implement this interface.  In
those cases, client applications must supply element instances rather than
types of elements.  For more detail, see section 5.7 \"Element Declaration\"
and 5.7.1 \"Bind to Java Element Interface\" of the specification.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@since JAXB1.0
"
    end

    class 1406594 "GetPropertyAction"
      visibility package 
      nactuals 1
      actual class class_ref 250114 // PrivilegedAction
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@link PrivilegedAction} that gets the system property value.
@author Kohsuke Kawaguchi
"
      classrelation 4751874 // <realization>
	relation 4751874 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 4751874 // <realization>
	  b parent class_ref 250114 // PrivilegedAction
      end

      classrelation 4752002 // propertyName (<unidirectional association>)
	relation 4752002 --->
	  a role_name "propertyName" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4752002 // propertyName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11958274 "GetPropertyAction"
	public explicit_return_type ""
	nparams 1
	  param inout name "propertyName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11958402 "run"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1406722 "JAXB"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class that defines convenience methods for common, simple use of JAXB.

<p>
Methods defined in this class are convenience methods that combine several basic operations
in the {@link JAXBContext}, {@link Unmarshaller}, and {@link Marshaller}.

They are designed
to be the prefered methods for developers new to JAXB. They have
the following characterstics:

<ol>
 <li>Generally speaking, the performance is not necessarily optimal.
     It is expected that people who need to write performance
     critical code will use the rest of the JAXB API directly.
 <li>Errors that happen during the processing is wrapped into
     {@link DataBindingException} (which will have {@link JAXBException}
     as its {@link Throwable#getCause() cause}. It is expected that
     people who prefer the checked exception would use
     the rest of the JAXB API directly.
</ol>

<p>
In addition, the <tt>unmarshal</tt> methods have the following characteristic:

<ol>
 <li>Schema validation is not performed on the input XML.
     The processing will try to continue even if there
     are errors in the XML, as much as possible. Only as
     the last resort, this method fails with {@link DataBindingException}.
</ol>

<p>
Similarly, the <tt>marshal</tt> methods have the following characteristic:
<ol>
 <li>The processing will try to continue even if the Java object tree
     does not meet the validity requirement. Only as
     the last resort, this method fails with {@link DataBindingException}.
</ol>


<p>
All the methods on this class require non-null arguments to all parameters.
The <tt>unmarshal</tt> methods either fail with an exception or return
a non-null value.

@author Kohsuke Kawaguchi
@since 2.1
"
      operation 11958530 "JAXB"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "No instanciation is allowed.
"
      end

      class 1406850 "Cache"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4752130 // type (<unidirectional association>)
	  relation 4752130 --->
	    a role_name "type" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4752130 // type (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 4752258 // context (<unidirectional association>)
	  relation 4752258 --->
	    a role_name "context" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4752258 // context (<unidirectional association>)
	    b parent class_ref 1405570 // JAXBContext
	end

	operation 11958658 "Cache"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "type" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 1404930 // JAXBException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 4752386 // cache (<unidirectional association>)
	relation 4752386 --->
	  a role_name "cache" class_relation volatile private
	    comment "
Cache. We don't want to prevent the {@link Cache#type} from GC-ed,
hence {@link WeakReference}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Cache> ${name}${value};
"
	    classrelation_ref 4752386 // cache (<unidirectional association>)
	  b parent class_ref 131330 // WeakReference
      end

      operation 11958786 "getContext"
	class_operation private return_type class_ref 1405570 // JAXBContext
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the {@link JAXBContext} from the given type,
by using the cache if possible.

<p>
We don't use locks to control access to {@link #cache}, but this code
should be thread-safe thanks to the immutable {@link Cache} and {@code volatile}.
"
      end

      operation 11958914 "unmarshal"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "xml" type class_ref 131970 // File
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Java object tree from the given XML input.

@param xml
     Reads the entire file as XML.
"
      end

      operation 11959042 "unmarshal"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "xml" type class_ref 243458 // URL
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Java object tree from the given XML input.

@param xml
     The resource pointed by the URL is read in its entirety.
"
      end

      operation 11959170 "unmarshal"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "xml" type class_ref 783874 // URI
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Java object tree from the given XML input.

@param xml
     The URI is {@link URI#toURL() turned into URL} and then
     follows the handling of <tt>URL</tt>.
"
      end

      operation 11959298 "unmarshal"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "xml" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Java object tree from the given XML input.

@param xml
     The string is first interpreted as an absolute <tt>URI</tt>.
     If it's not {@link URI#isAbsolute() a valid absolute URI},
     then it's interpreted as a <tt>File</tt>
"
      end

      operation 11959426 "unmarshal"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "xml" type class_ref 146434 // InputStream
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Java object tree from the given XML input.

@param xml
     The entire stream is read as an XML infoset.
     Upon a successful completion, the stream will be closed by this method.
"
      end

      operation 11959554 "unmarshal"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "xml" type class_ref 407298 // Reader
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Java object tree from the given XML input.

@param xml
     The character stream is read as an XML infoset.
     The encoding declaration in the XML will be ignored.
     Upon a successful completion, the stream will be closed by this method.
"
      end

      operation 11959682 "unmarshal"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "xml" type class_ref 627202 // Source
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Java object tree from the given XML input.

@param xml
     The XML infoset that the {@link Source} represents is read.
"
      end

      operation 11959810 "toSource"
	class_operation private return_type class_ref 627202 // Source
	nparams 1
	  param inout name "xml" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates {@link Source} from various XML representation.
See {@link #unmarshal} for the conversion rules.
"
      end

      operation 11959938 "marshal"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     XML will be written to this file. If it already exists,
     it will be overwritten.

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960066 "marshal"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     The XML will be {@link URLConnection#getOutputStream() sent} to the
     resource pointed by this URL. Note that not all <tt>URL</tt>s support
     such operation, and exact semantics depends on the <tt>URL</tt>
     implementations. In case of {@link HttpURLConnection HTTP URLs},
     this will perform HTTP POST.

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960194 "marshal"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     The URI is {@link URI#toURL() turned into URL} and then
     follows the handling of <tt>URL</tt>. See above.

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960322 "marshal"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     The string is first interpreted as an absolute <tt>URI</tt>.
     If it's not {@link URI#isAbsolute() a valid absolute URI},
     then it's interpreted as a <tt>File</tt>

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960450 "marshal"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     The XML will be sent to the given {@link OutputStream}.
     Upon a successful completion, the stream will be closed by this method.

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960578 "marshal"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 428034 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     The XML will be sent as a character stream to the given {@link Writer}.
     Upon a successful completion, the stream will be closed by this method.

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960706 "marshal"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 645506 // Result
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     The XML will be sent to the {@link Result} object.

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960834 "_marshal"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "jaxbObject" type class_ref 129538 // Object
	  param inout name "xml" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a Java object tree to XML and store it to the specified location.

<p>
This method is a convenience method that combines several basic operations
in the {@link JAXBContext} and {@link Marshaller}. This method is designed
to be the prefered method for developers new to JAXB. This method
has the following characterstics:

<ol>
 <li>Generally speaking, the performance is not necessarily optimal.
     It is expected that those people who need to write performance
     critical code will use the rest of the JAXB API directly.
 <li>Errors that happen during the processing is wrapped into
     {@link DataBindingException} (which will have {@link JAXBException}
     as its {@link Throwable#getCause() cause}. It is expected that
     those people who prefer the checked exception would use
     the rest of the JAXB API directly.
</ol>

@param jaxbObject
     The Java object to be marshalled into XML. If this object is
     a {@link JAXBElement}, it will provide the root tag name and
     the body. If this object has {@link XmlRootElement}
     on its class definition, that will be used as the root tag name
     and the given object will provide the body. Otherwise,
     the root tag name is {@link Introspector#decapitalize(String) infered} from
     {@link Class#getSimpleName() the short class name}.
     This parameter must not be null.

@param xml
     Represents the receiver of XML. Objects of the following types are allowed.

     <table><tr>
         <th>Type</th>
         <th>Operation</th>
     </tr><tr>
         <td>{@link File}</td>
         <td>XML will be written to this file. If it already exists,
             it will be overwritten.</td>
     </tr><tr>
         <td>{@link URL}</td>
         <td>The XML will be {@link URLConnection#getOutputStream() sent} to the
             resource pointed by this URL. Note that not all <tt>URL</tt>s support
             such operation, and exact semantics depends on the <tt>URL</tt>
             implementations. In case of {@link HttpURLConnection HTTP URLs},
             this will perform HTTP POST.</td>
     </tr><tr>
         <td>{@link URI}</td>
         <td>The URI is {@link URI#toURL() turned into URL} and then
             follows the handling of <tt>URL</tt>. See above.</td>
     </tr><tr>
         <td>{@link String}</td>
         <td>The string is first interpreted as an absolute <tt>URI</tt>.
             If it's not {@link URI#isAbsolute() a valid absolute URI},
             then it's interpreted as a <tt>File</tt></td>
     </tr><tr>
         <td>{@link OutputStream}</td>
         <td>The XML will be sent to the given {@link OutputStream}.
             Upon a successful completion, the stream will be closed by this method.</td>
     </tr><tr>
         <td>{@link Writer}</td>
         <td>The XML will be sent as a character stream to the given {@link Writer}.
             Upon a successful completion, the stream will be closed by this method.</td>
     </tr><tr>
         <td>{@link Result}</td>
         <td>The XML will be sent to the {@link Result} object.</td>
     </tr></table>

@throws DataBindingException
     If the operation fails, such as due to I/O error, unbindable classes.
"
      end

      operation 11960962 "inferName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "clazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11961090 "toResult"
	class_operation private return_type class_ref 645506 // Result
	nparams 1
	  param inout name "xml" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates {@link Result} from various XML representation.
See {@link #_marshal(Object,Object)} for the conversion rules.
"
      end
    end

    class 1406978 "Unmarshaller"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <tt>Unmarshaller</tt> class governs the process of deserializing XML
data into newly created Java content trees, optionally validating the XML
data as it is unmarshalled.  It provides an overloading of unmarshal methods
for many different input kinds.

<p>
Unmarshalling from a File:
<blockquote>
   <pre>
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();
      Object o = u.unmarshal( new File( \"nosferatu.xml\" ) );
   </pre>
</blockquote>


<p>
Unmarshalling from an InputStream:
<blockquote>
   <pre>
      InputStream is = new FileInputStream( \"nosferatu.xml\" );
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();
      Object o = u.unmarshal( is );
   </pre>
</blockquote>

<p>
Unmarshalling from a URL:
<blockquote>
   <pre>
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();
      URL url = new URL( \"http://beaker.east/nosferatu.xml\" );
      Object o = u.unmarshal( url );
   </pre>
</blockquote>

<p>
Unmarshalling from a StringBuffer using a
<tt>javax.xml.transform.stream.StreamSource</tt>:
<blockquote>
   <pre>
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();
      StringBuffer xmlStr = new StringBuffer( \"&lt;?xml version=&quot;1.0&quot;?&gt;...\" );
      Object o = u.unmarshal( new StreamSource( new StringReader( xmlStr.toString() ) ) );
   </pre>
</blockquote>

<p>
Unmarshalling from a <tt>org.w3c.dom.Node</tt>:
<blockquote>
   <pre>
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();

      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      dbf.setNamespaceAware(true);
      DocumentBuilder db = dbf.newDocumentBuilder();
      Document doc = db.parse(new File( \"nosferatu.xml\"));

      Object o = u.unmarshal( doc );
   </pre>
</blockquote>

<p>
Unmarshalling from a <tt>javax.xml.transform.sax.SAXSource</tt> using a
client specified validating SAX2.0 parser:
<blockquote>
   <pre>
      // configure a validating SAX2.0 parser (Xerces2)
      static final String JAXP_SCHEMA_LANGUAGE =
          \"http://java.sun.com/xml/jaxp/properties/schemaLanguage\";
      static final String JAXP_SCHEMA_LOCATION =
          \"http://java.sun.com/xml/jaxp/properties/schemaSource\";
      static final String W3C_XML_SCHEMA =
          \"http://www.w3.org/2001/XMLSchema\";

      System.setProperty( \"javax.xml.parsers.SAXParserFactory\",
                          \"org.apache.xerces.jaxp.SAXParserFactoryImpl\" );

      SAXParserFactory spf = SAXParserFactory.newInstance();
      spf.setNamespaceAware(true);
      spf.setValidating(true);
      SAXParser saxParser = spf.newSAXParser();

      try {
          saxParser.setProperty(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
          saxParser.setProperty(JAXP_SCHEMA_LOCATION, \"http://....\");
      } catch (SAXNotRecognizedException x) {
          // exception handling omitted
      }

      XMLReader xmlReader = saxParser.getXMLReader();
      SAXSource source =
          new SAXSource( xmlReader, new InputSource( \"http://...\" ) );

      // Setup JAXB to unmarshal
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();
      ValidationEventCollector vec = new ValidationEventCollector();
      u.setEventHandler( vec );

      // turn off the JAXB provider's default validation mechanism to
      // avoid duplicate validation
      u.setValidating( false )

      // unmarshal
      Object o = u.unmarshal( source );

      // check for events
      if( vec.hasEvents() ) {
         // iterate over events
      }
   </pre>
</blockquote>

<p>
Unmarshalling from a StAX XMLStreamReader:
<blockquote>
   <pre>
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();

      javax.xml.stream.XMLStreamReader xmlStreamReader =
          javax.xml.stream.XMLInputFactory().newInstance().createXMLStreamReader( ... );

      Object o = u.unmarshal( xmlStreamReader );
   </pre>
</blockquote>

<p>
Unmarshalling from a StAX XMLEventReader:
<blockquote>
   <pre>
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();

      javax.xml.stream.XMLEventReader xmlEventReader =
          javax.xml.stream.XMLInputFactory().newInstance().createXMLEventReader( ... );

      Object o = u.unmarshal( xmlEventReader );
   </pre>
</blockquote>

<p>
<a name=\"unmarshalEx\"></a>
<b>Unmarshalling XML Data</b><br>
<blockquote>
Unmarshalling can deserialize XML data that represents either an entire XML document
or a subtree of an XML document. Typically, it is sufficient to use the
unmarshalling methods described by
<a href=\"#unmarshalGlobal\">Unmarshal root element that is declared globally</a>.
These unmarshal methods utilize {@link JAXBContext}'s mapping of global XML element
declarations and type definitions to JAXB mapped classes to initiate the
unmarshalling of the root element of  XML data.  When the {@link JAXBContext}'s
mappings are not sufficient to unmarshal the root element of XML data,
the application can assist the unmarshalling process by using the
<a href=\"#unmarshalByDeclaredType\">unmarshal by declaredType methods</a>.
These methods are useful for unmarshalling XML data where
the root element corresponds to a local element declaration in the schema.
</blockquote>

<blockquote>
An unmarshal method never returns null. If the unmarshal process is unable to unmarshal
the root of XML content to a JAXB mapped object, a fatal error is reported that
terminates processing by throwing JAXBException.
</blockquote>

<p>
<a name=\"unmarshalGlobal\"></a>
<b>Unmarshal a root element that is globally declared</b><br>
<blockquote>
The unmarshal methods that do not have an <tt>declaredType</tt> parameter use
{@link JAXBContext} to unmarshal the root element of an XML data. The {@link JAXBContext}
instance is the one that was used to create this <tt>Unmarshaller</tt>. The {@link JAXBContext}
instance maintains a mapping of globally declared XML element and type definition names to
JAXB mapped classes. The unmarshal method checks if {@link JAXBContext} has a mapping
from the root element's XML name and/or <tt>@xsi:type</tt> to a JAXB mapped class.  If it does, it umarshalls the
XML data using the appropriate JAXB mapped class. Note that when the root element name is unknown and the root
element has an <tt>@xsi:type</tt>, the XML data is unmarshalled
using that JAXB mapped class as the value of a {@link JAXBElement}.
When the {@link JAXBContext} object does not have a mapping for the root element's name
nor its <tt>@xsi:type</tt>, if it exists,
then the unmarshal operation will abort immediately by throwing a {@link UnmarshalException
UnmarshalException}. This exception scenario can be worked around by using the unmarshal by
declaredType methods described in the next subsection.
</blockquote>

<p>
<a name=\"unmarshalByDeclaredType\"></a>
<b>Unmarshal by Declared Type</b><br>
<blockquote>
The unmarshal methods with a <code>declaredType</code> parameter enable an
application to deserialize a root element of XML data, even when
there is no mapping in {@link JAXBContext} of the root element's XML name.
The unmarshaller unmarshals the root element using the application provided
mapping specified as the <tt>declaredType</tt> parameter.
Note that even when the root element's element name is mapped by {@link JAXBContext},
the <code>declaredType</code> parameter overrides that mapping for
deserializing the root element when using these unmarshal methods.
Additionally, when the root element of XML data has an <tt>xsi:type</tt> attribute and
that attribute's value references a type definition that is mapped
to a JAXB mapped class by {@link JAXBContext}, that the root
element's <tt>xsi:type</tt> attribute takes
precedence over the unmarshal methods <tt>declaredType</tt> parameter.
These methods always return a <tt>JAXBElement&lt;declaredType></tt>
instance. The table below shows how the properties of the returned JAXBElement
instance are set.

<a name=\"unmarshalDeclaredTypeReturn\"></a>
<p>
  <table border=\"2\" rules=\"all\" cellpadding=\"4\">
  <thead>
    <tr>
      <th align=\"center\" colspan=\"2\">
      Unmarshal By Declared Type returned JAXBElement
      </tr>
    <tr>
      <th>JAXBElement Property</th>
      <th>Value</th>
    </tr>
    <tr>
      <td>name</td>
      <td><code>xml element name</code></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>value</td>
      <td><code>instanceof declaredType</code></td>
    </tr>
    <tr>
      <td>declaredType</td>
      <td>unmarshal method <code>declaredType</code> parameter</td>
    </tr>
    <tr>
      <td>scope</td>
      <td><code>null</code> <i>(actual scope is unknown)</i></td>
    </tr>
  </tbody>
 </table>
</blockquote>

<p>
The following is an example of
<a href=\"#unmarshalByDeclaredType\">unmarshal by declaredType method</a>.
<p>
Unmarshal by declaredType from a <tt>org.w3c.dom.Node</tt>:
<blockquote>
   <pre>
      Schema fragment for example
      &lt;xs:schema>
         &lt;xs:complexType name=\"FooType\">...&lt;\\xs:complexType>
         &lt;!-- global element declaration \"PurchaseOrder\" -->
         &lt;xs:element name=\"PurchaseOrder\">
             &lt;xs:complexType>
                &lt;xs:sequence>
                   &lt;!-- local element declaration \"foo\" -->
                   &lt;xs:element name=\"foo\" type=\"FooType\"/>
                   ...
                &lt;/xs:sequence>
             &lt;/xs:complexType>
         &lt;/xs:element>
      &lt;/xs:schema>

      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();

      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      dbf.setNamespaceAware(true);
      DocumentBuilder db = dbf.newDocumentBuilder();
      Document doc = db.parse(new File( \"nosferatu.xml\"));
      Element  fooSubtree = ...; // traverse DOM till reach xml element foo, constrained by a
                                 // local element declaration in schema.

      // FooType is the JAXB mapping of the type of local element declaration foo.
      JAXBElement&lt;FooType> foo = u.unmarshal( fooSubtree, FooType.class);
   </pre>
</blockquote>

<p>
<b>Support for SAX2.0 Compliant Parsers</b><br>
<blockquote>
A client application has the ability to select the SAX2.0 compliant parser
of their choice.  If a SAX parser is not selected, then the JAXB Provider's
default parser will be used.  Even though the JAXB Provider's default parser
is not required to be SAX2.0 compliant, all providers are required to allow
a client application to specify their own SAX2.0 parser.  Some providers may
require the client application to specify the SAX2.0 parser at schema compile
time. See {@link #unmarshal(javax.xml.transform.Source) unmarshal(Source)}
for more detail.
</blockquote>

<p>
<b>Validation and Well-Formedness</b><br>
<blockquote>
<p>
A client application can enable or disable JAXP 1.3 validation
mechanism via the <tt>setSchema(javax.xml.validation.Schema)</tt> API.
Sophisticated clients can specify their own validating SAX 2.0 compliant
parser and bypass the JAXP 1.3 validation mechanism using the
{@link #unmarshal(javax.xml.transform.Source) unmarshal(Source)}  API.

<p>
Since unmarshalling invalid XML content is defined in JAXB 2.0,
the Unmarshaller default validation event handler was made more lenient
than in JAXB 1.0.  When schema-derived code generated
by JAXB 1.0 binding compiler is registered with {@link JAXBContext},
the default unmarshal validation handler is
{@link javax.xml.bind.helpers.DefaultValidationEventHandler} and it
terminates the marshal  operation after encountering either a fatal error or an error.
For a JAXB 2.0 client application, there is no explicitly defined default
validation handler and the default event handling only
terminates the unmarshal operation after encountering a fatal error.

</blockquote>

<p>
<a name=\"supportedProps\"></a>
<b>Supported Properties</b><br>
<blockquote>
<p>
There currently are not any properties required to be supported by all
JAXB Providers on Unmarshaller.  However, some providers may support
their own set of provider specific properties.
</blockquote>

<p>
<a name=\"unmarshalEventCallback\"></a>
<b>Unmarshal Event Callbacks</b><br>
<blockquote>
The {@link Unmarshaller} provides two styles of callback mechanisms
that allow application specific processing during key points in the
unmarshalling process.  In 'class defined' event callbacks, application
specific code placed in JAXB mapped classes is triggered during
unmarshalling.  'External listeners' allow for centralized processing
of unmarshal events in one callback method rather than by type event callbacks.
<p>
'Class defined' event callback methods allow any JAXB mapped class to specify
its own specific callback methods by defining methods with the following method signature:
<blockquote>
<pre>
  // This method is called immediately after the object is created and before the unmarshalling of this
  // object begins. The callback provides an opportunity to initialize JavaBean properties prior to unmarshalling.
  void beforeUnmarshal(Unmarshaller, Object parent);

  //This method is called after all the properties (except IDREF) are unmarshalled for this object,
  //but before this object is set to the parent object.
  void afterUnmarshal(Unmarshaller, Object parent);
</pre>
</blockquote>
The class defined callback methods should be used when the callback method requires
access to non-public methods and/or fields of the class.
<p>
The external listener callback mechanism enables the registration of a {@link Listener}
instance with an {@link Unmarshaller#setListener(Listener)}. The external listener receives all callback events,
allowing for more centralized processing than per class defined callback methods.  The external listener
receives events when unmarshalling proces is marshalling to a JAXB element or to JAXB mapped class.
<p>
The 'class defined' and external listener event callback methods are independent of each other,
both can be called for one event.  The invocation ordering when both listener callback methods exist is
defined in {@link Listener#beforeUnmarshal(Object, Object)} and {@link Listener#afterUnmarshal(Object, Object)}.
<p>
An event callback method throwing an exception terminates the current unmarshal process.

</blockquote>

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see JAXBContext
@see Marshaller
@see Validator
@since JAXB1.0
"
      operation 11974402 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified file and return the resulting
content tree.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

@param f the file to unmarshal XML data from
@return the newly created root object of the java content tree

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the file parameter is null
"
      end

      operation 11974530 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified InputStream and return the
resulting content tree.  Validation event location information may
be incomplete when using this form of the unmarshal API.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

@param is the InputStream to unmarshal XML data from
@return the newly created root object of the java content tree

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the InputStream parameter is null
"
      end

      operation 11974658 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified Reader and return the
resulting content tree.  Validation event location information may
be incomplete when using this form of the unmarshal API,
because a Reader does not provide the system ID.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

@param reader the Reader to unmarshal XML data from
@return the newly created root object of the java content tree

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the InputStream parameter is null
@since JAXB2.0
"
      end

      operation 11974786 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified URL and return the resulting
content tree.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

@param url the url to unmarshal XML data from
@return the newly created root object of the java content tree

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the URL parameter is null
"
      end

      operation 11974914 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "source" type class_ref 606594 // InputSource
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified SAX InputSource and return the
resulting content tree.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

@param source the input source to unmarshal XML data from
@return the newly created root object of the java content tree

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the InputSource parameter is null
"
      end

      operation 11975042 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal global XML data from the specified DOM tree and return the resulting
content tree.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

@param node
     the document/element to unmarshal XML data from.
     The caller must support at least Document and Element.
@return the newly created root object of the java content tree

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the Node parameter is null
@see #unmarshal(org.w3c.dom.Node, Class)
"
      end

      operation 11975170 "unmarshal"
	public return_type class_ref 1405058 // JAXBElement
	nparams 2
	  param inout name "node" type class_ref 317570 // Node
	  param inout name "declaredType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data by JAXB mapped <tt>declaredType</tt>
and return the resulting content tree.

<p>
Implements <a href=\"#unmarshalByDeclaredType\">Unmarshal by Declared Type</a>

@param node
     the document/element to unmarshal XML data from.
     The caller must support at least Document and Element.
@param declaredType
     appropriate JAXB mapped class to hold <tt>node</tt>'s XML data.

@return <a href=\"#unmarshalDeclaredTypeReturn\">JAXB Element</a> representation of <tt>node</tt>

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If any parameter is null
@since JAXB2.0
"
      end

      operation 11975298 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "source" type class_ref 627202 // Source
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified XML Source and return the
resulting content tree.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

<p>
<a name=\"saxParserPlugable\"></a>
<b>SAX 2.0 Parser Pluggability</b>
<p>
A client application can choose not to use the default parser mechanism
supplied with their JAXB provider.  Any SAX 2.0 compliant parser can be
substituted for the JAXB provider's default mechanism.  To do so, the
client application must properly configure a <tt>SAXSource</tt> containing
an <tt>XMLReader</tt> implemented by the SAX 2.0 parser provider.  If the
<tt>XMLReader</tt> has an <tt>org.xml.sax.ErrorHandler</tt> registered
on it, it will be replaced by the JAXB Provider so that validation errors
can be reported via the <tt>ValidationEventHandler</tt> mechanism of
JAXB.  If the <tt>SAXSource</tt> does not contain an <tt>XMLReader</tt>,
then the JAXB provider's default parser mechanism will be used.
<p>
This parser replacement mechanism can also be used to replace the JAXB
provider's unmarshal-time validation engine.  The client application
must properly configure their SAX 2.0 compliant parser to perform
validation (as shown in the example above).  Any <tt>SAXParserExceptions
</tt> encountered by the parser during the unmarshal operation will be
processed by the JAXB provider and converted into JAXB
<tt>ValidationEvent</tt> objects which will be reported back to the
client via the <tt>ValidationEventHandler</tt> registered with the
<tt>Unmarshaller</tt>.  <i>Note:</i> specifying a substitute validating
SAX 2.0 parser for unmarshalling does not necessarily replace the
validation engine used by the JAXB provider for performing on-demand
validation.
<p>
The only way for a client application to specify an alternate parser
mechanism to be used during unmarshal is via the
<tt>unmarshal(SAXSource)</tt> API.  All other forms of the unmarshal
method (File, URL, Node, etc) will use the JAXB provider's default
parser and validator mechanisms.

@param source the XML Source to unmarshal XML data from (providers are
       only required to support SAXSource, DOMSource, and StreamSource)
@return the newly created root object of the java content tree

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the Source parameter is null
@see #unmarshal(javax.xml.transform.Source, Class)
"
      end

      operation 11975426 "unmarshal"
	public return_type class_ref 1405058 // JAXBElement
	nparams 2
	  param inout name "source" type class_ref 627202 // Source
	  param inout name "declaredType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified XML Source by <tt>declaredType</tt> and return the
resulting content tree.

<p>
Implements <a href=\"#unmarshalByDeclaredType\">Unmarshal by Declared Type</a>

<p>
See <a href=\"#saxParserPlugable\">SAX 2.0 Parser Pluggability</a>

@param source the XML Source to unmarshal XML data from (providers are
       only required to support SAXSource, DOMSource, and StreamSource)
@param declaredType
     appropriate JAXB mapped class to hold <tt>source</tt>'s xml root element
@return Java content rooted by <a href=\"#unmarshalDeclaredTypeReturn\">JAXB Element</a>

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If any parameter is null
@since JAXB2.0
"
      end

      operation 11975554 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "reader" type class_ref 644610 // XMLStreamReader
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified pull parser and return the
resulting content tree.

<p>
Implements <a href=\"#unmarshalGlobal\">Unmarshal Global Root Element</a>.

<p>
This method assumes that the parser is on a START_DOCUMENT or
START_ELEMENT event.  Unmarshalling will be done from this
start event to the corresponding end event.  If this method
returns successfully, the <tt>reader</tt> will be pointing at
the token right after the end event.

@param reader
     The parser to be read.
@return
     the newly created root object of the java content tree.

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the <tt>reader</tt> parameter is null
@throws IllegalStateException
     If <tt>reader</tt> is not pointing to a START_DOCUMENT or
     START_ELEMENT  event.
@since JAXB2.0
@see #unmarshal(javax.xml.stream.XMLStreamReader, Class)
"
      end

      operation 11975682 "unmarshal"
	public return_type class_ref 1405058 // JAXBElement
	nparams 2
	  param inout name "reader" type class_ref 644610 // XMLStreamReader
	  param inout name "declaredType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal root element to JAXB mapped <tt>declaredType</tt>
and return the resulting content tree.

<p>
This method implements <a href=\"#unmarshalByDeclaredType\">unmarshal by declaredType</a>.
<p>
This method assumes that the parser is on a START_DOCUMENT or
START_ELEMENT event. Unmarshalling will be done from this
start event to the corresponding end event.  If this method
returns successfully, the <tt>reader</tt> will be pointing at
the token right after the end event.

@param reader
     The parser to be read.
@param declaredType
     appropriate JAXB mapped class to hold <tt>reader</tt>'s START_ELEMENT XML data.

@return   content tree rooted by <a href=\"#unmarshalDeclaredTypeReturn\">JAXB Element representation</a>

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If any parameter is null
@since JAXB2.0
"
      end

      operation 11975810 "unmarshal"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "reader" type class_ref 643586 // XMLEventReader
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal XML data from the specified pull parser and return the
resulting content tree.

<p>
This method is an <a href=\"#unmarshalGlobal\">Unmarshal Global Root method</a>.

<p>
This method assumes that the parser is on a START_DOCUMENT or
START_ELEMENT event.  Unmarshalling will be done from this
start event to the corresponding end event.  If this method
returns successfully, the <tt>reader</tt> will be pointing at
the token right after the end event.

@param reader
     The parser to be read.
@return
     the newly created root object of the java content tree.

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If the <tt>reader</tt> parameter is null
@throws IllegalStateException
     If <tt>reader</tt> is not pointing to a START_DOCUMENT or
     START_ELEMENT event.
@since JAXB2.0
@see #unmarshal(javax.xml.stream.XMLEventReader, Class)
"
      end

      operation 11975938 "unmarshal"
	public return_type class_ref 1405058 // JAXBElement
	nparams 2
	  param inout name "reader" type class_ref 643586 // XMLEventReader
	  param inout name "declaredType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal root element to JAXB mapped <tt>declaredType</tt>
and return the resulting content tree.

<p>
This method implements <a href=\"#unmarshalByDeclaredType\">unmarshal by declaredType</a>.

<p>
This method assumes that the parser is on a START_DOCUMENT or
START_ELEMENT event. Unmarshalling will be done from this
start event to the corresponding end event.  If this method
returns successfully, the <tt>reader</tt> will be pointing at
the token right after the end event.

@param reader
     The parser to be read.
@param declaredType
     appropriate JAXB mapped class to hold <tt>reader</tt>'s START_ELEMENT XML data.

@return   content tree rooted by <a href=\"#unmarshalDeclaredTypeReturn\">JAXB Element representation</a>

@throws JAXBException
    If any unexpected errors occur while unmarshalling
@throws UnmarshalException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Unmarshaller</tt> is unable to perform the XML to Java
    binding.  See <a href=\"#unmarshalEx\">Unmarshalling XML Data</a>
@throws IllegalArgumentException
     If any parameter is null
@since JAXB2.0
"
      end

      operation 11976066 "getUnmarshallerHandler"
	public return_type class_ref 1409282 // UnmarshallerHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an unmarshaller handler object that can be used as a component in
an XML pipeline.

<p>
The JAXB Provider can return the same handler object for multiple
invocations of this method. In other words, this method does not
necessarily create a new instance of <tt>UnmarshallerHandler</tt>. If the
application needs to use more than one <tt>UnmarshallerHandler</tt>, it
should create more than one <tt>Unmarshaller</tt>.

@return the unmarshaller handler object
@see UnmarshallerHandler
"
      end

      operation 11976194 "setValidating"
	public explicit_return_type "void"
	nparams 1
	  param inout name "validating" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether or not the default validation mechanism of the
<tt>Unmarshaller</tt> should validate during unmarshal operations.
By default, the <tt>Unmarshaller</tt> does not validate.
<p>
This method may only be invoked before or after calling one of the
unmarshal methods.
<p>
This method only controls the JAXB Provider's default unmarshal-time
validation mechanism - it has no impact on clients that specify their
own validating SAX 2.0 compliant parser.  Clients that specify their
own unmarshal-time validation mechanism may wish to turn off the JAXB
Provider's default validation mechanism via this API to avoid \"double
validation\".
<p>
This method is deprecated as of JAXB 2.0 - please use the new
{@link #setSchema(javax.xml.validation.Schema)} API.

@param validating true if the Unmarshaller should validate during
       unmarshal, false otherwise
@throws JAXBException if an error occurred while enabling or disabling
        validation at unmarshal time
@throws UnsupportedOperationException could be thrown if this method is
        invoked on an Unmarshaller created from a JAXBContext referencing
        JAXB 2.0 mapped classes
@deprecated since JAXB2.0, please see {@link #setSchema(javax.xml.validation.Schema)}
"
      end

      operation 11976322 "isValidating"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the <tt>Unmarshaller</tt> is configured to
validate during unmarshal operations.
<p>
This API returns the state of the JAXB Provider's default unmarshal-time
validation mechanism.
<p>
This method is deprecated as of JAXB 2.0 - please use the new
{@link #getSchema()} API.

@return true if the Unmarshaller is configured to validate during
        unmarshal operations, false otherwise
@throws JAXBException if an error occurs while retrieving the validating
        flag
@throws UnsupportedOperationException could be thrown if this method is
        invoked on an Unmarshaller created from a JAXBContext referencing
        JAXB 2.0 mapped classes
@deprecated since JAXB2.0, please see {@link #getSchema()}
"
      end

      operation 11976450 "setEventHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1405186 // ValidationEventHandler
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allow an application to register a <tt>ValidationEventHandler</tt>.
<p>
The <tt>ValidationEventHandler</tt> will be called by the JAXB Provider
if any validation errors are encountered during calls to any of the
unmarshal methods.  If the client application does not register a
<tt>ValidationEventHandler</tt> before invoking the unmarshal methods,
then <tt>ValidationEvents</tt> will be handled by the default event
handler which will terminate the unmarshal operation after the first
error or fatal error is encountered.
<p>
Calling this method with a null parameter will cause the Unmarshaller
to revert back to the default event handler.

@param handler the validation event handler
@throws JAXBException if an error was encountered while setting the
        event handler
"
      end

      operation 11976578 "getEventHandler"
	public return_type class_ref 1405186 // ValidationEventHandler
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current event handler or the default event handler if one
hasn't been set.

@return the current ValidationEventHandler or the default event handler
        if it hasn't been set
@throws JAXBException if an error was encountered while getting the
        current event handler
"
      end

      operation 11976706 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the particular property in the underlying implementation of
<tt>Unmarshaller</tt>.  This method can only be used to set one of
the standard JAXB defined properties above or a provider specific
property.  Attempting to set an undefined property will result in
a PropertyException being thrown.  See <a href=\"#supportedProps\">
Supported Properties</a>.

@param name the name of the property to be set. This value can either
             be specified using one of the constant fields or a user
             supplied string.
@param value the value of the property to be set

@throws PropertyException when there is an error processing the given
                           property or value
@throws IllegalArgumentException
     If the name parameter is null
"
      end

      operation 11976834 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the particular property in the underlying implementation of
<tt>Unmarshaller</tt>.  This method can only be used to get one of
the standard JAXB defined properties above or a provider specific
property.  Attempting to get an undefined property will result in
a PropertyException being thrown.  See <a href=\"#supportedProps\">
Supported Properties</a>.

@param name the name of the property to retrieve
@return the value of the requested property

@throws PropertyException
     when there is an error retrieving the given property or value
     property name
@throws IllegalArgumentException
     If the name parameter is null
"
      end

      operation 11976962 "setSchema"
	public explicit_return_type "void"
	nparams 1
	  param inout name "schema" type class_ref 719490 // Schema
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify the JAXP 1.3 {@link javax.xml.validation.Schema Schema}
object that should be used to validate subsequent unmarshal operations
against.  Passing null into this method will disable validation.
<p>
This method replaces the deprecated {@link #setValidating(boolean) setValidating(boolean)}
API.

<p>
Initially this property is set to <tt>null</tt>.

@param schema Schema object to validate unmarshal operations against or null to disable validation
@throws UnsupportedOperationException could be thrown if this method is
        invoked on an Unmarshaller created from a JAXBContext referencing
        JAXB 1.0 mapped classes
@since JAXB2.0
"
      end

      operation 11977090 "getSchema"
	public return_type class_ref 719490 // Schema
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the JAXP 1.3 {@link javax.xml.validation.Schema Schema} object
being used to perform unmarshal-time validation.  If there is no
Schema set on the unmarshaller, then this method will return null
indicating that unmarshal-time validation will not be performed.
<p>
This method provides replacement functionality for the deprecated
{@link #isValidating()} API as well as access to the Schema object.
To determine if the Unmarshaller has validation enabled, simply
test the return type for null:
<p>
<code>
  boolean isValidating = u.getSchema()!=null;
</code>

@return the Schema object being used to perform unmarshal-time
     validation or null if not present
@throws UnsupportedOperationException could be thrown if this method is
        invoked on an Unmarshaller created from a JAXBContext referencing
        JAXB 1.0 mapped classes
@since JAXB2.0
"
      end

      operation 11977218 "setAdapter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adapter" type class_ref 1407874 // XmlAdapter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a configured instance of {@link XmlAdapter} with this unmarshaller.

<p>
This is a convenience method that invokes <code>setAdapter(adapter.getClass(),adapter);</code>.

@see #setAdapter(Class,XmlAdapter)
@throws IllegalArgumentException
     if the adapter parameter is null.
@throws UnsupportedOperationException
     if invoked agains a JAXB 1.0 implementation.
@since JAXB2.0
"
      end

      operation 11977346 "setAdapter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "adapter" explicit_type "A"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends XmlAdapter> ${type} ${name}${(}${t0}<A> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a configured instance of {@link XmlAdapter} with this unmarshaller.

<p>
Every unmarshaller internally maintains a
{@link java.util.Map}&lt;{@link Class},{@link XmlAdapter}>,
which it uses for unmarshalling classes whose fields/methods are annotated
with {@link javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter}.

<p>
This method allows applications to use a configured instance of {@link XmlAdapter}.
When an instance of an adapter is not given, an unmarshaller will create
one by invoking its default constructor.

@param type
     The type of the adapter. The specified instance will be used when
     {@link javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter#value()}
     refers to this type.
@param adapter
     The instance of the adapter to be used. If null, it will un-register
     the current adapter set for this type.
@throws IllegalArgumentException
     if the type parameter is null.
@throws UnsupportedOperationException
     if invoked agains a JAXB 1.0 implementation.
@since JAXB2.0
"
      end

      operation 11977474 "getAdapter"
	public explicit_return_type "A"
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends XmlAdapter> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the adapter associated with the specified type.

This is the reverse operation of the {@link #setAdapter} method.

@throws IllegalArgumentException
     if the type parameter is null.
@throws UnsupportedOperationException
     if invoked agains a JAXB 1.0 implementation.
@since JAXB2.0
"
      end

      operation 11977602 "setAttachmentUnmarshaller"
	public explicit_return_type "void"
	nparams 1
	  param inout name "au" type class_ref 1409410 // AttachmentUnmarshaller
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Associate a context that resolves cid's, content-id URIs, to
binary data passed as attachments.</p>
<p/>
<p>Unmarshal time validation, enabled via {@link #setSchema(Schema)},
must be supported even when unmarshaller is performing XOP processing.
</p>

@throws IllegalStateException if attempt to concurrently call this
                              method during a unmarshal operation.
"
      end

      operation 11977730 "getAttachmentUnmarshaller"
	public return_type class_ref 1409410 // AttachmentUnmarshaller
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1409538 "Listener"
	abstract visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 11977858 "beforeUnmarshal"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "target" type class_ref 129538 // Object
	    param inout name "parent" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p/>
Callback method invoked before unmarshalling into <tt>target</tt>.
<p/>
<p/>
This method is invoked immediately after <tt>target</tt> was created and
before the unmarshalling of this object begins. Note that
if the class of <tt>target</tt> defines its own <tt>beforeUnmarshal</tt> method,
the class specific callback method is invoked before this method is invoked.

@param target non-null instance of JAXB mapped class prior to unmarshalling into it.
@param parent instance of JAXB mapped class that will eventually reference <tt>target</tt>.
              <tt>null</tt> when <tt>target</tt> is root element.
"
	end

	operation 11977986 "afterUnmarshal"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "target" type class_ref 129538 // Object
	    param inout name "parent" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p/>
Callback method invoked after unmarshalling XML data into <tt>target</tt>.
<p/>
<p/>
This method is invoked after all the properties (except IDREF) are unmarshalled into <tt>target</tt>,
but before <tt>target</tt> is set into its <tt>parent</tt> object.
Note that if the class of <tt>target</tt> defines its own <tt>afterUnmarshal</tt> method,
the class specific callback method is invoked before this method is invoked.

@param target non-null instance of JAXB mapped class prior to unmarshalling into it.
@param parent instance of JAXB mapped class that will reference <tt>target</tt>.
              <tt>null</tt> when <tt>target</tt> is root element.
"
	end
      end

      operation 11978114 "setListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1409538 // Listener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Register unmarshal event callback {@link Listener} with this {@link Unmarshaller}.

<p>
There is only one Listener per Unmarshaller. Setting a Listener replaces the previous set Listener.
One can unregister current Listener by setting listener to <tt>null</tt>.

@param listener  provides unmarshal event callbacks for this {@link Unmarshaller}
@since JAXB2.0
"
      end

      operation 11978242 "getListener"
	public return_type class_ref 1409538 // Listener
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return {@link Listener} registered with this {@link Unmarshaller}.

@return registered {@link Listener} or <code>null</code> if no Listener is registered with this Unmarshaller.
@since JAXB2.0
"
      end
    end

    class 1407106 "Marshaller"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
The <tt>Marshaller</tt> class is responsible for governing the process
of serializing Java content trees back into XML data.  It provides the basic
marshalling methods:

<p>
<i>Assume the following setup code for all following code fragments:</i>
<blockquote>
   <pre>
      JAXBContext jc = JAXBContext.newInstance( \"com.acme.foo\" );
      Unmarshaller u = jc.createUnmarshaller();
      Object element = u.unmarshal( new File( \"foo.xml\" ) );
      Marshaller m = jc.createMarshaller();
   </pre>
</blockquote>

<p>
Marshalling to a File:
<blockquote>
   <pre>
      OutputStream os = new FileOutputStream( \"nosferatu.xml\" );
      m.marshal( element, os );
   </pre>
</blockquote>

<p>
Marshalling to a SAX ContentHandler:
<blockquote>
   <pre>
      // assume MyContentHandler instanceof ContentHandler
      m.marshal( element, new MyContentHandler() );
   </pre>
</blockquote>

<p>
Marshalling to a DOM Node:
<blockquote>
   <pre>
      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      dbf.setNamespaceAware(true);
      DocumentBuilder db = dbf.newDocumentBuilder();
      Document doc = db.newDocument();

      m.marshal( element, doc );
   </pre>
</blockquote>

<p>
Marshalling to a java.io.OutputStream:
<blockquote>
   <pre>
      m.marshal( element, System.out );
   </pre>
</blockquote>

<p>
Marshalling to a java.io.Writer:
<blockquote>
   <pre>
      m.marshal( element, new PrintWriter( System.out ) );
   </pre>
</blockquote>

<p>
Marshalling to a javax.xml.transform.SAXResult:
<blockquote>
   <pre>
      // assume MyContentHandler instanceof ContentHandler
      SAXResult result = new SAXResult( new MyContentHandler() );

      m.marshal( element, result );
   </pre>
</blockquote>

<p>
Marshalling to a javax.xml.transform.DOMResult:
<blockquote>
   <pre>
      DOMResult result = new DOMResult();

      m.marshal( element, result );
   </pre>
</blockquote>

<p>
Marshalling to a javax.xml.transform.StreamResult:
<blockquote>
   <pre>
      StreamResult result = new StreamResult( System.out );

      m.marshal( element, result );
   </pre>
</blockquote>

<p>
Marshalling to a javax.xml.stream.XMLStreamWriter:
<blockquote>
   <pre>
      XMLStreamWriter xmlStreamWriter =
          XMLOutputFactory.newInstance().createXMLStreamWriter( ... );

      m.marshal( element, xmlStreamWriter );
   </pre>
</blockquote>

<p>
Marshalling to a javax.xml.stream.XMLEventWriter:
<blockquote>
   <pre>
      XMLEventWriter xmlEventWriter =
          XMLOutputFactory.newInstance().createXMLEventWriter( ... );

      m.marshal( element, xmlEventWriter );
   </pre>
</blockquote>

<p>
<a name=\"elementMarshalling\"></a>
<b>Marshalling content tree rooted by a JAXB element</b><br>
<blockquote>
The first parameter of the overloaded
<tt>Marshaller.marshal(java.lang.Object, ...)</tt> methods must be a
JAXB element as computed by
{@link JAXBIntrospector#isElement(java.lang.Object)};
otherwise, a <tt>Marshaller.marshal</tt> method must throw a
{@link MarshalException}. There exist two mechanisms
to enable marshalling an instance that is not a JAXB element.
One method is to wrap the instance as a value of a {@link JAXBElement},
and pass the wrapper element as the first parameter to
a <tt>Marshaller.marshal</tt> method. For java to schema binding, it
is also possible to simply annotate the instance's class with
&#64;{@link XmlRootElement}.
</blockquote>

<p>
<b>Encoding</b><br>
<blockquote>
By default, the Marshaller will use UTF-8 encoding when generating XML data
to a <tt>java.io.OutputStream</tt>, or a <tt>java.io.Writer</tt>.  Use the
{@link #setProperty(String,Object) setProperty} API to change the output
encoding used during these marshal operations.  Client applications are
expected to supply a valid character encoding name as defined in the
<a href=\"http://www.w3.org/TR/2000/REC-xml-20001006#charencoding\">W3C XML 1.0
Recommendation</a> and supported by your Java Platform</a>.
</blockquote>

<p>
<b>Validation and Well-Formedness</b><br>
<blockquote>
<p>
Client applications are not required to validate the Java content tree prior
to calling any of the marshal API's.  Furthermore, there is no requirement
that the Java content tree be valid with respect to its original schema in
order to marshal it back into XML data.  Different JAXB Providers will
support marshalling invalid Java content trees at varying levels, however
all JAXB Providers must be able to marshal a valid content tree back to
XML data.  A JAXB Provider must throw a <tt>MarshalException</tt> when it
is unable to complete the marshal operation due to invalid content.  Some
JAXB Providers will fully allow marshalling invalid content, others will fail
on the first validation error.
<p>
Even when schema validation is not explictly enabled for the marshal operation,
it is possible that certain types of validation events will be detected
during the operation.  Validation events will be reported to the registered
event handler.  If the client application has not registered an event handler
prior to invoking one of the marshal API's, then events will be delivered to
a default event handler which will terminate the marshal operation after
encountering the first error or fatal error. Note that for JAXB 2.0 and
later versions, {@link javax.xml.bind.helpers.DefaultValidationEventHandler} is
no longer used.

</blockquote>

<p>
<a name=\"supportedProps\"></a>
<b>Supported Properties</b><br>
<blockquote>
<p>
All JAXB Providers are required to support the following set of properties.
Some providers may support additional properties.
<dl>
  <dt><tt>jaxb.encoding</tt> - value must be a java.lang.String</dt>
  <dd>The output encoding to use when marshalling the XML data.  The
              Marshaller will use \"UTF-8\" by default if this property is not
      specified.</dd>
  <dt><tt>jaxb.formatted.output</tt> - value must be a java.lang.Boolean</dt>
  <dd>This property controls whether or not the Marshaller will format
      the resulting XML data with line breaks and indentation.  A
      true value for this property indicates human readable indented
      xml data, while a false value indicates unformatted xml data.
      The Marshaller will default to false (unformatted) if this
      property is not specified.</dd>
  <dt><tt>jaxb.schemaLocation</tt> - value must be a java.lang.String</dt>
  <dd>This property allows the client application to specify an
      xsi:schemaLocation attribute in the generated XML data.  The format of
      the schemaLocation attribute value is discussed in an easy to
      understand, non-normative form in
      <a href=\"http://www.w3.org/TR/xmlschema-0/#schemaLocation\">Section 5.6
      of the W3C XML Schema Part 0: Primer</a> and specified in
      <a href=\"http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions\">
      Section 2.6 of the W3C XML Schema Part 1: Structures</a>.</dd>
  <dt><tt>jaxb.noNamespaceSchemaLocation</tt> - value must be a java.lang.String</dt>
  <dd>This property allows the client application to specify an
      xsi:noNamespaceSchemaLocation attribute in the generated XML
      data.  The format of the schemaLocation attribute value is discussed in
      an easy to understand, non-normative form in
      <a href=\"http://www.w3.org/TR/xmlschema-0/#schemaLocation\">Section 5.6
      of the W3C XML Schema Part 0: Primer</a> and specified in
      <a href=\"http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions\">
      Section 2.6 of the W3C XML Schema Part 1: Structures</a>.</dd>
  <dt><tt>jaxb.fragment</tt> - value must be a java.lang.Boolean</dt>
  <dd>This property determines whether or not document level events will be
      generated by the Marshaller.  If the property is not specified, the
      default is <tt>false</tt>. This property has different implications depending
      on which marshal api you are using - when this property is set to true:<br>
      <ul>
        <li>{@link #marshal(Object,org.xml.sax.ContentHandler) marshal(Object,ContentHandler)} - the Marshaller won't
            invoke {@link org.xml.sax.ContentHandler#startDocument()} and
            {@link org.xml.sax.ContentHandler#endDocument()}.</li>
        <li>{@link #marshal(Object,org.w3c.dom.Node) marshal(Object,Node)} - the property has no effect on this
            API.</li>
        <li>{@link #marshal(Object,java.io.OutputStream) marshal(Object,OutputStream)} - the Marshaller won't
            generate an xml declaration.</li>
        <li>{@link #marshal(Object,java.io.Writer) marshal(Object,Writer)} - the Marshaller won't
            generate an xml declaration.</li>
        <li>{@link #marshal(Object,javax.xml.transform.Result) marshal(Object,Result)} - depends on the kind of
            Result object, see semantics for Node, ContentHandler, and Stream APIs</li>
        <li>{@link #marshal(Object,javax.xml.stream.XMLEventWriter) marshal(Object,XMLEventWriter)} - the
            Marshaller will not generate {@link javax.xml.stream.events.XMLEvent#START_DOCUMENT} and
            {@link javax.xml.stream.events.XMLEvent#END_DOCUMENT} events.</li>
        <li>{@link #marshal(Object,javax.xml.stream.XMLStreamWriter) marshal(Object,XMLStreamWriter)} - the
            Marshaller will not generate {@link javax.xml.stream.events.XMLEvent#START_DOCUMENT} and
            {@link javax.xml.stream.events.XMLEvent#END_DOCUMENT} events.</li>
      </ul>
  </dd>
</dl>
</blockquote>

<p>
<a name=\"marshalEventCallback\"></a>
<b>Marshal Event Callbacks</b><br>
<blockquote>
\"The {@link Marshaller} provides two styles of callback mechanisms
that allow application specific processing during key points in the
unmarshalling process.  In 'class defined' event callbacks, application
specific code placed in JAXB mapped classes is triggered during
marshalling.  'External listeners' allow for centralized processing
of marshal events in one callback method rather than by type event callbacks.

<p>
Class defined event callback methods allow any JAXB mapped class to specify
its own specific callback methods by defining methods with the following method signatures:
<blockquote>
<pre>
  // Invoked by Marshaller after it has created an instance of this object.
  boolean beforeMarshal(Marshaller);

  // Invoked by Marshaller after it has marshalled all properties of this object.
  void afterMarshal(Marshaller);
</pre>
</blockquote>
The class defined event callback methods should be used when the callback method requires
access to non-public methods and/or fields of the class.
<p>
The external listener callback mechanism enables the registration of a {@link Listener}
instance with a {@link Marshaller#setListener(Listener)}. The external listener receives all callback events,
allowing for more centralized processing than per class defined callback methods.
<p>
The 'class defined' and external listener event callback methods are independent of each other,
both can be called for one event. The invocation ordering when both listener callback methods exist is
defined in {@link Listener#beforeMarshal(Object)} and {@link Listener#afterMarshal(Object)}.
<p>
An event callback method throwing an exception terminates the current marshal process.
</blockquote>

@author <ul><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see JAXBContext
@see Validator
@see Unmarshaller
@since JAXB1.0
"
      classrelation 4753794 // JAXB_ENCODING (<unidirectional association>)
	relation 4753794 --->
	  a role_name "JAXB_ENCODING" init_value "
        \"jaxb.encoding\"" class_relation const_relation public
	    comment "
The name of the property used to specify the output encoding in
the marshalled XML data.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4753794 // JAXB_ENCODING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4753922 // JAXB_FORMATTED_OUTPUT (<unidirectional association>)
	relation 4753922 --->
	  a role_name "JAXB_FORMATTED_OUTPUT" init_value "
        \"jaxb.formatted.output\"" class_relation const_relation public
	    comment "
The name of the property used to specify whether or not the marshalled
XML data is formatted with linefeeds and indentation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4753922 // JAXB_FORMATTED_OUTPUT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4754050 // JAXB_SCHEMA_LOCATION (<unidirectional association>)
	relation 4754050 --->
	  a role_name "JAXB_SCHEMA_LOCATION" init_value "
        \"jaxb.schemaLocation\"" class_relation const_relation public
	    comment "
The name of the property used to specify the xsi:schemaLocation
attribute value to place in the marshalled XML output.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754050 // JAXB_SCHEMA_LOCATION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4754178 // JAXB_NO_NAMESPACE_SCHEMA_LOCATION (<unidirectional association>)
	relation 4754178 --->
	  a role_name "JAXB_NO_NAMESPACE_SCHEMA_LOCATION" init_value "
        \"jaxb.noNamespaceSchemaLocation\"" class_relation const_relation public
	    comment "
The name of the property used to specify the
xsi:noNamespaceSchemaLocation attribute value to place in the marshalled
XML output.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754178 // JAXB_NO_NAMESPACE_SCHEMA_LOCATION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4754306 // JAXB_FRAGMENT (<unidirectional association>)
	relation 4754306 --->
	  a role_name "JAXB_FRAGMENT" init_value "
        \"jaxb.fragment\"" class_relation const_relation public
	    comment "
The name of the property used to specify whether or not the marshaller
will generate document level events (ie calling startDocument or endDocument).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754306 // JAXB_FRAGMENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 11967234 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "result" type class_ref 645506 // Result
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into the specified
<tt>javax.xml.transform.Result</tt>.

<p>
All JAXB Providers must at least support
{@link javax.xml.transform.dom.DOMResult},
{@link javax.xml.transform.sax.SAXResult}, and
{@link javax.xml.transform.stream.StreamResult}. It can
support other derived classes of <tt>Result</tt> as well.

@param jaxbElement
     The root of content tree to be marshalled.
@param result
     XML will be sent to this Result

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>obj</tt> (or any
     object reachable from <tt>obj</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
"
      end

      operation 11967362 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "os" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into an output stream.

@param jaxbElement
     The root of content tree to be marshalled.
@param os
     XML will be added to this stream.

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>obj</tt> (or any
     object reachable from <tt>obj</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
"
      end

      operation 11967490 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "output" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into a file.

@param jaxbElement
     The root of content tree to be marshalled.
@param output
     File to be written. If this file already exists, it will be overwritten.

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>obj</tt> (or any
     object reachable from <tt>obj</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
@since JAXB2.1
"
      end

      operation 11967618 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "writer" type class_ref 428034 // Writer
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into a Writer.

@param jaxbElement
     The root of content tree to be marshalled.
@param writer
     XML will be sent to this writer.

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>obj</tt> (or any
     object reachable from <tt>obj</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
"
      end

      operation 11967746 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "handler" type class_ref 605954 // ContentHandler
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into SAX2 events.

@param jaxbElement
     The root of content tree to be marshalled.
@param handler
     XML will be sent to this handler as SAX2 events.

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>obj</tt> (or any
     object reachable from <tt>obj</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
"
      end

      operation 11967874 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "node" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into a DOM tree.

@param jaxbElement
     The content tree to be marshalled.
@param node
     DOM nodes will be added as children of this node.
     This parameter must be a Node that accepts children
     ({@link org.w3c.dom.Document},
     {@link  org.w3c.dom.DocumentFragment}, or
     {@link  org.w3c.dom.Element})

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>jaxbElement</tt> (or any
     object reachable from <tt>jaxbElement</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
"
      end

      operation 11968002 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "writer" type class_ref 640258 // XMLStreamWriter
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into a
{@link javax.xml.stream.XMLStreamWriter}.

@param jaxbElement
     The content tree to be marshalled.
@param writer
     XML will be sent to this writer.

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>obj</tt> (or any
     object reachable from <tt>obj</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
@since JAXB 2.0
"
      end

      operation 11968130 "marshal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "jaxbElement" type class_ref 129538 // Object
	  param inout name "writer" type class_ref 640130 // XMLEventWriter
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the content tree rooted at <tt>jaxbElement</tt> into a
{@link javax.xml.stream.XMLEventWriter}.

@param jaxbElement
     The content tree rooted at jaxbElement to be marshalled.
@param writer
     XML will be sent to this writer.

@throws JAXBException
     If any unexpected problem occurs during the marshalling.
@throws MarshalException
     If the {@link ValidationEventHandler ValidationEventHandler}
     returns false from its <tt>handleEvent</tt> method or the
     <tt>Marshaller</tt> is unable to marshal <tt>obj</tt> (or any
     object reachable from <tt>obj</tt>).  See <a href=\"#elementMarshalling\">
     Marshalling a JAXB element</a>.
@throws IllegalArgumentException
     If any of the method parameters are null
@since JAXB 2.0
"
      end

      operation 11968258 "getNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "contentTree" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a DOM tree view of the content tree(Optional).

If the returned DOM tree is updated, these changes are also
visible in the content tree.
Use {@link #marshal(Object, org.w3c.dom.Node)} to force
a deep copy of the content tree to a DOM representation.

@param contentTree - JAXB Java representation of XML content

@return the DOM tree view of the contentTree

@throws UnsupportedOperationException
     If the JAXB provider implementation does not support a
     DOM view of the content tree

@throws IllegalArgumentException
     If any of the method parameters are null

@throws JAXBException
     If any unexpected problem occurs

"
      end

      operation 11968386 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the particular property in the underlying implementation of
<tt>Marshaller</tt>.  This method can only be used to set one of
the standard JAXB defined properties above or a provider specific
property.  Attempting to set an undefined property will result in
a PropertyException being thrown.  See <a href=\"#supportedProps\">
Supported Properties</a>.

@param name the name of the property to be set. This value can either
             be specified using one of the constant fields or a user
             supplied string.
@param value the value of the property to be set

@throws PropertyException when there is an error processing the given
                           property or value
@throws IllegalArgumentException
     If the name parameter is null
"
      end

      operation 11968514 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the particular property in the underlying implementation of
<tt>Marshaller</tt>.  This method can only be used to get one of
the standard JAXB defined properties above or a provider specific
property.  Attempting to get an undefined property will result in
a PropertyException being thrown.  See <a href=\"#supportedProps\">
Supported Properties</a>.

@param name the name of the property to retrieve
@return the value of the requested property

@throws PropertyException
     when there is an error retrieving the given property or value
     property name
@throws IllegalArgumentException
     If the name parameter is null
"
      end

      operation 11968642 "setEventHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1405186 // ValidationEventHandler
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allow an application to register a validation event handler.
<p>
The validation event handler will be called by the JAXB Provider if any
validation errors are encountered during calls to any of the marshal
API's.  If the client application does not register a validation event
handler before invoking one of the marshal methods, then validation
events will be handled by the default event handler which will terminate
the marshal operation after the first error or fatal error is encountered.
<p>
Calling this method with a null parameter will cause the Marshaller
to revert back to the default default event handler.

@param handler the validation event handler
@throws JAXBException if an error was encountered while setting the
        event handler
"
      end

      operation 11968770 "getEventHandler"
	public return_type class_ref 1405186 // ValidationEventHandler
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current event handler or the default event handler if one
hasn't been set.

@return the current ValidationEventHandler or the default event handler
        if it hasn't been set
@throws JAXBException if an error was encountered while getting the
        current event handler
"
      end

      operation 11968898 "setAdapter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adapter" type class_ref 1407874 // XmlAdapter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a configured instance of {@link XmlAdapter} with this marshaller.

<p>
This is a convenience method that invokes <code>setAdapter(adapter.getClass(),adapter);</code>.

@see #setAdapter(Class,XmlAdapter)
@throws IllegalArgumentException
     if the adapter parameter is null.
@throws UnsupportedOperationException
     if invoked agains a JAXB 1.0 implementation.
@since JAXB 2.0
"
      end

      operation 11969026 "setAdapter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "adapter" explicit_type "A"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends XmlAdapter> ${type} ${name}${(}${t0}<A> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a configured instance of {@link XmlAdapter} with this marshaller.

<p>
Every marshaller internally maintains a
{@link java.util.Map}&lt;{@link Class},{@link XmlAdapter}>,
which it uses for marshalling classes whose fields/methods are annotated
with {@link javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter}.

<p>
This method allows applications to use a configured instance of {@link XmlAdapter}.
When an instance of an adapter is not given, a marshaller will create
one by invoking its default constructor.

@param type
     The type of the adapter. The specified instance will be used when
     {@link javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter#value()}
     refers to this type.
@param adapter
     The instance of the adapter to be used. If null, it will un-register
     the current adapter set for this type.
@throws IllegalArgumentException
     if the type parameter is null.
@throws UnsupportedOperationException
     if invoked agains a JAXB 1.0 implementation.
@since JAXB 2.0
"
      end

      operation 11969154 "getAdapter"
	public explicit_return_type "A"
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends XmlAdapter> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the adapter associated with the specified type.

This is the reverse operation of the {@link #setAdapter} method.

@throws IllegalArgumentException
     if the type parameter is null.
@throws UnsupportedOperationException
     if invoked agains a JAXB 1.0 implementation.
@since JAXB 2.0
"
      end

      operation 11969282 "setAttachmentMarshaller"
	public explicit_return_type "void"
	nparams 1
	  param inout name "am" type class_ref 1408002 // AttachmentMarshaller
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Associate a context that enables binary data within an XML document
to be transmitted as XML-binary optimized attachment.
The attachment is referenced from the XML document content model
by content-id URIs(cid) references stored within the xml document.

@throws IllegalStateException if attempt to concurrently call this
                              method during a marshal operation.
"
      end

      operation 11969410 "getAttachmentMarshaller"
	public return_type class_ref 1408002 // AttachmentMarshaller
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11969538 "setSchema"
	public explicit_return_type "void"
	nparams 1
	  param inout name "schema" type class_ref 719490 // Schema
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify the JAXP 1.3 {@link javax.xml.validation.Schema Schema}
object that should be used to validate subsequent marshal operations
against.  Passing null into this method will disable validation.

<p>
This method allows the caller to validate the marshalled XML as it's marshalled.

<p>
Initially this property is set to <tt>null</tt>.

@param schema Schema object to validate marshal operations against or null to disable validation
@throws UnsupportedOperationException could be thrown if this method is
        invoked on an Marshaller created from a JAXBContext referencing
        JAXB 1.0 mapped classes
@since JAXB2.0
"
      end

      operation 11969666 "getSchema"
	public return_type class_ref 719490 // Schema
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the JAXP 1.3 {@link javax.xml.validation.Schema Schema} object
being used to perform marshal-time validation.  If there is no
Schema set on the marshaller, then this method will return null
indicating that marshal-time validation will not be performed.

@return the Schema object being used to perform marshal-time
     validation or null if not present.
@throws UnsupportedOperationException could be thrown if this method is
        invoked on an Marshaller created from a JAXBContext referencing
        JAXB 1.0 mapped classes
@since JAXB2.0
"
      end

      class 1408130 "Listener"
	abstract visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 11969794 "beforeMarshal"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "source" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p/>
Callback method invoked before marshalling from <tt>source</tt> to XML.
<p/>
<p/>
This method is invoked just before marshalling process starts to marshal <tt>source</tt>.
Note that if the class of <tt>source</tt> defines its own <tt>beforeMarshal</tt> method,
the class specific callback method is invoked just before this method is invoked.

@param source instance of JAXB mapped class prior to marshalling from it.
"
	end

	operation 11969922 "afterMarshal"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "source" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p/>
Callback method invoked after marshalling <tt>source</tt> to XML.
<p/>
<p/>
This method is invoked after <tt>source</tt> and all its descendants have been marshalled.
Note that if the class of <tt>source</tt> defines its own <tt>afterMarshal</tt> method,
the class specific callback method is invoked just before this method is invoked.

@param source instance of JAXB mapped class after marshalling it.
"
	end
      end

      operation 11970050 "setListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1408130 // Listener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Register marshal event callback {@link Listener} with this {@link Marshaller}.

<p>
There is only one Listener per Marshaller. Setting a Listener replaces the previous set Listener.
One can unregister current Listener by setting listener to <tt>null</tt>.

@param listener an instance of a class that implements {@link Listener}
@since JAXB2.0
"
      end

      operation 11970178 "getListener"
	public return_type class_ref 1408130 // Listener
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return {@link Listener} registered with this {@link Marshaller}.

@return registered {@link Listener} or <code>null</code> if no Listener is registered with this Marshaller.
@since JAXB2.0
"
      end
    end

    class 1407234 "Validator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "As of JAXB 2.0, this class is deprecated and optional.
<p>
The <tt>Validator</tt> class is responsible for controlling the validation
of content trees during runtime.

<p>
<a name=\"validationtypes\"></a>
<b>Three Forms of Validation</b><br>
<blockquote>
   <dl>
       <dt><b>Unmarshal-Time Validation</b></dt>
       <dd>This form of validation enables a client application to receive
           information about validation errors and warnings detected while
           unmarshalling XML data into a Java content tree and is completely
           orthogonal to the other types of validation.  To enable or disable
           it, see the javadoc for
           {@link Unmarshaller#setValidating(boolean) Unmarshaller.setValidating}.
           All JAXB 1.0 Providers are required to support this operation.
       </dd>

       <dt><b>On-Demand Validation</b></dt>
       <dd> This form of validation enables a client application to receive
            information about validation errors and warnings detected in the
            Java content tree.  At any point, client applications can call
            the {@link Validator#validate(Object) Validator.validate} method
            on the Java content tree (or any sub-tree of it).  All JAXB 1.0
            Providers are required to support this operation.
       </dd>

       <dt><b>Fail-Fast Validation</b></dt>
       <dd> This form of validation enables a client application to receive
            immediate feedback about modifications to the Java content tree
            that violate type constraints on Java Properties as defined in
            the specification.  JAXB Providers are not required support
            this type of validation.  Of the JAXB Providers that do support
            this type of validation, some may require you to decide at schema
            compile time whether or not a client application will be allowed
            to request fail-fast validation at runtime.
       </dd>
   </dl>
</blockquote>

<p>
The <tt>Validator</tt> class is responsible for managing On-Demand Validation.
The <tt>Unmarshaller</tt> class is responsible for managing Unmarshal-Time
Validation during the unmarshal operations.  Although there is no formal
method of enabling validation during the marshal operations, the
<tt>Marshaller</tt> may detect errors, which will be reported to the
<tt>ValidationEventHandler</tt> registered on it.

<p>
<a name=\"defaulthandler\"></a>
<b>Using the Default EventHandler</b><br>
<blockquote>
  If the client application does not set an event handler on their
  <tt>Validator</tt>, <tt>Unmarshaller</tt>, or <tt>Marshaller</tt> prior to
  calling the validate, unmarshal, or marshal methods, then a default event
  handler will receive notification of any errors or warnings encountered.
  The default event handler will cause the current operation to halt after
  encountering the first error or fatal error (but will attempt to continue
  after receiving warnings).
</blockquote>

<p>
<a name=\"handlingevents\"></a>
<b>Handling Validation Events</b><br>
<blockquote>
  There are three ways to handle events encountered during the unmarshal,
  validate, and marshal operations:
   <dl>
       <dt>Use the default event handler</dt>
       <dd>The default event handler will be used if you do not specify one
           via the <tt>setEventHandler</tt> API's on <tt>Validator</tt>,
           <tt>Unmarshaller</tt>, or <tt>Marshaller</tt>.
       </dd>

       <dt>Implement and register a custom event handler</dt>
       <dd>Client applications that require sophisticated event processing
           can implement the <tt>ValidationEventHandler</tt> interface and
           register it with the <tt>Unmarshaller</tt> and/or
           <tt>Validator</tt>.
       </dd>

       <dt>Use the {@link javax.xml.bind.util.ValidationEventCollector ValidationEventCollector}
           utility</dt>
       <dd>For convenience, a specialized event handler is provided that
           simply collects any <tt>ValidationEvent</tt> objects created
           during the unmarshal, validate, and marshal operations and
           returns them to the client application as a
           <tt>java.util.Collection</tt>.
       </dd>
   </dl>
</blockquote>

<p>
<b>Validation and Well-Formedness</b><br>
<blockquote>
<p>
Validation events are handled differently depending on how the client
application is configured to process them as described in the previous
section.  However, there are certain cases where a JAXB Provider indicates
that it is no longer able to reliably detect and report errors.  In these
cases, the JAXB Provider will set the severity of the ValidationEvent to
FATAL_ERROR to indicate that the unmarshal, validate, or marshal operations
should be terminated.  The default event handler and
<tt>ValidationEventCollector</tt> utility class must terminate processing
after being notified of a fatal error.  Client applications that supply their
own <tt>ValidationEventHandler</tt> should also terminate processing after
being notified of a fatal error.  If not, unexpected behaviour may occur.
</blockquote>

<p>
<a name=\"supportedProps\"></a>
<b>Supported Properties</b><br>
<blockquote>
<p>
There currently are not any properties required to be supported by all
JAXB Providers on Validator.  However, some providers may support
their own set of provider specific properties.
</blockquote>


@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see JAXBContext
@see Unmarshaller
@see ValidationEventHandler
@see ValidationEvent
@see javax.xml.bind.util.ValidationEventCollector
@since JAXB1.0
@deprecated since JAXB 2.0
"
      operation 11980034 "setEventHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1405186 // ValidationEventHandler
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allow an application to register a validation event handler.
<p>
The validation event handler will be called by the JAXB Provider if any
validation errors are encountered during calls to
{@link #validate(Object) validate}.  If the client application does not
register a validation event handler before invoking the validate method,
then validation events will be handled by the default event handler which
will terminate the validate operation after the first error or fatal error
is encountered.
<p>
Calling this method with a null parameter will cause the Validator
to revert back to the default default event handler.

@param handler the validation event handler
@throws JAXBException if an error was encountered while setting the
        event handler
@deprecated since JAXB2.0
"
      end

      operation 11980162 "getEventHandler"
	public return_type class_ref 1405186 // ValidationEventHandler
	nparams 0
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current event handler or the default event handler if one
hasn't been set.

@return the current ValidationEventHandler or the default event handler
        if it hasn't been set
@throws JAXBException if an error was encountered while getting the
        current event handler
@deprecated since JAXB2.0
"
      end

      operation 11980290 "validate"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "subrootObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validate the Java content tree starting at <tt>subrootObj</tt>.
<p>
Client applications can use this method to validate Java content trees
on-demand at runtime.  This method can be used to validate any arbitrary
subtree of the Java content tree.  Global constraint checking <b>will not
</b> be performed as part of this operation (i.e. ID/IDREF constraints).

@param subrootObj the obj to begin validation at
@throws JAXBException if any unexpected problem occurs during validation
@throws ValidationException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Validator</tt> is unable to validate the content tree rooted
    at <tt>subrootObj</tt>
@throws IllegalArgumentException
     If the subrootObj parameter is null
@return true if the subtree rooted at <tt>subrootObj</tt> is valid, false
        otherwise
@deprecated since JAXB2.0
"
      end

      operation 11980418 "validateRoot"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rootObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1404930 // JAXBException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validate the Java content tree rooted at <tt>rootObj</tt>.
<p>
Client applications can use this method to validate Java content trees
on-demand at runtime.  This method is used to validate an entire Java
content tree.  Global constraint checking <b>will</b> be performed as
part of this operation (i.e. ID/IDREF constraints).

@param rootObj the root obj to begin validation at
@throws JAXBException if any unexpected problem occurs during validation
@throws ValidationException
    If the {@link ValidationEventHandler ValidationEventHandler}
    returns false from its <tt>handleEvent</tt> method or the
    <tt>Validator</tt> is unable to validate the content tree rooted
    at <tt>rootObj</tt>
@throws IllegalArgumentException
     If the rootObj parameter is null
@return true if the tree rooted at <tt>rootObj</tt> is valid, false
        otherwise
@deprecated since JAXB2.0
"
      end

      operation 11980546 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the particular property in the underlying implementation of
<tt>Validator</tt>.  This method can only be used to set one of
the standard JAXB defined properties above or a provider specific
property.  Attempting to set an undefined property will result in
a PropertyException being thrown.  See <a href=\"#supportedProps\">
Supported Properties</a>.

@param name the name of the property to be set. This value can either
             be specified using one of the constant fields or a user
             supplied string.
@param value the value of the property to be set

@throws PropertyException when there is an error processing the given
                           property or value
@throws IllegalArgumentException
     If the name parameter is null
@deprecated since JAXB2.0
"
      end

      operation 11980674 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1405314 // PropertyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the particular property in the underlying implementation of
<tt>Validator</tt>.  This method can only be used to get one of
the standard JAXB defined properties above or a provider specific
property.  Attempting to get an undefined property will result in
a PropertyException being thrown.  See <a href=\"#supportedProps\">
Supported Properties</a>.

@param name the name of the property to retrieve
@return the value of the requested property

@throws PropertyException
     when there is an error retrieving the given property or value
     property name
@throws IllegalArgumentException
     If the name parameter is null
@deprecated since JAXB2.0
"
      end
    end

    class 1407362 "JAXBIntrospector"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provide access to JAXB xml binding data for a JAXB object.

<p>
Intially, the intent of this class is to just conceptualize how
a JAXB application developer can access xml binding information,
independent if binding model is java to schema or schema to java.
Since accessing the XML element name related to a JAXB element is
a highly requested feature, demonstrate access to this
binding information.

The factory method to get a <code>JAXBIntrospector</code> instance is
{@link JAXBContext#createJAXBIntrospector()}.

@see JAXBContext#createJAXBIntrospector()
@since JAXB2.0
"
      operation 11966082 "isElement"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return true if <code>object</code> represents a JAXB element.</p>
<p>Parameter <code>object</code> is a JAXB element for following cases:
<ol>
  <li>It is an instance of <code>javax.xml.bind.JAXBElement</code>.</li>
  <li>The class of <code>object</code> is annotated with
      <code>&#64XmlRootElement</code>.
  </li>
</ol>

@see #getElementName(Object)
"
      end

      operation 11966210 "getElementName"
	abstract public return_type class_ref 673666 // QName
	nparams 1
	  param inout name "jaxbElement" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get xml element qname for <code>jaxbElement</code>.</p>

@param jaxbElement is an object that {@link #isElement(Object)} returned true.

@return xml element qname associated with jaxbElement;
        null if <code>jaxbElement</code> is not a JAXB Element.
"
      end

      operation 11966338 "getValue"
	class_operation public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "jaxbElement" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the element value of a JAXB element.</p>

<p>Convenience method to abstract whether working with either
   a javax.xml.bind.JAXBElement instance or an instance of
   <tt>&#64XmlRootElement</tt> annotated Java class.</p>

@param jaxbElement  object that #isElement(Object) returns true.

@return The element value of the <code>jaxbElement</code>.
"
      end
    end

    class 1407490 "SchemaOutputResolver"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Controls where a JAXB implementation puts the generates
schema files.

<p>
An implementation of this abstract class has to be provided by the calling
application to generate schemas.

<p>
This is a class, not an interface so as to allow future versions to evolve
without breaking the compatibility.

@author
    Kohsuke Kawaguchi (kohsuke.kawaguchi@sun.com)
"
      operation 11972226 "createOutput"
	abstract public return_type class_ref 645506 // Result
	nparams 2
	  param inout name "namespaceUri" type class_ref 128130 // String
	  param inout name "suggestedFileName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides where the schema file (of the given namespace URI)
will be written, and return it as a {@link Result} object.

<p>
This method is called only once for any given namespace.
IOW, all the components in one namespace is always written
into the same schema document.

@param namespaceUri
     The namespace URI that the schema declares.
     Can be the empty string, but never be null.
@param suggestedFileName
     A JAXB implementation generates an unique file name (like \"schema1.xsd\")
     for the convenience of the callee. This name can be
     used for the file name of the schema, or the callee can just
     ignore this name and come up with its own name.
     This is just a hint.

@return
     a {@link Result} object that encapsulates the actual destination
     of the schema.

     If the {@link Result} object has a system ID, it must be an
     absolute system ID. Those system IDs are relativized by the caller and used
     for &lt;xs:import> statements.

     If the {@link Result} object does not have a system ID, a schema
     for the namespace URI is generated but it won't be explicitly
     &lt;xs:import>ed from other schemas.

     If {@code null} is returned, the schema generation for this
     namespace URI will be skipped.
"
      end
    end

    class 1407746 "MarshalException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception indicates that an error has occurred while performing
a marshal operation that the provider is unable to recover from.

<p>
The <tt>ValidationEventHandler</tt> can cause this exception to be thrown
during the marshal operations.  See
{@link ValidationEventHandler#handleEvent(ValidationEvent)
ValidationEventHandler.handleEvent(ValidationEvent)}.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li></ul>
@see JAXBException
@see Marshaller
@since JAXB1.0
"
      classrelation 4753666 // <generalisation>
	relation 4753666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4753666 // <generalisation>
	  b parent class_ref 1404930 // JAXBException
      end

      operation 11966594 "MarshalException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a MarshalException with the specified detail message.  The
errorCode and linkedException will default to null.

@param message a description of the exception
"
      end

      operation 11966722 "MarshalException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a MarshalException with the specified detail message and vendor
specific errorCode.  The linkedException will default to null.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
"
      end

      operation 11966850 "MarshalException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a MarshalException with a linkedException.  The detail message and
vendor specific errorCode will default to null.

@param exception the linked exception
"
      end

      operation 11966978 "MarshalException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a MarshalException with the specified detail message and
linkedException.  The errorCode will default to null.

@param message a description of the exception
@param exception the linked exception
"
      end

      operation 11967106 "MarshalException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a MarshalException with the specified detail message, vendor
specific errorCode, and linkedException.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
@param exception the linked exception
"
      end
    end

    class 1408258 "Messages"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Formats error messages.
"
      operation 11970306 "format"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "property" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11970434 "format"
	class_operation package return_type class_ref 128130 // String
	nparams 2
	  param inout name "property" type class_ref 128130 // String
	  param inout name "arg1" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11970562 "format"
	class_operation package return_type class_ref 128130 // String
	nparams 3
	  param inout name "property" type class_ref 128130 // String
	  param inout name "arg1" type class_ref 129538 // Object
	  param inout name "arg2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11970690 "format"
	class_operation package return_type class_ref 128130 // String
	nparams 4
	  param inout name "property" type class_ref 128130 // String
	  param inout name "arg1" type class_ref 129538 // Object
	  param inout name "arg2" type class_ref 129538 // Object
	  param inout name "arg3" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11970818 "format"
	class_operation package return_type class_ref 128130 // String
	nparams 2
	  param inout name "property" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " add more if necessary.
 Loads a string resource and formats it with specified arguments. "
      end

      classrelation 4754434 // PROVIDER_NOT_FOUND (<unidirectional association>)
	relation 4754434 --->
	  a role_name "PROVIDER_NOT_FOUND" init_value " // 1 arg
        \"ContextFinder.ProviderNotFound\"" class_relation const_relation package
	    comment " Message resources


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754434 // PROVIDER_NOT_FOUND (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4754562 // COULD_NOT_INSTANTIATE (<unidirectional association>)
	relation 4754562 --->
	  a role_name "COULD_NOT_INSTANTIATE" init_value " // 2 args
        \"ContextFinder.CouldNotInstantiate\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754562 // COULD_NOT_INSTANTIATE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4754690 // CANT_FIND_PROPERTIES_FILE (<unidirectional association>)
	relation 4754690 --->
	  a role_name "CANT_FIND_PROPERTIES_FILE" init_value " // 1 arg
        \"ContextFinder.CantFindPropertiesFile\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754690 // CANT_FIND_PROPERTIES_FILE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4754818 // CANT_MIX_PROVIDERS (<unidirectional association>)
	relation 4754818 --->
	  a role_name "CANT_MIX_PROVIDERS" init_value " // 0 args
        \"ContextFinder.CantMixProviders\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754818 // CANT_MIX_PROVIDERS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4754946 // MISSING_PROPERTY (<unidirectional association>)
	relation 4754946 --->
	  a role_name "MISSING_PROPERTY" init_value " // 2 args
        \"ContextFinder.MissingProperty\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4754946 // MISSING_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4755074 // NO_PACKAGE_IN_CONTEXTPATH (<unidirectional association>)
	relation 4755074 --->
	  a role_name "NO_PACKAGE_IN_CONTEXTPATH" init_value " // 0 args
        \"ContextFinder.NoPackageInContextPath\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4755074 // NO_PACKAGE_IN_CONTEXTPATH (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4755202 // NAME_VALUE (<unidirectional association>)
	relation 4755202 --->
	  a role_name "NAME_VALUE" init_value " // 2 args
        \"PropertyException.NameValue\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4755202 // NAME_VALUE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4755330 // CONVERTER_MUST_NOT_BE_NULL (<unidirectional association>)
	relation 4755330 --->
	  a role_name "CONVERTER_MUST_NOT_BE_NULL" init_value " // 0 args
        \"DatatypeConverter.ConverterMustNotBeNull\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4755330 // CONVERTER_MUST_NOT_BE_NULL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4755458 // ILLEGAL_CAST (<unidirectional association>)
	relation 4755458 --->
	  a role_name "ILLEGAL_CAST" init_value " // 2 args
        \"JAXBContext.IllegalCast\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4755458 // ILLEGAL_CAST (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 1408386 "NotIdentifiableEvent"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This event indicates that a problem was encountered resolving an ID/IDREF.


@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see Validator
@see ValidationEventHandler
@since JAXB1.0
"
      classrelation 4755586 // <generalisation>
	relation 4755586 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4755586 // <generalisation>
	  b parent class_ref 1408514 // ValidationEvent
      end
    end

    class 1408514 "ValidationEvent"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This event indicates that a problem was encountered while validating the
incoming XML data during an unmarshal operation, while performing
on-demand validation of the Java content tree, or while marshalling the
Java content tree back to XML data.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see Validator
@see ValidationEventHandler
@since JAXB1.0
"
      attribute 2617218 "WARNING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Conditions that are not errors or fatal errors as defined by the
XML 1.0 recommendation

"
      end

      attribute 2617346 "ERROR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Conditions that correspond to the definition of \"error\" in section
1.2 of the W3C XML 1.0 Recommendation

"
      end

      attribute 2617474 "FATAL_ERROR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Conditions that correspond to the definition of \"fatal error\" in section
1.2 of the W3C XML 1.0 Recommendation

"
      end

      operation 11970946 "getSeverity"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the severity code for this warning/error.

<p>
Must be one of <tt>ValidationError.WARNING</tt>,
<tt>ValidationError.ERROR</tt>, or <tt>ValidationError.FATAL_ERROR</tt>.

@return the severity code for this warning/error
"
      end

      operation 11971074 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the text message for this warning/error.

@return the text message for this warning/error or null if one wasn't set
"
      end

      operation 11971202 "getLinkedException"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the linked exception for this warning/error.

@return the linked exception for this warning/error or null if one
        wasn't set
"
      end

      operation 11971330 "getLocator"
	public return_type class_ref 1408642 // ValidationEventLocator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the locator for this warning/error.

@return the locator that indicates where the warning/error occurred
"
      end
    end

    class 1408642 "ValidationEventLocator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Encapsulate the location of a ValidationEvent.

<p>
The <tt>ValidationEventLocator</tt> indicates where the <tt>ValidationEvent
</tt> occurred.  Different fields will be set depending on the type of
validation that was being performed when the error or warning was detected.
For example, on-demand validation would produce locators that contained
references to objects in the Java content tree while unmarshal-time
validation would produce locators containing information appropriate to the
source of the XML data (file, url, Node, etc).

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see Validator
@see ValidationEvent
@since JAXB1.0
"
      operation 11978626 "getURL"
	public return_type class_ref 243458 // URL
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the XML source as a URL if available

@return the name of the XML source as a URL or null if unavailable
"
      end

      operation 11978754 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the byte offset if available

@return the byte offset into the input source or -1 if unavailable
"
      end

      operation 11978882 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the line number if available

@return the line number or -1 if unavailable
"
      end

      operation 11979010 "getColumnNumber"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the column number if available

@return the column number or -1 if unavailable
"
      end

      operation 11979138 "getObject"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a reference to the object in the Java content tree if available

@return a reference to the object in the Java content tree or null if
        unavailable
"
      end

      operation 11979266 "getNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a reference to the DOM Node if available

@return a reference to the DOM Node or null if unavailable
"
      end
    end

    class 1408770 "ParseConversionEvent"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This event indicates that a problem was encountered while converting a
string from the XML data into a value of the target Java data type.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see ValidationEvent
@see ValidationEventHandler
@see Unmarshaller
@since JAXB1.0
"
      classrelation 4755714 // <generalisation>
	relation 4755714 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4755714 // <generalisation>
	  b parent class_ref 1408514 // ValidationEvent
      end
    end

    class 1408898 "PrintConversionEvent"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This event indicates that a problem was encountered while converting data
from the Java content tree into its lexical representation.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Kohsuke Kawaguchi, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see ValidationEvent
@see ValidationEventHandler
@see Marshaller
@since JAXB1.0
"
      classrelation 4755842 // <generalisation>
	relation 4755842 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4755842 // <generalisation>
	  b parent class_ref 1408514 // ValidationEvent
      end
    end

    class 1409026 "TypeConstraintException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception indicates that a violation of a dynamically checked type
constraint was detected.

<p>
This exception can be thrown by the generated setter methods of the schema
derived Java content classes.  However, since fail-fast validation is
an optional feature for JAXB Providers to support, not all setter methods
will throw this exception when a type constraint is violated.

<p>
If this exception is throw while invoking a fail-fast setter, the value of
the property is guaranteed to remain unchanged, as if the setter were never
called.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li><li>Joe Fialli, Sun Microsystems, Inc.</li></ul>
@see ValidationEvent
@since JAXB1.0
"
      classrelation 4756098 // <generalisation>
	relation 4756098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4756098 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      classrelation 4756226 // errorCode (<unidirectional association>)
	relation 4756226 --->
	  a role_name "errorCode" private
	    comment "
Vendor specific error code


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4756226 // errorCode (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4756354 // linkedException (<unidirectional association>)
	relation 4756354 --->
	  a role_name "linkedException" volatile private
	    comment "
Exception reference


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4756354 // linkedException (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      attribute 2617602 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -3059799699420143848L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 11972354 "TypeConstraintException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a TypeConstraintException with the specified detail message.  The
errorCode and linkedException will default to null.

@param message a description of the exception
"
      end

      operation 11972482 "TypeConstraintException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a TypeConstraintException with the specified detail message and vendor
specific errorCode.  The linkedException will default to null.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
"
      end

      operation 11972610 "TypeConstraintException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a TypeConstraintException with a linkedException.  The detail message and
vendor specific errorCode will default to null.

@param exception the linked exception
"
      end

      operation 11972738 "TypeConstraintException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a TypeConstraintException with the specified detail message and
linkedException.  The errorCode will default to null.

@param message a description of the exception
@param exception the linked exception
"
      end

      operation 11972866 "TypeConstraintException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a TypeConstraintException with the specified detail message,
vendor specific errorCode, and linkedException.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
@param exception the linked exception
"
      end

      operation 11972994 "getErrorCode"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the vendor specific error code

@return a string specifying the vendor specific error code
"
      end

      operation 11973122 "getLinkedException"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the linked exception

@return the linked Exception, null if none exists
"
      end

      operation 11973250 "setLinkedException"
	public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a linked Exception.

@param exception the linked Exception (A null value is permitted and
                 indicates that the linked exception does not exist or
                 is unknown).
"
      end

      operation 11973378 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a short description of this TypeConstraintException.

"
      end

      operation 11973506 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128258 // PrintStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this TypeConstraintException and its stack trace (including the stack trace
of the linkedException if it is non-null) to the PrintStream.

@param s PrintStream to use for output
"
      end

      operation 11973634 "printStackTrace"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this TypeConstraintException and its stack trace (including the stack trace
of the linkedException if it is non-null) to <tt>System.err</tt>.

"
      end
    end

    class 1409154 "UnmarshalException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception indicates that an error has occurred while performing
an unmarshal operation that prevents the JAXB Provider from completing
the operation.

<p>
The <tt>ValidationEventHandler</tt> can cause this exception to be thrown
during the unmarshal operations.  See
{@link ValidationEventHandler#handleEvent(ValidationEvent)
ValidationEventHandler.handleEvent(ValidationEvent)}.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li></ul>
@see JAXBException
@see Unmarshaller
@see ValidationEventHandler
@since JAXB1.0
"
      classrelation 4756482 // <generalisation>
	relation 4756482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4756482 // <generalisation>
	  b parent class_ref 1404930 // JAXBException
      end

      operation 11973762 "UnmarshalException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an UnmarshalException with the specified detail message.  The
errorCode and linkedException will default to null.

@param message a description of the exception
"
      end

      operation 11973890 "UnmarshalException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an UnmarshalException with the specified detail message and vendor
specific errorCode.  The linkedException will default to null.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
"
      end

      operation 11974018 "UnmarshalException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an UnmarshalException with a linkedException.  The detail message and
vendor specific errorCode will default to null.

@param exception the linked exception
"
      end

      operation 11974146 "UnmarshalException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an UnmarshalException with the specified detail message and
linkedException.  The errorCode will default to null.

@param message a description of the exception
@param exception the linked exception
"
      end

      operation 11974274 "UnmarshalException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an UnmarshalException with the specified detail message, vendor
specific errorCode, and linkedException.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
@param exception the linked exception
"
      end
    end

    class 1409282 "UnmarshallerHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unmarshaller implemented as SAX ContentHandler.

<p>
Applications can use this interface to use their JAXB provider as a component
in an XML pipeline.  For example:

<pre>
      JAXBContext context = JAXBContext.newInstance( \"org.acme.foo\" );

      Unmarshaller unmarshaller = context.createUnmarshaller();

      UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();

      SAXParserFactory spf = SAXParserFactory.newInstance();
      spf.setNamespaceAware( true );

      XMLReader xmlReader = spf.newSAXParser().getXMLReader();
      xmlReader.setContentHandler( unmarshallerHandler );
      xmlReader.parse(new InputSource( new FileInputStream( XML_FILE ) ) );

      MyObject myObject= (MyObject)unmarshallerHandler.getResult();
</pre>

<p>
This interface is reusable: even if the user fails to unmarshal
an object, s/he can still start a new round of unmarshalling.

@author <ul><li>Kohsuke KAWAGUCHI, Sun Microsystems, Inc.</li></ul>
@see Unmarshaller#getUnmarshallerHandler()
@since JAXB1.0
"
      classrelation 4756610 // <generalisation>
	relation 4756610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4756610 // <generalisation>
	  b parent class_ref 605954 // ContentHandler
      end

      operation 11978370 "getResult"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 1404930 // JAXBException
	  exception class_ref 254850 // IllegalStateException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the unmarshalled result.

This method can be called only after this handler
receives the endDocument SAX event.

@exception IllegalStateException
     if this method is called before this handler
     receives the endDocument event.

@exception JAXBException
     if there is any unmarshalling error.
     Note that the implementation is allowed to throw SAXException
     during the parsing when it finds an error.

@return
     always return a non-null valid object which was unmarshalled.
"
      end
    end

    class 1409666 "ValidationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception indicates that an error has occurred while performing
a validate operation.

<p>
The <tt>ValidationEventHandler</tt> can cause this exception to be thrown
during the validate operations.  See
{@link ValidationEventHandler#handleEvent(ValidationEvent)
ValidationEventHandler.handleEvent(ValidationEvent)}.

@author <ul><li>Ryan Shoemaker, Sun Microsystems, Inc.</li></ul>
@see JAXBException
@see Validator
@since JAXB1.0
"
      classrelation 4756738 // <generalisation>
	relation 4756738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4756738 // <generalisation>
	  b parent class_ref 1404930 // JAXBException
      end

      operation 11979394 "ValidationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an ValidationException with the specified detail message.  The
errorCode and linkedException will default to null.

@param message a description of the exception
"
      end

      operation 11979522 "ValidationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an ValidationException with the specified detail message and vendor
specific errorCode.  The linkedException will default to null.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
"
      end

      operation 11979650 "ValidationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an ValidationException with a linkedException.  The detail message and
vendor specific errorCode will default to null.

@param exception the linked exception
"
      end

      operation 11979778 "ValidationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an ValidationException with the specified detail message and
linkedException.  The errorCode will default to null.

@param message a description of the exception
@param exception the linked exception
"
      end

      operation 11979906 "ValidationException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorCode" type class_ref 128130 // String
	  param inout name "exception" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an ValidationException with the specified detail message, vendor
specific errorCode, and linkedException.

@param message a description of the exception
@param errorCode a string specifying the vendor specific error code
@param exception the linked exception
"
      end
    end

    class 1409794 "WhiteSpaceProcessor"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Processes white space normalization.

@since 1.0
"
      operation 11980802 "replace"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " benchmarking (see test/src/ReplaceTest.java in the CVS Attic)
 showed that this code is slower than the current code.

    public static String replace(String text) {
        final int len = text.length();
        StringBuffer result = new StringBuffer(len);

        for (int i = 0; i < len; i++) {
            char ch = text.charAt(i);
            if (isWhiteSpace(ch))
                result.append(' ');
            else
                result.append(ch);
        }

        return result.toString();
    }"
      end

      operation 11980930 "replace"
	class_operation public return_type class_ref 429442 // CharSequence
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 2.0
"
      end

      operation 11981058 "trim"
	class_operation public return_type class_ref 429442 // CharSequence
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent of {@link String#trim()}.
@since 2.0
"
      end

      operation 11981186 "collapse"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11981314 "collapse"
	class_operation public return_type class_ref 429442 // CharSequence
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is usually the biggest processing bottleneck.

@since 2.0
"
      end

      operation 11981442 "isWhiteSpace"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified string is all whitespace.
"
      end

      operation 11981570 "isWhiteSpace"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns true if the specified char is a white space character. "
      end

      operation 11981698 "isWhiteSpaceExceptSpace"
	class_operation protected explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified char is a white space character
but not 0x20.
"
      end
    end
  end

  deploymentview 177026 "bind"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 995714 "Binder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.w3c.dom.Node;
import javax.xml.validation.Schema;
${definition}"
      associated_elems
	class_ref 1404802 // Binder
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 995842 "ContextFinder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.security.AccessController;
import static javax.xml.bind.JAXBContext.JAXB_CONTEXT_FACTORY;
${definition}"
      associated_elems
	class_ref 1405442 // ContextFinder
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 995970 "DataBindingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1405698 // DataBindingException
      end
      comment "Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996098 "DatatypeConverter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.namespace.NamespaceContext;
${definition}"
      associated_elems
	class_ref 1405826 // DatatypeConverter
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996226 "DatatypeConverterInterface"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1405954 // DatatypeConverterInterface
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996354 "DatatypeConverterImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import javax.xml.namespace.QName;
import javax.xml.namespace.NamespaceContext;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.DatatypeConfigurationException;
${definition}"
      associated_elems
	class_ref 1406210 // DatatypeConverterImpl
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996482 "Element"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1406466 // Element
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996610 "GetPropertyAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PrivilegedAction;
${definition}"
      associated_elems
	class_ref 1406594 // GetPropertyAction
      end
      comment "Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996738 "JAXB"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.namespace.QName;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.beans.Introspector;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
${definition}"
      associated_elems
	class_ref 1406722 // JAXB
      end
      comment "Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996866 "JAXBContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.w3c.dom.Node;
import java.util.Collections;
import java.util.Map;
import java.util.Properties;
import java.io.IOException;
import java.io.InputStream;
${definition}"
      associated_elems
	class_ref 1405570 // JAXBContext
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 996994 "JAXBElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.namespace.QName;
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 1405058 // JAXBElement
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 997122 "JAXBException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.PrintWriter;
${definition}"
      associated_elems
	class_ref 1404930 // JAXBException
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 997250 "JAXBIntrospector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 1407362 // JAXBIntrospector
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 997378 "JAXBPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.BasicPermission;
${definition}"
      associated_elems
	class_ref 1406082 // JAXBPermission
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 997506 "MarshalException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1407746 // MarshalException
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 997634 "Marshaller"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.attachment.AttachmentMarshaller;
import javax.xml.validation.Schema;
import java.io.File;
${definition}"
      associated_elems
	class_ref 1407106 // Marshaller
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 997762 "Messages"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.MessageFormat;
import java.util.ResourceBundle;
${definition}"
      associated_elems
	class_ref 1408258 // Messages
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 997890 "ValidationEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1408514 // ValidationEvent
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998018 "NotIdentifiableEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1408386 // NotIdentifiableEvent
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998146 "ParseConversionEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1408770 // ParseConversionEvent
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998274 "PrintConversionEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1408898 // PrintConversionEvent
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998402 "PropertyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1405314 // PropertyException
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998530 "SchemaOutputResolver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.Result;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1407490 // SchemaOutputResolver
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998658 "TypeConstraintException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1409026 // TypeConstraintException
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998786 "UnmarshalException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1409154 // UnmarshalException
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 998914 "Unmarshaller"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.attachment.AttachmentUnmarshaller;
import javax.xml.validation.Schema;
import java.io.Reader;
${definition}"
      associated_elems
	class_ref 1406978 // Unmarshaller
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 999042 "UnmarshallerHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.ContentHandler;
${definition}"
      associated_elems
	class_ref 1409282 // UnmarshallerHandler
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 999170 "ValidationEventHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1405186 // ValidationEventHandler
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 999298 "ValidationEventLocator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1408642 // ValidationEventLocator
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 999426 "ValidationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1409666 // ValidationException
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 999554 "Validator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1407234 // Validator
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 999682 "WhiteSpaceProcessor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1409794 // WhiteSpaceProcessor
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 187650 // annotation

  package_ref 187906 // attachment

  package_ref 188034 // helpers

  package_ref 188162 // util
end
