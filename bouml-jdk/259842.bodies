class IDLType
!!!1320194.java!!!	IDLType(inout cl : Class, inout modules : String [[]], inout memberName : String)
        cl_ = cl;
        modules_ = modules;
        memberName_ = memberName;
!!!1320322.java!!!	IDLType(inout cl : Class, inout memberName : String)
        this( cl, new String[0], memberName ) ;
!!!1320450.java!!!	getJavaClass() : Class
        return cl_;
!!!1320578.java!!!	getModules() : String
        return modules_ ;
!!!1320706.java!!!	makeConcatenatedName(in separator : char, inout fixIDLKeywords : boolean) : String
        StringBuffer sbuff = new StringBuffer() ;
        for (int ctr=0; ctr<modules_.length; ctr++) {
            String mod = modules_[ctr] ;
            if (ctr>0)
                sbuff.append( separator ) ;

            if (fixIDLKeywords && IDLNameTranslatorImpl.isIDLKeyword(mod))
                mod = IDLNameTranslatorImpl.mangleIDLKeywordClash( mod ) ;

            sbuff.append( mod ) ;
        }

        return sbuff.toString() ;
!!!1320834.java!!!	getModuleName() : String
        // Note that this should probably be makeConcatenatedName( '/', true )
        // for spec compliance,
        // but rmic does it this way, so we'll leave this.
        // The effect is that an overloaded method like
        // void foo( bar.typedef.Baz )
        // will get an IDL name of foo__bar_typedef_Baz instead of
        // foo__bar__typedef_Baz (note the extra _ before typedef).
        return makeConcatenatedName( '_', false ) ;
!!!1320962.java!!!	getExceptionName() : String
        // Here we will check for IDL keyword collisions (see bug 5010332).
        // This means that the repository ID for
        // foo.exception.SomeException is
        // "IDL:foo/_exception/SomeEx:1.0" (note the underscore in front
        // of the exception module name).
        String modName = makeConcatenatedName( '/', true ) ;

        String suffix = "Exception" ;
        String excName = memberName_ ;
        if (excName.endsWith( suffix )) {
            int last = excName.length() - suffix.length() ;
            excName = excName.substring( 0, last ) ;
        }

        // See bug 4989312: we must always add the Ex.
        excName += "Ex" ;

        if (modName.length() == 0)
            return "IDL:" + excName + ":1.0" ;
        else
            return "IDL:" + modName + '/' + excName + ":1.0" ;
!!!1321090.java!!!	getMemberName() : String
        return memberName_;
!!!1321218.java!!!	hasModule() : boolean
        return (modules_.length > 0) ;
