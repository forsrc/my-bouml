class Buffer
!!!7588866.java!!!	Buffer(in mark : int, in pos : int, in lim : int, in cap : int)
       // package-private
        if (cap < 0)
            throw new IllegalArgumentException("Negative capacity: " + cap);
        this.capacity = cap;
        limit(lim);
        position(pos);
        if (mark >= 0) {
            if (mark > pos)
                throw new IllegalArgumentException("mark > position: ("
                                                   + mark + " > " + pos + ")");
            this.mark = mark;
        }
!!!7588994.java!!!	capacity() : int
        return capacity;
!!!7589122.java!!!	position() : int
        return position;
!!!7589250.java!!!	position(in newPosition : int) : Buffer
        if ((newPosition > limit) || (newPosition < 0))
            throw new IllegalArgumentException();
        position = newPosition;
        if (mark > position) mark = -1;
        return this;
!!!7589378.java!!!	limit() : int
        return limit;
!!!7589506.java!!!	limit(in newLimit : int) : Buffer
        if ((newLimit > capacity) || (newLimit < 0))
            throw new IllegalArgumentException();
        limit = newLimit;
        if (position > limit) position = limit;
        if (mark > limit) mark = -1;
        return this;
!!!7589634.java!!!	mark() : Buffer
        mark = position;
        return this;
!!!7589762.java!!!	reset() : Buffer
        int m = mark;
        if (m < 0)
            throw new InvalidMarkException();
        position = m;
        return this;
!!!7589890.java!!!	clear() : Buffer
        position = 0;
        limit = capacity;
        mark = -1;
        return this;
!!!7590018.java!!!	flip() : Buffer
        limit = position;
        position = 0;
        mark = -1;
        return this;
!!!7590146.java!!!	rewind() : Buffer
        position = 0;
        mark = -1;
        return this;
!!!7590274.java!!!	remaining() : int
        return limit - position;
!!!7590402.java!!!	hasRemaining() : boolean
        return position < limit;
!!!7591170.java!!!	nextGetIndex() : int
                          // package-private
        if (position >= limit)
            throw new BufferUnderflowException();
        return position++;
!!!7591298.java!!!	nextGetIndex(in nb : int) : int
                    // package-private
        if (limit - position < nb)
            throw new BufferUnderflowException();
        int p = position;
        position += nb;
        return p;
!!!7591426.java!!!	nextPutIndex() : int
                          // package-private
        if (position >= limit)
            throw new BufferOverflowException();
        return position++;
!!!7591554.java!!!	nextPutIndex(in nb : int) : int
                    // package-private
        if (limit - position < nb)
            throw new BufferOverflowException();
        int p = position;
        position += nb;
        return p;
!!!7591682.java!!!	checkIndex(in i : int) : int
                       // package-private
        if ((i < 0) || (i >= limit))
            throw new IndexOutOfBoundsException();
        return i;
!!!7591810.java!!!	checkIndex(in i : int, in nb : int) : int
               // package-private
        if ((i < 0) || (nb > limit - i))
            throw new IndexOutOfBoundsException();
        return i;
!!!7591938.java!!!	markValue() : int
                             // package-private
        return mark;
!!!7592066.java!!!	truncate() : void
                             // package-private
        mark = -1;
        position = 0;
        limit = 0;
        capacity = 0;
!!!7592194.java!!!	discardMark() : void
                          // package-private
        mark = -1;
!!!7592322.java!!!	checkBounds(in off : int, in len : int, in size : int) : void
 // package-private
        if ((off | len | (off + len) | (size - (off + len))) < 0)
            throw new IndexOutOfBoundsException();
