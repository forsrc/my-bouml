class DocTreePath
!!!6029826.java!!!	getPath(inout treePath : TreePath, inout doc : DocCommentTree, inout target : DocTree) : DocTreePath
        return getPath(new DocTreePath(treePath, doc), target);
!!!6029954.java!!!	getPath(inout path : DocTreePath, inout target : DocTree) : DocTreePath
        path.getClass();
        target.getClass();

        class Result extends Error {
            static final long serialVersionUID = -5942088234594905625L;
            DocTreePath path;
            Result(DocTreePath path) {
                this.path = path;
            }
        }

        class PathFinder extends DocTreePathScanner<DocTreePath,DocTree> {
            public DocTreePath scan(DocTree tree, DocTree target) {
                if (tree == target) {
                    throw new Result(new DocTreePath(getCurrentPath(), target));
                }
                return super.scan(tree, target);
            }
        }

        if (path.getLeaf() == target) {
            return path;
        }

        try {
            new PathFinder().scan(path, target);
        } catch (Result result) {
            return result.path;
        }
        return null;
!!!6030082.java!!!	DocTreePath(inout treePath : TreePath, inout t : DocCommentTree)
        treePath.getClass();
        t.getClass();

        this.treePath = treePath;
        this.docComment = t;
        this.parent = null;
        this.leaf = t;
!!!6030210.java!!!	DocTreePath(inout p : DocTreePath, inout t : DocTree)
        if (t.getKind() == DocTree.Kind.DOC_COMMENT) {
            throw new IllegalArgumentException("Use DocTreePath(TreePath, DocCommentTree) to construct DocTreePath for a DocCommentTree.");
        } else {
            treePath = p.treePath;
            docComment = p.docComment;
            parent = p;
        }
        leaf = t;
!!!6030338.java!!!	getTreePath() : TreePath
        return treePath;
!!!6030466.java!!!	getDocComment() : DocCommentTree
        return docComment;
!!!6030594.java!!!	getLeaf() : DocTree
        return leaf;
!!!6030722.java!!!	getParentPath() : DocTreePath
        return parent;
!!!6030850.java!!!	iterator() : Iterator
        return new Iterator<DocTree>() {
            public boolean hasNext() {
                return next != null;
            }

            public DocTree next() {
                DocTree t = next.leaf;
                next = next.parent;
                return t;
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }

            private DocTreePath next = DocTreePath.this;
        };
