class InputMap
!!!2839298.java!!!	setParent(inout map : InputMap) : void
        this.parent = map;
!!!2839426.java!!!	getParent() : InputMap
        return parent;
!!!2839554.java!!!	put(inout keyStroke : KeyStroke, inout actionMapKey : Object) : void
        if (keyStroke == null) {
            return;
        }
        if (actionMapKey == null) {
            remove(keyStroke);
        }
        else {
            if (arrayTable == null) {
                arrayTable = new ArrayTable();
            }
            arrayTable.put(keyStroke, actionMapKey);
        }
!!!2839682.java!!!	get(inout keyStroke : KeyStroke) : Object
        if (arrayTable == null) {
            InputMap    parent = getParent();

            if (parent != null) {
                return parent.get(keyStroke);
            }
            return null;
        }
        Object value = arrayTable.get(keyStroke);

        if (value == null) {
            InputMap    parent = getParent();

            if (parent != null) {
                return parent.get(keyStroke);
            }
        }
        return value;
!!!2839810.java!!!	remove(inout key : KeyStroke) : void
        if (arrayTable != null) {
            arrayTable.remove(key);
        }
!!!2839938.java!!!	clear() : void
        if (arrayTable != null) {
            arrayTable.clear();
        }
!!!2840066.java!!!	keys() : KeyStroke
        if (arrayTable == null) {
            return null;
        }
        KeyStroke[] keys = new KeyStroke[arrayTable.size()];
        arrayTable.getKeys(keys);
        return keys;
!!!2840194.java!!!	size() : int
        if (arrayTable == null) {
            return 0;
        }
        return arrayTable.size();
!!!2840322.java!!!	allKeys() : KeyStroke
        int             count = size();
        InputMap        parent = getParent();

        if (count == 0) {
            if (parent != null) {
                return parent.allKeys();
            }
            return keys();
        }
        if (parent == null) {
            return keys();
        }
        KeyStroke[]    keys = keys();
        KeyStroke[]    pKeys =  parent.allKeys();

        if (pKeys == null) {
            return keys;
        }
        if (keys == null) {
            // Should only happen if size() != keys.length, which should only
            // happen if mutated from multiple threads (or a bogus subclass).
            return pKeys;
        }

        HashMap<KeyStroke, KeyStroke> keyMap = new HashMap<KeyStroke, KeyStroke>();
        int            counter;

        for (counter = keys.length - 1; counter >= 0; counter--) {
            keyMap.put(keys[counter], keys[counter]);
        }
        for (counter = pKeys.length - 1; counter >= 0; counter--) {
            keyMap.put(pKeys[counter], pKeys[counter]);
        }

        KeyStroke[]    allKeys = new KeyStroke[keyMap.size()];

        return keyMap.keySet().toArray(allKeys);
!!!2840450.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        ArrayTable.writeArrayTable(s, arrayTable);
!!!2840578.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        for (int counter = s.readInt() - 1; counter >= 0; counter--) {
            put((KeyStroke)s.readObject(), s.readObject());
        }
