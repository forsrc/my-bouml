class ParserAdapter
!!!12586626.java!!!	ParserAdapter()
        super();

        String driver = ss.getSystemProperty("org.xml.sax.parser");

        try {
            setup(ParserFactory.makeParser());
        } catch (ClassNotFoundException e1) {
            throw new
                SAXException("Cannot find SAX1 driver class " +
                             driver, e1);
        } catch (IllegalAccessException e2) {
            throw new
                SAXException("SAX1 driver class " +
                             driver +
                             " found but cannot be loaded", e2);
        } catch (InstantiationException e3) {
            throw new
                SAXException("SAX1 driver class " +
                             driver +
                             " loaded but cannot be instantiated", e3);
        } catch (ClassCastException e4) {
            throw new
                SAXException("SAX1 driver class " +
                             driver +
                             " does not implement org.xml.sax.Parser");
        } catch (NullPointerException e5) {
            throw new
                SAXException("System property org.xml.sax.parser not specified");
        }
!!!12586754.java!!!	ParserAdapter(inout parser : Parser)
        super();
        setup(parser);
!!!12586882.java!!!	setup(inout parser : Parser) : void
        if (parser == null) {
            throw new
                NullPointerException("Parser argument must not be null");
        }
        this.parser = parser;
        atts = new AttributesImpl();
        nsSupport = new NamespaceSupport();
        attAdapter = new AttributeListAdapter();
!!!12587010.java!!!	setFeature(inout name : String, inout value : boolean) : void
        if (name.equals(NAMESPACES)) {
            checkNotParsing("feature", name);
            namespaces = value;
            if (!namespaces && !prefixes) {
                prefixes = true;
            }
        } else if (name.equals(NAMESPACE_PREFIXES)) {
            checkNotParsing("feature", name);
            prefixes = value;
            if (!prefixes && !namespaces) {
                namespaces = true;
            }
        } else if (name.equals(XMLNS_URIs)) {
            checkNotParsing("feature", name);
            uris = value;
        } else {
            throw new SAXNotRecognizedException("Feature: " + name);
        }
!!!12587138.java!!!	getFeature(inout name : String) : boolean
        if (name.equals(NAMESPACES)) {
            return namespaces;
        } else if (name.equals(NAMESPACE_PREFIXES)) {
            return prefixes;
        } else if (name.equals(XMLNS_URIs)) {
            return uris;
        } else {
            throw new SAXNotRecognizedException("Feature: " + name);
        }
!!!12587266.java!!!	setProperty(inout name : String, inout value : Object) : void
        throw new SAXNotRecognizedException("Property: " + name);
!!!12587394.java!!!	getProperty(inout name : String) : Object
        throw new SAXNotRecognizedException("Property: " + name);
!!!12587522.java!!!	setEntityResolver(inout resolver : EntityResolver) : void
        entityResolver = resolver;
!!!12587650.java!!!	getEntityResolver() : EntityResolver
        return entityResolver;
!!!12587778.java!!!	setDTDHandler(inout handler : DTDHandler) : void
        dtdHandler = handler;
!!!12587906.java!!!	getDTDHandler() : DTDHandler
        return dtdHandler;
!!!12588034.java!!!	setContentHandler(inout handler : ContentHandler) : void
        contentHandler = handler;
!!!12588162.java!!!	getContentHandler() : ContentHandler
        return contentHandler;
!!!12588290.java!!!	setErrorHandler(inout handler : ErrorHandler) : void
        errorHandler = handler;
!!!12588418.java!!!	getErrorHandler() : ErrorHandler
        return errorHandler;
!!!12588546.java!!!	parse(inout systemId : String) : void
        parse(new InputSource(systemId));
!!!12588674.java!!!	parse(inout input : InputSource) : void
        if (parsing) {
            throw new SAXException("Parser is already in use");
        }
        setupParser();
        parsing = true;
        try {
            parser.parse(input);
        } finally {
            parsing = false;
        }
        parsing = false;
!!!12588802.java!!!	setDocumentLocator(inout locator : Locator) : void
        this.locator = locator;
        if (contentHandler != null) {
            contentHandler.setDocumentLocator(locator);
        }
!!!12588930.java!!!	startDocument() : void
        if (contentHandler != null) {
            contentHandler.startDocument();
        }
!!!12589058.java!!!	endDocument() : void
        if (contentHandler != null) {
            contentHandler.endDocument();
        }
!!!12589186.java!!!	startElement(inout qName : String, inout qAtts : AttributeList) : void
                                // These are exceptions from the
                                // first pass; they should be
                                // ignored if there's a second pass,
                                // but reported otherwise.
        Vector exceptions = null;

                                // If we're not doing Namespace
                                // processing, dispatch this quickly.
        if (!namespaces) {
            if (contentHandler != null) {
                attAdapter.setAttributeList(qAtts);
                contentHandler.startElement("", "", qName.intern(),
                                            attAdapter);
            }
            return;
        }


                                // OK, we're doing Namespace processing.
        nsSupport.pushContext();
        int length = qAtts.getLength();

                                // First pass:  handle NS decls
        for (int i = 0; i < length; i++) {
            String attQName = qAtts.getName(i);

            if (!attQName.startsWith("xmlns"))
                continue;
                                // Could be a declaration...
            String prefix;
            int n = attQName.indexOf(':');

                                // xmlns=...
            if (n == -1 && attQName.length () == 5) {
                prefix = "";
            } else if (n != 5) {
                // XML namespaces spec doesn't discuss "xmlnsf:oo"
                // (and similarly named) attributes ... at most, warn
                continue;
            } else              // xmlns:foo=...
                prefix = attQName.substring(n+1);

            String value = qAtts.getValue(i);
            if (!nsSupport.declarePrefix(prefix, value)) {
                reportError("Illegal Namespace prefix: " + prefix);
                continue;
            }
            if (contentHandler != null)
                contentHandler.startPrefixMapping(prefix, value);
        }

                                // Second pass: copy all relevant
                                // attributes into the SAX2 AttributeList
                                // using updated prefix bindings
        atts.clear();
        for (int i = 0; i < length; i++) {
            String attQName = qAtts.getName(i);
            String type = qAtts.getType(i);
            String value = qAtts.getValue(i);

                                // Declaration?
            if (attQName.startsWith("xmlns")) {
                String prefix;
                int n = attQName.indexOf(':');

                if (n == -1 && attQName.length () == 5) {
                    prefix = "";
                } else if (n != 5) {
                    // XML namespaces spec doesn't discuss "xmlnsf:oo"
                    // (and similarly named) attributes ... ignore
                    prefix = null;
                } else {
                    prefix = attQName.substring(6);
                }
                                // Yes, decl:  report or prune
                if (prefix != null) {
                    if (prefixes) {
                        if (uris)
                            // note funky case:  localname can be null
                            // when declaring the default prefix, and
                            // yet the uri isn't null.
                            atts.addAttribute (nsSupport.XMLNS, prefix,
                                    attQName.intern(), type, value);
                        else
                            atts.addAttribute ("", "",
                                    attQName.intern(), type, value);
                    }
                    continue;
                }
            }

                                // Not a declaration -- report
            try {
                String attName[] = processName(attQName, true, true);
                atts.addAttribute(attName[0], attName[1], attName[2],
                                  type, value);
            } catch (SAXException e) {
                if (exceptions == null)
                    exceptions = new Vector();
                exceptions.addElement(e);
                atts.addAttribute("", attQName, attQName, type, value);
            }
        }

        // now handle the deferred exception reports
        if (exceptions != null && errorHandler != null) {
            for (int i = 0; i < exceptions.size(); i++)
                errorHandler.error((SAXParseException)
                                (exceptions.elementAt(i)));
        }

                                // OK, finally report the event.
        if (contentHandler != null) {
            String name[] = processName(qName, false, false);
            contentHandler.startElement(name[0], name[1], name[2], atts);
        }
!!!12589314.java!!!	endElement(inout qName : String) : void
                                // If we're not doing Namespace
                                // processing, dispatch this quickly.
        if (!namespaces) {
            if (contentHandler != null) {
                contentHandler.endElement("", "", qName.intern());
            }
            return;
        }

                                // Split the name.
        String names[] = processName(qName, false, false);
        if (contentHandler != null) {
            contentHandler.endElement(names[0], names[1], names[2]);
            Enumeration prefixes = nsSupport.getDeclaredPrefixes();
            while (prefixes.hasMoreElements()) {
                String prefix = (String)prefixes.nextElement();
                contentHandler.endPrefixMapping(prefix);
            }
        }
        nsSupport.popContext();
!!!12589442.java!!!	characters(inout ch : char [[]], in start : int, in length : int) : void
        if (contentHandler != null) {
            contentHandler.characters(ch, start, length);
        }
!!!12589570.java!!!	ignorableWhitespace(inout ch : char [[]], in start : int, in length : int) : void
        if (contentHandler != null) {
            contentHandler.ignorableWhitespace(ch, start, length);
        }
!!!12589698.java!!!	processingInstruction(inout target : String, inout data : String) : void
        if (contentHandler != null) {
            contentHandler.processingInstruction(target, data);
        }
!!!12589826.java!!!	setupParser() : void
        // catch an illegal "nonsense" state.
        if (!prefixes && !namespaces)
            throw new IllegalStateException ();

        nsSupport.reset();
        if (uris)
            nsSupport.setNamespaceDeclUris (true);

        if (entityResolver != null) {
            parser.setEntityResolver(entityResolver);
        }
        if (dtdHandler != null) {
            parser.setDTDHandler(dtdHandler);
        }
        if (errorHandler != null) {
            parser.setErrorHandler(errorHandler);
        }
        parser.setDocumentHandler(this);
        locator = null;
!!!12589954.java!!!	processName(inout qName : String, inout isAttribute : boolean, inout useException : boolean) : String
        String parts[] = nsSupport.processName(qName, nameParts,
                                               isAttribute);
        if (parts == null) {
            if (useException)
                throw makeException("Undeclared prefix: " + qName);
            reportError("Undeclared prefix: " + qName);
            parts = new String[3];
            parts[0] = parts[1] = "";
            parts[2] = qName.intern();
        }
        return parts;
!!!12590082.java!!!	reportError(inout message : String) : void
        if (errorHandler != null)
            errorHandler.error(makeException(message));
!!!12590210.java!!!	makeException(inout message : String) : SAXParseException
        if (locator != null) {
            return new SAXParseException(message, locator);
        } else {
            return new SAXParseException(message, null, null, -1, -1);
        }
!!!12590338.java!!!	checkNotParsing(inout type : String, inout name : String) : void
        if (parsing) {
            throw new SAXNotSupportedException("Cannot change " +
                                               type + ' ' +
                                               name + " while parsing");

        }
