class RandomLongsSpliterator
!!!7994242.java!!!	RandomLongsSpliterator(inout rng : Random, in index : long, in fence : long, in origin : long, in bound : long)
            this.rng = rng; this.index = index; this.fence = fence;
            this.origin = origin; this.bound = bound;
!!!7994370.java!!!	trySplit() : Random::RandomLongsSpliterator
            long i = index, m = (i + fence) >>> 1;
            return (m <= i) ? null :
                   new RandomLongsSpliterator(rng, i, index = m, origin, bound);
!!!7994498.java!!!	estimateSize() : long
            return fence - index;
!!!7994626.java!!!	characteristics() : int
            return (Spliterator.SIZED | Spliterator.SUBSIZED |
                    Spliterator.NONNULL | Spliterator.IMMUTABLE);
!!!7994754.java!!!	tryAdvance(inout consumer : LongConsumer) : boolean
            if (consumer == null) throw new NullPointerException();
            long i = index, f = fence;
            if (i < f) {
                consumer.accept(rng.internalNextLong(origin, bound));
                index = i + 1;
                return true;
            }
            return false;
!!!7994882.java!!!	forEachRemaining(inout consumer : LongConsumer) : void
            if (consumer == null) throw new NullPointerException();
            long i = index, f = fence;
            if (i < f) {
                index = f;
                Random r = rng;
                long o = origin, b = bound;
                do {
                    consumer.accept(r.internalNextLong(o, b));
                } while (++i < f);
            }
