class GTKEngine
!!!2035714.java!!!	getWidgetType(inout c : JComponent, inout id : Region) : GTKEngine::WidgetType
        Object value = regionToWidgetTypeMap.get(id);

        if (value instanceof WidgetType) {
            return (WidgetType)value;
        }

        WidgetType[] widgets = (WidgetType[])value;
        if (c == null ) {
            return widgets[0];
        }

        if (c instanceof JScrollBar) {
            return (((JScrollBar)c).getOrientation() == JScrollBar.HORIZONTAL) ?
                widgets[0] : widgets[1];
        } else if (c instanceof JSeparator) {
            JSeparator separator = (JSeparator)c;

            /* We should return correrct WidgetType if the seperator is inserted
             * in Menu/PopupMenu/ToolBar. BugID: 6465603
             */
            if (separator.getParent() instanceof JPopupMenu) {
                return WidgetType.POPUP_MENU_SEPARATOR;
            } else if (separator.getParent() instanceof JToolBar) {
                return WidgetType.TOOL_BAR_SEPARATOR;
            }

            return (separator.getOrientation() == JSeparator.HORIZONTAL) ?
                widgets[0] : widgets[1];
        } else if (c instanceof JSlider) {
            return (((JSlider)c).getOrientation() == JSlider.HORIZONTAL) ?
                widgets[0] : widgets[1];
        } else if (c instanceof JProgressBar) {
            return (((JProgressBar)c).getOrientation() == JProgressBar.HORIZONTAL) ?
                widgets[0] : widgets[1];
        } else if (c instanceof JSplitPane) {
            return (((JSplitPane)c).getOrientation() == JSplitPane.HORIZONTAL_SPLIT) ?
                widgets[1] : widgets[0];
        } else if (id == Region.LABEL) {
            /*
             * For all ListCellRenderers we will use COMBO_BOX_TEXT_FIELD widget
             * type because we can get correct insets. List items however won't be
             * drawn as a text entry (see GTKPainter.paintLabelBackground).
             */
            if (c instanceof ListCellRenderer) {
                return widgets[1];
            } else {
                return widgets[0];
            }
        } else if (id == Region.TEXT_FIELD) {
            String name = c.getName();
            if (name != null && name.startsWith("ComboBox")) {
                return widgets[1];
            } else {
                return widgets[0];
            }
        } else if (id == Region.FORMATTED_TEXT_FIELD) {
            String name = c.getName();
            if (name != null && name.startsWith("Spinner")) {
                return widgets[1];
            } else {
                return widgets[0];
            }
        } else if (id == Region.ARROW_BUTTON) {
            if (c.getParent() instanceof JScrollBar) {
                Integer prop = (Integer)
                    c.getClientProperty("__arrow_direction__");
                int dir = (prop != null) ?
                    prop.intValue() : SwingConstants.WEST;
                switch (dir) {
                case SwingConstants.WEST:
                    return WidgetType.HSCROLL_BAR_BUTTON_LEFT;
                case SwingConstants.EAST:
                    return WidgetType.HSCROLL_BAR_BUTTON_RIGHT;
                case SwingConstants.NORTH:
                    return WidgetType.VSCROLL_BAR_BUTTON_UP;
                case SwingConstants.SOUTH:
                    return WidgetType.VSCROLL_BAR_BUTTON_DOWN;
                default:
                    return null;
                }
            } else if (c.getParent() instanceof JComboBox) {
                return WidgetType.COMBO_BOX_ARROW_BUTTON;
            } else {
                return WidgetType.SPINNER_ARROW_BUTTON;
            }
        }

        return null;
!!!2035842.java!!!	getTextDirection(inout context : SynthContext) : int
        TextDirection dir = TextDirection.NONE;
        JComponent comp = context.getComponent();
        if (comp != null) {
            ComponentOrientation co = comp.getComponentOrientation();
            if (co != null) {
                dir = co.isLeftToRight() ?
                    TextDirection.LTR : TextDirection.RTL;
            }
        }
        return dir.ordinal();
!!!2035970.java!!!	paintArrow(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout direction : GTKConstants::ArrowType, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_arrow(widget, state, shadowType.ordinal(),
                detail, x - x0, y - y0, w, h, direction.ordinal());
!!!2036098.java!!!	paintBox(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        int gtkState =
            GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int synthState = context.getComponentState();
        int dir = getTextDirection(context);
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_box(widget, gtkState, shadowType.ordinal(),
                         detail, x - x0, y - y0, w, h, synthState, dir);
!!!2036226.java!!!	paintBoxGap(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout detail : String, in x : int, in y : int, in w : int, in h : int, inout boxGapType : GTKConstants::PositionType, in tabBegin : int, in size : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_box_gap(widget, state, shadowType.ordinal(), detail,
                x - x0, y - y0, w, h, boxGapType.ordinal(), tabBegin, size);
!!!2036354.java!!!	paintCheck(inout g : Graphics, inout context : SynthContext, inout id : Region, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        int synthState = context.getComponentState();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_check(widget, synthState, detail, x - x0, y - y0, w, h);
!!!2036482.java!!!	paintExpander(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout expanderStyle : GTKConstants::ExpanderStyle, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_expander(widget, state, detail, x - x0, y - y0, w, h,
                              expanderStyle.ordinal());
!!!2036610.java!!!	paintExtension(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout detail : String, in x : int, in y : int, in w : int, in h : int, inout placement : GTKConstants::PositionType, in tabIndex : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_extension(widget, state, shadowType.ordinal(), detail,
                               x - x0, y - y0, w, h, placement.ordinal());
!!!2036738.java!!!	paintFlatBox(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout detail : String, in x : int, in y : int, in w : int, in h : int, inout colorType : ColorType) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_flat_box(widget, state, shadowType.ordinal(), detail,
                              x - x0, y - y0, w, h,
                              context.getComponent().hasFocus());
!!!2036866.java!!!	paintFocus(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_focus(widget, state, detail, x - x0, y - y0, w, h);
!!!2036994.java!!!	paintHandle(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout detail : String, in x : int, in y : int, in w : int, in h : int, inout orientation : GTKConstants::Orientation) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_handle(widget, state, shadowType.ordinal(), detail,
                            x - x0, y - y0, w, h, orientation.ordinal());
!!!2037122.java!!!	paintHline(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_hline(widget, state, detail, x - x0, y - y0, w, h);
!!!2037250.java!!!	paintOption(inout g : Graphics, inout context : SynthContext, inout id : Region, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        int synthState = context.getComponentState();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_option(widget, synthState, detail, x - x0, y - y0, w, h);
!!!2037378.java!!!	paintShadow(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        int gtkState =
            GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int synthState = context.getComponentState();
        int dir = getTextDirection(context);
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_shadow(widget, gtkState, shadowType.ordinal(), detail,
                            x - x0, y - y0, w, h, synthState, dir);
!!!2037506.java!!!	paintSlider(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout shadowType : GTKConstants::ShadowType, inout detail : String, in x : int, in y : int, in w : int, in h : int, inout orientation : GTKConstants::Orientation) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_slider(widget, state, shadowType.ordinal(), detail,
                            x - x0, y - y0, w, h, orientation.ordinal());
!!!2037634.java!!!	paintVline(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout detail : String, in x : int, in y : int, in w : int, in h : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_vline(widget, state, detail, x - x0, y - y0, w, h);
!!!2037762.java!!!	paintBackground(inout g : Graphics, inout context : SynthContext, inout id : Region, in state : int, inout color : Color, in x : int, in y : int, in w : int, in h : int) : void

        state = GTKLookAndFeel.synthStateToGTKStateType(state).ordinal();
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        native_paint_background(widget, state, x - x0, y - y0, w, h);
!!!2037890.java!!!	paintCachedImage(inout g : Graphics, in x : int, in y : int, in w : int, in h : int, inout  : Object...args) : boolean
        if (w <= 0 || h <= 0) {
            return true;
        }

        // look for cached image
        Image img = cache.getImage(getClass(), null, w, h, args);
        if (img != null) {
            g.drawImage(img, x, y, null);
            return true;
        }
        return false;
!!!2038018.java!!!	startPainting(inout g : Graphics, in x : int, in y : int, in w : int, in h : int, inout  : Object...args) : void
        nativeStartPainting(w, h);
        x0 = x;
        y0 = y;
        w0 = w;
        h0 = h;
        graphics = g;
        cacheArgs = args;
!!!2038146.java!!!	finishPainting() : void
        finishPainting(true);
!!!2038274.java!!!	finishPainting(inout useCache : boolean) : void
        DataBufferInt dataBuffer = new DataBufferInt(w0 * h0);
        // Note that stealData() requires a markDirty() afterwards
        // since we modify the data in it.
        int transparency =
            nativeFinishPainting(SunWritableRaster.stealData(dataBuffer, 0),
                                 w0, h0);
        SunWritableRaster.markDirty(dataBuffer);

        int[] bands = BAND_OFFSETS[transparency - 1];
        WritableRaster raster = Raster.createPackedRaster(
                dataBuffer, w0, h0, w0, bands, null);

        ColorModel cm = COLOR_MODELS[transparency - 1];
        Image img = new BufferedImage(cm, raster, false, null);
        if (useCache) {
            cache.setImage(getClass(), null, w0, h0, cacheArgs, img);
        }
        graphics.drawImage(img, x0, y0, null);
!!!2038402.java!!!	themeChanged() : void
        synchronized(sun.awt.UNIXToolkit.GTK_LOCK) {
            native_switch_theme();
        }
        cache.flush();
!!!2038530.java!!!	getSetting(inout property : GTKEngine::Settings) : Object
        synchronized(sun.awt.UNIXToolkit.GTK_LOCK) {
            return native_get_gtk_setting(property.ordinal());
        }
!!!2038658.java!!!	setRangeValue(inout context : SynthContext, inout id : Region, in value : double, in min : double, in max : double, in visible : double) : void
        int widget = getWidgetType(context.getComponent(), id).ordinal();
        nativeSetRangeValue(widget, value, min, max, visible);
