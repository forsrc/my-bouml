format 222
"spi" // jdk1.8::java::nio::channels::spi
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/nio/channels/spi/"
  java_package "java.nio.channels.spi"
  classview 174722 "spi"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 984962 "AsynchronousChannelProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Service-provider class for asynchronous channels.

<p> An asynchronous channel provider is a concrete subclass of this class that
has a zero-argument constructor and implements the abstract methods specified
below.  A given invocation of the Java virtual machine maintains a single
system-wide default provider instance, which is returned by the {@link
#provider() provider} method.  The first invocation of that method will locate
the default provider as specified below.

<p> All of the methods in this class are safe for use by multiple concurrent
threads.  </p>

@since 1.7
"
      operation 7806338 "checkPermission"
	class_operation private return_type class_ref 146946 // Void
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7806466 "AsynchronousChannelProvider"
	private explicit_return_type ""
	nparams 1
	  param inout name "ignore" type class_ref 146946 // Void
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7806594 "AsynchronousChannelProvider"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"asynchronousChannelProvider\")</tt>
"
      end

      class 991618 "ProviderHolder"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3302658 // provider (<unidirectional association>)
	  relation 3302658 --->
	    a role_name "provider" init_value " load()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3302658 // provider (<unidirectional association>)
	    b parent class_ref 984962 // AsynchronousChannelProvider
	end

	operation 7806722 "load"
	  class_operation private return_type class_ref 984962 // AsynchronousChannelProvider
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7806850 "loadProviderFromProperty"
	  class_operation private return_type class_ref 984962 // AsynchronousChannelProvider
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7806978 "loadProviderAsService"
	  class_operation private return_type class_ref 984962 // AsynchronousChannelProvider
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7807106 "provider"
	class_operation public return_type class_ref 984962 // AsynchronousChannelProvider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system-wide default asynchronous channel provider for this
invocation of the Java virtual machine.

<p> The first invocation of this method locates the default provider
object as follows: </p>

<ol>

  <li><p> If the system property
  <tt>java.nio.channels.spi.AsynchronousChannelProvider</tt> is defined
  then it is taken to be the fully-qualified name of a concrete provider class.
  The class is loaded and instantiated; if this process fails then an
  unspecified error is thrown.  </p></li>

  <li><p> If a provider class has been installed in a jar file that is
  visible to the system class loader, and that jar file contains a
  provider-configuration file named
  <tt>java.nio.channels.spi.AsynchronousChannelProvider</tt> in the resource
  directory <tt>META-INF/services</tt>, then the first class name
  specified in that file is taken.  The class is loaded and
  instantiated; if this process fails then an unspecified error is
  thrown.  </p></li>

  <li><p> Finally, if no provider has been specified by any of the above
  means then the system-default provider class is instantiated and the
  result is returned.  </p></li>

</ol>

<p> Subsequent invocations of this method return the provider that was
returned by the first invocation.  </p>

@return  The system-wide default AsynchronousChannel provider
"
      end

      operation 7807234 "openAsynchronousChannelGroup"
	abstract public return_type class_ref 984834 // AsynchronousChannelGroup
	nparams 2
	  param in name "nThreads" explicit_type "int"
	  param inout name "threadFactory" type class_ref 985090 // ThreadFactory
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new asynchronous channel group with a fixed thread pool.

@param   nThreads
         The number of threads in the pool
@param   threadFactory
         The factory to use when creating new threads

@return  A new asynchronous channel group

@throws  IllegalArgumentException
         If {@code nThreads <= 0}
@throws  IOException
         If an I/O error occurs

@see AsynchronousChannelGroup#withFixedThreadPool
"
      end

      operation 7807362 "openAsynchronousChannelGroup"
	abstract public return_type class_ref 984834 // AsynchronousChannelGroup
	nparams 2
	  param inout name "executor" type class_ref 985218 // ExecutorService
	  param in name "initialSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new asynchronous channel group with the given thread pool.

@param   executor
         The thread pool
@param   initialSize
         A value {@code >=0} or a negative value for implementation
         specific default

@return  A new asynchronous channel group

@throws  IOException
         If an I/O error occurs

@see AsynchronousChannelGroup#withCachedThreadPool
"
      end

      operation 7807490 "openAsynchronousServerSocketChannel"
	abstract public return_type class_ref 985986 // AsynchronousServerSocketChannel
	nparams 1
	  param inout name "group" type class_ref 984834 // AsynchronousChannelGroup
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens an asynchronous server-socket channel.

@param   group
         The group to which the channel is bound, or {@code null} to
         bind to the default group

@return  The new channel

@throws  IllegalChannelGroupException
         If the provider that created the group differs from this provider
@throws  ShutdownChannelGroupException
         The group is shutdown
@throws  IOException
         If an I/O error occurs
"
      end

      operation 7807618 "openAsynchronousSocketChannel"
	abstract public return_type class_ref 986242 // AsynchronousSocketChannel
	nparams 1
	  param inout name "group" type class_ref 984834 // AsynchronousChannelGroup
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens an asynchronous socket channel.

@param   group
         The group to which the channel is bound, or {@code null} to
         bind to the default group

@return  The new channel

@throws  IllegalChannelGroupException
         If the provider that created the group differs from this provider
@throws  ShutdownChannelGroupException
         The group is shutdown
@throws  IOException
         If an I/O error occurs
"
      end
    end

    class 987138 "AbstractInterruptibleChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base implementation class for interruptible channels.

<p> This class encapsulates the low-level machinery required to implement
the asynchronous closing and interruption of channels.  A concrete channel
class must invoke the {@link #begin begin} and {@link #end end} methods
before and after, respectively, invoking an I/O operation that might block
indefinitely.  In order to ensure that the {@link #end end} method is always
invoked, these methods should be used within a
<tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block:

<blockquote><pre>
boolean completed = false;
try {
    begin();
    completed = ...;    // Perform blocking I/O operation
    return ...;         // Return result
} finally {
    end(completed);
}</pre></blockquote>

<p> The <tt>completed</tt> argument to the {@link #end end} method tells
whether or not the I/O operation actually completed, that is, whether it had
any effect that would be visible to the invoker.  In the case of an
operation that reads bytes, for example, this argument should be
<tt>true</tt> if, and only if, some bytes were actually transferred into the
invoker's target buffer.

<p> A concrete channel class must also implement the {@link
#implCloseChannel implCloseChannel} method in such a way that if it is
invoked while another thread is blocked in a native I/O operation upon the
channel then that operation will immediately return, either by throwing an
exception or by returning normally.  If a thread is interrupted or the
channel upon which it is blocked is asynchronously closed then the channel's
{@link #end end} method will throw the appropriate exception.

<p> This class performs the synchronization required to implement the {@link
java.nio.channels.Channel} specification.  Implementations of the {@link
#implCloseChannel implCloseChannel} method need not synchronize against
other threads that might be attempting to close the channel.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4
"
      classrelation 3292418 // <realization>
	relation 3292418 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3292418 // <realization>
	  b parent class_ref 940034 // Channel
      end

      classrelation 3292674 // <realization>
	relation 3292674 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3292674 // <realization>
	  b parent class_ref 987266 // InterruptibleChannel
      end

      classrelation 3292802 // closeLock (<unidirectional association>)
	relation 3292802 --->
	  a role_name "closeLock" init_value " new Object()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3292802 // closeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1808386 "open"
	volatile private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7778050 "AbstractInterruptibleChannel"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.
"
      end

      operation 7778178 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this channel.

<p> If the channel has already been closed then this method returns
immediately.  Otherwise it marks the channel as closed and then invokes
the {@link #implCloseChannel implCloseChannel} method in order to
complete the close operation.  </p>

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7778306 "implCloseChannel"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this channel.

<p> This method is invoked by the {@link #close close} method in order
to perform the actual work of closing the channel.  This method is only
invoked if the channel has not yet been closed, and it is never invoked
more than once.

<p> An implementation of this method must arrange for any other thread
that is blocked in an I/O operation upon this channel to return
immediately, either by throwing an exception or by returning normally.
</p>

@throws  IOException
         If an I/O error occurs while closing the channel
"
      end

      operation 7778434 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1808514 "interruptor"
	private explicit_type "Interruptible"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -- Interruption machinery --
"
      end

      classrelation 3292930 // interrupted (<unidirectional association>)
	relation 3292930 --->
	  a role_name "interrupted" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3292930 // interrupted (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      operation 7778562 "begin"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the beginning of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #end end}
method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block as
shown <a href=\"#be\">above</a>, in order to implement asynchronous
closing and interruption for this channel.  </p>
"
      end

      operation 7778690 "end"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "completed" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 985346 // AsynchronousCloseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the end of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #begin
begin} method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block
as shown <a href=\"#be\">above</a>, in order to implement asynchronous
closing and interruption for this channel.  </p>

@param  completed
        <tt>true</tt> if, and only if, the I/O operation completed
        successfully, that is, had some effect that would be visible to
        the operation's invoker

@throws  AsynchronousCloseException
         If the channel was asynchronously closed

@throws  ClosedByInterruptException
         If the thread blocked in the I/O operation was interrupted
"
      end

      operation 7778818 "blockedOn"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "intr" explicit_type "Interruptible"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- sun.misc.SharedSecrets --"
      end
    end

    class 987906 "AbstractSelectableChannel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base implementation class for selectable channels.

<p> This class defines methods that handle the mechanics of channel
registration, deregistration, and closing.  It maintains the current
blocking mode of this channel as well as its current set of selection keys.
It performs all of the synchronization required to implement the {@link
java.nio.channels.SelectableChannel} specification.  Implementations of the
abstract protected methods defined in this class need not synchronize
against other threads that might be engaged in the same operations.  </p>


@author Mark Reinhold
@author Mike McCloskey
@author JSR-51 Expert Group
@since 1.4
"
      classrelation 3294722 // <generalisation>
	relation 3294722 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3294722 // <generalisation>
	  b parent class_ref 210434 // SelectableChannel
      end

      classrelation 3294850 // provider (<unidirectional association>)
	relation 3294850 --->
	  a role_name "provider" const_relation private
	    comment " The provider that created this channel
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3294850 // provider (<unidirectional association>)
	  b parent class_ref 988034 // SelectorProvider
      end

      classrelation 3294978 // keys (<unidirectional association>)
	relation 3294978 --->
	  a role_name "keys" multiplicity "[]" init_value " null" private
	    comment " Keys that have been created by registering this channel with selectors.
 They are saved because if this channel is closed the keys must be
 deregistered.  Protected by keyLock.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3294978 // keys (<unidirectional association>)
	  b parent class_ref 210562 // SelectionKey
      end

      attribute 1809794 "keyCount"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3295106 // keyLock (<unidirectional association>)
	relation 3295106 --->
	  a role_name "keyLock" init_value " new Object()" const_relation private
	    comment " Lock for key set and count
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3295106 // keyLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3295234 // regLock (<unidirectional association>)
	relation 3295234 --->
	  a role_name "regLock" init_value " new Object()" const_relation private
	    comment " Lock for registration and configureBlocking operations
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3295234 // regLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1809922 "blocking"
	package explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Blocking mode, protected by regLock
"
      end

      operation 7782274 "AbstractSelectableChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "provider" type class_ref 988034 // SelectorProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.

@param  provider
        The provider that created this channel
"
      end

      operation 7782402 "provider"
	public return_type class_ref 988034 // SelectorProvider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider that created this channel.

@return  The provider that created this channel
"
      end

      operation 7782530 "addKey"
	private explicit_return_type "void"
	nparams 1
	  param inout name "k" type class_ref 210562 // SelectionKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Utility methods for the key set --"
      end

      operation 7782658 "findKey"
	private return_type class_ref 210562 // SelectionKey
	nparams 1
	  param inout name "sel" type class_ref 275586 // Selector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7782786 "removeKey"
	package explicit_return_type "void"
	nparams 1
	  param inout name "k" type class_ref 210562 // SelectionKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7782914 "haveValidKeys"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7783042 "isRegistered"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Registration --"
      end

      operation 7783170 "keyFor"
	public return_type class_ref 210562 // SelectionKey
	nparams 1
	  param inout name "sel" type class_ref 275586 // Selector
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7783298 "register"
	public return_type class_ref 210562 // SelectionKey
	nparams 3
	  param inout name "sel" type class_ref 275586 // Selector
	  param in name "ops" explicit_type "int"
	  param inout name "att" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 985474 // ClosedChannelException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers this channel with the given selector, returning a selection key.

<p>  This method first verifies that this channel is open and that the
given initial interest set is valid.

<p> If this channel is already registered with the given selector then
the selection key representing that registration is returned after
setting its interest set to the given value.

<p> Otherwise this channel has not yet been registered with the given
selector, so the {@link AbstractSelector#register register} method of
the selector is invoked while holding the appropriate locks.  The
resulting key is added to this channel's key set before being returned.
</p>

@throws  ClosedSelectorException {@inheritDoc}

@throws  IllegalBlockingModeException {@inheritDoc}

@throws  IllegalSelectorException {@inheritDoc}

@throws  CancelledKeyException {@inheritDoc}

@throws  IllegalArgumentException {@inheritDoc}
"
      end

      operation 7783426 "implCloseChannel"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Closing --

Closes this channel.

<p> This method, which is specified in the {@link
AbstractInterruptibleChannel} class and is invoked by the {@link
java.nio.channels.Channel#close close} method, in turn invokes the
{@link #implCloseSelectableChannel implCloseSelectableChannel} method in
order to perform the actual work of closing this channel.  It then
cancels all of this channel's keys.  </p>
"
      end

      operation 7783554 "implCloseSelectableChannel"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selectable channel.

<p> This method is invoked by the {@link java.nio.channels.Channel#close
close} method in order to perform the actual work of closing the
channel.  This method is only invoked if the channel has not yet been
closed, and it is never invoked more than once.

<p> An implementation of this method must arrange for any other thread
that is blocked in an I/O operation upon this channel to return
immediately, either by throwing an exception or by returning normally.
</p>

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7783682 "isBlocking"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Blocking --"
      end

      operation 7783810 "blockingLock"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7783938 "configureBlocking"
	public return_type class_ref 210434 // SelectableChannel
	nparams 1
	  param inout name "block" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts this channel's blocking mode.

<p> If the given blocking mode is different from the current blocking
mode then this method invokes the {@link #implConfigureBlocking
implConfigureBlocking} method, while holding the appropriate locks, in
order to change the mode.  </p>
"
      end

      operation 7784066 "implConfigureBlocking"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "block" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts this channel's blocking mode.

<p> This method is invoked by the {@link #configureBlocking
configureBlocking} method in order to perform the actual work of
changing the blocking mode.  This method is only invoked if the new mode
is different from the current mode.  </p>

@param  block  If <tt>true</tt> then this channel will be placed in
               blocking mode; if <tt>false</tt> then it will be placed
               non-blocking mode

@throws IOException
        If an I/O error occurs
"
      end
    end

    class 988034 "SelectorProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Service-provider class for selectors and selectable channels.

<p> A selector provider is a concrete subclass of this class that has a
zero-argument constructor and implements the abstract methods specified
below.  A given invocation of the Java virtual machine maintains a single
system-wide default provider instance, which is returned by the {@link
#provider() provider} method.  The first invocation of that method will locate
the default provider as specified below.

<p> The system-wide default provider is used by the static <tt>open</tt>
methods of the {@link java.nio.channels.DatagramChannel#open
DatagramChannel}, {@link java.nio.channels.Pipe#open Pipe}, {@link
java.nio.channels.Selector#open Selector}, {@link
java.nio.channels.ServerSocketChannel#open ServerSocketChannel}, and {@link
java.nio.channels.SocketChannel#open SocketChannel} classes.  It is also
used by the {@link java.lang.System#inheritedChannel System.inheritedChannel()}
method. A program may make use of a provider other than the default provider
by instantiating that provider and then directly invoking the <tt>open</tt>
methods defined in this class.

<p> All of the methods in this class are safe for use by multiple concurrent
threads.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4
"
      classrelation 3302786 // lock (<unidirectional association>)
	relation 3302786 --->
	  a role_name "lock" init_value " new Object()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3302786 // lock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3302914 // provider (<unidirectional association>)
	relation 3302914 --->
	  a role_name "provider" init_value " null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3302914 // provider (<unidirectional association>)
	  b parent class_ref 988034 // SelectorProvider
      end

      operation 7807746 "SelectorProvider"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"selectorProvider\")</tt>
"
      end

      operation 7807874 "loadProviderFromProperty"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7808002 "loadProviderAsService"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7808130 "provider"
	class_operation public return_type class_ref 988034 // SelectorProvider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system-wide default selector provider for this invocation of
the Java virtual machine.

<p> The first invocation of this method locates the default provider
object as follows: </p>

<ol>

  <li><p> If the system property
  <tt>java.nio.channels.spi.SelectorProvider</tt> is defined then it is
  taken to be the fully-qualified name of a concrete provider class.
  The class is loaded and instantiated; if this process fails then an
  unspecified error is thrown.  </p></li>

  <li><p> If a provider class has been installed in a jar file that is
  visible to the system class loader, and that jar file contains a
  provider-configuration file named
  <tt>java.nio.channels.spi.SelectorProvider</tt> in the resource
  directory <tt>META-INF/services</tt>, then the first class name
  specified in that file is taken.  The class is loaded and
  instantiated; if this process fails then an unspecified error is
  thrown.  </p></li>

  <li><p> Finally, if no provider has been specified by any of the above
  means then the system-default provider class is instantiated and the
  result is returned.  </p></li>

</ol>

<p> Subsequent invocations of this method return the provider that was
returned by the first invocation.  </p>

@return  The system-wide default selector provider
"
      end

      operation 7808258 "openDatagramChannel"
	abstract public return_type class_ref 964994 // DatagramChannel
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a datagram channel.

@return  The new channel

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7808386 "openDatagramChannel"
	abstract public return_type class_ref 964994 // DatagramChannel
	nparams 1
	  param inout name "family" type class_ref 969986 // ProtocolFamily
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a datagram channel.

@param   family
         The protocol family

@return  A new datagram channel

@throws  UnsupportedOperationException
         If the specified protocol family is not supported
@throws  IOException
         If an I/O error occurs

@since 1.7
"
      end

      operation 7808514 "openPipe"
	abstract public return_type class_ref 990338 // Pipe
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a pipe.

@return  The new pipe

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7808642 "openSelector"
	abstract public return_type class_ref 991490 // AbstractSelector
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a selector.

@return  The new selector

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7808770 "openServerSocketChannel"
	abstract public return_type class_ref 211714 // ServerSocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a server-socket channel.

@return  The new channel

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7808898 "openSocketChannel"
	abstract public return_type class_ref 212482 // SocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a socket channel.

@return  The new channel

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7809026 "inheritedChannel"
	public return_type class_ref 940034 // Channel
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the channel inherited from the entity that created this
Java virtual machine.

<p> On many operating systems a process, such as a Java virtual
machine, can be started in a manner that allows the process to
inherit a channel from the entity that created the process. The
manner in which this is done is system dependent, as are the
possible entities to which the channel may be connected. For example,
on UNIX systems, the Internet services daemon (<i>inetd</i>) is used to
start programs to service requests when a request arrives on an
associated network port. In this example, the process that is started,
inherits a channel representing a network socket.

<p> In cases where the inherited channel represents a network socket
then the {@link java.nio.channels.Channel Channel} type returned
by this method is determined as follows:

<ul>

 <li><p> If the inherited channel represents a stream-oriented connected
 socket then a {@link java.nio.channels.SocketChannel SocketChannel} is
 returned. The socket channel is, at least initially, in blocking
 mode, bound to a socket address, and connected to a peer.
 </p></li>

 <li><p> If the inherited channel represents a stream-oriented listening
 socket then a {@link java.nio.channels.ServerSocketChannel
 ServerSocketChannel} is returned. The server-socket channel is, at
 least initially, in blocking mode, and bound to a socket address.
 </p></li>

 <li><p> If the inherited channel is a datagram-oriented socket
 then a {@link java.nio.channels.DatagramChannel DatagramChannel} is
 returned. The datagram channel is, at least initially, in blocking
 mode, and bound to a socket address.
 </p></li>

</ul>

<p> In addition to the network-oriented channels described, this method
may return other kinds of channels in the future.

<p> The first invocation of this method creates the channel that is
returned. Subsequent invocations of this method return the same
channel. </p>

@return  The inherited channel, if any, otherwise <tt>null</tt>.

@throws  IOException
         If an I/O error occurs

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"inheritedChannel\")</tt>

@since 1.5
"
      end
    end

    class 991362 "AbstractSelectionKey"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base implementation class for selection keys.

<p> This class tracks the validity of the key and implements cancellation.

@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4
"
      classrelation 3302018 // <generalisation>
	relation 3302018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3302018 // <generalisation>
	  b parent class_ref 210562 // SelectionKey
      end

      operation 7804418 "AbstractSelectionKey"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.
"
      end

      attribute 1812994 "valid"
	volatile private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7804546 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7804674 "invalidate"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7804802 "cancel"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this key.

<p> If this key has not yet been cancelled then it is added to its
selector's cancelled-key set while synchronized on that set.  </p>
"
      end
    end

    class 991490 "AbstractSelector"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base implementation class for selectors.

<p> This class encapsulates the low-level machinery required to implement
the interruption of selection operations.  A concrete selector class must
invoke the {@link #begin begin} and {@link #end end} methods before and
after, respectively, invoking an I/O operation that might block
indefinitely.  In order to ensure that the {@link #end end} method is always
invoked, these methods should be used within a
<tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block:

<blockquote><pre>
try {
    begin();
    // Perform blocking I/O operation here
    ...
} finally {
    end();
}</pre></blockquote>

<p> This class also defines methods for maintaining a selector's
cancelled-key set and for removing a key from its channel's key set, and
declares the abstract {@link #register register} method that is invoked by a
selectable channel's {@link AbstractSelectableChannel#register register}
method in order to perform the actual work of registering a channel.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4
"
      classrelation 3302146 // <generalisation>
	relation 3302146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3302146 // <generalisation>
	  b parent class_ref 275586 // Selector
      end

      classrelation 3302274 // selectorOpen (<unidirectional association>)
	relation 3302274 --->
	  a role_name "selectorOpen" init_value " new AtomicBoolean(true)" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3302274 // selectorOpen (<unidirectional association>)
	  b parent class_ref 357506 // AtomicBoolean
      end

      classrelation 3302402 // provider (<unidirectional association>)
	relation 3302402 --->
	  a role_name "provider" const_relation private
	    comment " The provider that created this selector
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3302402 // provider (<unidirectional association>)
	  b parent class_ref 988034 // SelectorProvider
      end

      operation 7804930 "AbstractSelector"
	protected explicit_return_type ""
	nparams 1
	  param inout name "provider" type class_ref 988034 // SelectorProvider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.

@param  provider
        The provider that created this selector
"
      end

      classrelation 3302530 // cancelledKeys (<unidirectional association>)
	relation 3302530 --->
	  a role_name "cancelledKeys" init_value " new HashSet<SelectionKey>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SelectionKey> ${name}${value};
"
	    classrelation_ref 3302530 // cancelledKeys (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 7805058 "cancel"
	package explicit_return_type "void"
	nparams 1
	  param inout name "k" type class_ref 210562 // SelectionKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7805186 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selector.

<p> If the selector has already been closed then this method returns
immediately.  Otherwise it marks the selector as closed and then invokes
the {@link #implCloseSelector implCloseSelector} method in order to
complete the close operation.  </p>

@throws  IOException
         If an I/O error occurs
"
      end

      operation 7805314 "implCloseSelector"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selector.

<p> This method is invoked by the {@link #close close} method in order
to perform the actual work of closing the selector.  This method is only
invoked if the selector has not yet been closed, and it is never invoked
more than once.

<p> An implementation of this method must arrange for any other thread
that is blocked in a selection operation upon this selector to return
immediately as if by invoking the {@link
java.nio.channels.Selector#wakeup wakeup} method. </p>

@throws  IOException
         If an I/O error occurs while closing the selector
"
      end

      operation 7805442 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7805570 "provider"
	public return_type class_ref 988034 // SelectorProvider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider that created this channel.

@return  The provider that created this channel
"
      end

      operation 7805698 "cancelledKeys"
	protected return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SelectionKey> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this selector's cancelled-key set.

<p> This set should only be used while synchronized upon it.  </p>

@return  The cancelled-key set
"
      end

      operation 7805826 "register"
	abstract protected return_type class_ref 210562 // SelectionKey
	nparams 3
	  param inout name "ch" type class_ref 987906 // AbstractSelectableChannel
	  param in name "ops" explicit_type "int"
	  param inout name "att" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given channel with this selector.

<p> This method is invoked by a channel's {@link
AbstractSelectableChannel#register register} method in order to perform
the actual work of registering the channel with this selector.  </p>

@param  ch
        The channel to be registered

@param  ops
        The initial interest set, which must be valid

@param  att
        The initial attachment for the resulting key

@return  A new key representing the registration of the given channel
         with this selector
"
      end

      operation 7805954 "deregister"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 991362 // AbstractSelectionKey
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given key from its channel's key set.

<p> This method must be invoked by the selector for each channel that it
deregisters.  </p>

@param  key
        The selection key to be removed
"
      end

      attribute 1813122 "interruptor"
	private explicit_type "Interruptible"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -- Interruption machinery --
"
      end

      operation 7806082 "begin"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the beginning of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #end end}
method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block as
shown <a href=\"#be\">above</a>, in order to implement interruption for
this selector.

<p> Invoking this method arranges for the selector's {@link
Selector#wakeup wakeup} method to be invoked if a thread's {@link
Thread#interrupt interrupt} method is invoked while the thread is
blocked in an I/O operation upon the selector.  </p>
"
      end

      operation 7806210 "end"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the end of an I/O operation that might block indefinitely.

<p> This method should be invoked in tandem with the {@link #begin begin}
method, using a <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block as
shown <a href=\"#be\">above</a>, in order to implement interruption for
this selector.  </p>
"
      end
    end
  end

  deploymentview 168066 "spi"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 724738 "AbstractInterruptibleChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
import java.nio.channels.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.nio.ch.Interruptible;
${definition}"
      associated_elems
	class_ref 987138 // AbstractInterruptibleChannel
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















"
    end

    artifact 725634 "AbstractSelectableChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.*;
${definition}"
      associated_elems
	class_ref 987906 // AbstractSelectableChannel
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 729474 "AbstractSelectionKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.*;
${definition}"
      associated_elems
	class_ref 991362 // AbstractSelectionKey
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 729602 "AbstractSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.util.HashSet;
import java.util.Set;
import sun.nio.ch.Interruptible;
import java.util.concurrent.atomic.AtomicBoolean;
${definition}"
      associated_elems
	class_ref 991490 // AbstractSelector
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 729730 "AsynchronousChannelProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.*;
import java.io.IOException;
import java.util.Iterator;
import java.util.ServiceLoader;
import java.util.ServiceConfigurationError;
import java.util.concurrent.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
${definition}"
      associated_elems
	class_ref 984962 // AsynchronousChannelProvider
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 729858 "SelectorProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.ProtocolFamily;
import java.nio.channels.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Iterator;
import java.util.ServiceLoader;
import java.util.ServiceConfigurationError;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 988034 // SelectorProvider
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
