format 222
"stream" // jdk1.8::javax::imageio::stream
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/imageio/stream/"
  java_package "javax.imageio.stream"
  classview 144258 "stream"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 314498 "ImageInputStream"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A seekable input stream interface for use by
<code>ImageReader</code>s.  Various input sources, such as
<code>InputStream</code>s and <code>File</code>s,
as well as future fast I/O sources may be \"wrapped\" by a suitable
implementation of this interface for use by the Image I/O API.

@see ImageInputStreamImpl
@see FileImageInputStream
@see FileCacheImageInputStream
@see MemoryCacheImageInputStream

"
      classrelation 548354 // <generalisation>
	relation 548354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 548354 // <generalisation>
	  b parent class_ref 169602 // DataInput
      end

      classrelation 548482 // <generalisation>
	relation 548482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 548482 // <generalisation>
	  b parent class_ref 146562 // Closeable
      end

      operation 1750786 "setByteOrder"
	public explicit_return_type "void"
	nparams 1
	  param inout name "byteOrder" type class_ref 324354 // ByteOrder
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the desired byte order for future reads of data values
from this stream.  For example, the sequence of bytes '0x01
0x02 0x03 0x04' if read as a 4-byte integer would have the
value '0x01020304' using network byte order and the value
'0x04030201' under the reverse byte order.

<p> The enumeration class <code>java.nio.ByteOrder</code> is
used to specify the byte order.  A value of
<code>ByteOrder.BIG_ENDIAN</code> specifies so-called
big-endian or network byte order, in which the high-order byte
comes first.  Motorola and Sparc processors store data in this
format, while Intel processors store data in the reverse
<code>ByteOrder.LITTLE_ENDIAN</code> order.

<p> The byte order has no effect on the results returned from
the <code>readBits</code> method (or the value written by
<code>ImageOutputStream.writeBits</code>).

@param byteOrder one of <code>ByteOrder.BIG_ENDIAN</code> or
<code>java.nio.ByteOrder.LITTLE_ENDIAN</code>, indicating whether
network byte order or its reverse will be used for future
reads.

@see java.nio.ByteOrder
@see #getByteOrder
@see #readBits(int)
"
      end

      operation 1750914 "getByteOrder"
	public return_type class_ref 324354 // ByteOrder
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the byte order with which data values will be read from
this stream as an instance of the
<code>java.nio.ByteOrder</code> enumeration.

@return one of <code>ByteOrder.BIG_ENDIAN</code> or
<code>ByteOrder.LITTLE_ENDIAN</code>, indicating which byte
order is being used.

@see java.nio.ByteOrder
@see #setByteOrder
"
      end

      operation 1751042 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single byte from the stream and returns it as an
integer between 0 and 255.  If the end of the stream is
reached, -1 is returned.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a byte value from the stream, as an int, or -1 to
indicate EOF.

@exception IOException if an I/O error occurs.
"
      end

      operation 1751170 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>b.length</code> bytes from the stream, and
stores them into <code>b</code> starting at index 0.  The
number of bytes read is returned.  If no bytes can be read
because the end of the stream has been reached, -1 is returned.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param b an array of bytes to be written to.

@return the number of bytes actually read, or <code>-1</code>
to indicate EOF.

@exception NullPointerException if <code>b</code> is
<code>null</code>.

@exception IOException if an I/O error occurs.
"
      end

      operation 1751298 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes from the stream, and stores
them into <code>b</code> starting at index <code>off</code>.
The number of bytes read is returned.  If no bytes can be read
because the end of the stream has been reached, <code>-1</code>
is returned.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param b an array of bytes to be written to.
@param off the starting position within <code>b</code> to write to.
@param len the maximum number of <code>byte</code>s to read.

@return the number of bytes actually read, or <code>-1</code>
to indicate EOF.

@exception NullPointerException if <code>b</code> is
<code>null</code>.
@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>b.length</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1751426 "readBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "buf" type class_ref 324482 // IIOByteBuffer
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes from the stream, and
modifies the supplied <code>IIOByteBuffer</code> to indicate
the byte array, offset, and length where the data may be found.
The caller should not attempt to modify the data found in the
<code>IIOByteBuffer</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param buf an IIOByteBuffer object to be modified.
@param len the maximum number of <code>byte</code>s to read.

@exception IndexOutOfBoundsException if <code>len</code> is
negative.
@exception NullPointerException if <code>buf</code> is
<code>null</code>.

@exception IOException if an I/O error occurs.
"
      end

      operation 1751554 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte from the stream and returns a <code>boolean</code>
value of <code>true</code> if it is nonzero, <code>false</code>
if it is zero.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a boolean value from the stream.

@exception java.io.EOFException if the end of the stream is reached.
@exception IOException if an I/O error occurs.
"
      end

      operation 1751682 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte from the stream and returns it as a
<code>byte</code> value.  Byte values between <code>0x00</code>
and <code>0x7f</code> represent integer values between
<code>0</code> and <code>127</code>.  Values between
<code>0x80</code> and <code>0xff</code> represent negative
values from <code>-128</code> to <code>/1</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a signed byte value from the stream.

@exception java.io.EOFException if the end of the stream is reached.
@exception IOException if an I/O error occurs.
"
      end

      operation 1751810 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte from the stream, and (conceptually) converts it to
an int, masks it with <code>0xff</code> in order to strip off
any sign-extension bits, and returns it as a <code>byte</code>
value.

<p> Thus, byte values between <code>0x00</code> and
<code>0x7f</code> are simply returned as integer values between
<code>0</code> and <code>127</code>.  Values between
<code>0x80</code> and <code>0xff</code>, which normally
represent negative <code>byte</code>values, will be mapped into
positive integers between <code>128</code> and
<code>255</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return an unsigned byte value from the stream.

@exception java.io.EOFException if the end of the stream is reached.
@exception IOException if an I/O error occurs.
"
      end

      operation 1751938 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads two bytes from the stream, and (conceptually)
concatenates them according to the current byte order, and
returns the result as a <code>short</code> value.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a signed short value from the stream.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #getByteOrder
"
      end

      operation 1752066 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads two bytes from the stream, and (conceptually)
concatenates them according to the current byte order, converts
the resulting value to an <code>int</code>, masks it with
<code>0xffff</code> in order to strip off any sign-extension
buts, and returns the result as an unsigned <code>int</code>
value.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return an unsigned short value from the stream, as an int.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #getByteOrder
"
      end

      operation 1752194 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <code>readUnsignedShort</code>, except that the
result is returned using the <code>char</code> datatype.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return an unsigned char value from the stream.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #readUnsignedShort
"
      end

      operation 1752322 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads 4 bytes from the stream, and (conceptually) concatenates
them according to the current byte order and returns the result
as an <code>int</code>.

<p> The bit offset within the stream is ignored and treated as
though it were zero.

@return a signed int value from the stream.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #getByteOrder
"
      end

      operation 1752450 "readUnsignedInt"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads 4 bytes from the stream, and (conceptually) concatenates
them according to the current byte order, converts the result
to a long, masks it with <code>0xffffffffL</code> in order to
strip off any sign-extension bits, and returns the result as an
unsigned <code>long</code> value.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return an unsigned int value from the stream, as a long.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #getByteOrder
"
      end

      operation 1752578 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads 8 bytes from the stream, and (conceptually) concatenates
them according to the current byte order and returns the result
as a <code>long</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a signed long value from the stream.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #getByteOrder
"
      end

      operation 1752706 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads 4 bytes from the stream, and (conceptually) concatenates
them according to the current byte order and returns the result
as a <code>float</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a float value from the stream.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #getByteOrder
"
      end

      operation 1752834 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads 8 bytes from the stream, and (conceptually) concatenates
them according to the current byte order and returns the result
as a <code>double</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a double value from the stream.

@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.

@see #getByteOrder
"
      end

      operation 1752962 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next line of text from the input stream.  It reads
successive bytes, converting each byte separately into a
character, until it encounters a line terminator or end of
file; the characters read are then returned as a
<code>String</code>. Note that because this method processes
bytes, it does not support input of the full Unicode character
set.

<p> If end of file is encountered before even one byte can be
read, then <code>null</code> is returned. Otherwise, each byte
that is read is converted to type <code>char</code> by
zero-extension. If the character <code>'\\n'</code> is
encountered, it is discarded and reading ceases. If the
character <code>'\\r'</code> is encountered, it is discarded
and, if the following byte converts &#32;to the character
<code>'\\n'</code>, then that is discarded also; reading then
ceases. If end of file is encountered before either of the
characters <code>'\\n'</code> and <code>'\\r'</code> is
encountered, reading ceases. Once reading has ceased, a
<code>String</code> is returned that contains all the
characters read and not discarded, taken in order.  Note that
every character in this string will have a value less than
<code>&#92;u0100</code>, that is, <code>(char)256</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return a String containing a line of text from the stream.

@exception IOException if an I/O error occurs.
"
      end

      operation 1753090 "readUTF"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a string that has been encoded using a
<a href=\"../../../java/io/DataInput.html#modified-utf-8\">modified
UTF-8</a>
format.  The general contract of <code>readUTF</code> is that
it reads a representation of a Unicode character string encoded
in modified UTF-8 format; this string of characters is
then returned as a <code>String</code>.

<p> First, two bytes are read and used to construct an unsigned
16-bit integer in the manner of the
<code>readUnsignedShort</code> method, using network byte order
(regardless of the current byte order setting). This integer
value is called the <i>UTF length</i> and specifies the number
of additional bytes to be read. These bytes are then converted
to characters by considering them in groups. The length of each
group is computed from the value of the first byte of the
group. The byte following a group, if any, is the first byte of
the next group.

<p> If the first byte of a group matches the bit pattern
<code>0xxxxxxx</code> (where <code>x</code> means \"may be
<code>0</code> or <code>1</code>\"), then the group consists of
just that byte. The byte is zero-extended to form a character.

<p> If the first byte of a group matches the bit pattern
<code>110xxxxx</code>, then the group consists of that byte
<code>a</code> and a second byte <code>b</code>. If there is no
byte <code>b</code> (because byte <code>a</code> was the last
of the bytes to be read), or if byte <code>b</code> does not
match the bit pattern <code>10xxxxxx</code>, then a
<code>UTFDataFormatException</code> is thrown. Otherwise, the
group is converted to the character:

<p> <pre><code>
(char)(((a&amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))
</code></pre>

If the first byte of a group matches the bit pattern
<code>1110xxxx</code>, then the group consists of that byte
<code>a</code> and two more bytes <code>b</code> and
<code>c</code>.  If there is no byte <code>c</code> (because
byte <code>a</code> was one of the last two of the bytes to be
read), or either byte <code>b</code> or byte <code>c</code>
does not match the bit pattern <code>10xxxxxx</code>, then a
<code>UTFDataFormatException</code> is thrown. Otherwise, the
group is converted to the character:

<p> <pre><code>
(char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))
</code></pre>

If the first byte of a group matches the pattern
<code>1111xxxx</code> or the pattern <code>10xxxxxx</code>,
then a <code>UTFDataFormatException</code> is thrown.

<p> If end of file is encountered at any time during this
entire process, then an <code>java.io.EOFException</code> is thrown.

<p> After every group has been converted to a character by this
process, the characters are gathered, in the same order in
which their corresponding groups were read from the input
stream, to form a <code>String</code>, which is returned.

<p> The current byte order setting is ignored.

<p> The bit offset within the stream is reset to zero before
the read occurs.

<p><strong>Note:</strong> This method should not be used in
the  implementation of image formats that use standard UTF-8,
because  the modified UTF-8 used here is incompatible with
standard UTF-8.

@return a String read from the stream.

@exception  java.io.EOFException  if this stream reaches the end
before reading all the bytes.
@exception  java.io.UTFDataFormatException if the bytes do not represent
a valid modified UTF-8 encoding of a string.
@exception IOException if an I/O error occurs.
"
      end

      operation 1753218 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>len</code> bytes from the stream, and stores them
into <code>b</code> starting at index <code>off</code>.
If the end of the stream is reached, an <code>java.io.EOFException</code>
will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param b an array of bytes to be written to.
@param off the starting position within <code>b</code> to write to.
@param len the maximum number of <code>byte</code>s to read.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>b.length</code>.
@exception NullPointerException if <code>b</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1753346 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>b.length</code> bytes from the stream, and stores them
into <code>b</code> starting at index <code>0</code>.
If the end of the stream is reached, an <code>java.io.EOFException</code>
will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param b an array of <code>byte</code>s.

@exception NullPointerException if <code>b</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1753474 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "s" explicit_type "short"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>len</code> shorts (signed 16-bit integers) from the
stream according to the current byte order, and
stores them into <code>s</code> starting at index
<code>off</code>.  If the end of the stream is reached, an
<code>java.io.EOFException</code> will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param s an array of shorts to be written to.
@param off the starting position within <code>s</code> to write to.
@param len the maximum number of <code>short</code>s to read.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>s.length</code>.
@exception NullPointerException if <code>s</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1753602 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>len</code> chars (unsigned 16-bit integers) from the
stream according to the current byte order, and
stores them into <code>c</code> starting at index
<code>off</code>.  If the end of the stream is reached, an
<code>java.io.EOFException</code> will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param c an array of chars to be written to.
@param off the starting position within <code>c</code> to write to.
@param len the maximum number of <code>char</code>s to read.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>c.length</code>.
@exception NullPointerException if <code>c</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1753730 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "i" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>len</code> ints (signed 32-bit integers) from the
stream according to the current byte order, and
stores them into <code>i</code> starting at index
<code>off</code>.  If the end of the stream is reached, an
<code>java.io.EOFException</code> will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param i an array of ints to be written to.
@param off the starting position within <code>i</code> to write to.
@param len the maximum number of <code>int</code>s to read.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>i.length</code>.
@exception NullPointerException if <code>i</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1753858 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "l" explicit_type "long"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>len</code> longs (signed 64-bit integers) from the
stream according to the current byte order, and
stores them into <code>l</code> starting at index
<code>off</code>.  If the end of the stream is reached, an
<code>java.io.EOFException</code> will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param l an array of longs to be written to.
@param off the starting position within <code>l</code> to write to.
@param len the maximum number of <code>long</code>s to read.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>l.length</code>.
@exception NullPointerException if <code>l</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1753986 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "f" explicit_type "float"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>len</code> floats (32-bit IEEE single-precision
floats) from the stream according to the current byte order,
and stores them into <code>f</code> starting at
index <code>off</code>.  If the end of the stream is reached,
an <code>java.io.EOFException</code> will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param f an array of floats to be written to.
@param off the starting position within <code>f</code> to write to.
@param len the maximum number of <code>float</code>s to read.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>f.length</code>.
@exception NullPointerException if <code>f</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1754114 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "d" explicit_type "double"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads <code>len</code> doubles (64-bit IEEE double-precision
floats) from the stream according to the current byte order,
and stores them into <code>d</code> starting at
index <code>off</code>.  If the end of the stream is reached,
an <code>java.io.EOFException</code> will be thrown.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@param d an array of doubles to be written to.
@param off the starting position within <code>d</code> to write to.
@param len the maximum number of <code>double</code>s to read.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>d.length</code>.
@exception NullPointerException if <code>d</code> is
<code>null</code>.
@exception java.io.EOFException if the stream reaches the end before
reading all the bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1754242 "getStreamPosition"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current byte position of the stream.  The next read
will take place starting at this offset.

@return a long containing the position of the stream.

@exception IOException if an I/O error occurs.
"
      end

      operation 1754370 "getBitOffset"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current bit offset, as an integer between 0 and 7,
inclusive.  The bit offset is updated implicitly by calls to
the <code>readBits</code> method.  A value of 0 indicates the
most-significant bit, and a value of 7 indicates the least
significant bit, of the byte being read.

<p> The bit offset is set to 0 when a stream is first
opened, and is reset to 0 by calls to <code>seek</code>,
<code>skipBytes</code>, or any <code>read</code> or
<code>readFully</code> method.

@return an <code>int</code> containing the bit offset between
0 and 7, inclusive.

@exception IOException if an I/O error occurs.

@see #setBitOffset
"
      end

      operation 1754498 "setBitOffset"
	public explicit_return_type "void"
	nparams 1
	  param in name "bitOffset" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the bit offset to an integer between 0 and 7, inclusive.
The byte offset within the stream, as returned by
<code>getStreamPosition</code>, is left unchanged.
A value of 0 indicates the
most-significant bit, and a value of 7 indicates the least
significant bit, of the byte being read.

@param bitOffset the desired offset, as an <code>int</code>
between 0 and 7, inclusive.

@exception IllegalArgumentException if <code>bitOffset</code>
is not between 0 and 7, inclusive.
@exception IOException if an I/O error occurs.

@see #getBitOffset
"
      end

      operation 1754626 "readBit"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single bit from the stream and returns it as an
<code>int</code> with the value <code>0</code> or
<code>1</code>.  The bit offset is advanced by one and reduced
modulo 8.

@return an <code>int</code> containing the value <code>0</code>
or <code>1</code>.

@exception java.io.EOFException if the stream reaches the end before
reading all the bits.
@exception IOException if an I/O error occurs.
"
      end

      operation 1754754 "readBits"
	public explicit_return_type "long"
	nparams 1
	  param in name "numBits" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a bitstring from the stream and returns it as a
<code>long</code>, with the first bit read becoming the most
significant bit of the output.  The read starts within the byte
indicated by <code>getStreamPosition</code>, at the bit given
by <code>getBitOffset</code>.  The bit offset is advanced by
<code>numBits</code> and reduced modulo 8.

<p> The byte order of the stream has no effect on this
method.  The return value of this method is constructed as
though the bits were read one at a time, and shifted into
the right side of the return value, as shown by the following
pseudo-code:

<pre>{@code
long accum = 0L;
for (int i = 0; i < numBits; i++) {
  accum <<= 1; // Shift left one bit to make room
  accum |= readBit();
}
}</pre>

Note that the result of <code>readBits(32)</code> may thus not
be equal to that of <code>readInt()</code> if a reverse network
byte order is being used (i.e., <code>getByteOrder() ==
false</code>).

<p> If the end of the stream is encountered before all the bits
have been read, an <code>java.io.EOFException</code> is thrown.

@param numBits the number of bits to read, as an <code>int</code>
between 0 and 64, inclusive.
@return the bitstring, as a <code>long</code> with the last bit
read stored in the least significant bit.

@exception IllegalArgumentException if <code>numBits</code>
is not between 0 and 64, inclusive.
@exception java.io.EOFException if the stream reaches the end before
reading all the bits.
@exception IOException if an I/O error occurs.
"
      end

      operation 1754882 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total length of the stream, if known.  Otherwise,
<code>-1</code> is returned.

@return a <code>long</code> containing the length of the
stream, if known, or else <code>-1</code>.

@exception IOException if an I/O error occurs.
"
      end

      operation 1755010 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the stream position forward by a given number of bytes.  It
is possible that this method will only be able to skip forward
by a smaller number of bytes than requested, for example if the
end of the stream is reached.  In all cases, the actual number
of bytes skipped is returned.  The bit offset is set to zero
prior to advancing the position.

@param n an <code>int</code> containing the number of bytes to
be skipped.

@return an <code>int</code> representing the number of bytes skipped.

@exception IOException if an I/O error occurs.
"
      end

      operation 1755138 "skipBytes"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the stream position forward by a given number of bytes.
This method is identical to <code>skipBytes(int)</code> except
that it allows for a larger skip distance.

@param n a <code>long</code> containing the number of bytes to
be skipped.

@return a <code>long</code> representing the number of bytes
skipped.

@exception IOException if an I/O error occurs.
"
      end

      operation 1755266 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current stream position to the desired location.  The
next read will occur at this location.  The bit offset is set
to 0.

<p> An <code>IndexOutOfBoundsException</code> will be thrown if
<code>pos</code> is smaller than the flushed position (as
returned by <code>getflushedPosition</code>).

<p> It is legal to seek past the end of the file; an
<code>java.io.EOFException</code> will be thrown only if a read is
performed.

@param pos a <code>long</code> containing the desired file
pointer position.

@exception IndexOutOfBoundsException if <code>pos</code> is smaller
than the flushed position.
@exception IOException if any other I/O error occurs.
"
      end

      operation 1755394 "mark"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks a position in the stream to be returned to by a
subsequent call to <code>reset</code>.  Unlike a standard
<code>InputStream</code>, all <code>ImageInputStream</code>s
support marking.  Additionally, calls to <code>mark</code> and
<code>reset</code> may be nested arbitrarily.

<p> Unlike the <code>mark</code> methods declared by the
<code>Reader</code> and <code>InputStream</code> interfaces, no
<code>readLimit</code> parameter is used.  An arbitrary amount
of data may be read following the call to <code>mark</code>.

<p> The bit position used by the <code>readBits</code> method
is saved and restored by each pair of calls to
<code>mark</code> and <code>reset</code>.

<p> Note that it is valid for an <code>ImageReader</code> to call
<code>flushBefore</code> as part of a read operation.
Therefore, if an application calls <code>mark</code> prior to
passing that stream to an <code>ImageReader</code>, the application
should not assume that the marked position will remain valid after
the read operation has completed.
"
      end

      operation 1755522 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the stream pointer to its previous position, including
the bit offset, at the time of the most recent unmatched call
to <code>mark</code>.

<p> Calls to <code>reset</code> without a corresponding call
to <code>mark</code> have no effect.

<p> An <code>IOException</code> will be thrown if the previous
marked position lies in the discarded portion of the stream.

@exception IOException if an I/O error occurs.
"
      end

      operation 1755650 "flushBefore"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discards the initial portion of the stream prior to the
indicated position.  Attempting to seek to an offset within the
flushed portion of the stream will result in an
<code>IndexOutOfBoundsException</code>.

<p> Calling <code>flushBefore</code> may allow classes
implementing this interface to free up resources such as memory
or disk space that are being used to store data from the
stream.

@param pos a <code>long</code> containing the length of the
stream prefix that may be flushed.

@exception IndexOutOfBoundsException if <code>pos</code> lies
in the flushed portion of the stream or past the current stream
position.
@exception IOException if an I/O error occurs.
"
      end

      operation 1755778 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discards the initial position of the stream prior to the current
stream position.  Equivalent to
<code>flushBefore(getStreamPosition())</code>.

@exception IOException if an I/O error occurs.
"
      end

      operation 1755906 "getFlushedPosition"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the earliest position in the stream to which seeking
may be performed.  The returned value will be the maximum of
all values passed into previous calls to
<code>flushBefore</code>.

@return the earliest legal position for seeking, as a
<code>long</code>.
"
      end

      operation 1756034 "isCached"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>ImageInputStream</code>
caches data itself in order to allow seeking backwards.
Applications may consult this in order to decide how frequently,
or whether, to flush in order to conserve cache resources.

@return <code>true</code> if this <code>ImageInputStream</code>
caches data.

@see #isCachedMemory
@see #isCachedFile
"
      end

      operation 1756162 "isCachedMemory"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>ImageInputStream</code>
caches data itself in order to allow seeking backwards, and
the cache is kept in main memory.  Applications may consult
this in order to decide how frequently, or whether, to flush
in order to conserve cache resources.

@return <code>true</code> if this <code>ImageInputStream</code>
caches data in main memory.

@see #isCached
@see #isCachedFile
"
      end

      operation 1756290 "isCachedFile"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>ImageInputStream</code>
caches data itself in order to allow seeking backwards, and
the cache is kept in a temporary file.  Applications may consult
this in order to decide how frequently, or whether, to flush
in order to conserve cache resources.

@return <code>true</code> if this <code>ImageInputStream</code>
caches data in a temporary file.

@see #isCached
@see #isCachedMemory
"
      end

      operation 1756418 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream.  Attempts to access a stream that has been
closed may result in <code>IOException</code>s or incorrect
behavior.  Calling this method may allow classes implementing
this interface to release resources associated with the stream
such as memory, disk space, or file descriptors.

@exception IOException if an I/O error occurs.
"
      end
    end

    class 316930 "ImageOutputStream"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A seekable output stream interface for use by
<code>ImageWriter</code>s.  Various output destinations, such as
<code>OutputStream</code>s and <code>File</code>s, as well as
future fast I/O destinations may be \"wrapped\" by a suitable
implementation of this interface for use by the Image I/O API.

<p> Unlike a standard <code>OutputStream</code>, ImageOutputStream
extends its counterpart, <code>ImageInputStream</code>.  Thus it is
possible to read from the stream as it is being written.  The same
seek and flush positions apply to both reading and writing, although
the semantics for dealing with a non-zero bit offset before a byte-aligned
write are necessarily different from the semantics for dealing with
a non-zero bit offset before a byte-aligned read.  When reading bytes,
any bit offset is set to 0 before the read; when writing bytes, a
non-zero bit offset causes the remaining bits in the byte to be written
as 0s.  The byte-aligned write then starts at the next byte position.

@see ImageInputStream

"
      classrelation 574978 // <generalisation>
	relation 574978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 574978 // <generalisation>
	  b parent class_ref 314498 // ImageInputStream
      end

      classrelation 575106 // <generalisation>
	relation 575106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 575106 // <generalisation>
	  b parent class_ref 174210 // DataOutput
      end

      operation 1849730 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single byte to the stream at the current position.
The 24 high-order bits of <code>b</code> are ignored.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.  Implementers can use the
{@link ImageOutputStreamImpl#flushBits flushBits}
method of {@link ImageOutputStreamImpl ImageOutputStreamImpl}
to guarantee this.

@param b an <code>int</code> whose lower 8 bits are to be
written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1849858 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to the stream at the current
position.  If <code>b.length</code> is 0, nothing is written.
The byte <code>b[0]</code> is written first, then the byte
<code>b[1]</code>, and so on.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param b an array of <code>byte</code>s to be written.

@exception NullPointerException if <code>b</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1849986 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bytes to the stream at the current
position.  If <code>len</code> is 0, nothing is written.
The byte <code>b[off]</code> is written first, then the byte
<code>b[off + 1]</code>, and so on.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.  Implementers can use the
{@link ImageOutputStreamImpl#flushBits flushBits}
method of {@link ImageOutputStreamImpl ImageOutputStreamImpl}
to guarantee this.

@param b an array of <code>byte</code>s to be written.
@param off the start offset in the data.
@param len the number of <code>byte</code>s to write.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>b.length</code>.
@exception NullPointerException if <code>b</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1850114 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>boolean</code> value to the stream.  If
<code>v</code> is true, the value <code>(byte)1</code> is
written; if <code>v</code> is false, the value
<code>(byte)0</code> is written.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param v the <code>boolean</code> to be written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1850242 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the 8 low-order bits of <code>v</code> to the
stream. The 24 high-order bits of <code>v</code> are ignored.
(This means that <code>writeByte</code> does exactly the same
thing as <code>write</code> for an integer argument.)

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param v an <code>int</code> containing the byte value to be
written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1850370 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the 16 low-order bits of <code>v</code> to the
stream. The 16 high-order bits of <code>v</code> are ignored.
If the stream uses network byte order, the bytes written, in
order, will be:

<pre>
(byte)((v &gt;&gt; 8) &amp; 0xff)
(byte)(v &amp; 0xff)
</pre>

Otherwise, the bytes written will be:

<pre>
(byte)(v &amp; 0xff)
(byte)((v &gt;&gt; 8) &amp; 0xff)
</pre>

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param v an <code>int</code> containing the short value to be
written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1850498 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is a synonym for {@link #writeShort writeShort}.

@param v an <code>int</code> containing the char (unsigned
short) value to be written.

@exception IOException if an I/O error occurs.

@see #writeShort(int)
"
      end

      operation 1850626 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the 32 bits of <code>v</code> to the stream.  If the
stream uses network byte order, the bytes written, in order,
will be:

<pre>
(byte)((v &gt;&gt; 24) &amp; 0xff)
(byte)((v &gt;&gt; 16) &amp; 0xff)
(byte)((v &gt;&gt; 8) &amp; 0xff)
(byte)(v &amp; 0xff)
</pre>

Otheriwse, the bytes written will be:

<pre>
(byte)(v &amp; 0xff)
(byte)((v &gt;&gt; 8) &amp; 0xff)
(byte)((v &gt;&gt; 16) &amp; 0xff)
(byte)((v &gt;&gt; 24) &amp; 0xff)
</pre>

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param v an <code>int</code> containing the value to be
written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1850754 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the 64 bits of <code>v</code> to the stream.  If the
stream uses network byte order, the bytes written, in order,
will be:

<pre>
(byte)((v &gt;&gt; 56) &amp; 0xff)
(byte)((v &gt;&gt; 48) &amp; 0xff)
(byte)((v &gt;&gt; 40) &amp; 0xff)
(byte)((v &gt;&gt; 32) &amp; 0xff)
(byte)((v &gt;&gt; 24) &amp; 0xff)
(byte)((v &gt;&gt; 16) &amp; 0xff)
(byte)((v &gt;&gt; 8) &amp; 0xff)
(byte)(v &amp; 0xff)
</pre>

Otherwise, the bytes written will be:

<pre>
(byte)(v &amp; 0xff)
(byte)((v &gt;&gt; 8) &amp; 0xff)
(byte)((v &gt;&gt; 16) &amp; 0xff)
(byte)((v &gt;&gt; 24) &amp; 0xff)
(byte)((v &gt;&gt; 32) &amp; 0xff)
(byte)((v &gt;&gt; 40) &amp; 0xff)
(byte)((v &gt;&gt; 48) &amp; 0xff)
(byte)((v &gt;&gt; 56) &amp; 0xff)
</pre>

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param v a <code>long</code> containing the value to be
written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1850882 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>float</code> value, which is comprised of four
bytes, to the output stream. It does this as if it first
converts this <code>float</code> value to an <code>int</code>
in exactly the manner of the <code>Float.floatToIntBits</code>
method and then writes the int value in exactly the manner of
the <code>writeInt</code> method.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param v a <code>float</code> containing the value to be
written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1851010 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>double</code> value, which is comprised of four
bytes, to the output stream. It does this as if it first
converts this <code>double</code> value to an <code>long</code>
in exactly the manner of the
<code>Double.doubleToLongBits</code> method and then writes the
long value in exactly the manner of the <code>writeLong</code>
method.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param v a <code>double</code> containing the value to be
written.

@exception IOException if an I/O error occurs.
"
      end

      operation 1851138 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the output stream. For every character in
the string <code>s</code>, taken in order, one byte is written
to the output stream. If <code>s</code> is <code>null</code>, a
<code>NullPointerException</code> is thrown.

<p> If <code>s.length</code> is zero, then no bytes are
written. Otherwise, the character <code>s[0]</code> is written
first, then <code>s[1]</code>, and so on; the last character
written is <code>s[s.length-1]</code>. For each character, one
byte is written, the low-order byte, in exactly the manner of
the <code>writeByte</code> method. The high-order eight bits of
each character in the string are ignored.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param s a <code>String</code> containing the value to be
written.

@exception NullPointerException if <code>s</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1851266 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the output stream. For every character in
the string <code>s</code>, taken in order, two bytes are
written to the output stream, ordered according to the current
byte order setting.  If network byte order is being used, the
high-order byte is written first; the order is reversed
otherwise.  If <code>s</code> is <code>null</code>, a
<code>NullPointerException</code> is thrown.

<p> If <code>s.length</code> is zero, then no bytes are
written. Otherwise, the character <code>s[0]</code> is written
first, then <code>s[1]</code>, and so on; the last character
written is <code>s[s.length-1]</code>.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param s a <code>String</code> containing the value to be
written.

@exception NullPointerException if <code>s</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1851394 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes two bytes of length information to the output stream in
network byte order, followed by the
<a href=\"../../../java/io/DataInput.html#modified-utf-8\">modified
UTF-8</a>
representation of every character in the string <code>s</code>.
If <code>s</code> is <code>null</code>, a
<code>NullPointerException</code> is thrown.  Each character in
the string <code>s</code> is converted to a group of one, two,
or three bytes, depending on the value of the character.

<p> If a character <code>c</code> is in the range
<code>&#92;u0001</code> through <code>&#92;u007f</code>, it is
represented by one byte:

<p><pre>
(byte)c
</pre>

<p> If a character <code>c</code> is <code>&#92;u0000</code> or
is in the range <code>&#92;u0080</code> through
<code>&#92;u07ff</code>, then it is represented by two bytes,
to be written in the order shown:

<p> <pre><code>
(byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6)))
(byte)(0x80 | (0x3f &amp; c))
</code></pre>

<p> If a character <code>c</code> is in the range
<code>&#92;u0800</code> through <code>uffff</code>, then it is
represented by three bytes, to be written in the order shown:

<p> <pre><code>
(byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12)))
(byte)(0x80 | (0x3f &amp; (c &gt;&gt; 6)))
(byte)(0x80 | (0x3f &amp; c))
</code></pre>

<p> First, the total number of bytes needed to represent all
the characters of <code>s</code> is calculated. If this number
is larger than <code>65535</code>, then a
<code>UTFDataFormatException</code> is thrown. Otherwise, this
length is written to the output stream in exactly the manner of
the <code>writeShort</code> method; after this, the one-, two-,
or three-byte representation of each character in the string
<code>s</code> is written.

<p> The current byte order setting is ignored.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

<p><strong>Note:</strong> This method should not be used in
the  implementation of image formats that use standard UTF-8,
because  the modified UTF-8 used here is incompatible with
standard UTF-8.

@param s a <code>String</code> containing the value to be
written.

@exception NullPointerException if <code>s</code> is
<code>null</code>.
@exception java.io.UTFDataFormatException if the modified UTF-8
representation of <code>s</code> requires more than 65536 bytes.
@exception IOException if an I/O error occurs.
"
      end

      operation 1851522 "writeShorts"
	public explicit_return_type "void"
	nparams 3
	  param inout name "s" explicit_type "short"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of shorts to the stream at the current
position.  If <code>len</code> is 0, nothing is written.
The short <code>s[off]</code> is written first, then the short
<code>s[off + 1]</code>, and so on.  The byte order of the
stream is used to determine the order in which the individual
bytes are written.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param s an array of <code>short</code>s to be written.
@param off the start offset in the data.
@param len the number of <code>short</code>s to write.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>s.length</code>.
@exception NullPointerException if <code>s</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1851650 "writeChars"
	public explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of chars to the stream at the current
position.  If <code>len</code> is 0, nothing is written.
The char <code>c[off]</code> is written first, then the char
<code>c[off + 1]</code>, and so on.  The byte order of the
stream is used to determine the order in which the individual
bytes are written.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param c an array of <code>char</code>s to be written.
@param off the start offset in the data.
@param len the number of <code>char</code>s to write.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>c.length</code>.
@exception NullPointerException if <code>c</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1851778 "writeInts"
	public explicit_return_type "void"
	nparams 3
	  param inout name "i" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of ints to the stream at the current
position.  If <code>len</code> is 0, nothing is written.
The int <code>i[off]</code> is written first, then the int
<code>i[off + 1]</code>, and so on.  The byte order of the
stream is used to determine the order in which the individual
bytes are written.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param i an array of <code>int</code>s to be written.
@param off the start offset in the data.
@param len the number of <code>int</code>s to write.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>i.length</code>.
@exception NullPointerException if <code>i</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1851906 "writeLongs"
	public explicit_return_type "void"
	nparams 3
	  param inout name "l" explicit_type "long"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of longs to the stream at the current
position.  If <code>len</code> is 0, nothing is written.
The long <code>l[off]</code> is written first, then the long
<code>l[off + 1]</code>, and so on.  The byte order of the
stream is used to determine the order in which the individual
bytes are written.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param l an array of <code>long</code>s to be written.
@param off the start offset in the data.
@param len the number of <code>long</code>s to write.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>l.length</code>.
@exception NullPointerException if <code>l</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1852034 "writeFloats"
	public explicit_return_type "void"
	nparams 3
	  param inout name "f" explicit_type "float"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of floats to the stream at the current
position.  If <code>len</code> is 0, nothing is written.
The float <code>f[off]</code> is written first, then the float
<code>f[off + 1]</code>, and so on.  The byte order of the
stream is used to determine the order in which the individual
bytes are written.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param f an array of <code>float</code>s to be written.
@param off the start offset in the data.
@param len the number of <code>float</code>s to write.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>f.length</code>.
@exception NullPointerException if <code>f</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1852162 "writeDoubles"
	public explicit_return_type "void"
	nparams 3
	  param inout name "d" explicit_type "double"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of doubles to the stream at the current
position.  If <code>len</code> is 0, nothing is written.
The double <code>d[off]</code> is written first, then the double
<code>d[off + 1]</code>, and so on.  The byte order of the
stream is used to determine the order in which the individual
bytes are written.

<p> If the bit offset within the stream is non-zero, the
remainder of the current byte is padded with 0s
and written out first.  The bit offset will be 0 after the
write.

@param d an array of <code>doubles</code>s to be written.
@param off the start offset in the data.
@param len the number of <code>double</code>s to write.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>d.length</code>.
@exception NullPointerException if <code>d</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1852290 "writeBit"
	public explicit_return_type "void"
	nparams 1
	  param in name "bit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single bit, given by the least significant bit of the
argument, to the stream at the current bit offset within the
current byte position.  The upper 31 bits of the argument are
ignored.  The given bit replaces the previous bit at that
position.  The bit offset is advanced by one and reduced modulo
8.

<p> If any bits of a particular byte have never been set
at the time the byte is flushed to the destination, those
bits will be set to 0 automatically.

@param bit an <code>int</code> whose least significant bit
is to be written to the stream.

@exception IOException if an I/O error occurs.
"
      end

      operation 1852418 "writeBits"
	public explicit_return_type "void"
	nparams 2
	  param in name "bits" explicit_type "long"
	  param in name "numBits" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sequence of bits, given by the <code>numBits</code>
least significant bits of the <code>bits</code> argument in
left-to-right order, to the stream at the current bit offset
within the current byte position.  The upper <code>64 -
numBits</code> bits of the argument are ignored.  The bit
offset is advanced by <code>numBits</code> and reduced modulo
8.  Note that a bit offset of 0 always indicates the
most-significant bit of the byte, and bytes of bits are written
out in sequence as they are encountered.  Thus bit writes are
always effectively in network byte order.  The actual stream
byte order setting is ignored.

<p> Bit data may be accumulated in memory indefinitely, until
<code>flushBefore</code> is called.  At that time, all bit data
prior to the flushed position will be written.

<p> If any bits of a particular byte have never been set
at the time the byte is flushed to the destination, those
bits will be set to 0 automatically.

@param bits a <code>long</code> containing the bits to be
written, starting with the bit in position <code>numBits -
1</code> down to the least significant bit.

@param numBits an <code>int</code> between 0 and 64, inclusive.

@exception IllegalArgumentException if <code>numBits</code> is
not between 0 and 64, inclusive.
@exception IOException if an I/O error occurs.
"
      end

      operation 1852546 "flushBefore"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes all data prior to the given position to the underlying
destination, such as an <code>OutputStream</code> or
<code>File</code>.  Attempting to seek to the flushed portion
of the stream will result in an
<code>IndexOutOfBoundsException</code>.

@param pos a <code>long</code> containing the length of the
stream prefix that may be flushed to the destination.

@exception IndexOutOfBoundsException if <code>pos</code> lies
in the flushed portion of the stream or past the current stream
position.
@exception IOException if an I/O error occurs.
"
      end
    end

    class 324226 "ImageInputStreamImpl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract class implementing the <code>ImageInputStream</code> interface.
This class is designed to reduce the number of methods that must
be implemented by subclasses.

<p> In particular, this class handles most or all of the details of
byte order interpretation, buffering, mark/reset, discarding,
closing, and disposing.
"
      classrelation 548610 // <realization>
	relation 548610 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 548610 // <realization>
	  b parent class_ref 314498 // ImageInputStream
      end

      classrelation 548738 // markByteStack (<unidirectional association>)
	relation 548738 --->
	  a role_name "markByteStack" init_value " new Stack()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548738 // markByteStack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      classrelation 548866 // markBitStack (<unidirectional association>)
	relation 548866 --->
	  a role_name "markBitStack" init_value " new Stack()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548866 // markBitStack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      attribute 380546 "isClosed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 380674 "BYTE_BUF_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Length of the buffer used for readFully(type[], int, int)
"
      end

      attribute 380802 "byteBuf"
	package explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[BYTE_BUF_LENGTH]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Byte buffer used for readFully(type[], int, int).  Note that this
array is also used for bulk reads in readShort(), readInt(), etc, so
it should be large enough to hold a primitive value (i.e. >= 8 bytes).
Also note that this array is package protected, so that it can be
used by ImageOutputStreamImpl in a similar manner.

"
      end

      classrelation 548994 // byteOrder (<unidirectional association>)
	relation 548994 --->
	  a role_name "byteOrder" init_value " ByteOrder.BIG_ENDIAN" protected
	    comment "
The byte order of the stream as an instance of the enumeration
class <code>java.nio.ByteOrder</code>, where
<code>ByteOrder.BIG_ENDIAN</code> indicates network byte order
and <code>ByteOrder.LITTLE_ENDIAN</code> indicates the reverse
order.  By default, the value is
<code>ByteOrder.BIG_ENDIAN</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548994 // byteOrder (<unidirectional association>)
	  b parent class_ref 324354 // ByteOrder
      end

      attribute 380930 "streamPos"
	protected explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The current read position within the stream.  Subclasses are
responsible for keeping this value current from any method they
override that alters the read position.

"
      end

      attribute 381058 "bitOffset"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The current bit offset within the stream.  Subclasses are
responsible for keeping this value current from any method they
override that alters the bit offset.

"
      end

      attribute 381186 "flushedPos"
	protected explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The position prior to which data may be discarded.  Seeking
to a smaller position is not allowed.  <code>flushedPos</code>
will always be {@literal >= 0}.

"
      end

      operation 1756546 "ImageInputStreamImpl"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageInputStreamImpl</code>.
"
      end

      operation 1756674 "checkClosed"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an <code>IOException</code> if the stream has been closed.
Subclasses may call this method from any of their methods that
require the stream not to be closed.

@exception IOException if the stream is closed.
"
      end

      operation 1756802 "setByteOrder"
	public explicit_return_type "void"
	nparams 1
	  param inout name "byteOrder" type class_ref 324354 // ByteOrder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1756930 "getByteOrder"
	public return_type class_ref 324354 // ByteOrder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757058 "read"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single byte from the stream and returns it as an
<code>int</code> between 0 and 255.  If EOF is reached,
<code>-1</code> is returned.

<p> Subclasses must provide an implementation for this method.
The subclass implementation should update the stream position
before exiting.

<p> The bit offset within the stream must be reset to zero before
the read occurs.

@return the value of the next byte in the stream, or <code>-1</code>
if EOF is reached.

@exception IOException if the stream has been closed.
"
      end

      operation 1757186 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method that calls <code>read(b, 0, b.length)</code>.

<p> The bit offset within the stream is reset to zero before
the read occurs.

@return the number of bytes actually read, or <code>-1</code>
to indicate EOF.

@exception NullPointerException if <code>b</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1757314 "read"
	abstract public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes from the stream, and stores
them into <code>b</code> starting at index <code>off</code>.
If no bytes can be read because the end of the stream has been
reached, <code>-1</code> is returned.

<p> The bit offset within the stream must be reset to zero before
the read occurs.

<p> Subclasses must provide an implementation for this method.
The subclass implementation should update the stream position
before exiting.

@param b an array of bytes to be written to.
@param off the starting position within <code>b</code> to write to.
@param len the maximum number of bytes to read.

@return the number of bytes actually read, or <code>-1</code>
to indicate EOF.

@exception IndexOutOfBoundsException if <code>off</code> is
negative, <code>len</code> is negative, or <code>off +
len</code> is greater than <code>b.length</code>.
@exception NullPointerException if <code>b</code> is
<code>null</code>.
@exception IOException if an I/O error occurs.
"
      end

      operation 1757442 "readBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "buf" type class_ref 324482 // IIOByteBuffer
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757570 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757698 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757826 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757954 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758082 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758210 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758338 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758466 "readUnsignedInt"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758594 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758722 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758850 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758978 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759106 "readUTF"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759234 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759362 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759490 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "s" explicit_type "short"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759618 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759746 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "i" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759874 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "l" explicit_type "long"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760002 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "f" explicit_type "float"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760130 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "d" explicit_type "double"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760258 "toShorts"
	private explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "s" explicit_type "short"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760386 "toChars"
	private explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "c" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760514 "toInts"
	private explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "i" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760642 "toLongs"
	private explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "l" explicit_type "long"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760770 "toFloats"
	private explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "f" explicit_type "float"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760898 "toDoubles"
	private explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "d" explicit_type "double"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1761026 "getStreamPosition"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1761154 "getBitOffset"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1761282 "setBitOffset"
	public explicit_return_type "void"
	nparams 1
	  param in name "bitOffset" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1761410 "readBit"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1761538 "readBits"
	public explicit_return_type "long"
	nparams 1
	  param in name "numBits" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1761666 "length"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>-1L</code> to indicate that the stream has unknown
length.  Subclasses must override this method to provide actual
length information.

@return -1L to indicate unknown length.
"
      end

      operation 1761794 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Advances the current stream position by calling
<code>seek(getStreamPosition() + n)</code>.

<p> The bit offset is reset to zero.

@param n the number of bytes to seek forward.

@return an <code>int</code> representing the number of bytes
skipped.

@exception IOException if <code>getStreamPosition</code>
throws an <code>IOException</code> when computing either
the starting or ending position.
"
      end

      operation 1761922 "skipBytes"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Advances the current stream position by calling
<code>seek(getStreamPosition() + n)</code>.

<p> The bit offset is reset to zero.

@param n the number of bytes to seek forward.

@return a <code>long</code> representing the number of bytes
skipped.

@exception IOException if <code>getStreamPosition</code>
throws an <code>IOException</code> when computing either
the starting or ending position.
"
      end

      operation 1762050 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1762178 "mark"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes the current stream position onto a stack of marked
positions.
"
      end

      operation 1762306 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the current stream byte and bit positions from the stack
of marked positions.

<p> An <code>IOException</code> will be thrown if the previous
marked position lies in the discarded portion of the stream.

@exception IOException if an I/O error occurs.
"
      end

      operation 1762434 "flushBefore"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1762562 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1762690 "getFlushedPosition"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1762818 "isCached"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation returns false.  Subclasses should
override this if they cache data.
"
      end

      operation 1762946 "isCachedMemory"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation returns false.  Subclasses should
override this if they cache data in main memory.
"
      end

      operation 1763074 "isCachedFile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation returns false.  Subclasses should
override this if they cache data in a temporary file.
"
      end

      operation 1763202 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1763330 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finalizes this object prior to garbage collection.  The
<code>close</code> method is called to close any open input
source.  This method should not be called from application
code.

@exception Throwable if an error occurs during superclass
finalization.
"
      end
    end

    class 324482 "IIOByteBuffer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class representing a mutable reference to an array of bytes and
an offset and length within that array.  <code>IIOByteBuffer</code>
is used by <code>ImageInputStream</code> to supply a sequence of bytes
to the caller, possibly with fewer copies than using the conventional
<code>read</code> methods that take a user-supplied byte array.

<p> The byte array referenced by an <code>IIOByteBuffer</code> will
generally be part of an internal data structure belonging to an
<code>ImageReader</code> implementation; its contents should be
considered read-only and must not be modified.

"
      attribute 2251266 "data"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2251394 "offset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2251522 "length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9690370 "IIOByteBuffer"
	public explicit_return_type ""
	nparams 3
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IIOByteBuffer</code> that references a
given byte array, offset, and length.

@param data a byte array.
@param offset an int offset within the array.
@param length an int specifying the length of the data of
interest within byte array, in bytes.
"
      end

      operation 9690498 "getData"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the byte array.  The returned value should
be treated as read-only, and only the portion specified by the
values of <code>getOffset</code> and <code>getLength</code> should
be used.

@return a byte array reference.

@see #getOffset
@see #getLength
@see #setData
"
      end

      operation 9690626 "setData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the array reference that will be returned by subsequent calls
to the <code>getData</code> method.

@param data a byte array reference containing the new data value.

@see #getData
"
      end

      operation 9690754 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offset within the byte array returned by
<code>getData</code> at which the data of interest start.

@return an int offset.

@see #getData
@see #getLength
@see #setOffset
"
      end

      operation 9690882 "setOffset"
	public explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value that will be returned by subsequent calls
to the <code>getOffset</code> method.

@param offset an int containing the new offset value.

@see #getOffset
"
      end

      operation 9691010 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the data of interest within the byte
array returned by <code>getData</code>.

@return an int length.

@see #getData
@see #getOffset
@see #setLength
"
      end

      operation 9691138 "setLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value that will be returned by subsequent calls
to the <code>getLength</code> method.

@param length an int containing the new length value.

@see #getLength
"
      end
    end

    class 334466 "ImageOutputStreamImpl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract class implementing the <code>ImageOutputStream</code> interface.
This class is designed to reduce the number of methods that must
be implemented by subclasses.

"
      classrelation 574850 // <generalisation>
	relation 574850 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 574850 // <generalisation>
	  b parent class_ref 324226 // ImageInputStreamImpl
      end

      classrelation 575234 // <realization>
	relation 575234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 575234 // <realization>
	  b parent class_ref 316930 // ImageOutputStream
      end

      operation 1852674 "ImageOutputStreamImpl"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageOutputStreamImpl</code>.
"
      end

      operation 1852802 "write"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1852930 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853058 "write"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853186 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853314 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853442 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853570 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853698 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853826 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1853954 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854082 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854210 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854338 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854466 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854594 "writeShorts"
	public explicit_return_type "void"
	nparams 3
	  param inout name "s" explicit_type "short"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854722 "writeChars"
	public explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854850 "writeInts"
	public explicit_return_type "void"
	nparams 3
	  param inout name "i" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1854978 "writeLongs"
	public explicit_return_type "void"
	nparams 3
	  param inout name "l" explicit_type "long"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1855106 "writeFloats"
	public explicit_return_type "void"
	nparams 3
	  param inout name "f" explicit_type "float"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1855234 "writeDoubles"
	public explicit_return_type "void"
	nparams 3
	  param inout name "d" explicit_type "double"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1855362 "writeBit"
	public explicit_return_type "void"
	nparams 1
	  param in name "bit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1855490 "writeBits"
	public explicit_return_type "void"
	nparams 2
	  param in name "bits" explicit_type "long"
	  param in name "numBits" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1855618 "flushBits"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the bit offset is non-zero, forces the remaining bits
in the current byte to 0 and advances the stream position
by one.  This method should be called by subclasses at the
beginning of the <code>write(int)</code> and
<code>write(byte[], int, int)</code> methods.

@exception IOException if an I/O error occurs.
"
      end
    end

    class 1178114 "FileCacheImageInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An implementation of <code>ImageInputStream</code> that gets its
input from a regular <code>InputStream</code>.  A file is used to
cache previously read data.

"
      classrelation 3765890 // <generalisation>
	relation 3765890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3765890 // <generalisation>
	  b parent class_ref 324226 // ImageInputStreamImpl
      end

      classrelation 3766018 // stream (<unidirectional association>)
	relation 3766018 --->
	  a role_name "stream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3766018 // stream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 3766146 // cacheFile (<unidirectional association>)
	relation 3766146 --->
	  a role_name "cacheFile" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3766146 // cacheFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      classrelation 3766274 // cache (<unidirectional association>)
	relation 3766274 --->
	  a role_name "cache" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3766274 // cache (<unidirectional association>)
	  b parent class_ref 927362 // RandomAccessFile
      end

      attribute 2250498 "BUFFER_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2250626 "buf"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[BUFFER_LENGTH]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2250754 "length"
	private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2250882 "foundEOF"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3766402 // disposerReferent (<unidirectional association>)
	relation 3766402 --->
	  a role_name "disposerReferent" const_relation private
	    comment " The referent to be registered with the Disposer. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3766402 // disposerReferent (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 2251010 "disposerRecord"
	const_attribute private explicit_type "DisposerRecord"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The DisposerRecord that closes the underlying cache. 
"
      end

      classrelation 3766530 // closeAction (<unidirectional association>)
	relation 3766530 --->
	  a role_name "closeAction" const_relation private
	    comment " The CloseAction that closes the stream in
 the StreamCloser's shutdown hook                     
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3766530 // closeAction (<unidirectional association>)
	  b parent class_ref 337666 // CloseAction
      end

      operation 9685122 "FileCacheImageInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "stream" type class_ref 146434 // InputStream
	  param inout name "cacheDir" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileCacheImageInputStream</code> that will read
from a given <code>InputStream</code>.

<p> A temporary file is used as a cache.  If
<code>cacheDir</code>is non-<code>null</code> and is a
directory, the file will be created there.  If it is
<code>null</code>, the system-dependent default temporary-file
directory will be used (see the documentation for
<code>File.createTempFile</code> for details).

@param stream an <code>InputStream</code> to read from.
@param cacheDir a <code>File</code> indicating where the
cache file should be created, or <code>null</code> to use the
system directory.

@exception IllegalArgumentException if <code>stream</code> is
<code>null</code>.
@exception IllegalArgumentException if <code>cacheDir</code> is
non-<code>null</code> but is not a directory.
@exception IOException if a cache file cannot be created.
"
      end

      operation 9685250 "readUntil"
	private explicit_return_type "long"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that at least <code>pos</code> bytes are cached,
or the end of the source is reached.  The return value
is equal to the smaller of <code>pos</code> and the
length of the source file.
"
      end

      operation 9685378 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9685506 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9685634 "isCached"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageInputStream</code> caches data in order to allow
seeking backwards.

@return <code>true</code>.

@see #isCachedMemory
@see #isCachedFile
"
      end

      operation 9685762 "isCachedFile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageInputStream</code> maintains a file cache.

@return <code>true</code>.

@see #isCached
@see #isCachedMemory
"
      end

      operation 9685890 "isCachedMemory"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>false</code> since this
<code>ImageInputStream</code> does not maintain a main memory
cache.

@return <code>false</code>.

@see #isCached
@see #isCachedFile
"
      end

      operation 9686018 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this <code>FileCacheImageInputStream</code>, closing
and removing the cache file.  The source <code>InputStream</code>
is not closed.

@exception IOException if an error occurs.
"
      end

      operation 9686146 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      class 1178242 "StreamDisposerRecord"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3766786 // cacheFile (<unidirectional association>)
	  relation 3766786 --->
	    a role_name "cacheFile" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3766786 // cacheFile (<unidirectional association>)
	    b parent class_ref 131970 // File
	end

	classrelation 3766914 // cache (<unidirectional association>)
	  relation 3766914 --->
	    a role_name "cache" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3766914 // cache (<unidirectional association>)
	    b parent class_ref 927362 // RandomAccessFile
	end

	operation 9686274 "StreamDisposerRecord"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "cacheFile" type class_ref 131970 // File
	    param inout name "cache" type class_ref 927362 // RandomAccessFile
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9686402 "dispose"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1178370 "FileCacheImageOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An implementation of <code>ImageOutputStream</code> that writes its
output to a regular <code>OutputStream</code>.  A file is used to
cache data until it is flushed to the output stream.

"
      classrelation 3767042 // <generalisation>
	relation 3767042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3767042 // <generalisation>
	  b parent class_ref 334466 // ImageOutputStreamImpl
      end

      classrelation 3767170 // stream (<unidirectional association>)
	relation 3767170 --->
	  a role_name "stream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3767170 // stream (<unidirectional association>)
	  b parent class_ref 151298 // OutputStream
      end

      classrelation 3767298 // cacheFile (<unidirectional association>)
	relation 3767298 --->
	  a role_name "cacheFile" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3767298 // cacheFile (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      classrelation 3767426 // cache (<unidirectional association>)
	relation 3767426 --->
	  a role_name "cache" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3767426 // cache (<unidirectional association>)
	  b parent class_ref 927362 // RandomAccessFile
      end

      attribute 2251138 "maxStreamPos"
	private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pos after last (rightmost) byte written
"
      end

      classrelation 3767554 // closeAction (<unidirectional association>)
	relation 3767554 --->
	  a role_name "closeAction" const_relation private
	    comment " The CloseAction that closes the stream in
 the StreamCloser's shutdown hook                     
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3767554 // closeAction (<unidirectional association>)
	  b parent class_ref 337666 // CloseAction
      end

      operation 9686530 "FileCacheImageOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "stream" type class_ref 151298 // OutputStream
	  param inout name "cacheDir" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileCacheImageOutputStream</code> that will write
to a given <code>outputStream</code>.

<p> A temporary file is used as a cache.  If
<code>cacheDir</code>is non-<code>null</code> and is a
directory, the file will be created there.  If it is
<code>null</code>, the system-dependent default temporary-file
directory will be used (see the documentation for
<code>File.createTempFile</code> for details).

@param stream an <code>OutputStream</code> to write to.
@param cacheDir a <code>File</code> indicating where the
cache file should be created, or <code>null</code> to use the
system directory.

@exception IllegalArgumentException if <code>stream</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>cacheDir</code> is
non-<code>null</code> but is not a directory.
@exception IOException if a cache file cannot be created.
"
      end

      operation 9686658 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9686786 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9686914 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9687042 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9687170 "length"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9687298 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current stream position and resets the bit offset to
0.  It is legal to seek past the end of the file; an
<code>EOFException</code> will be thrown only if a read is
performed.  The file length will not be increased until a write
is performed.

@exception IndexOutOfBoundsException if <code>pos</code> is smaller
than the flushed position.
@exception IOException if any other I/O error occurs.
"
      end

      operation 9687426 "isCached"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageOutputStream</code> caches data in order to allow
seeking backwards.

@return <code>true</code>.

@see #isCachedMemory
@see #isCachedFile
"
      end

      operation 9687554 "isCachedFile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageOutputStream</code> maintains a file cache.

@return <code>true</code>.

@see #isCached
@see #isCachedMemory
"
      end

      operation 9687682 "isCachedMemory"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>false</code> since this
<code>ImageOutputStream</code> does not maintain a main memory
cache.

@return <code>false</code>.

@see #isCached
@see #isCachedFile
"
      end

      operation 9687810 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this <code>FileCacheImageOutputStream</code>.  All
pending data is flushed to the output, and the cache file
is closed and removed.  The destination <code>OutputStream</code>
is not closed.

@exception IOException if an error occurs.
"
      end

      operation 9687938 "flushBefore"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1178498 "FileImageInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An implementation of <code>ImageInputStream</code> that gets its
input from a <code>File</code> or <code>RandomAccessFile</code>.
The file contents are assumed to be stable during the lifetime of
the object.

"
      classrelation 3767682 // <generalisation>
	relation 3767682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3767682 // <generalisation>
	  b parent class_ref 324226 // ImageInputStreamImpl
      end

      classrelation 3767810 // raf (<unidirectional association>)
	relation 3767810 --->
	  a role_name "raf" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3767810 // raf (<unidirectional association>)
	  b parent class_ref 927362 // RandomAccessFile
      end

      classrelation 3767938 // disposerReferent (<unidirectional association>)
	relation 3767938 --->
	  a role_name "disposerReferent" const_relation private
	    comment " The referent to be registered with the Disposer. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3767938 // disposerReferent (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3768066 // disposerRecord (<unidirectional association>)
	relation 3768066 --->
	  a role_name "disposerRecord" const_relation private
	    comment " The DisposerRecord that closes the underlying RandomAccessFile. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3768066 // disposerRecord (<unidirectional association>)
	  b parent class_ref 337410 // CloseableDisposerRecord
      end

      operation 9688066 "FileImageInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	nexceptions 2
	  exception class_ref 580354 // FileNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileImageInputStream</code> that will read
from a given <code>File</code>.

<p> The file contents must not change between the time this
object is constructed and the time of the last call to a read
method.

@param f a <code>File</code> to read from.

@exception IllegalArgumentException if <code>f</code> is
<code>null</code>.
@exception SecurityException if a security manager exists
and does not allow read access to the file.
@exception FileNotFoundException if <code>f</code> is a
directory or cannot be opened for reading for any other reason.
@exception IOException if an I/O error occurs.
"
      end

      operation 9688194 "FileImageInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "raf" type class_ref 927362 // RandomAccessFile
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileImageInputStream</code> that will read
from a given <code>RandomAccessFile</code>.

<p> The file contents must not change between the time this
object is constructed and the time of the last call to a read
method.

@param raf a <code>RandomAccessFile</code> to read from.

@exception IllegalArgumentException if <code>raf</code> is
<code>null</code>.
"
      end

      operation 9688322 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9688450 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9688578 "length"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the underlying file, or <code>-1</code>
if it is unknown.

@return the file length as a <code>long</code>, or
<code>-1</code>.
"
      end

      operation 9688706 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9688834 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9688962 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end
    end

    class 1178626 "FileImageOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An implementation of <code>ImageOutputStream</code> that writes its
output directly to a <code>File</code> or
<code>RandomAccessFile</code>.

"
      classrelation 3768194 // <generalisation>
	relation 3768194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3768194 // <generalisation>
	  b parent class_ref 334466 // ImageOutputStreamImpl
      end

      classrelation 3768322 // raf (<unidirectional association>)
	relation 3768322 --->
	  a role_name "raf" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3768322 // raf (<unidirectional association>)
	  b parent class_ref 927362 // RandomAccessFile
      end

      classrelation 3768450 // disposerReferent (<unidirectional association>)
	relation 3768450 --->
	  a role_name "disposerReferent" const_relation private
	    comment " The referent to be registered with the Disposer. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3768450 // disposerReferent (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3768578 // disposerRecord (<unidirectional association>)
	relation 3768578 --->
	  a role_name "disposerRecord" const_relation private
	    comment " The DisposerRecord that closes the underlying RandomAccessFile. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3768578 // disposerRecord (<unidirectional association>)
	  b parent class_ref 337410 // CloseableDisposerRecord
      end

      operation 9689090 "FileImageOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	nexceptions 2
	  exception class_ref 580354 // FileNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileImageOutputStream</code> that will write
to a given <code>File</code>.

@param f a <code>File</code> to write to.

@exception IllegalArgumentException if <code>f</code> is
<code>null</code>.
@exception SecurityException if a security manager exists
and does not allow write access to the file.
@exception FileNotFoundException if <code>f</code> does not denote
a regular file or it cannot be opened for reading and writing for any
other reason.
@exception IOException if an I/O error occurs.
"
      end

      operation 9689218 "FileImageOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "raf" type class_ref 927362 // RandomAccessFile
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileImageOutputStream</code> that will write
to a given <code>RandomAccessFile</code>.

@param raf a <code>RandomAccessFile</code> to write to.

@exception IllegalArgumentException if <code>raf</code> is
<code>null</code>.
"
      end

      operation 9689346 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9689474 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9689602 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9689730 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9689858 "length"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9689986 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current stream position and resets the bit offset to
0.  It is legal to seeking past the end of the file; an
<code>EOFException</code> will be thrown only if a read is
performed.  The file length will not be increased until a write
is performed.

@exception IndexOutOfBoundsException if <code>pos</code> is smaller
than the flushed position.
@exception IOException if any other I/O error occurs.
"
      end

      operation 9690114 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9690242 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end
    end

    class 1178754 "MemoryCache"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Package-visible class consolidating common code for
<code>MemoryCacheImageInputStream</code> and
<code>MemoryCacheImageOutputStream</code>.
This class keeps an <code>ArrayList</code> of 8K blocks,
loaded sequentially.  Blocks may only be disposed of
from the index 0 forward.  As blocks are freed, the
corresponding entries in the array list are set to
<code>null</code>, but no compacting is performed.
This allows the index for each block to never change,
and the length of the cache is always the same as the
total amount of data ever cached.  Cached data is
therefore always contiguous from the point of last
disposal to the current length.

<p> The total number of blocks resident in the cache must not
exceed <code>Integer.MAX_VALUE</code>.  In practice, the limit of
available memory will be exceeded long before this becomes an
issue, since a full cache would contain 8192*2^31 = 16 terabytes of
data.

A <code>MemoryCache</code> may be reused after a call
to <code>reset()</code>.
"
      attribute 2251650 "BUFFER_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3768706 // cache (<unidirectional association>)
	relation 3768706 --->
	  a role_name "cache" init_value " new ArrayList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3768706 // cache (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      attribute 2251778 "cacheStart"
	private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2251906 "length"
	private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The largest position ever written to the cache.

"
      end

      operation 9691266 "getCacheBlock"
	private explicit_return_type "byte"
	nparams 1
	  param in name "blockNum" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9691394 "loadFromStream"
	public explicit_return_type "long"
	nparams 2
	  param inout name "stream" type class_ref 146434 // InputStream
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that at least <code>pos</code> bytes are cached,
or the end of the source is reached.  The return value
is equal to the smaller of <code>pos</code> and the
length of the source.
"
      end

      operation 9691522 "writeToStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "stream" type class_ref 151298 // OutputStream
	  param in name "pos" explicit_type "long"
	  param in name "len" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes out a portion of the cache to an <code>OutputStream</code>.
This method preserves no state about the output stream, and does
not dispose of any blocks containing bytes written.  To dispose
blocks, use {@link #disposeBefore <code>disposeBefore()</code>}.

@exception IndexOutOfBoundsException if any portion of
the requested data is not in the cache (including if <code>pos</code>
is in a block already disposed), or if either <code>pos</code> or
<code>len</code> is < 0.
"
      end

      operation 9691650 "pad"
	private explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that there is space to write a byte at the given position.
"
      end

      operation 9691778 "write"
	public explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overwrites and/or appends the cache from a byte array.
The length of the cache will be extended as needed to hold
the incoming data.

@param b an array of bytes containing data to be written.
@param off the starting offset withing the data array.
@param len the number of bytes to be written.
@param pos the cache position at which to begin writing.

@exception NullPointerException if <code>b</code> is <code>null</code>.
@exception IndexOutOfBoundsException if <code>off</code>,
<code>len</code>, or <code>pos</code> are negative,
or if <code>off+len > b.length</code>.
"
      end

      operation 9691906 "write"
	public explicit_return_type "void"
	nparams 2
	  param in name "b" explicit_type "int"
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overwrites or appends a single byte to the cache.
The length of the cache will be extended as needed to hold
the incoming data.

@param b an <code>int</code> whose 8 least significant bits
will be written.
@param pos the cache position at which to begin writing.

@exception IndexOutOfBoundsException if <code>pos</code> is negative.
"
      end

      operation 9692034 "getLength"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total length of data that has been cached,
regardless of whether any early blocks have been disposed.
This value will only ever increase.
"
      end

      operation 9692162 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the single byte at the given position, as an
<code>int</code>.  Returns -1 if this position has
not been cached or has been disposed.
"
      end

      operation 9692290 "read"
	public explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy <code>len</code> bytes from the cache, starting
at cache position <code>pos</code>, into the array
<code>b</code> at offset <code>off</code>.

@exception NullPointerException if b is <code>null</code>
@exception IndexOutOfBoundsException if <code>off</code>,
<code>len</code> or <code>pos</code> are negative or if
<code>off + len > b.length</code> or if any portion of the
requested data is not in the cache (including if
<code>pos</code> is in a block that has already been disposed).
"
      end

      operation 9692418 "disposeBefore"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Free the blocks up to the position <code>pos</code>.
The byte at <code>pos</code> remains available.

@exception IndexOutOfBoundsException if <code>pos</code>
is in a block that has already been disposed.
"
      end

      operation 9692546 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Erase the entire cache contents and reset the length to 0.
The cache object may subsequently be reused as though it had just
been allocated.
"
      end
    end

    class 1178882 "MemoryCacheImageInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An implementation of <code>ImageInputStream</code> that gets its
input from a regular <code>InputStream</code>.  A memory buffer is
used to cache at least the data between the discard position and
the current read position.

<p> In general, it is preferable to use a
<code>FileCacheImageInputStream</code> when reading from a regular
<code>InputStream</code>.  This class is provided for cases where
it is not possible to create a writable temporary file.

"
      classrelation 3768834 // <generalisation>
	relation 3768834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3768834 // <generalisation>
	  b parent class_ref 324226 // ImageInputStreamImpl
      end

      classrelation 3768962 // stream (<unidirectional association>)
	relation 3768962 --->
	  a role_name "stream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3768962 // stream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 3769090 // cache (<unidirectional association>)
	relation 3769090 --->
	  a role_name "cache" init_value " new MemoryCache()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3769090 // cache (<unidirectional association>)
	  b parent class_ref 1178754 // MemoryCache
      end

      classrelation 3769218 // disposerReferent (<unidirectional association>)
	relation 3769218 --->
	  a role_name "disposerReferent" const_relation private
	    comment " The referent to be registered with the Disposer. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3769218 // disposerReferent (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 2252034 "disposerRecord"
	const_attribute private explicit_type "DisposerRecord"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The DisposerRecord that resets the underlying MemoryCache. 
"
      end

      operation 9692674 "MemoryCacheImageInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "stream" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MemoryCacheImageInputStream</code> that will read
from a given <code>InputStream</code>.

@param stream an <code>InputStream</code> to read from.

@exception IllegalArgumentException if <code>stream</code> is
<code>null</code>.
"
      end

      operation 9692802 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9692930 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9693058 "flushBefore"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9693186 "isCached"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageInputStream</code> caches data in order to allow
seeking backwards.

@return <code>true</code>.

@see #isCachedMemory
@see #isCachedFile
"
      end

      operation 9693314 "isCachedFile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>false</code> since this
<code>ImageInputStream</code> does not maintain a file cache.

@return <code>false</code>.

@see #isCached
@see #isCachedMemory
"
      end

      operation 9693442 "isCachedMemory"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageInputStream</code> maintains a main memory cache.

@return <code>true</code>.

@see #isCached
@see #isCachedFile
"
      end

      operation 9693570 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this <code>MemoryCacheImageInputStream</code>, freeing
the cache.  The source <code>InputStream</code> is not closed.
"
      end

      operation 9693698 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      class 1179010 "StreamDisposerRecord"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3769474 // cache (<unidirectional association>)
	  relation 3769474 --->
	    a role_name "cache" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3769474 // cache (<unidirectional association>)
	    b parent class_ref 1178754 // MemoryCache
	end

	operation 9693826 "StreamDisposerRecord"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "cache" type class_ref 1178754 // MemoryCache
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9693954 "dispose"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1179138 "MemoryCacheImageOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An implementation of <code>ImageOutputStream</code> that writes its
output to a regular <code>OutputStream</code>.  A memory buffer is
used to cache at least the data between the discard position and
the current write position.  The only constructor takes an
<code>OutputStream</code>, so this class may not be used for
read/modify/write operations.  Reading can occur only on parts of
the stream that have already been written to the cache and not
yet flushed.

"
      classrelation 3769602 // <generalisation>
	relation 3769602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3769602 // <generalisation>
	  b parent class_ref 334466 // ImageOutputStreamImpl
      end

      classrelation 3769730 // stream (<unidirectional association>)
	relation 3769730 --->
	  a role_name "stream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3769730 // stream (<unidirectional association>)
	  b parent class_ref 151298 // OutputStream
      end

      classrelation 3769858 // cache (<unidirectional association>)
	relation 3769858 --->
	  a role_name "cache" init_value " new MemoryCache()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3769858 // cache (<unidirectional association>)
	  b parent class_ref 1178754 // MemoryCache
      end

      operation 9694082 "MemoryCacheImageOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "stream" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MemoryCacheImageOutputStream</code> that will write
to a given <code>OutputStream</code>.

@param stream an <code>OutputStream</code> to write to.

@exception IllegalArgumentException if <code>stream</code> is
<code>null</code>.
"
      end

      operation 9694210 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9694338 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9694466 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9694594 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9694722 "length"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9694850 "isCached"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageOutputStream</code> caches data in order to allow
seeking backwards.

@return <code>true</code>.

@see #isCachedMemory
@see #isCachedFile
"
      end

      operation 9694978 "isCachedFile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>false</code> since this
<code>ImageOutputStream</code> does not maintain a file cache.

@return <code>false</code>.

@see #isCached
@see #isCachedMemory
"
      end

      operation 9695106 "isCachedMemory"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> since this
<code>ImageOutputStream</code> maintains a main memory cache.

@return <code>true</code>.

@see #isCached
@see #isCachedFile
"
      end

      operation 9695234 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this <code>MemoryCacheImageOutputStream</code>.  All
pending data is flushed to the output, and the cache
is released.  The destination <code>OutputStream</code>
is not closed.
"
      end

      operation 9695362 "flushBefore"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 140418 "stream"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 261762 "ImageInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import java.io.DataInput;
import java.io.IOException;
import java.nio.ByteOrder;
${definition}"
      associated_elems
	class_ref 314498 // ImageInputStream
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 261890 "ImageInputStreamImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.nio.ByteOrder;
import java.util.Stack;
import javax.imageio.IIOException;
${definition}"
      associated_elems
	class_ref 324226 // ImageInputStreamImpl
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 267522 "ImageOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataOutput;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 316930 // ImageOutputStream
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 267650 "ImageOutputStreamImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.UTFDataFormatException;
import java.nio.ByteOrder;
${definition}"
      associated_elems
	class_ref 334466 // ImageOutputStreamImpl
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 839426 "FileCacheImageInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.InputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import com.sun.imageio.stream.StreamCloser;
import com.sun.imageio.stream.StreamFinalizer;
import sun.java2d.Disposer;
import sun.java2d.DisposerRecord;
${definition}"
      associated_elems
	class_ref 1178114 // FileCacheImageInputStream
      end
      comment "Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 839554 "FileCacheImageOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import com.sun.imageio.stream.StreamCloser;
${definition}"
      associated_elems
	class_ref 1178370 // FileCacheImageOutputStream
      end
      comment "Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 839682 "FileImageInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import com.sun.imageio.stream.CloseableDisposerRecord;
import com.sun.imageio.stream.StreamFinalizer;
import sun.java2d.Disposer;
${definition}"
      associated_elems
	class_ref 1178498 // FileImageInputStream
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 839810 "FileImageOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import com.sun.imageio.stream.CloseableDisposerRecord;
import com.sun.imageio.stream.StreamFinalizer;
import sun.java2d.Disposer;
${definition}"
      associated_elems
	class_ref 1178626 // FileImageOutputStream
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 839938 "IIOByteBuffer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 324482 // IIOByteBuffer
      end
      comment "Copyright (c) 1999, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 840066 "MemoryCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1178754 // MemoryCache
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 840194 "MemoryCacheImageInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import com.sun.imageio.stream.StreamFinalizer;
import sun.java2d.Disposer;
import sun.java2d.DisposerRecord;
${definition}"
      associated_elems
	class_ref 1178882 // MemoryCacheImageInputStream
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 840322 "MemoryCacheImageOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.OutputStream;
${definition}"
      associated_elems
	class_ref 1179138 // MemoryCacheImageOutputStream
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
