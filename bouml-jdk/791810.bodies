class ToXMLSAXHandler
!!!5628034.java!!!	ToXMLSAXHandler()
        // default constructor (need to set content handler ASAP !)
        m_prefixMap = new NamespaceMappings();
        initCDATA();
!!!5628162.java!!!	getOutputFormat() : Properties
        return null;
!!!5628290.java!!!	getOutputStream() : OutputStream
        return null;
!!!5628418.java!!!	getWriter() : Writer
        return null;
!!!5628802.java!!!	setEscaping(inout escape : boolean) : boolean
        boolean oldEscapeSetting = m_escapeSetting;
        m_escapeSetting = escape;

        if (escape) {
            processingInstruction(Result.PI_ENABLE_OUTPUT_ESCAPING, "");
        } else {
            processingInstruction(Result.PI_DISABLE_OUTPUT_ESCAPING, "");
        }

        return oldEscapeSetting;
!!!5629826.java!!!	endDocument() : void

        flushPending();

        // Close output document
        m_saxHandler.endDocument();

        if (m_tracer != null)
            super.fireEndDoc();
!!!5629954.java!!!	closeStartTag() : void

        m_elemContext.m_startTagOpen = false;

        final String localName = getLocalName(m_elemContext.m_elementName);
        final String uri = getNamespaceURI(m_elemContext.m_elementName, true);

        // Now is time to send the startElement event
        if (m_needToCallStartDocument)
        {
            startDocumentInternal();
        }
        m_saxHandler.startElement(uri, localName, m_elemContext.m_elementName, m_attributes);
        // we've sent the official SAX attributes on their way,
        // now we don't need them anymore.
        m_attributes.clear();

        if(m_state != null)
          m_state.setCurrentNode(null);
!!!5630082.java!!!	closeCDATA() : void

        // Output closing bracket - "]]>"
        if (m_lexHandler != null && m_cdataTagOpen) {
            m_lexHandler.endCDATA();
        }


        // There are no longer any calls made to
        // m_lexHandler.startCDATA() without a balancing call to
        // m_lexHandler.endCDATA()
        // so we set m_cdataTagOpen to false to remember this.
        m_cdataTagOpen = false;
!!!5630210.java!!!	endElement(inout namespaceURI : String, inout localName : String, inout qName : String) : void
        // Close any open elements etc.
        flushPending();

        if (namespaceURI == null)
        {
            if (m_elemContext.m_elementURI != null)
                namespaceURI = m_elemContext.m_elementURI;
            else
                namespaceURI = getNamespaceURI(qName, true);
        }

        if (localName == null)
        {
            if (m_elemContext.m_elementLocalName != null)
                localName = m_elemContext.m_elementLocalName;
            else
                localName = getLocalName(qName);
        }

        m_saxHandler.endElement(namespaceURI, localName, qName);

        if (m_tracer != null)
            super.fireEndElem(qName);

        /* Pop all namespaces at the current element depth.
         * We are not waiting for official endPrefixMapping() calls.
         */
        m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,
            m_saxHandler);
        m_elemContext = m_elemContext.m_prev;
!!!5630338.java!!!	endPrefixMapping(inout prefix : String) : void
        /* poping all prefix mappings should have been done
         * in endElement() already
         */
         return;
!!!5630466.java!!!	ignorableWhitespace(inout arg0 : char [[]], in arg1 : int, in arg2 : int) : void
        m_saxHandler.ignorableWhitespace(arg0,arg1,arg2);
!!!5630594.java!!!	setDocumentLocator(inout arg0 : Locator) : void
        super.setDocumentLocator(arg0);
        m_saxHandler.setDocumentLocator(arg0);
!!!5630722.java!!!	skippedEntity(inout arg0 : String) : void
        m_saxHandler.skippedEntity(arg0);
!!!5630850.java!!!	startPrefixMapping(inout prefix : String, inout uri : String) : void
       startPrefixMapping(prefix, uri, true);
!!!5630978.java!!!	startPrefixMapping(inout prefix : String, inout uri : String, inout shouldFlush : boolean) : boolean

        /* Remember the mapping, and at what depth it was declared
         * This is one greater than the current depth because these
         * mappings will apply to the next depth. This is in
         * consideration that startElement() will soon be called
         */

        boolean pushed;
        int pushDepth;
        if (shouldFlush)
        {
            flushPending();
            // the prefix mapping applies to the child element (one deeper)
            pushDepth = m_elemContext.m_currentElemDepth + 1;
        }
        else
        {
            // the prefix mapping applies to the current element
            pushDepth = m_elemContext.m_currentElemDepth;
        }
        pushed = m_prefixMap.pushNamespace(prefix, uri, pushDepth);

        if (pushed)
        {
            m_saxHandler.startPrefixMapping(prefix,uri);

            if (getShouldOutputNSAttr())
            {

                      /* Brian M.: don't know if we really needto do this. The
                       * callers of this object should have injected both
                       * startPrefixMapping and the attributes.  We are
                       * just covering our butt here.
                       */
                      String name;
                    if (EMPTYSTRING.equals(prefix))
                    {
                        name = "xmlns";
                        addAttributeAlways(XMLNS_URI, name, name,"CDATA",uri, false);
                    }
                    else
                {
                        if (!EMPTYSTRING.equals(uri)) // hack for XSLTC attribset16 test
                        {                             // that maps ns1 prefix to "" URI
                            name = "xmlns:" + prefix;

                            /* for something like xmlns:abc="w3.pretend.org"
                                     *  the uri is the value, that is why we pass it in the
                                     * value, or 5th slot of addAttributeAlways()
                                   */
                            addAttributeAlways(XMLNS_URI, prefix, name,"CDATA",uri, false );
                        }
                    }
            }
        }
        return pushed;
!!!5631106.java!!!	comment(inout arg0 : char [[]], in arg1 : int, in arg2 : int) : void
        flushPending();
        if (m_lexHandler != null)
            m_lexHandler.comment(arg0, arg1, arg2);

        if (m_tracer != null)
            super.fireCommentEvent(arg0, arg1, arg2);
!!!5631234.java!!!	endCDATA() : void
        /* Normally we would do somthing with this but we ignore it.
         * The neccessary call to m_lexHandler.endCDATA() will be made
         * in flushPending().
         *
         * This is so that if we get calls like these:
         *   this.startCDATA();
         *   this.characters(chars1, off1, len1);
         *   this.endCDATA();
         *   this.startCDATA();
         *   this.characters(chars2, off2, len2);
         *   this.endCDATA();
         *
         * that we will only make these calls to the wrapped handlers:
         *
         *   m_lexHandler.startCDATA();
         *   m_saxHandler.characters(chars1, off1, len1);
         *   m_saxHandler.characters(chars1, off2, len2);
         *   m_lexHandler.endCDATA();
         *
         * We will merge adjacent CDATA blocks.
         */
!!!5631362.java!!!	endDTD() : void
        if (m_lexHandler != null)
            m_lexHandler.endDTD();
!!!5631490.java!!!	startEntity(inout arg0 : String) : void
        if (m_lexHandler != null)
            m_lexHandler.startEntity(arg0);
!!!5631618.java!!!	characters(inout chars : String) : void
        final int length = chars.length();
        if (length > m_charsBuff.length)
        {
            m_charsBuff = new char[length*2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
!!!5631746.java!!!	ToXMLSAXHandler(inout handler : ContentHandler, inout encoding : String)
        super(handler, encoding);

        initCDATA();
        // initNamespaces();
        m_prefixMap = new NamespaceMappings();
!!!5631874.java!!!	ToXMLSAXHandler(inout handler : ContentHandler, inout lex : LexicalHandler, inout encoding : String)
        super(handler, lex, encoding);

        initCDATA();
        //      initNamespaces();
        m_prefixMap = new NamespaceMappings();
!!!5632002.java!!!	startElement(inout elementNamespaceURI : String, inout elementLocalName : String, inout elementName : String) : void
        startElement(
            elementNamespaceURI,elementLocalName,elementName, null);


!!!5632130.java!!!	startElement(inout elementName : String) : void
        startElement(null, null, elementName, null);
!!!5632258.java!!!	characters(inout ch : char [[]], in off : int, in len : int) : void
        // We do the first two things in flushPending() but we don't
        // close any open CDATA calls.
        if (m_needToCallStartDocument)
        {
            startDocumentInternal();
            m_needToCallStartDocument = false;
        }

        if (m_elemContext.m_startTagOpen)
        {
            closeStartTag();
            m_elemContext.m_startTagOpen = false;
        }

        if (m_elemContext.m_isCdataSection && !m_cdataTagOpen
        && m_lexHandler != null)
        {
            m_lexHandler.startCDATA();
            // We have made a call to m_lexHandler.startCDATA() with
            // no balancing call to m_lexHandler.endCDATA()
            // so we set m_cdataTagOpen true to remember this.
            m_cdataTagOpen = true;
        }

        /* If there are any occurances of "]]>" in the character data
         * let m_saxHandler worry about it, we've already warned them with
         * the previous call of m_lexHandler.startCDATA();
         */
        m_saxHandler.characters(ch, off, len);

        // time to generate characters event
        if (m_tracer != null)
            fireCharEvent(ch, off, len);
!!!5632386.java!!!	endElement(inout elemName : String) : void
        endElement(null, null, elemName);
!!!5632514.java!!!	namespaceAfterStartElement(in prefix : String, in uri : String) : void
        startPrefixMapping(prefix,uri,false);
!!!5632642.java!!!	processingInstruction(inout target : String, inout data : String) : void
        flushPending();

        // Pass the processing instruction to the SAX handler
        m_saxHandler.processingInstruction(target, data);

        // we don't want to leave serializer to fire off this event,
        // so do it here.
        if (m_tracer != null)
            super.fireEscapingEvent(target, data);
!!!5632770.java!!!	popNamespace(inout prefix : String) : boolean
        try
        {
            if (m_prefixMap.popNamespace(prefix))
            {
                m_saxHandler.endPrefixMapping(prefix);
                return true;
            }
        }
        catch (SAXException e)
        {
            // falls through
        }
        return false;
!!!5632898.java!!!	startCDATA() : void
        /* m_cdataTagOpen can only be true here if we have ignored the
         * previous call to this.endCDATA() and the previous call
         * this.startCDATA() before that is still "open". In this way
         * we merge adjacent CDATA. If anything else happened after the
         * ignored call to this.endCDATA() and this call then a call to
         * flushPending() would have been made which would have
         * closed the CDATA and set m_cdataTagOpen to false.
         */
        if (!m_cdataTagOpen )
        {
            flushPending();
            if (m_lexHandler != null) {
                m_lexHandler.startCDATA();

                // We have made a call to m_lexHandler.startCDATA() with
                // no balancing call to m_lexHandler.endCDATA()
                // so we set m_cdataTagOpen true to remember this.
                m_cdataTagOpen = true;
            }
        }
!!!5633026.java!!!	startElement(inout namespaceURI : String, inout localName : String, inout name : String, inout atts : Attributes) : void
        flushPending();
        super.startElement(namespaceURI, localName, name, atts);

        // Handle document type declaration (for first element only)
         if (m_needToOutputDocTypeDecl)
         {
             String doctypeSystem = getDoctypeSystem();
             if (doctypeSystem != null && m_lexHandler != null)
             {
                 String doctypePublic = getDoctypePublic();
                 if (doctypeSystem != null)
                     m_lexHandler.startDTD(
                         name,
                         doctypePublic,
                         doctypeSystem);
             }
             m_needToOutputDocTypeDecl = false;
         }
        m_elemContext = m_elemContext.push(namespaceURI, localName, name);

        // ensurePrefixIsDeclared depends on the current depth, so
        // the previous increment is necessary where it is.
        if (namespaceURI != null)
            ensurePrefixIsDeclared(namespaceURI, name);

        // add the attributes to the collected ones
        if (atts != null)
            addAttributes(atts);


        // do we really need this CDATA section state?
        m_elemContext.m_isCdataSection = isCdataSection();

!!!5633154.java!!!	ensurePrefixIsDeclared(inout ns : String, inout rawName : String) : void

        if (ns != null && ns.length() > 0)
        {
            int index;
            final boolean no_prefix = ((index = rawName.indexOf(":")) < 0);
            String prefix = (no_prefix) ? "" : rawName.substring(0, index);


            if (null != prefix)
            {
                String foundURI = m_prefixMap.lookupNamespace(prefix);

                if ((null == foundURI) || !foundURI.equals(ns))
                {
                    this.startPrefixMapping(prefix, ns, false);

                    if (getShouldOutputNSAttr()) {
                        // Bugzilla1133: Generate attribute as well as namespace event.
                        // SAX does expect both.
                        this.addAttributeAlways(
                            "http://www.w3.org/2000/xmlns/",
                            no_prefix ? "xmlns" : prefix,  // local name
                            no_prefix ? "xmlns" : ("xmlns:"+ prefix), // qname
                            "CDATA",
                            ns,
                            false);
                    }
                }

            }
        }
!!!5633282.java!!!	addAttribute(inout uri : String, inout localName : String, inout rawName : String, inout type : String, inout value : String, inout XSLAttribute : boolean) : void
        if (m_elemContext.m_startTagOpen)
        {
            ensurePrefixIsDeclared(uri, rawName);
            addAttributeAlways(uri, localName, rawName, type, value, false);
        }

!!!5633410.java!!!	reset() : boolean
        boolean wasReset = false;
        if (super.reset())
        {
            resetToXMLSAXHandler();
            wasReset = true;
        }
        return wasReset;
!!!5633538.java!!!	resetToXMLSAXHandler() : void
        this.m_escapeSetting = true;
