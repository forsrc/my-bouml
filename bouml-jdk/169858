format 222
"io" // jdk1.8::com::sun::org::apache::xerces::internal::impl::io
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xerces/internal/impl/io/"
  java_package "com.sun.org.apache.xerces.internal.impl.io"
  classview 163202 "io"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 691330 "ASCIIReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple ASCII byte reader. This is an optimized reader for reading
byte streams that only contain 7-bit ASCII characters.

@xerces.internal

@author Andy Clark, IBM

"
      classrelation 1929602 // <generalisation>
	relation 1929602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1929602 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      attribute 990210 "DEFAULT_BUFFER_SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2048"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants

 Default byte buffer size (2048). 
"
      end

      classrelation 1929730 // fInputStream (<unidirectional association>)
	relation 1929730 --->
	  a role_name "fInputStream" protected
	    comment " Data

 Input stream. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1929730 // fInputStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      attribute 990338 "fBuffer"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Byte buffer. 
"
      end

      classrelation 1929858 // fFormatter (<unidirectional association>)
	relation 1929858 --->
	  a role_name "fFormatter" init_value " null" private
	    comment " message formatter; used to produce localized
 exception messages
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1929858 // fFormatter (<unidirectional association>)
	  b parent class_ref 673026 // MessageFormatter
      end

      classrelation 1929986 // fLocale (<unidirectional association>)
	relation 1929986 --->
	  a role_name "fLocale" init_value " null" private
	    comment "Locale to use for messages
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1929986 // fLocale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      operation 4557698 "ASCIIReader"
	public explicit_return_type ""
	nparams 3
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param inout name "messageFormatter" type class_ref 673026 // MessageFormatter
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs an ASCII reader from the specified input stream
using the default buffer size.

@param inputStream The input stream.
@param messageFormatter  the MessageFormatter to use to message reporting.
@param locale    the Locale for which messages are to be reported
"
      end

      operation 4557826 "ASCIIReader"
	public explicit_return_type ""
	nparams 4
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "size" explicit_type "int"
	  param inout name "messageFormatter" type class_ref 673026 // MessageFormatter
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(InputStream, MessageFormatter, Locale)

Constructs an ASCII reader from the specified input stream
and buffer size.

@param inputStream The input stream.
@param size        The initial buffer size.
@param messageFormatter  the MessageFormatter to use to message reporting.
@param locale    the Locale for which messages are to be reported
"
      end

      operation 4557954 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(InputStream,int, MessageFormatter, Locale)

 Reader methods


Read a single character.  This method will block until a character is
available, an I/O error occurs, or the end of the stream is reached.

<p> Subclasses that intend to support efficient single-character input
should override this method.

@return     The character read, as an integer in the range 0 to 127
            (<tt>0x00-0x7f</tt>), or -1 if the end of the stream has
            been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 4558082 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " read():int

Read characters into a portion of an array.  This method will block
until some input is available, an I/O error occurs, or the end of the
stream is reached.

@param      ch     Destination buffer
@param      offset Offset at which to start storing characters
@param      length Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 4558210 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " read(char[],int,int)

Skip characters.  This method will block until some characters are
available, an I/O error occurs, or the end of the stream is reached.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IOException  If an I/O error occurs
"
      end

      operation 4558338 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " skip(long):long

Tell whether this stream is ready to be read.

@return True if the next read() is guaranteed not to block for input,
false otherwise.  Note that returning false does not guarantee that the
next read will block.

@exception  IOException  If an I/O error occurs
"
      end

      operation 4558466 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ready()

Tell whether this stream supports the mark() operation.
"
      end

      operation 4558594 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " markSupported()

Mark the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point.  Not all
character-input streams support the mark() operation.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  After
                        reading this many characters, attempting to
                        reset the stream may fail.

@exception  IOException  If the stream does not support mark(),
                         or if some other I/O error occurs
"
      end

      operation 4558722 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " mark(int)

Reset the stream.  If the stream has been marked, then attempt to
reposition it at the mark.  If the stream has not been marked, then
attempt to reset it in some way appropriate to the particular stream,
for example by repositioning it to its starting point.  Not all
character-input streams support the reset() operation, and some support
reset() without supporting mark().

@exception  IOException  If the stream has not been marked,
                         or if the mark has been invalidated,
                         or if the stream does not support reset(),
                         or if some other I/O error occurs
"
      end

      operation 4558850 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " reset()

Close the stream.  Once a stream has been closed, further read(),
ready(), mark(), or reset() invocations will throw an IOException.
Closing a previously-closed stream, however, has no effect.

@exception  IOException  If an I/O error occurs
"
      end
    end

    class 691458 "MalformedByteSequenceException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Signals that a malformed byte sequence was detected
by a <code>java.io.Reader</code> that decodes bytes
of a given encoding into characters.</p>

@xerces.internal

@author Michael Glavassevich, IBM

"
      classrelation 1930242 // <generalisation>
	relation 1930242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1930242 // <generalisation>
	  b parent class_ref 691586 // CharConversionException
      end

      attribute 990594 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 8436382245048328739L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization version. 
"
      end

      classrelation 1930370 // fFormatter (<unidirectional association>)
	relation 1930370 --->
	  a role_name "fFormatter" private
	    comment " Data

 message formatter *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1930370 // fFormatter (<unidirectional association>)
	  b parent class_ref 673026 // MessageFormatter
      end

      classrelation 1930498 // fLocale (<unidirectional association>)
	relation 1930498 --->
	  a role_name "fLocale" private
	    comment " locale for error message *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1930498 // fLocale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 1930626 // fDomain (<unidirectional association>)
	relation 1930626 --->
	  a role_name "fDomain" private
	    comment " error domain *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1930626 // fDomain (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1930754 // fKey (<unidirectional association>)
	relation 1930754 --->
	  a role_name "fKey" private
	    comment " key for the error message *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1930754 // fKey (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1930882 // fArguments (<unidirectional association>)
	relation 1930882 --->
	  a role_name "fArguments" multiplicity "[]" private
	    comment " replacement arguements for the error message *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1930882 // fArguments (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 1931010 // fMessage (<unidirectional association>)
	relation 1931010 --->
	  a role_name "fMessage" private
	    comment " message text for this message, initially null *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1931010 // fMessage (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 4559234 "MalformedByteSequenceException"
	public explicit_return_type ""
	nparams 5
	  param inout name "formatter" type class_ref 673026 // MessageFormatter
	  param inout name "locale" type class_ref 312962 // Locale
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "key" type class_ref 128130 // String
	  param inout name "arguments" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs a MalformedByteSequenceException with the given
parameters which may be passed to an error reporter to
generate a localized string for this exception.

@param formatter The MessageFormatter used for building the
                 message text for this exception.
@param locale    The Locale for which messages are to be reported.
@param domain    The error domain.
@param key       The key of the error message.
@param arguments The replacement arguments for the error message,
                 if needed.
"
      end

      operation 4559362 "getDomain"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(MessageFormatter, Locale, String, String, Object[])

 Public methods


<p>Returns the error domain of the error message.</p>

@return the error domain
"
      end

      operation 4559490 "getKey"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getDomain

<p>Returns the key of the error message.</p>

@return the error key of the error message
"
      end

      operation 4559618 "getArguments"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getKey()

<p>Returns the replacement arguments for the error
message or <code>null</code> if none exist.</p>

@return the replacement arguments for the error message
or <code>null</code> if none exist
"
      end

      operation 4559746 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getArguments();

<p>Returns the localized message for this exception.</p>

@return the localized message for this exception.
"
      end
    end

    class 691714 "UCSReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Reader for UCS-2 and UCS-4 encodings.
(i.e., encodings from ISO-10646-UCS-(2|4)).

@xerces.internal

@author Neil Graham, IBM

"
      classrelation 1931138 // <generalisation>
	relation 1931138 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1931138 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      attribute 990722 "DEFAULT_BUFFER_SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants

 Default byte buffer size (8192, larger than that of ASCIIReader
since it's reasonable to surmise that the average UCS-4-encoded
file should be 4 times as large as the average ASCII-encoded file).

"
      end

      attribute 990850 "UCS2LE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 990978 "UCS2BE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 991106 "UCS4LE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 991234 "UCS4BE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1931266 // fInputStream (<unidirectional association>)
	relation 1931266 --->
	  a role_name "fInputStream" protected
	    comment " Data

 Input stream. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1931266 // fInputStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      attribute 991362 "fBuffer"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Byte buffer. 
"
      end

      attribute 991490 "fEncoding"
	protected explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " what kind of data we're dealing with
"
      end

      operation 4559874 "UCSReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "encoding" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs an ASCII reader from the specified input stream
using the default buffer size.  The Endian-ness and whether this is
UCS-2 or UCS-4 needs also to be known in advance.

@param inputStream The input stream.
@param encoding One of UCS2LE, UCS2BE, UCS4LE or UCS4BE.
"
      end

      operation 4560002 "UCSReader"
	public explicit_return_type ""
	nparams 3
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "size" explicit_type "int"
	  param in name "encoding" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(InputStream, short)

Constructs an ASCII reader from the specified input stream
and buffer size.  The Endian-ness and whether this is
UCS-2 or UCS-4 needs also to be known in advance.

@param inputStream The input stream.
@param size        The initial buffer size.
@param encoding One of UCS2LE, UCS2BE, UCS4LE or UCS4BE.
"
      end

      operation 4560130 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(InputStream,int,short)

 Reader methods


Read a single character.  This method will block until a character is
available, an I/O error occurs, or the end of the stream is reached.

<p> Subclasses that intend to support efficient single-character input
should override this method.

@return     The character read, as an integer in the range 0 to 127
            (<tt>0x00-0x7f</tt>), or -1 if the end of the stream has
            been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 4560258 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " read():int

Read characters into a portion of an array.  This method will block
until some input is available, an I/O error occurs, or the end of the
stream is reached.

@param      ch     Destination buffer
@param      offset Offset at which to start storing characters
@param      length Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 4560386 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " read(char[],int,int)

Skip characters.  This method will block until some characters are
available, an I/O error occurs, or the end of the stream is reached.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IOException  If an I/O error occurs
"
      end

      operation 4560514 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " skip(long):long

Tell whether this stream is ready to be read.

@return True if the next read() is guaranteed not to block for input,
false otherwise.  Note that returning false does not guarantee that the
next read will block.

@exception  IOException  If an I/O error occurs
"
      end

      operation 4560642 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ready()

Tell whether this stream supports the mark() operation.
"
      end

      operation 4560770 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " markSupported()

Mark the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point.  Not all
character-input streams support the mark() operation.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  After
                        reading this many characters, attempting to
                        reset the stream may fail.

@exception  IOException  If the stream does not support mark(),
                         or if some other I/O error occurs
"
      end

      operation 4560898 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " mark(int)

Reset the stream.  If the stream has been marked, then attempt to
reposition it at the mark.  If the stream has not been marked, then
attempt to reset it in some way appropriate to the particular stream,
for example by repositioning it to its starting point.  Not all
character-input streams support the reset() operation, and some support
reset() without supporting mark().

@exception  IOException  If the stream has not been marked,
                         or if the mark has been invalidated,
                         or if the stream does not support reset(),
                         or if some other I/O error occurs
"
      end

      operation 4561026 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " reset()

Close the stream.  Once a stream has been closed, further read(),
ready(), mark(), or reset() invocations will throw an IOException.
Closing a previously-closed stream, however, has no effect.

@exception  IOException  If an I/O error occurs
"
      end
    end

    class 691842 "UTF8Reader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A UTF-8 reader.</p>

@xerces.internal

@author Andy Clark, IBM

"
      classrelation 1931394 // <generalisation>
	relation 1931394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1931394 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      attribute 991618 "DEFAULT_BUFFER_SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2048"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants

 Default byte buffer size (2048). 
"
      end

      attribute 991746 "DEBUG_READ"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " debugging
 Debug read. 
"
      end

      classrelation 1931522 // fInputStream (<unidirectional association>)
	relation 1931522 --->
	  a role_name "fInputStream" protected
	    comment " Data

 Input stream. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1931522 // fInputStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      attribute 991874 "fBuffer"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Byte buffer. 
"
      end

      attribute 992002 "fOffset"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Offset into buffer. 
"
      end

      attribute 992130 "fSurrogate"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Surrogate character. 
"
      end

      classrelation 1931650 // fFormatter (<unidirectional association>)
	relation 1931650 --->
	  a role_name "fFormatter" init_value " null" private
	    comment " message formatter; used to produce localized
 exception messages
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1931650 // fFormatter (<unidirectional association>)
	  b parent class_ref 673026 // MessageFormatter
      end

      classrelation 1931778 // fLocale (<unidirectional association>)
	relation 1931778 --->
	  a role_name "fLocale" init_value " null" private
	    comment "Locale to use for messages
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1931778 // fLocale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      operation 4561154 "UTF8Reader"
	public explicit_return_type ""
	nparams 1
	  param inout name "inputStream" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs a UTF-8 reader from the specified input stream
using the default buffer size.  Primarily for testing.

@param inputStream The input stream.
"
      end

      operation 4561282 "UTF8Reader"
	public explicit_return_type ""
	nparams 3
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param inout name "messageFormatter" type class_ref 673026 // MessageFormatter
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(InputStream, MessageFormatter)

Constructs a UTF-8 reader from the specified input stream
using the default buffer size and the given MessageFormatter.

@param inputStream The input stream.
@param messageFormatter  given MessageFormatter
@param locale    Locale to use for messages
"
      end

      operation 4561410 "UTF8Reader"
	public explicit_return_type ""
	nparams 4
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "size" explicit_type "int"
	  param inout name "messageFormatter" type class_ref 673026 // MessageFormatter
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(InputStream, MessageFormatter, Locale)

Constructs a UTF-8 reader from the specified input stream,
buffer size and MessageFormatter.

@param inputStream The input stream.
@param size        The initial buffer size.
@param messageFormatter  the formatter for localizing/formatting errors.
@param locale    the Locale to use for messages
"
      end

      operation 4561538 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(InputStream, int, MessageFormatter, Locale)

 Reader methods


Read a single character.  This method will block until a character is
available, an I/O error occurs, or the end of the stream is reached.

<p> Subclasses that intend to support efficient single-character input
should override this method.

@return     The character read, as an integer in the range 0 to 16383
            (<tt>0x00-0xffff</tt>), or -1 if the end of the stream has
            been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 4561666 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " read():int

Read characters into a portion of an array.  This method will block
until some input is available, an I/O error occurs, or the end of the
stream is reached.

@param      ch     Destination buffer
@param      offset Offset at which to start storing characters
@param      length Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 4561794 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " read(char[],int,int)

Skip characters.  This method will block until some characters are
available, an I/O error occurs, or the end of the stream is reached.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IOException  If an I/O error occurs
"
      end

      operation 4561922 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " skip(long):long

Tell whether this stream is ready to be read.

@return True if the next read() is guaranteed not to block for input,
false otherwise.  Note that returning false does not guarantee that the
next read will block.

@exception  IOException  If an I/O error occurs
"
      end

      operation 4562050 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ready()

Tell whether this stream supports the mark() operation.
"
      end

      operation 4562178 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " markSupported()

Mark the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point.  Not all
character-input streams support the mark() operation.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  After
                        reading this many characters, attempting to
                        reset the stream may fail.

@exception  IOException  If the stream does not support mark(),
                         or if some other I/O error occurs
"
      end

      operation 4562306 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " mark(int)

Reset the stream.  If the stream has been marked, then attempt to
reposition it at the mark.  If the stream has not been marked, then
attempt to reset it in some way appropriate to the particular stream,
for example by repositioning it to its starting point.  Not all
character-input streams support the reset() operation, and some support
reset() without supporting mark().

@exception  IOException  If the stream has not been marked,
                         or if the mark has been invalidated,
                         or if the stream does not support reset(),
                         or if some other I/O error occurs
"
      end

      operation 4562434 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " reset()

Close the stream.  Once a stream has been closed, further read(),
ready(), mark(), or reset() invocations will throw an IOException.
Closing a previously-closed stream, however, has no effect.

@exception  IOException  If an I/O error occurs
"
      end

      operation 4562562 "expectedByte"
	private explicit_return_type "void"
	nparams 2
	  param in name "position" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 691458 // MalformedByteSequenceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " close()

 Private methods

 Throws an exception for expected byte. "
      end

      operation 4562690 "invalidByte"
	private explicit_return_type "void"
	nparams 3
	  param in name "position" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 691458 // MalformedByteSequenceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " expectedByte(int,int)
 Throws an exception for invalid byte. "
      end

      operation 4562818 "invalidSurrogate"
	private explicit_return_type "void"
	nparams 1
	  param in name "uuuuu" explicit_type "int"
	nexceptions 1
	  exception class_ref 691458 // MalformedByteSequenceException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " invalidByte(int,int,int)
 Throws an exception for invalid surrogate bits. "
      end
    end
  end

  deploymentview 156290 "io"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 479362 "ASCIIReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.Reader;
import java.util.Locale;
import com.sun.org.apache.xerces.internal.util.MessageFormatter;
import com.sun.org.apache.xerces.internal.impl.msg.XMLMessageFormatter;
import com.sun.xml.internal.stream.util.BufferAllocator;
import com.sun.xml.internal.stream.util.ThreadLocalBufferAllocator;
${definition}"
      associated_elems
	class_ref 691330 // ASCIIReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2000-2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 479618 "MalformedByteSequenceException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.CharConversionException;
import java.util.Locale;
import com.sun.org.apache.xerces.internal.util.MessageFormatter;
${definition}"
      associated_elems
	class_ref 691458 // MalformedByteSequenceException
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 479746 "UCSReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.Reader;
import com.sun.xml.internal.stream.util.BufferAllocator;
import com.sun.xml.internal.stream.util.ThreadLocalBufferAllocator;
${definition}"
      associated_elems
	class_ref 691714 // UCSReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2000-2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 479874 "UTF8Reader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.Reader;
import java.util.Locale;
import com.sun.org.apache.xerces.internal.util.MessageFormatter;
import com.sun.org.apache.xerces.internal.impl.msg.XMLMessageFormatter;
import com.sun.xml.internal.stream.util.BufferAllocator;
import com.sun.xml.internal.stream.util.ThreadLocalBufferAllocator;
${definition}"
      associated_elems
	class_ref 691842 // UTF8Reader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2000-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
