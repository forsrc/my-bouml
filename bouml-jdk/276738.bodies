class CacheKey
!!!1458946.java!!!	CacheKey(inout className : String, inout loader : ClassLoader)
                this.className = className;
                this.loader = loader;
!!!1459074.java!!!	hashCode() : int
                if (loader == null)
                    return className.hashCode();
                else
                    return className.hashCode() ^ loader.hashCode();
!!!1459202.java!!!	equals(inout obj : Object) : boolean
                try {

                    // WeakHashMap may compare null keys
                    if (obj == null)
                        return false;

                    CacheKey other = (CacheKey)obj;

                    // I've made a decision to actually compare the
                    // loader references.  I don't want a case when
                    // two loader instances override their equals
                    // methods and only compare code base.
                    //
                    // This way, at worst, our performance will
                    // be slower, but we know we'll do the correct
                    // loading.
                    return (className.equals(other.className) &&
                            loader == other.loader);

                } catch (ClassCastException cce) {
                    return false;
                }
