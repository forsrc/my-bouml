format 222
"format" // jdk1.8::java::time::format
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/time/format/"
  java_package "java.time.format"
  classview 176258 "format"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1051522 "TextStyle"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration of the style of text formatting and parsing.
<p>
Text styles define three sizes for the formatted text - 'full', 'short' and 'narrow'.
Each of these three sizes is available in both 'standard' and 'stand-alone' variations.
<p>
The difference between the three sizes is obvious in most languages.
For example, in English the 'full' month is 'January', the 'short' month is 'Jan'
and the 'narrow' month is 'J'. Note that the narrow size is often not unique.
For example, 'January', 'June' and 'July' all have the 'narrow' text 'J'.
<p>
The difference between the 'standard' and 'stand-alone' forms is trickier to describe
as there is no difference in English. However, in other languages there is a difference
in the word used when the text is used alone, as opposed to in a complete date.
For example, the word used for a month when used alone in a date picker is different
to the word used for month in association with a day and year in a date.

@implSpec
This is immutable and thread-safe enum.
"
      attribute 1967234 "FULL"
	public type class_ref 1051522 // TextStyle
	cpp_decl ""
	java_decl "  ${@}${name}(Calendar.LONG_FORMAT, 0),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ordered from large to small
 ordered so that bit 0 of the ordinal indicates stand-alone.

Full text, typically the full description.
For example, day-of-week Monday might output \"Monday\".
"
      end

      attribute 1967362 "FULL_STANDALONE"
	public type class_ref 1051522 // TextStyle
	cpp_decl ""
	java_decl "  ${@}${name}(Calendar.LONG_STANDALONE, 0),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Full text for stand-alone use, typically the full description.
For example, day-of-week Monday might output \"Monday\".
"
      end

      attribute 1967490 "SHORT"
	public type class_ref 1051522 // TextStyle
	cpp_decl ""
	java_decl "  ${@}${name}(Calendar.SHORT_FORMAT, 1),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Short text, typically an abbreviation.
For example, day-of-week Monday might output \"Mon\".
"
      end

      attribute 1967618 "SHORT_STANDALONE"
	public type class_ref 1051522 // TextStyle
	cpp_decl ""
	java_decl "  ${@}${name}(Calendar.SHORT_STANDALONE, 1),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Short text for stand-alone use, typically an abbreviation.
For example, day-of-week Monday might output \"Mon\".
"
      end

      attribute 1967746 "NARROW"
	public type class_ref 1051522 // TextStyle
	cpp_decl ""
	java_decl "  ${@}${name}(Calendar.NARROW_FORMAT, 1),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Narrow text, typically a single letter.
For example, day-of-week Monday might output \"M\".
"
      end

      attribute 1967874 "NARROW_STANDALONE"
	public type class_ref 1051522 // TextStyle
	cpp_decl ""
	java_decl "  ${@}${name}(Calendar.NARROW_STANDALONE, 1),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Narrow text for stand-alone use, typically a single letter.
For example, day-of-week Monday might output \"M\".
"
      end

      attribute 1968002 "calendarStyle"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1968130 "zoneNameStyleIndex"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8547970 "TextStyle"
	private explicit_return_type ""
	nparams 2
	  param in name "calendarStyle" explicit_type "int"
	  param in name "zoneNameStyleIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8548098 "isStandalone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the Style is a stand-alone style.
@return true if the style is a stand-alone style.
"
      end

      operation 8548226 "asStandalone"
	public return_type class_ref 1051522 // TextStyle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the stand-alone style with the same size.
@return the stand-alone style with the same size
"
      end

      operation 8548354 "asNormal"
	public return_type class_ref 1051522 // TextStyle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the normal style with the same size.

@return the normal style with the same size
"
      end

      operation 8548482 "toCalendarStyle"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Calendar} style corresponding to this {@code TextStyle}.

@return the corresponding {@code Calendar} style
"
      end

      operation 8548610 "zoneNameStyleIndex"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relative index value to an element of the {@link
java.text.DateFormatSymbols#getZoneStrings() DateFormatSymbols.getZoneStrings()}
value, 0 for long names and 1 for short names (abbreviations). Note that these values
do <em>not</em> correspond to the {@link java.util.TimeZone#LONG} and {@link
java.util.TimeZone#SHORT} values.

@return the relative index value to time zone names array
"
      end
    end

    class 1052930 "DateTimeFormatter"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Formatter for printing and parsing date-time objects.
<p>
This class provides the main application entry point for printing and parsing
and provides common implementations of {@code DateTimeFormatter}:
<ul>
<li>Using predefined constants, such as {@link #ISO_LOCAL_DATE}</li>
<li>Using pattern letters, such as {@code uuuu-MMM-dd}</li>
<li>Using localized styles, such as {@code long} or {@code medium}</li>
</ul>
<p>
More complex formatters are provided by
{@link DateTimeFormatterBuilder DateTimeFormatterBuilder}.

<p>
The main date-time classes provide two methods - one for formatting,
{@code format(DateTimeFormatter formatter)}, and one for parsing,
{@code parse(CharSequence text, DateTimeFormatter formatter)}.
<p>For example:
<blockquote><pre>
 LocalDate date = LocalDate.now();
 String text = date.format(formatter);
 LocalDate parsedDate = LocalDate.parse(text, formatter);
</pre></blockquote>
<p>
In addition to the format, formatters can be created with desired Locale,
Chronology, ZoneId, and DecimalStyle.
<p>
The {@link #withLocale withLocale} method returns a new formatter that
overrides the locale. The locale affects some aspects of formatting and
parsing. For example, the {@link #ofLocalizedDate ofLocalizedDate} provides a
formatter that uses the locale specific date format.
<p>
The {@link #withChronology withChronology} method returns a new formatter
that overrides the chronology. If overridden, the date-time value is
converted to the chronology before formatting. During parsing the date-time
value is converted to the chronology before it is returned.
<p>
The {@link #withZone withZone} method returns a new formatter that overrides
the zone. If overridden, the date-time value is converted to a ZonedDateTime
with the requested ZoneId before formatting. During parsing the ZoneId is
applied before the value is returned.
<p>
The {@link #withDecimalStyle withDecimalStyle} method returns a new formatter that
overrides the {@link DecimalStyle}. The DecimalStyle symbols are used for
formatting and parsing.
<p>
Some applications may need to use the older {@link Format java.text.Format}
class for formatting. The {@link #toFormat()} method returns an
implementation of {@code java.text.Format}.

<h3 id=\"predefined\">Predefined Formatters</h3>
<table summary=\"Predefined Formatters\" cellpadding=\"2\" cellspacing=\"3\" border=\"0\" >
<thead>
<tr class=\"tableSubHeadingColor\">
<th class=\"colFirst\" align=\"left\">Formatter</th>
<th class=\"colFirst\" align=\"left\">Description</th>
<th class=\"colLast\" align=\"left\">Example</th>
</tr>
</thead>
<tbody>
<tr class=\"rowColor\">
<td>{@link #ofLocalizedDate ofLocalizedDate(dateStyle)} </td>
<td> Formatter with date style from the locale </td>
<td> '2011-12-03'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ofLocalizedTime ofLocalizedTime(timeStyle)} </td>
<td> Formatter with time style from the locale </td>
<td> '10:15:30'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #ofLocalizedDateTime ofLocalizedDateTime(dateTimeStyle)} </td>
<td> Formatter with a style for date and time from the locale</td>
<td> '3 Jun 2008 11:05:30'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ofLocalizedDateTime ofLocalizedDateTime(dateStyle,timeStyle)}
</td>
<td> Formatter with date and time styles from the locale </td>
<td> '3 Jun 2008 11:05'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #BASIC_ISO_DATE}</td>
<td>Basic ISO date </td> <td>'20111203'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ISO_LOCAL_DATE}</td>
<td> ISO Local Date </td>
<td>'2011-12-03'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #ISO_OFFSET_DATE}</td>
<td> ISO Date with offset </td>
<td>'2011-12-03+01:00'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ISO_DATE}</td>
<td> ISO Date with or without offset </td>
<td> '2011-12-03+01:00'; '2011-12-03'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #ISO_LOCAL_TIME}</td>
<td> Time without offset </td>
<td>'10:15:30'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ISO_OFFSET_TIME}</td>
<td> Time with offset </td>
<td>'10:15:30+01:00'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #ISO_TIME}</td>
<td> Time with or without offset </td>
<td>'10:15:30+01:00'; '10:15:30'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ISO_LOCAL_DATE_TIME}</td>
<td> ISO Local Date and Time </td>
<td>'2011-12-03T10:15:30'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #ISO_OFFSET_DATE_TIME}</td>
<td> Date Time with Offset
</td><td>2011-12-03T10:15:30+01:00'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ISO_ZONED_DATE_TIME}</td>
<td> Zoned Date Time </td>
<td>'2011-12-03T10:15:30+01:00[Europe/Paris]'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #ISO_DATE_TIME}</td>
<td> Date and time with ZoneId </td>
<td>'2011-12-03T10:15:30+01:00[Europe/Paris]'</td>
</tr>
<tr class=\"altColor\">
<td> {@link #ISO_ORDINAL_DATE}</td>
<td> Year and day of year </td>
<td>'2012-337'</td>
</tr>
<tr class=\"rowColor\">
<td> {@link #ISO_WEEK_DATE}</td>
<td> Year and Week </td>
<td>2012-W48-6'</td></tr>
<tr class=\"altColor\">
<td> {@link #ISO_INSTANT}</td>
<td> Date and Time of an Instant </td>
<td>'2011-12-03T10:15:30Z' </td>
</tr>
<tr class=\"rowColor\">
<td> {@link #RFC_1123_DATE_TIME}</td>
<td> RFC 1123 / RFC 822 </td>
<td>'Tue, 3 Jun 2008 11:05:30 GMT'</td>
</tr>
</tbody>
</table>

<h3 id=\"patterns\">Patterns for Formatting and Parsing</h3>
Patterns are based on a simple sequence of letters and symbols.
A pattern is used to create a Formatter using the
{@link #ofPattern(String)} and {@link #ofPattern(String, Locale)} methods.
For example,
{@code \"d MMM uuuu\"} will format 2011-12-03 as '3&nbsp;Dec&nbsp;2011'.
A formatter created from a pattern can be used as many times as necessary,
it is immutable and is thread-safe.
<p>
For example:
<blockquote><pre>
 LocalDate date = LocalDate.now();
 DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy MM dd\");
 String text = date.format(formatter);
 LocalDate parsedDate = LocalDate.parse(text, formatter);
</pre></blockquote>
<p>
All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters. The
following pattern letters are defined:
<pre>
 Symbol  Meaning                     Presentation      Examples
 ------  -------                     ------------      -------
  G       era                         text              AD; Anno Domini; A
  u       year                        year              2004; 04
  y       year-of-era                 year              2004; 04
  D       day-of-year                 number            189
  M/L     month-of-year               number/text       7; 07; Jul; July; J
  d       day-of-month                number            10

  Q/q     quarter-of-year             number/text       3; 03; Q3; 3rd quarter
  Y       week-based-year             year              1996; 96
  w       week-of-week-based-year     number            27
  W       week-of-month               number            4
  E       day-of-week                 text              Tue; Tuesday; T
  e/c     localized day-of-week       number/text       2; 02; Tue; Tuesday; T
  F       week-of-month               number            3

  a       am-pm-of-day                text              PM
  h       clock-hour-of-am-pm (1-12)  number            12
  K       hour-of-am-pm (0-11)        number            0
  k       clock-hour-of-am-pm (1-24)  number            0

  H       hour-of-day (0-23)          number            0
  m       minute-of-hour              number            30
  s       second-of-minute            number            55
  S       fraction-of-second          fraction          978
  A       milli-of-day                number            1234
  n       nano-of-second              number            987654321
  N       nano-of-day                 number            1234000000

  V       time-zone ID                zone-id           America/Los_Angeles; Z; -08:30
  z       time-zone name              zone-name         Pacific Standard Time; PST
  O       localized zone-offset       offset-O          GMT+8; GMT+08:00; UTC-08:00;
  X       zone-offset 'Z' for zero    offset-X          Z; -08; -0830; -08:30; -083015; -08:30:15;
  x       zone-offset                 offset-x          +0000; -08; -0830; -08:30; -083015; -08:30:15;
  Z       zone-offset                 offset-Z          +0000; -0800; -08:00;

  p       pad next                    pad modifier      1

  '       escape for text             delimiter
  ''      single quote                literal           '
  [       optional section start
  ]       optional section end
  #       reserved for future use
  {       reserved for future use
  }       reserved for future use
</pre>
<p>
The count of pattern letters determines the format.
<p>
<b>Text</b>: The text style is determined based on the number of pattern
letters used. Less than 4 pattern letters will use the
{@link TextStyle#SHORT short form}. Exactly 4 pattern letters will use the
{@link TextStyle#FULL full form}. Exactly 5 pattern letters will use the
{@link TextStyle#NARROW narrow form}.
Pattern letters 'L', 'c', and 'q' specify the stand-alone form of the text styles.
<p>
<b>Number</b>: If the count of letters is one, then the value is output using
the minimum number of digits and without padding. Otherwise, the count of digits
is used as the width of the output field, with the value zero-padded as necessary.
The following pattern letters have constraints on the count of letters.
Only one letter of 'c' and 'F' can be specified.
Up to two letters of 'd', 'H', 'h', 'K', 'k', 'm', and 's' can be specified.
Up to three letters of 'D' can be specified.
<p>
<b>Number/Text</b>: If the count of pattern letters is 3 or greater, use the
Text rules above. Otherwise use the Number rules above.
<p>
<b>Fraction</b>: Outputs the nano-of-second field as a fraction-of-second.
The nano-of-second value has nine digits, thus the count of pattern letters
is from 1 to 9. If it is less than 9, then the nano-of-second value is
truncated, with only the most significant digits being output.
<p>
<b>Year</b>: The count of letters determines the minimum field width below
which padding is used. If the count of letters is two, then a
{@link DateTimeFormatterBuilder#appendValueReduced reduced} two digit form is
used. For printing, this outputs the rightmost two digits. For parsing, this
will parse using the base value of 2000, resulting in a year within the range
2000 to 2099 inclusive. If the count of letters is less than four (but not
two), then the sign is only output for negative years as per
{@link SignStyle#NORMAL}. Otherwise, the sign is output if the pad width is
exceeded, as per {@link SignStyle#EXCEEDS_PAD}.
<p>
<b>ZoneId</b>: This outputs the time-zone ID, such as 'Europe/Paris'. If the
count of letters is two, then the time-zone ID is output. Any other count of
letters throws {@code IllegalArgumentException}.
<p>
<b>Zone names</b>: This outputs the display name of the time-zone ID. If the
count of letters is one, two or three, then the short name is output. If the
count of letters is four, then the full name is output. Five or more letters
throws {@code IllegalArgumentException}.
<p>
<b>Offset X and x</b>: This formats the offset based on the number of pattern
letters. One letter outputs just the hour, such as '+01', unless the minute
is non-zero in which case the minute is also output, such as '+0130'. Two
letters outputs the hour and minute, without a colon, such as '+0130'. Three
letters outputs the hour and minute, with a colon, such as '+01:30'. Four
letters outputs the hour and minute and optional second, without a colon,
such as '+013015'. Five letters outputs the hour and minute and optional
second, with a colon, such as '+01:30:15'. Six or more letters throws
{@code IllegalArgumentException}. Pattern letter 'X' (upper case) will output
'Z' when the offset to be output would be zero, whereas pattern letter 'x'
(lower case) will output '+00', '+0000', or '+00:00'.
<p>
<b>Offset O</b>: This formats the localized offset based on the number of
pattern letters. One letter outputs the {@linkplain TextStyle#SHORT short}
form of the localized offset, which is localized offset text, such as 'GMT',
with hour without leading zero, optional 2-digit minute and second if
non-zero, and colon, for example 'GMT+8'. Four letters outputs the
{@linkplain TextStyle#FULL full} form, which is localized offset text,
such as 'GMT, with 2-digit hour and minute field, optional second field
if non-zero, and colon, for example 'GMT+08:00'. Any other count of letters
throws {@code IllegalArgumentException}.
<p>
<b>Offset Z</b>: This formats the offset based on the number of pattern
letters. One, two or three letters outputs the hour and minute, without a
colon, such as '+0130'. The output will be '+0000' when the offset is zero.
Four letters outputs the {@linkplain TextStyle#FULL full} form of localized
offset, equivalent to four letters of Offset-O. The output will be the
corresponding localized offset text if the offset is zero. Five
letters outputs the hour, minute, with optional second if non-zero, with
colon. It outputs 'Z' if the offset is zero.
Six or more letters throws {@code IllegalArgumentException}.
<p>
<b>Optional section</b>: The optional section markers work exactly like
calling {@link DateTimeFormatterBuilder#optionalStart()} and
{@link DateTimeFormatterBuilder#optionalEnd()}.
<p>
<b>Pad modifier</b>: Modifies the pattern that immediately follows to be
padded with spaces. The pad width is determined by the number of pattern
letters. This is the same as calling
{@link DateTimeFormatterBuilder#padNext(int)}.
<p>
For example, 'ppH' outputs the hour-of-day padded on the left with spaces to
a width of 2.
<p>
Any unrecognized letter is an error. Any non-letter character, other than
'[', ']', '{', '}', '#' and the single quote will be output directly.
Despite this, it is recommended to use single quotes around all characters
that you want to output directly to ensure that future changes do not break
your application.

<h3 id=\"resolving\">Resolving</h3>
Parsing is implemented as a two-phase operation.
First, the text is parsed using the layout defined by the formatter, producing
a {@code Map} of field to value, a {@code ZoneId} and a {@code Chronology}.
Second, the parsed data is <em>resolved</em>, by validating, combining and
simplifying the various fields into more useful ones.
<p>
Five parsing methods are supplied by this class.
Four of these perform both the parse and resolve phases.
The fifth method, {@link #parseUnresolved(CharSequence, ParsePosition)},
only performs the first phase, leaving the result unresolved.
As such, it is essentially a low-level operation.
<p>
The resolve phase is controlled by two parameters, set on this class.
<p>
The {@link ResolverStyle} is an enum that offers three different approaches,
strict, smart and lenient. The smart option is the default.
It can be set using {@link #withResolverStyle(ResolverStyle)}.
<p>
The {@link #withResolverFields(TemporalField...)} parameter allows the
set of fields that will be resolved to be filtered before resolving starts.
For example, if the formatter has parsed a year, month, day-of-month
and day-of-year, then there are two approaches to resolve a date:
(year + month + day-of-month) and (year + day-of-year).
The resolver fields allows one of the two approaches to be selected.
If no resolver fields are set then both approaches must result in the same date.
<p>
Resolving separate fields to form a complete date and time is a complex
process with behaviour distributed across a number of classes.
It follows these steps:
<ol>
<li>The chronology is determined.
The chronology of the result is either the chronology that was parsed,
or if no chronology was parsed, it is the chronology set on this class,
or if that is null, it is {@code IsoChronology}.
<li>The {@code ChronoField} date fields are resolved.
This is achieved using {@link Chronology#resolveDate(Map, ResolverStyle)}.
Documentation about field resolution is located in the implementation
of {@code Chronology}.
<li>The {@code ChronoField} time fields are resolved.
This is documented on {@link ChronoField} and is the same for all chronologies.
<li>Any fields that are not {@code ChronoField} are processed.
This is achieved using {@link TemporalField#resolve(Map, TemporalAccessor, ResolverStyle)}.
Documentation about field resolution is located in the implementation
of {@code TemporalField}.
<li>The {@code ChronoField} date and time fields are re-resolved.
This allows fields in step four to produce {@code ChronoField} values
and have them be processed into dates and times.
<li>A {@code LocalTime} is formed if there is at least an hour-of-day available.
This involves providing default values for minute, second and fraction of second.
<li>Any remaining unresolved fields are cross-checked against any
date and/or time that was resolved. Thus, an earlier stage would resolve
(year + month + day-of-month) to a date, and this stage would check that
day-of-week was valid for the date.
<li>If an {@linkplain #parsedExcessDays() excess number of days}
was parsed then it is added to the date if a date is available.
</ol>

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3449218 // printerParser (<unidirectional association>)
	relation 3449218 --->
	  a role_name "printerParser" const_relation private
	    comment "
The printer and/or parser to use, not null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3449218 // printerParser (<unidirectional association>)
	  b parent class_ref 1057410 // CompositePrinterParser
      end

      classrelation 3449346 // locale (<unidirectional association>)
	relation 3449346 --->
	  a role_name "locale" const_relation private
	    comment "
The locale to use for formatting, not null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3449346 // locale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 3449474 // decimalStyle (<unidirectional association>)
	relation 3449474 --->
	  a role_name "decimalStyle" const_relation private
	    comment "
The symbols to use for formatting, not null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3449474 // decimalStyle (<unidirectional association>)
	  b parent class_ref 1057538 // DecimalStyle
      end

      classrelation 3449602 // resolverStyle (<unidirectional association>)
	relation 3449602 --->
	  a role_name "resolverStyle" const_relation private
	    comment "
The resolver style to use, not null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3449602 // resolverStyle (<unidirectional association>)
	  b parent class_ref 1054850 // ResolverStyle
      end

      classrelation 3449730 // resolverFields (<unidirectional association>)
	relation 3449730 --->
	  a role_name "resolverFields" const_relation private
	    comment "
The fields to use in resolving, null for all fields.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TemporalField> ${name}${value};
"
	    classrelation_ref 3449730 // resolverFields (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3449858 // chrono (<unidirectional association>)
	relation 3449858 --->
	  a role_name "chrono" const_relation private
	    comment "
The chronology to use for formatting, null for no override.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3449858 // chrono (<unidirectional association>)
	  b parent class_ref 1052546 // Chronology
      end

      classrelation 3449986 // zone (<unidirectional association>)
	relation 3449986 --->
	  a role_name "zone" const_relation private
	    comment "
The zone to use for formatting, null for no override.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3449986 // zone (<unidirectional association>)
	  b parent class_ref 1049730 // ZoneId
      end

      operation 8509826 "ofPattern"
	class_operation public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates a formatter using the specified pattern.
<p>
This method will create a formatter based on a simple
<a href=\"#patterns\">pattern of letters and symbols</a>
as described in the class documentation.
For example, {@code d MMM uuuu} will format 2011-12-03 as '3 Dec 2011'.
<p>
The formatter will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.
This can be changed using {@link DateTimeFormatter#withLocale(Locale)} on the returned formatter
Alternatively use the {@link #ofPattern(String, Locale)} variant of this method.
<p>
The returned formatter has no override chronology or zone.
It uses {@link ResolverStyle#SMART SMART} resolver style.

@param pattern  the pattern to use, not null
@return the formatter based on the pattern, not null
@throws IllegalArgumentException if the pattern is invalid
@see DateTimeFormatterBuilder#appendPattern(String)
"
      end

      operation 8509954 "ofPattern"
	class_operation public return_type class_ref 1052930 // DateTimeFormatter
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a formatter using the specified pattern and locale.
<p>
This method will create a formatter based on a simple
<a href=\"#patterns\">pattern of letters and symbols</a>
as described in the class documentation.
For example, {@code d MMM uuuu} will format 2011-12-03 as '3 Dec 2011'.
<p>
The formatter will use the specified locale.
This can be changed using {@link DateTimeFormatter#withLocale(Locale)} on the returned formatter
<p>
The returned formatter has no override chronology or zone.
It uses {@link ResolverStyle#SMART SMART} resolver style.

@param pattern  the pattern to use, not null
@param locale  the locale to use, not null
@return the formatter based on the pattern, not null
@throws IllegalArgumentException if the pattern is invalid
@see DateTimeFormatterBuilder#appendPattern(String)
"
      end

      operation 8510082 "ofLocalizedDate"
	class_operation public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "dateStyle" type class_ref 1057666 // FormatStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a locale specific date format for the ISO chronology.
<p>
This returns a formatter that will format or parse a date.
The exact format pattern used varies by locale.
<p>
The locale is determined from the formatter. The formatter returned directly by
this method will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.
The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}
on the result of this method.
<p>
Note that the localized pattern is looked up lazily.
This {@code DateTimeFormatter} holds the style required and the locale,
looking up the pattern required on demand.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.

@param dateStyle  the formatter style to obtain, not null
@return the date formatter, not null
"
      end

      operation 8510210 "ofLocalizedTime"
	class_operation public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "timeStyle" type class_ref 1057666 // FormatStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a locale specific time format for the ISO chronology.
<p>
This returns a formatter that will format or parse a time.
The exact format pattern used varies by locale.
<p>
The locale is determined from the formatter. The formatter returned directly by
this method will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.
The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}
on the result of this method.
<p>
Note that the localized pattern is looked up lazily.
This {@code DateTimeFormatter} holds the style required and the locale,
looking up the pattern required on demand.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.

@param timeStyle  the formatter style to obtain, not null
@return the time formatter, not null
"
      end

      operation 8510338 "ofLocalizedDateTime"
	class_operation public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "dateTimeStyle" type class_ref 1057666 // FormatStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a locale specific date-time formatter for the ISO chronology.
<p>
This returns a formatter that will format or parse a date-time.
The exact format pattern used varies by locale.
<p>
The locale is determined from the formatter. The formatter returned directly by
this method will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.
The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}
on the result of this method.
<p>
Note that the localized pattern is looked up lazily.
This {@code DateTimeFormatter} holds the style required and the locale,
looking up the pattern required on demand.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.

@param dateTimeStyle  the formatter style to obtain, not null
@return the date-time formatter, not null
"
      end

      operation 8510466 "ofLocalizedDateTime"
	class_operation public return_type class_ref 1052930 // DateTimeFormatter
	nparams 2
	  param inout name "dateStyle" type class_ref 1057666 // FormatStyle
	  param inout name "timeStyle" type class_ref 1057666 // FormatStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a locale specific date and time format for the ISO chronology.
<p>
This returns a formatter that will format or parse a date-time.
The exact format pattern used varies by locale.
<p>
The locale is determined from the formatter. The formatter returned directly by
this method will use the {@link Locale#getDefault() default FORMAT locale}.
The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}
on the result of this method.
<p>
Note that the localized pattern is looked up lazily.
This {@code DateTimeFormatter} holds the style required and the locale,
looking up the pattern required on demand.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.

@param dateStyle  the date formatter style to obtain, not null
@param timeStyle  the time formatter style to obtain, not null
@return the date, time or date-time formatter, not null
"
      end

      classrelation 3450114 // ISO_LOCAL_DATE (<unidirectional association>)
	relation 3450114 --->
	  a role_name "ISO_LOCAL_DATE" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date formatter that formats or parses a date without an
offset, such as '2011-12-03'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended local date format.
The format consists of:
<ul>
<li>Four digits or more for the {@link ChronoField#YEAR year}.
Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.
Years outside that range will have a prefixed positive or negative symbol.
<li>A dash
<li>Two digits for the {@link ChronoField#MONTH_OF_YEAR month-of-year}.
 This is pre-padded by zero to ensure two digits.
<li>A dash
<li>Two digits for the {@link ChronoField#DAY_OF_MONTH day-of-month}.
 This is pre-padded by zero to ensure two digits.
</ul>
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3450114 // ISO_LOCAL_DATE (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 169218 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_LOCAL_DATE = new DateTimeFormatterBuilder()
                .appendValue(YEAR, 4, 10, SignStyle.EXCEEDS_PAD)
                .appendLiteral('-')
                .appendValue(MONTH_OF_YEAR, 2)
                .appendLiteral('-')
                .appendValue(DAY_OF_MONTH, 2)
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3450242 // ISO_OFFSET_DATE (<unidirectional association>)
	relation 3450242 --->
	  a role_name "ISO_OFFSET_DATE" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date formatter that formats or parses a date with an
offset, such as '2011-12-03+01:00'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended offset date format.
The format consists of:
<ul>
<li>The {@link #ISO_LOCAL_DATE}
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3450242 // ISO_OFFSET_DATE (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 169346 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_OFFSET_DATE = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .append(ISO_LOCAL_DATE)
                .appendOffsetId()
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3450370 // ISO_DATE (<unidirectional association>)
	relation 3450370 --->
	  a role_name "ISO_DATE" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date formatter that formats or parses a date with the
offset if available, such as '2011-12-03' or '2011-12-03+01:00'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended date format.
The format consists of:
<ul>
<li>The {@link #ISO_LOCAL_DATE}
<li>If the offset is not available then the format is complete.
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
As this formatter has an optional element, it may be necessary to parse using
{@link DateTimeFormatter#parseBest}.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3450370 // ISO_DATE (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 169474 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_DATE = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .append(ISO_LOCAL_DATE)
                .optionalStart()
                .appendOffsetId()
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3450498 // ISO_LOCAL_TIME (<unidirectional association>)
	relation 3450498 --->
	  a role_name "ISO_LOCAL_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO time formatter that formats or parses a time without an
offset, such as '10:15' or '10:15:30'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended local time format.
The format consists of:
<ul>
<li>Two digits for the {@link ChronoField#HOUR_OF_DAY hour-of-day}.
 This is pre-padded by zero to ensure two digits.
<li>A colon
<li>Two digits for the {@link ChronoField#MINUTE_OF_HOUR minute-of-hour}.
 This is pre-padded by zero to ensure two digits.
<li>If the second-of-minute is not available then the format is complete.
<li>A colon
<li>Two digits for the {@link ChronoField#SECOND_OF_MINUTE second-of-minute}.
 This is pre-padded by zero to ensure two digits.
<li>If the nano-of-second is zero or not available then the format is complete.
<li>A decimal point
<li>One to nine digits for the {@link ChronoField#NANO_OF_SECOND nano-of-second}.
 As many digits will be output as required.
</ul>
<p>
The returned formatter has no override chronology or zone.
It uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3450498 // ISO_LOCAL_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 169602 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_LOCAL_TIME = new DateTimeFormatterBuilder()
                .appendValue(HOUR_OF_DAY, 2)
                .appendLiteral(':')
                .appendValue(MINUTE_OF_HOUR, 2)
                .optionalStart()
                .appendLiteral(':')
                .appendValue(SECOND_OF_MINUTE, 2)
                .optionalStart()
                .appendFraction(NANO_OF_SECOND, 0, 9, true)
                .toFormatter(ResolverStyle.STRICT, null);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3450626 // ISO_OFFSET_TIME (<unidirectional association>)
	relation 3450626 --->
	  a role_name "ISO_OFFSET_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO time formatter that formats or parses a time with an
offset, such as '10:15+01:00' or '10:15:30+01:00'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended offset time format.
The format consists of:
<ul>
<li>The {@link #ISO_LOCAL_TIME}
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
The returned formatter has no override chronology or zone.
It uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3450626 // ISO_OFFSET_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 169730 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_OFFSET_TIME = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .append(ISO_LOCAL_TIME)
                .appendOffsetId()
                .toFormatter(ResolverStyle.STRICT, null);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3450754 // ISO_TIME (<unidirectional association>)
	relation 3450754 --->
	  a role_name "ISO_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO time formatter that formats or parses a time, with the
offset if available, such as '10:15', '10:15:30' or '10:15:30+01:00'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended offset time format.
The format consists of:
<ul>
<li>The {@link #ISO_LOCAL_TIME}
<li>If the offset is not available then the format is complete.
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
As this formatter has an optional element, it may be necessary to parse using
{@link DateTimeFormatter#parseBest}.
<p>
The returned formatter has no override chronology or zone.
It uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3450754 // ISO_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 169858 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_TIME = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .append(ISO_LOCAL_TIME)
                .optionalStart()
                .appendOffsetId()
                .toFormatter(ResolverStyle.STRICT, null);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3450882 // ISO_LOCAL_DATE_TIME (<unidirectional association>)
	relation 3450882 --->
	  a role_name "ISO_LOCAL_DATE_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date-time formatter that formats or parses a date-time without
an offset, such as '2011-12-03T10:15:30'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended offset date-time format.
The format consists of:
<ul>
<li>The {@link #ISO_LOCAL_DATE}
<li>The letter 'T'. Parsing is case insensitive.
<li>The {@link #ISO_LOCAL_TIME}
</ul>
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3450882 // ISO_LOCAL_DATE_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 169986 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_LOCAL_DATE_TIME = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .append(ISO_LOCAL_DATE)
                .appendLiteral('T')
                .append(ISO_LOCAL_TIME)
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451010 // ISO_OFFSET_DATE_TIME (<unidirectional association>)
	relation 3451010 --->
	  a role_name "ISO_OFFSET_DATE_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date-time formatter that formats or parses a date-time with an
offset, such as '2011-12-03T10:15:30+01:00'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended offset date-time format.
The format consists of:
<ul>
<li>The {@link #ISO_LOCAL_DATE_TIME}
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451010 // ISO_OFFSET_DATE_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 170114 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_OFFSET_DATE_TIME = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .append(ISO_LOCAL_DATE_TIME)
                .appendOffsetId()
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451138 // ISO_ZONED_DATE_TIME (<unidirectional association>)
	relation 3451138 --->
	  a role_name "ISO_ZONED_DATE_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO-like date-time formatter that formats or parses a date-time with
offset and zone, such as '2011-12-03T10:15:30+01:00[Europe/Paris]'.
<p>
This returns an immutable formatter capable of formatting and parsing
a format that extends the ISO-8601 extended offset date-time format
to add the time-zone.
The section in square brackets is not part of the ISO-8601 standard.
The format consists of:
<ul>
<li>The {@link #ISO_OFFSET_DATE_TIME}
<li>If the zone ID is not available or is a {@code ZoneOffset} then the format is complete.
<li>An open square bracket '['.
<li>The {@link ZoneId#getId() zone ID}. This is not part of the ISO-8601 standard.
 Parsing is case sensitive.
<li>A close square bracket ']'.
</ul>
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451138 // ISO_ZONED_DATE_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 170242 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_ZONED_DATE_TIME = new DateTimeFormatterBuilder()
                .append(ISO_OFFSET_DATE_TIME)
                .optionalStart()
                .appendLiteral('[')
                .parseCaseSensitive()
                .appendZoneRegionId()
                .appendLiteral(']')
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451266 // ISO_DATE_TIME (<unidirectional association>)
	relation 3451266 --->
	  a role_name "ISO_DATE_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO-like date-time formatter that formats or parses a date-time with
the offset and zone if available, such as '2011-12-03T10:15:30',
'2011-12-03T10:15:30+01:00' or '2011-12-03T10:15:30+01:00[Europe/Paris]'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended local or offset date-time format, as well as the
extended non-ISO form specifying the time-zone.
The format consists of:
<ul>
<li>The {@link #ISO_LOCAL_DATE_TIME}
<li>If the offset is not available to format or parse then the format is complete.
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
<li>If the zone ID is not available or is a {@code ZoneOffset} then the format is complete.
<li>An open square bracket '['.
<li>The {@link ZoneId#getId() zone ID}. This is not part of the ISO-8601 standard.
 Parsing is case sensitive.
<li>A close square bracket ']'.
</ul>
<p>
As this formatter has an optional element, it may be necessary to parse using
{@link DateTimeFormatter#parseBest}.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451266 // ISO_DATE_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 170370 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_DATE_TIME = new DateTimeFormatterBuilder()
                .append(ISO_LOCAL_DATE_TIME)
                .optionalStart()
                .appendOffsetId()
                .optionalStart()
                .appendLiteral('[')
                .parseCaseSensitive()
                .appendZoneRegionId()
                .appendLiteral(']')
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451394 // ISO_ORDINAL_DATE (<unidirectional association>)
	relation 3451394 --->
	  a role_name "ISO_ORDINAL_DATE" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date formatter that formats or parses the ordinal date
without an offset, such as '2012-337'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended ordinal date format.
The format consists of:
<ul>
<li>Four digits or more for the {@link ChronoField#YEAR year}.
Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.
Years outside that range will have a prefixed positive or negative symbol.
<li>A dash
<li>Three digits for the {@link ChronoField#DAY_OF_YEAR day-of-year}.
 This is pre-padded by zero to ensure three digits.
<li>If the offset is not available to format or parse then the format is complete.
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
As this formatter has an optional element, it may be necessary to parse using
{@link DateTimeFormatter#parseBest}.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451394 // ISO_ORDINAL_DATE (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 170498 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_ORDINAL_DATE = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .appendValue(YEAR, 4, 10, SignStyle.EXCEEDS_PAD)
                .appendLiteral('-')
                .appendValue(DAY_OF_YEAR, 3)
                .optionalStart()
                .appendOffsetId()
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451522 // ISO_WEEK_DATE (<unidirectional association>)
	relation 3451522 --->
	  a role_name "ISO_WEEK_DATE" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date formatter that formats or parses the week-based date
without an offset, such as '2012-W48-6'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 extended week-based date format.
The format consists of:
<ul>
<li>Four digits or more for the {@link IsoFields#WEEK_BASED_YEAR week-based-year}.
Years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits.
Years outside that range will have a prefixed positive or negative symbol.
<li>A dash
<li>The letter 'W'. Parsing is case insensitive.
<li>Two digits for the {@link IsoFields#WEEK_OF_WEEK_BASED_YEAR week-of-week-based-year}.
 This is pre-padded by zero to ensure three digits.
<li>A dash
<li>One digit for the {@link ChronoField#DAY_OF_WEEK day-of-week}.
 The value run from Monday (1) to Sunday (7).
<li>If the offset is not available to format or parse then the format is complete.
<li>The {@link ZoneOffset#getId() offset ID}. If the offset has seconds then
 they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
As this formatter has an optional element, it may be necessary to parse using
{@link DateTimeFormatter#parseBest}.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451522 // ISO_WEEK_DATE (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 170626 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_WEEK_DATE = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .appendValue(IsoFields.WEEK_BASED_YEAR, 4, 10, SignStyle.EXCEEDS_PAD)
                .appendLiteral(\"-W\")
                .appendValue(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 2)
                .appendLiteral('-')
                .appendValue(DAY_OF_WEEK, 1)
                .optionalStart()
                .appendOffsetId()
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451650 // ISO_INSTANT (<unidirectional association>)
	relation 3451650 --->
	  a role_name "ISO_INSTANT" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO instant formatter that formats or parses an instant in UTC,
such as '2011-12-03T10:15:30Z'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 instant format.
When formatting, the second-of-minute is always output.
The nano-of-second outputs zero, three, six or nine digits digits as necessary.
When parsing, time to at least the seconds field is required.
Fractional seconds from zero to nine are parsed.
The localized decimal style is not used.
<p>
This is a special case formatter intended to allow a human readable form
of an {@link java.time.Instant}. The {@code Instant} class is designed to
only represent a point in time and internally stores a value in nanoseconds
from a fixed epoch of 1970-01-01Z. As such, an {@code Instant} cannot be
formatted as a date or time without providing some form of time-zone.
This formatter allows the {@code Instant} to be formatted, by providing
a suitable conversion using {@code ZoneOffset.UTC}.
<p>
The format consists of:
<ul>
<li>The {@link #ISO_OFFSET_DATE_TIME} where the instant is converted from
 {@link ChronoField#INSTANT_SECONDS} and {@link ChronoField#NANO_OF_SECOND}
 using the {@code UTC} offset. Parsing is case insensitive.
</ul>
<p>
The returned formatter has no override chronology or zone.
It uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451650 // ISO_INSTANT (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 170754 "initialization"
	
	cpp "" ""
	java "  static {
        ISO_INSTANT = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .appendInstant()
                .toFormatter(ResolverStyle.STRICT, null);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451778 // BASIC_ISO_DATE (<unidirectional association>)
	relation 3451778 --->
	  a role_name "BASIC_ISO_DATE" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The ISO date formatter that formats or parses a date without an
offset, such as '20111203'.
<p>
This returns an immutable formatter capable of formatting and parsing
the ISO-8601 basic local date format.
The format consists of:
<ul>
<li>Four digits for the {@link ChronoField#YEAR year}.
 Only years in the range 0000 to 9999 are supported.
<li>Two digits for the {@link ChronoField#MONTH_OF_YEAR month-of-year}.
 This is pre-padded by zero to ensure two digits.
<li>Two digits for the {@link ChronoField#DAY_OF_MONTH day-of-month}.
 This is pre-padded by zero to ensure two digits.
<li>If the offset is not available to format or parse then the format is complete.
<li>The {@link ZoneOffset#getId() offset ID} without colons. If the offset has
 seconds then they will be handled even though this is not part of the ISO-8601 standard.
 Parsing is case insensitive.
</ul>
<p>
As this formatter has an optional element, it may be necessary to parse using
{@link DateTimeFormatter#parseBest}.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#STRICT STRICT} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451778 // BASIC_ISO_DATE (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 170882 "initialization"
	
	cpp "" ""
	java "  static {
        BASIC_ISO_DATE = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .appendValue(YEAR, 4)
                .appendValue(MONTH_OF_YEAR, 2)
                .appendValue(DAY_OF_MONTH, 2)
                .optionalStart()
                .appendOffset(\"+HHMMss\", \"Z\")
                .toFormatter(ResolverStyle.STRICT, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3451906 // RFC_1123_DATE_TIME (<unidirectional association>)
	relation 3451906 --->
	  a role_name "RFC_1123_DATE_TIME" class_relation const_relation public
	    comment "-----------------------------------------------------------------------

The RFC-1123 date-time formatter, such as 'Tue, 3 Jun 2008 11:05:30 GMT'.
<p>
This returns an immutable formatter capable of formatting and parsing
most of the RFC-1123 format.
RFC-1123 updates RFC-822 changing the year from two digits to four.
This implementation requires a four digit year.
This implementation also does not handle North American or military zone
names, only 'GMT' and offset amounts.
<p>
The format consists of:
<ul>
<li>If the day-of-week is not available to format or parse then jump to day-of-month.
<li>Three letter {@link ChronoField#DAY_OF_WEEK day-of-week} in English.
<li>A comma
<li>A space
<li>One or two digits for the {@link ChronoField#DAY_OF_MONTH day-of-month}.
<li>A space
<li>Three letter {@link ChronoField#MONTH_OF_YEAR month-of-year} in English.
<li>A space
<li>Four digits for the {@link ChronoField#YEAR year}.
 Only years in the range 0000 to 9999 are supported.
<li>A space
<li>Two digits for the {@link ChronoField#HOUR_OF_DAY hour-of-day}.
 This is pre-padded by zero to ensure two digits.
<li>A colon
<li>Two digits for the {@link ChronoField#MINUTE_OF_HOUR minute-of-hour}.
 This is pre-padded by zero to ensure two digits.
<li>If the second-of-minute is not available then jump to the next space.
<li>A colon
<li>Two digits for the {@link ChronoField#SECOND_OF_MINUTE second-of-minute}.
 This is pre-padded by zero to ensure two digits.
<li>A space
<li>The {@link ZoneOffset#getId() offset ID} without colons or seconds.
 An offset of zero uses \"GMT\". North American zone names and military zone names are not handled.
</ul>
<p>
Parsing is case insensitive.
<p>
The returned formatter has a chronology of ISO set to ensure dates in
other calendar systems are correctly converted.
It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3451906 // RFC_1123_DATE_TIME (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      extra_member 171010 "initialization"
	
	cpp "" ""
	java "  static {
        // manually code maps to ensure correct data always used
        // (locale data can be changed by application code)
        Map<Long, String> dow = new HashMap<>();
        dow.put(1L, \"Mon\");
        dow.put(2L, \"Tue\");
        dow.put(3L, \"Wed\");
        dow.put(4L, \"Thu\");
        dow.put(5L, \"Fri\");
        dow.put(6L, \"Sat\");
        dow.put(7L, \"Sun\");
        Map<Long, String> moy = new HashMap<>();
        moy.put(1L, \"Jan\");
        moy.put(2L, \"Feb\");
        moy.put(3L, \"Mar\");
        moy.put(4L, \"Apr\");
        moy.put(5L, \"May\");
        moy.put(6L, \"Jun\");
        moy.put(7L, \"Jul\");
        moy.put(8L, \"Aug\");
        moy.put(9L, \"Sep\");
        moy.put(10L, \"Oct\");
        moy.put(11L, \"Nov\");
        moy.put(12L, \"Dec\");
        RFC_1123_DATE_TIME = new DateTimeFormatterBuilder()
                .parseCaseInsensitive()
                .parseLenient()
                .optionalStart()
                .appendText(DAY_OF_WEEK, dow)
                .appendLiteral(\", \")
                .optionalEnd()
                .appendValue(DAY_OF_MONTH, 1, 2, SignStyle.NOT_NEGATIVE)
                .appendLiteral(' ')
                .appendText(MONTH_OF_YEAR, moy)
                .appendLiteral(' ')
                .appendValue(YEAR, 4)  // 2 digit year not handled
                .appendLiteral(' ')
                .appendValue(HOUR_OF_DAY, 2)
                .appendLiteral(':')
                .appendValue(MINUTE_OF_HOUR, 2)
                .optionalStart()
                .appendLiteral(':')
                .appendValue(SECOND_OF_MINUTE, 2)
                .optionalEnd()
                .appendLiteral(' ')
                .appendOffset(\"+HHMM\", \"GMT\")  // should handle UT/Z/EST/EDT/CST/CDT/MST/MDT/PST/MDT
                .toFormatter(ResolverStyle.SMART, IsoChronology.INSTANCE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 8510594 "parsedExcessDays"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Period> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

A query that provides access to the excess days that were parsed.
<p>
This returns a singleton {@linkplain TemporalQuery query} that provides
access to additional information from the parse. The query always returns
a non-null period, with a zero period returned instead of null.
<p>
There are two situations where this query may return a non-zero period.
<ul>
<li>If the {@code ResolverStyle} is {@code LENIENT} and a time is parsed
 without a date, then the complete result of the parse consists of a
 {@code LocalTime} and an excess {@code Period} in days.

<li>If the {@code ResolverStyle} is {@code SMART} and a time is parsed
 without a date where the time is 24:00:00, then the complete result of
 the parse consists of a {@code LocalTime} of 00:00:00 and an excess
 {@code Period} of one day.
</ul>
<p>
In both cases, if a complete {@code ChronoLocalDateTime} or {@code Instant}
is parsed, then the excess days are added to the date part.
As a result, this query will return a zero period.
<p>
The {@code SMART} behaviour handles the common \"end of day\" 24:00 value.
Processing in {@code LENIENT} mode also produces the same result:
<pre>
 Text to parse        Parsed object                         Excess days
 \"2012-12-03T00:00\"   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO
 \"2012-12-03T24:00\"   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO
 \"00:00\"              LocalTime.of(0, 0)                    ZERO
 \"24:00\"              LocalTime.of(0, 0)                    Period.ofDays(1)
</pre>
The query can be used as follows:
<pre>
 TemporalAccessor parsed = formatter.parse(str);
 LocalTime time = parsed.query(LocalTime::from);
 Period extraDays = parsed.query(DateTimeFormatter.parsedExcessDays());
</pre>
@return a query that provides access to the excess days that were parsed
"
      end

      classrelation 3452034 // PARSED_EXCESS_DAYS (<unidirectional association>)
	relation 3452034 --->
	  a role_name "PARSED_EXCESS_DAYS" init_value " t -> {
        if (t instanceof Parsed) {
            return ((Parsed) t).excessDays;
        } else {
            return Period.ZERO;
        }
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Period> ${name}${value};
"
	    classrelation_ref 3452034 // PARSED_EXCESS_DAYS (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      operation 8510722 "parsedLeapSecond"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Boolean> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A query that provides access to whether a leap-second was parsed.
<p>
This returns a singleton {@linkplain TemporalQuery query} that provides
access to additional information from the parse. The query always returns
a non-null boolean, true if parsing saw a leap-second, false if not.
<p>
Instant parsing handles the special \"leap second\" time of '23:59:60'.
Leap seconds occur at '23:59:60' in the UTC time-zone, but at other
local times in different time-zones. To avoid this potential ambiguity,
the handling of leap-seconds is limited to
{@link DateTimeFormatterBuilder#appendInstant()}, as that method
always parses the instant with the UTC zone offset.
<p>
If the time '23:59:60' is received, then a simple conversion is applied,
replacing the second-of-minute of 60 with 59. This query can be used
on the parse result to determine if the leap-second adjustment was made.
The query will return {@code true} if it did adjust to remove the
leap-second, and {@code false} if not. Note that applying a leap-second
smoothing mechanism, such as UTC-SLS, is the responsibility of the
application, as follows:
<pre>
 TemporalAccessor parsed = formatter.parse(str);
 Instant instant = parsed.query(Instant::from);
 if (parsed.query(DateTimeFormatter.parsedLeapSecond())) {
   // validate leap-second is correct and apply correct smoothing
 }
</pre>
@return a query that provides access to whether a leap-second was parsed
"
      end

      classrelation 3452162 // PARSED_LEAP_SECOND (<unidirectional association>)
	relation 3452162 --->
	  a role_name "PARSED_LEAP_SECOND" init_value " t -> {
        if (t instanceof Parsed) {
            return ((Parsed) t).leapSecond;
        } else {
            return Boolean.FALSE;
        }
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 3452162 // PARSED_LEAP_SECOND (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      operation 8510850 "DateTimeFormatter"
	package explicit_return_type ""
	nparams 7
	  param inout name "printerParser" type class_ref 1057410 // CompositePrinterParser
	  param inout name "locale" type class_ref 312962 // Locale
	  param inout name "decimalStyle" type class_ref 1057538 // DecimalStyle
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  param inout name "resolverFields" type class_ref 192258 // Set
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<TemporalField> ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param printerParser  the printer/parser to use, not null
@param locale  the locale to use, not null
@param decimalStyle  the DecimalStyle to use, not null
@param resolverStyle  the resolver style to use, not null
@param resolverFields  the fields to use during resolving, null for all fields
@param chrono  the chronology to use, null for no override
@param zone  the zone to use, null for no override
"
      end

      operation 8510978 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the locale to be used during formatting.
<p>
This is used to lookup any part of the formatter needing specific
localization, such as the text or localized pattern.

@return the locale of this formatter, not null
"
      end

      operation 8511106 "withLocale"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this formatter with a new locale.
<p>
This is used to lookup any part of the formatter needing specific
localization, such as the text or localized pattern.
<p>
This instance is immutable and unaffected by this method call.

@param locale  the new locale, not null
@return a formatter based on this formatter with the requested locale, not null
"
      end

      operation 8511234 "getDecimalStyle"
	public return_type class_ref 1057538 // DecimalStyle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the DecimalStyle to be used during formatting.

@return the locale of this formatter, not null
"
      end

      operation 8511362 "withDecimalStyle"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "decimalStyle" type class_ref 1057538 // DecimalStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this formatter with a new DecimalStyle.
<p>
This instance is immutable and unaffected by this method call.

@param decimalStyle  the new DecimalStyle, not null
@return a formatter based on this formatter with the requested DecimalStyle, not null
"
      end

      operation 8511490 "getChronology"
	public return_type class_ref 1052546 // Chronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the overriding chronology to be used during formatting.
<p>
This returns the override chronology, used to convert dates.
By default, a formatter has no override chronology, returning null.
See {@link #withChronology(Chronology)} for more details on overriding.

@return the override chronology of this formatter, null if no override
"
      end

      operation 8511618 "withChronology"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "chrono" type class_ref 1052546 // Chronology
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this formatter with a new override chronology.
<p>
This returns a formatter with similar state to this formatter but
with the override chronology set.
By default, a formatter has no override chronology, returning null.
<p>
If an override is added, then any date that is formatted or parsed will be affected.
<p>
When formatting, if the temporal object contains a date, then it will
be converted to a date in the override chronology.
Whether the temporal contains a date is determined by querying the
{@link ChronoField#EPOCH_DAY EPOCH_DAY} field.
Any time or zone will be retained unaltered unless overridden.
<p>
If the temporal object does not contain a date, but does contain one
or more {@code ChronoField} date fields, then a {@code DateTimeException}
is thrown. In all other cases, the override chronology is added to the temporal,
replacing any previous chronology, but without changing the date/time.
<p>
When parsing, there are two distinct cases to consider.
If a chronology has been parsed directly from the text, perhaps because
{@link DateTimeFormatterBuilder#appendChronologyId()} was used, then
this override chronology has no effect.
If no zone has been parsed, then this override chronology will be used
to interpret the {@code ChronoField} values into a date according to the
date resolving rules of the chronology.
<p>
This instance is immutable and unaffected by this method call.

@param chrono  the new chronology, null if no override
@return a formatter based on this formatter with the requested override chronology, not null
"
      end

      operation 8511746 "getZone"
	public return_type class_ref 1049730 // ZoneId
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the overriding zone to be used during formatting.
<p>
This returns the override zone, used to convert instants.
By default, a formatter has no override zone, returning null.
See {@link #withZone(ZoneId)} for more details on overriding.

@return the override zone of this formatter, null if no override
"
      end

      operation 8511874 "withZone"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this formatter with a new override zone.
<p>
This returns a formatter with similar state to this formatter but
with the override zone set.
By default, a formatter has no override zone, returning null.
<p>
If an override is added, then any instant that is formatted or parsed will be affected.
<p>
When formatting, if the temporal object contains an instant, then it will
be converted to a zoned date-time using the override zone.
Whether the temporal is an instant is determined by querying the
{@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS} field.
If the input has a chronology then it will be retained unless overridden.
If the input does not have a chronology, such as {@code Instant}, then
the ISO chronology will be used.
<p>
If the temporal object does not contain an instant, but does contain
an offset then an additional check is made. If the normalized override
zone is an offset that differs from the offset of the temporal, then
a {@code DateTimeException} is thrown. In all other cases, the override
zone is added to the temporal, replacing any previous zone, but without
changing the date/time.
<p>
When parsing, there are two distinct cases to consider.
If a zone has been parsed directly from the text, perhaps because
{@link DateTimeFormatterBuilder#appendZoneId()} was used, then
this override zone has no effect.
If no zone has been parsed, then this override zone will be included in
the result of the parse where it can be used to build instants and date-times.
<p>
This instance is immutable and unaffected by this method call.

@param zone  the new override zone, null if no override
@return a formatter based on this formatter with the requested override zone, not null
"
      end

      operation 8512002 "getResolverStyle"
	public return_type class_ref 1054850 // ResolverStyle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the resolver style to use during parsing.
<p>
This returns the resolver style, used during the second phase of parsing
when fields are resolved into dates and times.
By default, a formatter has the {@link ResolverStyle#SMART SMART} resolver style.
See {@link #withResolverStyle(ResolverStyle)} for more details.

@return the resolver style of this formatter, not null
"
      end

      operation 8512130 "withResolverStyle"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this formatter with a new resolver style.
<p>
This returns a formatter with similar state to this formatter but
with the resolver style set. By default, a formatter has the
{@link ResolverStyle#SMART SMART} resolver style.
<p>
Changing the resolver style only has an effect during parsing.
Parsing a text string occurs in two phases.
Phase 1 is a basic text parse according to the fields added to the builder.
Phase 2 resolves the parsed field-value pairs into date and/or time objects.
The resolver style is used to control how phase 2, resolving, happens.
See {@code ResolverStyle} for more information on the options available.
<p>
This instance is immutable and unaffected by this method call.

@param resolverStyle  the new resolver style, not null
@return a formatter based on this formatter with the requested resolver style, not null
"
      end

      operation 8512258 "getResolverFields"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TemporalField> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the resolver fields to use during parsing.
<p>
This returns the resolver fields, used during the second phase of parsing
when fields are resolved into dates and times.
By default, a formatter has no resolver fields, and thus returns null.
See {@link #withResolverFields(Set)} for more details.

@return the immutable set of resolver fields of this formatter, null if no fields
"
      end

      operation 8512386 "withResolverFields"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "" explicit_type "TemporalField...resolverFields"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this formatter with a new set of resolver fields.
<p>
This returns a formatter with similar state to this formatter but with
the resolver fields set. By default, a formatter has no resolver fields.
<p>
Changing the resolver fields only has an effect during parsing.
Parsing a text string occurs in two phases.
Phase 1 is a basic text parse according to the fields added to the builder.
Phase 2 resolves the parsed field-value pairs into date and/or time objects.
The resolver fields are used to filter the field-value pairs between phase 1 and 2.
<p>
This can be used to select between two or more ways that a date or time might
be resolved. For example, if the formatter consists of year, month, day-of-month
and day-of-year, then there are two ways to resolve a date.
Calling this method with the arguments {@link ChronoField#YEAR YEAR} and
{@link ChronoField#DAY_OF_YEAR DAY_OF_YEAR} will ensure that the date is
resolved using the year and day-of-year, effectively meaning that the month
and day-of-month are ignored during the resolving phase.
<p>
In a similar manner, this method can be used to ignore secondary fields that
would otherwise be cross-checked. For example, if the formatter consists of year,
month, day-of-month and day-of-week, then there is only one way to resolve a
date, but the parsed value for day-of-week will be cross-checked against the
resolved date. Calling this method with the arguments {@link ChronoField#YEAR YEAR},
{@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} and
{@link ChronoField#DAY_OF_MONTH DAY_OF_MONTH} will ensure that the date is
resolved correctly, but without any cross-check for the day-of-week.
<p>
In implementation terms, this method behaves as follows. The result of the
parsing phase can be considered to be a map of field to value. The behavior
of this method is to cause that map to be filtered between phase 1 and 2,
removing all fields other than those specified as arguments to this method.
<p>
This instance is immutable and unaffected by this method call.

@param resolverFields  the new set of resolver fields, null if no fields
@return a formatter based on this formatter with the requested resolver style, not null
"
      end

      operation 8512514 "withResolverFields"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "resolverFields" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this formatter with a new set of resolver fields.
<p>
This returns a formatter with similar state to this formatter but with
the resolver fields set. By default, a formatter has no resolver fields.
<p>
Changing the resolver fields only has an effect during parsing.
Parsing a text string occurs in two phases.
Phase 1 is a basic text parse according to the fields added to the builder.
Phase 2 resolves the parsed field-value pairs into date and/or time objects.
The resolver fields are used to filter the field-value pairs between phase 1 and 2.
<p>
This can be used to select between two or more ways that a date or time might
be resolved. For example, if the formatter consists of year, month, day-of-month
and day-of-year, then there are two ways to resolve a date.
Calling this method with the arguments {@link ChronoField#YEAR YEAR} and
{@link ChronoField#DAY_OF_YEAR DAY_OF_YEAR} will ensure that the date is
resolved using the year and day-of-year, effectively meaning that the month
and day-of-month are ignored during the resolving phase.
<p>
In a similar manner, this method can be used to ignore secondary fields that
would otherwise be cross-checked. For example, if the formatter consists of year,
month, day-of-month and day-of-week, then there is only one way to resolve a
date, but the parsed value for day-of-week will be cross-checked against the
resolved date. Calling this method with the arguments {@link ChronoField#YEAR YEAR},
{@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} and
{@link ChronoField#DAY_OF_MONTH DAY_OF_MONTH} will ensure that the date is
resolved correctly, but without any cross-check for the day-of-week.
<p>
In implementation terms, this method behaves as follows. The result of the
parsing phase can be considered to be a map of field to value. The behavior
of this method is to cause that map to be filtered between phase 1 and 2,
removing all fields other than those specified as arguments to this method.
<p>
This instance is immutable and unaffected by this method call.

@param resolverFields  the new set of resolver fields, null if no fields
@return a formatter based on this formatter with the requested resolver style, not null
"
      end

      operation 8512642 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Formats a date-time object using this formatter.
<p>
This formats the date-time to a String using the rules of the formatter.

@param temporal  the temporal object to format, not null
@return the formatted string, not null
@throws DateTimeException if an error occurs during formatting
"
      end

      operation 8512770 "formatTo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  param inout name "appendable" type class_ref 548866 // Appendable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Formats a date-time object to an {@code Appendable} using this formatter.
<p>
This outputs the formatted date-time to the specified destination.
{@link Appendable} is a general purpose interface that is implemented by all
key character output classes including {@code StringBuffer}, {@code StringBuilder},
{@code PrintStream} and {@code Writer}.
<p>
Although {@code Appendable} methods throw an {@code IOException}, this method does not.
Instead, any {@code IOException} is wrapped in a runtime exception.

@param temporal  the temporal object to format, not null
@param appendable  the appendable to format to, not null
@throws DateTimeException if an error occurs during formatting
"
      end

      operation 8512898 "parse"
	public return_type class_ref 1050754 // TemporalAccessor
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Fully parses the text producing a temporal object.
<p>
This parses the entire text producing a temporal object.
It is typically more useful to use {@link #parse(CharSequence, TemporalQuery)}.
The result of this method is {@code TemporalAccessor} which has been resolved,
applying basic validation checks to help ensure a valid date-time.
<p>
If the parse completes without reading the entire length of the text,
or a problem occurs during parsing or merging, then an exception is thrown.

@param text  the text to parse, not null
@return the parsed temporal object, not null
@throws DateTimeParseException if unable to parse the requested result
"
      end

      operation 8513026 "parse"
	public return_type class_ref 1050754 // TemporalAccessor
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "position" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the text using this formatter, providing control over the text position.
<p>
This parses the text without requiring the parse to start from the beginning
of the string or finish at the end.
The result of this method is {@code TemporalAccessor} which has been resolved,
applying basic validation checks to help ensure a valid date-time.
<p>
The text will be parsed from the specified start {@code ParsePosition}.
The entire length of the text does not have to be parsed, the {@code ParsePosition}
will be updated with the index at the end of parsing.
<p>
The operation of this method is slightly different to similar methods using
{@code ParsePosition} on {@code java.text.Format}. That class will return
errors using the error index on the {@code ParsePosition}. By contrast, this
method will throw a {@link DateTimeParseException} if an error occurs, with
the exception containing the error index.
This change in behavior is necessary due to the increased complexity of
parsing and resolving dates/times in this API.
<p>
If the formatter parses the same field more than once with different values,
the result will be an error.

@param text  the text to parse, not null
@param position  the position to parse from, updated with length parsed
 and the index of any error, not null
@return the parsed temporal object, not null
@throws DateTimeParseException if unable to parse the requested result
@throws IndexOutOfBoundsException if the position is invalid
"
      end

      operation 8513154 "parse"
	public explicit_return_type "T"
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Fully parses the text producing an object of the specified type.
<p>
Most applications should use this method for parsing.
It parses the entire text to produce the required date-time.
The query is typically a method reference to a {@code from(TemporalAccessor)} method.
For example:
<pre>
 LocalDateTime dt = parser.parse(str, LocalDateTime::from);
</pre>
If the parse completes without reading the entire length of the text,
or a problem occurs during parsing or merging, then an exception is thrown.

@param <T> the type of the parsed date-time
@param text  the text to parse, not null
@param query  the query defining the type to parse to, not null
@return the parsed date-time, not null
@throws DateTimeParseException if unable to parse the requested result
"
      end

      operation 8513282 "parseBest"
	public return_type class_ref 1050754 // TemporalAccessor
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "queries" explicit_type "TemporalQuery<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fully parses the text producing an object of one of the specified types.
<p>
This parse method is convenient for use when the parser can handle optional elements.
For example, a pattern of 'uuuu-MM-dd HH.mm[ VV]' can be fully parsed to a {@code ZonedDateTime},
or partially parsed to a {@code LocalDateTime}.
The queries must be specified in order, starting from the best matching full-parse option
and ending with the worst matching minimal parse option.
The query is typically a method reference to a {@code from(TemporalAccessor)} method.
<p>
The result is associated with the first type that successfully parses.
Normally, applications will use {@code instanceof} to check the result.
For example:
<pre>
 TemporalAccessor dt = parser.parseBest(str, ZonedDateTime::from, LocalDateTime::from);
 if (dt instanceof ZonedDateTime) {
  ...
 } else {
  ...
 }
</pre>
If the parse completes without reading the entire length of the text,
or a problem occurs during parsing or merging, then an exception is thrown.

@param text  the text to parse, not null
@param queries  the queries defining the types to attempt to parse to,
 must implement {@code TemporalAccessor}, not null
@return the parsed date-time, not null
@throws IllegalArgumentException if less than 2 types are specified
@throws DateTimeParseException if unable to parse the requested result
"
      end

      operation 8513410 "createError"
	private return_type class_ref 1057794 // DateTimeParseException
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "ex" type class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8513538 "parseResolved0"
	private return_type class_ref 1050754 // TemporalAccessor
	nparams 2
	  param in name "text" type class_ref 429442 // CharSequence
	  param in name "position" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Parses and resolves the specified text.
<p>
This parses to a {@code TemporalAccessor} ensuring that the text is fully parsed.

@param text  the text to parse, not null
@param position  the position to parse from, updated with length parsed
 and the index of any error, null if parsing whole string
@return the resolved result of the parse, not null
@throws DateTimeParseException if the parse fails
@throws DateTimeException if an error occurs while resolving the date or time
@throws IndexOutOfBoundsException if the position is invalid
"
      end

      operation 8513666 "parseUnresolved"
	public return_type class_ref 1050754 // TemporalAccessor
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "position" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the text using this formatter, without resolving the result, intended
for advanced use cases.
<p>
Parsing is implemented as a two-phase operation.
First, the text is parsed using the layout defined by the formatter, producing
a {@code Map} of field to value, a {@code ZoneId} and a {@code Chronology}.
Second, the parsed data is <em>resolved</em>, by validating, combining and
simplifying the various fields into more useful ones.
This method performs the parsing stage but not the resolving stage.
<p>
The result of this method is {@code TemporalAccessor} which represents the
data as seen in the input. Values are not validated, thus parsing a date string
of '2012-00-65' would result in a temporal with three fields - year of '2012',
month of '0' and day-of-month of '65'.
<p>
The text will be parsed from the specified start {@code ParsePosition}.
The entire length of the text does not have to be parsed, the {@code ParsePosition}
will be updated with the index at the end of parsing.
<p>
Errors are returned using the error index field of the {@code ParsePosition}
instead of {@code DateTimeParseException}.
The returned error index will be set to an index indicative of the error.
Callers must check for errors before using the result.
<p>
If the formatter parses the same field more than once with different values,
the result will be an error.
<p>
This method is intended for advanced use cases that need access to the
internal state during parsing. Typical application code should use
{@link #parse(CharSequence, TemporalQuery)} or the parse method on the target type.

@param text  the text to parse, not null
@param position  the position to parse from, updated with length parsed
 and the index of any error, not null
@return the parsed text, null if the parse results in an error
@throws DateTimeException if some problem occurs during parsing
@throws IndexOutOfBoundsException if the position is invalid
"
      end

      operation 8513794 "parseUnresolved0"
	private return_type class_ref 1057922 // DateTimeParseContext
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "position" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8513922 "toPrinterParser"
	package return_type class_ref 1057410 // CompositePrinterParser
	nparams 1
	  param inout name "optional" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the formatter as a composite printer parser.

@param optional  whether the printer/parser should be optional
@return the printer/parser, not null
"
      end

      operation 8514050 "toFormat"
	public return_type class_ref 1045250 // Format
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this formatter as a {@code java.text.Format} instance.
<p>
The returned {@link Format} instance will format any {@link TemporalAccessor}
and parses to a resolved {@link TemporalAccessor}.
<p>
Exceptions will follow the definitions of {@code Format}, see those methods
for details about {@code IllegalArgumentException} during formatting and
{@code ParseException} or null during parsing.
The format does not support attributing of the returned format string.

@return this formatter as a classic format instance, not null
"
      end

      operation 8514178 "toFormat"
	public return_type class_ref 1045250 // Format
	nparams 1
	  param inout name "parseQuery" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this formatter as a {@code java.text.Format} instance that will
parse using the specified query.
<p>
The returned {@link Format} instance will format any {@link TemporalAccessor}
and parses to the type specified.
The type must be one that is supported by {@link #parse}.
<p>
Exceptions will follow the definitions of {@code Format}, see those methods
for details about {@code IllegalArgumentException} during formatting and
{@code ParseException} or null during parsing.
The format does not support attributing of the returned format string.

@param parseQuery  the query defining the type to parse to, not null
@return this formatter as a classic format instance, not null
"
      end

      operation 8514306 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a description of the underlying formatters.

@return a description of this formatter, not null
"
      end

      class 1058050 "ClassicFormat"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	comment " not actually serializable"
	classrelation 3452290 // <generalisation>
	  relation 3452290 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3452290 // <generalisation>
	    b parent class_ref 1045250 // Format
	end

	classrelation 3452418 // formatter (<unidirectional association>)
	  relation 3452418 --->
	    a role_name "formatter" const_relation private
	      comment " The formatter. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3452418 // formatter (<unidirectional association>)
	    b parent class_ref 1052930 // DateTimeFormatter
	end

	classrelation 3452546 // parseType (<unidirectional association>)
	  relation 3452546 --->
	    a role_name "parseType" const_relation private
	      comment " The type to be parsed. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3452546 // parseType (<unidirectional association>)
	    b parent class_ref 1051138 // TemporalQuery
	end

	operation 8514434 "ClassicFormat"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	    param inout name "parseType" type class_ref 1051138 // TemporalQuery
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Constructor. "
	end

	operation 8514562 "format"
	  public return_type class_ref 166018 // StringBuffer
	  nparams 3
	    param inout name "obj" type class_ref 129538 // Object
	    param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	    param inout name "pos" type class_ref 637186 // FieldPosition
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8514690 "parseObject"
	  public return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "text" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 372482 // ParseException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8514818 "parseObject"
	  public return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "text" type class_ref 128130 // String
	    param inout name "pos" type class_ref 1045506 // ParsePosition
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1054850 "ResolverStyle"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration of different ways to resolve dates and times.
<p>
Parsing a text string occurs in two phases.
Phase 1 is a basic text parse according to the fields added to the builder.
Phase 2 resolves the parsed field-value pairs into date and/or time objects.
This style is used to control how phase 2, resolving, happens.

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      attribute 1966210 "STRICT"
	public type class_ref 1054850 // ResolverStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to resolve dates and times strictly.
<p>
Using strict resolution will ensure that all parsed values are within
the outer range of valid values for the field. Individual fields may
be further processed for strictness.
<p>
For example, resolving year-month and day-of-month in the ISO calendar
system using strict mode will ensure that the day-of-month is valid
for the year-month, rejecting invalid values.

"
      end

      attribute 1966338 "SMART"
	public type class_ref 1054850 // ResolverStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to resolve dates and times in a smart, or intelligent, manner.
<p>
Using smart resolution will perform the sensible default for each
field, which may be the same as strict, the same as lenient, or a third
behavior. Individual fields will interpret this differently.
<p>
For example, resolving year-month and day-of-month in the ISO calendar
system using smart mode will ensure that the day-of-month is from
1 to 31, converting any value beyond the last valid day-of-month to be
the last valid day-of-month.

"
      end

      attribute 1966466 "LENIENT"
	public type class_ref 1054850 // ResolverStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to resolve dates and times leniently.
<p>
Using lenient resolution will resolve the values in an appropriate
lenient manner. Individual fields will interpret this differently.
<p>
For example, lenient mode allows the month in the ISO calendar system
to be outside the range 1 to 12.
For example, month 15 is treated as being 3 months after month 12.
"
      end
    end

    class 1057282 "DateTimeFormatterBuilder"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Builder to create date-time formatters.
<p>
This allows a {@code DateTimeFormatter} to be created.
All date-time formatters are created ultimately using this builder.
<p>
The basic elements of date-time can all be added:
<ul>
<li>Value - a numeric value</li>
<li>Fraction - a fractional value including the decimal place. Always use this when
outputting fractions to ensure that the fraction is parsed correctly</li>
<li>Text - the textual equivalent for the value</li>
<li>OffsetId/Offset - the {@linkplain ZoneOffset zone offset}</li>
<li>ZoneId - the {@linkplain ZoneId time-zone} id</li>
<li>ZoneText - the name of the time-zone</li>
<li>ChronologyId - the {@linkplain Chronology chronology} id</li>
<li>ChronologyText - the name of the chronology</li>
<li>Literal - a text literal</li>
<li>Nested and Optional - formats can be nested or made optional</li>
</ul>
In addition, any of the elements may be decorated by padding, either with spaces or any other character.
<p>
Finally, a shorthand pattern, mostly compatible with {@code java.text.SimpleDateFormat SimpleDateFormat}
can be used, see {@link #appendPattern(String)}.
In practice, this simply parses the pattern and calls other methods on the builder.

@implSpec
This class is a mutable builder intended for use from a single thread.

@since 1.8
"
      class 1057410 "CompositePrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3453314 // <realization>
	  relation 3453314 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3453314 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3453442 // printerParsers (<unidirectional association>)
	  relation 3453442 --->
	    a role_name "printerParsers" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3453442 // printerParsers (<unidirectional association>)
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	attribute 1960962 "optional"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8521346 "CompositePrinterParser"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "printerParsers" type class_ref 175362 // List
	    param inout name "optional" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<DateTimePrinterParser> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8521474 "CompositePrinterParser"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "printerParsers" type class_ref 1058178 // DateTimePrinterParser
	  multiplicity "[]"
	    param inout name "optional" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8521602 "withOptional"
	  public return_type class_ref 1057410 // CompositePrinterParser
	  nparams 1
	    param inout name "optional" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a copy of this printer-parser with the optional flag changed.

@param optional  the optional flag to set in the copy
@return the new printer-parser, not null
"
	end

	operation 8521730 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8521858 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8521986 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3452674 // QUERY_REGION_ONLY (<unidirectional association>)
	relation 3452674 --->
	  a role_name "QUERY_REGION_ONLY" init_value " (temporal) -> {
        ZoneId zone = temporal.query(TemporalQueries.zoneId());
        return (zone != null && zone instanceof ZoneOffset == false ? zone : null);
    }" class_relation const_relation private
	    comment "
Query for a time-zone that is region-only.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ZoneId> ${name}${value};
"
	    classrelation_ref 3452674 // QUERY_REGION_ONLY (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      classrelation 3452802 // active (<unidirectional association>)
	relation 3452802 --->
	  a role_name "active" init_value " this" private
	    comment "
The currently active builder, used by the outermost builder.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3452802 // active (<unidirectional association>)
	  b parent class_ref 1057282 // DateTimeFormatterBuilder
      end

      classrelation 3452930 // parent (<unidirectional association>)
	relation 3452930 --->
	  a role_name "parent" const_relation private
	    comment "
The parent builder, null for the outermost builder.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3452930 // parent (<unidirectional association>)
	  b parent class_ref 1057282 // DateTimeFormatterBuilder
      end

      class 1058178 "DateTimePrinterParser"
	visibility package stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 8521090 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Prints the date-time object to the buffer.
<p>
The context holds information to use during the format.
It also contains the date-time information to be printed.
<p>
The buffer must not be mutated beyond the content controlled by the implementation.

@param context  the context to format using, not null
@param buf  the buffer to append to, not null
@return false if unable to query the value from the date-time, true otherwise
@throws DateTimeException if the date-time cannot be printed successfully
"
	end

	operation 8521218 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Parses text into date-time information.
<p>
The context holds information to use during the parse.
It is also used to store the parsed date-time information.

@param context  the context to use and parse into, not null
@param text  the input text to parse, not null
@param position  the position to start parsing at, from 0 to the text length
@return the new parse position, where negative means an error with the
 error position encoded using the complement ~ operator
@throws NullPointerException if the context or text is null
@throws IndexOutOfBoundsException if the position is invalid
"
	end
      end

      classrelation 3453058 // printerParsers (<unidirectional association>)
	relation 3453058 --->
	  a role_name "printerParsers" init_value " new ArrayList<>()" const_relation private
	    comment "
The list of printers that will be used.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DateTimePrinterParser> ${name}${value};
"
	    classrelation_ref 3453058 // printerParsers (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      attribute 1960450 "optional"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Whether this builder produces an optional formatter.

"
      end

      attribute 1960578 "padNextWidth"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The width to pad the next field to.

"
      end

      attribute 1960706 "padNextChar"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The character to pad the next field with.

"
      end

      attribute 1960834 "valueParserIndex"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the last variable width value parser.

"
      end

      operation 8514946 "getLocalizedDateTimePattern"
	class_operation public return_type class_ref 128130 // String
	nparams 4
	  param inout name "dateStyle" type class_ref 1057666 // FormatStyle
	  param inout name "timeStyle" type class_ref 1057666 // FormatStyle
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the formatting pattern for date and time styles for a locale and chronology.
The locale and chronology are used to lookup the locale specific format
for the requested dateStyle and/or timeStyle.

@param dateStyle  the FormatStyle for the date, null for time-only pattern
@param timeStyle  the FormatStyle for the time, null for date-only pattern
@param chrono  the Chronology, non-null
@param locale  the locale, non-null
@return the locale and Chronology specific formatting pattern
@throws IllegalArgumentException if both dateStyle and timeStyle are null
"
      end

      operation 8515074 "convertStyle"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "style" type class_ref 1057666 // FormatStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the given FormatStyle to the java.text.DateFormat style.

@param style  the FormatStyle style
@return the int style, or -1 if style is null, indicating un-required
"
      end

      operation 8515202 "DateTimeFormatterBuilder"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of the builder.
"
      end

      operation 8515330 "DateTimeFormatterBuilder"
	private explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 1057282 // DateTimeFormatterBuilder
	  param inout name "optional" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of the builder.

@param parent  the parent builder, not null
@param optional  whether the formatter is optional, not null
"
      end

      operation 8515458 "parseCaseSensitive"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Changes the parse style to be case sensitive for the remainder of the formatter.
<p>
Parsing can be case sensitive or insensitive - by default it is case sensitive.
This method allows the case sensitivity setting of parsing to be changed.
<p>
Calling this method changes the state of the builder such that all
subsequent builder method calls will parse text in case sensitive mode.
See {@link #parseCaseInsensitive} for the opposite setting.
The parse case sensitive/insensitive methods may be called at any point
in the builder, thus the parser can swap between case parsing modes
multiple times during the parse.
<p>
Since the default is case sensitive, this method should only be used after
a previous call to {@code #parseCaseInsensitive}.

@return this, for chaining, not null
"
      end

      operation 8515586 "parseCaseInsensitive"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the parse style to be case insensitive for the remainder of the formatter.
<p>
Parsing can be case sensitive or insensitive - by default it is case sensitive.
This method allows the case sensitivity setting of parsing to be changed.
<p>
Calling this method changes the state of the builder such that all
subsequent builder method calls will parse text in case insensitive mode.
See {@link #parseCaseSensitive()} for the opposite setting.
The parse case sensitive/insensitive methods may be called at any point
in the builder, thus the parser can swap between case parsing modes
multiple times during the parse.

@return this, for chaining, not null
"
      end

      operation 8515714 "parseStrict"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Changes the parse style to be strict for the remainder of the formatter.
<p>
Parsing can be strict or lenient - by default its strict.
This controls the degree of flexibility in matching the text and sign styles.
<p>
When used, this method changes the parsing to be strict from this point onwards.
As strict is the default, this is normally only needed after calling {@link #parseLenient()}.
The change will remain in force until the end of the formatter that is eventually
constructed or until {@code parseLenient} is called.

@return this, for chaining, not null
"
      end

      operation 8515842 "parseLenient"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the parse style to be lenient for the remainder of the formatter.
Note that case sensitivity is set separately to this method.
<p>
Parsing can be strict or lenient - by default its strict.
This controls the degree of flexibility in matching the text and sign styles.
Applications calling this method should typically also call {@link #parseCaseInsensitive()}.
<p>
When used, this method changes the parsing to be lenient from this point onwards.
The change will remain in force until the end of the formatter that is eventually
constructed or until {@code parseStrict} is called.

@return this, for chaining, not null
"
      end

      operation 8515970 "parseDefaulting"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends a default value for a field to the formatter for use in parsing.
<p>
This appends an instruction to the builder to inject a default value
into the parsed result. This is especially useful in conjunction with
optional parts of the formatter.
<p>
For example, consider a formatter that parses the year, followed by
an optional month, with a further optional day-of-month. Using such a
formatter would require the calling code to check whether a full date,
year-month or just a year had been parsed. This method can be used to
default the month and day-of-month to a sensible value, such as the
first of the month, allowing the calling code to always get a date.
<p>
During formatting, this method has no effect.
<p>
During parsing, the current state of the parse is inspected.
If the specified field has no associated value, because it has not been
parsed successfully at that point, then the specified value is injected
into the parse result. Injection is immediate, thus the field-value pair
will be visible to any subsequent elements in the formatter.
As such, this method is normally called at the end of the builder.

@param field  the field to default the value of, not null
@param value  the value to default the field to
@return this, for chaining, not null
"
      end

      operation 8516098 "appendValue"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the value of a date-time field to the formatter using a normal
output style.
<p>
The value of the field will be output during a format.
If the value cannot be obtained then an exception will be thrown.
<p>
The value will be printed as per the normal format of an integer value.
Only negative numbers will be signed. No padding will be added.
<p>
The parser for a variable width value such as this normally behaves greedily,
requiring one digit, but accepting as many digits as possible.
This behavior can be affected by 'adjacent value parsing'.
See {@link #appendValue(java.time.temporal.TemporalField, int)} for full details.

@param field  the field to append, not null
@return this, for chaining, not null
"
      end

      operation 8516226 "appendValue"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "width" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the value of a date-time field to the formatter using a fixed
width, zero-padded approach.
<p>
The value of the field will be output during a format.
If the value cannot be obtained then an exception will be thrown.
<p>
The value will be zero-padded on the left. If the size of the value
means that it cannot be printed within the width then an exception is thrown.
If the value of the field is negative then an exception is thrown during formatting.
<p>
This method supports a special technique of parsing known as 'adjacent value parsing'.
This technique solves the problem where a value, variable or fixed width, is followed by one or more
fixed length values. The standard parser is greedy, and thus it would normally
steal the digits that are needed by the fixed width value parsers that follow the
variable width one.
<p>
No action is required to initiate 'adjacent value parsing'.
When a call to {@code appendValue} is made, the builder
enters adjacent value parsing setup mode. If the immediately subsequent method
call or calls on the same builder are for a fixed width value, then the parser will reserve
space so that the fixed width values can be parsed.
<p>
For example, consider {@code builder.appendValue(YEAR).appendValue(MONTH_OF_YEAR, 2);}
The year is a variable width parse of between 1 and 19 digits.
The month is a fixed width parse of 2 digits.
Because these were appended to the same builder immediately after one another,
the year parser will reserve two digits for the month to parse.
Thus, the text '201106' will correctly parse to a year of 2011 and a month of 6.
Without adjacent value parsing, the year would greedily parse all six digits and leave
nothing for the month.
<p>
Adjacent value parsing applies to each set of fixed width not-negative values in the parser
that immediately follow any kind of value, variable or fixed width.
Calling any other append method will end the setup of adjacent value parsing.
Thus, in the unlikely event that you need to avoid adjacent value parsing behavior,
simply add the {@code appendValue} to another {@code DateTimeFormatterBuilder}
and add that to this builder.
<p>
If adjacent parsing is active, then parsing must match exactly the specified
number of digits in both strict and lenient modes.
In addition, no positive or negative sign is permitted.

@param field  the field to append, not null
@param width  the width of the printed field, from 1 to 19
@return this, for chaining, not null
@throws IllegalArgumentException if the width is invalid
"
      end

      operation 8516354 "appendValue"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 4
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "minWidth" explicit_type "int"
	  param in name "maxWidth" explicit_type "int"
	  param inout name "signStyle" type class_ref 1058306 // SignStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the value of a date-time field to the formatter providing full
control over formatting.
<p>
The value of the field will be output during a format.
If the value cannot be obtained then an exception will be thrown.
<p>
This method provides full control of the numeric formatting, including
zero-padding and the positive/negative sign.
<p>
The parser for a variable width value such as this normally behaves greedily,
accepting as many digits as possible.
This behavior can be affected by 'adjacent value parsing'.
See {@link #appendValue(java.time.temporal.TemporalField, int)} for full details.
<p>
In strict parsing mode, the minimum number of parsed digits is {@code minWidth}
and the maximum is {@code maxWidth}.
In lenient parsing mode, the minimum number of parsed digits is one
and the maximum is 19 (except as limited by adjacent value parsing).
<p>
If this method is invoked with equal minimum and maximum widths and a sign style of
{@code NOT_NEGATIVE} then it delegates to {@code appendValue(TemporalField,int)}.
In this scenario, the formatting and parsing behavior described there occur.

@param field  the field to append, not null
@param minWidth  the minimum field width of the printed field, from 1 to 19
@param maxWidth  the maximum field width of the printed field, from 1 to 19
@param signStyle  the positive/negative output style, not null
@return this, for chaining, not null
@throws IllegalArgumentException if the widths are invalid
"
      end

      operation 8516482 "appendValueReduced"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 4
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "width" explicit_type "int"
	  param in name "maxWidth" explicit_type "int"
	  param in name "baseValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the reduced value of a date-time field to the formatter.
<p>
Since fields such as year vary by chronology, it is recommended to use the
{@link #appendValueReduced(TemporalField, int, int, ChronoLocalDate)} date}
variant of this method in most cases. This variant is suitable for
simple fields or working with only the ISO chronology.
<p>
For formatting, the {@code width} and {@code maxWidth} are used to
determine the number of characters to format.
If they are equal then the format is fixed width.
If the value of the field is within the range of the {@code baseValue} using
{@code width} characters then the reduced value is formatted otherwise the value is
truncated to fit {@code maxWidth}.
The rightmost characters are output to match the width, left padding with zero.
<p>
For strict parsing, the number of characters allowed by {@code width} to {@code maxWidth} are parsed.
For lenient parsing, the number of characters must be at least 1 and less than 10.
If the number of digits parsed is equal to {@code width} and the value is positive,
the value of the field is computed to be the first number greater than
or equal to the {@code baseValue} with the same least significant characters,
otherwise the value parsed is the field value.
This allows a reduced value to be entered for values in range of the baseValue
and width and absolute values can be entered for values outside the range.
<p>
For example, a base value of {@code 1980} and a width of {@code 2} will have
valid values from {@code 1980} to {@code 2079}.
During parsing, the text {@code \"12\"} will result in the value {@code 2012} as that
is the value within the range where the last two characters are \"12\".
By contrast, parsing the text {@code \"1915\"} will result in the value {@code 1915}.

@param field  the field to append, not null
@param width  the field width of the printed and parsed field, from 1 to 10
@param maxWidth  the maximum field width of the printed field, from 1 to 10
@param baseValue  the base value of the range of valid values
@return this, for chaining, not null
@throws IllegalArgumentException if the width or base value is invalid
"
      end

      operation 8516610 "appendValueReduced"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 4
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "width" explicit_type "int"
	  param in name "maxWidth" explicit_type "int"
	  param inout name "baseDate" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the reduced value of a date-time field to the formatter.
<p>
This is typically used for formatting and parsing a two digit year.
<p>
The base date is used to calculate the full value during parsing.
For example, if the base date is 1950-01-01 then parsed values for
a two digit year parse will be in the range 1950-01-01 to 2049-12-31.
Only the year would be extracted from the date, thus a base date of
1950-08-25 would also parse to the range 1950-01-01 to 2049-12-31.
This behavior is necessary to support fields such as week-based-year
or other calendar systems where the parsed value does not align with
standard ISO years.
<p>
The exact behavior is as follows. Parse the full set of fields and
determine the effective chronology using the last chronology if
it appears more than once. Then convert the base date to the
effective chronology. Then extract the specified field from the
chronology-specific base date and use it to determine the
{@code baseValue} used below.
<p>
For formatting, the {@code width} and {@code maxWidth} are used to
determine the number of characters to format.
If they are equal then the format is fixed width.
If the value of the field is within the range of the {@code baseValue} using
{@code width} characters then the reduced value is formatted otherwise the value is
truncated to fit {@code maxWidth}.
The rightmost characters are output to match the width, left padding with zero.
<p>
For strict parsing, the number of characters allowed by {@code width} to {@code maxWidth} are parsed.
For lenient parsing, the number of characters must be at least 1 and less than 10.
If the number of digits parsed is equal to {@code width} and the value is positive,
the value of the field is computed to be the first number greater than
or equal to the {@code baseValue} with the same least significant characters,
otherwise the value parsed is the field value.
This allows a reduced value to be entered for values in range of the baseValue
and width and absolute values can be entered for values outside the range.
<p>
For example, a base value of {@code 1980} and a width of {@code 2} will have
valid values from {@code 1980} to {@code 2079}.
During parsing, the text {@code \"12\"} will result in the value {@code 2012} as that
is the value within the range where the last two characters are \"12\".
By contrast, parsing the text {@code \"1915\"} will result in the value {@code 1915}.

@param field  the field to append, not null
@param width  the field width of the printed and parsed field, from 1 to 10
@param maxWidth  the maximum field width of the printed field, from 1 to 10
@param baseDate  the base date used to calculate the base value for the range
 of valid values in the parsed chronology, not null
@return this, for chaining, not null
@throws IllegalArgumentException if the width or base value is invalid
"
      end

      operation 8516738 "appendValue"
	private return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "pp" type class_ref 1058434 // NumberPrinterParser
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a fixed or variable width printer-parser handling adjacent value mode.
If a PrinterParser is not active then the new PrinterParser becomes
the active PrinterParser.
Otherwise, the active PrinterParser is modified depending on the new PrinterParser.
If the new PrinterParser is fixed width and has sign style {@code NOT_NEGATIVE}
then its width is added to the active PP and
the new PrinterParser is forced to be fixed width.
If the new PrinterParser is variable width, the active PrinterParser is changed
to be fixed width and the new PrinterParser becomes the active PP.

@param pp  the printer-parser, not null
@return this, for chaining, not null
"
      end

      class 1058434 "NumberPrinterParser"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3454594 // <realization>
	  relation 3454594 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3454594 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	attribute 1962114 "EXCEED_POINTS"
	  class_attribute const_attribute package explicit_type "long"
	  multiplicity "[]"
	  init_value " new long[] {
            0L,
            10L,
            100L,
            1000L,
            10000L,
            100000L,
            1000000L,
            10000000L,
            100000000L,
            1000000000L,
            10000000000L,
        }"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Array of 10 to the power of n.

"
	end

	classrelation 3454722 // field (<unidirectional association>)
	  relation 3454722 --->
	    a role_name "field" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3454722 // field (<unidirectional association>)
	    b parent class_ref 1050882 // TemporalField
	end

	attribute 1962242 "minWidth"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1962370 "maxWidth"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3454850 // signStyle (<unidirectional association>)
	  relation 3454850 --->
	    a role_name "signStyle" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3454850 // signStyle (<unidirectional association>)
	    b parent class_ref 1058306 // SignStyle
	end

	attribute 1962498 "subsequentWidth"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8524418 "NumberPrinterParser"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "field" type class_ref 1050882 // TemporalField
	    param in name "minWidth" explicit_type "int"
	    param in name "maxWidth" explicit_type "int"
	    param inout name "signStyle" type class_ref 1058306 // SignStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param field  the field to format, not null
@param minWidth  the minimum field width, from 1 to 19
@param maxWidth  the maximum field width, from minWidth to 19
@param signStyle  the positive/negative sign style, not null
"
	end

	operation 8524546 "NumberPrinterParser"
	  protected explicit_return_type ""
	  nparams 5
	    param inout name "field" type class_ref 1050882 // TemporalField
	    param in name "minWidth" explicit_type "int"
	    param in name "maxWidth" explicit_type "int"
	    param inout name "signStyle" type class_ref 1058306 // SignStyle
	    param in name "subsequentWidth" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param field  the field to format, not null
@param minWidth  the minimum field width, from 1 to 19
@param maxWidth  the maximum field width, from minWidth to 19
@param signStyle  the positive/negative sign style, not null
@param subsequentWidth  the width of subsequent non-negative numbers, 0 or greater,
 -1 if fixed width due to active adjacent parsing
"
	end

	operation 8524674 "withFixedWidth"
	  package return_type class_ref 1058434 // NumberPrinterParser
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new instance with fixed width flag set.

@return a new updated printer-parser, not null
"
	end

	operation 8524802 "withSubsequentWidth"
	  package return_type class_ref 1058434 // NumberPrinterParser
	  nparams 1
	    param in name "subsequentWidth" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new instance with an updated subsequent width.

@param subsequentWidth  the width of subsequent non-negative numbers, 0 or greater
@return a new updated printer-parser, not null
"
	end

	operation 8524930 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8525058 "getValue"
	  package explicit_return_type "long"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param in name "value" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value to output.

@param context  the context
@param value  the value of the field, not null
@return the value
"
	end

	operation 8525186 "isFixedWidth"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "For NumberPrinterParser, the width is fixed depending on the
minWidth, maxWidth, signStyle and whether subsequent fields are fixed.
@param context the context
@return true if the field is fixed width
@see DateTimeFormatterBuilder#appendValue(java.time.temporal.TemporalField, int)
"
	end

	operation 8525314 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8525442 "setValue"
	  package explicit_return_type "int"
	  nparams 4
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param in name "value" explicit_type "long"
	    param in name "errorPos" explicit_type "int"
	    param in name "successPos" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Stores the value.

@param context  the context to store into, not null
@param value  the value
@param errorPos  the position of the field being parsed
@param successPos  the position after the field being parsed
@return the new position
"
	end

	operation 8525570 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 8516866 "appendFraction"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 4
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "minWidth" explicit_type "int"
	  param in name "maxWidth" explicit_type "int"
	  param inout name "decimalPoint" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the fractional value of a date-time field to the formatter.
<p>
The fractional value of the field will be output including the
preceding decimal point. The preceding value is not output.
For example, the second-of-minute value of 15 would be output as {@code .25}.
<p>
The width of the printed fraction can be controlled. Setting the
minimum width to zero will cause no output to be generated.
The printed fraction will have the minimum width necessary between
the minimum and maximum widths - trailing zeroes are omitted.
No rounding occurs due to the maximum width - digits are simply dropped.
<p>
When parsing in strict mode, the number of parsed digits must be between
the minimum and maximum width. When parsing in lenient mode, the minimum
width is considered to be zero and the maximum is nine.
<p>
If the value cannot be obtained then an exception will be thrown.
If the value is negative an exception will be thrown.
If the field does not have a fixed set of valid values then an
exception will be thrown.
If the field value in the date-time to be printed is invalid it
cannot be printed and an exception will be thrown.

@param field  the field to append, not null
@param minWidth  the minimum width of the field excluding the decimal point, from 0 to 9
@param maxWidth  the maximum width of the field excluding the decimal point, from 1 to 9
@param decimalPoint  whether to output the localized decimal point symbol
@return this, for chaining, not null
@throws IllegalArgumentException if the field has a variable set of valid values or
 either width is invalid
"
      end

      operation 8516994 "appendText"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the text of a date-time field to the formatter using the full
text style.
<p>
The text of the field will be output during a format.
The value must be within the valid range of the field.
If the value cannot be obtained then an exception will be thrown.
If the field has no textual representation, then the numeric value will be used.
<p>
The value will be printed as per the normal format of an integer value.
Only negative numbers will be signed. No padding will be added.

@param field  the field to append, not null
@return this, for chaining, not null
"
      end

      operation 8517122 "appendText"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param inout name "textStyle" type class_ref 1051522 // TextStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the text of a date-time field to the formatter.
<p>
The text of the field will be output during a format.
The value must be within the valid range of the field.
If the value cannot be obtained then an exception will be thrown.
If the field has no textual representation, then the numeric value will be used.
<p>
The value will be printed as per the normal format of an integer value.
Only negative numbers will be signed. No padding will be added.

@param field  the field to append, not null
@param textStyle  the text style to use, not null
@return this, for chaining, not null
"
      end

      operation 8517250 "appendText"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param inout name "textLookup" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<Long, String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the text of a date-time field to the formatter using the specified
map to supply the text.
<p>
The standard text outputting methods use the localized text in the JDK.
This method allows that text to be specified directly.
The supplied map is not validated by the builder to ensure that formatting or
parsing is possible, thus an invalid map may throw an error during later use.
<p>
Supplying the map of text provides considerable flexibility in formatting and parsing.
For example, a legacy application might require or supply the months of the
year as \"JNY\", \"FBY\", \"MCH\" etc. These do not match the standard set of text
for localized month names. Using this method, a map can be created which
defines the connection between each value and the text:
<pre>
Map&lt;Long, String&gt; map = new HashMap&lt;&gt;();
map.put(1L, \"JNY\");
map.put(2L, \"FBY\");
map.put(3L, \"MCH\");
...
builder.appendText(MONTH_OF_YEAR, map);
</pre>
<p>
Other uses might be to output the value with a suffix, such as \"1st\", \"2nd\", \"3rd\",
or as Roman numerals \"I\", \"II\", \"III\", \"IV\".
<p>
During formatting, the value is obtained and checked that it is in the valid range.
If text is not available for the value then it is output as a number.
During parsing, the parser will match against the map of text and numeric values.

@param field  the field to append, not null
@param textLookup  the map from the value to the text
@return this, for chaining, not null
"
      end

      operation 8517378 "appendInstant"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends an instant using ISO-8601 to the formatter, formatting fractional
digits in groups of three.
<p>
Instants have a fixed output format.
They are converted to a date-time with a zone-offset of UTC and formatted
using the standard ISO-8601 format.
With this method, formatting nano-of-second outputs zero, three, six
or nine digits digits as necessary.
The localized decimal style is not used.
<p>
The instant is obtained using {@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS}
and optionally (@code NANO_OF_SECOND). The value of {@code INSTANT_SECONDS}
may be outside the maximum range of {@code LocalDateTime}.
<p>
The {@linkplain ResolverStyle resolver style} has no effect on instant parsing.
The end-of-day time of '24:00' is handled as midnight at the start of the following day.
The leap-second time of '23:59:59' is handled to some degree, see
{@link DateTimeFormatter#parsedLeapSecond()} for full details.
<p>
An alternative to this method is to format/parse the instant as a single
epoch-seconds value. That is achieved using {@code appendValue(INSTANT_SECONDS)}.

@return this, for chaining, not null
"
      end

      operation 8517506 "appendInstant"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param in name "fractionalDigits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends an instant using ISO-8601 to the formatter with control over
the number of fractional digits.
<p>
Instants have a fixed output format, although this method provides some
control over the fractional digits. They are converted to a date-time
with a zone-offset of UTC and printed using the standard ISO-8601 format.
The localized decimal style is not used.
<p>
The {@code fractionalDigits} parameter allows the output of the fractional
second to be controlled. Specifying zero will cause no fractional digits
to be output. From 1 to 9 will output an increasing number of digits, using
zero right-padding if necessary. The special value -1 is used to output as
many digits as necessary to avoid any trailing zeroes.
<p>
When parsing in strict mode, the number of parsed digits must match the
fractional digits. When parsing in lenient mode, any number of fractional
digits from zero to nine are accepted.
<p>
The instant is obtained using {@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS}
and optionally (@code NANO_OF_SECOND). The value of {@code INSTANT_SECONDS}
may be outside the maximum range of {@code LocalDateTime}.
<p>
The {@linkplain ResolverStyle resolver style} has no effect on instant parsing.
The end-of-day time of '24:00' is handled as midnight at the start of the following day.
The leap-second time of '23:59:60' is handled to some degree, see
{@link DateTimeFormatter#parsedLeapSecond()} for full details.
<p>
An alternative to this method is to format/parse the instant as a single
epoch-seconds value. That is achieved using {@code appendValue(INSTANT_SECONDS)}.

@param fractionalDigits  the number of fractional second digits to format with,
 from 0 to 9, or -1 to use as many digits as necessary
@return this, for chaining, not null
"
      end

      operation 8517634 "appendOffsetId"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the zone offset, such as '+01:00', to the formatter.
<p>
This appends an instruction to format/parse the offset ID to the builder.
This is equivalent to calling {@code appendOffset(\"+HH:MM:ss\", \"Z\")}.

@return this, for chaining, not null
"
      end

      operation 8517762 "appendOffset"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "noOffsetText" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the zone offset, such as '+01:00', to the formatter.
<p>
This appends an instruction to format/parse the offset ID to the builder.
<p>
During formatting, the offset is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#offset()}.
It will be printed using the format defined below.
If the offset cannot be obtained then an exception is thrown unless the
section of the formatter is optional.
<p>
During parsing, the offset is parsed using the format defined below.
If the offset cannot be parsed then an exception is thrown unless the
section of the formatter is optional.
<p>
The format of the offset is controlled by a pattern which must be one
of the following:
<ul>
<li>{@code +HH} - hour only, ignoring minute and second
<li>{@code +HHmm} - hour, with minute if non-zero, ignoring second, no colon
<li>{@code +HH:mm} - hour, with minute if non-zero, ignoring second, with colon
<li>{@code +HHMM} - hour and minute, ignoring second, no colon
<li>{@code +HH:MM} - hour and minute, ignoring second, with colon
<li>{@code +HHMMss} - hour and minute, with second if non-zero, no colon
<li>{@code +HH:MM:ss} - hour and minute, with second if non-zero, with colon
<li>{@code +HHMMSS} - hour, minute and second, no colon
<li>{@code +HH:MM:SS} - hour, minute and second, with colon
</ul>
The \"no offset\" text controls what text is printed when the total amount of
the offset fields to be output is zero.
Example values would be 'Z', '+00:00', 'UTC' or 'GMT'.
Three formats are accepted for parsing UTC - the \"no offset\" text, and the
plus and minus versions of zero defined by the pattern.

@param pattern  the pattern to use, not null
@param noOffsetText  the text to use when the offset is zero, not null
@return this, for chaining, not null
"
      end

      operation 8517890 "appendLocalizedOffset"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "style" type class_ref 1051522 // TextStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the localized zone offset, such as 'GMT+01:00', to the formatter.
<p>
This appends a localized zone offset to the builder, the format of the
localized offset is controlled by the specified {@link FormatStyle style}
to this method:
<ul>
<li>{@link TextStyle#FULL full} - formats with localized offset text, such
as 'GMT, 2-digit hour and minute field, optional second field if non-zero,
and colon.
<li>{@link TextStyle#SHORT short} - formats with localized offset text,
such as 'GMT, hour without leading zero, optional 2-digit minute and
second if non-zero, and colon.
</ul>
<p>
During formatting, the offset is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#offset()}.
If the offset cannot be obtained then an exception is thrown unless the
section of the formatter is optional.
<p>
During parsing, the offset is parsed using the format defined above.
If the offset cannot be parsed then an exception is thrown unless the
section of the formatter is optional.
<p>
@param style  the format style to use, not null
@return this, for chaining, not null
@throws IllegalArgumentException if style is neither {@link TextStyle#FULL
full} nor {@link TextStyle#SHORT short}
"
      end

      operation 8518018 "appendZoneId"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter.
<p>
This appends an instruction to format/parse the zone ID to the builder.
The zone ID is obtained in a strict manner suitable for {@code ZonedDateTime}.
By contrast, {@code OffsetDateTime} does not have a zone ID suitable
for use with this method, see {@link #appendZoneOrOffsetId()}.
<p>
During formatting, the zone is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#zoneId()}.
It will be printed using the result of {@link ZoneId#getId()}.
If the zone cannot be obtained then an exception is thrown unless the
section of the formatter is optional.
<p>
During parsing, the text must match a known zone or offset.
There are two types of zone ID, offset-based, such as '+01:30' and
region-based, such as 'Europe/London'. These are parsed differently.
If the parse starts with '+', '-', 'UT', 'UTC' or 'GMT', then the parser
expects an offset-based zone and will not match region-based zones.
The offset ID, such as '+02:30', may be at the start of the parse,
or prefixed by  'UT', 'UTC' or 'GMT'. The offset ID parsing is
equivalent to using {@link #appendOffset(String, String)} using the
arguments 'HH:MM:ss' and the no offset string '0'.
If the parse starts with 'UT', 'UTC' or 'GMT', and the parser cannot
match a following offset ID, then {@link ZoneOffset#UTC} is selected.
In all other cases, the list of known region-based zones is used to
find the longest available match. If no match is found, and the parse
starts with 'Z', then {@code ZoneOffset.UTC} is selected.
The parser uses the {@linkplain #parseCaseInsensitive() case sensitive} setting.
<p>
For example, the following will parse:
<pre>
  \"Europe/London\"           -- ZoneId.of(\"Europe/London\")
  \"Z\"                       -- ZoneOffset.UTC
  \"UT\"                      -- ZoneId.of(\"UT\")
  \"UTC\"                     -- ZoneId.of(\"UTC\")
  \"GMT\"                     -- ZoneId.of(\"GMT\")
  \"+01:30\"                  -- ZoneOffset.of(\"+01:30\")
  \"UT+01:30\"                -- ZoneOffset.of(\"+01:30\")
  \"UTC+01:30\"               -- ZoneOffset.of(\"+01:30\")
  \"GMT+01:30\"               -- ZoneOffset.of(\"+01:30\")
</pre>

@return this, for chaining, not null
@see #appendZoneRegionId()
"
      end

      operation 8518146 "appendZoneRegionId"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the time-zone region ID, such as 'Europe/Paris', to the formatter,
rejecting the zone ID if it is a {@code ZoneOffset}.
<p>
This appends an instruction to format/parse the zone ID to the builder
only if it is a region-based ID.
<p>
During formatting, the zone is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#zoneId()}.
If the zone is a {@code ZoneOffset} or it cannot be obtained then
an exception is thrown unless the section of the formatter is optional.
If the zone is not an offset, then the zone will be printed using
the zone ID from {@link ZoneId#getId()}.
<p>
During parsing, the text must match a known zone or offset.
There are two types of zone ID, offset-based, such as '+01:30' and
region-based, such as 'Europe/London'. These are parsed differently.
If the parse starts with '+', '-', 'UT', 'UTC' or 'GMT', then the parser
expects an offset-based zone and will not match region-based zones.
The offset ID, such as '+02:30', may be at the start of the parse,
or prefixed by  'UT', 'UTC' or 'GMT'. The offset ID parsing is
equivalent to using {@link #appendOffset(String, String)} using the
arguments 'HH:MM:ss' and the no offset string '0'.
If the parse starts with 'UT', 'UTC' or 'GMT', and the parser cannot
match a following offset ID, then {@link ZoneOffset#UTC} is selected.
In all other cases, the list of known region-based zones is used to
find the longest available match. If no match is found, and the parse
starts with 'Z', then {@code ZoneOffset.UTC} is selected.
The parser uses the {@linkplain #parseCaseInsensitive() case sensitive} setting.
<p>
For example, the following will parse:
<pre>
  \"Europe/London\"           -- ZoneId.of(\"Europe/London\")
  \"Z\"                       -- ZoneOffset.UTC
  \"UT\"                      -- ZoneId.of(\"UT\")
  \"UTC\"                     -- ZoneId.of(\"UTC\")
  \"GMT\"                     -- ZoneId.of(\"GMT\")
  \"+01:30\"                  -- ZoneOffset.of(\"+01:30\")
  \"UT+01:30\"                -- ZoneOffset.of(\"+01:30\")
  \"UTC+01:30\"               -- ZoneOffset.of(\"+01:30\")
  \"GMT+01:30\"               -- ZoneOffset.of(\"+01:30\")
</pre>
<p>
Note that this method is identical to {@code appendZoneId()} except
in the mechanism used to obtain the zone.
Note also that parsing accepts offsets, whereas formatting will never
produce one.

@return this, for chaining, not null
@see #appendZoneId()
"
      end

      operation 8518274 "appendZoneOrOffsetId"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to
the formatter, using the best available zone ID.
<p>
This appends an instruction to format/parse the best available
zone or offset ID to the builder.
The zone ID is obtained in a lenient manner that first attempts to
find a true zone ID, such as that on {@code ZonedDateTime}, and
then attempts to find an offset, such as that on {@code OffsetDateTime}.
<p>
During formatting, the zone is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#zone()}.
It will be printed using the result of {@link ZoneId#getId()}.
If the zone cannot be obtained then an exception is thrown unless the
section of the formatter is optional.
<p>
During parsing, the text must match a known zone or offset.
There are two types of zone ID, offset-based, such as '+01:30' and
region-based, such as 'Europe/London'. These are parsed differently.
If the parse starts with '+', '-', 'UT', 'UTC' or 'GMT', then the parser
expects an offset-based zone and will not match region-based zones.
The offset ID, such as '+02:30', may be at the start of the parse,
or prefixed by  'UT', 'UTC' or 'GMT'. The offset ID parsing is
equivalent to using {@link #appendOffset(String, String)} using the
arguments 'HH:MM:ss' and the no offset string '0'.
If the parse starts with 'UT', 'UTC' or 'GMT', and the parser cannot
match a following offset ID, then {@link ZoneOffset#UTC} is selected.
In all other cases, the list of known region-based zones is used to
find the longest available match. If no match is found, and the parse
starts with 'Z', then {@code ZoneOffset.UTC} is selected.
The parser uses the {@linkplain #parseCaseInsensitive() case sensitive} setting.
<p>
For example, the following will parse:
<pre>
  \"Europe/London\"           -- ZoneId.of(\"Europe/London\")
  \"Z\"                       -- ZoneOffset.UTC
  \"UT\"                      -- ZoneId.of(\"UT\")
  \"UTC\"                     -- ZoneId.of(\"UTC\")
  \"GMT\"                     -- ZoneId.of(\"GMT\")
  \"+01:30\"                  -- ZoneOffset.of(\"+01:30\")
  \"UT+01:30\"                -- ZoneOffset.of(\"UT+01:30\")
  \"UTC+01:30\"               -- ZoneOffset.of(\"UTC+01:30\")
  \"GMT+01:30\"               -- ZoneOffset.of(\"GMT+01:30\")
</pre>
<p>
Note that this method is identical to {@code appendZoneId()} except
in the mechanism used to obtain the zone.

@return this, for chaining, not null
@see #appendZoneId()
"
      end

      operation 8518402 "appendZoneText"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "textStyle" type class_ref 1051522 // TextStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the time-zone name, such as 'British Summer Time', to the formatter.
<p>
This appends an instruction to format/parse the textual name of the zone to
the builder.
<p>
During formatting, the zone is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#zoneId()}.
If the zone is a {@code ZoneOffset} it will be printed using the
result of {@link ZoneOffset#getId()}.
If the zone is not an offset, the textual name will be looked up
for the locale set in the {@link DateTimeFormatter}.
If the temporal object being printed represents an instant, then the text
will be the summer or winter time text as appropriate.
If the lookup for text does not find any suitable result, then the
{@link ZoneId#getId() ID} will be printed instead.
If the zone cannot be obtained then an exception is thrown unless the
section of the formatter is optional.
<p>
During parsing, either the textual zone name, the zone ID or the offset
is accepted. Many textual zone names are not unique, such as CST can be
for both \"Central Standard Time\" and \"China Standard Time\". In this
situation, the zone id will be determined by the region information from
formatter's  {@link DateTimeFormatter#getLocale() locale} and the standard
zone id for that area, for example, America/New_York for the America Eastern
zone. The {@link #appendZoneText(TextStyle, Set)} may be used
to specify a set of preferred {@link ZoneId} in this situation.

@param textStyle  the text style to use, not null
@return this, for chaining, not null
"
      end

      operation 8518530 "appendZoneText"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param inout name "textStyle" type class_ref 1051522 // TextStyle
	  param inout name "preferredZones" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<ZoneId> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the time-zone name, such as 'British Summer Time', to the formatter.
<p>
This appends an instruction to format/parse the textual name of the zone to
the builder.
<p>
During formatting, the zone is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#zoneId()}.
If the zone is a {@code ZoneOffset} it will be printed using the
result of {@link ZoneOffset#getId()}.
If the zone is not an offset, the textual name will be looked up
for the locale set in the {@link DateTimeFormatter}.
If the temporal object being printed represents an instant, then the text
will be the summer or winter time text as appropriate.
If the lookup for text does not find any suitable result, then the
{@link ZoneId#getId() ID} will be printed instead.
If the zone cannot be obtained then an exception is thrown unless the
section of the formatter is optional.
<p>
During parsing, either the textual zone name, the zone ID or the offset
is accepted. Many textual zone names are not unique, such as CST can be
for both \"Central Standard Time\" and \"China Standard Time\". In this
situation, the zone id will be determined by the region information from
formatter's  {@link DateTimeFormatter#getLocale() locale} and the standard
zone id for that area, for example, America/New_York for the America Eastern
zone. This method also allows a set of preferred {@link ZoneId} to be
specified for parsing. The matched preferred zone id will be used if the
textural zone name being parsed is not unique.
<p>
If the zone cannot be parsed then an exception is thrown unless the
section of the formatter is optional.

@param textStyle  the text style to use, not null
@param preferredZones  the set of preferred zone ids, not null
@return this, for chaining, not null
"
      end

      operation 8518658 "appendChronologyId"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the chronology ID, such as 'ISO' or 'ThaiBuddhist', to the formatter.
<p>
This appends an instruction to format/parse the chronology ID to the builder.
<p>
During formatting, the chronology is obtained using a mechanism equivalent
to querying the temporal with {@link TemporalQueries#chronology()}.
It will be printed using the result of {@link Chronology#getId()}.
If the chronology cannot be obtained then an exception is thrown unless the
section of the formatter is optional.
<p>
During parsing, the chronology is parsed and must match one of the chronologies
in {@link Chronology#getAvailableChronologies()}.
If the chronology cannot be parsed then an exception is thrown unless the
section of the formatter is optional.
The parser uses the {@linkplain #parseCaseInsensitive() case sensitive} setting.

@return this, for chaining, not null
"
      end

      operation 8518786 "appendChronologyText"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "textStyle" type class_ref 1051522 // TextStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the chronology name to the formatter.
<p>
The calendar system name will be output during a format.
If the chronology cannot be obtained then an exception will be thrown.

@param textStyle  the text style to use, not null
@return this, for chaining, not null
"
      end

      operation 8518914 "appendLocalized"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param inout name "dateStyle" type class_ref 1057666 // FormatStyle
	  param inout name "timeStyle" type class_ref 1057666 // FormatStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends a localized date-time pattern to the formatter.
<p>
This appends a localized section to the builder, suitable for outputting
a date, time or date-time combination. The format of the localized
section is lazily looked up based on four items:
<ul>
<li>the {@code dateStyle} specified to this method
<li>the {@code timeStyle} specified to this method
<li>the {@code Locale} of the {@code DateTimeFormatter}
<li>the {@code Chronology}, selecting the best available
</ul>
During formatting, the chronology is obtained from the temporal object
being formatted, which may have been overridden by
{@link DateTimeFormatter#withChronology(Chronology)}.
<p>
During parsing, if a chronology has already been parsed, then it is used.
Otherwise the default from {@code DateTimeFormatter.withChronology(Chronology)}
is used, with {@code IsoChronology} as the fallback.
<p>
Note that this method provides similar functionality to methods on
{@code DateFormat} such as {@link java.text.DateFormat#getDateTimeInstance(int, int)}.

@param dateStyle  the date style to use, null means no date required
@param timeStyle  the time style to use, null means no time required
@return this, for chaining, not null
@throws IllegalArgumentException if both the date and time styles are null
"
      end

      operation 8519042 "appendLiteral"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param in name "literal" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends a character literal to the formatter.
<p>
This character will be output during a format.

@param literal  the literal to append, not null
@return this, for chaining, not null
"
      end

      operation 8519170 "appendLiteral"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "literal" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a string literal to the formatter.
<p>
This string will be output during a format.
<p>
If the literal is empty, nothing is added to the formatter.

@param literal  the literal to append, not null
@return this, for chaining, not null
"
      end

      operation 8519298 "append"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends all the elements of a formatter to the builder.
<p>
This method has the same effect as appending each of the constituent
parts of the formatter directly to this builder.

@param formatter  the formatter to add, not null
@return this, for chaining, not null
"
      end

      operation 8519426 "appendOptional"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a formatter to the builder which will optionally format/parse.
<p>
This method has the same effect as appending each of the constituent
parts directly to this builder surrounded by an {@link #optionalStart()} and
{@link #optionalEnd()}.
<p>
The formatter will format if data is available for all the fields contained within it.
The formatter will parse if the string matches, otherwise no error is returned.

@param formatter  the formatter to add, not null
@return this, for chaining, not null
"
      end

      operation 8519554 "appendPattern"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends the elements defined by the specified pattern to the builder.
<p>
All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters.
The characters '#', '{' and '}' are reserved for future use.
The characters '[' and ']' indicate optional patterns.
The following pattern letters are defined:
<pre>
 Symbol  Meaning                     Presentation      Examples
 ------  -------                     ------------      -------
  G       era                         text              AD; Anno Domini; A
  u       year                        year              2004; 04
  y       year-of-era                 year              2004; 04
  D       day-of-year                 number            189
  M/L     month-of-year               number/text       7; 07; Jul; July; J
  d       day-of-month                number            10

  Q/q     quarter-of-year             number/text       3; 03; Q3; 3rd quarter
  Y       week-based-year             year              1996; 96
  w       week-of-week-based-year     number            27
  W       week-of-month               number            4
  E       day-of-week                 text              Tue; Tuesday; T
  e/c     localized day-of-week       number/text       2; 02; Tue; Tuesday; T
  F       week-of-month               number            3

  a       am-pm-of-day                text              PM
  h       clock-hour-of-am-pm (1-12)  number            12
  K       hour-of-am-pm (0-11)        number            0
  k       clock-hour-of-am-pm (1-24)  number            0

  H       hour-of-day (0-23)          number            0
  m       minute-of-hour              number            30
  s       second-of-minute            number            55
  S       fraction-of-second          fraction          978
  A       milli-of-day                number            1234
  n       nano-of-second              number            987654321
  N       nano-of-day                 number            1234000000

  V       time-zone ID                zone-id           America/Los_Angeles; Z; -08:30
  z       time-zone name              zone-name         Pacific Standard Time; PST
  O       localized zone-offset       offset-O          GMT+8; GMT+08:00; UTC-08:00;
  X       zone-offset 'Z' for zero    offset-X          Z; -08; -0830; -08:30; -083015; -08:30:15;
  x       zone-offset                 offset-x          +0000; -08; -0830; -08:30; -083015; -08:30:15;
  Z       zone-offset                 offset-Z          +0000; -0800; -08:00;

  p       pad next                    pad modifier      1

  '       escape for text             delimiter
  ''      single quote                literal           '
  [       optional section start
  ]       optional section end
  #       reserved for future use
  {       reserved for future use
  }       reserved for future use
</pre>
<p>
The count of pattern letters determine the format.
See <a href=\"DateTimeFormatter.html#patterns\">DateTimeFormatter</a> for a user-focused description of the patterns.
The following tables define how the pattern letters map to the builder.
<p>
<b>Date fields</b>: Pattern letters to output a date.
<pre>
 Pattern  Count  Equivalent builder methods
 -------  -----  --------------------------
   G       1      appendText(ChronoField.ERA, TextStyle.SHORT)
   GG      2      appendText(ChronoField.ERA, TextStyle.SHORT)
   GGG     3      appendText(ChronoField.ERA, TextStyle.SHORT)
   GGGG    4      appendText(ChronoField.ERA, TextStyle.FULL)
   GGGGG   5      appendText(ChronoField.ERA, TextStyle.NARROW)

   u       1      appendValue(ChronoField.YEAR, 1, 19, SignStyle.NORMAL);
   uu      2      appendValueReduced(ChronoField.YEAR, 2, 2000);
   uuu     3      appendValue(ChronoField.YEAR, 3, 19, SignStyle.NORMAL);
   u..u    4..n   appendValue(ChronoField.YEAR, n, 19, SignStyle.EXCEEDS_PAD);
   y       1      appendValue(ChronoField.YEAR_OF_ERA, 1, 19, SignStyle.NORMAL);
   yy      2      appendValueReduced(ChronoField.YEAR_OF_ERA, 2, 2000);
   yyy     3      appendValue(ChronoField.YEAR_OF_ERA, 3, 19, SignStyle.NORMAL);
   y..y    4..n   appendValue(ChronoField.YEAR_OF_ERA, n, 19, SignStyle.EXCEEDS_PAD);
   Y       1      append special localized WeekFields element for numeric week-based-year
   YY      2      append special localized WeekFields element for reduced numeric week-based-year 2 digits;
   YYY     3      append special localized WeekFields element for numeric week-based-year (3, 19, SignStyle.NORMAL);
   Y..Y    4..n   append special localized WeekFields element for numeric week-based-year (n, 19, SignStyle.EXCEEDS_PAD);

   Q       1      appendValue(IsoFields.QUARTER_OF_YEAR);
   QQ      2      appendValue(IsoFields.QUARTER_OF_YEAR, 2);
   QQQ     3      appendText(IsoFields.QUARTER_OF_YEAR, TextStyle.SHORT)
   QQQQ    4      appendText(IsoFields.QUARTER_OF_YEAR, TextStyle.FULL)
   QQQQQ   5      appendText(IsoFields.QUARTER_OF_YEAR, TextStyle.NARROW)
   q       1      appendValue(IsoFields.QUARTER_OF_YEAR);
   qq      2      appendValue(IsoFields.QUARTER_OF_YEAR, 2);
   qqq     3      appendText(IsoFields.QUARTER_OF_YEAR, TextStyle.SHORT_STANDALONE)
   qqqq    4      appendText(IsoFields.QUARTER_OF_YEAR, TextStyle.FULL_STANDALONE)
   qqqqq   5      appendText(IsoFields.QUARTER_OF_YEAR, TextStyle.NARROW_STANDALONE)

   M       1      appendValue(ChronoField.MONTH_OF_YEAR);
   MM      2      appendValue(ChronoField.MONTH_OF_YEAR, 2);
   MMM     3      appendText(ChronoField.MONTH_OF_YEAR, TextStyle.SHORT)
   MMMM    4      appendText(ChronoField.MONTH_OF_YEAR, TextStyle.FULL)
   MMMMM   5      appendText(ChronoField.MONTH_OF_YEAR, TextStyle.NARROW)
   L       1      appendValue(ChronoField.MONTH_OF_YEAR);
   LL      2      appendValue(ChronoField.MONTH_OF_YEAR, 2);
   LLL     3      appendText(ChronoField.MONTH_OF_YEAR, TextStyle.SHORT_STANDALONE)
   LLLL    4      appendText(ChronoField.MONTH_OF_YEAR, TextStyle.FULL_STANDALONE)
   LLLLL   5      appendText(ChronoField.MONTH_OF_YEAR, TextStyle.NARROW_STANDALONE)

   w       1      append special localized WeekFields element for numeric week-of-year
   ww      2      append special localized WeekFields element for numeric week-of-year, zero-padded
   W       1      append special localized WeekFields element for numeric week-of-month
   d       1      appendValue(ChronoField.DAY_OF_MONTH)
   dd      2      appendValue(ChronoField.DAY_OF_MONTH, 2)
   D       1      appendValue(ChronoField.DAY_OF_YEAR)
   DD      2      appendValue(ChronoField.DAY_OF_YEAR, 2)
   DDD     3      appendValue(ChronoField.DAY_OF_YEAR, 3)
   F       1      appendValue(ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH)
   E       1      appendText(ChronoField.DAY_OF_WEEK, TextStyle.SHORT)
   EE      2      appendText(ChronoField.DAY_OF_WEEK, TextStyle.SHORT)
   EEE     3      appendText(ChronoField.DAY_OF_WEEK, TextStyle.SHORT)
   EEEE    4      appendText(ChronoField.DAY_OF_WEEK, TextStyle.FULL)
   EEEEE   5      appendText(ChronoField.DAY_OF_WEEK, TextStyle.NARROW)
   e       1      append special localized WeekFields element for numeric day-of-week
   ee      2      append special localized WeekFields element for numeric day-of-week, zero-padded
   eee     3      appendText(ChronoField.DAY_OF_WEEK, TextStyle.SHORT)
   eeee    4      appendText(ChronoField.DAY_OF_WEEK, TextStyle.FULL)
   eeeee   5      appendText(ChronoField.DAY_OF_WEEK, TextStyle.NARROW)
   c       1      append special localized WeekFields element for numeric day-of-week
   ccc     3      appendText(ChronoField.DAY_OF_WEEK, TextStyle.SHORT_STANDALONE)
   cccc    4      appendText(ChronoField.DAY_OF_WEEK, TextStyle.FULL_STANDALONE)
   ccccc   5      appendText(ChronoField.DAY_OF_WEEK, TextStyle.NARROW_STANDALONE)
</pre>
<p>
<b>Time fields</b>: Pattern letters to output a time.
<pre>
 Pattern  Count  Equivalent builder methods
 -------  -----  --------------------------
   a       1      appendText(ChronoField.AMPM_OF_DAY, TextStyle.SHORT)
   h       1      appendValue(ChronoField.CLOCK_HOUR_OF_AMPM)
   hh      2      appendValue(ChronoField.CLOCK_HOUR_OF_AMPM, 2)
   H       1      appendValue(ChronoField.HOUR_OF_DAY)
   HH      2      appendValue(ChronoField.HOUR_OF_DAY, 2)
   k       1      appendValue(ChronoField.CLOCK_HOUR_OF_DAY)
   kk      2      appendValue(ChronoField.CLOCK_HOUR_OF_DAY, 2)
   K       1      appendValue(ChronoField.HOUR_OF_AMPM)
   KK      2      appendValue(ChronoField.HOUR_OF_AMPM, 2)
   m       1      appendValue(ChronoField.MINUTE_OF_HOUR)
   mm      2      appendValue(ChronoField.MINUTE_OF_HOUR, 2)
   s       1      appendValue(ChronoField.SECOND_OF_MINUTE)
   ss      2      appendValue(ChronoField.SECOND_OF_MINUTE, 2)

   S..S    1..n   appendFraction(ChronoField.NANO_OF_SECOND, n, n, false)
   A       1      appendValue(ChronoField.MILLI_OF_DAY)
   A..A    2..n   appendValue(ChronoField.MILLI_OF_DAY, n)
   n       1      appendValue(ChronoField.NANO_OF_SECOND)
   n..n    2..n   appendValue(ChronoField.NANO_OF_SECOND, n)
   N       1      appendValue(ChronoField.NANO_OF_DAY)
   N..N    2..n   appendValue(ChronoField.NANO_OF_DAY, n)
</pre>
<p>
<b>Zone ID</b>: Pattern letters to output {@code ZoneId}.
<pre>
 Pattern  Count  Equivalent builder methods
 -------  -----  --------------------------
   VV      2      appendZoneId()
   z       1      appendZoneText(TextStyle.SHORT)
   zz      2      appendZoneText(TextStyle.SHORT)
   zzz     3      appendZoneText(TextStyle.SHORT)
   zzzz    4      appendZoneText(TextStyle.FULL)
</pre>
<p>
<b>Zone offset</b>: Pattern letters to output {@code ZoneOffset}.
<pre>
 Pattern  Count  Equivalent builder methods
 -------  -----  --------------------------
   O       1      appendLocalizedOffsetPrefixed(TextStyle.SHORT);
   OOOO    4      appendLocalizedOffsetPrefixed(TextStyle.FULL);
   X       1      appendOffset(\"+HHmm\",\"Z\")
   XX      2      appendOffset(\"+HHMM\",\"Z\")
   XXX     3      appendOffset(\"+HH:MM\",\"Z\")
   XXXX    4      appendOffset(\"+HHMMss\",\"Z\")
   XXXXX   5      appendOffset(\"+HH:MM:ss\",\"Z\")
   x       1      appendOffset(\"+HHmm\",\"+00\")
   xx      2      appendOffset(\"+HHMM\",\"+0000\")
   xxx     3      appendOffset(\"+HH:MM\",\"+00:00\")
   xxxx    4      appendOffset(\"+HHMMss\",\"+0000\")
   xxxxx   5      appendOffset(\"+HH:MM:ss\",\"+00:00\")
   Z       1      appendOffset(\"+HHMM\",\"+0000\")
   ZZ      2      appendOffset(\"+HHMM\",\"+0000\")
   ZZZ     3      appendOffset(\"+HHMM\",\"+0000\")
   ZZZZ    4      appendLocalizedOffset(TextStyle.FULL);
   ZZZZZ   5      appendOffset(\"+HH:MM:ss\",\"Z\")
</pre>
<p>
<b>Modifiers</b>: Pattern letters that modify the rest of the pattern:
<pre>
 Pattern  Count  Equivalent builder methods
 -------  -----  --------------------------
   [       1      optionalStart()
   ]       1      optionalEnd()
   p..p    1..n   padNext(n)
</pre>
<p>
Any sequence of letters not specified above, unrecognized letter or
reserved character will throw an exception.
Future versions may add to the set of patterns.
It is recommended to use single quotes around all characters that you want
to output directly to ensure that future changes do not break your application.
<p>
Note that the pattern string is similar, but not identical, to
{@link java.text.SimpleDateFormat SimpleDateFormat}.
The pattern string is also similar, but not identical, to that defined by the
Unicode Common Locale Data Repository (CLDR/LDML).
Pattern letters 'X' and 'u' are aligned with Unicode CLDR/LDML.
By contrast, {@code SimpleDateFormat} uses 'u' for the numeric day of week.
Pattern letters 'y' and 'Y' parse years of two digits and more than 4 digits differently.
Pattern letters 'n', 'A', 'N', and 'p' are added.
Number types will reject large numbers.

@param pattern  the pattern to add, not null
@return this, for chaining, not null
@throws IllegalArgumentException if the pattern is invalid
"
      end

      operation 8519682 "parsePattern"
	private explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8519810 "parseField"
	private explicit_return_type "void"
	nparams 3
	  param in name "cur" explicit_type "char"
	  param in name "count" explicit_type "int"
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
      end

      classrelation 3453186 // FIELD_MAP (<unidirectional association>)
	relation 3453186 --->
	  a role_name "FIELD_MAP" init_value " new HashMap<>()" class_relation const_relation private
	    comment " Map of letters to fields. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Character, TemporalField> ${name}${value};
"
	    classrelation_ref 3453186 // FIELD_MAP (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 171138 "initialization"
	
	cpp "" ""
	java "  static {
        // SDF = SimpleDateFormat
        FIELD_MAP.put('G', ChronoField.ERA);                       // SDF, LDML (different to both for 1/2 chars)
        FIELD_MAP.put('y', ChronoField.YEAR_OF_ERA);               // SDF, LDML
        FIELD_MAP.put('u', ChronoField.YEAR);                      // LDML (different in SDF)
        FIELD_MAP.put('Q', IsoFields.QUARTER_OF_YEAR);             // LDML (removed quarter from 310)
        FIELD_MAP.put('q', IsoFields.QUARTER_OF_YEAR);             // LDML (stand-alone)
        FIELD_MAP.put('M', ChronoField.MONTH_OF_YEAR);             // SDF, LDML
        FIELD_MAP.put('L', ChronoField.MONTH_OF_YEAR);             // SDF, LDML (stand-alone)
        FIELD_MAP.put('D', ChronoField.DAY_OF_YEAR);               // SDF, LDML
        FIELD_MAP.put('d', ChronoField.DAY_OF_MONTH);              // SDF, LDML
        FIELD_MAP.put('F', ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH);  // SDF, LDML
        FIELD_MAP.put('E', ChronoField.DAY_OF_WEEK);               // SDF, LDML (different to both for 1/2 chars)
        FIELD_MAP.put('c', ChronoField.DAY_OF_WEEK);               // LDML (stand-alone)
        FIELD_MAP.put('e', ChronoField.DAY_OF_WEEK);               // LDML (needs localized week number)
        FIELD_MAP.put('a', ChronoField.AMPM_OF_DAY);               // SDF, LDML
        FIELD_MAP.put('H', ChronoField.HOUR_OF_DAY);               // SDF, LDML
        FIELD_MAP.put('k', ChronoField.CLOCK_HOUR_OF_DAY);         // SDF, LDML
        FIELD_MAP.put('K', ChronoField.HOUR_OF_AMPM);              // SDF, LDML
        FIELD_MAP.put('h', ChronoField.CLOCK_HOUR_OF_AMPM);        // SDF, LDML
        FIELD_MAP.put('m', ChronoField.MINUTE_OF_HOUR);            // SDF, LDML
        FIELD_MAP.put('s', ChronoField.SECOND_OF_MINUTE);          // SDF, LDML
        FIELD_MAP.put('S', ChronoField.NANO_OF_SECOND);            // LDML (SDF uses milli-of-second number)
        FIELD_MAP.put('A', ChronoField.MILLI_OF_DAY);              // LDML
        FIELD_MAP.put('n', ChronoField.NANO_OF_SECOND);            // 310 (proposed for LDML)
        FIELD_MAP.put('N', ChronoField.NANO_OF_DAY);               // 310 (proposed for LDML)
        // 310 - z - time-zone names, matches LDML and SimpleDateFormat 1 to 4
        // 310 - Z - matches SimpleDateFormat and LDML
        // 310 - V - time-zone id, matches LDML
        // 310 - p - prefix for padding
        // 310 - X - matches LDML, almost matches SDF for 1, exact match 2&3, extended 4&5
        // 310 - x - matches LDML
        // 310 - w, W, and Y are localized forms matching LDML
        // LDML - U - cycle year name, not supported by 310 yet
        // LDML - l - deprecated
        // LDML - j - not relevant
        // LDML - g - modified-julian-day
        // LDML - v,V - extended time-zone names
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 8519938 "padNext"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 1
	  param in name "padWidth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Causes the next added printer/parser to pad to a fixed width using a space.
<p>
This padding will pad to a fixed width using spaces.
<p>
During formatting, the decorated element will be output and then padded
to the specified width. An exception will be thrown during formatting if
the pad width is exceeded.
<p>
During parsing, the padding and decorated element are parsed.
If parsing is lenient, then the pad width is treated as a maximum.
The padding is parsed greedily. Thus, if the decorated element starts with
the pad character, it will not be parsed.

@param padWidth  the pad width, 1 or greater
@return this, for chaining, not null
@throws IllegalArgumentException if pad width is too small
"
      end

      operation 8520066 "padNext"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 2
	  param in name "padWidth" explicit_type "int"
	  param in name "padChar" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the next added printer/parser to pad to a fixed width.
<p>
This padding is intended for padding other than zero-padding.
Zero-padding should be achieved using the appendValue methods.
<p>
During formatting, the decorated element will be output and then padded
to the specified width. An exception will be thrown during formatting if
the pad width is exceeded.
<p>
During parsing, the padding and decorated element are parsed.
If parsing is lenient, then the pad width is treated as a maximum.
If parsing is case insensitive, then the pad character is matched ignoring case.
The padding is parsed greedily. Thus, if the decorated element starts with
the pad character, it will not be parsed.

@param padWidth  the pad width, 1 or greater
@param padChar  the pad character
@return this, for chaining, not null
@throws IllegalArgumentException if pad width is too small
"
      end

      operation 8520194 "optionalStart"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Mark the start of an optional section.
<p>
The output of formatting can include optional sections, which may be nested.
An optional section is started by calling this method and ended by calling
{@link #optionalEnd()} or by ending the build process.
<p>
All elements in the optional section are treated as optional.
During formatting, the section is only output if data is available in the
{@code TemporalAccessor} for all the elements in the section.
During parsing, the whole section may be missing from the parsed string.
<p>
For example, consider a builder setup as
{@code builder.appendValue(HOUR_OF_DAY,2).optionalStart().appendValue(MINUTE_OF_HOUR,2)}.
The optional section ends automatically at the end of the builder.
During formatting, the minute will only be output if its value can be obtained from the date-time.
During parsing, the input will be successfully parsed whether the minute is present or not.

@return this, for chaining, not null
"
      end

      operation 8520322 "optionalEnd"
	public return_type class_ref 1057282 // DateTimeFormatterBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends an optional section.
<p>
The output of formatting can include optional sections, which may be nested.
An optional section is started by calling {@link #optionalStart()} and ended
using this method (or at the end of the builder).
<p>
Calling this method without having previously called {@code optionalStart}
will throw an exception.
Calling this method immediately after calling {@code optionalStart} has no effect
on the formatter other than ending the (empty) optional section.
<p>
All elements in the optional section are treated as optional.
During formatting, the section is only output if data is available in the
{@code TemporalAccessor} for all the elements in the section.
During parsing, the whole section may be missing from the parsed string.
<p>
For example, consider a builder setup as
{@code builder.appendValue(HOUR_OF_DAY,2).optionalStart().appendValue(MINUTE_OF_HOUR,2).optionalEnd()}.
During formatting, the minute will only be output if its value can be obtained from the date-time.
During parsing, the input will be successfully parsed whether the minute is present or not.

@return this, for chaining, not null
@throws IllegalStateException if there was no previous call to {@code optionalStart}
"
      end

      operation 8520450 "appendInternal"
	private explicit_return_type "int"
	nparams 1
	  param inout name "pp" type class_ref 1058178 // DateTimePrinterParser
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Appends a printer and/or parser to the internal list handling padding.

@param pp  the printer-parser to add, not null
@return the index into the active parsers list
"
      end

      operation 8520578 "toFormatter"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Completes this builder by creating the {@code DateTimeFormatter}
using the default locale.
<p>
This will create a formatter with the {@linkplain Locale#getDefault(Locale.Category) default FORMAT locale}.
Numbers will be printed and parsed using the standard DecimalStyle.
The resolver style will be {@link ResolverStyle#SMART SMART}.
<p>
Calling this method will end any open optional sections by repeatedly
calling {@link #optionalEnd()} before creating the formatter.
<p>
This builder can still be used after creating the formatter if desired,
although the state may have been changed by calls to {@code optionalEnd}.

@return the created formatter, not null
"
      end

      operation 8520706 "toFormatter"
	public return_type class_ref 1052930 // DateTimeFormatter
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this builder by creating the {@code DateTimeFormatter}
using the specified locale.
<p>
This will create a formatter with the specified locale.
Numbers will be printed and parsed using the standard DecimalStyle.
The resolver style will be {@link ResolverStyle#SMART SMART}.
<p>
Calling this method will end any open optional sections by repeatedly
calling {@link #optionalEnd()} before creating the formatter.
<p>
This builder can still be used after creating the formatter if desired,
although the state may have been changed by calls to {@code optionalEnd}.

@param locale  the locale to use for formatting, not null
@return the created formatter, not null
"
      end

      operation 8520834 "toFormatter"
	package return_type class_ref 1052930 // DateTimeFormatter
	nparams 2
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  param inout name "chrono" type class_ref 1052546 // Chronology
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this builder by creating the formatter.
This uses the default locale.

@param resolverStyle  the resolver style to use, not null
@return the created formatter, not null
"
      end

      operation 8520962 "toFormatter"
	private return_type class_ref 1052930 // DateTimeFormatter
	nparams 3
	  param inout name "locale" type class_ref 312962 // Locale
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  param inout name "chrono" type class_ref 1052546 // Chronology
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this builder by creating the formatter.

@param locale  the locale to use for formatting, not null
@param chrono  the chronology to use, may be null
@return the created formatter, not null
"
      end

      class 1058690 "PadPrinterParserDecorator"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3453570 // <realization>
	  relation 3453570 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3453570 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3453698 // printerParser (<unidirectional association>)
	  relation 3453698 --->
	    a role_name "printerParser" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3453698 // printerParser (<unidirectional association>)
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	attribute 1961090 "padWidth"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1961218 "padChar"
	  const_attribute private explicit_type "char"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8522114 "PadPrinterParserDecorator"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "printerParser" type class_ref 1058178 // DateTimePrinterParser
	    param in name "padWidth" explicit_type "int"
	    param in name "padChar" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param printerParser  the printer, not null
@param padWidth  the width to pad to, 1 or greater
@param padChar  the pad character
"
	end

	operation 8522242 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8522370 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8522498 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1058818 "SettingsParser"
	visibility package stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3453826 // <realization>
	  relation 3453826 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3453826 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	attribute 1961346 "SENSITIVE"
	  public type class_ref 1058818 // SettingsParser
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1961474 "INSENSITIVE"
	  public type class_ref 1058818 // SettingsParser
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1961602 "STRICT"
	  public type class_ref 1058818 // SettingsParser
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1961730 "LENIENT"
	  public type class_ref 1058818 // SettingsParser
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8522626 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8522754 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8522882 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1058946 "DefaultValueParser"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3453954 // <realization>
	  relation 3453954 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3453954 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3454082 // field (<unidirectional association>)
	  relation 3454082 --->
	    a role_name "field" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3454082 // field (<unidirectional association>)
	    b parent class_ref 1050882 // TemporalField
	end

	attribute 1961858 "value"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8523010 "DefaultValueParser"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "field" type class_ref 1050882 // TemporalField
	    param in name "value" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8523138 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8523266 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1059074 "CharLiteralPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3454210 // <realization>
	  relation 3454210 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3454210 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	attribute 1961986 "literal"
	  const_attribute private explicit_type "char"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8523394 "CharLiteralPrinterParser"
	  package explicit_return_type ""
	  nparams 1
	    param in name "literal" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8523522 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8523650 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8523778 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1059202 "StringLiteralPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3454338 // <realization>
	  relation 3454338 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3454338 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3454466 // literal (<unidirectional association>)
	  relation 3454466 --->
	    a role_name "literal" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3454466 // literal (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 8523906 "StringLiteralPrinterParser"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "literal" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8524034 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8524162 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8524290 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1059330 "ReducedPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3454978 // <generalisation>
	  relation 3454978 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3454978 // <generalisation>
	    b parent class_ref 1058434 // NumberPrinterParser
	end

	classrelation 3455106 // BASE_DATE (<unidirectional association>)
	  relation 3455106 --->
	    a role_name "BASE_DATE" init_value " LocalDate.of(2000, 1, 1)" class_relation const_relation package
	      comment "
The base date for reduced value parsing.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455106 // BASE_DATE (<unidirectional association>)
	    b parent class_ref 1040770 // LocalDate
	end

	attribute 1962626 "baseValue"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3455234 // baseDate (<unidirectional association>)
	  relation 3455234 --->
	    a role_name "baseDate" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455234 // baseDate (<unidirectional association>)
	    b parent class_ref 1052418 // ChronoLocalDate
	end

	operation 8525698 "ReducedPrinterParser"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "field" type class_ref 1050882 // TemporalField
	    param in name "minWidth" explicit_type "int"
	    param in name "maxWidth" explicit_type "int"
	    param in name "baseValue" explicit_type "int"
	    param inout name "baseDate" type class_ref 1052418 // ChronoLocalDate
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param field  the field to format, validated not null
@param minWidth  the minimum field width, from 1 to 10
@param maxWidth  the maximum field width, from 1 to 10
@param baseValue  the base value
@param baseDate  the base date
"
	end

	operation 8525826 "ReducedPrinterParser"
	  private explicit_return_type ""
	  nparams 6
	    param inout name "field" type class_ref 1050882 // TemporalField
	    param in name "minWidth" explicit_type "int"
	    param in name "maxWidth" explicit_type "int"
	    param in name "baseValue" explicit_type "int"
	    param inout name "baseDate" type class_ref 1052418 // ChronoLocalDate
	    param in name "subsequentWidth" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.
The arguments have already been checked.

@param field  the field to format, validated not null
@param minWidth  the minimum field width, from 1 to 10
@param maxWidth  the maximum field width, from 1 to 10
@param baseValue  the base value
@param baseDate  the base date
@param subsequentWidth the subsequentWidth for this instance
"
	end

	operation 8525954 "getValue"
	  package explicit_return_type "long"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param in name "value" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8526082 "setValue"
	  package explicit_return_type "int"
	  nparams 4
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param in name "value" explicit_type "long"
	    param in name "errorPos" explicit_type "int"
	    param in name "successPos" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8526210 "withFixedWidth"
	  package return_type class_ref 1059330 // ReducedPrinterParser
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns a new instance with fixed width flag set.

@return a new updated printer-parser, not null
"
	end

	operation 8526338 "withSubsequentWidth"
	  package return_type class_ref 1059330 // ReducedPrinterParser
	  nparams 1
	    param in name "subsequentWidth" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns a new instance with an updated subsequent width.

@param subsequentWidth  the width of subsequent non-negative numbers, 0 or greater
@return a new updated printer-parser, not null
"
	end

	operation 8526466 "isFixedWidth"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "For a ReducedPrinterParser, fixed width is false if the mode is strict,
otherwise it is set as for NumberPrinterParser.
@param context the context
@return if the field is fixed width
@see DateTimeFormatterBuilder#appendValueReduced(java.time.temporal.TemporalField, int, int, int)
"
	end

	operation 8526594 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1059458 "FractionPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3455362 // <realization>
	  relation 3455362 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3455362 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3455490 // field (<unidirectional association>)
	  relation 3455490 --->
	    a role_name "field" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455490 // field (<unidirectional association>)
	    b parent class_ref 1050882 // TemporalField
	end

	attribute 1962754 "minWidth"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1962882 "maxWidth"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1963010 "decimalPoint"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8526722 "FractionPrinterParser"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "field" type class_ref 1050882 // TemporalField
	    param in name "minWidth" explicit_type "int"
	    param in name "maxWidth" explicit_type "int"
	    param inout name "decimalPoint" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param field  the field to output, not null
@param minWidth  the minimum width to output, from 0 to 9
@param maxWidth  the maximum width to output, from 0 to 9
@param decimalPoint  whether to output the localized decimal point symbol
"
	end

	operation 8526850 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8526978 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8527106 "convertToFraction"
	  private return_type class_ref 145794 // BigDecimal
	  nparams 1
	    param in name "value" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Converts a value for this field to a fraction between 0 and 1.
<p>
The fractional value is between 0 (inclusive) and 1 (exclusive).
It can only be returned if the {@link java.time.temporal.TemporalField#range() value range} is fixed.
The fraction is obtained by calculation from the field range using 9 decimal
places and a rounding mode of {@link RoundingMode#FLOOR FLOOR}.
The calculation is inaccurate if the values do not run continuously from smallest to largest.
<p>
For example, the second-of-minute value of 15 would be returned as 0.25,
assuming the standard definition of 60 seconds in a minute.

@param value  the value to convert, must be valid for this rule
@return the value as a fraction within the range, from 0 to 1, not null
@throws DateTimeException if the value cannot be converted to a fraction
"
	end

	operation 8527234 "convertFromFraction"
	  private explicit_return_type "long"
	  nparams 1
	    param inout name "fraction" type class_ref 145794 // BigDecimal
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Converts a fraction from 0 to 1 for this field to a value.
<p>
The fractional value must be between 0 (inclusive) and 1 (exclusive).
It can only be returned if the {@link java.time.temporal.TemporalField#range() value range} is fixed.
The value is obtained by calculation from the field range and a rounding
mode of {@link RoundingMode#FLOOR FLOOR}.
The calculation is inaccurate if the values do not run continuously from smallest to largest.
<p>
For example, the fractional second-of-minute of 0.25 would be converted to 15,
assuming the standard definition of 60 seconds in a minute.

@param fraction  the fraction to convert, not null
@return the value of the field, valid for this rule
@throws DateTimeException if the value cannot be converted
"
	end

	operation 8527362 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1059586 "TextPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3455618 // <realization>
	  relation 3455618 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3455618 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3455746 // field (<unidirectional association>)
	  relation 3455746 --->
	    a role_name "field" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455746 // field (<unidirectional association>)
	    b parent class_ref 1050882 // TemporalField
	end

	classrelation 3455874 // textStyle (<unidirectional association>)
	  relation 3455874 --->
	    a role_name "textStyle" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455874 // textStyle (<unidirectional association>)
	    b parent class_ref 1051522 // TextStyle
	end

	classrelation 3456002 // provider (<unidirectional association>)
	  relation 3456002 --->
	    a role_name "provider" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3456002 // provider (<unidirectional association>)
	    b parent class_ref 1059714 // DateTimeTextProvider
	end

	classrelation 3456130 // numberPrinterParser (<unidirectional association>)
	  relation 3456130 --->
	    a role_name "numberPrinterParser" volatile private
	      comment "
The cached number printer parser.
Immutable and volatile, so no synchronization needed.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3456130 // numberPrinterParser (<unidirectional association>)
	    b parent class_ref 1058434 // NumberPrinterParser
	end

	operation 8527490 "TextPrinterParser"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "field" type class_ref 1050882 // TemporalField
	    param inout name "textStyle" type class_ref 1051522 // TextStyle
	    param inout name "provider" type class_ref 1059714 // DateTimeTextProvider
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param field  the field to output, not null
@param textStyle  the text style, not null
@param provider  the text provider, not null
"
	end

	operation 8527618 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8527746 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "parseText" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8527874 "numberPrinterParser"
	  private return_type class_ref 1058434 // NumberPrinterParser
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create and cache a number printer parser.
@return the number printer parser for this field, not null
"
	end

	operation 8528002 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1059842 "InstantPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3456258 // <realization>
	  relation 3456258 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3456258 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	attribute 1963138 "SECONDS_PER_10000_YEARS"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 146097L * 25L * 86400L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " days in a 400 year cycle = 146097
 days in a 10,000 year cycle = 146097 * 25
 seconds per day = 86400
"
	end

	attribute 1963266 "SECONDS_0000_TO_1970"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " ((146097L * 5L) - (30L * 365L + 7L)) * 86400L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1963394 "fractionalDigits"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8528130 "InstantPrinterParser"
	  package explicit_return_type ""
	  nparams 1
	    param in name "fractionalDigits" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8528258 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8528386 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8528514 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1059970 "OffsetIdPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3456386 // <realization>
	  relation 3456386 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3456386 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3456514 // PATTERNS (<unidirectional association>)
	  relation 3456514 --->
	    a role_name "PATTERNS" multiplicity "[]" init_value " new String[] {
            \"+HH\", \"+HHmm\", \"+HH:mm\", \"+HHMM\", \"+HH:MM\", \"+HHMMss\", \"+HH:MM:ss\", \"+HHMMSS\", \"+HH:MM:SS\",
        }" class_relation const_relation package
	      comment " order used in pattern builder"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3456514 // PATTERNS (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3456642 // INSTANCE_ID_Z (<unidirectional association>)
	  relation 3456642 --->
	    a role_name "INSTANCE_ID_Z" init_value " new OffsetIdPrinterParser(\"+HH:MM:ss\", \"Z\")" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3456642 // INSTANCE_ID_Z (<unidirectional association>)
	    b parent class_ref 1059970 // OffsetIdPrinterParser
	end

	classrelation 3456770 // INSTANCE_ID_ZERO (<unidirectional association>)
	  relation 3456770 --->
	    a role_name "INSTANCE_ID_ZERO" init_value " new OffsetIdPrinterParser(\"+HH:MM:ss\", \"0\")" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3456770 // INSTANCE_ID_ZERO (<unidirectional association>)
	    b parent class_ref 1059970 // OffsetIdPrinterParser
	end

	classrelation 3456898 // noOffsetText (<unidirectional association>)
	  relation 3456898 --->
	    a role_name "noOffsetText" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3456898 // noOffsetText (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1963522 "type"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8528642 "OffsetIdPrinterParser"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "pattern" type class_ref 128130 // String
	    param inout name "noOffsetText" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param pattern  the pattern
@param noOffsetText  the text to use for UTC, not null
"
	end

	operation 8528770 "checkPattern"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "pattern" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8528898 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8529026 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8529154 "parseNumber"
	  private explicit_return_type "boolean"
	  nparams 4
	    param inout name "array" explicit_type "int"
	  multiplicity "[]"
	    param in name "arrayIndex" explicit_type "int"
	    param inout name "parseText" type class_ref 429442 // CharSequence
	    param inout name "required" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Parse a two digit zero-prefixed number.

@param array  the array of parsed data, 0=pos,1=hours,2=mins,3=secs, not null
@param arrayIndex  the index to parse the value into
@param parseText  the offset ID, not null
@param required  whether this number is required
@return true if an error occurred
"
	end

	operation 8529282 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1060098 "LocalizedOffsetIdPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3457026 // <realization>
	  relation 3457026 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3457026 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3457154 // style (<unidirectional association>)
	  relation 3457154 --->
	    a role_name "style" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3457154 // style (<unidirectional association>)
	    b parent class_ref 1051522 // TextStyle
	end

	operation 8529410 "LocalizedOffsetIdPrinterParser"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "style" type class_ref 1051522 // TextStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param style  the style, not null
"
	end

	operation 8529538 "appendHMS"
	  class_operation private return_type class_ref 173058 // StringBuilder
	  nparams 2
	    param inout name "buf" type class_ref 173058 // StringBuilder
	    param in name "t" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8529666 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8529794 "getDigit"
	  package explicit_return_type "int"
	  nparams 2
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8529922 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8530050 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1060226 "ZoneTextPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3457282 // <generalisation>
	  relation 3457282 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3457282 // <generalisation>
	    b parent class_ref 1060354 // ZoneIdPrinterParser
	end

	classrelation 3457410 // textStyle (<unidirectional association>)
	  relation 3457410 --->
	    a role_name "textStyle" const_relation private
	      comment " The text style to output. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3457410 // textStyle (<unidirectional association>)
	    b parent class_ref 1051522 // TextStyle
	end

	classrelation 3457538 // preferredZones (<unidirectional association>)
	  relation 3457538 --->
	    a role_name "preferredZones" private
	      comment " The preferred zoneid map 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	      classrelation_ref 3457538 // preferredZones (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	operation 8530178 "ZoneTextPrinterParser"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "textStyle" type class_ref 1051522 // TextStyle
	    param inout name "preferredZones" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<ZoneId> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1963650 "STD"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1963778 "DST"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1963906 "GENERIC"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3457666 // cache (<unidirectional association>)
	  relation 3457666 --->
	    a role_name "cache" init_value "
            new ConcurrentHashMap<>()" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, SoftReference<Map<Locale, String[]>>> ${name}${value};
"
	      classrelation_ref 3457666 // cache (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 8530306 "getDisplayName"
	  private return_type class_ref 128130 // String
	  nparams 3
	    param inout name "id" type class_ref 128130 // String
	    param in name "type" explicit_type "int"
	    param inout name "locale" type class_ref 312962 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8530434 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 3457794 // cachedTree (<unidirectional association>)
	  relation 3457794 --->
	    a role_name "cachedTree" init_value " new HashMap<>()" const_relation private
	      comment " cache per instance for now
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale, Entry<Integer, SoftReference<PrefixTree>>> ${name}${value};
"
	      classrelation_ref 3457794 // cachedTree (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	classrelation 3457922 // cachedTreeCI (<unidirectional association>)
	  relation 3457922 --->
	    a role_name "cachedTreeCI" init_value " new HashMap<>()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale, Entry<Integer, SoftReference<PrefixTree>>> ${name}${value};
"
	      classrelation_ref 3457922 // cachedTreeCI (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 8530562 "getTree"
	  protected return_type class_ref 1060482 // PrefixTree
	  nparams 1
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1060354 "ZoneIdPrinterParser"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3458050 // <realization>
	  relation 3458050 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3458050 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3458178 // query (<unidirectional association>)
	  relation 3458178 --->
	    a role_name "query" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ZoneId> ${name}${value};
"
	      classrelation_ref 3458178 // query (<unidirectional association>)
	    b parent class_ref 1051138 // TemporalQuery
	end

	classrelation 3458306 // description (<unidirectional association>)
	  relation 3458306 --->
	    a role_name "description" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3458306 // description (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 8530690 "ZoneIdPrinterParser"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "query" type class_ref 1051138 // TemporalQuery
	    param inout name "description" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<ZoneId> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8530818 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 3458434 // cachedPrefixTree (<unidirectional association>)
	  relation 3458434 --->
	    a role_name "cachedPrefixTree" class_relation volatile private
	      comment "
The cached tree to speed up parsing.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, PrefixTree> ${name}${value};
"
	      classrelation_ref 3458434 // cachedPrefixTree (<unidirectional association>)
	    b parent class_ref 192386 // Entry
	end

	classrelation 3458562 // cachedPrefixTreeCI (<unidirectional association>)
	  relation 3458562 --->
	    a role_name "cachedPrefixTreeCI" class_relation volatile private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, PrefixTree> ${name}${value};
"
	      classrelation_ref 3458562 // cachedPrefixTreeCI (<unidirectional association>)
	    b parent class_ref 192386 // Entry
	end

	operation 8530946 "getTree"
	  protected return_type class_ref 1060482 // PrefixTree
	  nparams 1
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8531074 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "This implementation looks for the longest matching string.
For example, parsing Etc/GMT-2 will return Etc/GMC-2 rather than just
Etc/GMC although both are valid.
"
	end

	operation 8531202 "parseOffsetBased"
	  private explicit_return_type "int"
	  nparams 5
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "prefixPos" explicit_type "int"
	    param in name "position" explicit_type "int"
	    param inout name "parser" type class_ref 1059970 // OffsetIdPrinterParser
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Parse an offset following a prefix and set the ZoneId if it is valid.
To matching the parsing of ZoneId.of the values are not normalized
to ZoneOffsets.

@param context the parse context
@param text the input text
@param prefixPos start of the prefix
@param position start of text after the prefix
@param parser parser for the value after the prefix
@return the position after the parse
"
	end

	operation 8531330 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1060482 "PrefixTree"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3458690 // key (<unidirectional association>)
	  relation 3458690 --->
	    a role_name "key" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3458690 // key (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3458818 // value (<unidirectional association>)
	  relation 3458818 --->
	    a role_name "value" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3458818 // value (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1964034 "c0"
	  protected explicit_type "char"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " performance optimization to avoid the"
	end

	classrelation 3458946 // child (<unidirectional association>)
	  relation 3458946 --->
	    a role_name "child" protected
	      comment " boundary check cost of key.charat(0)
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3458946 // child (<unidirectional association>)
	    b parent class_ref 1060482 // PrefixTree
	end

	classrelation 3459074 // sibling (<unidirectional association>)
	  relation 3459074 --->
	    a role_name "sibling" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3459074 // sibling (<unidirectional association>)
	    b parent class_ref 1060482 // PrefixTree
	end

	operation 8531458 "PrefixTree"
	  private explicit_return_type ""
	  nparams 3
	    param inout name "k" type class_ref 128130 // String
	    param inout name "v" type class_ref 128130 // String
	    param inout name "child" type class_ref 1060482 // PrefixTree
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8531586 "newTree"
	  class_operation public return_type class_ref 1060482 // PrefixTree
	  nparams 1
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new prefix parsing tree based on parse context.

@param context  the parse context
@return the tree, not null
"
	end

	operation 8531714 "newTree"
	  class_operation public return_type class_ref 1060482 // PrefixTree
	  nparams 2
	    param inout name "keys" type class_ref 192258 // Set
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new prefix parsing tree.

@param keys  a set of strings to build the prefix parsing tree, not null
@param context  the parse context
@return the tree, not null
"
	end

	operation 8531842 "copyTree"
	  public return_type class_ref 1060482 // PrefixTree
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Clone a copy of this tree
"
	end

	operation 8531970 "add"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "k" type class_ref 128130 // String
	    param inout name "v" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds a pair of {key, value} into the prefix tree.

@param k  the key, not null
@param v  the value, not null
@return  true if the pair is added successfully
"
	end

	operation 8532098 "add0"
	  private explicit_return_type "boolean"
	  nparams 2
	    param inout name "k" type class_ref 128130 // String
	    param inout name "v" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8532226 "match"
	  public return_type class_ref 128130 // String
	  nparams 3
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "off" explicit_type "int"
	    param in name "end" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Match text with the prefix tree.

@param text  the input text to parse, not null
@param off  the offset position to start parsing at
@param end  the end position to stop parsing
@return the resulting string, or null if no match found.
"
	end

	operation 8532354 "match"
	  public return_type class_ref 128130 // String
	  nparams 2
	    param inout name "text" type class_ref 429442 // CharSequence
	    param inout name "pos" type class_ref 1045506 // ParsePosition
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Match text with the prefix tree.

@param text  the input text to parse, not null
@param pos  the position to start parsing at, from 0 to the text
 length. Upon return, position will be updated to the new parse
 position, or unchanged, if no match found.
@return the resulting string, or null if no match found.
"
	end

	operation 8532482 "toKey"
	  protected return_type class_ref 128130 // String
	  nparams 1
	    param inout name "k" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8532610 "newNode"
	  protected return_type class_ref 1060482 // PrefixTree
	  nparams 3
	    param inout name "k" type class_ref 128130 // String
	    param inout name "v" type class_ref 128130 // String
	    param inout name "child" type class_ref 1060482 // PrefixTree
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8532738 "isEqual"
	  protected explicit_return_type "boolean"
	  nparams 2
	    param in name "c1" explicit_type "char"
	    param in name "c2" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8532866 "prefixOf"
	  protected explicit_return_type "boolean"
	  nparams 3
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "off" explicit_type "int"
	    param in name "end" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8532994 "prefixLength"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "k" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 1060610 "CI"
	  visibility private 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3459202 // <generalisation>
	    relation 3459202 ---|>
	      a public
		java "${type}"
		classrelation_ref 3459202 // <generalisation>
	      b parent class_ref 1060482 // PrefixTree
	  end

	  operation 8533122 "CI"
	    private explicit_return_type ""
	    nparams 3
	      param inout name "k" type class_ref 128130 // String
	      param inout name "v" type class_ref 128130 // String
	      param inout name "child" type class_ref 1060482 // PrefixTree
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 8533250 "newNode"
	    protected return_type class_ref 1060610 // CI
	    nparams 3
	      param inout name "k" type class_ref 128130 // String
	      param inout name "v" type class_ref 128130 // String
	      param inout name "child" type class_ref 1060482 // PrefixTree
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 8533378 "isEqual"
	    protected explicit_return_type "boolean"
	    nparams 2
	      param in name "c1" explicit_type "char"
	      param in name "c2" explicit_type "char"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 8533506 "prefixOf"
	    protected explicit_return_type "boolean"
	    nparams 3
	      param inout name "text" type class_ref 429442 // CharSequence
	      param in name "off" explicit_type "int"
	      param in name "end" explicit_type "int"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end
	end

	class 1060738 "LENIENT"
	  visibility private 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3459330 // <generalisation>
	    relation 3459330 ---|>
	      a public
		java "${type}"
		classrelation_ref 3459330 // <generalisation>
	      b parent class_ref 1060610 // CI
	  end

	  operation 8533634 "LENIENT"
	    private explicit_return_type ""
	    nparams 3
	      param inout name "k" type class_ref 128130 // String
	      param inout name "v" type class_ref 128130 // String
	      param inout name "child" type class_ref 1060482 // PrefixTree
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 8533762 "newNode"
	    protected return_type class_ref 1060610 // CI
	    nparams 3
	      param inout name "k" type class_ref 128130 // String
	      param inout name "v" type class_ref 128130 // String
	      param inout name "child" type class_ref 1060482 // PrefixTree
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 8533890 "isLenientChar"
	    private explicit_return_type "boolean"
	    nparams 1
	      param in name "c" explicit_type "char"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 8534018 "toKey"
	    protected return_type class_ref 128130 // String
	    nparams 1
	      param inout name "k" type class_ref 128130 // String
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 8534146 "match"
	    public return_type class_ref 128130 // String
	    nparams 2
	      param inout name "text" type class_ref 429442 // CharSequence
	      param inout name "pos" type class_ref 1045506 // ParsePosition
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end
	end
      end

      class 1060866 "ChronoPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3459458 // <realization>
	  relation 3459458 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3459458 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3459586 // textStyle (<unidirectional association>)
	  relation 3459586 --->
	    a role_name "textStyle" const_relation private
	      comment " The text style to output, null means the ID. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3459586 // textStyle (<unidirectional association>)
	    b parent class_ref 1051522 // TextStyle
	end

	operation 8534274 "ChronoPrinterParser"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "textStyle" type class_ref 1051522 // TextStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8534402 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8534530 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8534658 "getChronologyName"
	  private return_type class_ref 128130 // String
	  nparams 2
	    param inout name "chrono" type class_ref 1052546 // Chronology
	    param inout name "locale" type class_ref 312962 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the chronology name of the given chrono in the given locale
if available, or the chronology Id otherwise. The regular ResourceBundle
search path is used for looking up the chronology name.

@param chrono  the chronology, not null
@param locale  the locale, not null
@return the chronology name of chrono in locale, or the id if no name is available
@throws NullPointerException if chrono or locale is null
"
	end
      end

      class 1060994 "LocalizedPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3459714 // <realization>
	  relation 3459714 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3459714 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	classrelation 3459842 // FORMATTER_CACHE (<unidirectional association>)
	  relation 3459842 --->
	    a role_name "FORMATTER_CACHE" init_value " new ConcurrentHashMap<>(16, 0.75f, 2)" class_relation const_relation private
	      comment " Cache of formatters. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, DateTimeFormatter> ${name}${value};
"
	      classrelation_ref 3459842 // FORMATTER_CACHE (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	classrelation 3459970 // dateStyle (<unidirectional association>)
	  relation 3459970 --->
	    a role_name "dateStyle" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3459970 // dateStyle (<unidirectional association>)
	    b parent class_ref 1057666 // FormatStyle
	end

	classrelation 3460098 // timeStyle (<unidirectional association>)
	  relation 3460098 --->
	    a role_name "timeStyle" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3460098 // timeStyle (<unidirectional association>)
	    b parent class_ref 1057666 // FormatStyle
	end

	operation 8534786 "LocalizedPrinterParser"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "dateStyle" type class_ref 1057666 // FormatStyle
	    param inout name "timeStyle" type class_ref 1057666 // FormatStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param dateStyle  the date style to use, may be null
@param timeStyle  the time style to use, may be null
"
	end

	operation 8534914 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8535042 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8535170 "formatter"
	  private return_type class_ref 1052930 // DateTimeFormatter
	  nparams 2
	    param inout name "locale" type class_ref 312962 // Locale
	    param inout name "chrono" type class_ref 1052546 // Chronology
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the formatter to use.
<p>
The formatter will be the most appropriate to use for the date and time style in the locale.
For example, some locales will use the month name while others will use the number.

@param locale  the locale to use, not null
@param chrono  the chronology to use, not null
@return the formatter, not null
@throws IllegalArgumentException if the formatter cannot be found
"
	end

	operation 8535298 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1061122 "WeekBasedFieldPrinterParser"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3460226 // <realization>
	  relation 3460226 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3460226 // <realization>
	    b parent class_ref 1058178 // DateTimePrinterParser
	end

	attribute 1964162 "chr"
	  private explicit_type "char"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1964290 "count"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8535426 "WeekBasedFieldPrinterParser"
	  package explicit_return_type ""
	  nparams 2
	    param in name "chr" explicit_type "char"
	    param in name "count" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param chr the pattern format letter that added this PrinterParser.
@param count the repeat count of the format letter
"
	end

	operation 8535554 "format"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "context" type class_ref 1058562 // DateTimePrintContext
	    param inout name "buf" type class_ref 173058 // StringBuilder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8535682 "parse"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "context" type class_ref 1057922 // DateTimeParseContext
	    param inout name "text" type class_ref 429442 // CharSequence
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8535810 "printerParser"
	  private return_type class_ref 1058178 // DateTimePrinterParser
	  nparams 1
	    param inout name "locale" type class_ref 312962 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the printerParser to use based on the field and the locale.

@param locale  the locale to use, not null
@return the formatter, not null
@throws IllegalArgumentException if the formatter cannot be found
"
	end

	operation 8535938 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3460354 // LENGTH_SORT (<unidirectional association>)
	relation 3460354 --->
	  a role_name "LENGTH_SORT" init_value " new Comparator<String>() {
        @Override
        public int compare(String str1, String str2) {
            return str1.length() == str2.length() ? str1.compareTo(str2) : str1.length() - str2.length();
        }
    }" class_relation const_relation package
	    comment "-------------------------------------------------------------------------

Length comparator.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3460354 // LENGTH_SORT (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end
    end

    class 1057538 "DecimalStyle"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Localized decimal style used in date and time formatting.
<p>
A significant part of dealing with dates and times is the localization.
This class acts as a central point for accessing the information.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3461890 // STANDARD (<unidirectional association>)
	relation 3461890 --->
	  a role_name "STANDARD" init_value " new DecimalStyle('0', '+', '-', '.')" class_relation const_relation public
	    comment "
The standard set of non-localized decimal style symbols.
<p>
This uses standard ASCII characters for zero, positive, negative and a dot for the decimal point.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3461890 // STANDARD (<unidirectional association>)
	  b parent class_ref 1057538 // DecimalStyle
      end

      classrelation 3462018 // CACHE (<unidirectional association>)
	relation 3462018 --->
	  a role_name "CACHE" init_value " new ConcurrentHashMap<>(16, 0.75f, 2)" class_relation const_relation private
	    comment "
The cache of DecimalStyle instances.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale, DecimalStyle> ${name}${value};
"
	    classrelation_ref 3462018 // CACHE (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      attribute 1965058 "zeroDigit"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The zero digit.

"
      end

      attribute 1965186 "positiveSign"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The positive sign.

"
      end

      attribute 1965314 "negativeSign"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The negative sign.

"
      end

      attribute 1965442 "decimalSeparator"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The decimal separator.

"
      end

      operation 8542722 "getAvailableLocales"
	class_operation public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Locale> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Lists all the locales that are supported.
<p>
The locale 'en_US' will always be present.

@return a Set of Locales for which localization is supported
"
      end

      operation 8542850 "ofDefaultLocale"
	class_operation public return_type class_ref 1057538 // DecimalStyle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the DecimalStyle for the default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>
This method provides access to locale sensitive decimal style symbols.
<p>
This is equivalent to calling
{@link #of(Locale)
    of(Locale.getDefault(Locale.Category.FORMAT))}.

@see java.util.Locale.Category#FORMAT
@return the decimal style, not null
"
      end

      operation 8542978 "of"
	class_operation public return_type class_ref 1057538 // DecimalStyle
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the DecimalStyle for the specified locale.
<p>
This method provides access to locale sensitive decimal style symbols.

@param locale  the locale, not null
@return the decimal style, not null
"
      end

      operation 8543106 "create"
	class_operation private return_type class_ref 1057538 // DecimalStyle
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8543234 "DecimalStyle"
	private explicit_return_type ""
	nparams 4
	  param in name "zeroChar" explicit_type "char"
	  param in name "positiveSignChar" explicit_type "char"
	  param in name "negativeSignChar" explicit_type "char"
	  param in name "decimalPointChar" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Restricted constructor.

@param zeroChar  the character to use for the digit of zero
@param positiveSignChar  the character to use for the positive sign
@param negativeSignChar  the character to use for the negative sign
@param decimalPointChar  the character to use for the decimal point
"
      end

      operation 8543362 "getZeroDigit"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the character that represents zero.
<p>
The character used to represent digits may vary by culture.
This method specifies the zero character to use, which implies the characters for one to nine.

@return the character for zero
"
      end

      operation 8543490 "withZeroDigit"
	public return_type class_ref 1057538 // DecimalStyle
	nparams 1
	  param in name "zeroDigit" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the info with a new character that represents zero.
<p>
The character used to represent digits may vary by culture.
This method specifies the zero character to use, which implies the characters for one to nine.

@param zeroDigit  the character for zero
@return  a copy with a new character that represents zero, not null

"
      end

      operation 8543618 "getPositiveSign"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the character that represents the positive sign.
<p>
The character used to represent a positive number may vary by culture.
This method specifies the character to use.

@return the character for the positive sign
"
      end

      operation 8543746 "withPositiveSign"
	public return_type class_ref 1057538 // DecimalStyle
	nparams 1
	  param in name "positiveSign" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the info with a new character that represents the positive sign.
<p>
The character used to represent a positive number may vary by culture.
This method specifies the character to use.

@param positiveSign  the character for the positive sign
@return  a copy with a new character that represents the positive sign, not null
"
      end

      operation 8543874 "getNegativeSign"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the character that represents the negative sign.
<p>
The character used to represent a negative number may vary by culture.
This method specifies the character to use.

@return the character for the negative sign
"
      end

      operation 8544002 "withNegativeSign"
	public return_type class_ref 1057538 // DecimalStyle
	nparams 1
	  param in name "negativeSign" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the info with a new character that represents the negative sign.
<p>
The character used to represent a negative number may vary by culture.
This method specifies the character to use.

@param negativeSign  the character for the negative sign
@return  a copy with a new character that represents the negative sign, not null
"
      end

      operation 8544130 "getDecimalSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the character that represents the decimal point.
<p>
The character used to represent a decimal point may vary by culture.
This method specifies the character to use.

@return the character for the decimal point
"
      end

      operation 8544258 "withDecimalSeparator"
	public return_type class_ref 1057538 // DecimalStyle
	nparams 1
	  param in name "decimalSeparator" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the info with a new character that represents the decimal point.
<p>
The character used to represent a decimal point may vary by culture.
This method specifies the character to use.

@param decimalSeparator  the character for the decimal point
@return  a copy with a new character that represents the decimal point, not null
"
      end

      operation 8544386 "convertToDigit"
	package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks whether the character is a digit, based on the currently set zero character.

@param ch  the character to check
@return the value, 0 to 9, of the character, or -1 if not a digit
"
      end

      operation 8544514 "convertNumberToI18N"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "numericText" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the input numeric text to the internationalized form using the zero character.

@param numericText  the text, consisting of digits 0 to 9, to convert, not null
@return the internationalized text, not null
"
      end

      operation 8544642 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this DecimalStyle is equal to another DecimalStyle.

@param obj  the object to check, null returns false
@return true if this is equal to the other date
"
      end

      operation 8544770 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this DecimalStyle.

@return a suitable hash code
"
      end

      operation 8544898 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a string describing this DecimalStyle.

@return a string description, not null
"
      end
    end

    class 1057666 "FormatStyle"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration of the style of a localized date, time or date-time formatter.
<p>
These styles are used when obtaining a date-time style from configuration.
See {@link DateTimeFormatter} and {@link DateTimeFormatterBuilder} for usage.

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      attribute 1965570 "FULL"
	public type class_ref 1057666 // FormatStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ordered from large to small

Full text style, with the most detail.
For example, the format might be 'Tuesday, April 12, 1952 AD' or '3:30:42pm PST'.

"
      end

      attribute 1965698 "LONG"
	public type class_ref 1057666 // FormatStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Long text style, with lots of detail.
For example, the format might be 'January 12, 1952'.

"
      end

      attribute 1965826 "MEDIUM"
	public type class_ref 1057666 // FormatStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Medium text style, with some detail.
For example, the format might be 'Jan 12, 1952'.

"
      end

      attribute 1965954 "SHORT"
	public type class_ref 1057666 // FormatStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Short text style, typically numeric.
For example, the format might be '12.13.52' or '3:30pm'.
"
      end
    end

    class 1057794 "DateTimeParseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception thrown when an error occurs during parsing.
<p>
This exception includes the text being parsed and the error index.

@implSpec
This class is intended for use in a single thread.

@since 1.8
"
      classrelation 3460866 // <generalisation>
	relation 3460866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3460866 // <generalisation>
	  b parent class_ref 1050498 // DateTimeException
      end

      attribute 1964674 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4304633501674722597L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3460994 // parsedString (<unidirectional association>)
	relation 3460994 --->
	  a role_name "parsedString" const_relation private
	    comment "
The text that was being parsed.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3460994 // parsedString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1964802 "errorIndex"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The error index in the text.

"
      end

      operation 8539138 "DateTimeParseException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "parsedData" type class_ref 429442 // CharSequence
	  param in name "errorIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified message.

@param message  the message to use for this exception, may be null
@param parsedData  the parsed text, should not be null
@param errorIndex  the index in the parsed string that was invalid, should be a valid index
"
      end

      operation 8539266 "DateTimeParseException"
	public explicit_return_type ""
	nparams 4
	  param inout name "message" type class_ref 128130 // String
	  param inout name "parsedData" type class_ref 429442 // CharSequence
	  param in name "errorIndex" explicit_type "int"
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified message and cause.

@param message  the message to use for this exception, may be null
@param parsedData  the parsed text, should not be null
@param errorIndex  the index in the parsed string that was invalid, should be a valid index
@param cause  the cause exception, may be null
"
      end

      operation 8539394 "getParsedString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the string that was being parsed.

@return the string that was being parsed, should not be null.
"
      end

      operation 8539522 "getErrorIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index where the error was found.

@return the index in the parsed string that was invalid, should be a valid index
"
      end
    end

    class 1057922 "DateTimeParseContext"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Context object used during date and time parsing.
<p>
This class represents the current state of the parse.
It has the ability to store and retrieve the parsed values and manage optional segments.
It also provides key information to the parsing methods.
<p>
Once parsing is complete, the {@link #toUnresolved()} is used to obtain the unresolved
result data. The {@link #toResolved()} is used to obtain the resolved result.

@implSpec
This class is a mutable context intended for use from a single thread.
Usage of the class is thread-safe within standard parsing as a new instance of this class
is automatically created for each parse and parsing is single-threaded

@since 1.8
"
      classrelation 3460482 // formatter (<unidirectional association>)
	relation 3460482 --->
	  a role_name "formatter" private
	    comment "
The formatter, not null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3460482 // formatter (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      attribute 1964418 "caseSensitive"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Whether to parse using case sensitively.

"
      end

      attribute 1964546 "strict"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Whether to parse using strict rules.

"
      end

      classrelation 3460610 // parsed (<unidirectional association>)
	relation 3460610 --->
	  a role_name "parsed" init_value " new ArrayList<>()" const_relation private
	    comment "
The list of parsed data.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Parsed> ${name}${value};
"
	    classrelation_ref 3460610 // parsed (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 3460738 // chronoListeners (<unidirectional association>)
	relation 3460738 --->
	  a role_name "chronoListeners" init_value " null" private
	    comment "
List of Consumers<Chronology> to be notified if the Chronology changes.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Consumer<Chronology>> ${name}${value};
"
	    classrelation_ref 3460738 // chronoListeners (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 8536066 "DateTimeParseContext"
	package explicit_return_type ""
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the context.

@param formatter  the formatter controlling the parse, not null
"
      end

      operation 8536194 "copy"
	package return_type class_ref 1057922 // DateTimeParseContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this context.
This retains the case sensitive and strict flags.
"
      end

      operation 8536322 "getLocale"
	package return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the locale.
<p>
This locale is used to control localization in the parse except
where localization is controlled by the DecimalStyle.

@return the locale, not null
"
      end

      operation 8536450 "getDecimalStyle"
	package return_type class_ref 1057538 // DecimalStyle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DecimalStyle.
<p>
The DecimalStyle controls the numeric parsing.

@return the DecimalStyle, not null
"
      end

      operation 8536578 "getEffectiveChronology"
	package return_type class_ref 1052546 // Chronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the effective chronology during parsing.

@return the effective parsing chronology, not null
"
      end

      operation 8536706 "isCaseSensitive"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if parsing is case sensitive.

@return true if parsing is case sensitive, false if case insensitive
"
      end

      operation 8536834 "setCaseSensitive"
	package explicit_return_type "void"
	nparams 1
	  param inout name "caseSensitive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the parsing is case sensitive or not.

@param caseSensitive  changes the parsing to be case sensitive or not from now on
"
      end

      operation 8536962 "subSequenceEquals"
	package explicit_return_type "boolean"
	nparams 5
	  param inout name "cs1" type class_ref 429442 // CharSequence
	  param in name "offset1" explicit_type "int"
	  param inout name "cs2" type class_ref 429442 // CharSequence
	  param in name "offset2" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Helper to compare two {@code CharSequence} instances.
This uses {@link #isCaseSensitive()}.

@param cs1  the first character sequence, not null
@param offset1  the offset into the first sequence, valid
@param cs2  the second character sequence, not null
@param offset2  the offset into the second sequence, valid
@param length  the length to check, valid
@return true if equal
"
      end

      operation 8537090 "charEquals"
	package explicit_return_type "boolean"
	nparams 2
	  param in name "ch1" explicit_type "char"
	  param in name "ch2" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper to compare two {@code char}.
This uses {@link #isCaseSensitive()}.

@param ch1  the first character
@param ch2  the second character
@return true if equal
"
      end

      operation 8537218 "charEqualsIgnoreCase"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param in name "c1" explicit_type "char"
	  param in name "c2" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two characters ignoring case.

@param c1  the first
@param c2  the second
@return true if equal
"
      end

      operation 8537346 "isStrict"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if parsing is strict.
<p>
Strict parsing requires exact matching of the text and sign styles.

@return true if parsing is strict, false if lenient
"
      end

      operation 8537474 "setStrict"
	package explicit_return_type "void"
	nparams 1
	  param inout name "strict" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether parsing is strict or lenient.

@param strict  changes the parsing to be strict or lenient from now on
"
      end

      operation 8537602 "startOptional"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Starts the parsing of an optional segment of the input.
"
      end

      operation 8537730 "endOptional"
	package explicit_return_type "void"
	nparams 1
	  param inout name "successful" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends the parsing of an optional segment of the input.

@param successful  whether the optional segment was successfully parsed
"
      end

      operation 8537858 "currentParsed"
	private return_type class_ref 1061250 // Parsed
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the currently active temporal objects.

@return the current temporal objects, not null
"
      end

      operation 8537986 "toUnresolved"
	package return_type class_ref 1061250 // Parsed
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the unresolved result of the parse.

@return the result of the parse, not null
"
      end

      operation 8538114 "toResolved"
	package return_type class_ref 1050754 // TemporalAccessor
	nparams 2
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  param inout name "resolverFields" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<TemporalField> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the resolved result of the parse.

@return the result of the parse, not null
"
      end

      operation 8538242 "getParsed"
	package return_type class_ref 251778 // Long
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the first value that was parsed for the specified field.
<p>
This searches the results of the parse, returning the first value found
for the specified field. No attempt is made to derive a value.
The field may have an out of range value.
For example, the day-of-month might be set to 50, or the hour to 1000.

@param field  the field to query from the map, null returns null
@return the value mapped to the specified field, null if field was not parsed
"
      end

      operation 8538370 "setParsedField"
	package explicit_return_type "int"
	nparams 4
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "value" explicit_type "long"
	  param in name "errorPos" explicit_type "int"
	  param in name "successPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores the parsed field.
<p>
This stores a field-value pair that has been parsed.
The value stored may be out of range for the field - no checks are performed.

@param field  the field to set in the field-value map, not null
@param value  the value to set in the field-value map
@param errorPos  the position of the field being parsed
@param successPos  the position after the field being parsed
@return the new position
"
      end

      operation 8538498 "setParsed"
	package explicit_return_type "void"
	nparams 1
	  param inout name "chrono" type class_ref 1052546 // Chronology
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores the parsed chronology.
<p>
This stores the chronology that has been parsed.
No validation is performed other than ensuring it is not null.
<p>
The list of listeners is copied and cleared so that each
listener is called only once.  A listener can add itself again
if it needs to be notified of future changes.

@param chrono  the parsed chronology, not null
"
      end

      operation 8538626 "addChronoChangedListener"
	package explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Chronology> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Consumer<Chronology> to the list of listeners to be notified
if the Chronology changes.
@param listener a Consumer<Chronology> to be called when Chronology changes
"
      end

      operation 8538754 "setParsed"
	package explicit_return_type "void"
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores the parsed zone.
<p>
This stores the zone that has been parsed.
No validation is performed other than ensuring it is not null.

@param zone  the parsed zone, not null
"
      end

      operation 8538882 "setParsedLeapSecond"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores the parsed leap second.
"
      end

      operation 8539010 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a string version of the context for debugging.

@return a string representation of the context data, not null
"
      end
    end

    class 1058306 "SignStyle"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration of ways to handle the positive/negative sign.
<p>
The formatting engine allows the positive and negative signs of numbers
to be controlled using this enum.
See {@link DateTimeFormatterBuilder} for usage.

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      attribute 1966594 "NORMAL"
	public type class_ref 1058306 // SignStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to output the sign only if the value is negative.
<p>
In strict parsing, the negative sign will be accepted and the positive sign rejected.
In lenient parsing, any sign will be accepted.

"
      end

      attribute 1966722 "ALWAYS"
	public type class_ref 1058306 // SignStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to always output the sign, where zero will output '+'.
<p>
In strict parsing, the absence of a sign will be rejected.
In lenient parsing, any sign will be accepted, with the absence
of a sign treated as a positive number.

"
      end

      attribute 1966850 "NEVER"
	public type class_ref 1058306 // SignStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to never output sign, only outputting the absolute value.
<p>
In strict parsing, any sign will be rejected.
In lenient parsing, any sign will be accepted unless the width is fixed.

"
      end

      attribute 1966978 "NOT_NEGATIVE"
	public type class_ref 1058306 // SignStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to block negative values, throwing an exception on printing.
<p>
In strict parsing, any sign will be rejected.
In lenient parsing, any sign will be accepted unless the width is fixed.

"
      end

      attribute 1967106 "EXCEEDS_PAD"
	public type class_ref 1058306 // SignStyle
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Style to always output the sign if the value exceeds the pad width.
A negative value will always output the '-' sign.
<p>
In strict parsing, the sign will be rejected unless the pad width is exceeded.
In lenient parsing, any sign will be accepted, with the absence
of a sign treated as a positive number.
"
      end

      operation 8547842 "parse"
	package explicit_return_type "boolean"
	nparams 3
	  param inout name "positive" explicit_type "boolean"
	  param inout name "strict" explicit_type "boolean"
	  param inout name "fixedWidth" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse helper.

@param positive  true if positive sign parsed, false for negative sign
@param strict  true if strict, false if lenient
@param fixedWidth  true if fixed width, false if not
@return
"
      end
    end

    class 1058562 "DateTimePrintContext"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Context object used during date and time printing.
<p>
This class provides a single wrapper to items used in the format.

@implSpec
This class is a mutable context intended for use from a single thread.
Usage of the class is thread-safe within standard printing as the framework creates
a new instance of the class for each format and printing is single-threaded.

@since 1.8
"
      classrelation 3461122 // temporal (<unidirectional association>)
	relation 3461122 --->
	  a role_name "temporal" private
	    comment "
The temporal being output.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3461122 // temporal (<unidirectional association>)
	  b parent class_ref 1050754 // TemporalAccessor
      end

      classrelation 3461250 // formatter (<unidirectional association>)
	relation 3461250 --->
	  a role_name "formatter" private
	    comment "
The formatter, not null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3461250 // formatter (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      attribute 1964930 "optional"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Whether the current formatter is optional.

"
      end

      operation 8539650 "DateTimePrintContext"
	package explicit_return_type ""
	nparams 2
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the context.

@param temporal  the temporal object being output, not null
@param formatter  the formatter controlling the format, not null
"
      end

      operation 8539778 "adjust"
	class_operation private return_type class_ref 1050754 // TemporalAccessor
	nparams 2
	  param in name "temporal" type class_ref 1050754 // TemporalAccessor
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8539906 "getTemporal"
	package return_type class_ref 1050754 // TemporalAccessor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the temporal object being output.

@return the temporal object, not null
"
      end

      operation 8540034 "getLocale"
	package return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the locale.
<p>
This locale is used to control localization in the format output except
where localization is controlled by the DecimalStyle.

@return the locale, not null
"
      end

      operation 8540162 "getDecimalStyle"
	package return_type class_ref 1057538 // DecimalStyle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DecimalStyle.
<p>
The DecimalStyle controls the localization of numeric output.

@return the DecimalStyle, not null
"
      end

      operation 8540290 "startOptional"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Starts the printing of an optional segment of the input.
"
      end

      operation 8540418 "endOptional"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends the printing of an optional segment of the input.
"
      end

      operation 8540546 "getValue"
	package explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a value using a query.

@param query  the query to use, not null
@return the result, null if not found and optional is true
@throws DateTimeException if the type is not available and the section is not optional
"
      end

      operation 8540674 "getValue"
	package return_type class_ref 251778 // Long
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified field.
<p>
This will return the value for the specified field.

@param field  the field to find, not null
@return the value, null if not found and optional is true
@throws DateTimeException if the field is not available and the section is not optional
"
      end

      operation 8540802 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a string version of the context for debugging.

@return a string representation of the context, not null
"
      end
    end

    class 1059714 "DateTimeTextProvider"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A provider to obtain the textual form of a date-time field.

@implSpec
Implementations must be thread-safe.
Implementations should cache the textual information.

@since 1.8
"
      classrelation 3461378 // CACHE (<unidirectional association>)
	relation 3461378 --->
	  a role_name "CACHE" init_value " new ConcurrentHashMap<>(16, 0.75f, 2)" class_relation const_relation private
	    comment " Cache. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Entry<TemporalField, Locale>, Object> ${name}${value};
"
	    classrelation_ref 3461378 // CACHE (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3461506 // COMPARATOR (<unidirectional association>)
	relation 3461506 --->
	  a role_name "COMPARATOR" init_value " new Comparator<Entry<String, Long>>() {
        @Override
        public int compare(Entry<String, Long> obj1, Entry<String, Long> obj2) {
            return obj2.getKey().length() - obj1.getKey().length();  // longest to shortest
        }
    }" class_relation const_relation private
	    comment " Comparator. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Entry<String, Long>> ${name}${value};
"
	    classrelation_ref 3461506 // COMPARATOR (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end

      operation 8540930 "DateTimeTextProvider"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8541058 "getInstance"
	class_operation package return_type class_ref 1059714 // DateTimeTextProvider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the provider of text.

@return the provider, not null
"
      end

      operation 8541186 "getText"
	public return_type class_ref 128130 // String
	nparams 4
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "value" explicit_type "long"
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the text for the specified field, locale and style
for the purpose of formatting.
<p>
The text associated with the value is returned.
The null return value should be used if there is no applicable text, or
if the text would be a numeric representation of the value.

@param field  the field to get text for, not null
@param value  the field value to get text for, not null
@param style  the style to get text for, not null
@param locale  the locale to get text for, not null
@return the text for the field value, null if no text found
"
      end

      operation 8541314 "getText"
	public return_type class_ref 128130 // String
	nparams 5
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "value" explicit_type "long"
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the text for the specified chrono, field, locale and style
for the purpose of formatting.
<p>
The text associated with the value is returned.
The null return value should be used if there is no applicable text, or
if the text would be a numeric representation of the value.

@param chrono  the Chronology to get text for, not null
@param field  the field to get text for, not null
@param value  the field value to get text for, not null
@param style  the style to get text for, not null
@param locale  the locale to get text for, not null
@return the text for the field value, null if no text found
"
      end

      operation 8541442 "getTextIterator"
	public return_type class_ref 132994 // Iterator
	nparams 3
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Entry<String, Long>> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an iterator of text to field for the specified field, locale and style
for the purpose of parsing.
<p>
The iterator must be returned in order from the longest text to the shortest.
<p>
The null return value should be used if there is no applicable parsable text, or
if the text would be a numeric representation of the value.
Text can only be parsed if all the values for that field-style-locale combination are unique.

@param field  the field to get text for, not null
@param style  the style to get text for, null for all parsable text
@param locale  the locale to get text for, not null
@return the iterator of text to field pairs, in order from longest text to shortest text,
 null if the field or style is not parsable
"
      end

      operation 8541570 "getTextIterator"
	public return_type class_ref 132994 // Iterator
	nparams 4
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Entry<String, Long>> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an iterator of text to field for the specified chrono, field, locale and style
for the purpose of parsing.
<p>
The iterator must be returned in order from the longest text to the shortest.
<p>
The null return value should be used if there is no applicable parsable text, or
if the text would be a numeric representation of the value.
Text can only be parsed if all the values for that field-style-locale combination are unique.

@param chrono  the Chronology to get text for, not null
@param field  the field to get text for, not null
@param style  the style to get text for, null for all parsable text
@param locale  the locale to get text for, not null
@return the iterator of text to field pairs, in order from longest text to shortest text,
 null if the field or style is not parsable
"
      end

      operation 8541698 "findStore"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8541826 "toWeekDay"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "calWeekDay" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8541954 "createStore"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8542082 "createEntry"
	class_operation private return_type class_ref 192386 // Entry
	nparams 2
	  param inout name "text" explicit_type "A"
	  param inout name "field" explicit_type "B"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A, B> ${type}<A, B> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper method to create an immutable entry.

@param text  the text, not null
@param field  the field, not null
@return the entry, not null
"
      end

      operation 8542210 "getLocalizedResource"
	class_operation package explicit_return_type "T"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns the localized resource of the given key and locale, or null
if no localized resource is available.

@param key  the key of the localized resource, not null
@param locale  the locale, not null
@return the localized resource, or null if not available
@throws NullPointerException if key or locale is null
"
      end

      class 1061378 "LocaleStore"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3461634 // valueTextMap (<unidirectional association>)
	  relation 3461634 --->
	    a role_name "valueTextMap" const_relation private
	      comment "
Map of value to text.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TextStyle, Map<Long, String>> ${name}${value};
"
	      classrelation_ref 3461634 // valueTextMap (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	classrelation 3461762 // parsable (<unidirectional association>)
	  relation 3461762 --->
	    a role_name "parsable" const_relation private
	      comment "
Parsable data.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TextStyle, List<Entry<String, Long>>> ${name}${value};
"
	      classrelation_ref 3461762 // parsable (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 8542338 "LocaleStore"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "valueTextMap" type class_ref 130178 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<TextStyle, Map<Long, String>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.

@param valueTextMap  the map of values to text to store, assigned and not altered, not null
"
	end

	operation 8542466 "getText"
	  package return_type class_ref 128130 // String
	  nparams 2
	    param in name "value" explicit_type "long"
	    param inout name "style" type class_ref 1051522 // TextStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the text for the specified field value, locale and style
for the purpose of printing.

@param value  the value to get text for, not null
@param style  the style to get text for, not null
@return the text for the field value, null if no text found
"
	end

	operation 8542594 "getTextIterator"
	  package return_type class_ref 132994 // Iterator
	  nparams 1
	    param inout name "style" type class_ref 1051522 // TextStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Entry<String, Long>> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets an iterator of text to field for the specified style for the purpose of parsing.
<p>
The iterator must be returned in order from the longest text to the shortest.

@param style  the style to get text for, null for all parsable text
@return the iterator of text to field pairs, in order from longest text to shortest text,
 null if the style is not parsable
"
	end
      end
    end

    class 1061250 "Parsed"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A store of parsed data.
<p>
This class is used during parsing to collect the data. Part of the parsing process
involves handling optional blocks and multiple copies of the data get created to
support the necessary backtracking.
<p>
Once parsing is completed, this class can be used as the resultant {@code TemporalAccessor}.
In most cases, it is only exposed once the fields have been resolved.

@implSpec
This class is a mutable context intended for use from a single thread.
Usage of the class is thread-safe within standard parsing as a new instance of this class
is automatically created for each parse and parsing is single-threaded

@since 1.8
"
      classrelation 3462146 // <realization>
	relation 3462146 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3462146 // <realization>
	  b parent class_ref 1050754 // TemporalAccessor
      end

      classrelation 3462274 // fieldValues (<unidirectional association>)
	relation 3462274 --->
	  a role_name "fieldValues" init_value " new HashMap<>()" const_relation package
	    comment " some fields are accessed using package scope from DateTimeParseContext

The parsed fields.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TemporalField, Long> ${name}${value};
"
	    classrelation_ref 3462274 // fieldValues (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3462402 // zone (<unidirectional association>)
	relation 3462402 --->
	  a role_name "zone" package
	    comment "
The parsed zone.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3462402 // zone (<unidirectional association>)
	  b parent class_ref 1049730 // ZoneId
      end

      classrelation 3462530 // chrono (<unidirectional association>)
	relation 3462530 --->
	  a role_name "chrono" package
	    comment "
The parsed chronology.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3462530 // chrono (<unidirectional association>)
	  b parent class_ref 1052546 // Chronology
      end

      attribute 1966082 "leapSecond"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Whether a leap-second is parsed.

"
      end

      classrelation 3462658 // resolverStyle (<unidirectional association>)
	relation 3462658 --->
	  a role_name "resolverStyle" private
	    comment "
The resolver style to use.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3462658 // resolverStyle (<unidirectional association>)
	  b parent class_ref 1054850 // ResolverStyle
      end

      classrelation 3462786 // date (<unidirectional association>)
	relation 3462786 --->
	  a role_name "date" private
	    comment "
The resolved date.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3462786 // date (<unidirectional association>)
	  b parent class_ref 1052418 // ChronoLocalDate
      end

      classrelation 3462914 // time (<unidirectional association>)
	relation 3462914 --->
	  a role_name "time" private
	    comment "
The resolved time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3462914 // time (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      classrelation 3463042 // excessDays (<unidirectional association>)
	relation 3463042 --->
	  a role_name "excessDays" init_value " Period.ZERO" package
	    comment "
The excess period from time-only parsing.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3463042 // excessDays (<unidirectional association>)
	  b parent class_ref 1053442 // Period
      end

      operation 8545026 "Parsed"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance.
"
      end

      operation 8545154 "copy"
	package return_type class_ref 1061250 // Parsed
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy.
"
      end

      operation 8545282 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8545410 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8545538 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
      end

      operation 8545666 "resolve"
	package return_type class_ref 1050754 // TemporalAccessor
	nparams 2
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  param inout name "resolverFields" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<TemporalField> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Resolves the fields in this context.

@param resolverStyle  the resolver style, not null
@param resolverFields  the fields to use for resolving, null for all fields
@return this, for method chaining
@throws DateTimeException if resolving one field results in a value for
 another field that is in conflict
"
      end

      operation 8545794 "resolveFields"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8545922 "updateCheckConflict"
	private explicit_return_type "void"
	nparams 3
	  param inout name "targetField" type class_ref 1050882 // TemporalField
	  param inout name "changeField" type class_ref 1050882 // TemporalField
	  param inout name "changeValue" type class_ref 251778 // Long
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8546050 "resolveInstantFields"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8546178 "resolveInstantFields0"
	private explicit_return_type "void"
	nparams 1
	  param inout name "selectedZone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8546306 "resolveDateFields"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8546434 "updateCheckConflict"
	private explicit_return_type "void"
	nparams 1
	  param inout name "cld" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8546562 "resolveTimeFields"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8546690 "resolveTimeLenient"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8546818 "resolveTime"
	private explicit_return_type "void"
	nparams 4
	  param in name "hod" explicit_type "long"
	  param in name "moh" explicit_type "long"
	  param in name "som" explicit_type "long"
	  param in name "nos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8546946 "resolvePeriod"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8547074 "resolveFractional"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8547202 "resolveInstant"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8547330 "updateCheckConflict"
	private explicit_return_type "void"
	nparams 2
	  param inout name "timeToSet" type class_ref 1043842 // LocalTime
	  param inout name "periodToSet" type class_ref 1053442 // Period
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8547458 "crossCheck"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8547586 "crossCheck"
	private explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8547714 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end
    end

    class 1061506 "ZoneName"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A helper class to map a zone name to metazone and back to the
appropriate zone id for the particular locale.
<p>
The zid<->metazone mappings are based on CLDR metaZones.xml.
The alias mappings are based on Link entries in tzdb data files.
"
      operation 8548738 "toZid"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "zid" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8548866 "toZid"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "zid" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3463170 // zidMap (<unidirectional association>)
	relation 3463170 --->
	  a role_name "zidMap" multiplicity "[]" init_value " new String[] {
        \"Pacific/Rarotonga\", \"Cook\", \"Pacific/Rarotonga\",
        \"Europe/Tirane\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Recife\", \"Brasilia\", \"America/Sao_Paulo\",
        \"America/Argentina/San_Juan\", \"Argentina\", \"America/Buenos_Aires\",
        \"Asia/Kolkata\", \"India\", \"Asia/Calcutta\",
        \"America/Guayaquil\", \"Ecuador\", \"America/Guayaquil\",
        \"Europe/Samara\", \"Moscow\", \"Europe/Moscow\",
        \"Indian/Antananarivo\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"America/Santa_Isabel\", \"America_Pacific\", \"America/Los_Angeles\",
        \"America/Montserrat\", \"Atlantic\", \"America/Halifax\",
        \"Pacific/Port_Moresby\", \"Papua_New_Guinea\", \"Pacific/Port_Moresby\",
        \"Europe/Paris\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Argentina/Salta\", \"Argentina\", \"America/Buenos_Aires\",
        \"Asia/Omsk\", \"Omsk\", \"Asia/Omsk\",
        \"Africa/Ceuta\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Argentina/San_Luis\", \"Argentina_Western\", \"America/Argentina/San_Luis\",
        \"America/Atikokan\", \"America_Eastern\", \"America/New_York\",
        \"Asia/Vladivostok\", \"Vladivostok\", \"Asia/Vladivostok\",
        \"America/Argentina/Jujuy\", \"Argentina\", \"America/Buenos_Aires\",
        \"Asia/Almaty\", \"Kazakhstan_Eastern\", \"Asia/Almaty\",
        \"Atlantic/Canary\", \"Europe_Western\", \"Atlantic/Canary\",
        \"Asia/Bangkok\", \"Indochina\", \"Asia/Saigon\",
        \"America/Caracas\", \"Venezuela\", \"America/Caracas\",
        \"Australia/Hobart\", \"Australia_Eastern\", \"Australia/Sydney\",
        \"America/Havana\", \"Cuba\", \"America/Havana\",
        \"Africa/Malabo\", \"Africa_Western\", \"Africa/Lagos\",
        \"Australia/Lord_Howe\", \"Lord_Howe\", \"Australia/Lord_Howe\",
        \"Pacific/Fakaofo\", \"Tokelau\", \"Pacific/Fakaofo\",
        \"America/Matamoros\", \"America_Central\", \"America/Chicago\",
        \"America/Guadeloupe\", \"Atlantic\", \"America/Halifax\",
        \"Europe/Helsinki\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Asia/Calcutta\", \"India\", \"Asia/Calcutta\",
        \"Africa/Kinshasa\", \"Africa_Western\", \"Africa/Lagos\",
        \"America/Miquelon\", \"Pierre_Miquelon\", \"America/Miquelon\",
        \"Europe/Athens\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Asia/Novosibirsk\", \"Novosibirsk\", \"Asia/Novosibirsk\",
        \"Indian/Cocos\", \"Cocos\", \"Indian/Cocos\",
        \"Africa/Bujumbura\", \"Africa_Central\", \"Africa/Maputo\",
        \"Europe/Mariehamn\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Winnipeg\", \"America_Central\", \"America/Chicago\",
        \"America/Buenos_Aires\", \"Argentina\", \"America/Buenos_Aires\",
        \"America/Yellowknife\", \"America_Mountain\", \"America/Denver\",
        \"Pacific/Midway\", \"Samoa\", \"Pacific/Apia\",
        \"Africa/Dar_es_Salaam\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Pacific/Tahiti\", \"Tahiti\", \"Pacific/Tahiti\",
        \"Asia/Gaza\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Australia/Lindeman\", \"Australia_Eastern\", \"Australia/Sydney\",
        \"Europe/Kaliningrad\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Europe/Bucharest\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Lower_Princes\", \"Atlantic\", \"America/Halifax\",
        \"Pacific/Chuuk\", \"Truk\", \"Pacific/Truk\",
        \"America/Anchorage\", \"Alaska\", \"America/Juneau\",
        \"America/Rankin_Inlet\", \"America_Central\", \"America/Chicago\",
        \"America/Marigot\", \"Atlantic\", \"America/Halifax\",
        \"Africa/Juba\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Africa/Algiers\", \"Europe_Central\", \"Europe/Paris\",
        \"Europe/Kiev\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Santarem\", \"Brasilia\", \"America/Sao_Paulo\",
        \"Africa/Brazzaville\", \"Africa_Western\", \"Africa/Lagos\",
        \"Asia/Choibalsan\", \"Choibalsan\", \"Asia/Choibalsan\",
        \"Indian/Christmas\", \"Christmas\", \"Indian/Christmas\",
        \"America/Nassau\", \"America_Eastern\", \"America/New_York\",
        \"Africa/Tunis\", \"Europe_Central\", \"Europe/Paris\",
        \"Pacific/Noumea\", \"New_Caledonia\", \"Pacific/Noumea\",
        \"Africa/El_Aaiun\", \"Europe_Western\", \"Atlantic/Canary\",
        \"Europe/Sarajevo\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Campo_Grande\", \"Amazon\", \"America/Manaus\",
        \"America/Puerto_Rico\", \"Atlantic\", \"America/Halifax\",
        \"Antarctica/Mawson\", \"Mawson\", \"Antarctica/Mawson\",
        \"Pacific/Galapagos\", \"Galapagos\", \"Pacific/Galapagos\",
        \"Asia/Tehran\", \"Iran\", \"Asia/Tehran\",
        \"America/Port-au-Prince\", \"America_Eastern\", \"America/New_York\",
        \"America/Scoresbysund\", \"Greenland_Eastern\", \"America/Scoresbysund\",
        \"Africa/Harare\", \"Africa_Central\", \"Africa/Maputo\",
        \"America/Dominica\", \"Atlantic\", \"America/Halifax\",
        \"Europe/Chisinau\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Chihuahua\", \"America_Mountain\", \"America/Denver\",
        \"America/La_Paz\", \"Bolivia\", \"America/La_Paz\",
        \"Indian/Chagos\", \"Indian_Ocean\", \"Indian/Chagos\",
        \"Australia/Broken_Hill\", \"Australia_Central\", \"Australia/Adelaide\",
        \"America/Grenada\", \"Atlantic\", \"America/Halifax\",
        \"America/North_Dakota/New_Salem\", \"America_Central\", \"America/Chicago\",
        \"Pacific/Majuro\", \"Marshall_Islands\", \"Pacific/Majuro\",
        \"Australia/Adelaide\", \"Australia_Central\", \"Australia/Adelaide\",
        \"Europe/Warsaw\", \"Europe_Central\", \"Europe/Paris\",
        \"Europe/Vienna\", \"Europe_Central\", \"Europe/Paris\",
        \"Atlantic/Cape_Verde\", \"Cape_Verde\", \"Atlantic/Cape_Verde\",
        \"America/Mendoza\", \"Argentina\", \"America/Buenos_Aires\",
        \"Pacific/Gambier\", \"Gambier\", \"Pacific/Gambier\",
        \"Europe/Istanbul\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Kentucky/Monticello\", \"America_Eastern\", \"America/New_York\",
        \"America/Chicago\", \"America_Central\", \"America/Chicago\",
        \"Asia/Ulaanbaatar\", \"Mongolia\", \"Asia/Ulaanbaatar\",
        \"Indian/Maldives\", \"Maldives\", \"Indian/Maldives\",
        \"America/Mexico_City\", \"America_Central\", \"America/Chicago\",
        \"Africa/Asmara\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Asia/Chongqing\", \"China\", \"Asia/Shanghai\",
        \"America/Argentina/La_Rioja\", \"Argentina\", \"America/Buenos_Aires\",
        \"America/Tijuana\", \"America_Pacific\", \"America/Los_Angeles\",
        \"Asia/Harbin\", \"China\", \"Asia/Shanghai\",
        \"Pacific/Honolulu\", \"Hawaii_Aleutian\", \"Pacific/Honolulu\",
        \"Atlantic/Azores\", \"Azores\", \"Atlantic/Azores\",
        \"Indian/Mayotte\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"America/Guatemala\", \"America_Central\", \"America/Chicago\",
        \"America/Indianapolis\", \"America_Eastern\", \"America/New_York\",
        \"America/Halifax\", \"Atlantic\", \"America/Halifax\",
        \"America/Resolute\", \"America_Central\", \"America/Chicago\",
        \"Europe/London\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/Hermosillo\", \"America_Mountain\", \"America/Denver\",
        \"Atlantic/Madeira\", \"Europe_Western\", \"Atlantic/Canary\",
        \"Europe/Zagreb\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Boa_Vista\", \"Amazon\", \"America/Manaus\",
        \"America/Regina\", \"America_Central\", \"America/Chicago\",
        \"America/Cordoba\", \"Argentina\", \"America/Buenos_Aires\",
        \"America/Shiprock\", \"America_Mountain\", \"America/Denver\",
        \"Europe/Luxembourg\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Cancun\", \"America_Central\", \"America/Chicago\",
        \"Pacific/Enderbury\", \"Phoenix_Islands\", \"Pacific/Enderbury\",
        \"Africa/Bissau\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Antarctica/Vostok\", \"Vostok\", \"Antarctica/Vostok\",
        \"Pacific/Apia\", \"Samoa\", \"Pacific/Apia\",
        \"Australia/Perth\", \"Australia_Western\", \"Australia/Perth\",
        \"America/Juneau\", \"Alaska\", \"America/Juneau\",
        \"Africa/Mbabane\", \"Africa_Southern\", \"Africa/Johannesburg\",
        \"Pacific/Niue\", \"Niue\", \"Pacific/Niue\",
        \"Europe/Zurich\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Rio_Branco\", \"Amazon\", \"America/Manaus\",
        \"Africa/Ndjamena\", \"Africa_Western\", \"Africa/Lagos\",
        \"Asia/Macau\", \"China\", \"Asia/Shanghai\",
        \"America/Lima\", \"Peru\", \"America/Lima\",
        \"Africa/Windhoek\", \"Africa_Western\", \"Africa/Lagos\",
        \"America/Sitka\", \"Alaska\", \"America/Juneau\",
        \"America/Mazatlan\", \"America_Mountain\", \"America/Denver\",
        \"Asia/Saigon\", \"Indochina\", \"Asia/Saigon\",
        \"Asia/Kamchatka\", \"Magadan\", \"Asia/Magadan\",
        \"America/Menominee\", \"America_Central\", \"America/Chicago\",
        \"America/Belize\", \"America_Central\", \"America/Chicago\",
        \"America/Sao_Paulo\", \"Brasilia\", \"America/Sao_Paulo\",
        \"America/Barbados\", \"Atlantic\", \"America/Halifax\",
        \"America/Porto_Velho\", \"Amazon\", \"America/Manaus\",
        \"America/Costa_Rica\", \"America_Central\", \"America/Chicago\",
        \"Europe/Monaco\", \"Europe_Central\", \"Europe/Paris\",
        \"Europe/Riga\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Europe/Vatican\", \"Europe_Central\", \"Europe/Paris\",
        \"Europe/Madrid\", \"Europe_Central\", \"Europe/Paris\",
        \"Africa/Dakar\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Asia/Damascus\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Asia/Hong_Kong\", \"Hong_Kong\", \"Asia/Hong_Kong\",
        \"America/Adak\", \"Hawaii_Aleutian\", \"Pacific/Honolulu\",
        \"Europe/Vilnius\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Indiana/Indianapolis\", \"America_Eastern\", \"America/New_York\",
        \"Africa/Freetown\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Atlantic/Reykjavik\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Asia/Ho_Chi_Minh\", \"Indochina\", \"Asia/Saigon\",
        \"America/St_Kitts\", \"Atlantic\", \"America/Halifax\",
        \"America/Martinique\", \"Atlantic\", \"America/Halifax\",
        \"America/Thule\", \"Atlantic\", \"America/Halifax\",
        \"America/Asuncion\", \"Paraguay\", \"America/Asuncion\",
        \"Africa/Luanda\", \"Africa_Western\", \"Africa/Lagos\",
        \"America/Monterrey\", \"America_Central\", \"America/Chicago\",
        \"Pacific/Fiji\", \"Fiji\", \"Pacific/Fiji\",
        \"Africa/Banjul\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/Grand_Turk\", \"America_Eastern\", \"America/New_York\",
        \"Pacific/Pitcairn\", \"Pitcairn\", \"Pacific/Pitcairn\",
        \"America/Montevideo\", \"Uruguay\", \"America/Montevideo\",
        \"America/Bahia_Banderas\", \"America_Central\", \"America/Chicago\",
        \"America/Cayman\", \"America_Eastern\", \"America/New_York\",
        \"Pacific/Norfolk\", \"Norfolk\", \"Pacific/Norfolk\",
        \"Africa/Ouagadougou\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/Maceio\", \"Brasilia\", \"America/Sao_Paulo\",
        \"Pacific/Guam\", \"Chamorro\", \"Pacific/Saipan\",
        \"Africa/Monrovia\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Africa/Bamako\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Asia/Colombo\", \"India\", \"Asia/Calcutta\",
        \"Asia/Urumqi\", \"China\", \"Asia/Shanghai\",
        \"Asia/Kabul\", \"Afghanistan\", \"Asia/Kabul\",
        \"America/Yakutat\", \"Alaska\", \"America/Juneau\",
        \"America/Phoenix\", \"America_Mountain\", \"America/Denver\",
        \"Asia/Nicosia\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Asia/Phnom_Penh\", \"Indochina\", \"Asia/Saigon\",
        \"America/Rainy_River\", \"America_Central\", \"America/Chicago\",
        \"Europe/Uzhgorod\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Pacific/Saipan\", \"Chamorro\", \"Pacific/Saipan\",
        \"America/St_Vincent\", \"Atlantic\", \"America/Halifax\",
        \"Europe/Rome\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Nome\", \"Alaska\", \"America/Juneau\",
        \"Africa/Mogadishu\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Europe/Zaporozhye\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Pacific/Funafuti\", \"Tuvalu\", \"Pacific/Funafuti\",
        \"Atlantic/South_Georgia\", \"South_Georgia\", \"Atlantic/South_Georgia\",
        \"Europe/Skopje\", \"Europe_Central\", \"Europe/Paris\",
        \"Asia/Yekaterinburg\", \"Yekaterinburg\", \"Asia/Yekaterinburg\",
        \"Australia/Melbourne\", \"Australia_Eastern\", \"Australia/Sydney\",
        \"America/Argentina/Cordoba\", \"Argentina\", \"America/Buenos_Aires\",
        \"Africa/Kigali\", \"Africa_Central\", \"Africa/Maputo\",
        \"Africa/Blantyre\", \"Africa_Central\", \"Africa/Maputo\",
        \"Africa/Tripoli\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Africa/Gaborone\", \"Africa_Central\", \"Africa/Maputo\",
        \"Asia/Kuching\", \"Malaysia\", \"Asia/Kuching\",
        \"Pacific/Nauru\", \"Nauru\", \"Pacific/Nauru\",
        \"America/Aruba\", \"Atlantic\", \"America/Halifax\",
        \"America/Antigua\", \"Atlantic\", \"America/Halifax\",
        \"Europe/Volgograd\", \"Volgograd\", \"Europe/Volgograd\",
        \"Africa/Djibouti\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"America/Catamarca\", \"Argentina\", \"America/Buenos_Aires\",
        \"Asia/Manila\", \"Philippines\", \"Asia/Manila\",
        \"Pacific/Kiritimati\", \"Line_Islands\", \"Pacific/Kiritimati\",
        \"Asia/Shanghai\", \"China\", \"Asia/Shanghai\",
        \"Pacific/Truk\", \"Truk\", \"Pacific/Truk\",
        \"Pacific/Tarawa\", \"Gilbert_Islands\", \"Pacific/Tarawa\",
        \"Africa/Conakry\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Asia/Bishkek\", \"Kyrgystan\", \"Asia/Bishkek\",
        \"Europe/Gibraltar\", \"Europe_Central\", \"Europe/Paris\",
        \"Asia/Rangoon\", \"Myanmar\", \"Asia/Rangoon\",
        \"Asia/Baku\", \"Azerbaijan\", \"Asia/Baku\",
        \"America/Santiago\", \"Chile\", \"America/Santiago\",
        \"America/El_Salvador\", \"America_Central\", \"America/Chicago\",
        \"America/Noronha\", \"Noronha\", \"America/Noronha\",
        \"America/St_Thomas\", \"Atlantic\", \"America/Halifax\",
        \"Atlantic/St_Helena\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Asia/Krasnoyarsk\", \"Krasnoyarsk\", \"Asia/Krasnoyarsk\",
        \"America/Vancouver\", \"America_Pacific\", \"America/Los_Angeles\",
        \"Europe/Belgrade\", \"Europe_Central\", \"Europe/Paris\",
        \"America/St_Barthelemy\", \"Atlantic\", \"America/Halifax\",
        \"Asia/Pontianak\", \"Indonesia_Western\", \"Asia/Jakarta\",
        \"Africa/Lusaka\", \"Africa_Central\", \"Africa/Maputo\",
        \"America/Godthab\", \"Greenland_Western\", \"America/Godthab\",
        \"Asia/Dhaka\", \"Bangladesh\", \"Asia/Dhaka\",
        \"Asia/Dubai\", \"Gulf\", \"Asia/Dubai\",
        \"Europe/Moscow\", \"Moscow\", \"Europe/Moscow\",
        \"America/Louisville\", \"America_Eastern\", \"America/New_York\",
        \"Australia/Darwin\", \"Australia_Central\", \"Australia/Adelaide\",
        \"America/Santo_Domingo\", \"Atlantic\", \"America/Halifax\",
        \"America/Argentina/Ushuaia\", \"Argentina\", \"America/Buenos_Aires\",
        \"America/Tegucigalpa\", \"America_Central\", \"America/Chicago\",
        \"Asia/Aden\", \"Arabian\", \"Asia/Riyadh\",
        \"America/Inuvik\", \"America_Mountain\", \"America/Denver\",
        \"Asia/Beirut\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Asia/Qatar\", \"Arabian\", \"Asia/Riyadh\",
        \"Europe/Oslo\", \"Europe_Central\", \"Europe/Paris\",
        \"Asia/Anadyr\", \"Magadan\", \"Asia/Magadan\",
        \"Pacific/Palau\", \"Palau\", \"Pacific/Palau\",
        \"Arctic/Longyearbyen\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Anguilla\", \"Atlantic\", \"America/Halifax\",
        \"Asia/Aqtau\", \"Kazakhstan_Western\", \"Asia/Aqtobe\",
        \"Asia/Yerevan\", \"Armenia\", \"Asia/Yerevan\",
        \"Africa/Lagos\", \"Africa_Western\", \"Africa/Lagos\",
        \"America/Denver\", \"America_Mountain\", \"America/Denver\",
        \"Antarctica/Palmer\", \"Chile\", \"America/Santiago\",
        \"Europe/Stockholm\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Bahia\", \"Brasilia\", \"America/Sao_Paulo\",
        \"America/Danmarkshavn\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Indian/Mauritius\", \"Mauritius\", \"Indian/Mauritius\",
        \"Pacific/Chatham\", \"Chatham\", \"Pacific/Chatham\",
        \"Europe/Prague\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Blanc-Sablon\", \"Atlantic\", \"America/Halifax\",
        \"America/Bogota\", \"Colombia\", \"America/Bogota\",
        \"America/Managua\", \"America_Central\", \"America/Chicago\",
        \"Pacific/Auckland\", \"New_Zealand\", \"Pacific/Auckland\",
        \"Atlantic/Faroe\", \"Europe_Western\", \"Atlantic/Canary\",
        \"America/Cambridge_Bay\", \"America_Mountain\", \"America/Denver\",
        \"America/Los_Angeles\", \"America_Pacific\", \"America/Los_Angeles\",
        \"Africa/Khartoum\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Europe/Simferopol\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Australia/Currie\", \"Australia_Eastern\", \"Australia/Sydney\",
        \"Europe/Guernsey\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Asia/Thimphu\", \"Bhutan\", \"Asia/Thimphu\",
        \"America/Eirunepe\", \"Amazon\", \"America/Manaus\",
        \"Africa/Nairobi\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Asia/Yakutsk\", \"Yakutsk\", \"Asia/Yakutsk\",
        \"Asia/Yangon\", \"Myanmar\", \"Asia/Rangoon\",
        \"America/Goose_Bay\", \"Atlantic\", \"America/Halifax\",
        \"Africa/Maseru\", \"Africa_Southern\", \"Africa/Johannesburg\",
        \"America/Swift_Current\", \"America_Central\", \"America/Chicago\",
        \"America/Guyana\", \"Guyana\", \"America/Guyana\",
        \"Asia/Tokyo\", \"Japan\", \"Asia/Tokyo\",
        \"Indian/Kerguelen\", \"French_Southern\", \"Indian/Kerguelen\",
        \"America/Belem\", \"Brasilia\", \"America/Sao_Paulo\",
        \"Pacific/Wallis\", \"Wallis\", \"Pacific/Wallis\",
        \"America/Whitehorse\", \"America_Pacific\", \"America/Los_Angeles\",
        \"America/North_Dakota/Beulah\", \"America_Central\", \"America/Chicago\",
        \"Asia/Jerusalem\", \"Israel\", \"Asia/Jerusalem\",
        \"Antarctica/Syowa\", \"Syowa\", \"Antarctica/Syowa\",
        \"America/Thunder_Bay\", \"America_Eastern\", \"America/New_York\",
        \"Asia/Brunei\", \"Brunei\", \"Asia/Brunei\",
        \"America/Metlakatla\", \"America_Pacific\", \"America/Los_Angeles\",
        \"Asia/Dushanbe\", \"Tajikistan\", \"Asia/Dushanbe\",
        \"Pacific/Kosrae\", \"Kosrae\", \"Pacific/Kosrae\",
        \"America/Coral_Harbour\", \"America_Eastern\", \"America/New_York\",
        \"America/Tortola\", \"Atlantic\", \"America/Halifax\",
        \"Asia/Karachi\", \"Pakistan\", \"Asia/Karachi\",
        \"Indian/Reunion\", \"Reunion\", \"Indian/Reunion\",
        \"America/Detroit\", \"America_Eastern\", \"America/New_York\",
        \"Australia/Eucla\", \"Australia_CentralWestern\", \"Australia/Eucla\",
        \"Asia/Seoul\", \"Korea\", \"Asia/Seoul\",
        \"Asia/Singapore\", \"Singapore\", \"Asia/Singapore\",
        \"Africa/Casablanca\", \"Europe_Western\", \"Atlantic/Canary\",
        \"Asia/Dili\", \"East_Timor\", \"Asia/Dili\",
        \"America/Indiana/Vincennes\", \"America_Eastern\", \"America/New_York\",
        \"Europe/Dublin\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/St_Johns\", \"Newfoundland\", \"America/St_Johns\",
        \"Antarctica/Macquarie\", \"Macquarie\", \"Antarctica/Macquarie\",
        \"America/Port_of_Spain\", \"Atlantic\", \"America/Halifax\",
        \"Europe/Budapest\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Fortaleza\", \"Brasilia\", \"America/Sao_Paulo\",
        \"Australia/Brisbane\", \"Australia_Eastern\", \"Australia/Sydney\",
        \"Atlantic/Bermuda\", \"Atlantic\", \"America/Halifax\",
        \"Asia/Amman\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Asia/Tashkent\", \"Uzbekistan\", \"Asia/Tashkent\",
        \"Antarctica/DumontDUrville\", \"DumontDUrville\", \"Antarctica/DumontDUrville\",
        \"Antarctica/Casey\", \"Australia_Western\", \"Australia/Perth\",
        \"Asia/Vientiane\", \"Indochina\", \"Asia/Saigon\",
        \"Pacific/Johnston\", \"Hawaii_Aleutian\", \"Pacific/Honolulu\",
        \"America/Jamaica\", \"America_Eastern\", \"America/New_York\",
        \"Africa/Addis_Ababa\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Pacific/Ponape\", \"Ponape\", \"Pacific/Ponape\",
        \"Europe/Jersey\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Africa/Lome\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/Manaus\", \"Amazon\", \"America/Manaus\",
        \"Africa/Niamey\", \"Africa_Western\", \"Africa/Lagos\",
        \"Asia/Kashgar\", \"China\", \"Asia/Shanghai\",
        \"Pacific/Tongatapu\", \"Tonga\", \"Pacific/Tongatapu\",
        \"Europe/Minsk\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Edmonton\", \"America_Mountain\", \"America/Denver\",
        \"Asia/Baghdad\", \"Arabian\", \"Asia/Riyadh\",
        \"Asia/Kathmandu\", \"Nepal\", \"Asia/Katmandu\",
        \"America/Ojinaga\", \"America_Mountain\", \"America/Denver\",
        \"Africa/Abidjan\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/Indiana/Winamac\", \"America_Eastern\", \"America/New_York\",
        \"Asia/Qyzylorda\", \"Kazakhstan_Eastern\", \"Asia/Almaty\",
        \"Australia/Sydney\", \"Australia_Eastern\", \"Australia/Sydney\",
        \"Asia/Ashgabat\", \"Turkmenistan\", \"Asia/Ashgabat\",
        \"Europe/Amsterdam\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Dawson_Creek\", \"America_Mountain\", \"America/Denver\",
        \"Africa/Cairo\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Asia/Pyongyang\", \"Korea\", \"Asia/Seoul\",
        \"Africa/Kampala\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"America/Araguaina\", \"Brasilia\", \"America/Sao_Paulo\",
        \"Asia/Novokuznetsk\", \"Novosibirsk\", \"Asia/Novosibirsk\",
        \"Pacific/Kwajalein\", \"Marshall_Islands\", \"Pacific/Majuro\",
        \"Africa/Lubumbashi\", \"Africa_Central\", \"Africa/Maputo\",
        \"Asia/Sakhalin\", \"Sakhalin\", \"Asia/Sakhalin\",
        \"America/Indiana/Vevay\", \"America_Eastern\", \"America/New_York\",
        \"Africa/Maputo\", \"Africa_Central\", \"Africa/Maputo\",
        \"Atlantic/Faeroe\", \"Europe_Western\", \"Atlantic/Canary\",
        \"America/North_Dakota/Center\", \"America_Central\", \"America/Chicago\",
        \"Pacific/Wake\", \"Wake\", \"Pacific/Wake\",
        \"Pacific/Pago_Pago\", \"Samoa\", \"Pacific/Apia\",
        \"America/Moncton\", \"Atlantic\", \"America/Halifax\",
        \"Africa/Sao_Tome\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/Glace_Bay\", \"Atlantic\", \"America/Halifax\",
        \"Asia/Jakarta\", \"Indonesia_Western\", \"Asia/Jakarta\",
        \"Africa/Asmera\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"Europe/Lisbon\", \"Europe_Western\", \"Atlantic/Canary\",
        \"America/Dawson\", \"America_Pacific\", \"America/Los_Angeles\",
        \"America/Cayenne\", \"French_Guiana\", \"America/Cayenne\",
        \"Asia/Bahrain\", \"Arabian\", \"Asia/Riyadh\",
        \"Europe/Malta\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Indiana/Tell_City\", \"America_Central\", \"America/Chicago\",
        \"America/Indiana/Petersburg\", \"America_Eastern\", \"America/New_York\",
        \"Antarctica/Rothera\", \"Rothera\", \"Antarctica/Rothera\",
        \"Asia/Aqtobe\", \"Kazakhstan_Western\", \"Asia/Aqtobe\",
        \"Europe/Vaduz\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Indiana/Marengo\", \"America_Eastern\", \"America/New_York\",
        \"Europe/Brussels\", \"Europe_Central\", \"Europe/Paris\",
        \"Europe/Andorra\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Indiana/Knox\", \"America_Central\", \"America/Chicago\",
        \"Pacific/Easter\", \"Easter\", \"Pacific/Easter\",
        \"America/Argentina/Rio_Gallegos\", \"Argentina\", \"America/Buenos_Aires\",
        \"Asia/Oral\", \"Kazakhstan_Western\", \"Asia/Aqtobe\",
        \"Europe/Copenhagen\", \"Europe_Central\", \"Europe/Paris\",
        \"Africa/Johannesburg\", \"Africa_Southern\", \"Africa/Johannesburg\",
        \"Pacific/Pohnpei\", \"Ponape\", \"Pacific/Ponape\",
        \"America/Argentina/Tucuman\", \"Argentina\", \"America/Buenos_Aires\",
        \"America/Toronto\", \"America_Eastern\", \"America/New_York\",
        \"Asia/Makassar\", \"Indonesia_Central\", \"Asia/Makassar\",
        \"Europe/Berlin\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Argentina/Mendoza\", \"Argentina\", \"America/Buenos_Aires\",
        \"America/Cuiaba\", \"Amazon\", \"America/Manaus\",
        \"America/Creston\", \"America_Mountain\", \"America/Denver\",
        \"Asia/Samarkand\", \"Uzbekistan\", \"Asia/Tashkent\",
        \"Asia/Hovd\", \"Hovd\", \"Asia/Hovd\",
        \"Europe/Bratislava\", \"Europe_Central\", \"Europe/Paris\",
        \"Africa/Accra\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Africa/Douala\", \"Africa_Western\", \"Africa/Lagos\",
        \"Africa/Nouakchott\", \"GMT\", \"Atlantic/Reykjavik\",
        \"Europe/Sofia\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"Antarctica/Davis\", \"Davis\", \"Antarctica/Davis\",
        \"Antarctica/McMurdo\", \"New_Zealand\", \"Pacific/Auckland\",
        \"Europe/San_Marino\", \"Europe_Central\", \"Europe/Paris\",
        \"Africa/Porto-Novo\", \"Africa_Western\", \"Africa/Lagos\",
        \"Asia/Jayapura\", \"Indonesia_Eastern\", \"Asia/Jayapura\",
        \"America/St_Lucia\", \"Atlantic\", \"America/Halifax\",
        \"America/Nipigon\", \"America_Eastern\", \"America/New_York\",
        \"America/Argentina/Catamarca\", \"Argentina\", \"America/Buenos_Aires\",
        \"Europe/Isle_of_Man\", \"GMT\", \"Atlantic/Reykjavik\",
        \"America/Kentucky/Louisville\", \"America_Eastern\", \"America/New_York\",
        \"America/Merida\", \"America_Central\", \"America/Chicago\",
        \"Pacific/Marquesas\", \"Marquesas\", \"Pacific/Marquesas\",
        \"Asia/Magadan\", \"Magadan\", \"Asia/Magadan\",
        \"Africa/Libreville\", \"Africa_Western\", \"Africa/Lagos\",
        \"Pacific/Efate\", \"Vanuatu\", \"Pacific/Efate\",
        \"Asia/Kuala_Lumpur\", \"Malaysia\", \"Asia/Kuching\",
        \"America/Iqaluit\", \"America_Eastern\", \"America/New_York\",
        \"Indian/Comoro\", \"Africa_Eastern\", \"Africa/Nairobi\",
        \"America/Panama\", \"America_Eastern\", \"America/New_York\",
        \"Asia/Hebron\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/Jujuy\", \"Argentina\", \"America/Buenos_Aires\",
        \"America/Pangnirtung\", \"America_Eastern\", \"America/New_York\",
        \"Asia/Tbilisi\", \"Georgia\", \"Asia/Tbilisi\",
        \"Europe/Podgorica\", \"Europe_Central\", \"Europe/Paris\",
        \"America/Boise\", \"America_Mountain\", \"America/Denver\",
        \"Asia/Muscat\", \"Gulf\", \"Asia/Dubai\",
        \"Indian/Mahe\", \"Seychelles\", \"Indian/Mahe\",
        \"America/Montreal\", \"America_Eastern\", \"America/New_York\",
        \"Africa/Bangui\", \"Africa_Western\", \"Africa/Lagos\",
        \"America/Curacao\", \"Atlantic\", \"America/Halifax\",
        \"Asia/Taipei\", \"Taipei\", \"Asia/Taipei\",
        \"Europe/Ljubljana\", \"Europe_Central\", \"Europe/Paris\",
        \"Atlantic/Stanley\", \"Falkland\", \"Atlantic/Stanley\",
        \"Pacific/Guadalcanal\", \"Solomon\", \"Pacific/Guadalcanal\",
        \"Asia/Kuwait\", \"Arabian\", \"Asia/Riyadh\",
        \"Asia/Riyadh\", \"Arabian\", \"Asia/Riyadh\",
        \"Europe/Tallinn\", \"Europe_Eastern\", \"Europe/Bucharest\",
        \"America/New_York\", \"America_Eastern\", \"America/New_York\",
        \"America/Paramaribo\", \"Suriname\", \"America/Paramaribo\",
        \"America/Argentina/Buenos_Aires\", \"Argentina\", \"America/Buenos_Aires\",
        \"Asia/Irkutsk\", \"Irkutsk\", \"Asia/Irkutsk\",
        \"Asia/Katmandu\", \"Nepal\", \"Asia/Katmandu\",
        \"America/Kralendijk\", \"Atlantic\", \"America/Halifax\",
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3463170 // zidMap (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3463298 // mzoneMap (<unidirectional association>)
	relation 3463298 --->
	  a role_name "mzoneMap" multiplicity "[]" init_value " new String[] {
        \"GMT\", \"ST\", \"Africa/Sao_Tome\",
        \"GMT\", \"ML\", \"Africa/Bamako\",
        \"GMT\", \"IE\", \"Europe/Dublin\",
        \"GMT\", \"SN\", \"Africa/Dakar\",
        \"GMT\", \"GH\", \"Africa/Accra\",
        \"GMT\", \"CI\", \"Africa/Abidjan\",
        \"GMT\", \"BF\", \"Africa/Ouagadougou\",
        \"GMT\", \"MR\", \"Africa/Nouakchott\",
        \"GMT\", \"GM\", \"Africa/Banjul\",
        \"GMT\", \"SL\", \"Africa/Freetown\",
        \"GMT\", \"GN\", \"Africa/Conakry\",
        \"GMT\", \"SH\", \"Atlantic/St_Helena\",
        \"GMT\", \"GB\", \"Europe/London\",
        \"GMT\", \"LR\", \"Africa/Monrovia\",
        \"GMT\", \"TG\", \"Africa/Lome\",
        \"Africa_Western\", \"CF\", \"Africa/Bangui\",
        \"Africa_Western\", \"NE\", \"Africa/Niamey\",
        \"Africa_Western\", \"CM\", \"Africa/Douala\",
        \"Africa_Western\", \"CD\", \"Africa/Kinshasa\",
        \"Africa_Western\", \"CG\", \"Africa/Brazzaville\",
        \"Africa_Western\", \"GA\", \"Africa/Libreville\",
        \"Africa_Western\", \"TD\", \"Africa/Ndjamena\",
        \"Africa_Western\", \"AO\", \"Africa/Luanda\",
        \"Africa_Western\", \"GQ\", \"Africa/Malabo\",
        \"Africa_Eastern\", \"YT\", \"Indian/Mayotte\",
        \"Africa_Eastern\", \"UG\", \"Africa/Kampala\",
        \"Africa_Eastern\", \"ET\", \"Africa/Addis_Ababa\",
        \"Africa_Eastern\", \"MG\", \"Indian/Antananarivo\",
        \"Africa_Eastern\", \"TZ\", \"Africa/Dar_es_Salaam\",
        \"Africa_Eastern\", \"SO\", \"Africa/Mogadishu\",
        \"Africa_Eastern\", \"ER\", \"Africa/Asmera\",
        \"Africa_Eastern\", \"KM\", \"Indian/Comoro\",
        \"Africa_Eastern\", \"DJ\", \"Africa/Djibouti\",
        \"Europe_Central\", \"GI\", \"Europe/Gibraltar\",
        \"Europe_Central\", \"DK\", \"Europe/Copenhagen\",
        \"Europe_Central\", \"SE\", \"Europe/Stockholm\",
        \"Europe_Central\", \"CH\", \"Europe/Zurich\",
        \"Europe_Central\", \"AL\", \"Europe/Tirane\",
        \"Europe_Central\", \"RS\", \"Europe/Belgrade\",
        \"Europe_Central\", \"HU\", \"Europe/Budapest\",
        \"Europe_Central\", \"MT\", \"Europe/Malta\",
        \"Europe_Central\", \"PL\", \"Europe/Warsaw\",
        \"Europe_Central\", \"ME\", \"Europe/Podgorica\",
        \"Europe_Central\", \"ES\", \"Europe/Madrid\",
        \"Europe_Central\", \"CZ\", \"Europe/Prague\",
        \"Europe_Central\", \"IT\", \"Europe/Rome\",
        \"Europe_Central\", \"SI\", \"Europe/Ljubljana\",
        \"Europe_Central\", \"LI\", \"Europe/Vaduz\",
        \"Europe_Central\", \"AT\", \"Europe/Vienna\",
        \"Europe_Central\", \"VA\", \"Europe/Vatican\",
        \"Europe_Central\", \"DE\", \"Europe/Berlin\",
        \"Europe_Central\", \"NO\", \"Europe/Oslo\",
        \"Europe_Central\", \"SK\", \"Europe/Bratislava\",
        \"Europe_Central\", \"AD\", \"Europe/Andorra\",
        \"Europe_Central\", \"SM\", \"Europe/San_Marino\",
        \"Europe_Central\", \"MK\", \"Europe/Skopje\",
        \"Europe_Central\", \"TN\", \"Africa/Tunis\",
        \"Europe_Central\", \"HR\", \"Europe/Zagreb\",
        \"Europe_Central\", \"NL\", \"Europe/Amsterdam\",
        \"Europe_Central\", \"BE\", \"Europe/Brussels\",
        \"Europe_Central\", \"MC\", \"Europe/Monaco\",
        \"Europe_Central\", \"LU\", \"Europe/Luxembourg\",
        \"Europe_Central\", \"BA\", \"Europe/Sarajevo\",
        \"China\", \"MO\", \"Asia/Macau\",
        \"America_Pacific\", \"MX\", \"America/Tijuana\",
        \"America_Pacific\", \"CA\", \"America/Vancouver\",
        \"Indochina\", \"LA\", \"Asia/Vientiane\",
        \"Indochina\", \"KH\", \"Asia/Phnom_Penh\",
        \"Indochina\", \"TH\", \"Asia/Bangkok\",
        \"Korea\", \"KP\", \"Asia/Pyongyang\",
        \"America_Mountain\", \"MX\", \"America/Hermosillo\",
        \"America_Mountain\", \"CA\", \"America/Edmonton\",
        \"Africa_Southern\", \"LS\", \"Africa/Maseru\",
        \"Africa_Southern\", \"SZ\", \"Africa/Mbabane\",
        \"Chile\", \"AQ\", \"Antarctica/Palmer\",
        \"New_Zealand\", \"AQ\", \"Antarctica/McMurdo\",
        \"Gulf\", \"OM\", \"Asia/Muscat\",
        \"Europe_Western\", \"FO\", \"Atlantic/Faeroe\",
        \"America_Eastern\", \"TC\", \"America/Grand_Turk\",
        \"America_Eastern\", \"CA\", \"America/Toronto\",
        \"America_Eastern\", \"BS\", \"America/Nassau\",
        \"America_Eastern\", \"PA\", \"America/Panama\",
        \"America_Eastern\", \"JM\", \"America/Jamaica\",
        \"America_Eastern\", \"KY\", \"America/Cayman\",
        \"Africa_Central\", \"BI\", \"Africa/Bujumbura\",
        \"Africa_Central\", \"ZM\", \"Africa/Lusaka\",
        \"Africa_Central\", \"ZW\", \"Africa/Harare\",
        \"Africa_Central\", \"CD\", \"Africa/Lubumbashi\",
        \"Africa_Central\", \"BW\", \"Africa/Gaborone\",
        \"Africa_Central\", \"RW\", \"Africa/Kigali\",
        \"Africa_Central\", \"MW\", \"Africa/Blantyre\",
        \"America_Central\", \"MX\", \"America/Mexico_City\",
        \"America_Central\", \"HN\", \"America/Tegucigalpa\",
        \"America_Central\", \"CA\", \"America/Winnipeg\",
        \"America_Central\", \"GT\", \"America/Guatemala\",
        \"America_Central\", \"SV\", \"America/El_Salvador\",
        \"America_Central\", \"CR\", \"America/Costa_Rica\",
        \"America_Central\", \"BZ\", \"America/Belize\",
        \"Atlantic\", \"MS\", \"America/Montserrat\",
        \"Atlantic\", \"AG\", \"America/Antigua\",
        \"Atlantic\", \"TT\", \"America/Port_of_Spain\",
        \"Atlantic\", \"MQ\", \"America/Martinique\",
        \"Atlantic\", \"DM\", \"America/Dominica\",
        \"Atlantic\", \"KN\", \"America/St_Kitts\",
        \"Atlantic\", \"BM\", \"Atlantic/Bermuda\",
        \"Atlantic\", \"PR\", \"America/Puerto_Rico\",
        \"Atlantic\", \"AW\", \"America/Aruba\",
        \"Atlantic\", \"VG\", \"America/Tortola\",
        \"Atlantic\", \"GD\", \"America/Grenada\",
        \"Atlantic\", \"GL\", \"America/Thule\",
        \"Atlantic\", \"BB\", \"America/Barbados\",
        \"Atlantic\", \"BQ\", \"America/Kralendijk\",
        \"Atlantic\", \"SX\", \"America/Lower_Princes\",
        \"Atlantic\", \"VI\", \"America/St_Thomas\",
        \"Atlantic\", \"MF\", \"America/Marigot\",
        \"Atlantic\", \"AI\", \"America/Anguilla\",
        \"Atlantic\", \"AN\", \"America/Curacao\",
        \"Atlantic\", \"LC\", \"America/St_Lucia\",
        \"Atlantic\", \"GP\", \"America/Guadeloupe\",
        \"Atlantic\", \"VC\", \"America/St_Vincent\",
        \"Arabian\", \"QA\", \"Asia/Qatar\",
        \"Arabian\", \"YE\", \"Asia/Aden\",
        \"Arabian\", \"KW\", \"Asia/Kuwait\",
        \"Arabian\", \"BH\", \"Asia/Bahrain\",
        \"Arabian\", \"IQ\", \"Asia/Baghdad\",
        \"India\", \"LK\", \"Asia/Colombo\",
        \"Europe_Eastern\", \"SY\", \"Asia/Damascus\",
        \"Europe_Eastern\", \"BG\", \"Europe/Sofia\",
        \"Europe_Eastern\", \"GR\", \"Europe/Athens\",
        \"Europe_Eastern\", \"JO\", \"Asia/Amman\",
        \"Europe_Eastern\", \"CY\", \"Asia/Nicosia\",
        \"Europe_Eastern\", \"AX\", \"Europe/Mariehamn\",
        \"Europe_Eastern\", \"LB\", \"Asia/Beirut\",
        \"Europe_Eastern\", \"FI\", \"Europe/Helsinki\",
        \"Europe_Eastern\", \"EG\", \"Africa/Cairo\",
        \"Chamorro\", \"GU\", \"Pacific/Guam\",
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3463298 // mzoneMap (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3463426 // aliasMap (<unidirectional association>)
	relation 3463426 --->
	  a role_name "aliasMap" multiplicity "[]" init_value " new String[] {
        \"Brazil/Acre\", \"America/Rio_Branco\",
        \"US/Indiana-Starke\", \"America/Indiana/Knox\",
        \"America/Atka\", \"America/Adak\",
        \"America/St_Barthelemy\", \"America/Guadeloupe\",
        \"Australia/North\", \"Australia/Darwin\",
        \"Europe/Zagreb\", \"Europe/Belgrade\",
        \"Etc/Universal\", \"Etc/UTC\",
        \"NZ-CHAT\", \"Pacific/Chatham\",
        \"Asia/Macao\", \"Asia/Macau\",
        \"Pacific/Yap\", \"Pacific/Chuuk\",
        \"Egypt\", \"Africa/Cairo\",
        \"US/Central\", \"America/Chicago\",
        \"Canada/Atlantic\", \"America/Halifax\",
        \"Brazil/East\", \"America/Sao_Paulo\",
        \"America/Cordoba\", \"America/Argentina/Cordoba\",
        \"US/Hawaii\", \"Pacific/Honolulu\",
        \"America/Louisville\", \"America/Kentucky/Louisville\",
        \"America/Shiprock\", \"America/Denver\",
        \"Australia/Canberra\", \"Australia/Sydney\",
        \"Asia/Chungking\", \"Asia/Chongqing\",
        \"Universal\", \"Etc/UTC\",
        \"US/Alaska\", \"America/Anchorage\",
        \"Asia/Ujung_Pandang\", \"Asia/Makassar\",
        \"Japan\", \"Asia/Tokyo\",
        \"Atlantic/Faeroe\", \"Atlantic/Faroe\",
        \"Asia/Istanbul\", \"Europe/Istanbul\",
        \"US/Pacific\", \"America/Los_Angeles\",
        \"Mexico/General\", \"America/Mexico_City\",
        \"Poland\", \"Europe/Warsaw\",
        \"Africa/Asmera\", \"Africa/Asmara\",
        \"Asia/Saigon\", \"Asia/Ho_Chi_Minh\",
        \"US/Michigan\", \"America/Detroit\",
        \"America/Argentina/ComodRivadavia\", \"America/Argentina/Catamarca\",
        \"W-SU\", \"Europe/Moscow\",
        \"Australia/ACT\", \"Australia/Sydney\",
        \"Asia/Calcutta\", \"Asia/Kolkata\",
        \"Arctic/Longyearbyen\", \"Europe/Oslo\",
        \"America/Knox_IN\", \"America/Indiana/Knox\",
        \"ROC\", \"Asia/Taipei\",
        \"Zulu\", \"Etc/UTC\",
        \"Australia/Yancowinna\", \"Australia/Broken_Hill\",
        \"Australia/West\", \"Australia/Perth\",
        \"Singapore\", \"Asia/Singapore\",
        \"Europe/Mariehamn\", \"Europe/Helsinki\",
        \"ROK\", \"Asia/Seoul\",
        \"America/Porto_Acre\", \"America/Rio_Branco\",
        \"Etc/Zulu\", \"Etc/UTC\",
        \"Canada/Yukon\", \"America/Whitehorse\",
        \"Europe/Vatican\", \"Europe/Rome\",
        \"Africa/Timbuktu\", \"Africa/Bamako\",
        \"America/Buenos_Aires\", \"America/Argentina/Buenos_Aires\",
        \"Canada/Pacific\", \"America/Vancouver\",
        \"US/Pacific-New\", \"America/Los_Angeles\",
        \"Mexico/BajaNorte\", \"America/Tijuana\",
        \"Europe/Guernsey\", \"Europe/London\",
        \"Asia/Tel_Aviv\", \"Asia/Jerusalem\",
        \"Chile/Continental\", \"America/Santiago\",
        \"Jamaica\", \"America/Jamaica\",
        \"Mexico/BajaSur\", \"America/Mazatlan\",
        \"Canada/Eastern\", \"America/Toronto\",
        \"Australia/Tasmania\", \"Australia/Hobart\",
        \"NZ\", \"Pacific/Auckland\",
        \"America/Lower_Princes\", \"America/Curacao\",
        \"GMT-\", \"Etc/GMT\",
        \"America/Rosario\", \"America/Argentina/Cordoba\",
        \"Libya\", \"Africa/Tripoli\",
        \"Asia/Ashkhabad\", \"Asia/Ashgabat\",
        \"Australia/NSW\", \"Australia/Sydney\",
        \"America/Marigot\", \"America/Guadeloupe\",
        \"Europe/Bratislava\", \"Europe/Prague\",
        \"Portugal\", \"Europe/Lisbon\",
        \"Etc/GMT-\", \"Etc/GMT\",
        \"Europe/San_Marino\", \"Europe/Rome\",
        \"Europe/Sarajevo\", \"Europe/Belgrade\",
        \"Antarctica/South_Pole\", \"Antarctica/McMurdo\",
        \"Canada/Central\", \"America/Winnipeg\",
        \"Etc/GMT\", \"Etc/GMT\",
        \"Europe/Isle_of_Man\", \"Europe/London\",
        \"America/Fort_Wayne\", \"America/Indiana/Indianapolis\",
        \"Eire\", \"Europe/Dublin\",
        \"America/Coral_Harbour\", \"America/Atikokan\",
        \"Europe/Nicosia\", \"Asia/Nicosia\",
        \"US/Samoa\", \"Pacific/Pago_Pago\",
        \"Hongkong\", \"Asia/Hong_Kong\",
        \"Canada/Saskatchewan\", \"America/Regina\",
        \"Asia/Thimbu\", \"Asia/Thimphu\",
        \"Kwajalein\", \"Pacific/Kwajalein\",
        \"GB\", \"Europe/London\",
        \"Chile/EasterIsland\", \"Pacific/Easter\",
        \"US/East-Indiana\", \"America/Indiana/Indianapolis\",
        \"Australia/LHI\", \"Australia/Lord_Howe\",
        \"Cuba\", \"America/Havana\",
        \"America/Jujuy\", \"America/Argentina/Jujuy\",
        \"US/Mountain\", \"America/Denver\",
        \"Atlantic/Jan_Mayen\", \"Europe/Oslo\",
        \"Europe/Tiraspol\", \"Europe/Chisinau\",
        \"Europe/Podgorica\", \"Europe/Belgrade\",
        \"US/Arizona\", \"America/Phoenix\",
        \"Navajo\", \"America/Denver\",
        \"Etc/Greenwich\", \"Etc/GMT\",
        \"Canada/Mountain\", \"America/Edmonton\",
        \"Iceland\", \"Atlantic/Reykjavik\",
        \"Australia/Victoria\", \"Australia/Melbourne\",
        \"Australia/South\", \"Australia/Adelaide\",
        \"Brazil/West\", \"America/Manaus\",
        \"Pacific/Ponape\", \"Pacific/Pohnpei\",
        \"Europe/Ljubljana\", \"Europe/Belgrade\",
        \"Europe/Jersey\", \"Europe/London\",
        \"Australia/Queensland\", \"Australia/Brisbane\",
        \"UTC\", \"Etc/UTC\",
        \"Canada/Newfoundland\", \"America/St_Johns\",
        \"Europe/Skopje\", \"Europe/Belgrade\",
        \"Canada/East-Saskatchewan\", \"America/Regina\",
        \"PRC\", \"Asia/Shanghai\",
        \"UCT\", \"Etc/UCT\",
        \"America/Mendoza\", \"America/Argentina/Mendoza\",
        \"Israel\", \"Asia/Jerusalem\",
        \"US/Eastern\", \"America/New_York\",
        \"Asia/Ulan_Bator\", \"Asia/Ulaanbaatar\",
        \"Turkey\", \"Europe/Istanbul\",
        \"GMT\", \"Etc/GMT\",
        \"US/Aleutian\", \"America/Adak\",
        \"Brazil/DeNoronha\", \"America/Noronha\",
        \"GB-Eire\", \"Europe/London\",
        \"Asia/Dacca\", \"Asia/Dhaka\",
        \"America/Ensenada\", \"America/Tijuana\",
        \"America/Catamarca\", \"America/Argentina/Catamarca\",
        \"Iran\", \"Asia/Tehran\",
        \"Greenwich\", \"Etc/GMT\",
        \"Pacific/Truk\", \"Pacific/Chuuk\",
        \"Pacific/Samoa\", \"Pacific/Pago_Pago\",
        \"America/Virgin\", \"America/St_Thomas\",
        \"Asia/Katmandu\", \"Asia/Kathmandu\",
        \"America/Indianapolis\", \"America/Indiana/Indianapolis\",
        \"Europe/Belfast\", \"Europe/London\",
        \"America/Kralendijk\", \"America/Curacao\",
        \"Asia/Rangoon\", \"Asia/Yangon\",
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3463426 // aliasMap (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3463554 // zidToMzone (<unidirectional association>)
	relation 3463554 --->
	  a role_name "zidToMzone" init_value " new HashMap<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 3463554 // zidToMzone (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3463682 // mzoneToZid (<unidirectional association>)
	relation 3463682 --->
	  a role_name "mzoneToZid" init_value " new HashMap<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 3463682 // mzoneToZid (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3463810 // mzoneToZidL (<unidirectional association>)
	relation 3463810 --->
	  a role_name "mzoneToZidL" init_value " new HashMap<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Map<String, String>> ${name}${value};
"
	    classrelation_ref 3463810 // mzoneToZidL (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3463938 // aliases (<unidirectional association>)
	relation 3463938 --->
	  a role_name "aliases" init_value " new HashMap<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 3463938 // aliases (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 171266 "initialization"
	
	cpp "" ""
	java "  static {
        for (int i = 0; i < zidMap.length; i += 3) {
            zidToMzone.put(zidMap[i], zidMap[i + 1]);
            mzoneToZid.put(zidMap[i + 1], zidMap[i + 2]);
        }

        for (int i = 0; i < mzoneMap.length; i += 3) {
            String mzone = mzoneMap[i];
            Map<String, String> map = mzoneToZidL.get(mzone);
            if (map == null) {
                map = new HashMap<>();
                mzoneToZidL.put(mzone, map);
            }
            map.put(mzoneMap[i + 1], mzoneMap[i + 2]);
        }

        for (int i = 0; i < aliasMap.length; i += 2) {
            aliases.put(aliasMap[i], aliasMap[i + 1]);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end
  end

  deploymentview 170498 "format"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 788226 "DateTimeFormatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatterBuilder.CompositePrinterParser;
import java.time.temporal.ChronoField;
import java.time.temporal.IsoFields;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQuery;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.DAY_OF_WEEK;
import static java.time.temporal.ChronoField.DAY_OF_YEAR;
import static java.time.temporal.ChronoField.HOUR_OF_DAY;
import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.NANO_OF_SECOND;
import static java.time.temporal.ChronoField.SECOND_OF_MINUTE;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1052930 // DateTimeFormatter
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 788354 "DateTimeFormatterBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.SoftReference;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeTextProvider.LocaleStore;
import java.time.temporal.ChronoField;
import java.time.temporal.IsoFields;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.ValueRange;
import java.time.temporal.WeekFields;
import java.time.zone.ZoneRulesProvider;
import java.util.AbstractMap.SimpleImmutableEntry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleResources;
import sun.util.locale.provider.TimeZoneNameUtility;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.HOUR_OF_DAY;
import static java.time.temporal.ChronoField.INSTANT_SECONDS;
import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.NANO_OF_SECOND;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
import static java.time.temporal.ChronoField.SECOND_OF_MINUTE;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1057282 // DateTimeFormatterBuilder
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights hg qreserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 788482 "DateTimeParseContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.ZoneId;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;
${definition}"
      associated_elems
	class_ref 1057922 // DateTimeParseContext
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 788610 "DateTimeParseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1057794 // DateTimeParseException
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 788738 "DateTimePrintContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.ValueRange;
import java.util.Locale;
import java.util.Objects;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.INSTANT_SECONDS;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
${definition}"
      associated_elems
	class_ref 1058562 // DateTimePrintContext
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 788866 "DateTimeTextProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseChronology;
import java.time.temporal.ChronoField;
import java.time.temporal.IsoFields;
import java.time.temporal.TemporalField;
import java.util.AbstractMap.SimpleImmutableEntry;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.util.locale.provider.CalendarDataUtility;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleResources;
import static java.time.temporal.ChronoField.AMPM_OF_DAY;
import static java.time.temporal.ChronoField.DAY_OF_WEEK;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
${definition}"
      associated_elems
	class_ref 1059714 // DateTimeTextProvider
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 788994 "DecimalStyle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.DecimalFormatSymbols;
import java.util.Collections;
import java.util.HashSet;
import java.util.Locale;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
${definition}"
      associated_elems
	class_ref 1057538 // DecimalStyle
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 789122 "FormatStyle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1057666 // FormatStyle
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 789250 "Parsed"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.Chronology;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import static java.time.temporal.ChronoField.AMPM_OF_DAY;
import static java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
import static java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
import static java.time.temporal.ChronoField.HOUR_OF_AMPM;
import static java.time.temporal.ChronoField.HOUR_OF_DAY;
import static java.time.temporal.ChronoField.INSTANT_SECONDS;
import static java.time.temporal.ChronoField.MICRO_OF_DAY;
import static java.time.temporal.ChronoField.MICRO_OF_SECOND;
import static java.time.temporal.ChronoField.MILLI_OF_DAY;
import static java.time.temporal.ChronoField.MILLI_OF_SECOND;
import static java.time.temporal.ChronoField.MINUTE_OF_DAY;
import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;
import static java.time.temporal.ChronoField.NANO_OF_DAY;
import static java.time.temporal.ChronoField.NANO_OF_SECOND;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
import static java.time.temporal.ChronoField.SECOND_OF_DAY;
import static java.time.temporal.ChronoField.SECOND_OF_MINUTE;
${definition}"
      associated_elems
	class_ref 1061250 // Parsed
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2013, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 789378 "ResolverStyle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1054850 // ResolverStyle
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2013, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 789506 "SignStyle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1058306 // SignStyle
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 789634 "TextStyle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Calendar;
${definition}"
      associated_elems
	class_ref 1051522 // TextStyle
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 789762 "ZoneName"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 1061506 // ZoneName
      end
      comment "Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
