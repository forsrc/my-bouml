class Arrays
!!!8618242.java!!!	rangeCheck(in arrayLength : int, in fromIndex : int, in toIndex : int) : void
        if (fromIndex > toIndex) {
            throw new IllegalArgumentException(
                    "fromIndex(" + fromIndex + ") > toIndex(" + toIndex + ")");
        }
        if (fromIndex < 0) {
            throw new ArrayIndexOutOfBoundsException(fromIndex);
        }
        if (toIndex > arrayLength) {
            throw new ArrayIndexOutOfBoundsException(toIndex);
        }
!!!8618370.java!!!	sort(inout a : int [[]]) : void
        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);
!!!8618498.java!!!	sort(inout a : int [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
!!!8618626.java!!!	sort(inout a : long [[]]) : void
        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);
!!!8618754.java!!!	sort(inout a : long [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
!!!8618882.java!!!	sort(inout a : short [[]]) : void
        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);
!!!8619010.java!!!	sort(inout a : short [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
!!!8619138.java!!!	sort(inout a : char [[]]) : void
        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);
!!!8619266.java!!!	sort(inout a : char [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
!!!8619394.java!!!	sort(inout a : byte [[]]) : void
        DualPivotQuicksort.sort(a, 0, a.length - 1);
!!!8619522.java!!!	sort(inout a : byte [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1);
!!!8619650.java!!!	sort(inout a : float [[]]) : void
        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);
!!!8619778.java!!!	sort(inout a : float [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
!!!8619906.java!!!	sort(inout a : double [[]]) : void
        DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0);
!!!8620034.java!!!	sort(inout a : double [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
!!!8620162.java!!!	parallelSort(inout a : byte [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, 0, n - 1);
        else
            new ArraysParallelSortHelpers.FJByte.Sorter
                (null, a, new byte[n], 0, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8620290.java!!!	parallelSort(inout a : byte [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1);
        else
            new ArraysParallelSortHelpers.FJByte.Sorter
                (null, a, new byte[n], fromIndex, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8620418.java!!!	parallelSort(inout a : char [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, 0, n - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJChar.Sorter
                (null, a, new char[n], 0, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8620546.java!!!	parallelSort(inout a : char [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJChar.Sorter
                (null, a, new char[n], fromIndex, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8620674.java!!!	parallelSort(inout a : short [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, 0, n - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJShort.Sorter
                (null, a, new short[n], 0, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8620802.java!!!	parallelSort(inout a : short [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJShort.Sorter
                (null, a, new short[n], fromIndex, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8620930.java!!!	parallelSort(inout a : int [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, 0, n - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJInt.Sorter
                (null, a, new int[n], 0, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621058.java!!!	parallelSort(inout a : int [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJInt.Sorter
                (null, a, new int[n], fromIndex, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621186.java!!!	parallelSort(inout a : long [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, 0, n - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJLong.Sorter
                (null, a, new long[n], 0, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621314.java!!!	parallelSort(inout a : long [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJLong.Sorter
                (null, a, new long[n], fromIndex, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621442.java!!!	parallelSort(inout a : float [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, 0, n - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJFloat.Sorter
                (null, a, new float[n], 0, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621570.java!!!	parallelSort(inout a : float [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJFloat.Sorter
                (null, a, new float[n], fromIndex, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621698.java!!!	parallelSort(inout a : double [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, 0, n - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJDouble.Sorter
                (null, a, new double[n], 0, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621826.java!!!	parallelSort(inout a : double [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJDouble.Sorter
                (null, a, new double[n], fromIndex, n, 0,
                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g).invoke();
!!!8621954.java!!!	parallelSort(inout a : T [[]]) : void
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            TimSort.sort(a, 0, n, NaturalOrder.INSTANCE, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJObject.Sorter<T>
                (null, a,
                 (T[])Array.newInstance(a.getClass().getComponentType(), n),
                 0, n, 0, ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g, NaturalOrder.INSTANCE).invoke();
!!!8622082.java!!!	parallelSort(inout a : T [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            TimSort.sort(a, fromIndex, toIndex, NaturalOrder.INSTANCE, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJObject.Sorter<T>
                (null, a,
                 (T[])Array.newInstance(a.getClass().getComponentType(), n),
                 fromIndex, n, 0, ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g, NaturalOrder.INSTANCE).invoke();
!!!8622210.java!!!	parallelSort(inout a : T [[]], inout cmp : Comparator) : void
        if (cmp == null)
            cmp = NaturalOrder.INSTANCE;
        int n = a.length, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            TimSort.sort(a, 0, n, cmp, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJObject.Sorter<T>
                (null, a,
                 (T[])Array.newInstance(a.getClass().getComponentType(), n),
                 0, n, 0, ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g, cmp).invoke();
!!!8622338.java!!!	parallelSort(inout a : T [[]], in fromIndex : int, in toIndex : int, inout cmp : Comparator) : void
        rangeCheck(a.length, fromIndex, toIndex);
        if (cmp == null)
            cmp = NaturalOrder.INSTANCE;
        int n = toIndex - fromIndex, p, g;
        if (n <= MIN_ARRAY_SORT_GRAN ||
            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)
            TimSort.sort(a, fromIndex, toIndex, cmp, null, 0, 0);
        else
            new ArraysParallelSortHelpers.FJObject.Sorter<T>
                (null, a,
                 (T[])Array.newInstance(a.getClass().getComponentType(), n),
                 fromIndex, n, 0, ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?
                 MIN_ARRAY_SORT_GRAN : g, cmp).invoke();
!!!8622466.java!!!	sort(inout a : Object [[]]) : void
        if (LegacyMergeSort.userRequested)
            legacyMergeSort(a);
        else
            ComparableTimSort.sort(a, 0, a.length, null, 0, 0);
!!!8622594.java!!!	legacyMergeSort(inout a : Object [[]]) : void
        Object[] aux = a.clone();
        mergeSort(aux, a, 0, a.length, 0);
!!!8622722.java!!!	sort(inout a : Object [[]], in fromIndex : int, in toIndex : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        if (LegacyMergeSort.userRequested)
            legacyMergeSort(a, fromIndex, toIndex);
        else
            ComparableTimSort.sort(a, fromIndex, toIndex, null, 0, 0);
!!!8622850.java!!!	legacyMergeSort(inout a : Object [[]], in fromIndex : int, in toIndex : int) : void
        Object[] aux = copyOfRange(a, fromIndex, toIndex);
        mergeSort(aux, a, fromIndex, toIndex, -fromIndex);
!!!8622978.java!!!	mergeSort(inout src : Object [[]], inout dest : Object [[]], in low : int, in high : int, in off : int) : void
        int length = high - low;

        // Insertion sort on smallest arrays
        if (length < INSERTIONSORT_THRESHOLD) {
            for (int i=low; i<high; i++)
                for (int j=i; j>low &&
                         ((Comparable) dest[j-1]).compareTo(dest[j])>0; j--)
                    swap(dest, j, j-1);
            return;
        }

        // Recursively sort halves of dest into src
        int destLow  = low;
        int destHigh = high;
        low  += off;
        high += off;
        int mid = (low + high) >>> 1;
        mergeSort(dest, src, low, mid, -off);
        mergeSort(dest, src, mid, high, -off);

        // If list is already sorted, just copy from src to dest.  This is an
        // optimization that results in faster sorts for nearly ordered lists.
        if (((Comparable)src[mid-1]).compareTo(src[mid]) <= 0) {
            System.arraycopy(src, low, dest, destLow, length);
            return;
        }

        // Merge sorted halves (now in src) into dest
        for(int i = destLow, p = low, q = mid; i < destHigh; i++) {
            if (q >= high || p < mid && ((Comparable)src[p]).compareTo(src[q])<=0)
                dest[i] = src[p++];
            else
                dest[i] = src[q++];
        }
!!!8623106.java!!!	swap(inout x : Object [[]], in a : int, in b : int) : void
        Object t = x[a];
        x[a] = x[b];
        x[b] = t;
!!!8623234.java!!!	sort(inout a : T [[]], inout c : Comparator) : void
        if (c == null) {
            sort(a);
        } else {
            if (LegacyMergeSort.userRequested)
                legacyMergeSort(a, c);
            else
                TimSort.sort(a, 0, a.length, c, null, 0, 0);
        }
!!!8623362.java!!!	legacyMergeSort(inout a : T [[]], inout c : Comparator) : void
        T[] aux = a.clone();
        if (c==null)
            mergeSort(aux, a, 0, a.length, 0);
        else
            mergeSort(aux, a, 0, a.length, 0, c);
!!!8623490.java!!!	sort(inout a : T [[]], in fromIndex : int, in toIndex : int, inout c : Comparator) : void
        if (c == null) {
            sort(a, fromIndex, toIndex);
        } else {
            rangeCheck(a.length, fromIndex, toIndex);
            if (LegacyMergeSort.userRequested)
                legacyMergeSort(a, fromIndex, toIndex, c);
            else
                TimSort.sort(a, fromIndex, toIndex, c, null, 0, 0);
        }
!!!8623618.java!!!	legacyMergeSort(inout a : T [[]], in fromIndex : int, in toIndex : int, inout c : Comparator) : void
        T[] aux = copyOfRange(a, fromIndex, toIndex);
        if (c==null)
            mergeSort(aux, a, fromIndex, toIndex, -fromIndex);
        else
            mergeSort(aux, a, fromIndex, toIndex, -fromIndex, c);
!!!8623746.java!!!	mergeSort(inout src : Object [[]], inout dest : Object [[]], in low : int, in high : int, in off : int, inout c : Comparator) : void
        int length = high - low;

        // Insertion sort on smallest arrays
        if (length < INSERTIONSORT_THRESHOLD) {
            for (int i=low; i<high; i++)
                for (int j=i; j>low && c.compare(dest[j-1], dest[j])>0; j--)
                    swap(dest, j, j-1);
            return;
        }

        // Recursively sort halves of dest into src
        int destLow  = low;
        int destHigh = high;
        low  += off;
        high += off;
        int mid = (low + high) >>> 1;
        mergeSort(dest, src, low, mid, -off, c);
        mergeSort(dest, src, mid, high, -off, c);

        // If list is already sorted, just copy from src to dest.  This is an
        // optimization that results in faster sorts for nearly ordered lists.
        if (c.compare(src[mid-1], src[mid]) <= 0) {
           System.arraycopy(src, low, dest, destLow, length);
           return;
        }

        // Merge sorted halves (now in src) into dest
        for(int i = destLow, p = low, q = mid; i < destHigh; i++) {
            if (q >= high || p < mid && c.compare(src[p], src[q]) <= 0)
                dest[i] = src[p++];
            else
                dest[i] = src[q++];
        }
!!!8623874.java!!!	parallelPrefix(inout array : T [[]], inout op : BinaryOperator) : void
        Objects.requireNonNull(op);
        if (array.length > 0)
            new ArrayPrefixHelpers.CumulateTask<>
                    (null, op, array, 0, array.length).invoke();
!!!8624002.java!!!	parallelPrefix(inout array : T [[]], in fromIndex : int, in toIndex : int, inout op : BinaryOperator) : void
        Objects.requireNonNull(op);
        rangeCheck(array.length, fromIndex, toIndex);
        if (fromIndex < toIndex)
            new ArrayPrefixHelpers.CumulateTask<>
                    (null, op, array, fromIndex, toIndex).invoke();
!!!8624130.java!!!	parallelPrefix(inout array : long [[]], inout op : LongBinaryOperator) : void
        Objects.requireNonNull(op);
        if (array.length > 0)
            new ArrayPrefixHelpers.LongCumulateTask
                    (null, op, array, 0, array.length).invoke();
!!!8624258.java!!!	parallelPrefix(inout array : long [[]], in fromIndex : int, in toIndex : int, inout op : LongBinaryOperator) : void
        Objects.requireNonNull(op);
        rangeCheck(array.length, fromIndex, toIndex);
        if (fromIndex < toIndex)
            new ArrayPrefixHelpers.LongCumulateTask
                    (null, op, array, fromIndex, toIndex).invoke();
!!!8624386.java!!!	parallelPrefix(inout array : double [[]], inout op : DoubleBinaryOperator) : void
        Objects.requireNonNull(op);
        if (array.length > 0)
            new ArrayPrefixHelpers.DoubleCumulateTask
                    (null, op, array, 0, array.length).invoke();
!!!8624514.java!!!	parallelPrefix(inout array : double [[]], in fromIndex : int, in toIndex : int, inout op : DoubleBinaryOperator) : void
        Objects.requireNonNull(op);
        rangeCheck(array.length, fromIndex, toIndex);
        if (fromIndex < toIndex)
            new ArrayPrefixHelpers.DoubleCumulateTask
                    (null, op, array, fromIndex, toIndex).invoke();
!!!8624642.java!!!	parallelPrefix(inout array : int [[]], inout op : IntBinaryOperator) : void
        Objects.requireNonNull(op);
        if (array.length > 0)
            new ArrayPrefixHelpers.IntCumulateTask
                    (null, op, array, 0, array.length).invoke();
!!!8624770.java!!!	parallelPrefix(inout array : int [[]], in fromIndex : int, in toIndex : int, inout op : IntBinaryOperator) : void
        Objects.requireNonNull(op);
        rangeCheck(array.length, fromIndex, toIndex);
        if (fromIndex < toIndex)
            new ArrayPrefixHelpers.IntCumulateTask
                    (null, op, array, fromIndex, toIndex).invoke();
!!!8624898.java!!!	binarySearch(inout a : long [[]], in key : long) : int
        return binarySearch0(a, 0, a.length, key);
!!!8625026.java!!!	binarySearch(inout a : long [[]], in fromIndex : int, in toIndex : int, in key : long) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8625154.java!!!	binarySearch0(inout a : long [[]], in fromIndex : int, in toIndex : int, in key : long) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            long midVal = a[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
!!!8625282.java!!!	binarySearch(inout a : int [[]], in key : int) : int
        return binarySearch0(a, 0, a.length, key);
!!!8625410.java!!!	binarySearch(inout a : int [[]], in fromIndex : int, in toIndex : int, in key : int) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8625538.java!!!	binarySearch0(inout a : int [[]], in fromIndex : int, in toIndex : int, in key : int) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            int midVal = a[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
!!!8625666.java!!!	binarySearch(inout a : short [[]], in key : short) : int
        return binarySearch0(a, 0, a.length, key);
!!!8625794.java!!!	binarySearch(inout a : short [[]], in fromIndex : int, in toIndex : int, in key : short) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8625922.java!!!	binarySearch0(inout a : short [[]], in fromIndex : int, in toIndex : int, in key : short) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            short midVal = a[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
!!!8626050.java!!!	binarySearch(inout a : char [[]], in key : char) : int
        return binarySearch0(a, 0, a.length, key);
!!!8626178.java!!!	binarySearch(inout a : char [[]], in fromIndex : int, in toIndex : int, in key : char) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8626306.java!!!	binarySearch0(inout a : char [[]], in fromIndex : int, in toIndex : int, in key : char) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            char midVal = a[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
!!!8626434.java!!!	binarySearch(inout a : byte [[]], in key : byte) : int
        return binarySearch0(a, 0, a.length, key);
!!!8626562.java!!!	binarySearch(inout a : byte [[]], in fromIndex : int, in toIndex : int, in key : byte) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8626690.java!!!	binarySearch0(inout a : byte [[]], in fromIndex : int, in toIndex : int, in key : byte) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            byte midVal = a[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
!!!8626818.java!!!	binarySearch(inout a : double [[]], in key : double) : int
        return binarySearch0(a, 0, a.length, key);
!!!8626946.java!!!	binarySearch(inout a : double [[]], in fromIndex : int, in toIndex : int, in key : double) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8627074.java!!!	binarySearch0(inout a : double [[]], in fromIndex : int, in toIndex : int, in key : double) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            double midVal = a[mid];

            if (midVal < key)
                low = mid + 1;  // Neither val is NaN, thisVal is smaller
            else if (midVal > key)
                high = mid - 1; // Neither val is NaN, thisVal is larger
            else {
                long midBits = Double.doubleToLongBits(midVal);
                long keyBits = Double.doubleToLongBits(key);
                if (midBits == keyBits)     // Values are equal
                    return mid;             // Key found
                else if (midBits < keyBits) // (-0.0, 0.0) or (!NaN, NaN)
                    low = mid + 1;
                else                        // (0.0, -0.0) or (NaN, !NaN)
                    high = mid - 1;
            }
        }
        return -(low + 1);  // key not found.
!!!8627202.java!!!	binarySearch(inout a : float [[]], in key : float) : int
        return binarySearch0(a, 0, a.length, key);
!!!8627330.java!!!	binarySearch(inout a : float [[]], in fromIndex : int, in toIndex : int, in key : float) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8627458.java!!!	binarySearch0(inout a : float [[]], in fromIndex : int, in toIndex : int, in key : float) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            float midVal = a[mid];

            if (midVal < key)
                low = mid + 1;  // Neither val is NaN, thisVal is smaller
            else if (midVal > key)
                high = mid - 1; // Neither val is NaN, thisVal is larger
            else {
                int midBits = Float.floatToIntBits(midVal);
                int keyBits = Float.floatToIntBits(key);
                if (midBits == keyBits)     // Values are equal
                    return mid;             // Key found
                else if (midBits < keyBits) // (-0.0, 0.0) or (!NaN, NaN)
                    low = mid + 1;
                else                        // (0.0, -0.0) or (NaN, !NaN)
                    high = mid - 1;
            }
        }
        return -(low + 1);  // key not found.
!!!8627586.java!!!	binarySearch(inout a : Object [[]], inout key : Object) : int
        return binarySearch0(a, 0, a.length, key);
!!!8627714.java!!!	binarySearch(inout a : Object [[]], in fromIndex : int, in toIndex : int, inout key : Object) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key);
!!!8627842.java!!!	binarySearch0(inout a : Object [[]], in fromIndex : int, in toIndex : int, inout key : Object) : int
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            @SuppressWarnings("rawtypes")
            Comparable midVal = (Comparable)a[mid];
            @SuppressWarnings("unchecked")
            int cmp = midVal.compareTo(key);

            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
!!!8627970.java!!!	binarySearch(inout a : T [[]], inout key : T, inout c : Comparator) : int
        return binarySearch0(a, 0, a.length, key, c);
!!!8628098.java!!!	binarySearch(inout a : T [[]], in fromIndex : int, in toIndex : int, inout key : T, inout c : Comparator) : int
        rangeCheck(a.length, fromIndex, toIndex);
        return binarySearch0(a, fromIndex, toIndex, key, c);
!!!8628226.java!!!	binarySearch0(inout a : T [[]], in fromIndex : int, in toIndex : int, inout key : T, inout c : Comparator) : int
        if (c == null) {
            return binarySearch0(a, fromIndex, toIndex, key);
        }
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            T midVal = a[mid];
            int cmp = c.compare(midVal, key);
            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
!!!8628354.java!!!	equals(inout a : long [[]], inout a2 : long [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (a[i] != a2[i])
                return false;

        return true;
!!!8628482.java!!!	equals(inout a : int [[]], inout a2 : int [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (a[i] != a2[i])
                return false;

        return true;
!!!8628610.java!!!	equals(inout a : short [[]], inout a2 : short [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (a[i] != a2[i])
                return false;

        return true;
!!!8628738.java!!!	equals(inout a : char [[]], inout a2 : char [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (a[i] != a2[i])
                return false;

        return true;
!!!8628866.java!!!	equals(inout a : byte [[]], inout a2 : byte [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (a[i] != a2[i])
                return false;

        return true;
!!!8628994.java!!!	equals(inout a : boolean [[]], inout a2 : boolean [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (a[i] != a2[i])
                return false;

        return true;
!!!8629122.java!!!	equals(inout a : double [[]], inout a2 : double [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (Double.doubleToLongBits(a[i])!=Double.doubleToLongBits(a2[i]))
                return false;

        return true;
!!!8629250.java!!!	equals(inout a : float [[]], inout a2 : float [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++)
            if (Float.floatToIntBits(a[i])!=Float.floatToIntBits(a2[i]))
                return false;

        return true;
!!!8629378.java!!!	equals(inout a : Object [[]], inout a2 : Object [[]]) : boolean
        if (a==a2)
            return true;
        if (a==null || a2==null)
            return false;

        int length = a.length;
        if (a2.length != length)
            return false;

        for (int i=0; i<length; i++) {
            Object o1 = a[i];
            Object o2 = a2[i];
            if (!(o1==null ? o2==null : o1.equals(o2)))
                return false;
        }

        return true;
!!!8629506.java!!!	fill(inout a : long [[]], in val : long) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8629634.java!!!	fill(inout a : long [[]], in fromIndex : int, in toIndex : int, in val : long) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8629762.java!!!	fill(inout a : int [[]], in val : int) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8629890.java!!!	fill(inout a : int [[]], in fromIndex : int, in toIndex : int, in val : int) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8630018.java!!!	fill(inout a : short [[]], in val : short) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8630146.java!!!	fill(inout a : short [[]], in fromIndex : int, in toIndex : int, in val : short) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8630274.java!!!	fill(inout a : char [[]], in val : char) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8630402.java!!!	fill(inout a : char [[]], in fromIndex : int, in toIndex : int, in val : char) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8630530.java!!!	fill(inout a : byte [[]], in val : byte) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8630658.java!!!	fill(inout a : byte [[]], in fromIndex : int, in toIndex : int, in val : byte) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8630786.java!!!	fill(inout a : boolean [[]], inout val : boolean) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8630914.java!!!	fill(inout a : boolean [[]], in fromIndex : int, in toIndex : int, inout val : boolean) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8631042.java!!!	fill(inout a : double [[]], in val : double) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8631170.java!!!	fill(inout a : double [[]], in fromIndex : int, in toIndex : int, in val : double) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8631298.java!!!	fill(inout a : float [[]], in val : float) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8631426.java!!!	fill(inout a : float [[]], in fromIndex : int, in toIndex : int, in val : float) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8631554.java!!!	fill(inout a : Object [[]], inout val : Object) : void
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
!!!8631682.java!!!	fill(inout a : Object [[]], in fromIndex : int, in toIndex : int, inout val : Object) : void
        rangeCheck(a.length, fromIndex, toIndex);
        for (int i = fromIndex; i < toIndex; i++)
            a[i] = val;
!!!8631810.java!!!	copyOf(inout original : T [[]], in newLength : int) : T
        return (T[]) copyOf(original, newLength, original.getClass());
!!!8631938.java!!!	copyOf(inout original : U [[]], in newLength : int, inout newType : Class) : T
        @SuppressWarnings("unchecked")
        T[] copy = ((Object)newType == (Object)Object[].class)
            ? (T[]) new Object[newLength]
            : (T[]) Array.newInstance(newType.getComponentType(), newLength);
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632066.java!!!	copyOf(inout original : byte [[]], in newLength : int) : byte
        byte[] copy = new byte[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632194.java!!!	copyOf(inout original : short [[]], in newLength : int) : short
        short[] copy = new short[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632322.java!!!	copyOf(inout original : int [[]], in newLength : int) : int
        int[] copy = new int[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632450.java!!!	copyOf(inout original : long [[]], in newLength : int) : long
        long[] copy = new long[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632578.java!!!	copyOf(inout original : char [[]], in newLength : int) : char
        char[] copy = new char[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632706.java!!!	copyOf(inout original : float [[]], in newLength : int) : float
        float[] copy = new float[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632834.java!!!	copyOf(inout original : double [[]], in newLength : int) : double
        double[] copy = new double[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8632962.java!!!	copyOf(inout original : boolean [[]], in newLength : int) : boolean
        boolean[] copy = new boolean[newLength];
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
!!!8633090.java!!!	copyOfRange(inout original : T [[]], in from : int, in to : int) : T
        return copyOfRange(original, from, to, (Class<? extends T[]>) original.getClass());
!!!8633218.java!!!	copyOfRange(inout original : U [[]], in from : int, in to : int, inout newType : Class) : T
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        @SuppressWarnings("unchecked")
        T[] copy = ((Object)newType == (Object)Object[].class)
            ? (T[]) new Object[newLength]
            : (T[]) Array.newInstance(newType.getComponentType(), newLength);
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8633346.java!!!	copyOfRange(inout original : byte [[]], in from : int, in to : int) : byte
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        byte[] copy = new byte[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8633474.java!!!	copyOfRange(inout original : short [[]], in from : int, in to : int) : short
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        short[] copy = new short[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8633602.java!!!	copyOfRange(inout original : int [[]], in from : int, in to : int) : int
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        int[] copy = new int[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8633730.java!!!	copyOfRange(inout original : long [[]], in from : int, in to : int) : long
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        long[] copy = new long[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8633858.java!!!	copyOfRange(inout original : char [[]], in from : int, in to : int) : char
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        char[] copy = new char[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8633986.java!!!	copyOfRange(inout original : float [[]], in from : int, in to : int) : float
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        float[] copy = new float[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8634114.java!!!	copyOfRange(inout original : double [[]], in from : int, in to : int) : double
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        double[] copy = new double[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8634242.java!!!	copyOfRange(inout original : boolean [[]], in from : int, in to : int) : boolean
        int newLength = to - from;
        if (newLength < 0)
            throw new IllegalArgumentException(from + " > " + to);
        boolean[] copy = new boolean[newLength];
        System.arraycopy(original, from, copy, 0,
                         Math.min(original.length - from, newLength));
        return copy;
!!!8634370.java!!!	asList(inout  : T...a) : List
        return new ArrayList<>(a);
!!!8636034.java!!!	hashCode(inout a : long [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (long element : a) {
            int elementHash = (int)(element ^ (element >>> 32));
            result = 31 * result + elementHash;
        }

        return result;
!!!8636162.java!!!	hashCode(inout a : int [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (int element : a)
            result = 31 * result + element;

        return result;
!!!8636290.java!!!	hashCode(inout a : short [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (short element : a)
            result = 31 * result + element;

        return result;
!!!8636418.java!!!	hashCode(inout a : char [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (char element : a)
            result = 31 * result + element;

        return result;
!!!8636546.java!!!	hashCode(inout a : byte [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (byte element : a)
            result = 31 * result + element;

        return result;
!!!8636674.java!!!	hashCode(inout a : boolean [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (boolean element : a)
            result = 31 * result + (element ? 1231 : 1237);

        return result;
!!!8636802.java!!!	hashCode(inout a : float [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (float element : a)
            result = 31 * result + Float.floatToIntBits(element);

        return result;
!!!8636930.java!!!	hashCode(inout a : double [[]]) : int
        if (a == null)
            return 0;

        int result = 1;
        for (double element : a) {
            long bits = Double.doubleToLongBits(element);
            result = 31 * result + (int)(bits ^ (bits >>> 32));
        }
        return result;
!!!8637058.java!!!	hashCode(inout a : Object [[]]) : int
        if (a == null)
            return 0;

        int result = 1;

        for (Object element : a)
            result = 31 * result + (element == null ? 0 : element.hashCode());

        return result;
!!!8637186.java!!!	deepHashCode(inout a : Object [[]]) : int
        if (a == null)
            return 0;

        int result = 1;

        for (Object element : a) {
            int elementHash = 0;
            if (element instanceof Object[])
                elementHash = deepHashCode((Object[]) element);
            else if (element instanceof byte[])
                elementHash = hashCode((byte[]) element);
            else if (element instanceof short[])
                elementHash = hashCode((short[]) element);
            else if (element instanceof int[])
                elementHash = hashCode((int[]) element);
            else if (element instanceof long[])
                elementHash = hashCode((long[]) element);
            else if (element instanceof char[])
                elementHash = hashCode((char[]) element);
            else if (element instanceof float[])
                elementHash = hashCode((float[]) element);
            else if (element instanceof double[])
                elementHash = hashCode((double[]) element);
            else if (element instanceof boolean[])
                elementHash = hashCode((boolean[]) element);
            else if (element != null)
                elementHash = element.hashCode();

            result = 31 * result + elementHash;
        }

        return result;
!!!8637314.java!!!	deepEquals(inout a1 : Object [[]], inout a2 : Object [[]]) : boolean
        if (a1 == a2)
            return true;
        if (a1 == null || a2==null)
            return false;
        int length = a1.length;
        if (a2.length != length)
            return false;

        for (int i = 0; i < length; i++) {
            Object e1 = a1[i];
            Object e2 = a2[i];

            if (e1 == e2)
                continue;
            if (e1 == null)
                return false;

            // Figure out whether the two elements are equal
            boolean eq = deepEquals0(e1, e2);

            if (!eq)
                return false;
        }
        return true;
!!!8637442.java!!!	deepEquals0(inout e1 : Object, inout e2 : Object) : boolean
        assert e1 != null;
        boolean eq;
        if (e1 instanceof Object[] && e2 instanceof Object[])
            eq = deepEquals ((Object[]) e1, (Object[]) e2);
        else if (e1 instanceof byte[] && e2 instanceof byte[])
            eq = equals((byte[]) e1, (byte[]) e2);
        else if (e1 instanceof short[] && e2 instanceof short[])
            eq = equals((short[]) e1, (short[]) e2);
        else if (e1 instanceof int[] && e2 instanceof int[])
            eq = equals((int[]) e1, (int[]) e2);
        else if (e1 instanceof long[] && e2 instanceof long[])
            eq = equals((long[]) e1, (long[]) e2);
        else if (e1 instanceof char[] && e2 instanceof char[])
            eq = equals((char[]) e1, (char[]) e2);
        else if (e1 instanceof float[] && e2 instanceof float[])
            eq = equals((float[]) e1, (float[]) e2);
        else if (e1 instanceof double[] && e2 instanceof double[])
            eq = equals((double[]) e1, (double[]) e2);
        else if (e1 instanceof boolean[] && e2 instanceof boolean[])
            eq = equals((boolean[]) e1, (boolean[]) e2);
        else
            eq = e1.equals(e2);
        return eq;
!!!8637570.java!!!	toString(inout a : long [[]]) : String
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8637698.java!!!	toString(inout a : int [[]]) : String
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8637826.java!!!	toString(inout a : short [[]]) : String
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8637954.java!!!	toString(inout a : char [[]]) : String
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8638082.java!!!	toString(inout a : byte [[]]) : String
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8638210.java!!!	toString(inout a : boolean [[]]) : String
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8638338.java!!!	toString(inout a : float [[]]) : String
        if (a == null)
            return "null";

        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8638466.java!!!	toString(inout a : double [[]]) : String
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8638594.java!!!	toString(inout a : Object [[]]) : String
        if (a == null)
            return "null";

        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(String.valueOf(a[i]));
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
!!!8638722.java!!!	deepToString(inout a : Object [[]]) : String
        if (a == null)
            return "null";

        int bufLen = 20 * a.length;
        if (a.length != 0 && bufLen <= 0)
            bufLen = Integer.MAX_VALUE;
        StringBuilder buf = new StringBuilder(bufLen);
        deepToString(a, buf, new HashSet<Object[]>());
        return buf.toString();
!!!8638850.java!!!	deepToString(inout a : Object [[]], inout buf : StringBuilder, inout dejaVu : Set) : void
        if (a == null) {
            buf.append("null");
            return;
        }
        int iMax = a.length - 1;
        if (iMax == -1) {
            buf.append("[]");
            return;
        }

        dejaVu.add(a);
        buf.append('[');
        for (int i = 0; ; i++) {

            Object element = a[i];
            if (element == null) {
                buf.append("null");
            } else {
                Class<?> eClass = element.getClass();

                if (eClass.isArray()) {
                    if (eClass == byte[].class)
                        buf.append(toString((byte[]) element));
                    else if (eClass == short[].class)
                        buf.append(toString((short[]) element));
                    else if (eClass == int[].class)
                        buf.append(toString((int[]) element));
                    else if (eClass == long[].class)
                        buf.append(toString((long[]) element));
                    else if (eClass == char[].class)
                        buf.append(toString((char[]) element));
                    else if (eClass == float[].class)
                        buf.append(toString((float[]) element));
                    else if (eClass == double[].class)
                        buf.append(toString((double[]) element));
                    else if (eClass == boolean[].class)
                        buf.append(toString((boolean[]) element));
                    else { // element is an array of object references
                        if (dejaVu.contains(element))
                            buf.append("[...]");
                        else
                            deepToString((Object[])element, buf, dejaVu);
                    }
                } else {  // element is non-null and not an array
                    buf.append(element.toString());
                }
            }
            if (i == iMax)
                break;
            buf.append(", ");
        }
        buf.append(']');
        dejaVu.remove(a);
!!!8638978.java!!!	setAll(inout array : T [[]], inout generator : IntFunction) : void
        Objects.requireNonNull(generator);
        for (int i = 0; i < array.length; i++)
            array[i] = generator.apply(i);
!!!8639106.java!!!	parallelSetAll(inout array : T [[]], inout generator : IntFunction) : void
        Objects.requireNonNull(generator);
        IntStream.range(0, array.length).parallel().forEach(i -> { array[i] = generator.apply(i); });
!!!8639234.java!!!	setAll(inout array : int [[]], inout generator : IntUnaryOperator) : void
        Objects.requireNonNull(generator);
        for (int i = 0; i < array.length; i++)
            array[i] = generator.applyAsInt(i);
!!!8639362.java!!!	parallelSetAll(inout array : int [[]], inout generator : IntUnaryOperator) : void
        Objects.requireNonNull(generator);
        IntStream.range(0, array.length).parallel().forEach(i -> { array[i] = generator.applyAsInt(i); });
!!!8639490.java!!!	setAll(inout array : long [[]], inout generator : IntToLongFunction) : void
        Objects.requireNonNull(generator);
        for (int i = 0; i < array.length; i++)
            array[i] = generator.applyAsLong(i);
!!!8639618.java!!!	parallelSetAll(inout array : long [[]], inout generator : IntToLongFunction) : void
        Objects.requireNonNull(generator);
        IntStream.range(0, array.length).parallel().forEach(i -> { array[i] = generator.applyAsLong(i); });
!!!8639746.java!!!	setAll(inout array : double [[]], inout generator : IntToDoubleFunction) : void
        Objects.requireNonNull(generator);
        for (int i = 0; i < array.length; i++)
            array[i] = generator.applyAsDouble(i);
!!!8639874.java!!!	parallelSetAll(inout array : double [[]], inout generator : IntToDoubleFunction) : void
        Objects.requireNonNull(generator);
        IntStream.range(0, array.length).parallel().forEach(i -> { array[i] = generator.applyAsDouble(i); });
!!!8640002.java!!!	spliterator(inout array : T [[]]) : Spliterator
        return Spliterators.spliterator(array,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8640130.java!!!	spliterator(inout array : T [[]], in startInclusive : int, in endExclusive : int) : Spliterator
        return Spliterators.spliterator(array, startInclusive, endExclusive,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8640258.java!!!	spliterator(inout array : int [[]]) : Spliterator::OfInt
        return Spliterators.spliterator(array,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8640386.java!!!	spliterator(inout array : int [[]], in startInclusive : int, in endExclusive : int) : Spliterator::OfInt
        return Spliterators.spliterator(array, startInclusive, endExclusive,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8640514.java!!!	spliterator(inout array : long [[]]) : Spliterator::OfLong
        return Spliterators.spliterator(array,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8640642.java!!!	spliterator(inout array : long [[]], in startInclusive : int, in endExclusive : int) : Spliterator::OfLong
        return Spliterators.spliterator(array, startInclusive, endExclusive,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8640770.java!!!	spliterator(inout array : double [[]]) : Spliterator::OfDouble
        return Spliterators.spliterator(array,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8640898.java!!!	spliterator(inout array : double [[]], in startInclusive : int, in endExclusive : int) : Spliterator::OfDouble
        return Spliterators.spliterator(array, startInclusive, endExclusive,
                                        Spliterator.ORDERED | Spliterator.IMMUTABLE);
!!!8641026.java!!!	stream(inout array : T [[]]) : Stream
        return stream(array, 0, array.length);
!!!8641154.java!!!	stream(inout array : T [[]], in startInclusive : int, in endExclusive : int) : Stream
        return StreamSupport.stream(spliterator(array, startInclusive, endExclusive), false);
!!!8641282.java!!!	stream(inout array : int [[]]) : IntStream
        return stream(array, 0, array.length);
!!!8641410.java!!!	stream(inout array : int [[]], in startInclusive : int, in endExclusive : int) : IntStream
        return StreamSupport.intStream(spliterator(array, startInclusive, endExclusive), false);
!!!8641538.java!!!	stream(inout array : long [[]]) : LongStream
        return stream(array, 0, array.length);
!!!8641666.java!!!	stream(inout array : long [[]], in startInclusive : int, in endExclusive : int) : LongStream
        return StreamSupport.longStream(spliterator(array, startInclusive, endExclusive), false);
!!!8641794.java!!!	stream(inout array : double [[]]) : DoubleStream
        return stream(array, 0, array.length);
!!!8641922.java!!!	stream(inout array : double [[]], in startInclusive : int, in endExclusive : int) : DoubleStream
        return StreamSupport.doubleStream(spliterator(array, startInclusive, endExclusive), false);
