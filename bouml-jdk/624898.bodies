class MultipleNodeCounter
!!!4000642.java!!!	MultipleNodeCounter(inout translet : Translet, inout document : DOM, inout iterator : DTMAxisIterator)
        super(translet, document, iterator);
!!!4000770.java!!!	MultipleNodeCounter(inout translet : Translet, inout document : DOM, inout iterator : DTMAxisIterator, inout hasFrom : boolean)
        super(translet, document, iterator, hasFrom);
!!!4000898.java!!!	setStartNode(in node : int) : NodeCounter
        _node = node;
        _nodeType = _document.getExpandedTypeID(node);
    _precSiblings = _document.getAxisIterator(Axis.PRECEDINGSIBLING);
        return this;
!!!4001026.java!!!	getCounter() : String
        if (_value != Integer.MIN_VALUE) {
            //See Errata E24
            if (_value == 0) return "0";
            else if (Double.isNaN(_value)) return "NaN";
            else if (_value < 0 && Double.isInfinite(_value)) return "-Infinity";
            else if (Double.isInfinite(_value)) return "Infinity";
            else return formatNumbers((int)_value);
        }

        IntegerArray ancestors = new IntegerArray();

        // Gather all ancestors that do not match from pattern
        int next = _node;
        ancestors.add(next);            // include self
        while ((next = _document.getParent(next)) > END &&
               !matchesFrom(next)) {
            ancestors.add(next);
        }

        // Create an array of counters
        final int nAncestors = ancestors.cardinality();
        final int[] counters = new int[nAncestors];
        for (int i = 0; i < nAncestors; i++) {
            counters[i] = Integer.MIN_VALUE;
        }

        // Increment array of counters according to semantics
        for (int j = 0, i = nAncestors - 1; i >= 0 ; i--, j++) {
            final int counter = counters[j];
            final int ancestor = ancestors.at(i);

            if (matchesCount(ancestor)) {
                _precSiblings.setStartNode(ancestor);
                while ((next = _precSiblings.next()) != END) {
                    if (matchesCount(next)) {
                        counters[j] = (counters[j] == Integer.MIN_VALUE) ? 1
                            : counters[j] + 1;
                    }
                }
                // Count the node itself
                counters[j] = counters[j] == Integer.MIN_VALUE
                    ? 1
                    : counters[j] + 1;
            }
        }
        return formatNumbers(counters);
!!!4001154.java!!!	getDefaultNodeCounter(inout translet : Translet, inout document : DOM, inout iterator : DTMAxisIterator) : NodeCounter
        return new DefaultMultipleNodeCounter(translet, document, iterator);
