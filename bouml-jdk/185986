format 222
"spi" // jdk1.8::javax::sound::midi::spi
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/sound/midi/spi/"
  java_package "javax.sound.midi.spi"
  classview 178946 "spi"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1251330 "MidiDeviceProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code MidiDeviceProvider} is a factory or provider for a particular type
of MIDI device. This mechanism allows the implementation to determine how
resources are managed in the creation and management of a device.

@author Kara Kytle
"
      operation 10288258 "isDeviceSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "info" type class_ref 1249794 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the device provider supports the device represented by
the specified device info object.

@param  info an info object that describes the device for which support
        is queried
@return {@code true} if the specified device is supported, otherwise
        {@code false}
"
      end

      operation 10288386 "getDeviceInfo"
	abstract public return_type class_ref 1249794 // Info
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of info objects representing the device or devices
provided by this {@code MidiDeviceProvider}.

@return set of device info objects
"
      end

      operation 10288514 "getDevice"
	abstract public return_type class_ref 1249666 // MidiDevice
	nparams 1
	  param inout name "info" type class_ref 1249794 // Info
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of the device represented by the info object.

@param  info an info object that describes the desired device
@return device instance
@throws IllegalArgumentException if the info object specified does not
        match the info object for a device supported by this
        {@code MidiDeviceProvider}
"
      end
    end

    class 1252098 "MidiFileReader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code MidiFileReader} supplies MIDI file-reading services. Classes
implementing this interface can parse the format information from one or more
types of MIDI file, and can produce a {@link Sequence} object from files of
these types.

@author Kara Kytle
@since 1.3
"
      operation 10288642 "getMidiFileFormat"
	abstract public return_type class_ref 1250690 // MidiFileFormat
	nparams 1
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the input stream provided. The stream
must point to valid MIDI file data. In general, MIDI file readers may
need to read some data from the stream before determining whether they
support it. These parsers must be able to mark the stream, read enough
data to determine whether they support the stream, and, if not, reset the
stream's read pointer to its original position. If the input stream does
not support this, this method may fail with an {@code IOException}.

@param  stream the input stream from which file format information
        should be extracted
@return a {@code MidiFileFormat} object describing the MIDI file format
@throws InvalidMidiDataException if the stream does not point to valid
        MIDI file data recognized by the system
@throws IOException if an I/O exception occurs
@see InputStream#markSupported
@see InputStream#mark
"
      end

      operation 10288770 "getMidiFileFormat"
	abstract public return_type class_ref 1250690 // MidiFileFormat
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the URL provided. The URL must point to
valid MIDI file data.

@param  url the URL from which file format information should be
        extracted
@return a {@code MidiFileFormat} object describing the MIDI file format
@throws InvalidMidiDataException if the URL does not point to valid MIDI
        file data recognized by the system
@throws IOException if an I/O exception occurs
"
      end

      operation 10288898 "getMidiFileFormat"
	abstract public return_type class_ref 1250690 // MidiFileFormat
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the {@code File} provided. The
{@code File} must point to valid MIDI file data.

@param  file the {@code File} from which file format information should
        be extracted
@return a {@code MidiFileFormat} object describing the MIDI file format
@throws InvalidMidiDataException if the {@code File} does not point to
        valid MIDI file data recognized by the system
@throws IOException if an I/O exception occurs
"
      end

      operation 10289026 "getSequence"
	abstract public return_type class_ref 1251202 // Sequence
	nparams 1
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the input stream provided. The stream must
point to valid MIDI file data. In general, MIDI file readers may need to
read some data from the stream before determining whether they support
it. These parsers must be able to mark the stream, read enough data to
determine whether they support the stream, and, if not, reset the
stream's read pointer to its original position. If the input stream does
not support this, this method may fail with an IOException.

@param  stream the input stream from which the {@code Sequence} should
        be constructed
@return a {@code Sequence} object based on the MIDI file data contained
        in the input stream.
@throws InvalidMidiDataException if the stream does not point to valid
        MIDI file data recognized by the system
@throws IOException if an I/O exception occurs
@see InputStream#markSupported
@see InputStream#mark
"
      end

      operation 10289154 "getSequence"
	abstract public return_type class_ref 1251202 // Sequence
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the URL provided. The URL must point to
valid MIDI file data.

@param  url the URL for which the {@code Sequence} should be constructed
@return a {@code Sequence} object based on the MIDI file data pointed to
        by the URL
@throws InvalidMidiDataException if the URL does not point to valid MIDI
        file data recognized by the system
@throws IOException if an I/O exception occurs
"
      end

      operation 10289282 "getSequence"
	abstract public return_type class_ref 1251202 // Sequence
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the {@code File} provided. The {@code File}
must point to valid MIDI file data.

@param  file the {@code File} from which the {@code Sequence} should be
        constructed
@return a {@code Sequence} object based on the MIDI file data pointed to
        by the {@code File}
@throws InvalidMidiDataException if the {@code File} does not point to
        valid MIDI file data recognized by the system
@throws IOException if an I/O exception occurs
"
      end
    end

    class 1252226 "MidiFileWriter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code MidiFileWriter} supplies MIDI file-writing services. Classes that
implement this interface can write one or more types of MIDI file from a
{@link Sequence} object.

@author Kara Kytle
@since 1.3
"
      operation 10289410 "getMidiFileTypes"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of MIDI file types for which file writing support is
provided by this file writer.

@return array of file types. If no file types are supported, an array of
        length 0 is returned.
"
      end

      operation 10289538 "getMidiFileTypes"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "sequence" type class_ref 1251202 // Sequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the file types that this file writer can write from the sequence
specified.

@param  sequence the sequence for which MIDI file type support is
        queried
@return array of file types. If no file types are supported, returns an
        array of length 0.
"
      end

      operation 10289666 "isFileTypeSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "fileType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether file writing support for the specified MIDI file type
is provided by this file writer.

@param  fileType the file type for which write capabilities are queried
@return {@code true} if the file type is supported, otherwise
        {@code false}
"
      end

      operation 10289794 "isFileTypeSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "fileType" explicit_type "int"
	  param inout name "sequence" type class_ref 1251202 // Sequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a MIDI file of the file type specified can be written
from the sequence indicated.

@param  fileType the file type for which write capabilities are queried
@param  sequence the sequence for which file writing support is queried
@return {@code true} if the file type is supported for this sequence,
        otherwise {@code false}
"
      end

      operation 10289922 "write"
	abstract public explicit_return_type "int"
	nparams 3
	  param inout name "in" type class_ref 1251202 // Sequence
	  param in name "fileType" explicit_type "int"
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing a MIDI file of the file type
indicated to the output stream provided.

@param  in sequence containing MIDI data to be written to the file
@param  fileType type of the file to be written to the output stream
@param  out stream to which the file data should be written
@return the number of bytes written to the output stream
@throws IOException if an I/O exception occurs
@throws IllegalArgumentException if the file type is not supported by
        this file writer
@see #isFileTypeSupported(int, Sequence)
@see #getMidiFileTypes(Sequence)
"
      end

      operation 10290050 "write"
	abstract public explicit_return_type "int"
	nparams 3
	  param inout name "in" type class_ref 1251202 // Sequence
	  param in name "fileType" explicit_type "int"
	  param inout name "out" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing a MIDI file of the file type
indicated to the external file provided.

@param  in sequence containing MIDI data to be written to the external
        file
@param  fileType type of the file to be written to the external file
@param  out external file to which the file data should be written
@return the number of bytes written to the file
@throws IOException if an I/O exception occurs
@throws IllegalArgumentException if the file type is not supported by
        this file writer
@see #isFileTypeSupported(int, Sequence)
@see #getMidiFileTypes(Sequence)
"
      end
    end

    class 1252354 "SoundbankReader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code SoundbankReader} supplies soundbank file-reading services. Concrete
subclasses of {@code SoundbankReader} parse a given soundbank file, producing
a {@link javax.sound.midi.Soundbank} object that can be loaded into a
{@link javax.sound.midi.Synthesizer}.

@since 1.3
@author Kara Kytle
"
      operation 10290178 "getSoundbank"
	abstract public return_type class_ref 1248770 // Soundbank
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a soundbank object from the URL provided.

@param  url URL representing the soundbank.
@return soundbank object
@throws InvalidMidiDataException if the URL does not point to valid MIDI
        soundbank data recognized by this soundbank reader
@throws IOException if an I/O error occurs
"
      end

      operation 10290306 "getSoundbank"
	abstract public return_type class_ref 1248770 // Soundbank
	nparams 1
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a soundbank object from the {@code InputStream} provided.

@param  stream {@code InputStream} representing the soundbank
@return soundbank object
@throws InvalidMidiDataException if the stream does not point to valid
        MIDI soundbank data recognized by this soundbank reader
@throws IOException if an I/O error occurs
"
      end

      operation 10290434 "getSoundbank"
	abstract public return_type class_ref 1248770 // Soundbank
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 2
	  exception class_ref 1249026 // InvalidMidiDataException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a soundbank object from the {@code File} provided.

@param  file the {@code File} representing the soundbank
@return soundbank object
@throws InvalidMidiDataException if the file does not point to valid MIDI
        soundbank data recognized by this soundbank reader
@throws IOException if an I/O error occurs
"
      end
    end
  end

  deploymentview 175490 "spi"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 914050 "MidiDeviceProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.sound.midi.MidiDevice;
${definition}"
      associated_elems
	class_ref 1251330 // MidiDeviceProvider
      end
      comment "Copyright (c) 1999, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 914178 "MidiFileReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.InputStream;
import java.io.IOException;
import java.net.URL;
import javax.sound.midi.MidiFileFormat;
import javax.sound.midi.Sequence;
import javax.sound.midi.InvalidMidiDataException;
${definition}"
      associated_elems
	class_ref 1252098 // MidiFileReader
      end
      comment "Copyright (c) 1999, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 914306 "MidiFileWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import javax.sound.midi.Sequence;
${definition}"
      associated_elems
	class_ref 1252226 // MidiFileWriter
      end
      comment "Copyright (c) 1999, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 914434 "SoundbankReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.Soundbank;
${definition}"
      associated_elems
	class_ref 1252354 // SoundbankReader
      end
      comment "Copyright (c) 1999, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
