class AsVarargsCollector
!!!7248002.java!!!	AsVarargsCollector(inout target : MethodHandle, inout arrayType : Class)
            this(target.type(), target, arrayType);
!!!7248130.java!!!	AsVarargsCollector(inout type : MethodType, inout target : MethodHandle, inout arrayType : Class)
            super(type, target);
            this.target = target;
            this.arrayType = arrayType;
            this.asCollectorCache = target.asCollector(arrayType, 0);
!!!7248258.java!!!	isVarargsCollector() : boolean
            return true;
!!!7248386.java!!!	getTarget() : MethodHandle
            return target;
!!!7248514.java!!!	asFixedArity() : MethodHandle
            return target;
!!!7248642.java!!!	setVarargs(inout member : MemberName) : MethodHandle
            if (member.isVarargs())  return this;
            return asFixedArity();
!!!7248770.java!!!	asTypeUncached(inout newType : MethodType) : MethodHandle
            MethodType type = this.type();
            int collectArg = type.parameterCount() - 1;
            int newArity = newType.parameterCount();
            if (newArity == collectArg+1 &&
                type.parameterType(collectArg).isAssignableFrom(newType.parameterType(collectArg))) {
                // if arity and trailing parameter are compatible, do normal thing
                return asTypeCache = asFixedArity().asType(newType);
            }
            // check cache
            MethodHandle acc = asCollectorCache;
            if (acc != null && acc.type().parameterCount() == newArity)
                return asTypeCache = acc.asType(newType);
            // build and cache a collector
            int arrayLength = newArity - collectArg;
            MethodHandle collector;
            try {
                collector = asFixedArity().asCollector(arrayType, arrayLength);
                assert(collector.type().parameterCount() == newArity) : "newArity="+newArity+" but collector="+collector;
            } catch (IllegalArgumentException ex) {
                throw new WrongMethodTypeException("cannot build collector", ex);
            }
            asCollectorCache = collector;
            return asTypeCache = collector.asType(newType);
!!!7248898.java!!!	viewAsTypeChecks(inout newType : MethodType, inout strict : boolean) : boolean
            super.viewAsTypeChecks(newType, true);
            if (strict) return true;
            // extra assertion for non-strict checks:
            assert (type().lastParameterType().getComponentType()
                    .isAssignableFrom(
                            newType.lastParameterType().getComponentType()))
                    : Arrays.asList(this, newType);
            return true;
