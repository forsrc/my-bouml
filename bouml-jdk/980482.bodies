class DirectIntBufferRU
!!!7712514.java!!!	DirectIntBufferRU(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)








        super(db, mark, pos, lim, cap, off);

!!!7712642.java!!!	slice() : IntBuffer
        int pos = this.position();
        int lim = this.limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);
        int off = (pos << 2);
        assert (off >= 0);
        return new DirectIntBufferRU(this, -1, 0, rem, rem, off);
!!!7712770.java!!!	duplicate() : IntBuffer
        return new DirectIntBufferRU(this,
                                              this.markValue(),
                                              this.position(),
                                              this.limit(),
                                              this.capacity(),
                                              0);
!!!7712898.java!!!	asReadOnlyBuffer() : IntBuffer








        return duplicate();

!!!7713026.java!!!	put(in x : int) : IntBuffer




        throw new ReadOnlyBufferException();

!!!7713154.java!!!	put(in i : int, in x : int) : IntBuffer




        throw new ReadOnlyBufferException();

!!!7713282.java!!!	put(inout src : IntBuffer) : IntBuffer




































        throw new ReadOnlyBufferException();

!!!7713410.java!!!	put(inout src : int [[]], in offset : int, in length : int) : IntBuffer




























        throw new ReadOnlyBufferException();

!!!7713538.java!!!	compact() : IntBuffer












        throw new ReadOnlyBufferException();

!!!7713666.java!!!	isDirect() : boolean
        return true;
!!!7713794.java!!!	isReadOnly() : boolean
        return true;
!!!7713922.java!!!	order() : ByteOrder





        return ((ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN)
                ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);

