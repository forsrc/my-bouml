format 222
"annotation" // jdk1.8::javax::annotation
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/annotation/"
  java_package "javax.annotation"
  package_ref 180226 // processing

  classview 176898 "annotation"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1171714 "Generated"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(SOURCE)
@Target({PACKAGE, TYPE, ANNOTATION_TYPE, METHOD, CONSTRUCTOR, FIELD,
        LOCAL_VARIABLE, PARAMETER})
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Generated annotation is used to mark source code that has been generated.
It can also be used to differentiate user written code from generated code
in a single file. When used, the value element must have the name of the
code generator. The recommended convention is to use the fully qualified
name of the code generator in the value field .
<p>For example: com.company.package.classname.
The date element is used to indicate the date the source was generated.
The date element must follow the ISO 8601 standard. For example the date
element would have the following value 2001-07-04T12:08:56.235-0700
which represents 2001-07-04 12:08:56 local time in the U.S. Pacific
Time time zone.</p>
<p>The comment element is a place holder for any comments that the code
generator may want to include in the generated code.</p>

@since Common Annotations 1.0
"
      operation 9634562 "value"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The value element MUST have the name of the code generator.
The recommended convention is to use the fully qualified name of the
code generator. For example: com.acme.generator.CodeGen.
"
      end

      operation 9634690 "date"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default \"\";"
	
	
	
	comment "Date when the source was generated.
"
      end

      operation 9634818 "comments"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default \"\";"
	
	
	
	comment "A place holder for any comments that the code generator may want to
include in the generated code.
"
      end
    end

    class 1171842 "PostConstruct"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention (RUNTIME)
@Target(METHOD)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The PostConstruct annotation is used on a method that needs to be executed
after dependency injection is done to perform any initialization. This
method MUST be invoked before the class is put into service. This
annotation MUST be supported on all classes that support dependency
injection. The method annotated with PostConstruct MUST be invoked even
if the class does not request any resources to be injected. Only one
method can be annotated with this annotation. The method on which the
PostConstruct annotation is applied MUST fulfill all of the following
criteria:
<p>
<ul>
<li>The method MUST NOT have any parameters except in the case of
interceptors in which case it takes an InvocationContext object as
defined by the Interceptors specification.</li>
<li>The method defined on an interceptor class MUST HAVE one of the
following signatures:
<p>
void &#060;METHOD&#062;(InvocationContext)
<p>
Object &#060;METHOD&#062;(InvocationContext) throws Exception
<p>
<i>Note: A PostConstruct interceptor method must not throw application
exceptions, but it may be declared to throw checked exceptions including
the java.lang.Exception if the same interceptor method interposes on
business or timeout methods in addition to lifecycle events. If a
PostConstruct interceptor method returns a value, it is ignored by
the container.</i>
</li>
<li>The method defined on a non-interceptor class MUST HAVE the
following signature:
<p>
void &#060;METHOD&#062;()
</li>
<li>The method on which PostConstruct is applied MAY be public, protected,
package private or private.</li>
<li>The method MUST NOT be static except for the application client.</li>
<li>The method MAY be final.</li>
<li>If the method throws an unchecked exception the class MUST NOT be put into
service except in the case of EJBs where the EJB can handle exceptions and
even recover from them.</li></ul>
@since Common Annotations 1.0
@see javax.annotation.PreDestroy
@see javax.annotation.Resource
"
    end

    class 1171970 "PreDestroy"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention (RUNTIME)
@Target(METHOD)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The PreDestroy annotation is used on methods as a callback notification to
signal that the instance is in the process of being removed by the
container. The method annotated with PreDestroy is typically used to
release resources that it has been holding. This annotation MUST be
supported by all container managed objects that support PostConstruct
except the application client container in Java EE 5. The method on which
the PreDestroy annotation is applied MUST fulfill all of the following
criteria:
<p>
<ul>
<li>The method MUST NOT have any parameters except in the case of
interceptors in which case it takes an InvocationContext object as
defined by the Interceptors specification.</li>
<li>The method defined on an interceptor class MUST HAVE one of the
following signatures:
<p>
void &#060;METHOD&#062;(InvocationContext)
<p>
Object &#060;METHOD&#062;(InvocationContext) throws Exception
<p>
<i>Note: A PreDestroy interceptor method must not throw application
exceptions, but it may be declared to throw checked exceptions including
the java.lang.Exception if the same interceptor method interposes on
business or timeout methods in addition to lifecycle events. If a
PreDestroy interceptor method returns a value, it is ignored by
the container.</i>
</li>
<li>The method defined on a non-interceptor class MUST HAVE the
following signature:
<p>
void &#060;METHOD&#062;()
</li>
<li>The method on which PreDestroy is applied MAY be public, protected,
package private or private.</li>
<li>The method MUST NOT be static.</li>
<li>The method MAY be final.</li>
<li>If the method throws an unchecked exception it is ignored except in the
case of EJBs where the EJB can handle exceptions.</li>
</ul>

@see javax.annotation.PostConstruct
@see javax.annotation.Resource
@since Common Annotations 1.0
"
    end

    class 1172098 "Resource"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target({TYPE, FIELD, METHOD})
@Retention(RUNTIME)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Resource annotation marks a resource that is needed
by the application.  This annotation may be applied to an
application component class, or to fields or methods of the
component class.  When the annotation is applied to a
field or method, the container will inject an instance
of the requested resource into the application component
when the component is initialized.  If the annotation is
applied to the component class, the annotation declares a
resource that the application will look up at runtime. <p>

Even though this annotation is not marked Inherited, deployment
tools are required to examine all superclasses of any component
class to discover all uses of this annotation in all superclasses.
All such annotation instances specify resources that are needed
by the application component.  Note that this annotation may
appear on private fields and methods of superclasses; the container
is required to perform injection in these cases as well.

@since Common Annotations 1.0
"
      operation 9634946 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default \"\";"
	
	
	
	comment "The JNDI name of the resource.  For field annotations,
the default is the field name.  For method annotations,
the default is the JavaBeans property name corresponding
to the method.  For class annotations, there is no default
and this must be specified.
"
      end

      operation 9635074 "lookup"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default \"\";"
	
	
	
	comment "The name of the resource that the reference points to. It can
link to any compatible resource using the global JNDI names.

@since Common Annotations 1.1
"
      end

      operation 9635202 "type"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)} default java.lang.Object.class;"
	
	
	
	comment "The Java type of the resource.  For field annotations,
the default is the type of the field.  For method annotations,
the default is the type of the JavaBeans property.
For class annotations, there is no default and this must be
specified.
"
      end

      class 1172226 "AuthenticationType"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2242946 "CONTAINER"
	  public type class_ref 1172226 // AuthenticationType
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2243074 "APPLICATION"
	  public type class_ref 1172226 // AuthenticationType
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 9635330 "authenticationType"
	public return_type class_ref 1172226 // AuthenticationType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default AuthenticationType.CONTAINER;"
	
	
	
	comment "The authentication type to use for this resource.
This may be specified for resources representing a
connection factory of any supported type, and must
not be specified for resources of other types.
"
      end

      operation 9635458 "shareable"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default true;"
	
	
	
	comment "Indicates whether this resource can be shared between
this component and other components.
This may be specified for resources representing a
connection factory of any supported type, and must
not be specified for resources of other types.
"
      end

      operation 9635586 "mappedName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default \"\";"
	
	
	
	comment "A product specific name that this resource should be mapped to.
The name of this resource, as defined by the <code>name</code>
element or defaulted, is a name that is local to the application
component using the resource.  (It's a name in the JNDI
<code>java:comp/env</code> namespace.)  Many application servers
provide a way to map these local names to names of resources
known to the application server.  This mapped name is often a
<i>global</i> JNDI name, but may be a name of any form. <p>

Application servers are not required to support any particular
form or type of mapped name, nor the ability to use mapped names.
The mapped name is product-dependent and often installation-dependent.
No use of a mapped name is portable.
"
      end

      operation 9635714 "description"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default \"\";"
	
	
	
	comment "Description of this resource.  The description is expected
to be in the default language of the system on which the
application is deployed.  The description can be presented
to the Deployer to help in choosing the correct resource.
"
      end
    end

    class 1172354 "Resources"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RUNTIME)
@Target(TYPE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used to allow multiple resources declarations.

@see javax.annotation.Resource
@since Common Annotations 1.0
"
      operation 9635842 "value"
	public return_type class_ref 1172098 // Resource
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Array used for multiple resource declarations.
"
      end
    end
  end

  deploymentview 171778 "annotation"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 834434 "Generated"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;
${definition}"
      associated_elems
	class_ref 1171714 // Generated
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 834562 "PostConstruct"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;
${definition}"
      associated_elems
	class_ref 1171842 // PostConstruct
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 834690 "PreDestroy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;
${definition}"
      associated_elems
	class_ref 1171970 // PreDestroy
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 834818 "Resource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;
${definition}"
      associated_elems
	class_ref 1172098 // Resource
      end
      comment "Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 834946 "Resources"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;
${definition}"
      associated_elems
	class_ref 1172354 // Resources
      end
      comment "Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
