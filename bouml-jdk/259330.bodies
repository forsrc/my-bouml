class ExceptionRWIDLImpl
!!!1314050.java!!!	ExceptionRWIDLImpl(inout cls : Class)
            super( cls ) ;

            String helperName = cls.getName() + "Helper" ;
            ClassLoader loader = cls.getClassLoader() ;
            Class helperClass ;

            try {
                helperClass = Class.forName( helperName, true, loader ) ;
                Method idMethod = helperClass.getDeclaredMethod( "id", (Class[])null ) ;
                setId( (String)idMethod.invoke( null, (Object[])null ) ) ;
            } catch (Exception ex) {
                throw wrapper.badHelperIdMethod( ex, helperName ) ;
            }

            try {
                Class[] argTypes = new Class[] {
                    org.omg.CORBA.portable.OutputStream.class, cls } ;
                writeMethod = helperClass.getDeclaredMethod( "write",
                    argTypes ) ;
            } catch (Exception ex) {
                throw wrapper.badHelperWriteMethod( ex, helperName ) ;
            }

            try {
                Class[] argTypes = new Class[] {
                    org.omg.CORBA.portable.InputStream.class } ;
                readMethod = helperClass.getDeclaredMethod( "read", argTypes ) ;
            } catch (Exception ex) {
                throw wrapper.badHelperReadMethod( ex, helperName ) ;
            }
!!!1314178.java!!!	write(inout os : OutputStream, inout ex : Exception) : void
            try {
                Object[] args = new Object[] { os, ex } ;
                writeMethod.invoke( null, args ) ;
            } catch (Exception exc) {
                throw wrapper.badHelperWriteMethod( exc,
                    writeMethod.getDeclaringClass().getName() ) ;
            }
!!!1314306.java!!!	read(inout is : InputStream) : Exception
            try {
                Object[] args = new Object[] { is } ;
                return (Exception)readMethod.invoke( null, args ) ;
            } catch (Exception ex) {
                throw wrapper.badHelperReadMethod( ex,
                    readMethod.getDeclaringClass().getName() ) ;
            }
