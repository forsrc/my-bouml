class XPath2NodeFilter
!!!5474306.java!!!	XPath2NodeFilter(inout unionNodes : List, inout subtractNodes : List, inout intersectNodes : List)
        hasUnionFilter = !unionNodes.isEmpty();
        this.unionNodes = convertNodeListToSet(unionNodes);
        hasSubtractFilter = !subtractNodes.isEmpty();
        this.subtractNodes = convertNodeListToSet(subtractNodes);
        hasIntersectFilter = !intersectNodes.isEmpty();
        this.intersectNodes = convertNodeListToSet(intersectNodes);
!!!5474434.java!!!	isNodeInclude(inout currentNode : Node) : int
        int result = 1;

        if (hasSubtractFilter && rooted(currentNode, subtractNodes)) {
            result = -1;
        } else if (hasIntersectFilter && !rooted(currentNode, intersectNodes)) {
            result = 0;
        }

        //TODO OPTIMIZE
        if (result == 1) {
            return 1;
        }
        if (hasUnionFilter) {
            if (rooted(currentNode, unionNodes)) {
                return 1;
            }
            result = 0;
        }
        return result;
!!!5474562.java!!!	isNodeIncludeDO(inout n : Node, in level : int) : int
        int result = 1;
        if (hasSubtractFilter) {
            if ((inSubtract == -1) || (level <= inSubtract)) {
                if (inList(n, subtractNodes)) {
                    inSubtract = level;
                } else {
                    inSubtract = -1;
                }
            }
            if (inSubtract != -1){
                result = -1;
            }
        }
        if (result != -1 && hasIntersectFilter
            && ((inIntersect == -1) || (level <= inIntersect))) {
            if (!inList(n, intersectNodes)) {
                inIntersect = -1;
                result = 0;
            } else {
                inIntersect = level;
            }
        }

        if (level <= inUnion) {
            inUnion = -1;
        }
        if (result == 1) {
            return 1;
        }
        if (hasUnionFilter) {
            if ((inUnion == -1) && inList(n, unionNodes)) {
                inUnion = level;
            }
            if (inUnion != -1) {
                return 1;
            }
            result=0;
        }

        return result;
!!!5474690.java!!!	rooted(inout currentNode : Node, inout nodeList : Set) : boolean
        if (nodeList.isEmpty()) {
            return false;
        }
        if (nodeList.contains(currentNode)) {
            return true;
        }
        for (Node rootNode : nodeList) {
            if (XMLUtils.isDescendantOrSelf(rootNode, currentNode)) {
                return true;
            }
        }
        return false;
!!!5474818.java!!!	inList(inout currentNode : Node, inout nodeList : Set) : boolean
        return nodeList.contains(currentNode);
!!!5474946.java!!!	convertNodeListToSet(inout l : List) : Set
        Set<Node> result = new HashSet<Node>();
        for (NodeList rootNodes : l) {
            int length = rootNodes.getLength();

            for (int i = 0; i < length; i++) {
                Node rootNode = rootNodes.item(i);
                result.add(rootNode);
            }
        }
        return result;
