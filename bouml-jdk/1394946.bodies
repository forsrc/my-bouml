class OptionListModel
!!!11803266.java!!!	getMinSelectionIndex() : int
 return isSelectionEmpty() ? -1 : minIndex;
!!!11803394.java!!!	getMaxSelectionIndex() : int
 return maxIndex;
!!!11803522.java!!!	getValueIsAdjusting() : boolean
 return isAdjusting;
!!!11803650.java!!!	getSelectionMode() : int
 return selectionMode;
!!!11803778.java!!!	setSelectionMode(in selectionMode : int) : void
        switch (selectionMode) {
        case SINGLE_SELECTION:
        case SINGLE_INTERVAL_SELECTION:
        case MULTIPLE_INTERVAL_SELECTION:
            this.selectionMode = selectionMode;
            break;
        default:
            throw new IllegalArgumentException("invalid selectionMode");
        }
!!!11803906.java!!!	isSelectedIndex(in index : int) : boolean
        return ((index < minIndex) || (index > maxIndex)) ? false : value.get(index);
!!!11804034.java!!!	isSelectionEmpty() : boolean
        return (minIndex > maxIndex);
!!!11804162.java!!!	addListSelectionListener(inout l : ListSelectionListener) : void
        listenerList.add(ListSelectionListener.class, l);
!!!11804290.java!!!	removeListSelectionListener(inout l : ListSelectionListener) : void
        listenerList.remove(ListSelectionListener.class, l);
!!!11804418.java!!!	getListSelectionListeners() : ListSelectionListener
        return listenerList.getListeners(ListSelectionListener.class);
!!!11804546.java!!!	fireValueChanged(inout isAdjusting : boolean) : void
        fireValueChanged(getMinSelectionIndex(), getMaxSelectionIndex(), isAdjusting);
!!!11804674.java!!!	fireValueChanged(in firstIndex : int, in lastIndex : int) : void
        fireValueChanged(firstIndex, lastIndex, getValueIsAdjusting());
!!!11804802.java!!!	fireValueChanged(in firstIndex : int, in lastIndex : int, inout isAdjusting : boolean) : void
        Object[] listeners = listenerList.getListenerList();
        ListSelectionEvent e = null;

        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ListSelectionListener.class) {
                if (e == null) {
                    e = new ListSelectionEvent(this, firstIndex, lastIndex, isAdjusting);
                }
                ((ListSelectionListener)listeners[i+1]).valueChanged(e);
            }
        }
!!!11804930.java!!!	fireValueChanged() : void
        if (lastChangedIndex == MIN) {
            return;
        }
        /* Change the values before sending the event to the
         * listeners in case the event causes a listener to make
         * another change to the selection.
         */
        int oldFirstChangedIndex = firstChangedIndex;
        int oldLastChangedIndex = lastChangedIndex;
        firstChangedIndex = MAX;
        lastChangedIndex = MIN;
        fireValueChanged(oldFirstChangedIndex, oldLastChangedIndex);
!!!11805058.java!!!	markAsDirty(in r : int) : void
        firstChangedIndex = Math.min(firstChangedIndex, r);
        lastChangedIndex =  Math.max(lastChangedIndex, r);
!!!11805186.java!!!	set(in r : int) : void
        if (value.get(r)) {
            return;
        }
        value.set(r);
        Option option = (Option)get(r);
        option.setSelection(true);
        markAsDirty(r);

        // Update minimum and maximum indices
        minIndex = Math.min(minIndex, r);
        maxIndex = Math.max(maxIndex, r);
!!!11805314.java!!!	clear(in r : int) : void
        if (!value.get(r)) {
            return;
        }
        value.clear(r);
        Option option = (Option)get(r);
        option.setSelection(false);
        markAsDirty(r);

        // Update minimum and maximum indices
        /*
           If (r > minIndex) the minimum has not changed.
           The case (r < minIndex) is not possible because r'th value was set.
           We only need to check for the case when lowest entry has been cleared,
           and in this case we need to search for the first value set above it.
        */
        if (r == minIndex) {
            for(minIndex = minIndex + 1; minIndex <= maxIndex; minIndex++) {
                if (value.get(minIndex)) {
                    break;
                }
            }
        }
        /*
           If (r < maxIndex) the maximum has not changed.
           The case (r > maxIndex) is not possible because r'th value was set.
           We only need to check for the case when highest entry has been cleared,
           and in this case we need to search for the first value set below it.
        */
        if (r == maxIndex) {
            for(maxIndex = maxIndex - 1; minIndex <= maxIndex; maxIndex--) {
                if (value.get(maxIndex)) {
                    break;
                }
            }
        }
        /* Performance note: This method is called from inside a loop in
           changeSelection() but we will only iterate in the loops
           above on the basis of one iteration per deselected cell - in total.
           Ie. the next time this method is called the work of the previous
           deselection will not be repeated.

           We also don't need to worry about the case when the min and max
           values are in their unassigned states. This cannot happen because
           this method's initial check ensures that the selection was not empty
           and therefore that the minIndex and maxIndex had 'real' values.

           If we have cleared the whole selection, set the minIndex and maxIndex
           to their cannonical values so that the next set command always works
           just by using Math.min and Math.max.
        */
        if (isSelectionEmpty()) {
            minIndex = MAX;
            maxIndex = MIN;
        }
!!!11805442.java!!!	setLeadAnchorNotificationEnabled(inout flag : boolean) : void
        leadAnchorNotificationEnabled = flag;
!!!11805570.java!!!	isLeadAnchorNotificationEnabled() : boolean
        return leadAnchorNotificationEnabled;
!!!11805698.java!!!	updateLeadAnchorIndices(in anchorIndex : int, in leadIndex : int) : void
        if (leadAnchorNotificationEnabled) {
            if (this.anchorIndex != anchorIndex) {
                if (this.anchorIndex != -1) { // The unassigned state.
                    markAsDirty(this.anchorIndex);
                }
                markAsDirty(anchorIndex);
            }

            if (this.leadIndex != leadIndex) {
                if (this.leadIndex != -1) { // The unassigned state.
                    markAsDirty(this.leadIndex);
                }
                markAsDirty(leadIndex);
            }
        }
        this.anchorIndex = anchorIndex;
        this.leadIndex = leadIndex;
!!!11805826.java!!!	contains(in a : int, in b : int, in i : int) : boolean
        return (i >= a) && (i <= b);
!!!11805954.java!!!	changeSelection(in clearMin : int, in clearMax : int, in setMin : int, in setMax : int, inout clearFirst : boolean) : void
        for(int i = Math.min(setMin, clearMin); i <= Math.max(setMax, clearMax); i++) {

            boolean shouldClear = contains(clearMin, clearMax, i);
            boolean shouldSet = contains(setMin, setMax, i);

            if (shouldSet && shouldClear) {
                if (clearFirst) {
                    shouldClear = false;
                }
                else {
                    shouldSet = false;
                }
            }

            if (shouldSet) {
                set(i);
            }
            if (shouldClear) {
                clear(i);
            }
        }
        fireValueChanged();
!!!11806082.java!!!	changeSelection(in clearMin : int, in clearMax : int, in setMin : int, in setMax : int) : void
        changeSelection(clearMin, clearMax, setMin, setMax, true);
!!!11806210.java!!!	clearSelection() : void
        removeSelectionInterval(minIndex, maxIndex);
!!!11806338.java!!!	setSelectionInterval(in index0 : int, in index1 : int) : void
        if (index0 == -1 || index1 == -1) {
            return;
        }

        if (getSelectionMode() == SINGLE_SELECTION) {
            index0 = index1;
        }

        updateLeadAnchorIndices(index0, index1);

        int clearMin = minIndex;
        int clearMax = maxIndex;
        int setMin = Math.min(index0, index1);
        int setMax = Math.max(index0, index1);
        changeSelection(clearMin, clearMax, setMin, setMax);
!!!11806466.java!!!	addSelectionInterval(in index0 : int, in index1 : int) : void
        if (index0 == -1 || index1 == -1) {
            return;
        }

        if (getSelectionMode() != MULTIPLE_INTERVAL_SELECTION) {
            setSelectionInterval(index0, index1);
            return;
        }

        updateLeadAnchorIndices(index0, index1);

        int clearMin = MAX;
        int clearMax = MIN;
        int setMin = Math.min(index0, index1);
        int setMax = Math.max(index0, index1);
        changeSelection(clearMin, clearMax, setMin, setMax);
!!!11806594.java!!!	removeSelectionInterval(in index0 : int, in index1 : int) : void
        if (index0 == -1 || index1 == -1) {
            return;
        }

        updateLeadAnchorIndices(index0, index1);

        int clearMin = Math.min(index0, index1);
        int clearMax = Math.max(index0, index1);
        int setMin = MAX;
        int setMax = MIN;
        changeSelection(clearMin, clearMax, setMin, setMax);
!!!11806722.java!!!	setState(in index : int, inout state : boolean) : void
        if (state) {
            set(index);
        }
        else {
            clear(index);
        }
!!!11806850.java!!!	insertIndexInterval(in index : int, in length : int, inout before : boolean) : void
        /* The first new index will appear at insMinIndex and the last
         * one will appear at insMaxIndex
         */
        int insMinIndex = (before) ? index : index + 1;
        int insMaxIndex = (insMinIndex + length) - 1;

        /* Right shift the entire bitset by length, beginning with
         * index-1 if before is true, index+1 if it's false (i.e. with
         * insMinIndex).
         */
        for(int i = maxIndex; i >= insMinIndex; i--) {
            setState(i + length, value.get(i));
        }

        /* Initialize the newly inserted indices.
         */
        boolean setInsertedValues = value.get(index);
        for(int i = insMinIndex; i <= insMaxIndex; i++) {
            setState(i, setInsertedValues);
        }
!!!11806978.java!!!	removeIndexInterval(in index0 : int, in index1 : int) : void
        int rmMinIndex = Math.min(index0, index1);
        int rmMaxIndex = Math.max(index0, index1);
        int gapLength = (rmMaxIndex - rmMinIndex) + 1;

        /* Shift the entire bitset to the left to close the index0, index1
         * gap.
         */
        for(int i = rmMinIndex; i <= maxIndex; i++) {
            setState(i, value.get(i + gapLength));
        }
!!!11807106.java!!!	setValueIsAdjusting(inout isAdjusting : boolean) : void
        if (isAdjusting != this.isAdjusting) {
            this.isAdjusting = isAdjusting;
            this.fireValueChanged(isAdjusting);
        }
!!!11807234.java!!!	toString() : String
        String s =  ((getValueIsAdjusting()) ? "~" : "=") + value.toString();
        return getClass().getName() + " " + Integer.toString(hashCode()) + " " + s;
!!!11807362.java!!!	clone() : Object
        OptionListModel clone = (OptionListModel)super.clone();
        clone.value = (BitSet)value.clone();
        clone.listenerList = new EventListenerList();
        return clone;
!!!11807490.java!!!	getAnchorSelectionIndex() : int
        return anchorIndex;
!!!11807618.java!!!	getLeadSelectionIndex() : int
        return leadIndex;
!!!11807746.java!!!	setAnchorSelectionIndex(in anchorIndex : int) : void
        this.anchorIndex = anchorIndex;
!!!11807874.java!!!	setLeadSelectionIndex(in leadIndex : int) : void
        int anchorIndex = this.anchorIndex;
        if (getSelectionMode() == SINGLE_SELECTION) {
            anchorIndex = leadIndex;
        }

        int oldMin = Math.min(this.anchorIndex, this.leadIndex);
        int oldMax = Math.max(this.anchorIndex, this.leadIndex);
        int newMin = Math.min(anchorIndex, leadIndex);
        int newMax = Math.max(anchorIndex, leadIndex);
        if (value.get(this.anchorIndex)) {
            changeSelection(oldMin, oldMax, newMin, newMax);
        }
        else {
            changeSelection(newMin, newMax, oldMin, oldMax, false);
        }
        this.anchorIndex = anchorIndex;
        this.leadIndex = leadIndex;
!!!11808002.java!!!	setInitialSelection(in i : int) : void
        if (initialValue.get(i)) {
            return;
        }
        if (selectionMode == SINGLE_SELECTION) {
            // reset to empty
            initialValue.and(new BitSet());
        }
        initialValue.set(i);
!!!11808130.java!!!	getInitialSelection() : BitSet
        return initialValue;
