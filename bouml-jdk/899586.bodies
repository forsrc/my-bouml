class MemoryImageSource
!!!6677762.java!!!	MemoryImageSource(in w : int, in h : int, inout cm : ColorModel, inout pix : byte [[]], in off : int, in scan : int)
        initialize(w, h, cm, (Object) pix, off, scan, null);
!!!6677890.java!!!	MemoryImageSource(in w : int, in h : int, inout cm : ColorModel, inout pix : byte [[]], in off : int, in scan : int, inout props : Hashtable)
        initialize(w, h, cm, (Object) pix, off, scan, props);
!!!6678018.java!!!	MemoryImageSource(in w : int, in h : int, inout cm : ColorModel, inout pix : int [[]], in off : int, in scan : int)
        initialize(w, h, cm, (Object) pix, off, scan, null);
!!!6678146.java!!!	MemoryImageSource(in w : int, in h : int, inout cm : ColorModel, inout pix : int [[]], in off : int, in scan : int, inout props : Hashtable)
        initialize(w, h, cm, (Object) pix, off, scan, props);
!!!6678274.java!!!	initialize(in w : int, in h : int, inout cm : ColorModel, inout pix : Object, in off : int, in scan : int, inout props : Hashtable) : void
        width = w;
        height = h;
        model = cm;
        pixels = pix;
        pixeloffset = off;
        pixelscan = scan;
        if (props == null) {
            props = new Hashtable();
        }
        properties = props;
!!!6678402.java!!!	MemoryImageSource(in w : int, in h : int, inout pix : int [[]], in off : int, in scan : int)
        initialize(w, h, ColorModel.getRGBdefault(),
                   (Object) pix, off, scan, null);
!!!6678530.java!!!	MemoryImageSource(in w : int, in h : int, inout pix : int [[]], in off : int, in scan : int, inout props : Hashtable)
        initialize(w, h, ColorModel.getRGBdefault(),
                   (Object) pix, off, scan, props);
!!!6678658.java!!!	addConsumer(inout ic : ImageConsumer) : void
        if (theConsumers.contains(ic)) {
            return;
        }
        theConsumers.addElement(ic);
        try {
            initConsumer(ic);
            sendPixels(ic, 0, 0, width, height);
            if (isConsumer(ic)) {
                ic.imageComplete(animating
                                 ? ImageConsumer.SINGLEFRAMEDONE
                                 : ImageConsumer.STATICIMAGEDONE);
                if (!animating && isConsumer(ic)) {
                    ic.imageComplete(ImageConsumer.IMAGEERROR);
                    removeConsumer(ic);
                }
            }
        } catch (Exception e) {
            if (isConsumer(ic)) {
                ic.imageComplete(ImageConsumer.IMAGEERROR);
            }
        }
!!!6678786.java!!!	isConsumer(inout ic : ImageConsumer) : boolean
        return theConsumers.contains(ic);
!!!6678914.java!!!	removeConsumer(inout ic : ImageConsumer) : void
        theConsumers.removeElement(ic);
!!!6679042.java!!!	startProduction(inout ic : ImageConsumer) : void
        addConsumer(ic);
!!!6679170.java!!!	requestTopDownLeftRightResend(inout ic : ImageConsumer) : void
        // Ignored.  The data is either single frame and already in TDLR
        // format or it is multi-frame and TDLR resends aren't critical.
!!!6679298.java!!!	setAnimated(inout animated : boolean) : void
        this.animating = animated;
        if (!animating) {
            Enumeration enum_ = theConsumers.elements();
            while (enum_.hasMoreElements()) {
                ImageConsumer ic = (ImageConsumer) enum_.nextElement();
                ic.imageComplete(ImageConsumer.STATICIMAGEDONE);
                if (isConsumer(ic)) {
                    ic.imageComplete(ImageConsumer.IMAGEERROR);
                }
            }
            theConsumers.removeAllElements();
        }
!!!6679426.java!!!	setFullBufferUpdates(inout fullbuffers : boolean) : void
        if (this.fullbuffers == fullbuffers) {
            return;
        }
        this.fullbuffers = fullbuffers;
        if (animating) {
            Enumeration enum_ = theConsumers.elements();
            while (enum_.hasMoreElements()) {
                ImageConsumer ic = (ImageConsumer) enum_.nextElement();
                ic.setHints(fullbuffers
                            ? (ImageConsumer.TOPDOWNLEFTRIGHT |
                               ImageConsumer.COMPLETESCANLINES)
                            : ImageConsumer.RANDOMPIXELORDER);
            }
        }
!!!6679554.java!!!	newPixels() : void
        newPixels(0, 0, width, height, true);
!!!6679682.java!!!	newPixels(in x : int, in y : int, in w : int, in h : int) : void
        newPixels(x, y, w, h, true);
!!!6679810.java!!!	newPixels(in x : int, in y : int, in w : int, in h : int, inout framenotify : boolean) : void
        if (animating) {
            if (fullbuffers) {
                x = y = 0;
                w = width;
                h = height;
            } else {
                if (x < 0) {
                    w += x;
                    x = 0;
                }
                if (x + w > width) {
                    w = width - x;
                }
                if (y < 0) {
                    h += y;
                    y = 0;
                }
                if (y + h > height) {
                    h = height - y;
                }
            }
            if ((w <= 0 || h <= 0) && !framenotify) {
                return;
            }
            Enumeration enum_ = theConsumers.elements();
            while (enum_.hasMoreElements()) {
                ImageConsumer ic = (ImageConsumer) enum_.nextElement();
                if (w > 0 && h > 0) {
                    sendPixels(ic, x, y, w, h);
                }
                if (framenotify && isConsumer(ic)) {
                    ic.imageComplete(ImageConsumer.SINGLEFRAMEDONE);
                }
            }
        }
!!!6679938.java!!!	newPixels(inout newpix : byte [[]], inout newmodel : ColorModel, in offset : int, in scansize : int) : void
        this.pixels = newpix;
        this.model = newmodel;
        this.pixeloffset = offset;
        this.pixelscan = scansize;
        newPixels();
!!!6680066.java!!!	newPixels(inout newpix : int [[]], inout newmodel : ColorModel, in offset : int, in scansize : int) : void
        this.pixels = newpix;
        this.model = newmodel;
        this.pixeloffset = offset;
        this.pixelscan = scansize;
        newPixels();
!!!6680194.java!!!	initConsumer(inout ic : ImageConsumer) : void
        if (isConsumer(ic)) {
            ic.setDimensions(width, height);
        }
        if (isConsumer(ic)) {
            ic.setProperties(properties);
        }
        if (isConsumer(ic)) {
            ic.setColorModel(model);
        }
        if (isConsumer(ic)) {
            ic.setHints(animating
                        ? (fullbuffers
                           ? (ImageConsumer.TOPDOWNLEFTRIGHT |
                              ImageConsumer.COMPLETESCANLINES)
                           : ImageConsumer.RANDOMPIXELORDER)
                        : (ImageConsumer.TOPDOWNLEFTRIGHT |
                           ImageConsumer.COMPLETESCANLINES |
                           ImageConsumer.SINGLEPASS |
                           ImageConsumer.SINGLEFRAME));
        }
!!!6680322.java!!!	sendPixels(inout ic : ImageConsumer, in x : int, in y : int, in w : int, in h : int) : void
        int off = pixeloffset + pixelscan * y + x;
        if (isConsumer(ic)) {
            if (pixels instanceof byte[]) {
                ic.setPixels(x, y, w, h, model,
                             ((byte[]) pixels), off, pixelscan);
            } else {
                ic.setPixels(x, y, w, h, model,
                             ((int[]) pixels), off, pixelscan);
            }
        }
