class Sequence
!!!10274306.java!!!	Sequence(in divisionType : float, in resolution : int)

        if (divisionType == PPQ)
            this.divisionType = PPQ;
        else if (divisionType == SMPTE_24)
            this.divisionType = SMPTE_24;
        else if (divisionType == SMPTE_25)
            this.divisionType = SMPTE_25;
        else if (divisionType == SMPTE_30DROP)
            this.divisionType = SMPTE_30DROP;
        else if (divisionType == SMPTE_30)
            this.divisionType = SMPTE_30;
        else throw new InvalidMidiDataException("Unsupported division type: " + divisionType);

        this.resolution = resolution;
!!!10274434.java!!!	Sequence(in divisionType : float, in resolution : int, in numTracks : int)

        if (divisionType == PPQ)
            this.divisionType = PPQ;
        else if (divisionType == SMPTE_24)
            this.divisionType = SMPTE_24;
        else if (divisionType == SMPTE_25)
            this.divisionType = SMPTE_25;
        else if (divisionType == SMPTE_30DROP)
            this.divisionType = SMPTE_30DROP;
        else if (divisionType == SMPTE_30)
            this.divisionType = SMPTE_30;
        else throw new InvalidMidiDataException("Unsupported division type: " + divisionType);

        this.resolution = resolution;

        for (int i = 0; i < numTracks; i++) {
            tracks.addElement(new Track());
        }
!!!10274562.java!!!	getDivisionType() : float
        return divisionType;
!!!10274690.java!!!	getResolution() : int
        return resolution;
!!!10274818.java!!!	createTrack() : Track

        Track track = new Track();
        tracks.addElement(track);

        return track;
!!!10274946.java!!!	deleteTrack(inout track : Track) : boolean

        synchronized(tracks) {

            return tracks.removeElement(track);
        }
!!!10275074.java!!!	getTracks() : Track

        return (Track[]) tracks.toArray(new Track[tracks.size()]);
!!!10275202.java!!!	getMicrosecondLength() : long

        return com.sun.media.sound.MidiUtils.tick2microsecond(this, getTickLength(), null);
!!!10275330.java!!!	getTickLength() : long

        long length = 0;

        synchronized(tracks) {

            for(int i=0; i<tracks.size(); i++ ) {
                long temp = ((Track)tracks.elementAt(i)).ticks();
                if( temp>length ) {
                    length = temp;
                }
            }
            return length;
        }
!!!10275458.java!!!	getPatchList() : Patch

        // $$kk: 04.09.99: need to implement!!
        return new Patch[0];
