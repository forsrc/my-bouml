format 222
"parser" // jdk1.8::com::sun::org::apache::xerces::internal::xni::parser
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xerces/internal/xni/parser/"
  java_package "com.sun.org.apache.xerces.internal.xni.parser"
  classview 161026 "parser"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 657026 "XMLComponentManager"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The component manager manages a parser configuration and the components
that make up that configuration. The manager notifies each component
before parsing to allow the components to initialize their state; and
also any time that a parser feature or property changes.
<p>
The methods of the component manager allow components to query features
and properties that affect the operation of the component.

@see XMLComponent

@author Andy Clark, IBM

@version $Id: XMLComponentManager.java,v 1.6 2010-11-01 04:40:22 joehw Exp $
"
      operation 4272002 "getFeature"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "featureId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLComponentManager methods


Returns the state of a feature.

@param featureId The feature identifier.

@throws XMLConfigurationException Thrown on configuration error.
"
      end

      operation 4272130 "getFeature"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "featureId" type class_ref 128130 // String
	  param inout name "defaultValue" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the state of a feature.
Does not throw exceptions.

@param featureId The feature identifier.
@param defaultValue Default value if future is not available.
"
      end

      operation 4272258 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "propertyId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of a property.

@param propertyId The property identifier.

@throws XMLConfigurationException Thrown on configuration error.
"
      end

      operation 4272386 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "propertyId" type class_ref 128130 // String
	  param inout name "defaultObject" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of a property.
Does not throw exceptions.

@param propertyId The property identifier.
@param defaultObject Return value if property is not available.

"
      end

      operation 4272514 "getFeatureState"
	public return_type class_ref 657282 // FeatureState
	nparams 1
	  param inout name "featureId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4272642 "getPropertyState"
	public return_type class_ref 657410 // PropertyState
	nparams 1
	  param inout name "propertyId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 657154 "XMLConfigurationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An XNI parser configuration exception. This exception class extends
<code>XNIException</code> in order to differentiate between general
parsing errors and configuration errors.

@author Andy Clark, IBM

@version $Id: XMLConfigurationException.java,v 1.7 2010-11-01 04:40:22 joehw Exp $
"
      classrelation 2227970 // <generalisation>
	relation 2227970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2227970 // <generalisation>
	  b parent class_ref 657794 // XNIException
      end

      attribute 1125890 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -5437427404547669188L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization version. 
"
      end

      classrelation 2228098 // fType (<unidirectional association>)
	relation 2228098 --->
	  a role_name "fType" protected
	    comment " Data

 Exception type. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2228098 // fType (<unidirectional association>)
	  b parent class_ref 735106 // Status
      end

      classrelation 2228226 // fIdentifier (<unidirectional association>)
	relation 2228226 --->
	  a role_name "fIdentifier" protected
	    comment " Identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2228226 // fIdentifier (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5163394 "XMLConfigurationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 735106 // Status
	  param inout name "identifier" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs a configuration exception with the specified type
and feature/property identifier.

@param type       The type of the exception.
@param identifier The feature or property identifier.
"
      end

      operation 5163522 "XMLConfigurationException"
	public explicit_return_type ""
	nparams 3
	  param inout name "type" type class_ref 735106 // Status
	  param inout name "identifier" type class_ref 128130 // String
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(short,String)

Constructs a configuration exception with the specified type,
feature/property identifier, and error message

@param type       The type of the exception.
@param identifier The feature or property identifier.
@param message    The error message.
"
      end

      operation 5163650 "getType"
	public return_type class_ref 735106 // Status
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(short,String,String)

 Public methods


Returns the exception type.
"
      end

      operation 5163778 "getIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getType():short
 Returns the feature or property identifier. "
      end
    end

    class 657538 "XMLParserConfiguration"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a parser configuration. The parser configuration maintains
a table of recognized features and properties, assembles components
for the parsing pipeline, and is responsible for initiating parsing
of an XML document.
<p>
By separating the configuration of a parser from the specific parser
instance, applications can create new configurations and re-use the
existing parser components and external API generators (e.g. the
DOMParser and SAXParser).
<p>
The internals of any specific parser configuration instance are hidden.
Therefore, each configuration may implement the parsing mechanism any
way necessary. However, the parser configuration should follow these
guidelines:
<ul>
 <li>
  Call the <code>reset</code> method on each component before parsing.
  This is only required if the configuration is re-using existing
  components that conform to the <code>XMLComponent</code> interface.
  If the configuration uses all custom parts, then it is free to
  implement everything as it sees fit as long as it follows the
  other guidelines.
 </li>
 <li>
  Call the <code>setFeature</code> and <code>setProperty</code> method
  on each component during parsing to propagate features and properties
  that have changed. This is only required if the configuration is
  re-using existing components that conform to the <code>XMLComponent</code>
  interface. If the configuration uses all custom parts, then it is free
  to implement everything as it sees fit as long as it follows the other
  guidelines.
 </li>
 <li>
  Pass the same unique String references for all symbols that are
  propagated to the registered handlers. Symbols include, but may not
  be limited to, the names of elements and attributes (including their
  uri, prefix, and localpart). This is suggested but not an absolute
  must. However, the standard parser components may require access to
  the same symbol table for creation of unique symbol references to be
  propagated in the XNI pipeline.
 </li>
</ul>

@author Arnaud  Le Hors, IBM
@author Andy Clark, IBM

"
      classrelation 1797122 // <generalisation>
	relation 1797122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1797122 // <generalisation>
	  b parent class_ref 657026 // XMLComponentManager
      end

      operation 4274562 "parse"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inputSource" type class_ref 657666 // XMLInputSource
	nexceptions 2
	  exception class_ref 657794 // XNIException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLParserConfiguration methods

 parsing

Parse an XML document.
<p>
The parser can use this method to instruct this configuration
to begin parsing an XML document from any valid input source
(a character stream, a byte stream, or a URI).
<p>
Parsers may not invoke this method while a parse is in progress.
Once a parse is complete, the parser may then parse another XML
document.
<p>
This method is synchronous: it will not return until parsing
has ended.  If a client application wants to terminate
parsing early, it should throw an exception.
<p>
When this method returns, all characters streams and byte streams
opened by the parser are closed.

@param inputSource The input source for the top-level of the
                   XML document.

@exception XNIException Any XNI exception, possibly wrapping
                        another exception.
@exception IOException  An IO exception from the parser, possibly
                        from a byte stream or character stream
                        supplied by the parser.
"
      end

      operation 4274690 "addRecognizedFeatures"
	public explicit_return_type "void"
	nparams 1
	  param inout name "featureIds" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " generic configuration

Allows a parser to add parser specific features to be recognized
and managed by the parser configuration.

@param featureIds An array of the additional feature identifiers
                  to be recognized.
"
      end

      operation 4274818 "setFeature"
	public explicit_return_type "void"
	nparams 2
	  param inout name "featureId" type class_ref 128130 // String
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the state of a feature. This method is called by the parser
and gets propagated to components in this parser configuration.

@param featureId The feature identifier.
@param state     The state of the feature.

@throws XMLConfigurationException Thrown if there is a configuration
                                  error.
"
      end

      operation 4274946 "getFeature"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "featureId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the state of a feature.

@param featureId The feature identifier.

@throws XMLConfigurationException Thrown if there is a configuration
                                  error.
"
      end

      operation 4275074 "addRecognizedProperties"
	public explicit_return_type "void"
	nparams 1
	  param inout name "propertyIds" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows a parser to add parser specific properties to be recognized
and managed by the parser configuration.

@param propertyIds An array of the additional property identifiers
                   to be recognized.
"
      end

      operation 4275202 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "propertyId" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a property. This method is called by the parser
and gets propagated to components in this parser configuration.

@param propertyId The property identifier.
@param value      The value of the property.

@throws XMLConfigurationException Thrown if there is a configuration
                                  error.
"
      end

      operation 4275330 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "propertyId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of a property.

@param propertyId The property identifier.

@throws XMLConfigurationException Thrown if there is a configuration
                                  error.
"
      end

      operation 4275458 "setErrorHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "errorHandler" type class_ref 657922 // XMLErrorHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " handlers

Sets the error handler.

@param errorHandler The error resolver.
"
      end

      operation 4275586 "getErrorHandler"
	public return_type class_ref 657922 // XMLErrorHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the registered error handler. "
      end

      operation 4275714 "setDocumentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "documentHandler" type class_ref 658050 // XMLDocumentHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the document handler to receive information about the document.

@param documentHandler The document handler.
"
      end

      operation 4275842 "getDocumentHandler"
	public return_type class_ref 658050 // XMLDocumentHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the registered document handler. "
      end

      operation 4275970 "setDTDHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dtdHandler" type class_ref 658178 // XMLDTDHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the DTD handler.

@param dtdHandler The DTD handler.
"
      end

      operation 4276098 "getDTDHandler"
	public return_type class_ref 658178 // XMLDTDHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the registered DTD handler. "
      end

      operation 4276226 "setDTDContentModelHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dtdContentModelHandler" type class_ref 658306 // XMLDTDContentModelHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the DTD content model handler.

@param dtdContentModelHandler The DTD content model handler.
"
      end

      operation 4276354 "getDTDContentModelHandler"
	public return_type class_ref 658306 // XMLDTDContentModelHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the registered DTD content model handler. "
      end

      operation 4276482 "setEntityResolver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "entityResolver" type class_ref 658434 // XMLEntityResolver
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " other settings

Sets the entity resolver.

@param entityResolver The new entity resolver.
"
      end

      operation 4276610 "getEntityResolver"
	public return_type class_ref 658434 // XMLEntityResolver
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the registered entity resolver. "
      end

      operation 4276738 "setLocale"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	nexceptions 1
	  exception class_ref 657794 // XNIException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the locale to use for messages.

@param locale The locale object to use for localization of messages.

@exception XNIException Thrown if the parser does not support the
                        specified locale.
"
      end

      operation 4276866 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the locale. "
      end
    end

    class 657666 "XMLInputSource"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents an input source for an XML document. The
basic properties of an input source are the following:
<ul>
 <li>public identifier</li>
 <li>system identifier</li>
 <li>byte stream or character stream</li>
 <li>
</ul>

@author Andy Clark, IBM

"
      classrelation 2080002 // fPublicId (<unidirectional association>)
	relation 2080002 --->
	  a role_name "fPublicId" protected
	    comment " Data

 Public identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2080002 // fPublicId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2080130 // fSystemId (<unidirectional association>)
	relation 2080130 --->
	  a role_name "fSystemId" protected
	    comment " System identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2080130 // fSystemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2080258 // fBaseSystemId (<unidirectional association>)
	relation 2080258 --->
	  a role_name "fBaseSystemId" protected
	    comment " Base system identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2080258 // fBaseSystemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2080386 // fByteStream (<unidirectional association>)
	relation 2080386 --->
	  a role_name "fByteStream" protected
	    comment " Byte stream. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2080386 // fByteStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 2080514 // fCharStream (<unidirectional association>)
	relation 2080514 --->
	  a role_name "fCharStream" protected
	    comment " Character stream. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2080514 // fCharStream (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      classrelation 2080642 // fEncoding (<unidirectional association>)
	relation 2080642 --->
	  a role_name "fEncoding" protected
	    comment " Encoding. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2080642 // fEncoding (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 4846210 "XMLInputSource"
	public explicit_return_type ""
	nparams 3
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "baseSystemId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs an input source from just the public and system
identifiers, leaving resolution of the entity and opening of
the input stream up to the caller.

@param publicId     The public identifier, if known.
@param systemId     The system identifier. This value should
                    always be set, if possible, and can be
                    relative or absolute. If the system identifier
                    is relative, then the base system identifier
                    should be set.
@param baseSystemId The base system identifier. This value should
                    always be set to the fully expanded URI of the
                    base system identifier, if possible.
"
      end

      operation 4846338 "XMLInputSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "resourceIdentifier" type class_ref 661634 // XMLResourceIdentifier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(String,String,String)

Constructs an input source from a XMLResourceIdentifier
object, leaving resolution of the entity and opening of
the input stream up to the caller.

@param resourceIdentifier    the XMLResourceIdentifier containing the information
"
      end

      operation 4846466 "XMLInputSource"
	public explicit_return_type ""
	nparams 5
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "baseSystemId" type class_ref 128130 // String
	  param inout name "byteStream" type class_ref 146434 // InputStream
	  param inout name "encoding" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(XMLResourceIdentifier)

Constructs an input source from a byte stream.

@param publicId     The public identifier, if known.
@param systemId     The system identifier. This value should
                    always be set, if possible, and can be
                    relative or absolute. If the system identifier
                    is relative, then the base system identifier
                    should be set.
@param baseSystemId The base system identifier. This value should
                    always be set to the fully expanded URI of the
                    base system identifier, if possible.
@param byteStream   The byte stream.
@param encoding     The encoding of the byte stream, if known.
"
      end

      operation 4846594 "XMLInputSource"
	public explicit_return_type ""
	nparams 5
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "baseSystemId" type class_ref 128130 // String
	  param inout name "charStream" type class_ref 407298 // Reader
	  param inout name "encoding" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(String,String,String,InputStream,String)

Constructs an input source from a character stream.

@param publicId     The public identifier, if known.
@param systemId     The system identifier. This value should
                    always be set, if possible, and can be
                    relative or absolute. If the system identifier
                    is relative, then the base system identifier
                    should be set.
@param baseSystemId The base system identifier. This value should
                    always be set to the fully expanded URI of the
                    base system identifier, if possible.
@param charStream   The character stream.
@param encoding     The original encoding of the byte stream
                    used by the reader, if known.
"
      end

      operation 4846722 "setPublicId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "publicId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(String,String,String,Reader,String)

 Public methods


Sets the public identifier.

@param publicId The new public identifier.
"
      end

      operation 4846850 "getPublicId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setPublicId(String)
 Returns the public identifier. "
      end

      operation 4846978 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getPublicId():String

Sets the system identifier.

@param systemId The new system identifier.
"
      end

      operation 4847106 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setSystemId(String)
 Returns the system identifier. "
      end

      operation 4847234 "setBaseSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "baseSystemId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getSystemId():String

Sets the base system identifier.

@param baseSystemId The new base system identifier.
"
      end

      operation 4847362 "getBaseSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setBaseSystemId(String)
 Returns the base system identifier. "
      end

      operation 4847490 "setByteStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "byteStream" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getBaseSystemId():String

Sets the byte stream. If the byte stream is not already opened
when this object is instantiated, then the code that opens the
stream should also set the byte stream on this object. Also, if
the encoding is auto-detected, then the encoding should also be
set on this object.

@param byteStream The new byte stream.
"
      end

      operation 4847618 "getByteStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setByteStream(InputSource)
 Returns the byte stream. "
      end

      operation 4847746 "setCharacterStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "charStream" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getByteStream():InputStream

Sets the character stream. If the character stream is not already
opened when this object is instantiated, then the code that opens
the stream should also set the character stream on this object.
Also, the encoding of the byte stream used by the reader should
also be set on this object, if known.

@param charStream The new character stream.

@see #setEncoding
"
      end

      operation 4847874 "getCharacterStream"
	public return_type class_ref 407298 // Reader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setCharacterStream(Reader)
 Returns the character stream. "
      end

      operation 4848002 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "encoding" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCharacterStream():Reader

Sets the encoding of the stream.

@param encoding The new encoding.
"
      end

      operation 4848130 "getEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setEncoding(String)
 Returns the encoding of the stream, or null if not known. "
      end
    end

    class 657922 "XMLErrorHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface for handling errors. If the application is interested
in error notifications, then it can register an error handler object
that implements this interface with the parser configuration.

@see XMLParserConfiguration

@author Andy Clark, IBM

"
      operation 4831106 "warning"
	public explicit_return_type "void"
	nparams 3
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "key" type class_ref 128130 // String
	  param inout name "exception" type class_ref 659842 // XMLParseException
	nexceptions 1
	  exception class_ref 657794 // XNIException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLErrorHandler methods


Reports a warning. Warnings are non-fatal and can be safely ignored
by most applications.

@param domain    The domain of the warning. The domain can be any
                 string but is suggested to be a valid URI. The
                 domain can be used to conveniently specify a web
                 site location of the relevent specification or
                 document pertaining to this warning.
@param key       The warning key. This key can be any string and
                 is implementation dependent.
@param exception Exception.

@throws XNIException Thrown to signal that the parser should stop
                     parsing the document.
"
      end

      operation 4831234 "error"
	public explicit_return_type "void"
	nparams 3
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "key" type class_ref 128130 // String
	  param inout name "exception" type class_ref 659842 // XMLParseException
	nexceptions 1
	  exception class_ref 657794 // XNIException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports an error. Errors are non-fatal and usually signify that the
document is invalid with respect to its grammar(s).

@param domain    The domain of the error. The domain can be any
                 string but is suggested to be a valid URI. The
                 domain can be used to conveniently specify a web
                 site location of the relevent specification or
                 document pertaining to this error.
@param key       The error key. This key can be any string and
                 is implementation dependent.
@param exception Exception.

@throws XNIException Thrown to signal that the parser should stop
                     parsing the document.
"
      end

      operation 4831362 "fatalError"
	public explicit_return_type "void"
	nparams 3
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "key" type class_ref 128130 // String
	  param inout name "exception" type class_ref 659842 // XMLParseException
	nexceptions 1
	  exception class_ref 657794 // XNIException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report a fatal error. Fatal errors usually occur when the document
is not well-formed and signifies that the parser cannot continue
normal operation.
<p>
<strong>Note:</strong> The error handler should <em>always</em>
throw an <code>XNIException</code> from this method. This exception
can either be the same exception that is passed as a parameter to
the method or a new XNI exception object. If the registered error
handler fails to throw an exception, the continuing operation of
the parser is undetermined.

@param domain    The domain of the fatal error. The domain can be
                 any string but is suggested to be a valid URI. The
                 domain can be used to conveniently specify a web
                 site location of the relevent specification or
                 document pertaining to this fatal error.
@param key       The fatal error key. This key can be any string
                 and is implementation dependent.
@param exception Exception.

@throws XNIException Thrown to signal that the parser should stop
                     parsing the document.
"
      end
    end

    class 658434 "XMLEntityResolver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is used to resolve external parsed entities. The
application can register an object that implements this interface
with the parser configuration in order to intercept entities and
resolve them explicitly. If the registered entity resolver cannot
resolve the entity, it should return <code>null</code> so that the
parser will try to resolve the entity using a default mechanism.

@see XMLParserConfiguration

@author Andy Clark, IBM

"
      operation 4341890 "resolveEntity"
	public return_type class_ref 657666 // XMLInputSource
	nparams 1
	  param inout name "resourceIdentifier" type class_ref 661634 // XMLResourceIdentifier
	nexceptions 2
	  exception class_ref 657794 // XNIException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLEntityResolver methods


Resolves an external parsed entity. If the entity cannot be
resolved, this method should return null.

@param resourceIdentifier location of the XML resource to resolve

@throws XNIException Thrown on general error.
@throws IOException  Thrown if resolved entity stream cannot be
                     opened or some other i/o error occurs.
@see com.sun.org.apache.xerces.internal.xni.XMLResourceIdentifier
"
      end
    end

    class 659202 "XMLComponent"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The component interface defines methods that must be implemented
by components in a parser configuration. The component methods allow
the component manager to initialize the component state and notify
the component when feature and property values change.

@see XMLComponentManager

@author Andy Clark, IBM

"
      operation 4343938 "reset"
	public explicit_return_type "void"
	nparams 1
	  param inout name "componentManager" type class_ref 657026 // XMLComponentManager
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLComponent methods


Resets the component. The component can query the component manager
about any features and properties that affect the operation of the
component.

@param componentManager The component manager.

@throws XNIException Thrown by component on initialization error.
"
      end

      operation 4344066 "getRecognizedFeatures"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of feature identifiers that are recognized by
this component. This method may return null if no features
are recognized by this component.
"
      end

      operation 4344194 "setFeature"
	public explicit_return_type "void"
	nparams 2
	  param inout name "featureId" type class_ref 128130 // String
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the state of a feature. This method is called by the component
manager any time after reset when a feature changes state.
<p>
<strong>Note:</strong> Components should silently ignore features
that do not affect the operation of the component.

@param featureId The feature identifier.
@param state     The state of the feature.

@throws XMLConfigurationException Thrown for configuration error.
                                  In general, components should
                                  only throw this exception if
                                  it is <strong>really</strong>
                                  a critical error.
"
      end

      operation 4344322 "getRecognizedProperties"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of property identifiers that are recognized by
this component. This method may return null if no properties
are recognized by this component.
"
      end

      operation 4344450 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "propertyId" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 657154 // XMLConfigurationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a property. This method is called by the component
manager any time after reset when a property changes value.
<p>
<strong>Note:</strong> Components should silently ignore properties
that do not affect the operation of the component.

@param propertyId The property identifier.
@param value      The value of the property.

@throws XMLConfigurationException Thrown for configuration error.
                                  In general, components should
                                  only throw this exception if
                                  it is <strong>really</strong>
                                  a critical error.
"
      end

      operation 4344578 "getFeatureDefault"
	public return_type class_ref 315010 // Boolean
	nparams 1
	  param inout name "featureId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default state for a feature, or null if this
component does not want to report a default value for this
feature.

@param featureId The feature identifier.

@since Xerces 2.2.0
"
      end

      operation 4344706 "getPropertyDefault"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "propertyId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default state for a property, or null if this
component does not want to report a default value for this
property.

@param propertyId The property identifier.

@since Xerces 2.2.0
"
      end
    end

    class 659842 "XMLParseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A parsing exception. This exception is different from the standard
XNI exception in that it stores the location in the document (or
its entities) where the exception occurred.

@author Andy Clark, IBM

"
      classrelation 2228354 // <generalisation>
	relation 2228354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2228354 // <generalisation>
	  b parent class_ref 657794 // XNIException
      end

      attribute 1126018 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1732959359448549967L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization version. 
"
      end

      classrelation 2228482 // fPublicId (<unidirectional association>)
	relation 2228482 --->
	  a role_name "fPublicId" protected
	    comment " Data

 Public identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2228482 // fPublicId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2228610 // fLiteralSystemId (<unidirectional association>)
	relation 2228610 --->
	  a role_name "fLiteralSystemId" protected
	    comment " literal System identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2228610 // fLiteralSystemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2228738 // fExpandedSystemId (<unidirectional association>)
	relation 2228738 --->
	  a role_name "fExpandedSystemId" protected
	    comment " expanded System identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2228738 // fExpandedSystemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2228866 // fBaseSystemId (<unidirectional association>)
	relation 2228866 --->
	  a role_name "fBaseSystemId" protected
	    comment " Base system identifier. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2228866 // fBaseSystemId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1126146 "fLineNumber"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Line number. 
"
      end

      attribute 1126274 "fColumnNumber"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Column number. 
"
      end

      attribute 1126402 "fCharacterOffset"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Character offset. 
"
      end

      operation 5163906 "XMLParseException"
	public explicit_return_type ""
	nparams 2
	  param inout name "locator" type class_ref 660866 // XMLLocator
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors

 Constructs a parse exception. "
      end

      operation 5164034 "XMLParseException"
	public explicit_return_type ""
	nparams 3
	  param inout name "locator" type class_ref 660866 // XMLLocator
	  param inout name "message" type class_ref 128130 // String
	  param inout name "exception" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(XMLLocator,String)
 Constructs a parse exception. "
      end

      operation 5164162 "getPublicId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <init>(XMLLocator,String,Exception)

 Public methods

 Returns the public identifier. "
      end

      operation 5164290 "getExpandedSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getPublicId():String
 Returns the expanded system identifier. "
      end

      operation 5164418 "getLiteralSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getExpandedSystemId():String
 Returns the literal system identifier. "
      end

      operation 5164546 "getBaseSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getLiteralSystemId():String
 Returns the base system identifier. "
      end

      operation 5164674 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getBaseSystemId():String
 Returns the line number. "
      end

      operation 5164802 "getColumnNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getLineNumber():int
 Returns the row number. "
      end

      operation 5164930 "getCharacterOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getRowNumber():int
 Returns the character offset. "
      end

      operation 5165058 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCharacterOffset():int

 Object methods

 Returns a string representation of this object. "
      end
    end

    class 661762 "XMLDocumentSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines a document source. In other words, any object that implements
this interface is able to emit document \"events\" to the registered
document handler. These events could be produced by parsing an XML
document, could be generated from some other source, or could be
created programmatically. This interface does not say <em>how</em>
the events are created, only that the implementor is able to emit
them.

@author Andy Clark, IBM

"
      operation 4343298 "setDocumentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 658050 // XMLDocumentHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLDocumentSource methods

 Sets the document handler. "
      end

      operation 4343426 "getDocumentHandler"
	public return_type class_ref 658050 // XMLDocumentHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the document handler "
      end
    end

    class 666754 "XMLDocumentFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines a document filter that acts as both a receiver and an emitter
of document events.

@author Andy Clark, IBM

"
      classrelation 1843330 // <generalisation>
	relation 1843330 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1843330 // <generalisation>
	  b parent class_ref 658050 // XMLDocumentHandler
      end

      classrelation 1843458 // <generalisation>
	relation 1843458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1843458 // <generalisation>
	  b parent class_ref 661762 // XMLDocumentSource
      end
    end

    class 668290 "XMLDocumentScanner"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a generic document scanner. This interface
allows a scanner to be used interchangably in existing parser
configurations.
<p>
If the parser configuration uses a document scanner that implements
this interface, components should be able to query the scanner
instance from the component manager using the following property
identifier:
<blockquote>
 \"http://apache.org/xml/properties/internal/document-scanner\"
</blockquote>

@author Andy Clark, IBM

"
      classrelation 1848450 // <generalisation>
	relation 1848450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1848450 // <generalisation>
	  b parent class_ref 661762 // XMLDocumentSource
      end

      operation 4349442 "setInputSource"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inputSource" type class_ref 657666 // XMLInputSource
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLDocumentScanner methods


Sets the input source.

@param inputSource The input source.

@throws IOException Thrown on i/o error.
"
      end

      operation 4349570 "scanDocument"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "complete" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 657794 // XNIException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans a document.

@param complete True if the scanner should scan the document
                completely, pushing all events to the registered
                document handler. A value of false indicates that
                that the scanner should only scan the next portion
                of the document and return. A scanner instance is
                permitted to completely scan a document if it does
                not support this \"pull\" scanning model.

@return True if there is more to scan, false otherwise.
"
      end

      operation 4349698 "next"
	public explicit_return_type "int"
	nparams 0
	nexceptions 2
	  exception class_ref 657794 // XNIException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 669570 "XMLDTDScanner"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a generic DTD scanner. This interface
allows a scanner to be used interchangably in existing parser
configurations.
<p>
If the parser configuration uses a DTD scanner that implements
this interface, components should be able to query the scanner
instance from the component manager using the following property
identifier:
<blockquote>
 \"http://apache.org/xml/properties/internal/dtd-scanner\"
</blockquote>

@author Andy Clark, IBM

"
      classrelation 1858562 // <generalisation>
	relation 1858562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1858562 // <generalisation>
	  b parent class_ref 670722 // XMLDTDSource
      end

      classrelation 1858690 // <generalisation>
	relation 1858690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1858690 // <generalisation>
	  b parent class_ref 670850 // XMLDTDContentModelSource
      end

      operation 4367618 "setInputSource"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inputSource" type class_ref 657666 // XMLInputSource
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLDTDScanner methods


Sets the input source.

@param inputSource The input source or null.

@throws IOException Thrown on i/o error.
"
      end

      operation 4367746 "scanDTDInternalSubset"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "complete" explicit_type "boolean"
	  param inout name "standalone" explicit_type "boolean"
	  param inout name "hasExternalSubset" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 657794 // XNIException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the internal subset of the document.

@param complete True if the scanner should scan the document
                completely, pushing all events to the registered
                document handler. A value of false indicates that
                that the scanner should only scan the next portion
                of the document and return. A scanner instance is
                permitted to completely scan a document if it does
                not support this \"pull\" scanning model.
@param standalone True if the document was specified as standalone.
                  This value is important for verifying certain
                  well-formedness constraints.
@param hasExternalSubset True if the document has an external DTD.
                         This allows the scanner to properly notify
                         the handler of the end of the DTD in the
                         absence of an external subset.

@return True if there is more to scan, false otherwise.
"
      end

      operation 4367874 "scanDTDExternalSubset"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "complete" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 657794 // XNIException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans the external subset of the document.

@param complete True if the scanner should scan the document
                completely, pushing all events to the registered
                document handler. A value of false indicates that
                that the scanner should only scan the next portion
                of the document and return. A scanner instance is
                permitted to completely scan a document if it does
                not support this \"pull\" scanning model.

@return True if there is more to scan, false otherwise.
"
      end

      operation 4368002 "skipDTD"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "supportDTD" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip the DTD if javax.xml.stream.supportDTD is false.
@param supportDTD The value of the property javax.xml.stream.supportDTD.
@return true if DTD is skipped, false otherwise.
@throws java.io.IOException if i/o error occurs
"
      end

      operation 4368130 "setLimitAnalyzer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "limitAnalyzer" type class_ref 667906 // XMLLimitAnalyzer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 670722 "XMLDTDSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines a DTD source. In other words, any object that implements
this interface is able to emit DTD \"events\" to the registered
DTD handler. These events could be produced by parsing an XML
document's internal or external subset, could be generated from
some other source, or could be created programmatically. This
interface does not say <em>how</em> the events are created, only
that the implementor is able to emit them.

@author Andy Clark, IBM

"
      operation 4367106 "setDTDHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 658178 // XMLDTDHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLDTDSource methods

 Sets the DTD handler. "
      end

      operation 4367234 "getDTDHandler"
	public return_type class_ref 658178 // XMLDTDHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the DTD handler. "
      end
    end

    class 670850 "XMLDTDContentModelSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines a DTD content model source. In other words, any object that
implements this interface is able to emit DTD content model \"events\"
to the registered DTD content model handler. These events could be
produced by parsing an XML document's internal or external subset,
could be generated from some other source, or could be created
programmatically. This interface does not say <em>how</em> the events
are created, only that the implementor is able to emit them.

@author Andy Clark, IBM

"
      operation 4367362 "setDTDContentModelHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 658306 // XMLDTDContentModelHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLDTDContentModelSource methods

 Sets the DTD content model handler. "
      end

      operation 4367490 "getDTDContentModelHandler"
	public return_type class_ref 658306 // XMLDTDContentModelHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the DTD content model handler. "
      end
    end

    class 676866 "XMLDTDFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines a DTD filter that acts as both a receiver and an emitter
of DTD events.

@author Andy Clark, IBM

"
      classrelation 1883010 // <generalisation>
	relation 1883010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1883010 // <generalisation>
	  b parent class_ref 658178 // XMLDTDHandler
      end

      classrelation 1883138 // <generalisation>
	relation 1883138 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1883138 // <generalisation>
	  b parent class_ref 670722 // XMLDTDSource
      end
    end

    class 676994 "XMLDTDContentModelFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines a DTD content model filter that acts as both a receiver and
an emitter of DTD content model events.

@author Andy Clark, IBM

"
      classrelation 1883394 // <generalisation>
	relation 1883394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1883394 // <generalisation>
	  b parent class_ref 658306 // XMLDTDContentModelHandler
      end

      classrelation 1883522 // <generalisation>
	relation 1883522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1883522 // <generalisation>
	  b parent class_ref 670850 // XMLDTDContentModelSource
      end
    end

    class 712962 "XMLPullParserConfiguration"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a parser configuration that can be used as the
configuration for a \"pull\" parser. A pull parser allows the
application to drive the parser instead of having document
information events \"pushed\" to the registered handlers.
<p>
A pull parser using this type of configuration first calls
the <code>setInputSource</code> method. After the input
source is set, the pull parser repeatedly calls the
<code>parse(boolean):boolean</code> method. This method
returns a value of true if there is more to parse in the
document.
<p>
Calling the <code>parse(XMLInputSource)</code> is equivalent
to setting the input source and calling the
<code>parse(boolean):boolean</code> method with a \"complete\"
value of <code>true</code>.

@author Andy Clark, IBM

"
      classrelation 2043266 // <generalisation>
	relation 2043266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2043266 // <generalisation>
	  b parent class_ref 657538 // XMLParserConfiguration
      end

      operation 4793986 "setInputSource"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inputSource" type class_ref 657666 // XMLInputSource
	nexceptions 2
	  exception class_ref 657154 // XMLConfigurationException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " XMLPullParserConfiguration methods

 parsing

Sets the input source for the document to parse.

@param inputSource The document's input source.

@exception XMLConfigurationException Thrown if there is a
                       configuration error when initializing the
                       parser.
@exception IOException Thrown on I/O error.

@see #parse(boolean)
"
      end

      operation 4794114 "parse"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "complete" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 657794 // XNIException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the document in a pull parsing fashion.

@param complete True if the pull parser should parse the
                remaining document completely.

@return True if there is more document to parse.

@exception XNIException Any XNI exception, possibly wrapping
                        another exception.
@exception IOException  An IO exception from the parser, possibly
                        from a byte stream or character stream
                        supplied by the parser.

@see #setInputSource
"
      end

      operation 4794242 "cleanup"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the application decides to terminate parsing before the xml document
is fully parsed, the application should call this method to free any
resource allocated during parsing. For example, close all opened streams.
"
      end
    end
  end

  deploymentview 154370 "parser"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 454146 "XMLComponentManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.util.FeatureState;
import com.sun.org.apache.xerces.internal.util.PropertyState;
${definition}"
      associated_elems
	class_ref 657026 // XMLComponentManager
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2000-2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 454402 "XMLParserConfiguration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Locale;
import com.sun.org.apache.xerces.internal.xni.XMLDocumentHandler;
import com.sun.org.apache.xerces.internal.xni.XMLDTDHandler;
import com.sun.org.apache.xerces.internal.xni.XMLDTDContentModelHandler;
import com.sun.org.apache.xerces.internal.xni.XNIException;
${definition}"
      associated_elems
	class_ref 657538 // XMLParserConfiguration
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 460034 "XMLEntityResolver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import com.sun.org.apache.xerces.internal.xni.XNIException;
import com.sun.org.apache.xerces.internal.xni.XMLResourceIdentifier;
${definition}"
      associated_elems
	class_ref 658434 // XMLEntityResolver
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 460418 "XMLDocumentSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLDocumentHandler;
${definition}"
      associated_elems
	class_ref 661762 // XMLDocumentSource
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 460546 "XMLDocumentFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLDocumentHandler;
${definition}"
      associated_elems
	class_ref 666754 // XMLDocumentFilter
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 460930 "XMLComponent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 659202 // XMLComponent
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2000-2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 461186 "XMLDocumentScanner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import com.sun.org.apache.xerces.internal.xni.XNIException;
${definition}"
      associated_elems
	class_ref 668290 // XMLDocumentScanner
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 461826 "XMLDTDSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLDTDHandler;
${definition}"
      associated_elems
	class_ref 670722 // XMLDTDSource
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 461954 "XMLDTDContentModelSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLDTDContentModelHandler;
${definition}"
      associated_elems
	class_ref 670850 // XMLDTDContentModelSource
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


The Apache Software License, Version 1.1


Copyright (c) 2001, 2002 The Apache Software Foundation.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

3. The end-user documentation included with the redistribution,
   if any, must include the following acknowledgment:
      \"This product includes software developed by the
       Apache Software Foundation (http://www.apache.org/).\"
   Alternately, this acknowledgment may appear in the software itself,
   if and wherever such third-party acknowledgments normally appear.

4. The names \"Xerces\" and \"Apache Software Foundation\" must
   not be used to endorse or promote products derived from this
   software without prior written permission. For written
   permission, please contact apache@apache.org.

5. Products derived from this software may not be called \"Apache\",
   nor may \"Apache\" appear in their name, without prior written
   permission of the Apache Software Foundation.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation and was
originally based on software copyright (c) 1999, International
Business Machines, Inc., http://www.apache.org.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.
"
    end

    artifact 462082 "XMLDTDScanner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.utils.XMLLimitAnalyzer;
import java.io.IOException;
import com.sun.org.apache.xerces.internal.xni.XNIException;
${definition}"
      associated_elems
	class_ref 669570 // XMLDTDScanner
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 465410 "XMLDTDFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLDTDHandler;
${definition}"
      associated_elems
	class_ref 676866 // XMLDTDFilter
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 465538 "XMLDTDContentModelFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLDTDContentModelHandler;
${definition}"
      associated_elems
	class_ref 676994 // XMLDTDContentModelFilter
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 494210 "XMLPullParserConfiguration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import com.sun.org.apache.xerces.internal.xni.XNIException;
${definition}"
      associated_elems
	class_ref 712962 // XMLPullParserConfiguration
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 496130 "XMLErrorHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XNIException;
${definition}"
      associated_elems
	class_ref 657922 // XMLErrorHandler
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 498562 "XMLInputSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLResourceIdentifier;
import java.io.InputStream;
import java.io.Reader;
${definition}"
      associated_elems
	class_ref 657666 // XMLInputSource
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2000-2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 518914 "XMLConfigurationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.util.Status;
import com.sun.org.apache.xerces.internal.xni.XNIException;
${definition}"
      associated_elems
	class_ref 657154 // XMLConfigurationException
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 519042 "XMLParseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xerces.internal.xni.XMLLocator;
import com.sun.org.apache.xerces.internal.xni.XNIException;
${definition}"
      associated_elems
	class_ref 659842 // XMLParseException
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 2001, 2002,2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
