class IsoChronology
!!!8477954.java!!!	getId() : String
        return "ISO";
!!!8478082.java!!!	getCalendarType() : String
        return "iso8601";
!!!8478210.java!!!	date(inout era : Era, in yearOfEra : int, in month : int, in dayOfMonth : int) : LocalDate
        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);
!!!8478338.java!!!	date(in prolepticYear : int, in month : int, in dayOfMonth : int) : LocalDate
        return LocalDate.of(prolepticYear, month, dayOfMonth);
!!!8478466.java!!!	dateYearDay(inout era : Era, in yearOfEra : int, in dayOfYear : int) : LocalDate
        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);
!!!8478594.java!!!	dateYearDay(in prolepticYear : int, in dayOfYear : int) : LocalDate
        return LocalDate.ofYearDay(prolepticYear, dayOfYear);
!!!8478722.java!!!	dateEpochDay(in epochDay : long) : LocalDate
        return LocalDate.ofEpochDay(epochDay);
!!!8478850.java!!!	date(inout temporal : TemporalAccessor) : LocalDate
        return LocalDate.from(temporal);
!!!8478978.java!!!	localDateTime(inout temporal : TemporalAccessor) : LocalDateTime
        return LocalDateTime.from(temporal);
!!!8479106.java!!!	zonedDateTime(inout temporal : TemporalAccessor) : ZonedDateTime
        return ZonedDateTime.from(temporal);
!!!8479234.java!!!	zonedDateTime(inout instant : Instant, inout zone : ZoneId) : ZonedDateTime
        return ZonedDateTime.ofInstant(instant, zone);
!!!8479362.java!!!	dateNow() : LocalDate
        return dateNow(Clock.systemDefaultZone());
!!!8479490.java!!!	dateNow(inout zone : ZoneId) : LocalDate
        return dateNow(Clock.system(zone));
!!!8479618.java!!!	dateNow(inout clock : Clock) : LocalDate
        Objects.requireNonNull(clock, "clock");
        return date(LocalDate.now(clock));
!!!8479746.java!!!	isLeapYear(in prolepticYear : long) : boolean
        return ((prolepticYear & 3) == 0) && ((prolepticYear % 100) != 0 || (prolepticYear % 400) == 0);
!!!8479874.java!!!	prolepticYear(inout era : Era, in yearOfEra : int) : int
        if (era instanceof IsoEra == false) {
            throw new ClassCastException("Era must be IsoEra");
        }
        return (era == IsoEra.CE ? yearOfEra : 1 - yearOfEra);
!!!8480002.java!!!	eraOf(in eraValue : int) : IsoEra
        return IsoEra.of(eraValue);
!!!8480130.java!!!	eras() : List
        return Arrays.<Era>asList(IsoEra.values());
!!!8480258.java!!!	resolveDate(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : LocalDate
        return (LocalDate) super.resolveDate(fieldValues, resolverStyle);
!!!8480386.java!!!	resolveProlepticMonth(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : void
        Long pMonth = fieldValues.remove(PROLEPTIC_MONTH);
        if (pMonth != null) {
            if (resolverStyle != ResolverStyle.LENIENT) {
                PROLEPTIC_MONTH.checkValidValue(pMonth);
            }
            addFieldValue(fieldValues, MONTH_OF_YEAR, Math.floorMod(pMonth, 12) + 1);
            addFieldValue(fieldValues, YEAR, Math.floorDiv(pMonth, 12));
        }
!!!8480514.java!!!	resolveYearOfEra(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : LocalDate
        Long yoeLong = fieldValues.remove(YEAR_OF_ERA);
        if (yoeLong != null) {
            if (resolverStyle != ResolverStyle.LENIENT) {
                YEAR_OF_ERA.checkValidValue(yoeLong);
            }
            Long era = fieldValues.remove(ERA);
            if (era == null) {
                Long year = fieldValues.get(YEAR);
                if (resolverStyle == ResolverStyle.STRICT) {
                    // do not invent era if strict, but do cross-check with year
                    if (year != null) {
                        addFieldValue(fieldValues, YEAR, (year > 0 ? yoeLong: Math.subtractExact(1, yoeLong)));
                    } else {
                        // reinstate the field removed earlier, no cross-check issues
                        fieldValues.put(YEAR_OF_ERA, yoeLong);
                    }
                } else {
                    // invent era
                    addFieldValue(fieldValues, YEAR, (year == null || year > 0 ? yoeLong: Math.subtractExact(1, yoeLong)));
                }
            } else if (era.longValue() == 1L) {
                addFieldValue(fieldValues, YEAR, yoeLong);
            } else if (era.longValue() == 0L) {
                addFieldValue(fieldValues, YEAR, Math.subtractExact(1, yoeLong));
            } else {
                throw new DateTimeException("Invalid value for era: " + era);
            }
        } else if (fieldValues.containsKey(ERA)) {
            ERA.checkValidValue(fieldValues.get(ERA));  // always validated
        }
        return null;
!!!8480642.java!!!	resolveYMD(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : LocalDate
        int y = YEAR.checkValidIntValue(fieldValues.remove(YEAR));
        if (resolverStyle == ResolverStyle.LENIENT) {
            long months = Math.subtractExact(fieldValues.remove(MONTH_OF_YEAR), 1);
            long days = Math.subtractExact(fieldValues.remove(DAY_OF_MONTH), 1);
            return LocalDate.of(y, 1, 1).plusMonths(months).plusDays(days);
        }
        int moy = MONTH_OF_YEAR.checkValidIntValue(fieldValues.remove(MONTH_OF_YEAR));
        int dom = DAY_OF_MONTH.checkValidIntValue(fieldValues.remove(DAY_OF_MONTH));
        if (resolverStyle == ResolverStyle.SMART) {  // previous valid
            if (moy == 4 || moy == 6 || moy == 9 || moy == 11) {
                dom = Math.min(dom, 30);
            } else if (moy == 2) {
                dom = Math.min(dom, Month.FEBRUARY.length(Year.isLeap(y)));

            }
        }
        return LocalDate.of(y, moy, dom);
!!!8480770.java!!!	range(inout field : ChronoField) : ValueRange
        return field.range();
!!!8480898.java!!!	period(in years : int, in months : int, in days : int) : Period
        return Period.of(years, months, days);
!!!8481026.java!!!	writeReplace() : Object
        return super.writeReplace();
!!!8481154.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
