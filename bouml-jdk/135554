format 222
"charset" // jdk1.8::java::nio::charset
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/nio/charset/"
  java_package "java.nio.charset"
  classview 133378 "charset"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 167554 "CharsetDecoder"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An engine that can transform a sequence of bytes in a specific charset into a sequence of
sixteen-bit Unicode characters.

<a name=\"steps\"></a>

<p> The input byte sequence is provided in a byte buffer or a series
of such buffers.  The output character sequence is written to a character buffer
or a series of such buffers.  A decoder should always be used by making
the following sequence of method invocations, hereinafter referred to as a
<i>decoding operation</i>:

<ol>

  <li><p> Reset the decoder via the {@link #reset reset} method, unless it
  has not been used before; </p></li>

  <li><p> Invoke the {@link #decode decode} method zero or more times, as
  long as additional input may be available, passing <tt>false</tt> for the
  <tt>endOfInput</tt> argument and filling the input buffer and flushing the
  output buffer between invocations; </p></li>

  <li><p> Invoke the {@link #decode decode} method one final time, passing
  <tt>true</tt> for the <tt>endOfInput</tt> argument; and then </p></li>

  <li><p> Invoke the {@link #flush flush} method so that the decoder can
  flush any internal state to the output buffer. </p></li>

</ol>

Each invocation of the {@link #decode decode} method will decode as many
bytes as possible from the input buffer, writing the resulting characters
to the output buffer.  The {@link #decode decode} method returns when more
input is required, when there is not enough room in the output buffer, or
when a decoding error has occurred.  In each case a {@link CoderResult}
object is returned to describe the reason for termination.  An invoker can
examine this object and fill the input buffer, flush the output buffer, or
attempt to recover from a decoding error, as appropriate, and try again.

<a name=\"ce\"></a>

<p> There are two general types of decoding errors.  If the input byte
sequence is not legal for this charset then the input is considered <i>malformed</i>.  If
the input byte sequence is legal but cannot be mapped to a valid
Unicode character then an <i>unmappable character</i> has been encountered.

<a name=\"cae\"></a>

<p> How a decoding error is handled depends upon the action requested for
that type of error, which is described by an instance of the {@link
CodingErrorAction} class.  The possible error actions are to {@linkplain
CodingErrorAction#IGNORE ignore} the erroneous input, {@linkplain
CodingErrorAction#REPORT report} the error to the invoker via
the returned {@link CoderResult} object, or {@linkplain CodingErrorAction#REPLACE
replace} the erroneous input with the current value of the
replacement string.  The replacement






has the initial value <tt>\"&#92;uFFFD\"</tt>;


its value may be changed via the {@link #replaceWith(java.lang.String)
replaceWith} method.

<p> The default action for malformed-input and unmappable-character errors
is to {@linkplain CodingErrorAction#REPORT report} them.  The
malformed-input error action may be changed via the {@link
#onMalformedInput(CodingErrorAction) onMalformedInput} method; the
unmappable-character action may be changed via the {@link
#onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter} method.

<p> This class is designed to handle many of the details of the decoding
process, including the implementation of error actions.  A decoder for a
specific charset, which is a concrete subclass of this class, need only
implement the abstract {@link #decodeLoop decodeLoop} method, which
encapsulates the basic decoding loop.  A subclass that maintains internal
state should, additionally, override the {@link #implFlush implFlush} and
{@link #implReset implReset} methods.

<p> Instances of this class are not safe for use by multiple concurrent
threads.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4

@see ByteBuffer
@see CharBuffer
@see Charset
@see CharsetEncoder
"
      classrelation 3304578 // charset (<unidirectional association>)
	relation 3304578 --->
	  a role_name "charset" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3304578 // charset (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      attribute 1813378 "averageCharsPerByte"
	const_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1813506 "maxCharsPerByte"
	const_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3304706 // replacement (<unidirectional association>)
	relation 3304706 --->
	  a role_name "replacement" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3304706 // replacement (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3304834 // malformedInputAction (<unidirectional association>)
	relation 3304834 --->
	  a role_name "malformedInputAction" init_value " CodingErrorAction.REPORT" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3304834 // malformedInputAction (<unidirectional association>)
	  b parent class_ref 992130 // CodingErrorAction
      end

      classrelation 3304962 // unmappableCharacterAction (<unidirectional association>)
	relation 3304962 --->
	  a role_name "unmappableCharacterAction" init_value " CodingErrorAction.REPORT" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3304962 // unmappableCharacterAction (<unidirectional association>)
	  b parent class_ref 992130 // CodingErrorAction
      end

      attribute 1813634 "ST_RESET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Internal states

"
      end

      attribute 1813762 "ST_CODING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1813890 "ST_END"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1814018 "ST_FLUSHED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1814146 "state"
	private explicit_type "int"
	init_value " ST_RESET"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3305090 // stateNames (<unidirectional association>)
	relation 3305090 --->
	  a role_name "stateNames" multiplicity "[]" init_value " { \"RESET\", \"CODING\", \"CODING_END\", \"FLUSHED\" }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3305090 // stateNames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7813250 "CharsetDecoder"
	private explicit_return_type ""
	nparams 4
	  param inout name "cs" type class_ref 853634 // Charset
	  param in name "averageCharsPerByte" explicit_type "float"
	  param in name "maxCharsPerByte" explicit_type "float"
	  param inout name "replacement" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new decoder.  The new decoder will have the given
chars-per-byte and replacement values.

@param  cs
        The charset that created this decoder

@param  averageCharsPerByte
        A positive float value indicating the expected number of
        characters that will be produced for each input byte

@param  maxCharsPerByte
        A positive float value indicating the maximum number of
        characters that will be produced for each input byte

@param  replacement
        The initial replacement; must not be <tt>null</tt>, must have
        non-zero length, must not be longer than maxCharsPerByte,
        and must be {@linkplain #isLegalReplacement legal}

@throws  IllegalArgumentException
         If the preconditions on the parameters do not hold
"
      end

      operation 7813378 "CharsetDecoder"
	protected explicit_return_type ""
	nparams 3
	  param inout name "cs" type class_ref 853634 // Charset
	  param in name "averageCharsPerByte" explicit_type "float"
	  param in name "maxCharsPerByte" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new decoder.  The new decoder will have the given
chars-per-byte values and its replacement will be the
string <tt>\"&#92;uFFFD\"</tt>.

@param  cs
        The charset that created this decoder

@param  averageCharsPerByte
        A positive float value indicating the expected number of
        characters that will be produced for each input byte

@param  maxCharsPerByte
        A positive float value indicating the maximum number of
        characters that will be produced for each input byte

@throws  IllegalArgumentException
         If the preconditions on the parameters do not hold
"
      end

      operation 7813506 "charset"
	public return_type class_ref 853634 // Charset
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the charset that created this decoder.

@return  This decoder's charset
"
      end

      operation 7813634 "replacement"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this decoder's replacement value.

@return  This decoder's current replacement,
         which is never <tt>null</tt> and is never empty
"
      end

      operation 7813762 "replaceWith"
	public return_type class_ref 167554 // CharsetDecoder
	nparams 1
	  param inout name "newReplacement" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this decoder's replacement value.

<p> This method invokes the {@link #implReplaceWith implReplaceWith}
method, passing the new replacement, after checking that the new
replacement is acceptable.  </p>

@param  newReplacement  The replacement value


        The new replacement; must not be <tt>null</tt>
        and must have non-zero length








@return  This decoder

@throws  IllegalArgumentException
         If the preconditions on the parameter do not hold
"
      end

      operation 7813890 "implReplaceWith"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newReplacement" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports a change to this decoder's replacement value.

<p> The default implementation of this method does nothing.  This method
should be overridden by decoders that require notification of changes to
the replacement.  </p>

@param  newReplacement    The replacement value
"
      end

      operation 7814018 "malformedInputAction"
	public return_type class_ref 992130 // CodingErrorAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this decoder's current action for malformed-input errors.

@return The current malformed-input action, which is never <tt>null</tt>
"
      end

      operation 7814146 "onMalformedInput"
	public return_type class_ref 167554 // CharsetDecoder
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this decoder's action for malformed-input errors.

<p> This method invokes the {@link #implOnMalformedInput
implOnMalformedInput} method, passing the new action.  </p>

@param  newAction  The new action; must not be <tt>null</tt>

@return  This decoder

@throws IllegalArgumentException
        If the precondition on the parameter does not hold
"
      end

      operation 7814274 "implOnMalformedInput"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports a change to this decoder's malformed-input action.

<p> The default implementation of this method does nothing.  This method
should be overridden by decoders that require notification of changes to
the malformed-input action.  </p>

@param  newAction  The new action
"
      end

      operation 7814402 "unmappableCharacterAction"
	public return_type class_ref 992130 // CodingErrorAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this decoder's current action for unmappable-character errors.

@return The current unmappable-character action, which is never
        <tt>null</tt>
"
      end

      operation 7814530 "onUnmappableCharacter"
	public return_type class_ref 167554 // CharsetDecoder
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this decoder's action for unmappable-character errors.

<p> This method invokes the {@link #implOnUnmappableCharacter
implOnUnmappableCharacter} method, passing the new action.  </p>

@param  newAction  The new action; must not be <tt>null</tt>

@return  This decoder

@throws IllegalArgumentException
        If the precondition on the parameter does not hold
"
      end

      operation 7814658 "implOnUnmappableCharacter"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports a change to this decoder's unmappable-character action.

<p> The default implementation of this method does nothing.  This method
should be overridden by decoders that require notification of changes to
the unmappable-character action.  </p>

@param  newAction  The new action
"
      end

      operation 7814786 "averageCharsPerByte"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the average number of characters that will be produced for each
byte of input.  This heuristic value may be used to estimate the size
of the output buffer required for a given input sequence.

@return  The average number of characters produced
         per byte of input
"
      end

      operation 7814914 "maxCharsPerByte"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of characters that will be produced for each
byte of input.  This value may be used to compute the worst-case size
of the output buffer required for a given input sequence.

@return  The maximum number of characters that will be produced per
         byte of input
"
      end

      operation 7815042 "decode"
	public return_type class_ref 992258 // CoderResult
	nparams 3
	  param inout name "in" type class_ref 149890 // ByteBuffer
	  param inout name "out" type class_ref 548482 // CharBuffer
	  param inout name "endOfInput" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes as many bytes as possible from the given input buffer,
writing the results to the given output buffer.

<p> The buffers are read from, and written to, starting at their current
positions.  At most {@link Buffer#remaining in.remaining()} bytes
will be read and at most {@link Buffer#remaining out.remaining()}
characters will be written.  The buffers' positions will be advanced to
reflect the bytes read and the characters written, but their marks and
limits will not be modified.

<p> In addition to reading bytes from the input buffer and writing
characters to the output buffer, this method returns a {@link CoderResult}
object to describe its reason for termination:

<ul>

  <li><p> {@link CoderResult#UNDERFLOW} indicates that as much of the
  input buffer as possible has been decoded.  If there is no further
  input then the invoker can proceed to the next step of the
  <a href=\"#steps\">decoding operation</a>.  Otherwise this method
  should be invoked again with further input.  </p></li>

  <li><p> {@link CoderResult#OVERFLOW} indicates that there is
  insufficient space in the output buffer to decode any more bytes.
  This method should be invoked again with an output buffer that has
  more {@linkplain Buffer#remaining remaining} characters. This is
  typically done by draining any decoded characters from the output
  buffer.  </p></li>

  <li><p> A {@linkplain CoderResult#malformedForLength
  malformed-input} result indicates that a malformed-input
  error has been detected.  The malformed bytes begin at the input
  buffer's (possibly incremented) position; the number of malformed
  bytes may be determined by invoking the result object's {@link
  CoderResult#length() length} method.  This case applies only if the
  {@linkplain #onMalformedInput malformed action} of this decoder
  is {@link CodingErrorAction#REPORT}; otherwise the malformed input
  will be ignored or replaced, as requested.  </p></li>

  <li><p> An {@linkplain CoderResult#unmappableForLength
  unmappable-character} result indicates that an
  unmappable-character error has been detected.  The bytes that
  decode the unmappable character begin at the input buffer's (possibly
  incremented) position; the number of such bytes may be determined
  by invoking the result object's {@link CoderResult#length() length}
  method.  This case applies only if the {@linkplain #onUnmappableCharacter
  unmappable action} of this decoder is {@link
  CodingErrorAction#REPORT}; otherwise the unmappable character will be
  ignored or replaced, as requested.  </p></li>

</ul>

In any case, if this method is to be reinvoked in the same decoding
operation then care should be taken to preserve any bytes remaining
in the input buffer so that they are available to the next invocation.

<p> The <tt>endOfInput</tt> parameter advises this method as to whether
the invoker can provide further input beyond that contained in the given
input buffer.  If there is a possibility of providing additional input
then the invoker should pass <tt>false</tt> for this parameter; if there
is no possibility of providing further input then the invoker should
pass <tt>true</tt>.  It is not erroneous, and in fact it is quite
common, to pass <tt>false</tt> in one invocation and later discover that
no further input was actually available.  It is critical, however, that
the final invocation of this method in a sequence of invocations always
pass <tt>true</tt> so that any remaining undecoded input will be treated
as being malformed.

<p> This method works by invoking the {@link #decodeLoop decodeLoop}
method, interpreting its results, handling error conditions, and
reinvoking it as necessary.  </p>


@param  in
        The input byte buffer

@param  out
        The output character buffer

@param  endOfInput
        <tt>true</tt> if, and only if, the invoker can provide no
        additional input bytes beyond those in the given buffer

@return  A coder-result object describing the reason for termination

@throws  IllegalStateException
         If a decoding operation is already in progress and the previous
         step was an invocation neither of the {@link #reset reset}
         method, nor of this method with a value of <tt>false</tt> for
         the <tt>endOfInput</tt> parameter, nor of this method with a
         value of <tt>true</tt> for the <tt>endOfInput</tt> parameter
         but a return value indicating an incomplete decoding operation

@throws  CoderMalfunctionError
         If an invocation of the decodeLoop method threw
         an unexpected exception
"
      end

      operation 7815170 "flush"
	public return_type class_ref 992258 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 548482 // CharBuffer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this decoder.

<p> Some decoders maintain internal state and may need to write some
final characters to the output buffer once the overall input sequence has
been read.

<p> Any additional output is written to the output buffer beginning at
its current position.  At most {@link Buffer#remaining out.remaining()}
characters will be written.  The buffer's position will be advanced
appropriately, but its mark and limit will not be modified.

<p> If this method completes successfully then it returns {@link
CoderResult#UNDERFLOW}.  If there is insufficient room in the output
buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens
then this method must be invoked again, with an output buffer that has
more room, in order to complete the current <a href=\"#steps\">decoding
operation</a>.

<p> If this decoder has already been flushed then invoking this method
has no effect.

<p> This method invokes the {@link #implFlush implFlush} method to
perform the actual flushing operation.  </p>

@param  out
        The output character buffer

@return  A coder-result object, either {@link CoderResult#UNDERFLOW} or
         {@link CoderResult#OVERFLOW}

@throws  IllegalStateException
         If the previous step of the current decoding operation was an
         invocation neither of the {@link #flush flush} method nor of
         the three-argument {@link
         #decode(ByteBuffer,CharBuffer,boolean) decode} method
         with a value of <tt>true</tt> for the <tt>endOfInput</tt>
         parameter
"
      end

      operation 7815298 "implFlush"
	protected return_type class_ref 992258 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 548482 // CharBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this decoder.

<p> The default implementation of this method does nothing, and always
returns {@link CoderResult#UNDERFLOW}.  This method should be overridden
by decoders that may need to write final characters to the output buffer
once the entire input sequence has been read. </p>

@param  out
        The output character buffer

@return  A coder-result object, either {@link CoderResult#UNDERFLOW} or
         {@link CoderResult#OVERFLOW}
"
      end

      operation 7815426 "reset"
	public return_type class_ref 167554 // CharsetDecoder
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this decoder, clearing any internal state.

<p> This method resets charset-independent state and also invokes the
{@link #implReset() implReset} method in order to perform any
charset-specific reset actions.  </p>

@return  This decoder

"
      end

      operation 7815554 "implReset"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this decoder, clearing any charset-specific internal state.

<p> The default implementation of this method does nothing.  This method
should be overridden by decoders that maintain internal state.  </p>
"
      end

      operation 7815682 "decodeLoop"
	abstract protected return_type class_ref 992258 // CoderResult
	nparams 2
	  param inout name "in" type class_ref 149890 // ByteBuffer
	  param inout name "out" type class_ref 548482 // CharBuffer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes one or more bytes into one or more characters.

<p> This method encapsulates the basic decoding loop, decoding as many
bytes as possible until it either runs out of input, runs out of room
in the output buffer, or encounters a decoding error.  This method is
invoked by the {@link #decode decode} method, which handles result
interpretation and error recovery.

<p> The buffers are read from, and written to, starting at their current
positions.  At most {@link Buffer#remaining in.remaining()} bytes
will be read, and at most {@link Buffer#remaining out.remaining()}
characters will be written.  The buffers' positions will be advanced to
reflect the bytes read and the characters written, but their marks and
limits will not be modified.

<p> This method returns a {@link CoderResult} object to describe its
reason for termination, in the same manner as the {@link #decode decode}
method.  Most implementations of this method will handle decoding errors
by returning an appropriate result object for interpretation by the
{@link #decode decode} method.  An optimized implementation may instead
examine the relevant error action and implement that action itself.

<p> An implementation of this method may perform arbitrary lookahead by
returning {@link CoderResult#UNDERFLOW} until it receives sufficient
input.  </p>

@param  in
        The input byte buffer

@param  out
        The output character buffer

@return  A coder-result object describing the reason for termination
"
      end

      operation 7815810 "decode"
	public return_type class_ref 548482 // CharBuffer
	nparams 1
	  param inout name "in" type class_ref 149890 // ByteBuffer
	nexceptions 1
	  exception class_ref 991746 // CharacterCodingException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method that decodes the remaining content of a single input
byte buffer into a newly-allocated character buffer.

<p> This method implements an entire <a href=\"#steps\">decoding
operation</a>; that is, it resets this decoder, then it decodes the
bytes in the given byte buffer, and finally it flushes this
decoder.  This method should therefore not be invoked if a decoding
operation is already in progress.  </p>

@param  in
        The input byte buffer

@return A newly-allocated character buffer containing the result of the
        decoding operation.  The buffer's position will be zero and its
        limit will follow the last character written.

@throws  IllegalStateException
         If a decoding operation is already in progress

@throws  MalformedInputException
         If the byte sequence starting at the input buffer's current
         position is not legal for this charset and the current malformed-input action
         is {@link CodingErrorAction#REPORT}

@throws  UnmappableCharacterException
         If the byte sequence starting at the input buffer's current
         position cannot be mapped to an equivalent character sequence and
         the current unmappable-character action is {@link
         CodingErrorAction#REPORT}
"
      end

      operation 7815938 "isAutoDetecting"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this decoder implements an auto-detecting charset.

<p> The default implementation of this method always returns
<tt>false</tt>; it should be overridden by auto-detecting decoders to
return <tt>true</tt>.  </p>

@return  <tt>true</tt> if, and only if, this decoder implements an
         auto-detecting charset
"
      end

      operation 7816066 "isCharsetDetected"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this decoder has yet detected a
charset&nbsp;&nbsp;<i>(optional operation)</i>.

<p> If this decoder implements an auto-detecting charset then at a
single point during a decoding operation this method may start returning
<tt>true</tt> to indicate that a specific charset has been detected in
the input byte sequence.  Once this occurs, the {@link #detectedCharset
detectedCharset} method may be invoked to retrieve the detected charset.

<p> That this method returns <tt>false</tt> does not imply that no bytes
have yet been decoded.  Some auto-detecting decoders are capable of
decoding some, or even all, of an input byte sequence without fixing on
a particular charset.

<p> The default implementation of this method always throws an {@link
UnsupportedOperationException}; it should be overridden by
auto-detecting decoders to return <tt>true</tt> once the input charset
has been determined.  </p>

@return  <tt>true</tt> if, and only if, this decoder has detected a
         specific charset

@throws  UnsupportedOperationException
         If this decoder does not implement an auto-detecting charset
"
      end

      operation 7816194 "detectedCharset"
	public return_type class_ref 853634 // Charset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the charset that was detected by this
decoder&nbsp;&nbsp;<i>(optional operation)</i>.

<p> If this decoder implements an auto-detecting charset then this
method returns the actual charset once it has been detected.  After that
point, this method returns the same value for the duration of the
current decoding operation.  If not enough input bytes have yet been
read to determine the actual charset then this method throws an {@link
IllegalStateException}.

<p> The default implementation of this method always throws an {@link
UnsupportedOperationException}; it should be overridden by
auto-detecting decoders to return the appropriate value.  </p>

@return  The charset detected by this auto-detecting decoder,
         or <tt>null</tt> if the charset has not yet been determined

@throws  IllegalStateException
         If insufficient bytes have been read to determine a charset

@throws  UnsupportedOperationException
         If this decoder does not implement an auto-detecting charset
"
      end

      operation 7816322 "throwIllegalStateException"
	private explicit_return_type "void"
	nparams 2
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 167682 "CharsetEncoder"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of
bytes in a specific charset.

<a name=\"steps\"></a>

<p> The input character sequence is provided in a character buffer or a series
of such buffers.  The output byte sequence is written to a byte buffer
or a series of such buffers.  An encoder should always be used by making
the following sequence of method invocations, hereinafter referred to as an
<i>encoding operation</i>:

<ol>

  <li><p> Reset the encoder via the {@link #reset reset} method, unless it
  has not been used before; </p></li>

  <li><p> Invoke the {@link #encode encode} method zero or more times, as
  long as additional input may be available, passing <tt>false</tt> for the
  <tt>endOfInput</tt> argument and filling the input buffer and flushing the
  output buffer between invocations; </p></li>

  <li><p> Invoke the {@link #encode encode} method one final time, passing
  <tt>true</tt> for the <tt>endOfInput</tt> argument; and then </p></li>

  <li><p> Invoke the {@link #flush flush} method so that the encoder can
  flush any internal state to the output buffer. </p></li>

</ol>

Each invocation of the {@link #encode encode} method will encode as many
characters as possible from the input buffer, writing the resulting bytes
to the output buffer.  The {@link #encode encode} method returns when more
input is required, when there is not enough room in the output buffer, or
when an encoding error has occurred.  In each case a {@link CoderResult}
object is returned to describe the reason for termination.  An invoker can
examine this object and fill the input buffer, flush the output buffer, or
attempt to recover from an encoding error, as appropriate, and try again.

<a name=\"ce\"></a>

<p> There are two general types of encoding errors.  If the input character
sequence is not a legal sixteen-bit Unicode sequence then the input is considered <i>malformed</i>.  If
the input character sequence is legal but cannot be mapped to a valid
byte sequence in the given charset then an <i>unmappable character</i> has been encountered.

<a name=\"cae\"></a>

<p> How an encoding error is handled depends upon the action requested for
that type of error, which is described by an instance of the {@link
CodingErrorAction} class.  The possible error actions are to {@linkplain
CodingErrorAction#IGNORE ignore} the erroneous input, {@linkplain
CodingErrorAction#REPORT report} the error to the invoker via
the returned {@link CoderResult} object, or {@linkplain CodingErrorAction#REPLACE
replace} the erroneous input with the current value of the
replacement byte array.  The replacement


is initially set to the encoder's default replacement, which often
(but not always) has the initial value&nbsp;<tt>{</tt>&nbsp;<tt>(byte)'?'</tt>&nbsp;<tt>}</tt>;





its value may be changed via the {@link #replaceWith(byte[])
replaceWith} method.

<p> The default action for malformed-input and unmappable-character errors
is to {@linkplain CodingErrorAction#REPORT report} them.  The
malformed-input error action may be changed via the {@link
#onMalformedInput(CodingErrorAction) onMalformedInput} method; the
unmappable-character action may be changed via the {@link
#onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter} method.

<p> This class is designed to handle many of the details of the encoding
process, including the implementation of error actions.  An encoder for a
specific charset, which is a concrete subclass of this class, need only
implement the abstract {@link #encodeLoop encodeLoop} method, which
encapsulates the basic encoding loop.  A subclass that maintains internal
state should, additionally, override the {@link #implFlush implFlush} and
{@link #implReset implReset} methods.

<p> Instances of this class are not safe for use by multiple concurrent
threads.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4

@see ByteBuffer
@see CharBuffer
@see Charset
@see CharsetDecoder
"
      classrelation 3305218 // charset (<unidirectional association>)
	relation 3305218 --->
	  a role_name "charset" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3305218 // charset (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      attribute 1814274 "averageBytesPerChar"
	const_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1814402 "maxBytesPerChar"
	const_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1814530 "replacement"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3305346 // malformedInputAction (<unidirectional association>)
	relation 3305346 --->
	  a role_name "malformedInputAction" init_value " CodingErrorAction.REPORT" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3305346 // malformedInputAction (<unidirectional association>)
	  b parent class_ref 992130 // CodingErrorAction
      end

      classrelation 3305474 // unmappableCharacterAction (<unidirectional association>)
	relation 3305474 --->
	  a role_name "unmappableCharacterAction" init_value " CodingErrorAction.REPORT" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3305474 // unmappableCharacterAction (<unidirectional association>)
	  b parent class_ref 992130 // CodingErrorAction
      end

      attribute 1814658 "ST_RESET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Internal states

"
      end

      attribute 1814786 "ST_CODING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1814914 "ST_END"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1815042 "ST_FLUSHED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1815170 "state"
	private explicit_type "int"
	init_value " ST_RESET"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3305602 // stateNames (<unidirectional association>)
	relation 3305602 --->
	  a role_name "stateNames" multiplicity "[]" init_value " { \"RESET\", \"CODING\", \"CODING_END\", \"FLUSHED\" }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3305602 // stateNames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7816450 "CharsetEncoder"
	protected explicit_return_type ""
	nparams 4
	  param inout name "cs" type class_ref 853634 // Charset
	  param in name "averageBytesPerChar" explicit_type "float"
	  param in name "maxBytesPerChar" explicit_type "float"
	  param inout name "replacement" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new encoder.  The new encoder will have the given
bytes-per-char and replacement values.

@param  cs
        The charset that created this encoder

@param  averageBytesPerChar
        A positive float value indicating the expected number of
        bytes that will be produced for each input character

@param  maxBytesPerChar
        A positive float value indicating the maximum number of
        bytes that will be produced for each input character

@param  replacement
        The initial replacement; must not be <tt>null</tt>, must have
        non-zero length, must not be longer than maxBytesPerChar,
        and must be {@linkplain #isLegalReplacement legal}

@throws  IllegalArgumentException
         If the preconditions on the parameters do not hold
"
      end

      operation 7816578 "CharsetEncoder"
	protected explicit_return_type ""
	nparams 3
	  param inout name "cs" type class_ref 853634 // Charset
	  param in name "averageBytesPerChar" explicit_type "float"
	  param in name "maxBytesPerChar" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new encoder.  The new encoder will have the given
bytes-per-char values and its replacement will be the
byte array <tt>{</tt>&nbsp;<tt>(byte)'?'</tt>&nbsp;<tt>}</tt>.

@param  cs
        The charset that created this encoder

@param  averageBytesPerChar
        A positive float value indicating the expected number of
        bytes that will be produced for each input character

@param  maxBytesPerChar
        A positive float value indicating the maximum number of
        bytes that will be produced for each input character

@throws  IllegalArgumentException
         If the preconditions on the parameters do not hold
"
      end

      operation 7816706 "charset"
	public return_type class_ref 853634 // Charset
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the charset that created this encoder.

@return  This encoder's charset
"
      end

      operation 7816834 "replacement"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this encoder's replacement value.

@return  This encoder's current replacement,
         which is never <tt>null</tt> and is never empty
"
      end

      operation 7816962 "replaceWith"
	public return_type class_ref 167682 // CharsetEncoder
	nparams 1
	  param inout name "newReplacement" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this encoder's replacement value.

<p> This method invokes the {@link #implReplaceWith implReplaceWith}
method, passing the new replacement, after checking that the new
replacement is acceptable.  </p>

@param  newReplacement  The replacement value






        The new replacement; must not be <tt>null</tt>, must have
        non-zero length, must not be longer than the value returned by
        the {@link #maxBytesPerChar() maxBytesPerChar} method, and
        must be {@link #isLegalReplacement legal}


@return  This encoder

@throws  IllegalArgumentException
         If the preconditions on the parameter do not hold
"
      end

      operation 7817090 "implReplaceWith"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newReplacement" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports a change to this encoder's replacement value.

<p> The default implementation of this method does nothing.  This method
should be overridden by encoders that require notification of changes to
the replacement.  </p>

@param  newReplacement    The replacement value
"
      end

      classrelation 3305730 // cachedDecoder (<unidirectional association>)
	relation 3305730 --->
	  a role_name "cachedDecoder" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<CharsetDecoder> ${name}${value};
"
	    classrelation_ref 3305730 // cachedDecoder (<unidirectional association>)
	  b parent class_ref 131330 // WeakReference
      end

      operation 7817218 "isLegalReplacement"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "repl" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not the given byte array is a legal replacement value
for this encoder.

<p> A replacement is legal if, and only if, it is a legal sequence of
bytes in this encoder's charset; that is, it must be possible to decode
the replacement into one or more sixteen-bit Unicode characters.

<p> The default implementation of this method is not very efficient; it
should generally be overridden to improve performance.  </p>

@param  repl  The byte array to be tested

@return  <tt>true</tt> if, and only if, the given byte array
         is a legal replacement value for this encoder
"
      end

      operation 7817346 "malformedInputAction"
	public return_type class_ref 992130 // CodingErrorAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this encoder's current action for malformed-input errors.

@return The current malformed-input action, which is never <tt>null</tt>
"
      end

      operation 7817474 "onMalformedInput"
	public return_type class_ref 167682 // CharsetEncoder
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this encoder's action for malformed-input errors.

<p> This method invokes the {@link #implOnMalformedInput
implOnMalformedInput} method, passing the new action.  </p>

@param  newAction  The new action; must not be <tt>null</tt>

@return  This encoder

@throws IllegalArgumentException
        If the precondition on the parameter does not hold
"
      end

      operation 7817602 "implOnMalformedInput"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports a change to this encoder's malformed-input action.

<p> The default implementation of this method does nothing.  This method
should be overridden by encoders that require notification of changes to
the malformed-input action.  </p>

@param  newAction  The new action
"
      end

      operation 7817730 "unmappableCharacterAction"
	public return_type class_ref 992130 // CodingErrorAction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this encoder's current action for unmappable-character errors.

@return The current unmappable-character action, which is never
        <tt>null</tt>
"
      end

      operation 7817858 "onUnmappableCharacter"
	public return_type class_ref 167682 // CharsetEncoder
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this encoder's action for unmappable-character errors.

<p> This method invokes the {@link #implOnUnmappableCharacter
implOnUnmappableCharacter} method, passing the new action.  </p>

@param  newAction  The new action; must not be <tt>null</tt>

@return  This encoder

@throws IllegalArgumentException
        If the precondition on the parameter does not hold
"
      end

      operation 7817986 "implOnUnmappableCharacter"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 992130 // CodingErrorAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports a change to this encoder's unmappable-character action.

<p> The default implementation of this method does nothing.  This method
should be overridden by encoders that require notification of changes to
the unmappable-character action.  </p>

@param  newAction  The new action
"
      end

      operation 7818114 "averageBytesPerChar"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the average number of bytes that will be produced for each
character of input.  This heuristic value may be used to estimate the size
of the output buffer required for a given input sequence.

@return  The average number of bytes produced
         per character of input
"
      end

      operation 7818242 "maxBytesPerChar"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of bytes that will be produced for each
character of input.  This value may be used to compute the worst-case size
of the output buffer required for a given input sequence.

@return  The maximum number of bytes that will be produced per
         character of input
"
      end

      operation 7818370 "encode"
	public return_type class_ref 992258 // CoderResult
	nparams 3
	  param inout name "in" type class_ref 548482 // CharBuffer
	  param inout name "out" type class_ref 149890 // ByteBuffer
	  param inout name "endOfInput" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes as many characters as possible from the given input buffer,
writing the results to the given output buffer.

<p> The buffers are read from, and written to, starting at their current
positions.  At most {@link Buffer#remaining in.remaining()} characters
will be read and at most {@link Buffer#remaining out.remaining()}
bytes will be written.  The buffers' positions will be advanced to
reflect the characters read and the bytes written, but their marks and
limits will not be modified.

<p> In addition to reading characters from the input buffer and writing
bytes to the output buffer, this method returns a {@link CoderResult}
object to describe its reason for termination:

<ul>

  <li><p> {@link CoderResult#UNDERFLOW} indicates that as much of the
  input buffer as possible has been encoded.  If there is no further
  input then the invoker can proceed to the next step of the
  <a href=\"#steps\">encoding operation</a>.  Otherwise this method
  should be invoked again with further input.  </p></li>

  <li><p> {@link CoderResult#OVERFLOW} indicates that there is
  insufficient space in the output buffer to encode any more characters.
  This method should be invoked again with an output buffer that has
  more {@linkplain Buffer#remaining remaining} bytes. This is
  typically done by draining any encoded bytes from the output
  buffer.  </p></li>

  <li><p> A {@linkplain CoderResult#malformedForLength
  malformed-input} result indicates that a malformed-input
  error has been detected.  The malformed characters begin at the input
  buffer's (possibly incremented) position; the number of malformed
  characters may be determined by invoking the result object's {@link
  CoderResult#length() length} method.  This case applies only if the
  {@linkplain #onMalformedInput malformed action} of this encoder
  is {@link CodingErrorAction#REPORT}; otherwise the malformed input
  will be ignored or replaced, as requested.  </p></li>

  <li><p> An {@linkplain CoderResult#unmappableForLength
  unmappable-character} result indicates that an
  unmappable-character error has been detected.  The characters that
  encode the unmappable character begin at the input buffer's (possibly
  incremented) position; the number of such characters may be determined
  by invoking the result object's {@link CoderResult#length() length}
  method.  This case applies only if the {@linkplain #onUnmappableCharacter
  unmappable action} of this encoder is {@link
  CodingErrorAction#REPORT}; otherwise the unmappable character will be
  ignored or replaced, as requested.  </p></li>

</ul>

In any case, if this method is to be reinvoked in the same encoding
operation then care should be taken to preserve any characters remaining
in the input buffer so that they are available to the next invocation.

<p> The <tt>endOfInput</tt> parameter advises this method as to whether
the invoker can provide further input beyond that contained in the given
input buffer.  If there is a possibility of providing additional input
then the invoker should pass <tt>false</tt> for this parameter; if there
is no possibility of providing further input then the invoker should
pass <tt>true</tt>.  It is not erroneous, and in fact it is quite
common, to pass <tt>false</tt> in one invocation and later discover that
no further input was actually available.  It is critical, however, that
the final invocation of this method in a sequence of invocations always
pass <tt>true</tt> so that any remaining unencoded input will be treated
as being malformed.

<p> This method works by invoking the {@link #encodeLoop encodeLoop}
method, interpreting its results, handling error conditions, and
reinvoking it as necessary.  </p>


@param  in
        The input character buffer

@param  out
        The output byte buffer

@param  endOfInput
        <tt>true</tt> if, and only if, the invoker can provide no
        additional input characters beyond those in the given buffer

@return  A coder-result object describing the reason for termination

@throws  IllegalStateException
         If an encoding operation is already in progress and the previous
         step was an invocation neither of the {@link #reset reset}
         method, nor of this method with a value of <tt>false</tt> for
         the <tt>endOfInput</tt> parameter, nor of this method with a
         value of <tt>true</tt> for the <tt>endOfInput</tt> parameter
         but a return value indicating an incomplete encoding operation

@throws  CoderMalfunctionError
         If an invocation of the encodeLoop method threw
         an unexpected exception
"
      end

      operation 7818498 "flush"
	public return_type class_ref 992258 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 149890 // ByteBuffer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this encoder.

<p> Some encoders maintain internal state and may need to write some
final bytes to the output buffer once the overall input sequence has
been read.

<p> Any additional output is written to the output buffer beginning at
its current position.  At most {@link Buffer#remaining out.remaining()}
bytes will be written.  The buffer's position will be advanced
appropriately, but its mark and limit will not be modified.

<p> If this method completes successfully then it returns {@link
CoderResult#UNDERFLOW}.  If there is insufficient room in the output
buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens
then this method must be invoked again, with an output buffer that has
more room, in order to complete the current <a href=\"#steps\">encoding
operation</a>.

<p> If this encoder has already been flushed then invoking this method
has no effect.

<p> This method invokes the {@link #implFlush implFlush} method to
perform the actual flushing operation.  </p>

@param  out
        The output byte buffer

@return  A coder-result object, either {@link CoderResult#UNDERFLOW} or
         {@link CoderResult#OVERFLOW}

@throws  IllegalStateException
         If the previous step of the current encoding operation was an
         invocation neither of the {@link #flush flush} method nor of
         the three-argument {@link
         #encode(CharBuffer,ByteBuffer,boolean) encode} method
         with a value of <tt>true</tt> for the <tt>endOfInput</tt>
         parameter
"
      end

      operation 7818626 "implFlush"
	protected return_type class_ref 992258 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 149890 // ByteBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this encoder.

<p> The default implementation of this method does nothing, and always
returns {@link CoderResult#UNDERFLOW}.  This method should be overridden
by encoders that may need to write final bytes to the output buffer
once the entire input sequence has been read. </p>

@param  out
        The output byte buffer

@return  A coder-result object, either {@link CoderResult#UNDERFLOW} or
         {@link CoderResult#OVERFLOW}
"
      end

      operation 7818754 "reset"
	public return_type class_ref 167682 // CharsetEncoder
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this encoder, clearing any internal state.

<p> This method resets charset-independent state and also invokes the
{@link #implReset() implReset} method in order to perform any
charset-specific reset actions.  </p>

@return  This encoder

"
      end

      operation 7818882 "implReset"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this encoder, clearing any charset-specific internal state.

<p> The default implementation of this method does nothing.  This method
should be overridden by encoders that maintain internal state.  </p>
"
      end

      operation 7819010 "encodeLoop"
	abstract protected return_type class_ref 992258 // CoderResult
	nparams 2
	  param inout name "in" type class_ref 548482 // CharBuffer
	  param inout name "out" type class_ref 149890 // ByteBuffer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes one or more characters into one or more bytes.

<p> This method encapsulates the basic encoding loop, encoding as many
characters as possible until it either runs out of input, runs out of room
in the output buffer, or encounters an encoding error.  This method is
invoked by the {@link #encode encode} method, which handles result
interpretation and error recovery.

<p> The buffers are read from, and written to, starting at their current
positions.  At most {@link Buffer#remaining in.remaining()} characters
will be read, and at most {@link Buffer#remaining out.remaining()}
bytes will be written.  The buffers' positions will be advanced to
reflect the characters read and the bytes written, but their marks and
limits will not be modified.

<p> This method returns a {@link CoderResult} object to describe its
reason for termination, in the same manner as the {@link #encode encode}
method.  Most implementations of this method will handle encoding errors
by returning an appropriate result object for interpretation by the
{@link #encode encode} method.  An optimized implementation may instead
examine the relevant error action and implement that action itself.

<p> An implementation of this method may perform arbitrary lookahead by
returning {@link CoderResult#UNDERFLOW} until it receives sufficient
input.  </p>

@param  in
        The input character buffer

@param  out
        The output byte buffer

@return  A coder-result object describing the reason for termination
"
      end

      operation 7819138 "encode"
	public return_type class_ref 149890 // ByteBuffer
	nparams 1
	  param inout name "in" type class_ref 548482 // CharBuffer
	nexceptions 1
	  exception class_ref 991746 // CharacterCodingException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method that encodes the remaining content of a single input
character buffer into a newly-allocated byte buffer.

<p> This method implements an entire <a href=\"#steps\">encoding
operation</a>; that is, it resets this encoder, then it encodes the
characters in the given character buffer, and finally it flushes this
encoder.  This method should therefore not be invoked if an encoding
operation is already in progress.  </p>

@param  in
        The input character buffer

@return A newly-allocated byte buffer containing the result of the
        encoding operation.  The buffer's position will be zero and its
        limit will follow the last byte written.

@throws  IllegalStateException
         If an encoding operation is already in progress

@throws  MalformedInputException
         If the character sequence starting at the input buffer's current
         position is not a legal sixteen-bit Unicode sequence and the current malformed-input action
         is {@link CodingErrorAction#REPORT}

@throws  UnmappableCharacterException
         If the character sequence starting at the input buffer's current
         position cannot be mapped to an equivalent byte sequence and
         the current unmappable-character action is {@link
         CodingErrorAction#REPORT}
"
      end

      operation 7819266 "canEncode"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "cb" type class_ref 548482 // CharBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7819394 "canEncode"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this encoder can encode the given character.

<p> This method returns <tt>false</tt> if the given character is a
surrogate character; such characters can be interpreted only when they
are members of a pair consisting of a high surrogate followed by a low
surrogate.  The {@link #canEncode(java.lang.CharSequence)
canEncode(CharSequence)} method may be used to test whether or not a
character sequence can be encoded.

<p> This method may modify this encoder's state; it should therefore not
be invoked if an <a href=\"#steps\">encoding operation</a> is already in
progress.

<p> The default implementation of this method is not very efficient; it
should generally be overridden to improve performance.  </p>

@param   c
         The given character

@return  <tt>true</tt> if, and only if, this encoder can encode
         the given character

@throws  IllegalStateException
         If an encoding operation is already in progress
"
      end

      operation 7819522 "canEncode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this encoder can encode the given character
sequence.

<p> If this method returns <tt>false</tt> for a particular character
sequence then more information about why the sequence cannot be encoded
may be obtained by performing a full <a href=\"#steps\">encoding
operation</a>.

<p> This method may modify this encoder's state; it should therefore not
be invoked if an encoding operation is already in progress.

<p> The default implementation of this method is not very efficient; it
should generally be overridden to improve performance.  </p>

@param   cs
         The given character sequence

@return  <tt>true</tt> if, and only if, this encoder can encode
         the given character without throwing any exceptions and without
         performing any replacements

@throws  IllegalStateException
         If an encoding operation is already in progress
"
      end

      operation 7819650 "throwIllegalStateException"
	private explicit_return_type "void"
	nparams 2
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 853634 "Charset"
      abstract visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A named mapping between sequences of sixteen-bit Unicode <a
href=\"../../lang/Character.html#unicode\">code units</a> and sequences of
bytes.  This class defines methods for creating decoders and encoders and
for retrieving the various names associated with a charset.  Instances of
this class are immutable.

<p> This class also defines static methods for testing whether a particular
charset is supported, for locating charset instances by name, and for
constructing a map that contains every charset for which support is
available in the current Java virtual machine.  Support for new charsets can
be added via the service-provider interface defined in the {@link
java.nio.charset.spi.CharsetProvider} class.

<p> All of the methods defined in this class are safe for use by multiple
concurrent threads.


<a name=\"names\"></a><a name=\"charenc\"></a>
<h2>Charset names</h2>

<p> Charsets are named by strings composed of the following characters:

<ul>

  <li> The uppercase letters <tt>'A'</tt> through <tt>'Z'</tt>
       (<tt>'&#92;u0041'</tt>&nbsp;through&nbsp;<tt>'&#92;u005a'</tt>),

  <li> The lowercase letters <tt>'a'</tt> through <tt>'z'</tt>
       (<tt>'&#92;u0061'</tt>&nbsp;through&nbsp;<tt>'&#92;u007a'</tt>),

  <li> The digits <tt>'0'</tt> through <tt>'9'</tt>
       (<tt>'&#92;u0030'</tt>&nbsp;through&nbsp;<tt>'&#92;u0039'</tt>),

  <li> The dash character <tt>'-'</tt>
       (<tt>'&#92;u002d'</tt>,&nbsp;<small>HYPHEN-MINUS</small>),

  <li> The plus character <tt>'+'</tt>
       (<tt>'&#92;u002b'</tt>,&nbsp;<small>PLUS SIGN</small>),

  <li> The period character <tt>'.'</tt>
       (<tt>'&#92;u002e'</tt>,&nbsp;<small>FULL STOP</small>),

  <li> The colon character <tt>':'</tt>
       (<tt>'&#92;u003a'</tt>,&nbsp;<small>COLON</small>), and

  <li> The underscore character <tt>'_'</tt>
       (<tt>'&#92;u005f'</tt>,&nbsp;<small>LOW&nbsp;LINE</small>).

</ul>

A charset name must begin with either a letter or a digit.  The empty string
is not a legal charset name.  Charset names are not case-sensitive; that is,
case is always ignored when comparing charset names.  Charset names
generally follow the conventions documented in <a
href=\"http://www.ietf.org/rfc/rfc2278.txt\"><i>RFC&nbsp;2278:&nbsp;IANA Charset
Registration Procedures</i></a>.

<p> Every charset has a <i>canonical name</i> and may also have one or more
<i>aliases</i>.  The canonical name is returned by the {@link #name() name} method
of this class.  Canonical names are, by convention, usually in upper case.
The aliases of a charset are returned by the {@link #aliases() aliases}
method.

<p><a name=\"hn\">Some charsets have an <i>historical name</i> that is defined for
compatibility with previous versions of the Java platform.</a>  A charset's
historical name is either its canonical name or one of its aliases.  The
historical name is returned by the <tt>getEncoding()</tt> methods of the
{@link java.io.InputStreamReader#getEncoding InputStreamReader} and {@link
java.io.OutputStreamWriter#getEncoding OutputStreamWriter} classes.

<p><a name=\"iana\"> </a>If a charset listed in the <a
href=\"http://www.iana.org/assignments/character-sets\"><i>IANA Charset
Registry</i></a> is supported by an implementation of the Java platform then
its canonical name must be the name listed in the registry. Many charsets
are given more than one name in the registry, in which case the registry
identifies one of the names as <i>MIME-preferred</i>.  If a charset has more
than one registry name then its canonical name must be the MIME-preferred
name and the other names in the registry must be valid aliases.  If a
supported charset is not listed in the IANA registry then its canonical name
must begin with one of the strings <tt>\"X-\"</tt> or <tt>\"x-\"</tt>.

<p> The IANA charset registry does change over time, and so the canonical
name and the aliases of a particular charset may also change over time.  To
ensure compatibility it is recommended that no alias ever be removed from a
charset, and that if the canonical name of a charset is changed then its
previous canonical name be made into an alias.


<h2>Standard charsets</h2>



<p><a name=\"standard\">Every implementation of the Java platform is required to support the
following standard charsets.</a>  Consult the release documentation for your
implementation to see if any other charsets are supported.  The behavior
of such optional charsets may differ between implementations.

<blockquote><table width=\"80%\" summary=\"Description of standard charsets\">
<tr><th align=\"left\">Charset</th><th align=\"left\">Description</th></tr>
<tr><td valign=top><tt>US-ASCII</tt></td>
    <td>Seven-bit ASCII, a.k.a. <tt>ISO646-US</tt>,
        a.k.a. the Basic Latin block of the Unicode character set</td></tr>
<tr><td valign=top><tt>ISO-8859-1&nbsp;&nbsp;</tt></td>
    <td>ISO Latin Alphabet No. 1, a.k.a. <tt>ISO-LATIN-1</tt></td></tr>
<tr><td valign=top><tt>UTF-8</tt></td>
    <td>Eight-bit UCS Transformation Format</td></tr>
<tr><td valign=top><tt>UTF-16BE</tt></td>
    <td>Sixteen-bit UCS Transformation Format,
        big-endian byte&nbsp;order</td></tr>
<tr><td valign=top><tt>UTF-16LE</tt></td>
    <td>Sixteen-bit UCS Transformation Format,
        little-endian byte&nbsp;order</td></tr>
<tr><td valign=top><tt>UTF-16</tt></td>
    <td>Sixteen-bit UCS Transformation Format,
        byte&nbsp;order identified by an optional byte-order mark</td></tr>
</table></blockquote>

<p> The <tt>UTF-8</tt> charset is specified by <a
href=\"http://www.ietf.org/rfc/rfc2279.txt\"><i>RFC&nbsp;2279</i></a>; the
transformation format upon which it is based is specified in
Amendment&nbsp;2 of ISO&nbsp;10646-1 and is also described in the <a
href=\"http://www.unicode.org/unicode/standard/standard.html\"><i>Unicode
Standard</i></a>.

<p> The <tt>UTF-16</tt> charsets are specified by <a
href=\"http://www.ietf.org/rfc/rfc2781.txt\"><i>RFC&nbsp;2781</i></a>; the
transformation formats upon which they are based are specified in
Amendment&nbsp;1 of ISO&nbsp;10646-1 and are also described in the <a
href=\"http://www.unicode.org/unicode/standard/standard.html\"><i>Unicode
Standard</i></a>.

<p> The <tt>UTF-16</tt> charsets use sixteen-bit quantities and are
therefore sensitive to byte order.  In these encodings the byte order of a
stream may be indicated by an initial <i>byte-order mark</i> represented by
the Unicode character <tt>'&#92;uFEFF'</tt>.  Byte-order marks are handled
as follows:

<ul>

  <li><p> When decoding, the <tt>UTF-16BE</tt> and <tt>UTF-16LE</tt>
  charsets interpret the initial byte-order marks as a <small>ZERO-WIDTH
  NON-BREAKING SPACE</small>; when encoding, they do not write
  byte-order marks. </p></li>


  <li><p> When decoding, the <tt>UTF-16</tt> charset interprets the
  byte-order mark at the beginning of the input stream to indicate the
  byte-order of the stream but defaults to big-endian if there is no
  byte-order mark; when encoding, it uses big-endian byte order and writes
  a big-endian byte-order mark. </p></li>

</ul>

In any case, byte order marks occurring after the first element of an
input sequence are not omitted since the same code is used to represent
<small>ZERO-WIDTH NON-BREAKING SPACE</small>.

<p> Every instance of the Java virtual machine has a default charset, which
may or may not be one of the standard charsets.  The default charset is
determined during virtual-machine startup and typically depends upon the
locale and charset being used by the underlying operating system. </p>

<p>The {@link StandardCharsets} class defines constants for each of the
standard charsets.

<h2>Terminology</h2>

<p> The name of this class is taken from the terms used in
<a href=\"http://www.ietf.org/rfc/rfc2278.txt\"><i>RFC&nbsp;2278</i></a>.
In that document a <i>charset</i> is defined as the combination of
one or more coded character sets and a character-encoding scheme.
(This definition is confusing; some other software systems define
<i>charset</i> as a synonym for <i>coded character set</i>.)

<p> A <i>coded character set</i> is a mapping between a set of abstract
characters and a set of integers.  US-ASCII, ISO&nbsp;8859-1,
JIS&nbsp;X&nbsp;0201, and Unicode are examples of coded character sets.

<p> Some standards have defined a <i>character set</i> to be simply a
set of abstract characters without an associated assigned numbering.
An alphabet is an example of such a character set.  However, the subtle
distinction between <i>character set</i> and <i>coded character set</i>
is rarely used in practice; the former has become a short form for the
latter, including in the Java API specification.

<p> A <i>character-encoding scheme</i> is a mapping between one or more
coded character sets and a set of octet (eight-bit byte) sequences.
UTF-8, UTF-16, ISO&nbsp;2022, and EUC are examples of
character-encoding schemes.  Encoding schemes are often associated with
a particular coded character set; UTF-8, for example, is used only to
encode Unicode.  Some schemes, however, are associated with multiple
coded character sets; EUC, for example, can be used to encode
characters in a variety of Asian coded character sets.

<p> When a coded character set is used exclusively with a single
character-encoding scheme then the corresponding charset is usually
named for the coded character set; otherwise a charset is usually named
for the encoding scheme and, possibly, the locale of the coded
character sets that it supports.  Hence <tt>US-ASCII</tt> is both the
name of a coded character set and of the charset that encodes it, while
<tt>EUC-JP</tt> is the name of the charset that encodes the
JIS&nbsp;X&nbsp;0201, JIS&nbsp;X&nbsp;0208, and JIS&nbsp;X&nbsp;0212
coded character sets for the Japanese language.

<p> The native character encoding of the Java programming language is
UTF-16.  A charset in the Java platform therefore defines a mapping
between sequences of sixteen-bit UTF-16 code units (that is, sequences
of chars) and sequences of bytes. </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4

@see CharsetDecoder
@see CharsetEncoder
@see java.nio.charset.spi.CharsetProvider
@see java.lang.Character
"
      classrelation 3303170 // <realization>
	relation 3303170 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3303170 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3303298 // bugLevel (<unidirectional association>)
	relation 3303298 --->
	  a role_name "bugLevel" init_value " null" class_relation volatile private
	    comment " -- Static methods -- 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3303298 // bugLevel (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7809282 "atBugLevel"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "bl" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7809410 "checkName"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the given string is a legal charset name. </p>

@param  s
        A purported charset name

@throws  IllegalCharsetNameException
         If the given name is not a legal charset name
"
      end

      classrelation 3303426 // standardProvider (<unidirectional association>)
	relation 3303426 --->
	  a role_name "standardProvider" init_value " new StandardCharsets()" class_relation private
	    comment " The standard set of charsets 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3303426 // standardProvider (<unidirectional association>)
	  b parent class_ref 991874 // CharsetProvider
      end

      classrelation 3303554 // cache1 (<unidirectional association>)
	relation 3303554 --->
	  a role_name "cache1" multiplicity "[]" init_value " null" class_relation volatile private
	    comment " Cache of the most-recently-returned charsets,
 along with the names that were used to find them

 \"Level 1\" cache"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3303554 // cache1 (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3303682 // cache2 (<unidirectional association>)
	relation 3303682 --->
	  a role_name "cache2" multiplicity "[]" init_value " null" class_relation volatile private
	    comment " \"Level 2\" cache"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3303682 // cache2 (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 7809538 "cache"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "charsetName" type class_ref 128130 // String
	  param inout name "cs" type class_ref 853634 // Charset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7809666 "providers"
	class_operation private return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<CharsetProvider> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates an iterator that walks over the available providers, ignoring
 those whose lookup or instantiation causes a security exception to be
 thrown.  Should be invoked with full privileges.
"
      end

      classrelation 3303810 // gate (<unidirectional association>)
	relation 3303810 --->
	  a role_name "gate" init_value "
            new ThreadLocal<ThreadLocal<?>>()" class_relation private
	    comment " Thread-local gate to prevent recursive provider lookups
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ThreadLocal<?>> ${name}${value};
"
	    classrelation_ref 3303810 // gate (<unidirectional association>)
	  b parent class_ref 129282 // ThreadLocal
      end

      operation 7809794 "lookupViaProviders"
	class_operation private return_type class_ref 853634 // Charset
	nparams 1
	  param in name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 992002 "ExtendedProviderHolder"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3303938 // extendedProvider (<unidirectional association>)
	  relation 3303938 --->
	    a role_name "extendedProvider" init_value " extendedProvider()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3303938 // extendedProvider (<unidirectional association>)
	    b parent class_ref 991874 // CharsetProvider
	end

	operation 7809922 "extendedProvider"
	  class_operation private return_type class_ref 991874 // CharsetProvider
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " returns ExtendedProvider, if installed"
	end
      end

      operation 7810050 "lookupExtendedCharset"
	class_operation private return_type class_ref 853634 // Charset
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7810178 "lookup"
	class_operation private return_type class_ref 853634 // Charset
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7810306 "lookup2"
	class_operation private return_type class_ref 853634 // Charset
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7810434 "isSupported"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether the named charset is supported.

@param  charsetName
        The name of the requested charset; may be either
        a canonical name or an alias

@return  <tt>true</tt> if, and only if, support for the named charset
         is available in the current Java virtual machine

@throws IllegalCharsetNameException
        If the given charset name is illegal

@throws  IllegalArgumentException
         If the given <tt>charsetName</tt> is null
"
      end

      operation 7810562 "forName"
	class_operation public return_type class_ref 853634 // Charset
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a charset object for the named charset.

@param  charsetName
        The name of the requested charset; may be either
        a canonical name or an alias

@return  A charset object for the named charset

@throws  IllegalCharsetNameException
         If the given charset name is illegal

@throws  IllegalArgumentException
         If the given <tt>charsetName</tt> is null

@throws  UnsupportedCharsetException
         If no support for the named charset is available
         in this instance of the Java virtual machine
"
      end

      operation 7810690 "put"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "i" type class_ref 132994 // Iterator
	  param inout name "m" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Charset> ${p0}, ${t1}<String,Charset> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Fold charsets from the given iterator into the given map, ignoring
 charsets whose names already have entries in the map.
"
      end

      operation 7810818 "availableCharsets"
	class_operation public return_type class_ref 500354 // SortedMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Charset> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a sorted map from canonical charset names to charset objects.

<p> The map returned by this method will have one entry for each charset
for which support is available in the current Java virtual machine.  If
two or more supported charsets have the same canonical name then the
resulting map will contain just one of them; which one it will contain
is not specified. </p>

<p> The invocation of this method, and the subsequent use of the
resulting map, may cause time-consuming disk or network I/O operations
to occur.  This method is provided for applications that need to
enumerate all of the available charsets, for example to allow user
charset selection.  This method is not used by the {@link #forName
forName} method, which instead employs an efficient incremental lookup
algorithm.

<p> This method may return different results at different times if new
charset providers are dynamically made available to the current Java
virtual machine.  In the absence of such changes, the charsets returned
by this method are exactly those that can be retrieved via the {@link
#forName forName} method.  </p>

@return An immutable, case-insensitive map from canonical charset names
        to charset objects
"
      end

      classrelation 3304066 // defaultCharset (<unidirectional association>)
	relation 3304066 --->
	  a role_name "defaultCharset" class_relation volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3304066 // defaultCharset (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      operation 7810946 "defaultCharset"
	class_operation public return_type class_ref 853634 // Charset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default charset of this Java virtual machine.

<p> The default charset is determined during virtual-machine startup and
typically depends upon the locale and charset of the underlying
operating system.

@return  A charset object for the default charset

@since 1.5
"
      end

      classrelation 3304194 // name (<unidirectional association>)
	relation 3304194 --->
	  a role_name "name" const_relation private
	    comment " -- Instance fields and methods -- 
 tickles a bug in oldjavac"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3304194 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3304322 // aliases (<unidirectional association>)
	relation 3304322 --->
	  a role_name "aliases" multiplicity "[]" const_relation private
	    comment " tickles a bug in oldjavac"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3304322 // aliases (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3304450 // aliasSet (<unidirectional association>)
	relation 3304450 --->
	  a role_name "aliasSet" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3304450 // aliasSet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 7811074 "Charset"
	protected explicit_return_type ""
	nparams 2
	  param inout name "canonicalName" type class_ref 128130 // String
	  param inout name "aliases" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new charset with the given canonical name and alias
set.

@param  canonicalName
        The canonical name of this charset

@param  aliases
        An array of this charset's aliases, or null if it has no aliases

@throws IllegalCharsetNameException
        If the canonical name or any of the aliases are illegal
"
      end

      operation 7811202 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this charset's canonical name.

@return  The canonical name of this charset
"
      end

      operation 7811330 "aliases"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set containing this charset's aliases.

@return  An immutable set of this charset's aliases
"
      end

      operation 7811458 "displayName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this charset's human-readable name for the default locale.

<p> The default implementation of this method simply returns this
charset's canonical name.  Concrete subclasses of this class may
override this method in order to provide a localized display name. </p>

@return  The display name of this charset in the default locale
"
      end

      operation 7811586 "isRegistered"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this charset is registered in the <a
href=\"http://www.iana.org/assignments/character-sets\">IANA Charset
Registry</a>.

@return  <tt>true</tt> if, and only if, this charset is known by its
         implementor to be registered with the IANA
"
      end

      operation 7811714 "displayName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this charset's human-readable name for the given locale.

<p> The default implementation of this method simply returns this
charset's canonical name.  Concrete subclasses of this class may
override this method in order to provide a localized display name. </p>

@param  locale
        The locale for which the display name is to be retrieved

@return  The display name of this charset in the given locale
"
      end

      operation 7811842 "contains"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 853634 // Charset
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this charset contains the given charset.

<p> A charset <i>C</i> is said to <i>contain</i> a charset <i>D</i> if,
and only if, every character representable in <i>D</i> is also
representable in <i>C</i>.  If this relationship holds then it is
guaranteed that every string that can be encoded in <i>D</i> can also be
encoded in <i>C</i> without performing any replacements.

<p> That <i>C</i> contains <i>D</i> does not imply that each character
representable in <i>C</i> by a particular byte sequence is represented
in <i>D</i> by the same byte sequence, although sometimes this is the
case.

<p> Every charset contains itself.

<p> This method computes an approximation of the containment relation:
If it returns <tt>true</tt> then the given charset is known to be
contained by this charset; if it returns <tt>false</tt>, however, then
it is not necessarily the case that the given charset is not contained
in this charset.

@param   cs
         The given charset

@return  <tt>true</tt> if the given charset is contained in this charset
"
      end

      operation 7811970 "newDecoder"
	abstract public return_type class_ref 167554 // CharsetDecoder
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new decoder for this charset.

@return  A new decoder for this charset
"
      end

      operation 7812098 "newEncoder"
	abstract public return_type class_ref 167682 // CharsetEncoder
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new encoder for this charset.

@return  A new encoder for this charset

@throws  UnsupportedOperationException
         If this charset does not support encoding
"
      end

      operation 7812226 "canEncode"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this charset supports encoding.

<p> Nearly all charsets support encoding.  The primary exceptions are
special-purpose <i>auto-detect</i> charsets whose decoders can determine
which of several possible encoding schemes is in use by examining the
input byte sequence.  Such charsets do not support encoding because
there is no way to determine which encoding should be used on output.
Implementations of such charsets should override this method to return
<tt>false</tt>. </p>

@return  <tt>true</tt> if, and only if, this charset supports encoding
"
      end

      operation 7812354 "decode"
	public return_type class_ref 548482 // CharBuffer
	nparams 1
	  param inout name "bb" type class_ref 149890 // ByteBuffer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method that decodes bytes in this charset into Unicode
characters.

<p> An invocation of this method upon a charset <tt>cs</tt> returns the
same result as the expression

<pre>
    cs.newDecoder()
      .onMalformedInput(CodingErrorAction.REPLACE)
      .onUnmappableCharacter(CodingErrorAction.REPLACE)
      .decode(bb); </pre>

except that it is potentially more efficient because it can cache
decoders between successive invocations.

<p> This method always replaces malformed-input and unmappable-character
sequences with this charset's default replacement byte array.  In order
to detect such sequences, use the {@link
CharsetDecoder#decode(java.nio.ByteBuffer)} method directly.  </p>

@param  bb  The byte buffer to be decoded

@return  A char buffer containing the decoded characters
"
      end

      operation 7812482 "encode"
	public return_type class_ref 149890 // ByteBuffer
	nparams 1
	  param inout name "cb" type class_ref 548482 // CharBuffer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method that encodes Unicode characters into bytes in this
charset.

<p> An invocation of this method upon a charset <tt>cs</tt> returns the
same result as the expression

<pre>
    cs.newEncoder()
      .onMalformedInput(CodingErrorAction.REPLACE)
      .onUnmappableCharacter(CodingErrorAction.REPLACE)
      .encode(bb); </pre>

except that it is potentially more efficient because it can cache
encoders between successive invocations.

<p> This method always replaces malformed-input and unmappable-character
sequences with this charset's default replacement string.  In order to
detect such sequences, use the {@link
CharsetEncoder#encode(java.nio.CharBuffer)} method directly.  </p>

@param  cb  The char buffer to be encoded

@return  A byte buffer containing the encoded characters
"
      end

      operation 7812610 "encode"
	public return_type class_ref 149890 // ByteBuffer
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method that encodes a string into bytes in this charset.

<p> An invocation of this method upon a charset <tt>cs</tt> returns the
same result as the expression

<pre>
    cs.encode(CharBuffer.wrap(s)); </pre>

@param  str  The string to be encoded

@return  A byte buffer containing the encoded characters
"
      end

      operation 7812738 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "that" type class_ref 853634 // Charset
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this charset to another.

<p> Charsets are ordered by their canonical names, without regard to
case. </p>

@param  that
        The charset to which this charset is to be compared

@return A negative integer, zero, or a positive integer as this charset
        is less than, equal to, or greater than the specified charset
"
      end

      operation 7812866 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a hashcode for this charset.

@return  An integer hashcode
"
      end

      operation 7812994 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ob" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this object is equal to another.

<p> Two charsets are equal if, and only if, they have the same canonical
names.  A charset is never equal to any other type of object.  </p>

@return  <tt>true</tt> if, and only if, this charset is equal to the
         given object
"
      end

      operation 7813122 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this charset.

@return  A string describing this charset
"
      end
    end

    class 991746 "CharacterCodingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a character encoding
or decoding error occurs.

@since 1.4
"
      classrelation 3303042 // <generalisation>
	relation 3303042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3303042 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1813250 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8421532232154627783L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7809154 "CharacterCodingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.
"
      end
    end

    class 992130 "CodingErrorAction"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A typesafe enumeration for coding-error actions.

<p> Instances of this class are used to specify how malformed-input and
unmappable-character errors are to be handled by charset <a
href=\"CharsetDecoder.html#cae\">decoders</a> and <a
href=\"CharsetEncoder.html#cae\">encoders</a>.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4
"
      classrelation 3306754 // name (<unidirectional association>)
	relation 3306754 --->
	  a role_name "name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3306754 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7821570 "CodingErrorAction"
	private explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3306882 // IGNORE (<unidirectional association>)
	relation 3306882 --->
	  a role_name "IGNORE" init_value " new CodingErrorAction(\"IGNORE\")" class_relation const_relation public
	    comment "
Action indicating that a coding error is to be handled by dropping the
erroneous input and resuming the coding operation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3306882 // IGNORE (<unidirectional association>)
	  b parent class_ref 992130 // CodingErrorAction
      end

      classrelation 3307010 // REPLACE (<unidirectional association>)
	relation 3307010 --->
	  a role_name "REPLACE" init_value " new CodingErrorAction(\"REPLACE\")" class_relation const_relation public
	    comment "
Action indicating that a coding error is to be handled by dropping the
erroneous input, appending the coder's replacement value to the output
buffer, and resuming the coding operation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3307010 // REPLACE (<unidirectional association>)
	  b parent class_ref 992130 // CodingErrorAction
      end

      classrelation 3307138 // REPORT (<unidirectional association>)
	relation 3307138 --->
	  a role_name "REPORT" init_value " new CodingErrorAction(\"REPORT\")" class_relation const_relation public
	    comment "
Action indicating that a coding error is to be reported, either by
returning a {@link CoderResult} object or by throwing a {@link
CharacterCodingException}, whichever is appropriate for the method
implementing the coding process.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3307138 // REPORT (<unidirectional association>)
	  b parent class_ref 992130 // CodingErrorAction
      end

      operation 7821698 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this action.

@return  A descriptive string
"
      end
    end

    class 992258 "CoderResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A description of the result state of a coder.

<p> A charset coder, that is, either a decoder or an encoder, consumes bytes
(or characters) from an input buffer, translates them, and writes the
resulting characters (or bytes) to an output buffer.  A coding process
terminates for one of four categories of reasons, which are described by
instances of this class:

<ul>

  <li><p> <i>Underflow</i> is reported when there is no more input to be
  processed, or there is insufficient input and additional input is
  required.  This condition is represented by the unique result object
  {@link #UNDERFLOW}, whose {@link #isUnderflow() isUnderflow} method
  returns <tt>true</tt>.  </p></li>

  <li><p> <i>Overflow</i> is reported when there is insufficient room
  remaining in the output buffer.  This condition is represented by the
  unique result object {@link #OVERFLOW}, whose {@link #isOverflow()
  isOverflow} method returns <tt>true</tt>.  </p></li>

  <li><p> A <i>malformed-input error</i> is reported when a sequence of
  input units is not well-formed.  Such errors are described by instances of
  this class whose {@link #isMalformed() isMalformed} method returns
  <tt>true</tt> and whose {@link #length() length} method returns the length
  of the malformed sequence.  There is one unique instance of this class for
  all malformed-input errors of a given length.  </p></li>

  <li><p> An <i>unmappable-character error</i> is reported when a sequence
  of input units denotes a character that cannot be represented in the
  output charset.  Such errors are described by instances of this class
  whose {@link #isUnmappable() isUnmappable} method returns <tt>true</tt> and
  whose {@link #length() length} method returns the length of the input
  sequence denoting the unmappable character.  There is one unique instance
  of this class for all unmappable-character errors of a given length.
  </p></li>

</ul>

<p> For convenience, the {@link #isError() isError} method returns <tt>true</tt>
for result objects that describe malformed-input and unmappable-character
errors but <tt>false</tt> for those that describe underflow or overflow
conditions.  </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4
"
      attribute 1815426 "CR_UNDERFLOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1815554 "CR_OVERFLOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1815682 "CR_ERROR_MIN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1815810 "CR_MALFORMED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1815938 "CR_UNMAPPABLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3305986 // names (<unidirectional association>)
	relation 3305986 --->
	  a role_name "names" multiplicity "[]" init_value " { \"UNDERFLOW\", \"OVERFLOW\", \"MALFORMED\", \"UNMAPPABLE\" }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3305986 // names (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1816066 "type"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1816194 "length"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7819906 "CoderResult"
	private explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7820034 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this coder result.

@return  A descriptive string
"
      end

      operation 7820162 "isUnderflow"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this object describes an underflow condition.

@return  <tt>true</tt> if, and only if, this object denotes underflow
"
      end

      operation 7820290 "isOverflow"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this object describes an overflow condition.

@return  <tt>true</tt> if, and only if, this object denotes overflow
"
      end

      operation 7820418 "isError"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this object describes an error condition.

@return  <tt>true</tt> if, and only if, this object denotes either a
         malformed-input error or an unmappable-character error
"
      end

      operation 7820546 "isMalformed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this object describes a malformed-input error.

@return  <tt>true</tt> if, and only if, this object denotes a
         malformed-input error
"
      end

      operation 7820674 "isUnmappable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this object describes an unmappable-character
error.

@return  <tt>true</tt> if, and only if, this object denotes an
         unmappable-character error
"
      end

      operation 7820802 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the erroneous input described by this
object&nbsp;&nbsp;<i>(optional operation)</i>.

@return  The length of the erroneous input, a positive integer

@throws  UnsupportedOperationException
         If this object does not describe an error condition, that is,
         if the {@link #isError() isError} does not return <tt>true</tt>
"
      end

      classrelation 3306114 // UNDERFLOW (<unidirectional association>)
	relation 3306114 --->
	  a role_name "UNDERFLOW" init_value " new CoderResult(CR_UNDERFLOW, 0)" class_relation const_relation public
	    comment "
Result object indicating underflow, meaning that either the input buffer
has been completely consumed or, if the input buffer is not yet empty,
that additional input is required.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3306114 // UNDERFLOW (<unidirectional association>)
	  b parent class_ref 992258 // CoderResult
      end

      classrelation 3306242 // OVERFLOW (<unidirectional association>)
	relation 3306242 --->
	  a role_name "OVERFLOW" init_value " new CoderResult(CR_OVERFLOW, 0)" class_relation const_relation public
	    comment "
Result object indicating overflow, meaning that there is insufficient
room in the output buffer.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3306242 // OVERFLOW (<unidirectional association>)
	  b parent class_ref 992258 // CoderResult
      end

      class 992514 "Cache"
	abstract visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3306370 // cache (<unidirectional association>)
	  relation 3306370 --->
	    a role_name "cache" init_value " null" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer,WeakReference<CoderResult>> ${name}${value};
"
	      classrelation_ref 3306370 // cache (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 7820930 "create"
	  abstract protected return_type class_ref 992258 // CoderResult
	  nparams 1
	    param in name "len" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7821058 "get"
	  private return_type class_ref 992258 // CoderResult
	  nparams 1
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3306498 // malformedCache (<unidirectional association>)
	relation 3306498 --->
	  a role_name "malformedCache" init_value " new Cache() {
                public CoderResult create(int len) {
                    return new CoderResult(CR_MALFORMED, len);
                }}" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3306498 // malformedCache (<unidirectional association>)
	  b parent class_ref 992514 // Cache
      end

      operation 7821186 "malformedForLength"
	class_operation public return_type class_ref 992258 // CoderResult
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Static factory method that returns the unique object describing a
malformed-input error of the given length.

@param   length
         The given length

@return  The requested coder-result object
"
      end

      classrelation 3306626 // unmappableCache (<unidirectional association>)
	relation 3306626 --->
	  a role_name "unmappableCache" init_value " new Cache() {
                public CoderResult create(int len) {
                    return new CoderResult(CR_UNMAPPABLE, len);
                }}" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3306626 // unmappableCache (<unidirectional association>)
	  b parent class_ref 992514 // Cache
      end

      operation 7821314 "unmappableForLength"
	class_operation public return_type class_ref 992258 // CoderResult
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Static factory method that returns the unique result object describing
an unmappable-character error of the given length.

@param   length
         The given length

@return  The requested coder-result object
"
      end

      operation 7821442 "throwException"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 991746 // CharacterCodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an exception appropriate to the result described by this object.

@throws  BufferUnderflowException
         If this object is {@link #UNDERFLOW}

@throws  BufferOverflowException
         If this object is {@link #OVERFLOW}

@throws  MalformedInputException
         If this object represents a malformed-input error; the
         exception's length value will be that of this object

@throws  UnmappableCharacterException
         If this object represents an unmappable-character error; the
         exceptions length value will be that of this object
"
      end
    end

    class 992386 "CoderMalfunctionError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Error thrown when the {@link CharsetDecoder#decodeLoop decodeLoop} method of
a {@link CharsetDecoder}, or the {@link CharsetEncoder#encodeLoop
encodeLoop} method of a {@link CharsetEncoder}, throws an unexpected
exception.

@since 1.4
"
      classrelation 3305858 // <generalisation>
	relation 3305858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3305858 // <generalisation>
	  b parent class_ref 195842 // Error
      end

      attribute 1815298 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1151412348057794301L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7819778 "CoderMalfunctionError"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes an instance of this class.

@param  cause
        The unexpected exception that was thrown
"
      end
    end

    class 992642 "IllegalCharsetNameException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when a string that is not a
<a href=Charset.html#names>legal charset name</a> is used as such.

@since 1.4
"
      classrelation 3307266 // <generalisation>
	relation 3307266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3307266 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 1816322 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1457525358470002989L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3307394 // charsetName (<unidirectional association>)
	relation 3307394 --->
	  a role_name "charsetName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3307394 // charsetName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7821826 "IllegalCharsetNameException"
	public explicit_return_type ""
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param  charsetName
        The illegal charset name
"
      end

      operation 7821954 "getCharsetName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the illegal charset name.

@return  The illegal charset name
"
      end
    end

    class 992770 "MalformedInputException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when an input byte sequence is not legal for given
charset, or an input character sequence is not a legal sixteen-bit Unicode
sequence.

@since 1.4
"
      classrelation 3307522 // <generalisation>
	relation 3307522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3307522 // <generalisation>
	  b parent class_ref 991746 // CharacterCodingException
      end

      attribute 1816450 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3438823399834806194L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1816578 "inputLength"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7822082 "MalformedInputException"
	public explicit_return_type ""
	nparams 1
	  param in name "inputLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code MalformedInputException} with the given
length.
@param inputLength the length of the input
"
      end

      operation 7822210 "getInputLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the input.
@return the length of the input
"
      end

      operation 7822338 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the message.
@return the message
"
      end
    end

    class 992898 "StandardCharsets"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Constant definitions for the standard {@link Charset Charsets}. These
charsets are guaranteed to be available on every implementation of the Java
platform.

@see <a href=\"Charset#standard\">Standard Charsets</a>
@since 1.7
"
      operation 7822466 "StandardCharsets"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3307650 // US_ASCII (<unidirectional association>)
	relation 3307650 --->
	  a role_name "US_ASCII" init_value " Charset.forName(\"US-ASCII\")" class_relation const_relation public
	    comment "
Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the
Unicode character set

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3307650 // US_ASCII (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      classrelation 3307778 // ISO_8859_1 (<unidirectional association>)
	relation 3307778 --->
	  a role_name "ISO_8859_1" init_value " Charset.forName(\"ISO-8859-1\")" class_relation const_relation public
	    comment "
ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3307778 // ISO_8859_1 (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      classrelation 3307906 // UTF_8 (<unidirectional association>)
	relation 3307906 --->
	  a role_name "UTF_8" init_value " Charset.forName(\"UTF-8\")" class_relation const_relation public
	    comment "
Eight-bit UCS Transformation Format

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3307906 // UTF_8 (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      classrelation 3308034 // UTF_16BE (<unidirectional association>)
	relation 3308034 --->
	  a role_name "UTF_16BE" init_value " Charset.forName(\"UTF-16BE\")" class_relation const_relation public
	    comment "
Sixteen-bit UCS Transformation Format, big-endian byte order

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3308034 // UTF_16BE (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      classrelation 3308162 // UTF_16LE (<unidirectional association>)
	relation 3308162 --->
	  a role_name "UTF_16LE" init_value " Charset.forName(\"UTF-16LE\")" class_relation const_relation public
	    comment "
Sixteen-bit UCS Transformation Format, little-endian byte order

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3308162 // UTF_16LE (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      classrelation 3308290 // UTF_16 (<unidirectional association>)
	relation 3308290 --->
	  a role_name "UTF_16" init_value " Charset.forName(\"UTF-16\")" class_relation const_relation public
	    comment "
Sixteen-bit UCS Transformation Format, byte order identified by an
optional byte-order mark

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3308290 // UTF_16 (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end
    end

    class 993026 "UnmappableCharacterException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when an input character (or byte) sequence
is valid but cannot be mapped to an output byte (or character)
sequence.

@since 1.4
"
      classrelation 3308418 // <generalisation>
	relation 3308418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3308418 // <generalisation>
	  b parent class_ref 991746 // CharacterCodingException
      end

      attribute 1816706 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7026962371537706123L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1816834 "inputLength"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7822594 "UnmappableCharacterException"
	public explicit_return_type ""
	nparams 1
	  param in name "inputLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code UnmappableCharacterException} with the
given length.
@param inputLength the length of the input
"
      end

      operation 7822722 "getInputLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the input.
@return the length of the input
"
      end

      operation 7822850 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the message.
@return the message
"
      end
    end

    class 993154 "UnsupportedCharsetException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Unchecked exception thrown when no support is available
for a requested charset.

@since 1.4
"
      classrelation 3308546 // <generalisation>
	relation 3308546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3308546 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 1816962 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1490765524727386367L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3308674 // charsetName (<unidirectional association>)
	relation 3308674 --->
	  a role_name "charsetName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3308674 // charsetName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7822978 "UnsupportedCharsetException"
	public explicit_return_type ""
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param  charsetName
        The name of the unsupported charset
"
      end

      operation 7823106 "getCharsetName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the unsupported charset.

@return  The name of the unsupported charset
"
      end
    end
  end

  deploymentview 168194 "charset"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 729986 "CharacterCodingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 991746 // CharacterCodingException
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.

ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 730114 "Charset"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.spi.CharsetProvider;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.ServiceLoader;
import java.util.ServiceConfigurationError;
import java.util.SortedMap;
import java.util.TreeMap;
import sun.misc.ASCIICaseInsensitiveComparator;
import sun.nio.cs.StandardCharsets;
import sun.nio.cs.ThreadLocalCoders;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 853634 // Charset
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 730242 "CharsetDecoder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.lang.ref.WeakReference;
import java.nio.charset.CoderMalfunctionError;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 167554 // CharsetDecoder
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 730370 "CharsetEncoder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.lang.ref.WeakReference;
import java.nio.charset.CoderMalfunctionError;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 167682 // CharsetEncoder
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 730498 "CoderMalfunctionError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 992386 // CoderMalfunctionError
      end
      comment "Copyright (c) 2001, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 730626 "CoderResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.WeakReference;
import java.nio.*;
import java.util.Map;
import java.util.HashMap;
${definition}"
      associated_elems
	class_ref 992258 // CoderResult
      end
      comment "Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 730754 "CodingErrorAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 992130 // CodingErrorAction
      end
      comment "Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 730882 "IllegalCharsetNameException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 992642 // IllegalCharsetNameException
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.

ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















 -- This file was mechanically generated: Do not edit! -- //"
    end

    artifact 731010 "MalformedInputException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 992770 // MalformedInputException
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 731138 "StandardCharsets"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 992898 // StandardCharsets
      end
      comment "Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 731266 "UnmappableCharacterException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 993026 // UnmappableCharacterException
      end
      comment "Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 731394 "UnsupportedCharsetException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 993154 // UnsupportedCharsetException
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.

ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















 -- This file was mechanically generated: Do not edit! -- //"
    end
  end

  package_ref 182274 // spi
end
