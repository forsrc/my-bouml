class RangeIntSpliterator
!!!9588098.java!!!	RangeIntSpliterator(in from : int, in upTo : int, inout closed : boolean)
            this(from, upTo, closed ? 1 : 0);
!!!9588226.java!!!	RangeIntSpliterator(in from : int, in upTo : int, in last : int)
            this.from = from;
            this.upTo = upTo;
            this.last = last;
!!!9588354.java!!!	tryAdvance(inout consumer : IntConsumer) : boolean
            Objects.requireNonNull(consumer);

            final int i = from;
            if (i < upTo) {
                from++;
                consumer.accept(i);
                return true;
            }
            else if (last > 0) {
                last = 0;
                consumer.accept(i);
                return true;
            }
            return false;
!!!9588482.java!!!	forEachRemaining(inout consumer : IntConsumer) : void
            Objects.requireNonNull(consumer);

            int i = from;
            final int hUpTo = upTo;
            int hLast = last;
            from = upTo;
            last = 0;
            while (i < hUpTo) {
                consumer.accept(i++);
            }
            if (hLast > 0) {
                // Last element of closed range
                consumer.accept(i);
            }
!!!9588610.java!!!	estimateSize() : long
            // Ensure ranges of size > Integer.MAX_VALUE report the correct size
            return ((long) upTo) - from + last;
!!!9588738.java!!!	characteristics() : int
            return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED |
                   Spliterator.IMMUTABLE | Spliterator.NONNULL |
                   Spliterator.DISTINCT | Spliterator.SORTED;
!!!9588866.java!!!	getComparator() : Comparator
            return null;
!!!9588994.java!!!	trySplit() : Spliterator::OfInt
            long size = estimateSize();
            return size <= 1
                   ? null
                   // Left split always has a half-open range
                   : new RangeIntSpliterator(from, from = from + splitPoint(size), 0);
!!!9589122.java!!!	splitPoint(in size : long) : int
            int d = (size < BALANCED_SPLIT_THRESHOLD) ? 2 : RIGHT_BALANCED_SPLIT_RATIO;
            // Cast to int is safe since:
            //   2 <= size < 2^32
            //   2 <= d <= 8
            return (int) (size / d);
