class Canonicalizer
!!!5318402.java!!!	Canonicalizer(inout algorithmURI : String)
        try {
            Class<? extends CanonicalizerSpi> implementingClass =
                canonicalizerHash.get(algorithmURI);

            canonicalizerSpi = implementingClass.newInstance();
            canonicalizerSpi.reset = true;
        } catch (Exception e) {
            Object exArgs[] = { algorithmURI };
            throw new InvalidCanonicalizerException(
                "signature.Canonicalizer.UnknownCanonicalizer", exArgs, e
            );
        }
!!!5318530.java!!!	getInstance(inout algorithmURI : String) : Canonicalizer
        return new Canonicalizer(algorithmURI);
!!!5318658.java!!!	register(inout algorithmURI : String, inout implementingClass : String) : void
        JavaUtils.checkRegisterPermission();
        // check whether URI is already registered
        Class<? extends CanonicalizerSpi> registeredClass =
            canonicalizerHash.get(algorithmURI);

        if (registeredClass != null)  {
            Object exArgs[] = { algorithmURI, registeredClass };
            throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered", exArgs);
        }

        canonicalizerHash.put(
            algorithmURI, (Class<? extends CanonicalizerSpi>)Class.forName(implementingClass)
        );
!!!5318786.java!!!	register(inout algorithmURI : String, inout implementingClass : Class) : void
        JavaUtils.checkRegisterPermission();
        // check whether URI is already registered
        Class<? extends CanonicalizerSpi> registeredClass = canonicalizerHash.get(algorithmURI);

        if (registeredClass != null)  {
            Object exArgs[] = { algorithmURI, registeredClass };
            throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered", exArgs);
        }

        canonicalizerHash.put(algorithmURI, implementingClass);
!!!5318914.java!!!	registerDefaultAlgorithms() : void
        canonicalizerHash.put(
            Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS,
            Canonicalizer20010315OmitComments.class
        );
        canonicalizerHash.put(
            Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS,
            Canonicalizer20010315WithComments.class
        );
        canonicalizerHash.put(
            Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS,
            Canonicalizer20010315ExclOmitComments.class
        );
        canonicalizerHash.put(
            Canonicalizer.ALGO_ID_C14N_EXCL_WITH_COMMENTS,
            Canonicalizer20010315ExclWithComments.class
        );
        canonicalizerHash.put(
            Canonicalizer.ALGO_ID_C14N11_OMIT_COMMENTS,
            Canonicalizer11_OmitComments.class
        );
        canonicalizerHash.put(
            Canonicalizer.ALGO_ID_C14N11_WITH_COMMENTS,
            Canonicalizer11_WithComments.class
        );
        canonicalizerHash.put(
            Canonicalizer.ALGO_ID_C14N_PHYSICAL,
            CanonicalizerPhysical.class
        );
!!!5319042.java!!!	getURI() : String
        return canonicalizerSpi.engineGetURI();
!!!5319170.java!!!	getIncludeComments() : boolean
        return canonicalizerSpi.engineGetIncludeComments();
!!!5319298.java!!!	canonicalize(inout inputBytes : byte [[]]) : byte
        InputStream bais = new ByteArrayInputStream(inputBytes);
        InputSource in = new InputSource(bais);
        DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();
        dfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);

        dfactory.setNamespaceAware(true);

        // needs to validate for ID attribute normalization
        dfactory.setValidating(true);

        DocumentBuilder db = dfactory.newDocumentBuilder();

        /*
         * for some of the test vectors from the specification,
         * there has to be a validating parser for ID attributes, default
         * attribute values, NMTOKENS, etc.
         * Unfortunately, the test vectors do use different DTDs or
         * even no DTD. So Xerces 1.3.1 fires many warnings about using
         * ErrorHandlers.
         *
         * Text from the spec:
         *
         * The input octet stream MUST contain a well-formed XML document,
         * but the input need not be validated. However, the attribute
         * value normalization and entity reference resolution MUST be
         * performed in accordance with the behaviors of a validating
         * XML processor. As well, nodes for default attributes (declared
         * in the ATTLIST with an AttValue but not specified) are created
         * in each element. Thus, the declarations in the document type
         * declaration are used to help create the canonical form, even
         * though the document type declaration is not retained in the
         * canonical form.
         */
        db.setErrorHandler(new com.sun.org.apache.xml.internal.security.utils.IgnoreAllErrorHandler());

        Document document = db.parse(in);
        return this.canonicalizeSubtree(document);
!!!5319426.java!!!	canonicalizeSubtree(inout node : Node) : byte
        return canonicalizerSpi.engineCanonicalizeSubTree(node);
!!!5319554.java!!!	canonicalizeSubtree(inout node : Node, inout inclusiveNamespaces : String) : byte
        return canonicalizerSpi.engineCanonicalizeSubTree(node, inclusiveNamespaces);
!!!5319682.java!!!	canonicalizeXPathNodeSet(inout xpathNodeSet : NodeList) : byte
        return canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet);
!!!5319810.java!!!	canonicalizeXPathNodeSet(inout xpathNodeSet : NodeList, inout inclusiveNamespaces : String) : byte
        return
            canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet, inclusiveNamespaces);
!!!5319938.java!!!	canonicalizeXPathNodeSet(inout xpathNodeSet : Set) : byte
        return canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet);
!!!5320066.java!!!	canonicalizeXPathNodeSet(inout xpathNodeSet : Set, inout inclusiveNamespaces : String) : byte
        return
            canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet, inclusiveNamespaces);
!!!5320194.java!!!	setWriter(inout os : OutputStream) : void
        canonicalizerSpi.setWriter(os);
!!!5320322.java!!!	getImplementingCanonicalizerClass() : String
        return canonicalizerSpi.getClass().getName();
!!!5320450.java!!!	notReset() : void
        canonicalizerSpi.reset = false;
