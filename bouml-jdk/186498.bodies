class ArrayList
!!!8597250.java!!!	ArrayList(in initialCapacity : int)
        if (initialCapacity > 0) {
            this.elementData = new Object[initialCapacity];
        } else if (initialCapacity == 0) {
            this.elementData = EMPTY_ELEMENTDATA;
        } else {
            throw new IllegalArgumentException("Illegal Capacity: "+
                                               initialCapacity);
        }
!!!8597378.java!!!	ArrayList()
        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
!!!8597506.java!!!	ArrayList(inout c : Collection)
        elementData = c.toArray();
        if ((size = elementData.length) != 0) {
            // c.toArray might (incorrectly) not return Object[] (see 6260652)
            if (elementData.getClass() != Object[].class)
                elementData = Arrays.copyOf(elementData, size, Object[].class);
        } else {
            // replace with empty array.
            this.elementData = EMPTY_ELEMENTDATA;
        }
!!!8597634.java!!!	trimToSize() : void
        modCount++;
        if (size < elementData.length) {
            elementData = (size == 0)
              ? EMPTY_ELEMENTDATA
              : Arrays.copyOf(elementData, size);
        }
!!!8597762.java!!!	ensureCapacity(in minCapacity : int) : void
        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
            // any size if not default element table
            ? 0
            // larger than default for default empty table. It's already
            // supposed to be at default size.
            : DEFAULT_CAPACITY;

        if (minCapacity > minExpand) {
            ensureExplicitCapacity(minCapacity);
        }
!!!8597890.java!!!	ensureCapacityInternal(in minCapacity : int) : void
        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
        }

        ensureExplicitCapacity(minCapacity);
!!!8598018.java!!!	ensureExplicitCapacity(in minCapacity : int) : void
        modCount++;

        // overflow-conscious code
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
!!!8598146.java!!!	grow(in minCapacity : int) : void
        // overflow-conscious code
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity + (oldCapacity >> 1);
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
!!!8598274.java!!!	hugeCapacity(in minCapacity : int) : int
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
!!!8598402.java!!!	size() : int
        return size;
!!!8598530.java!!!	isEmpty() : boolean
        return size == 0;
!!!8598658.java!!!	contains(inout o : Object) : boolean
        return indexOf(o) >= 0;
!!!8598786.java!!!	indexOf(inout o : Object) : int
        if (o == null) {
            for (int i = 0; i < size; i++)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = 0; i < size; i++)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
!!!8598914.java!!!	lastIndexOf(inout o : Object) : int
        if (o == null) {
            for (int i = size-1; i >= 0; i--)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = size-1; i >= 0; i--)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
!!!8599042.java!!!	clone() : Object
        try {
            ArrayList<?> v = (ArrayList<?>) super.clone();
            v.elementData = Arrays.copyOf(elementData, size);
            v.modCount = 0;
            return v;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
!!!8599170.java!!!	toArray() : Object
        return Arrays.copyOf(elementData, size);
!!!8599298.java!!!	toArray(inout a : T [[]]) : T
        if (a.length < size)
            // Make a new array of a's runtime type, but my contents:
            return (T[]) Arrays.copyOf(elementData, size, a.getClass());
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size)
            a[size] = null;
        return a;
!!!8599426.java!!!	elementData(in index : int) : E
        return (E) elementData[index];
!!!8599554.java!!!	get(in index : int) : E
        rangeCheck(index);

        return elementData(index);
!!!8599682.java!!!	set(in index : int, inout element : E) : E
        rangeCheck(index);

        E oldValue = elementData(index);
        elementData[index] = element;
        return oldValue;
!!!8599810.java!!!	add(inout e : E) : boolean
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        elementData[size++] = e;
        return true;
!!!8599938.java!!!	add(in index : int, inout element : E) : void
        rangeCheckForAdd(index);

        ensureCapacityInternal(size + 1);  // Increments modCount!!
        System.arraycopy(elementData, index, elementData, index + 1,
                         size - index);
        elementData[index] = element;
        size++;
!!!8600066.java!!!	remove(in index : int) : E
        rangeCheck(index);

        modCount++;
        E oldValue = elementData(index);

        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--size] = null; // clear to let GC do its work

        return oldValue;
!!!8600194.java!!!	remove(inout o : Object) : boolean
        if (o == null) {
            for (int index = 0; index < size; index++)
                if (elementData[index] == null) {
                    fastRemove(index);
                    return true;
                }
        } else {
            for (int index = 0; index < size; index++)
                if (o.equals(elementData[index])) {
                    fastRemove(index);
                    return true;
                }
        }
        return false;
!!!8600322.java!!!	fastRemove(in index : int) : void
        modCount++;
        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--size] = null; // clear to let GC do its work
!!!8600450.java!!!	clear() : void
        modCount++;

        // clear to let GC do its work
        for (int i = 0; i < size; i++)
            elementData[i] = null;

        size = 0;
!!!8600578.java!!!	addAll(inout c : Collection) : boolean
        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount
        System.arraycopy(a, 0, elementData, size, numNew);
        size += numNew;
        return numNew != 0;
!!!8600706.java!!!	addAll(in index : int, inout c : Collection) : boolean
        rangeCheckForAdd(index);

        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount

        int numMoved = size - index;
        if (numMoved > 0)
            System.arraycopy(elementData, index, elementData, index + numNew,
                             numMoved);

        System.arraycopy(a, 0, elementData, index, numNew);
        size += numNew;
        return numNew != 0;
!!!8600834.java!!!	removeRange(in fromIndex : int, in toIndex : int) : void
        modCount++;
        int numMoved = size - toIndex;
        System.arraycopy(elementData, toIndex, elementData, fromIndex,
                         numMoved);

        // clear to let GC do its work
        int newSize = size - (toIndex-fromIndex);
        for (int i = newSize; i < size; i++) {
            elementData[i] = null;
        }
        size = newSize;
!!!8600962.java!!!	rangeCheck(in index : int) : void
        if (index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
!!!8601090.java!!!	rangeCheckForAdd(in index : int) : void
        if (index > size || index < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
!!!8601218.java!!!	outOfBoundsMsg(in index : int) : String
        return "Index: "+index+", Size: "+size;
!!!8601346.java!!!	removeAll(inout c : Collection) : boolean
        Objects.requireNonNull(c);
        return batchRemove(c, false);
!!!8601474.java!!!	retainAll(inout c : Collection) : boolean
        Objects.requireNonNull(c);
        return batchRemove(c, true);
!!!8601602.java!!!	batchRemove(inout c : Collection, inout complement : boolean) : boolean
        final Object[] elementData = this.elementData;
        int r = 0, w = 0;
        boolean modified = false;
        try {
            for (; r < size; r++)
                if (c.contains(elementData[r]) == complement)
                    elementData[w++] = elementData[r];
        } finally {
            // Preserve behavioral compatibility with AbstractCollection,
            // even if c.contains() throws.
            if (r != size) {
                System.arraycopy(elementData, r,
                                 elementData, w,
                                 size - r);
                w += size - r;
            }
            if (w != size) {
                // clear to let GC do its work
                for (int i = w; i < size; i++)
                    elementData[i] = null;
                modCount += size - w;
                size = w;
                modified = true;
            }
        }
        return modified;
!!!8601730.java!!!	writeObject(inout s : ObjectOutputStream) : void
        // Write out element count, and any hidden stuff
        int expectedModCount = modCount;
        s.defaultWriteObject();

        // Write out size as capacity for behavioural compatibility with clone()
        s.writeInt(size);

        // Write out all elements in the proper order.
        for (int i=0; i<size; i++) {
            s.writeObject(elementData[i]);
        }

        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
!!!8601858.java!!!	readObject(inout s : ObjectInputStream) : void
        elementData = EMPTY_ELEMENTDATA;

        // Read in size, and any hidden stuff
        s.defaultReadObject();

        // Read in capacity
        s.readInt(); // ignored

        if (size > 0) {
            // be like clone(), allocate array based upon size not capacity
            ensureCapacityInternal(size);

            Object[] a = elementData;
            // Read in all elements in the proper order.
            for (int i=0; i<size; i++) {
                a[i] = s.readObject();
            }
        }
!!!8601986.java!!!	listIterator(in index : int) : ListIterator
        if (index < 0 || index > size)
            throw new IndexOutOfBoundsException("Index: "+index);
        return new ListItr(index);
!!!8602114.java!!!	listIterator() : ListIterator
        return new ListItr(0);
!!!8602242.java!!!	iterator() : Iterator
        return new Itr();
