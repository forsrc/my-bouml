format 222
"script" // jdk1.8::javax::script
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/script/"
  java_package "javax.script"
  classview 178434 "script"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1240706 "AbstractScriptEngine"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides a standard implementation for several of the variants of the <code>eval</code>
method.
<br><br>
<code><b>eval(Reader)</b></code><p><code><b>eval(String)</b></code><p>
<code><b>eval(String, Bindings)</b></code><p><code><b>eval(Reader, Bindings)</b></code>
<br><br> are implemented using the abstract methods
<br><br>
<code><b>eval(Reader,ScriptContext)</b></code> or
<code><b>eval(String, ScriptContext)</b></code>
<br><br>
with a <code>SimpleScriptContext</code>.
<br><br>
A <code>SimpleScriptContext</code> is used as the default <code>ScriptContext</code>
of the <code>AbstractScriptEngine</code>..

@author Mike Grogan
@since 1.6
"
      classrelation 4006146 // <realization>
	relation 4006146 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4006146 // <realization>
	  b parent class_ref 1240834 // ScriptEngine
      end

      classrelation 4006274 // context (<unidirectional association>)
	relation 4006274 --->
	  a role_name "context" protected
	    comment "
The default <code>ScriptContext</code> of this <code>AbstractScriptEngine</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4006274 // context (<unidirectional association>)
	  b parent class_ref 1240962 // ScriptContext
      end

      operation 10195842 "AbstractScriptEngine"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of AbstractScriptEngine using a <code>SimpleScriptContext</code>
as its default <code>ScriptContext</code>.
"
      end

      operation 10195970 "AbstractScriptEngine"
	public explicit_return_type ""
	nparams 1
	  param inout name "n" type class_ref 1241218 // Bindings
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance using the specified <code>Bindings</code> as the
<code>ENGINE_SCOPE</code> <code>Bindings</code> in the protected <code>context</code> field.

@param n The specified <code>Bindings</code>.
@throws NullPointerException if n is null.
"
      end

      operation 10196098 "setContext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ctxt" type class_ref 1240962 // ScriptContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the protected <code>context</code> field to the specified
<code>ScriptContext</code>.

@param ctxt The specified <code>ScriptContext</code>.
@throws NullPointerException if ctxt is null.
"
      end

      operation 10196226 "getContext"
	public return_type class_ref 1240962 // ScriptContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the protected <code>context</code> field.

@return The value of the protected <code>context</code> field.
"
      end

      operation 10196354 "getBindings"
	public return_type class_ref 1241218 // Bindings
	nparams 1
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Bindings</code> with the specified scope value in
the protected <code>context</code> field.

@param scope The specified scope

@return The corresponding <code>Bindings</code>.

@throws IllegalArgumentException if the value of scope is
invalid for the type the protected <code>context</code> field.
"
      end

      operation 10196482 "setBindings"
	public explicit_return_type "void"
	nparams 2
	  param inout name "bindings" type class_ref 1241218 // Bindings
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>Bindings</code> with the corresponding scope value in the
<code>context</code> field.

@param bindings The specified <code>Bindings</code>.
@param scope The specified scope.

@throws IllegalArgumentException if the value of scope is
invalid for the type the <code>context</code> field.
@throws NullPointerException if the bindings is null and the scope is
<code>ScriptContext.ENGINE_SCOPE</code>
"
      end

      operation 10196610 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified value with the specified key in the <code>ENGINE_SCOPE</code>
<code>Bindings</code> of the protected <code>context</code> field.

@param key The specified key.
@param value The specified value.

@throws NullPointerException if key is null.
@throws IllegalArgumentException if key is empty.
"
      end

      operation 10196738 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value for the specified key in the <code>ENGINE_SCOPE</code> of the
protected <code>context</code> field.

@return The value for the specified key.

@throws NullPointerException if key is null.
@throws IllegalArgumentException if key is empty.
"
      end

      operation 10196866 "eval"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "reader" type class_ref 407298 // Reader
	  param inout name "bindings" type class_ref 1241218 // Bindings
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>eval(Reader, Bindings)</code> calls the abstract
<code>eval(Reader, ScriptContext)</code> method, passing it a <code>ScriptContext</code>
whose Reader, Writers and Bindings for scopes other that <code>ENGINE_SCOPE</code>
are identical to those members of the protected <code>context</code> field.  The specified
<code>Bindings</code> is used instead of the <code>ENGINE_SCOPE</code>

<code>Bindings</code> of the <code>context</code> field.

@param reader A <code>Reader</code> containing the source of the script.
@param bindings A <code>Bindings</code> to use for the <code>ENGINE_SCOPE</code>
while the script executes.

@return The return value from <code>eval(Reader, ScriptContext)</code>
@throws ScriptException if an error occurs in script.
@throws NullPointerException if any of the parameters is null.
"
      end

      operation 10196994 "eval"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "script" type class_ref 128130 // String
	  param inout name "bindings" type class_ref 1241218 // Bindings
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as <code>eval(Reader, Bindings)</code> except that the abstract
<code>eval(String, ScriptContext)</code> is used.

@param script A <code>String</code> containing the source of the script.

@param bindings A <code>Bindings</code> to use as the <code>ENGINE_SCOPE</code>
while the script executes.

@return The return value from <code>eval(String, ScriptContext)</code>
@throws ScriptException if an error occurs in script.
@throws NullPointerException if any of the parameters is null.
"
      end

      operation 10197122 "eval"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>eval(Reader)</code> calls the abstract
<code>eval(Reader, ScriptContext)</code> passing the value of the <code>context</code>
field.

@param reader A <code>Reader</code> containing the source of the script.
@return The return value from <code>eval(Reader, ScriptContext)</code>
@throws ScriptException if an error occurs in script.
@throws NullPointerException if any of the parameters is null.
"
      end

      operation 10197250 "eval"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "script" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as <code>eval(Reader)</code> except that the abstract
<code>eval(String, ScriptContext)</code> is used.

@param script A <code>String</code> containing the source of the script.
@return The return value from <code>eval(String, ScriptContext)</code>
@throws ScriptException if an error occurs in script.
@throws NullPointerException if any of the parameters is null.
"
      end

      operation 10197378 "getScriptContext"
	protected return_type class_ref 1240962 // ScriptContext
	nparams 1
	  param inout name "nn" type class_ref 1241218 // Bindings
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>SimpleScriptContext</code>.  The <code>SimpleScriptContext</code>:
<br><br>
<ul>
<li>Uses the specified <code>Bindings</code> for its <code>ENGINE_SCOPE</code>
</li>
<li>Uses the <code>Bindings</code> returned by the abstract <code>getGlobalScope</code>
method as its <code>GLOBAL_SCOPE</code>
</li>
<li>Uses the Reader and Writer in the default <code>ScriptContext</code> of this
<code>ScriptEngine</code>
</li>
</ul>
<br><br>
A <code>SimpleScriptContext</code> returned by this method is used to implement eval methods
using the abstract <code>eval(Reader,Bindings)</code> and <code>eval(String,Bindings)</code>
versions.

@param nn Bindings to use for the <code>ENGINE_SCOPE</code>
@return The <code>SimpleScriptContext</code>
"
      end
    end

    class 1240834 "ScriptEngine"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>ScriptEngine</code> is the fundamental interface whose methods must be
fully functional in every implementation of this specification.
<br><br>
These methods provide basic scripting functionality.  Applications written to this
simple interface are expected to work with minimal modifications in every implementation.
It includes methods that execute scripts, and ones that set and get values.
<br><br>
The values are key/value pairs of two types.  The first type of pairs consists of
those whose keys are reserved and defined in this specification or  by individual
implementations.  The values in the pairs with reserved keys have specified meanings.
<br><br>
The other type of pairs consists of those that create Java language Bindings, the values are
usually represented in scripts by the corresponding keys or by decorated forms of them.

@author Mike Grogan
@since 1.6
"
      classrelation 4005250 // ARGV (<unidirectional association>)
	relation 4005250 --->
	  a role_name "ARGV" init_value "\"javax.script.argv\"" class_relation const_relation public
	    comment "
Reserved key for a named value that passes
an array of positional arguments to a script.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4005250 // ARGV (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4005378 // FILENAME (<unidirectional association>)
	relation 4005378 --->
	  a role_name "FILENAME" init_value " \"javax.script.filename\"" class_relation const_relation public
	    comment "
Reserved key for a named value that is
the name of the file being executed.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4005378 // FILENAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4005506 // ENGINE (<unidirectional association>)
	relation 4005506 --->
	  a role_name "ENGINE" init_value " \"javax.script.engine\"" class_relation const_relation public
	    comment "
Reserved key for a named value that is
the name of the <code>ScriptEngine</code> implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4005506 // ENGINE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4005634 // ENGINE_VERSION (<unidirectional association>)
	relation 4005634 --->
	  a role_name "ENGINE_VERSION" init_value " \"javax.script.engine_version\"" class_relation const_relation public
	    comment "
Reserved key for a named value that identifies
the version of the <code>ScriptEngine</code> implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4005634 // ENGINE_VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4005762 // NAME (<unidirectional association>)
	relation 4005762 --->
	  a role_name "NAME" init_value " \"javax.script.name\"" class_relation const_relation public
	    comment "
Reserved key for a named value that identifies
the short name of the scripting language.  The name is used by the
<code>ScriptEngineManager</code> to locate a <code>ScriptEngine</code>
with a given name in the <code>getEngineByName</code> method.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4005762 // NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4005890 // LANGUAGE (<unidirectional association>)
	relation 4005890 --->
	  a role_name "LANGUAGE" init_value " \"javax.script.language\"" class_relation const_relation public
	    comment "
Reserved key for a named value that is
the full name of Scripting Language supported by the implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4005890 // LANGUAGE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4006018 // LANGUAGE_VERSION (<unidirectional association>)
	relation 4006018 --->
	  a role_name "LANGUAGE_VERSION" init_value "\"javax.script.language_version\"" class_relation const_relation public
	    comment "
Reserved key for the named value that identifies
the version of the scripting language supported by the implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4006018 // LANGUAGE_VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10194050 "eval"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "script" type class_ref 128130 // String
	  param inout name "context" type class_ref 1240962 // ScriptContext
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the immediate execution of the script whose source is the String
passed as the first argument.  The script may be reparsed or recompiled before
execution.  State left in the engine from previous executions, including
variable values and compiled procedures may be visible during this execution.

@param script The script to be executed by the script engine.

@param context A <code>ScriptContext</code> exposing sets of attributes in
different scopes.  The meanings of the scopes <code>ScriptContext.GLOBAL_SCOPE</code>,
and <code>ScriptContext.ENGINE_SCOPE</code> are defined in the specification.
<br><br>
The <code>ENGINE_SCOPE</code> <code>Bindings</code> of the <code>ScriptContext</code> contains the
bindings of scripting variables to application objects to be used during this
script execution.


@return The value returned from the execution of the script.

@throws ScriptException if an error occurs in script. ScriptEngines should create and throw
<code>ScriptException</code> wrappers for checked Exceptions thrown by underlying scripting
implementations.
@throws NullPointerException if either argument is null.
"
      end

      operation 10194178 "eval"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "reader" type class_ref 407298 // Reader
	  param inout name "context" type class_ref 1240962 // ScriptContext
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as <code>eval(String, ScriptContext)</code> where the source of the script
is read from a <code>Reader</code>.

@param reader The source of the script to be executed by the script engine.

@param context The <code>ScriptContext</code> passed to the script engine.

@return The value returned from the execution of the script.

@throws ScriptException if an error occurs in script.
@throws NullPointerException if either argument is null.
"
      end

      operation 10194306 "eval"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "script" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the specified script.  The default <code>ScriptContext</code> for the <code>ScriptEngine</code>
is used.

@param script The script language source to be executed.

@return The value returned from the execution of the script.

@throws ScriptException if error occurs in script.
@throws NullPointerException if the argument is null.
"
      end

      operation 10194434 "eval"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as <code>eval(String)</code> except that the source of the script is
provided as a <code>Reader</code>

@param reader The source of the script.

@return The value returned by the script.

@throws ScriptException if an error occurs in script.
@throws NullPointerException if the argument is null.
"
      end

      operation 10194562 "eval"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "script" type class_ref 128130 // String
	  param inout name "n" type class_ref 1241218 // Bindings
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the script using the <code>Bindings</code> argument as the <code>ENGINE_SCOPE</code>
<code>Bindings</code> of the <code>ScriptEngine</code> during the script execution.  The
<code>Reader</code>, <code>Writer</code> and non-<code>ENGINE_SCOPE</code> <code>Bindings</code> of the
default <code>ScriptContext</code> are used. The <code>ENGINE_SCOPE</code>
<code>Bindings</code> of the <code>ScriptEngine</code> is not changed, and its
mappings are unaltered by the script execution.

@param script The source for the script.

@param n The <code>Bindings</code> of attributes to be used for script execution.

@return The value returned by the script.

@throws ScriptException if an error occurs in script.
@throws NullPointerException if either argument is null.
"
      end

      operation 10194690 "eval"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "reader" type class_ref 407298 // Reader
	  param inout name "n" type class_ref 1241218 // Bindings
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as <code>eval(String, Bindings)</code> except that the source of the script
is provided as a <code>Reader</code>.

@param reader The source of the script.
@param n The <code>Bindings</code> of attributes.

@return The value returned by the script.

@throws ScriptException if an error occurs.
@throws NullPointerException if either argument is null.
"
      end

      operation 10194818 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a key/value pair in the state of the ScriptEngine that may either create
a Java Language Binding to be used in the execution of scripts or be used in some
other way, depending on whether the key is reserved.  Must have the same effect as
<code>getBindings(ScriptContext.ENGINE_SCOPE).put</code>.

@param key The name of named value to add
@param value The value of named value to add.

@throws NullPointerException if key is null.
@throws IllegalArgumentException if key is empty.
"
      end

      operation 10194946 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a value set in the state of this engine.  The value might be one
which was set using <code>setValue</code> or some other value in the state
of the <code>ScriptEngine</code>, depending on the implementation.  Must have the same effect
as <code>getBindings(ScriptContext.ENGINE_SCOPE).get</code>

@param key The key whose value is to be returned
@return the value for the given key

@throws NullPointerException if key is null.
@throws IllegalArgumentException if key is empty.
"
      end

      operation 10195074 "getBindings"
	public return_type class_ref 1241218 // Bindings
	nparams 1
	  param in name "scope" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a scope of named values.  The possible scopes are:
<br><br>
<ul>
<li><code>ScriptContext.GLOBAL_SCOPE</code> - The set of named values representing global
scope. If this <code>ScriptEngine</code> is created by a <code>ScriptEngineManager</code>,
then the manager sets global scope bindings. This may be <code>null</code> if no global
scope is associated with this <code>ScriptEngine</code></li>
<li><code>ScriptContext.ENGINE_SCOPE</code> - The set of named values representing the state of
this <code>ScriptEngine</code>.  The values are generally visible in scripts using
the associated keys as variable names.</li>
<li>Any other value of scope defined in the default <code>ScriptContext</code> of the <code>ScriptEngine</code>.
</li>
</ul>
<br><br>
The <code>Bindings</code> instances that are returned must be identical to those returned by the
<code>getBindings</code> method of <code>ScriptContext</code> called with corresponding arguments on
the default <code>ScriptContext</code> of the <code>ScriptEngine</code>.

@param scope Either <code>ScriptContext.ENGINE_SCOPE</code> or <code>ScriptContext.GLOBAL_SCOPE</code>
which specifies the <code>Bindings</code> to return.  Implementations of <code>ScriptContext</code>
may define additional scopes.  If the default <code>ScriptContext</code> of the <code>ScriptEngine</code>
defines additional scopes, any of them can be passed to get the corresponding <code>Bindings</code>.

@return The <code>Bindings</code> with the specified scope.

@throws IllegalArgumentException if specified scope is invalid

"
      end

      operation 10195202 "setBindings"
	public explicit_return_type "void"
	nparams 2
	  param inout name "bindings" type class_ref 1241218 // Bindings
	  param in name "scope" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a scope of named values to be used by scripts.  The possible scopes are:
<br><br>
<ul>
<li><code>ScriptContext.ENGINE_SCOPE</code> - The specified <code>Bindings</code> replaces the
engine scope of the <code>ScriptEngine</code>.
</li>
<li><code>ScriptContext.GLOBAL_SCOPE</code> - The specified <code>Bindings</code> must be visible
as the <code>GLOBAL_SCOPE</code>.
</li>
<li>Any other value of scope defined in the default <code>ScriptContext</code> of the <code>ScriptEngine</code>.
</li>
</ul>
<br><br>
The method must have the same effect as calling the <code>setBindings</code> method of
<code>ScriptContext</code> with the corresponding value of <code>scope</code> on the default
<code>ScriptContext</code> of the <code>ScriptEngine</code>.

@param bindings The <code>Bindings</code> for the specified scope.
@param scope The specified scope.  Either <code>ScriptContext.ENGINE_SCOPE</code>,
<code>ScriptContext.GLOBAL_SCOPE</code>, or any other valid value of scope.

@throws IllegalArgumentException if the scope is invalid
@throws NullPointerException if the bindings is null and the scope is
<code>ScriptContext.ENGINE_SCOPE</code>
"
      end

      operation 10195330 "createBindings"
	public return_type class_ref 1241218 // Bindings
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an uninitialized <code>Bindings</code>.

@return A <code>Bindings</code> that can be used to replace the state of this <code>ScriptEngine</code>.
"
      end

      operation 10195458 "getContext"
	public return_type class_ref 1240962 // ScriptContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default <code>ScriptContext</code> of the <code>ScriptEngine</code> whose Bindings, Reader
and Writers are used for script executions when no <code>ScriptContext</code> is specified.

@return The default <code>ScriptContext</code> of the <code>ScriptEngine</code>.
"
      end

      operation 10195586 "setContext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "context" type class_ref 1240962 // ScriptContext
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the default <code>ScriptContext</code> of the <code>ScriptEngine</code> whose Bindings, Reader
and Writers are used for script executions when no <code>ScriptContext</code> is specified.

@param context A <code>ScriptContext</code> that will replace the default <code>ScriptContext</code> in
the <code>ScriptEngine</code>.
@throws NullPointerException if context is null.
"
      end

      operation 10195714 "getFactory"
	public return_type class_ref 1241346 // ScriptEngineFactory
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>ScriptEngineFactory</code> for the class to which this <code>ScriptEngine</code> belongs.

@return The <code>ScriptEngineFactory</code>
"
      end
    end

    class 1240962 "ScriptContext"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface whose implementing classes are used to connect Script Engines
with objects, such as scoped Bindings, in hosting applications.  Each scope is a set
of named attributes whose values can be set and retrieved using the
<code>ScriptContext</code> methods. ScriptContexts also expose Readers and Writers
that can be used by the ScriptEngines for input and output.

@author Mike Grogan
@since 1.6
"
      attribute 2342786 "ENGINE_SCOPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "EngineScope attributes are visible during the lifetime of a single
<code>ScriptEngine</code> and a set of attributes is maintained for each
engine.

"
      end

      attribute 2342914 "GLOBAL_SCOPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "GlobalScope attributes are visible to all engines created by same ScriptEngineFactory.

"
      end

      operation 10199426 "setBindings"
	public explicit_return_type "void"
	nparams 2
	  param inout name "bindings" type class_ref 1241218 // Bindings
	  param in name "scope" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a <code>Bindings</code> instance with a particular scope in this
<code>ScriptContext</code>.  Calls to the <code>getAttribute</code> and
<code>setAttribute</code> methods must map to the <code>get</code> and
<code>put</code> methods of the <code>Bindings</code> for the specified scope.

@param  bindings The <code>Bindings</code> to associate with the given scope
@param scope The scope

@throws IllegalArgumentException If no <code>Bindings</code> is defined for the
specified scope value in ScriptContexts of this type.
@throws NullPointerException if value of scope is <code>ENGINE_SCOPE</code> and
the specified <code>Bindings</code> is null.

"
      end

      operation 10199554 "getBindings"
	public return_type class_ref 1241218 // Bindings
	nparams 1
	  param in name "scope" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>Bindings</code>  associated with the given scope in this
<code>ScriptContext</code>.

@return The associated <code>Bindings</code>.  Returns <code>null</code> if it has not
been set.

@param scope The scope
@throws IllegalArgumentException If no <code>Bindings</code> is defined for the
specified scope value in <code>ScriptContext</code> of this type.
"
      end

      operation 10199682 "setAttribute"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	  param in name "scope" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of an attribute in a given scope.

@param name The name of the attribute to set
@param value The value of the attribute
@param scope The scope in which to set the attribute

@throws IllegalArgumentException
        if the name is empty or if the scope is invalid.
@throws NullPointerException if the name is null.
"
      end

      operation 10199810 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "scope" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of an attribute in a given scope.

@param name The name of the attribute to retrieve.
@param scope The scope in which to retrieve the attribute.
@return The value of the attribute. Returns <code>null</code> is the name
does not exist in the given scope.

@throws IllegalArgumentException
        if the name is empty or if the value of scope is invalid.
@throws NullPointerException if the name is null.
"
      end

      operation 10199938 "removeAttribute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "scope" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an attribute in a given scope.

@param name The name of the attribute to remove
@param scope The scope in which to remove the attribute

@return The removed value.
@throws IllegalArgumentException
        if the name is empty or if the scope is invalid.
@throws NullPointerException if the name is null.
"
      end

      operation 10200066 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the attribute with the given name in
the scope occurring earliest in the search order.  The order
is determined by the numeric value of the scope parameter (lowest
scope values first.)

@param name The name of the the attribute to retrieve.
@return The value of the attribute in the lowest scope for
which an attribute with the given name is defined.  Returns
null if no attribute with the name exists in any scope.
@throws NullPointerException if the name is null.
@throws IllegalArgumentException if the name is empty.
"
      end

      operation 10200194 "getAttributesScope"
	public explicit_return_type "int"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the lowest scope in which an attribute is defined.
@param name Name of the attribute
.
@return The lowest scope.  Returns -1 if no attribute with the given
name is defined in any scope.
@throws NullPointerException if name is null.
@throws IllegalArgumentException if name is empty.
"
      end

      operation 10200322 "getWriter"
	public return_type class_ref 428034 // Writer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Writer</code> for scripts to use when displaying output.

@return The <code>Writer</code>.
"
      end

      operation 10200450 "getErrorWriter"
	public return_type class_ref 428034 // Writer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Writer</code> used to display error output.

@return The <code>Writer</code>
"
      end

      operation 10200578 "setWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "writer" type class_ref 428034 // Writer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>Writer</code> for scripts to use when displaying output.

@param writer The new <code>Writer</code>.
"
      end

      operation 10200706 "setErrorWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "writer" type class_ref 428034 // Writer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>Writer</code> used to display error output.

@param writer The <code>Writer</code>.
"
      end

      operation 10200834 "getReader"
	public return_type class_ref 407298 // Reader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Reader</code> to be used by the script to read
input.

@return The <code>Reader</code>.
"
      end

      operation 10200962 "setReader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>Reader</code> for scripts to read input
.
@param reader The new <code>Reader</code>.
"
      end

      operation 10201090 "getScopes"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns immutable <code>List</code> of all the valid values for
scope in the ScriptContext.

@return list of scope values
"
      end
    end

    class 1241090 "ScriptException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The generic <code>Exception</code> class for the Scripting APIs.  Checked
exception types thrown by underlying scripting implementations must be wrapped in instances of
<code>ScriptException</code>.  The class has members to store line and column numbers and
filenames if this information is available.

@author Mike Grogan
@since 1.6
"
      classrelation 4007170 // <generalisation>
	relation 4007170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4007170 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2343170 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8265071037049225001L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 4007298 // fileName (<unidirectional association>)
	relation 4007298 --->
	  a role_name "fileName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4007298 // fileName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2343298 "lineNumber"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2343426 "columnNumber"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10204802 "ScriptException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>ScriptException</code> with a String to be used in its message.
Filename, and line and column numbers are unspecified.

@param s The String to use in the message.
"
      end

      operation 10204930 "ScriptException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>ScriptException</code> wrapping an <code>Exception</code> thrown by an underlying
interpreter.  Line and column numbers and filename are unspecified.

@param e The wrapped <code>Exception</code>.
"
      end

      operation 10205058 "ScriptException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "fileName" type class_ref 128130 // String
	  param in name "lineNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>ScriptException</code> with message, filename and linenumber to
be used in error messages.

@param message The string to use in the message

@param fileName The file or resource name describing the location of a script error
causing the <code>ScriptException</code> to be thrown.

@param lineNumber A line number describing the location of a script error causing
the <code>ScriptException</code> to be thrown.
"
      end

      operation 10205186 "ScriptException"
	public explicit_return_type ""
	nparams 4
	  param inout name "message" type class_ref 128130 // String
	  param inout name "fileName" type class_ref 128130 // String
	  param in name "lineNumber" explicit_type "int"
	  param in name "columnNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>ScriptException</code> constructor specifying message, filename, line number
and column number.
@param message The message.
@param fileName The filename
@param lineNumber the line number.
@param columnNumber the column number.
"
      end

      operation 10205314 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a message containing the String passed to a constructor as well as
line and column numbers and filename if any of these are known.
@return The error message.
"
      end

      operation 10205442 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the line number on which an error occurred.
@return The line number.  Returns -1 if a line number is unavailable.
"
      end

      operation 10205570 "getColumnNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the column number on which an error occurred.
@return The column number.  Returns -1 if a column number is unavailable.
"
      end

      operation 10205698 "getFileName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the source of the script causing the error.
@return The file name of the script or some other string describing the script
source.  May return some implementation-defined string such as <i>&lt;unknown&gt;</i>
if a description of the source is unavailable.
"
      end
    end

    class 1241218 "Bindings"
      visibility public stereotype "interface"
      nactuals 2
      actual class class_ref 130178 // Map
        rank 0 explicit_value ""
      actual class class_ref 130178 // Map
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A mapping of key/value pairs, all of whose keys are
<code>Strings</code>.

@author Mike Grogan
@since 1.6
"
      classrelation 4006402 // <realization>
	relation 4006402 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 4006402 // <realization>
	  b parent class_ref 130178 // Map
      end

      operation 10197506 "put"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a named value.

@param name The name associated with the value.
@param value The value associated with the name.

@return The value previously associated with the given name.
Returns null if no value was previously associated with the name.

@throws NullPointerException if the name is null.
@throws IllegalArgumentException if the name is empty String.
"
      end

      operation 10197634 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "toMerge" type class_ref 130178 // Map
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends String, ? extends Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all the mappings in a given <code>Map</code> to this <code>Bindings</code>.
@param toMerge The <code>Map</code> to merge with this one.

@throws NullPointerException
        if toMerge map is null or if some key in the map is null.
@throws IllegalArgumentException
        if some key in the map is an empty String.
"
      end

      operation 10197762 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the specified
key.  More formally, returns <tt>true</tt> if and only if
this map contains a mapping for a key <tt>k</tt> such that
<tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be
at most one such mapping.)

@param key key whose presence in this map is to be tested.
@return <tt>true</tt> if this map contains a mapping for the specified
        key.

@throws NullPointerException if key is null
@throws ClassCastException if key is not String
@throws IllegalArgumentException if key is empty String
"
      end

      operation 10197890 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which this map maps the specified key.  Returns
<tt>null</tt> if the map contains no mapping for this key.  A return
value of <tt>null</tt> does not <i>necessarily</i> indicate that the
map contains no mapping for the key; it's also possible that the map
explicitly maps the key to <tt>null</tt>.  The <tt>containsKey</tt>
operation may be used to distinguish these two cases.

<p>More formally, if this map contains a mapping from a key
<tt>k</tt> to a value <tt>v</tt> such that <tt>(key==null ? k==null :
key.equals(k))</tt>, then this method returns <tt>v</tt>; otherwise
it returns <tt>null</tt>.  (There can be at most one such mapping.)

@param key key whose associated value is to be returned.
@return the value to which this map maps the specified key, or
        <tt>null</tt> if the map contains no mapping for this key.

@throws NullPointerException if key is null
@throws ClassCastException if key is not String
@throws IllegalArgumentException if key is empty String
"
      end

      operation 10198018 "remove"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if it is present
(optional operation).   More formally, if this map contains a mapping
from key <tt>k</tt> to value <tt>v</tt> such that
<code>(key==null ?  k==null : key.equals(k))</code>, that mapping
is removed.  (The map can contain at most one such mapping.)

<p>Returns the value to which the map previously associated the key, or
<tt>null</tt> if the map contained no mapping for this key.  (A
<tt>null</tt> return can also indicate that the map previously
associated <tt>null</tt> with the specified key if the implementation
supports <tt>null</tt> values.)  The map will not contain a mapping for
the specified  key once the call returns.

@param key key whose mapping is to be removed from the map.
@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.

@throws NullPointerException if key is null
@throws ClassCastException if key is not String
@throws IllegalArgumentException if key is empty String
"
      end
    end

    class 1241346 "ScriptEngineFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>ScriptEngineFactory</code> is used to describe and instantiate
<code>ScriptEngines</code>.
<br><br>
Each class implementing <code>ScriptEngine</code> has a corresponding factory
that exposes metadata describing the engine class.
<br><br>The <code>ScriptEngineManager</code>
uses the service provider mechanism described in the <i>Jar File Specification</i> to obtain
instances of all <code>ScriptEngineFactories</code> available in
the current ClassLoader.

@since 1.6
"
      operation 10201218 "getEngineName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the full  name of the <code>ScriptEngine</code>.  For
instance an implementation based on the Mozilla Rhino Javascript engine
might return <i>Rhino Mozilla Javascript Engine</i>.
@return The name of the engine implementation.
"
      end

      operation 10201346 "getEngineVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of the <code>ScriptEngine</code>.
@return The <code>ScriptEngine</code> implementation version.
"
      end

      operation 10201474 "getExtensions"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable list of filename extensions, which generally identify scripts
written in the language supported by this <code>ScriptEngine</code>.
The array is used by the <code>ScriptEngineManager</code> to implement its
<code>getEngineByExtension</code> method.
@return The list of extensions.
"
      end

      operation 10201602 "getMimeTypes"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable list of mimetypes, associated with scripts that
can be executed by the engine.  The list is used by the
<code>ScriptEngineManager</code> class to implement its
<code>getEngineByMimetype</code> method.
@return The list of mime types.
"
      end

      operation 10201730 "getNames"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable list of  short names for the <code>ScriptEngine</code>, which may be used to
identify the <code>ScriptEngine</code> by the <code>ScriptEngineManager</code>.
For instance, an implementation based on the Mozilla Rhino Javascript engine might
return list containing {&quot;javascript&quot;, &quot;rhino&quot;}.
@return an immutable list of short names
"
      end

      operation 10201858 "getLanguageName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the scripting language supported by this
<code>ScriptEngine</code>.
@return The name of the supported language.
"
      end

      operation 10201986 "getLanguageVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of the scripting language supported by this
<code>ScriptEngine</code>.
@return The version of the supported language.
"
      end

      operation 10202114 "getParameter"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of an attribute whose meaning may be implementation-specific.
Keys for which the value is defined in all implementations are:
<ul>
<li>ScriptEngine.ENGINE</li>
<li>ScriptEngine.ENGINE_VERSION</li>
<li>ScriptEngine.LANGUAGE</li>
<li>ScriptEngine.LANGUAGE_VERSION</li>
<li>ScriptEngine.NAME</li>
</ul>
<p>
The values for these keys are the Strings returned by <code>getEngineName</code>,
<code>getEngineVersion</code>, <code>getLanguageName</code>,
<code>getLanguageVersion</code> for the first four keys respectively. For NAME, one of the Strings
returned by <code>getNames</code> is returned.<br><br>
A reserved key, <code><b>THREADING</b></code>, whose value describes the behavior of the engine
with respect to concurrent execution of scripts and maintenance of state is also defined.
These values for the <code><b>THREADING</b></code> key are:<br><br>
<ul>
<li><code>null</code> - The engine implementation is not thread safe, and cannot
be used to execute scripts concurrently on multiple threads.
<li><code>&quot;MULTITHREADED&quot;</code> - The engine implementation is internally
thread-safe and scripts may execute concurrently although effects of script execution
on one thread may be visible to scripts on other threads.
<li><code>&quot;THREAD-ISOLATED&quot;</code> - The implementation satisfies the requirements
of &quot;MULTITHREADED&quot;, and also, the engine maintains independent values
for symbols in scripts executing on different threads.
<li><code>&quot;STATELESS&quot;</code> - The implementation satisfies the requirements of
<li><code>&quot;THREAD-ISOLATED&quot;</code>.  In addition, script executions do not alter the
mappings in the <code>Bindings</code> which is the engine scope of the
<code>ScriptEngine</code>.  In particular, the keys in the <code>Bindings</code>
and their associated values are the same before and after the execution of the script.
</ul>
<br><br>
Implementations may define implementation-specific keys.

@param key The name of the parameter
@return The value for the given parameter. Returns <code>null</code> if no
value is assigned to the key.

"
      end

      operation 10202242 "getMethodCallSyntax"
	public return_type class_ref 128130 // String
	nparams 3
	  param inout name "obj" type class_ref 128130 // String
	  param inout name "m" type class_ref 128130 // String
	  param inout name "" explicit_type "String...args"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String which can be used to invoke a method of a  Java object using the syntax
of the supported scripting language.  For instance, an implementation for a Javascript
engine might be;

<pre>{@code
public String getMethodCallSyntax(String obj,
                                  String m, String... args) {
     String ret = obj;
     ret += \".\" + m + \"(\";
     for (int i = 0; i < args.length; i++) {
         ret += args[i];
         if (i < args.length - 1) {
             ret += \",\";
         }
     }
     ret += \")\";
     return ret;
}
} </pre>
<p>

@param obj The name representing the object whose method is to be invoked. The
name is the one used to create bindings using the <code>put</code> method of
<code>ScriptEngine</code>, the <code>put</code> method of an <code>ENGINE_SCOPE</code>
<code>Bindings</code>,or the <code>setAttribute</code> method
of <code>ScriptContext</code>.  The identifier used in scripts may be a decorated form of the
specified one.

@param m The name of the method to invoke.
@param args names of the arguments in the method call.

@return The String used to invoke the method in the syntax of the scripting language.
"
      end

      operation 10202370 "getOutputStatement"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "toDisplay" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String that can be used as a statement to display the specified String  using
the syntax of the supported scripting language.  For instance, the implementation for a Perl
engine might be;

<pre><code>
public String getOutputStatement(String toDisplay) {
     return \"print(\" + toDisplay + \")\";
}
</code></pre>

@param toDisplay The String to be displayed by the returned statement.
@return The string used to display the String in the syntax of the scripting language.


"
      end

      operation 10202498 "getProgram"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "" explicit_type "String...statements"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a valid scripting language executable program with given statements.
For instance an implementation for a PHP engine might be:

<pre>{@code
public String getProgram(String... statements) {
     String retval = \"<?\\n\";
     int len = statements.length;
     for (int i = 0; i < len; i++) {
         retval += statements[i] + \";\\n\";
     }
     return retval += \"?>\";
}
}</pre>

 @param statements The statements to be executed.  May be return values of
 calls to the <code>getMethodCallSyntax</code> and <code>getOutputStatement</code> methods.
 @return The Program
"
      end

      operation 10202626 "getScriptEngine"
	public return_type class_ref 1240834 // ScriptEngine
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an instance of the <code>ScriptEngine</code> associated with this
<code>ScriptEngineFactory</code>. A new ScriptEngine is generally
returned, but implementations may pool, share or reuse engines.

@return A new <code>ScriptEngine</code> instance.
"
      end
    end

    class 1241474 "Compilable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The optional interface implemented by ScriptEngines whose methods compile scripts
to a form that can be executed repeatedly without recompilation.

@author Mike Grogan
@since 1.6
"
      operation 10198146 "compile"
	public return_type class_ref 1241602 // CompiledScript
	nparams 1
	  param inout name "script" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compiles the script (source represented as a <code>String</code>) for
later execution.

@param script The source of the script, represented as a <code>String</code>.

@return An instance of a subclass of <code>CompiledScript</code> to be executed later using one
of the <code>eval</code> methods of <code>CompiledScript</code>.

@throws ScriptException if compilation fails.
@throws NullPointerException if the argument is null.

"
      end

      operation 10198274 "compile"
	public return_type class_ref 1241602 // CompiledScript
	nparams 1
	  param inout name "script" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compiles the script (source read from <code>Reader</code>) for
later execution.  Functionality is identical to
<code>compile(String)</code> other than the way in which the source is
passed.

@param script The reader from which the script source is obtained.

@return An instance of a subclass of <code>CompiledScript</code> to be executed
later using one of its <code>eval</code> methods of <code>CompiledScript</code>.

@throws ScriptException if compilation fails.
@throws NullPointerException if argument is null.
"
      end
    end

    class 1241602 "CompiledScript"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Extended by classes that store results of compilations.  State
might be stored in the form of Java classes, Java class files or scripting
language opcodes.  The script may be executed repeatedly
without reparsing.
<br><br>
Each <code>CompiledScript</code> is associated with a <code>ScriptEngine</code> -- A call to an  <code>eval</code>
method of the <code>CompiledScript</code> causes the execution of the script by the
<code>ScriptEngine</code>.  Changes in the state of the <code>ScriptEngine</code> caused by execution
of the <code>CompiledScript</code>  may visible during subsequent executions of scripts by the engine.

@author Mike Grogan
@since 1.6
"
      operation 10198402 "eval"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "context" type class_ref 1240962 // ScriptContext
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the program stored in this <code>CompiledScript</code> object.

@param context A <code>ScriptContext</code> that is used in the same way as
the <code>ScriptContext</code> passed to the <code>eval</code> methods of
<code>ScriptEngine</code>.

@return The value returned by the script execution, if any.  Should return <code>null</code>
if no value is returned by the script execution.

@throws ScriptException if an error occurs.
@throws NullPointerException if context is null.
"
      end

      operation 10198530 "eval"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "bindings" type class_ref 1241218 // Bindings
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the program stored in the <code>CompiledScript</code> object using
the supplied <code>Bindings</code> of attributes as the <code>ENGINE_SCOPE</code> of the
associated <code>ScriptEngine</code> during script execution.  If bindings is null,
then the effect of calling this method is same as that of eval(getEngine().getContext()).
<p>.
The <code>GLOBAL_SCOPE</code> <code>Bindings</code>, <code>Reader</code> and <code>Writer</code>
associated with the default <code>ScriptContext</code> of the associated <code>ScriptEngine</code> are used.

@param bindings The bindings of attributes used for the <code>ENGINE_SCOPE</code>.

@return The return value from the script execution

@throws ScriptException if an error occurs.
"
      end

      operation 10198658 "eval"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1241090 // ScriptException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the program stored in the <code>CompiledScript</code> object.  The
default <code>ScriptContext</code> of the associated <code>ScriptEngine</code> is used.
The effect of calling this method is same as that of eval(getEngine().getContext()).

@return The return value from the script execution

@throws ScriptException if an error occurs.
"
      end

      operation 10198786 "getEngine"
	abstract public return_type class_ref 1240834 // ScriptEngine
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ScriptEngine</code> whose <code>compile</code> method created this <code>CompiledScript</code>.
The <code>CompiledScript</code> will execute in this engine.

@return The <code>ScriptEngine</code> that created this <code>CompiledScript</code>
"
      end
    end

    class 1241730 "Invocable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The optional interface implemented by ScriptEngines whose methods allow the invocation of
procedures in scripts that have previously been executed.

@author  Mike Grogan
@author  A. Sundararajan
@since 1.6
"
      operation 10198914 "invokeMethod"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "thiz" type class_ref 129538 // Object
	  param inout name "name" type class_ref 128130 // String
	  param inout name "" explicit_type "Object...args"
	nexceptions 2
	  exception class_ref 1241090 // ScriptException
	  exception class_ref 742530 // NoSuchMethodException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calls a method on a script object compiled during a previous script execution,
which is retained in the state of the <code>ScriptEngine</code>.

@param name The name of the procedure to be called.

@param thiz If the procedure is a member  of a class
defined in the script and thiz is an instance of that class
returned by a previous execution or invocation, the named method is
called through that instance.

@param args Arguments to pass to the procedure.  The rules for converting
the arguments to scripting variables are implementation-specific.

@return The value returned by the procedure.  The rules for converting the scripting
variable returned by the script method to a Java Object are implementation-specific.

@throws ScriptException if an error occurs during invocation of the method.
@throws NoSuchMethodException if method with given name or matching argument types cannot be found.
@throws NullPointerException if the method name is null.
@throws IllegalArgumentException if the specified thiz is null or the specified Object is
does not represent a scripting object.
"
      end

      operation 10199042 "invokeFunction"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "" explicit_type "Object...args"
	nexceptions 2
	  exception class_ref 1241090 // ScriptException
	  exception class_ref 742530 // NoSuchMethodException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to call top-level procedures and functions defined in scripts.

@param name of the procedure or function to call
@param args Arguments to pass to the procedure or function
@return The value returned by the procedure or function

@throws ScriptException if an error occurs during invocation of the method.
@throws NoSuchMethodException if method with given name or matching argument types cannot be found.
@throws NullPointerException if method name is null.
"
      end

      operation 10199170 "getInterface"
	public explicit_return_type "T"
	nparams 1
	  param inout name "clasz" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an implementation of an interface using functions compiled in
the interpreter. The methods of the interface
may be implemented using the <code>invokeFunction</code> method.

@param <T> the type of the interface to return
@param clasz The <code>Class</code> object of the interface to return.

@return An instance of requested interface - null if the requested interface is unavailable,
i. e. if compiled functions in the <code>ScriptEngine</code> cannot be found matching
the ones in the requested interface.

@throws IllegalArgumentException if the specified <code>Class</code> object
is null or is not an interface.
"
      end

      operation 10199298 "getInterface"
	public explicit_return_type "T"
	nparams 2
	  param inout name "thiz" type class_ref 129538 // Object
	  param inout name "clasz" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an implementation of an interface using member functions of
a scripting object compiled in the interpreter. The methods of the
interface may be implemented using the <code>invokeMethod</code> method.

@param <T> the type of the interface to return
@param thiz The scripting object whose member functions are used to implement the methods of the interface.
@param clasz The <code>Class</code> object of the interface to return.

@return An instance of requested interface - null if the requested interface is unavailable,
i. e. if compiled methods in the <code>ScriptEngine</code> cannot be found matching
the ones in the requested interface.

@throws IllegalArgumentException if the specified <code>Class</code> object
is null or is not an interface, or if the specified Object is
null or does not represent a scripting object.
"
      end
    end

    class 1241858 "ScriptEngineManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ScriptEngineManager</code> implements a discovery and instantiation
mechanism for <code>ScriptEngine</code> classes and also maintains a
collection of key/value pairs storing state shared by all engines created
by the Manager. This class uses the <a href=\"../../../technotes/guides/jar/jar.html#Service%20Provider\">service provider</a> mechanism to enumerate all the
implementations of <code>ScriptEngineFactory</code>. <br><br>
The <code>ScriptEngineManager</code> provides a method to return a list of all these factories
as well as utility methods which look up factories on the basis of language name, file extension
and mime type.
<p>
The <code>Bindings</code> of key/value pairs, referred to as the \"Global Scope\"  maintained
by the manager is available to all instances of <code>ScriptEngine</code> created
by the <code>ScriptEngineManager</code>.  The values in the <code>Bindings</code> are
generally exposed in all scripts.

@author Mike Grogan
@author A. Sundararajan
@since 1.6
"
      attribute 2343042 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10202754 "ScriptEngineManager"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The effect of calling this constructor is the same as calling
<code>ScriptEngineManager(Thread.currentThread().getContextClassLoader())</code>.

@see java.lang.Thread#getContextClassLoader
"
      end

      operation 10202882 "ScriptEngineManager"
	public explicit_return_type ""
	nparams 1
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This constructor loads the implementations of
<code>ScriptEngineFactory</code> visible to the given
<code>ClassLoader</code> using the <a href=\"../../../technotes/guides/jar/jar.html#Service%20Provider\">service provider</a> mechanism.<br><br>
If loader is <code>null</code>, the script engine factories that are
bundled with the platform and that are in the usual extension
directories (installed extensions) are loaded. <br><br>

@param loader ClassLoader used to discover script engine factories.
"
      end

      operation 10203010 "init"
	private explicit_return_type "void"
	nparams 1
	  param in name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10203138 "getServiceLoader"
	private return_type class_ref 1091586 // ServiceLoader
	nparams 1
	  param in name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ScriptEngineFactory> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10203266 "initEngines"
	private explicit_return_type "void"
	nparams 1
	  param in name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10203394 "setBindings"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bindings" type class_ref 1241218 // Bindings
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>setBindings</code> stores the specified <code>Bindings</code>
in the <code>globalScope</code> field. ScriptEngineManager sets this
<code>Bindings</code> as global bindings for <code>ScriptEngine</code>
objects created by it.

@param bindings The specified <code>Bindings</code>
@throws IllegalArgumentException if bindings is null.
"
      end

      operation 10203522 "getBindings"
	public return_type class_ref 1241218 // Bindings
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>getBindings</code> returns the value of the <code>globalScope</code> field.
ScriptEngineManager sets this <code>Bindings</code> as global bindings for
<code>ScriptEngine</code> objects created by it.

@return The globalScope field.
"
      end

      operation 10203650 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified key/value pair in the Global Scope.
@param key Key to set
@param value Value to set.
@throws NullPointerException if key is null.
@throws IllegalArgumentException if key is empty string.
"
      end

      operation 10203778 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value for the specified key in the Global Scope
@param key The key whose value is to be returned.
@return The value for the specified key.
"
      end

      operation 10203906 "getEngineByName"
	public return_type class_ref 1240834 // ScriptEngine
	nparams 1
	  param inout name "shortName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up and creates a <code>ScriptEngine</code> for a given  name.
The algorithm first searches for a <code>ScriptEngineFactory</code> that has been
registered as a handler for the specified name using the <code>registerEngineName</code>
method.
<br><br> If one is not found, it searches the set of <code>ScriptEngineFactory</code> instances
stored by the constructor for one with the specified name.  If a <code>ScriptEngineFactory</code>
is found by either method, it is used to create instance of <code>ScriptEngine</code>.
@param shortName The short name of the <code>ScriptEngine</code> implementation.
returned by the <code>getNames</code> method of its <code>ScriptEngineFactory</code>.
@return A <code>ScriptEngine</code> created by the factory located in the search.  Returns null
if no such factory was found.  The <code>ScriptEngineManager</code> sets its own <code>globalScope</code>
<code>Bindings</code> as the <code>GLOBAL_SCOPE</code> <code>Bindings</code> of the newly
created <code>ScriptEngine</code>.
@throws NullPointerException if shortName is null.
"
      end

      operation 10204034 "getEngineByExtension"
	public return_type class_ref 1240834 // ScriptEngine
	nparams 1
	  param inout name "extension" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up and create a <code>ScriptEngine</code> for a given extension.  The algorithm
used by <code>getEngineByName</code> is used except that the search starts
by looking for a <code>ScriptEngineFactory</code> registered to handle the
given extension using <code>registerEngineExtension</code>.
@param extension The given extension
@return The engine to handle scripts with this extension.  Returns <code>null</code>
if not found.
@throws NullPointerException if extension is null.
"
      end

      operation 10204162 "getEngineByMimeType"
	public return_type class_ref 1240834 // ScriptEngine
	nparams 1
	  param inout name "mimeType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up and create a <code>ScriptEngine</code> for a given mime type.  The algorithm
used by <code>getEngineByName</code> is used except that the search starts
by looking for a <code>ScriptEngineFactory</code> registered to handle the
given mime type using <code>registerEngineMimeType</code>.
@param mimeType The given mime type
@return The engine to handle scripts with this mime type.  Returns <code>null</code>
if not found.
@throws NullPointerException if mimeType is null.
"
      end

      operation 10204290 "getEngineFactories"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ScriptEngineFactory> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list whose elements are instances of all the <code>ScriptEngineFactory</code> classes
found by the discovery mechanism.
@return List of all discovered <code>ScriptEngineFactory</code>s.
"
      end

      operation 10204418 "registerEngineName"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "factory" type class_ref 1241346 // ScriptEngineFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a <code>ScriptEngineFactory</code> to handle a language
name.  Overrides any such association found using the Discovery mechanism.
@param name The name to be associated with the <code>ScriptEngineFactory</code>.
@param factory The class to associate with the given name.
@throws NullPointerException if any of the parameters is null.
"
      end

      operation 10204546 "registerEngineMimeType"
	public explicit_return_type "void"
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "factory" type class_ref 1241346 // ScriptEngineFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a <code>ScriptEngineFactory</code> to handle a mime type.
Overrides any such association found using the Discovery mechanism.

@param type The mime type  to be associated with the
<code>ScriptEngineFactory</code>.

@param factory The class to associate with the given mime type.
@throws NullPointerException if any of the parameters is null.
"
      end

      operation 10204674 "registerEngineExtension"
	public explicit_return_type "void"
	nparams 2
	  param inout name "extension" type class_ref 128130 // String
	  param inout name "factory" type class_ref 1241346 // ScriptEngineFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a <code>ScriptEngineFactory</code> to handle an extension.
Overrides any such association found using the Discovery mechanism.

@param extension The extension type  to be associated with the
<code>ScriptEngineFactory</code>.
@param factory The class to associate with the given extension.
@throws NullPointerException if any of the parameters is null.
"
      end

      classrelation 4006530 // engineSpis (<unidirectional association>)
	relation 4006530 --->
	  a role_name "engineSpis" private
	    comment " Set of script engine factories discovered. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ScriptEngineFactory> ${name}${value};
"
	    classrelation_ref 4006530 // engineSpis (<unidirectional association>)
	  b parent class_ref 388482 // HashSet
      end

      classrelation 4006658 // nameAssociations (<unidirectional association>)
	relation 4006658 --->
	  a role_name "nameAssociations" private
	    comment " Map of engine name to script engine factory. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ScriptEngineFactory> ${name}${value};
"
	    classrelation_ref 4006658 // nameAssociations (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      classrelation 4006786 // extensionAssociations (<unidirectional association>)
	relation 4006786 --->
	  a role_name "extensionAssociations" private
	    comment " Map of script file extension to script engine factory. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ScriptEngineFactory> ${name}${value};
"
	    classrelation_ref 4006786 // extensionAssociations (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      classrelation 4006914 // mimeTypeAssociations (<unidirectional association>)
	relation 4006914 --->
	  a role_name "mimeTypeAssociations" private
	    comment " Map of script script MIME type to script engine factory. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ScriptEngineFactory> ${name}${value};
"
	    classrelation_ref 4006914 // mimeTypeAssociations (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      classrelation 4007042 // globalScope (<unidirectional association>)
	relation 4007042 --->
	  a role_name "globalScope" private
	    comment " Global bindings associated with script engines created by this manager. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4007042 // globalScope (<unidirectional association>)
	  b parent class_ref 1241218 // Bindings
      end
    end

    class 1241986 "SimpleBindings"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple implementation of Bindings backed by
a <code>HashMap</code> or some other specified <code>Map</code>.

@author Mike Grogan
@since 1.6
"
      classrelation 4007426 // <realization>
	relation 4007426 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4007426 // <realization>
	  b parent class_ref 1241218 // Bindings
      end

      classrelation 4007554 // map (<unidirectional association>)
	relation 4007554 --->
	  a role_name "map" private
	    comment "
The <code>Map</code> field stores the attributes.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Object> ${name}${value};
"
	    classrelation_ref 4007554 // map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 10205826 "SimpleBindings"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String,Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor uses an existing <code>Map</code> to store the values.
@param m The <code>Map</code> backing this <code>SimpleBindings</code>.
@throws NullPointerException if m is null
"
      end

      operation 10205954 "SimpleBindings"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor uses a <code>HashMap</code>.
"
      end

      operation 10206082 "put"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified key/value in the underlying <code>map</code> field.

@param name Name of value
@param value Value to set.

@return Previous value for the specified key.  Returns null if key was previously
unset.

@throws NullPointerException if the name is null.
@throws IllegalArgumentException if the name is empty.
"
      end

      operation 10206210 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "toMerge" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends String, ? extends Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>putAll</code> is implemented using <code>Map.putAll</code>.

@param toMerge The <code>Map</code> of values to add.

@throws NullPointerException
        if toMerge map is null or if some key in the map is null.
@throws IllegalArgumentException
        if some key in the map is an empty String.
"
      end

      operation 10206338 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10206466 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the specified
key.  More formally, returns <tt>true</tt> if and only if
this map contains a mapping for a key <tt>k</tt> such that
<tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be
at most one such mapping.)

@param key key whose presence in this map is to be tested.
@return <tt>true</tt> if this map contains a mapping for the specified
        key.

@throws NullPointerException if key is null
@throws ClassCastException if key is not String
@throws IllegalArgumentException if key is empty String
"
      end

      operation 10206594 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10206722 "entrySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<String, Object>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10206850 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which this map maps the specified key.  Returns
<tt>null</tt> if the map contains no mapping for this key.  A return
value of <tt>null</tt> does not <i>necessarily</i> indicate that the
map contains no mapping for the key; it's also possible that the map
explicitly maps the key to <tt>null</tt>.  The <tt>containsKey</tt>
operation may be used to distinguish these two cases.

<p>More formally, if this map contains a mapping from a key
<tt>k</tt> to a value <tt>v</tt> such that <tt>(key==null ? k==null :
key.equals(k))</tt>, then this method returns <tt>v</tt>; otherwise
it returns <tt>null</tt>.  (There can be at most one such mapping.)

@param key key whose associated value is to be returned.
@return the value to which this map maps the specified key, or
        <tt>null</tt> if the map contains no mapping for this key.

@throws NullPointerException if key is null
@throws ClassCastException if key is not String
@throws IllegalArgumentException if key is empty String
"
      end

      operation 10206978 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10207106 "keySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10207234 "remove"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for this key from this map if it is present
(optional operation).   More formally, if this map contains a mapping
from key <tt>k</tt> to value <tt>v</tt> such that
<code>(key==null ?  k==null : key.equals(k))</code>, that mapping
is removed.  (The map can contain at most one such mapping.)

<p>Returns the value to which the map previously associated the key, or
<tt>null</tt> if the map contained no mapping for this key.  (A
<tt>null</tt> return can also indicate that the map previously
associated <tt>null</tt> with the specified key if the implementation
supports <tt>null</tt> values.)  The map will not contain a mapping for
the specified  key once the call returns.

@param key key whose mapping is to be removed from the map.
@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.

@throws NullPointerException if key is null
@throws ClassCastException if key is not String
@throws IllegalArgumentException if key is empty String
"
      end

      operation 10207362 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10207490 "values"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10207618 "checkKey"
	private explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1242114 "SimpleScriptContext"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple implementation of ScriptContext.

@author Mike Grogan
@since 1.6
"
      classrelation 4007682 // <realization>
	relation 4007682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4007682 // <realization>
	  b parent class_ref 1240962 // ScriptContext
      end

      classrelation 4007810 // writer (<unidirectional association>)
	relation 4007810 --->
	  a role_name "writer" protected
	    comment "
This is the writer to be used to output from scripts.
By default, a <code>PrintWriter</code> based on <code>System.out</code>
is used. Accessor methods getWriter, setWriter are used to manage
this field.
@see java.lang.System#out
@see java.io.PrintWriter

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4007810 // writer (<unidirectional association>)
	  b parent class_ref 428034 // Writer
      end

      classrelation 4007938 // errorWriter (<unidirectional association>)
	relation 4007938 --->
	  a role_name "errorWriter" protected
	    comment "
This is the writer to be used to output errors from scripts.
By default, a <code>PrintWriter</code> based on <code>System.err</code> is
used. Accessor methods getErrorWriter, setErrorWriter are used to manage
this field.
@see java.lang.System#err
@see java.io.PrintWriter

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4007938 // errorWriter (<unidirectional association>)
	  b parent class_ref 428034 // Writer
      end

      classrelation 4008066 // reader (<unidirectional association>)
	relation 4008066 --->
	  a role_name "reader" protected
	    comment "
This is the reader to be used for input from scripts.
By default, a <code>InputStreamReader</code> based on <code>System.in</code>
is used and default charset is used by this reader. Accessor methods
getReader, setReader are used to manage this field.
@see java.lang.System#in
@see java.io.InputStreamReader

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4008066 // reader (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      classrelation 4008194 // engineScope (<unidirectional association>)
	relation 4008194 --->
	  a role_name "engineScope" protected
	    comment "
This is the engine scope bindings.
By default, a <code>SimpleBindings</code> is used. Accessor
methods setBindings, getBindings are used to manage this field.
@see SimpleBindings

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4008194 // engineScope (<unidirectional association>)
	  b parent class_ref 1241218 // Bindings
      end

      classrelation 4008322 // globalScope (<unidirectional association>)
	relation 4008322 --->
	  a role_name "globalScope" protected
	    comment "
This is the global scope bindings.
By default, a null value (which means no global scope) is used. Accessor
methods setBindings, getBindings are used to manage this field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4008322 // globalScope (<unidirectional association>)
	  b parent class_ref 1241218 // Bindings
      end

      operation 10207746 "SimpleScriptContext"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a {@code SimpleScriptContext}.
"
      end

      operation 10207874 "setBindings"
	public explicit_return_type "void"
	nparams 2
	  param inout name "bindings" type class_ref 1241218 // Bindings
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a <code>Bindings</code> of attributes for the given scope.  If the value
of scope is <code>ENGINE_SCOPE</code> the given <code>Bindings</code> replaces the
<code>engineScope</code> field.  If the value
of scope is <code>GLOBAL_SCOPE</code> the given <code>Bindings</code> replaces the
<code>globalScope</code> field.

@param bindings The <code>Bindings</code> of attributes to set.
@param scope The value of the scope in which the attributes are set.

@throws IllegalArgumentException if scope is invalid.
@throws NullPointerException if the value of scope is <code>ENGINE_SCOPE</code> and
the specified <code>Bindings</code> is null.
"
      end

      operation 10208002 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the attribute with the given name in
the scope occurring earliest in the search order.  The order
is determined by the numeric value of the scope parameter (lowest
scope values first.)

@param name The name of the the attribute to retrieve.
@return The value of the attribute in the lowest scope for
which an attribute with the given name is defined.  Returns
null if no attribute with the name exists in any scope.
@throws NullPointerException if the name is null.
@throws IllegalArgumentException if the name is empty.
"
      end

      operation 10208130 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of an attribute in a given scope.

@param name The name of the attribute to retrieve.
@param scope The scope in which to retrieve the attribute.
@return The value of the attribute. Returns <code>null</code> is the name
does not exist in the given scope.

@throws IllegalArgumentException
        if the name is empty or if the value of scope is invalid.
@throws NullPointerException if the name is null.
"
      end

      operation 10208258 "removeAttribute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an attribute in a given scope.

@param name The name of the attribute to remove
@param scope The scope in which to remove the attribute

@return The removed value.
@throws IllegalArgumentException
        if the name is empty or if the scope is invalid.
@throws NullPointerException if the name is null.
"
      end

      operation 10208386 "setAttribute"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of an attribute in a given scope.

@param name The name of the attribute to set
@param value The value of the attribute
@param scope The scope in which to set the attribute

@throws IllegalArgumentException
        if the name is empty or if the scope is invalid.
@throws NullPointerException if the name is null.
"
      end

      operation 10208514 "getWriter"
	public return_type class_ref 428034 // Writer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10208642 "getReader"
	public return_type class_ref 407298 // Reader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10208770 "setReader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10208898 "setWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "writer" type class_ref 428034 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10209026 "getErrorWriter"
	public return_type class_ref 428034 // Writer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10209154 "setErrorWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "writer" type class_ref 428034 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10209282 "getAttributesScope"
	public explicit_return_type "int"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the lowest scope in which an attribute is defined.
@param name Name of the attribute
.
@return The lowest scope.  Returns -1 if no attribute with the given
name is defined in any scope.
@throws NullPointerException if name is null.
@throws IllegalArgumentException if name is empty.
"
      end

      operation 10209410 "getBindings"
	public return_type class_ref 1241218 // Bindings
	nparams 1
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the <code>engineScope</code> field if specified scope is
<code>ENGINE_SCOPE</code>.  Returns the value of the <code>globalScope</code> field if the specified scope is
<code>GLOBAL_SCOPE</code>.

@param scope The specified scope
@return The value of either the  <code>engineScope</code> or <code>globalScope</code> field.
@throws IllegalArgumentException if the value of scope is invalid.
"
      end

      operation 10209538 "getScopes"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 10209666 "checkName"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 4008450 // scopes (<unidirectional association>)
	relation 4008450 --->
	  a role_name "scopes" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 4008450 // scopes (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      extra_member 184066 "initialization"
	
	cpp "" ""
	java "  static {
        scopes = new ArrayList<Integer>(2);
        scopes.add(ENGINE_SCOPE);
        scopes.add(GLOBAL_SCOPE);
        scopes = Collections.unmodifiableList(scopes);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end
  end

  deploymentview 174722 "script"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 902274 "ScriptEngine"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Reader;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1240834 // ScriptEngine
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 902402 "AbstractScriptEngine"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Reader;
import java.util.Map;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 1240706 // AbstractScriptEngine
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 902530 "Bindings"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_elems
	class_ref 1241218 // Bindings
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 902658 "Compilable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.io.Reader;
${definition}"
      associated_elems
	class_ref 1241474 // Compilable
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 902786 "CompiledScript"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_elems
	class_ref 1241602 // CompiledScript
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 902914 "Invocable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1241730 // Invocable
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 903042 "ScriptContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.io.Writer;
import java.io.Reader;
${definition}"
      associated_elems
	class_ref 1240962 // ScriptContext
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 903170 "ScriptEngineFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 1241346 // ScriptEngineFactory
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 903298 "ScriptEngineManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.security.*;
import java.util.ServiceLoader;
import java.util.ServiceConfigurationError;
${definition}"
      associated_elems
	class_ref 1241858 // ScriptEngineManager
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 903426 "ScriptException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1241090 // ScriptException
      end
      comment "Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 903554 "SimpleBindings"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.util.HashMap;
import java.util.Collection;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1241986 // SimpleBindings
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 903682 "SimpleScriptContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.*;
${definition}"
      associated_elems
	class_ref 1242114 // SimpleScriptContext
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
