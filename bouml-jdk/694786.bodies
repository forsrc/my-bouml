class Op
!!!4577794.java!!!	createDot() : Op
        if (Op.COUNT)  Op.nofinstances ++;
        return new Op(Op.DOT);
!!!4577922.java!!!	createChar(in data : int) : Op::CharOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new CharOp(Op.CHAR, data);
!!!4578050.java!!!	createAnchor(in data : int) : Op::CharOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new CharOp(Op.ANCHOR, data);
!!!4578178.java!!!	createCapture(in number : int, inout next : Op) : Op::CharOp
        if (Op.COUNT)  Op.nofinstances ++;
        CharOp op = new CharOp(Op.CAPTURE, number);
        op.next = next;
        return op;
!!!4578306.java!!!	createUnion(in size : int) : Op::UnionOp
        if (Op.COUNT)  Op.nofinstances ++;
        //System.err.println("Creates UnionOp");
        return new UnionOp(Op.UNION, size);
!!!4578434.java!!!	createClosure(in id : int) : Op::ChildOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new ModifierOp(Op.CLOSURE, id, -1);
!!!4578562.java!!!	createNonGreedyClosure() : Op::ChildOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new ChildOp(Op.NONGREEDYCLOSURE);
!!!4578690.java!!!	createQuestion(inout nongreedy : boolean) : Op::ChildOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new ChildOp(nongreedy ? Op.NONGREEDYQUESTION : Op.QUESTION);
!!!4578818.java!!!	createRange(inout tok : Token) : Op::RangeOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new RangeOp(Op.RANGE, tok);
!!!4578946.java!!!	createLook(in type : int, inout next : Op, inout branch : Op) : Op::ChildOp
        if (Op.COUNT)  Op.nofinstances ++;
        ChildOp op = new ChildOp(type);
        op.setChild(branch);
        op.next = next;
        return op;
!!!4579074.java!!!	createBackReference(in refno : int) : Op::CharOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new CharOp(Op.BACKREFERENCE, refno);
!!!4579202.java!!!	createString(inout literal : String) : Op::StringOp
        if (Op.COUNT)  Op.nofinstances ++;
        return new StringOp(Op.STRING, literal);
!!!4579330.java!!!	createIndependent(inout next : Op, inout branch : Op) : Op::ChildOp
        if (Op.COUNT)  Op.nofinstances ++;
        ChildOp op = new ChildOp(Op.INDEPENDENT);
        op.setChild(branch);
        op.next = next;
        return op;
!!!4579458.java!!!	createModifier(inout next : Op, inout branch : Op, in add : int, in mask : int) : Op::ModifierOp
        if (Op.COUNT)  Op.nofinstances ++;
        ModifierOp op = new ModifierOp(Op.MODIFIER, add, mask);
        op.setChild(branch);
        op.next = next;
        return op;
!!!4579586.java!!!	createCondition(inout next : Op, in ref : int, inout conditionflow : Op, inout yesflow : Op, inout noflow : Op) : Op::ConditionOp
        if (Op.COUNT)  Op.nofinstances ++;
        ConditionOp op = new ConditionOp(Op.CONDITION, ref, conditionflow, yesflow, noflow);
        op.next = next;
        return op;
!!!4579714.java!!!	Op(in type : int)
        this.type = type;
!!!4579842.java!!!	size() : int
                                // for UNION
        return 0;
!!!4579970.java!!!	elementAt(in index : int) : Op
                   // for UNIoN
        throw new RuntimeException("Internal Error: type="+this.type);
!!!4580098.java!!!	getChild() : Op
                             // for CLOSURE, QUESTION
        throw new RuntimeException("Internal Error: type="+this.type);
!!!4580226.java!!!	getData() : int
                             // CharOp  for CHAR, BACKREFERENCE, CAPTURE, ANCHOR,
        throw new RuntimeException("Internal Error: type="+this.type);
!!!4580354.java!!!	getData2() : int
                            // ModifierOp
        throw new RuntimeException("Internal Error: type="+this.type);
!!!4580482.java!!!	getToken() : RangeToken
                     // RANGE, NRANGE
        throw new RuntimeException("Internal Error: type="+this.type);
!!!4580610.java!!!	getString() : String
                        // STRING
        throw new RuntimeException("Internal Error: type="+this.type);
