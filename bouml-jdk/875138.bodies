class Scrollbar
!!!6316802.java!!!	Scrollbar()
        this(VERTICAL, 0, 10, 0, 100);
!!!6316930.java!!!	Scrollbar(in orientation : int)
        this(orientation, 0, 10, 0, 100);
!!!6317058.java!!!	Scrollbar(in orientation : int, in value : int, in visible : int, in minimum : int, in maximum : int)
        GraphicsEnvironment.checkHeadless();
        switch (orientation) {
          case HORIZONTAL:
          case VERTICAL:
            this.orientation = orientation;
            break;
          default:
            throw new IllegalArgumentException("illegal scrollbar orientation");
        }
        setValues(value, visible, minimum, maximum);
!!!6317186.java!!!	constructComponentName() : String
        synchronized (Scrollbar.class) {
            return base + nameCounter++;
        }
!!!6317314.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = getToolkit().createScrollbar(this);
            super.addNotify();
        }
!!!6317442.java!!!	getOrientation() : int
        return orientation;
!!!6317570.java!!!	setOrientation(in orientation : int) : void
        synchronized (getTreeLock()) {
            if (orientation == this.orientation) {
                return;
            }
            switch (orientation) {
                case HORIZONTAL:
                case VERTICAL:
                    this.orientation = orientation;
                    break;
                default:
                    throw new IllegalArgumentException("illegal scrollbar orientation");
            }
            /* Create a new peer with the specified orientation. */
            if (peer != null) {
                removeNotify();
                addNotify();
                invalidate();
            }
        }
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                    ((orientation == VERTICAL)
                     ? AccessibleState.HORIZONTAL : AccessibleState.VERTICAL),
                    ((orientation == VERTICAL)
                     ? AccessibleState.VERTICAL : AccessibleState.HORIZONTAL));
        }
!!!6317698.java!!!	getValue() : int
        return value;
!!!6317826.java!!!	setValue(in newValue : int) : void
        // Use setValues so that a consistent policy relating
        // minimum, maximum, visible amount, and value is enforced.
        setValues(newValue, visibleAmount, minimum, maximum);
!!!6317954.java!!!	getMinimum() : int
        return minimum;
!!!6318082.java!!!	setMinimum(in newMinimum : int) : void
        // No checks are necessary in this method since minimum is
        // the first variable checked in the setValues function.

        // Use setValues so that a consistent policy relating
        // minimum, maximum, visible amount, and value is enforced.
        setValues(value, visibleAmount, newMinimum, maximum);
!!!6318210.java!!!	getMaximum() : int
        return maximum;
!!!6318338.java!!!	setMaximum(in newMaximum : int) : void
        // minimum is checked first in setValues, so we need to
        // enforce minimum and maximum checks here.
        if (newMaximum == Integer.MIN_VALUE) {
            newMaximum = Integer.MIN_VALUE + 1;
        }

        if (minimum >= newMaximum) {
            minimum = newMaximum - 1;
        }

        // Use setValues so that a consistent policy relating
        // minimum, maximum, visible amount, and value is enforced.
        setValues(value, visibleAmount, minimum, newMaximum);
!!!6318466.java!!!	getVisibleAmount() : int
        return getVisible();
!!!6318594.java!!!	getVisible() : int
        return visibleAmount;
!!!6318722.java!!!	setVisibleAmount(in newAmount : int) : void
        // Use setValues so that a consistent policy relating
        // minimum, maximum, visible amount, and value is enforced.
        setValues(value, newAmount, minimum, maximum);
!!!6318850.java!!!	setUnitIncrement(in v : int) : void
        setLineIncrement(v);
!!!6318978.java!!!	setLineIncrement(in v : int) : void
        int tmp = (v < 1) ? 1 : v;

        if (lineIncrement == tmp) {
            return;
        }
        lineIncrement = tmp;

        ScrollbarPeer peer = (ScrollbarPeer)this.peer;
        if (peer != null) {
            peer.setLineIncrement(lineIncrement);
        }
!!!6319106.java!!!	getUnitIncrement() : int
        return getLineIncrement();
!!!6319234.java!!!	getLineIncrement() : int
        return lineIncrement;
!!!6319362.java!!!	setBlockIncrement(in v : int) : void
        setPageIncrement(v);
!!!6319490.java!!!	setPageIncrement(in v : int) : void
        int tmp = (v < 1) ? 1 : v;

        if (pageIncrement == tmp) {
            return;
        }
        pageIncrement = tmp;

        ScrollbarPeer peer = (ScrollbarPeer)this.peer;
        if (peer != null) {
            peer.setPageIncrement(pageIncrement);
        }
!!!6319618.java!!!	getBlockIncrement() : int
        return getPageIncrement();
!!!6319746.java!!!	getPageIncrement() : int
        return pageIncrement;
!!!6319874.java!!!	setValues(in value : int, in visible : int, in minimum : int, in maximum : int) : void
        int oldValue;
        synchronized (this) {
            if (minimum == Integer.MAX_VALUE) {
                minimum = Integer.MAX_VALUE - 1;
            }
            if (maximum <= minimum) {
                maximum = minimum + 1;
            }

            long maxMinusMin = (long) maximum - (long) minimum;
            if (maxMinusMin > Integer.MAX_VALUE) {
                maxMinusMin = Integer.MAX_VALUE;
                maximum = minimum + (int) maxMinusMin;
            }
            if (visible > (int) maxMinusMin) {
                visible = (int) maxMinusMin;
            }
            if (visible < 1) {
                visible = 1;
            }

            if (value < minimum) {
                value = minimum;
            }
            if (value > maximum - visible) {
                value = maximum - visible;
            }

            oldValue = this.value;
            this.value = value;
            this.visibleAmount = visible;
            this.minimum = minimum;
            this.maximum = maximum;
            ScrollbarPeer peer = (ScrollbarPeer)this.peer;
            if (peer != null) {
                peer.setValues(value, visibleAmount, minimum, maximum);
            }
        }

        if ((oldValue != value) && (accessibleContext != null))  {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,
                    Integer.valueOf(oldValue),
                    Integer.valueOf(value));
        }
!!!6320002.java!!!	getValueIsAdjusting() : boolean
        return isAdjusting;
!!!6320130.java!!!	setValueIsAdjusting(inout b : boolean) : void
        boolean oldValue;

        synchronized (this) {
            oldValue = isAdjusting;
            isAdjusting = b;
        }

        if ((oldValue != b) && (accessibleContext != null)) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                    ((oldValue) ? AccessibleState.BUSY : null),
                    ((b) ? AccessibleState.BUSY : null));
        }
!!!6320258.java!!!	addAdjustmentListener(inout l : AdjustmentListener) : void
        if (l == null) {
            return;
        }
        adjustmentListener = AWTEventMulticaster.add(adjustmentListener, l);
        newEventsOnly = true;
!!!6320386.java!!!	removeAdjustmentListener(inout l : AdjustmentListener) : void
        if (l == null) {
            return;
        }
        adjustmentListener = AWTEventMulticaster.remove(adjustmentListener, l);
!!!6320514.java!!!	getAdjustmentListeners() : AdjustmentListener
        return getListeners(AdjustmentListener.class);
!!!6320642.java!!!	getListeners(inout listenerType : Class) : T
        EventListener l = null;
        if  (listenerType == AdjustmentListener.class) {
            l = adjustmentListener;
        } else {
            return super.getListeners(listenerType);
        }
        return AWTEventMulticaster.getListeners(l, listenerType);
!!!6320770.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED) {
            if ((eventMask & AWTEvent.ADJUSTMENT_EVENT_MASK) != 0 ||
                adjustmentListener != null) {
                return true;
            }
            return false;
        }
        return super.eventEnabled(e);
!!!6320898.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof AdjustmentEvent) {
            processAdjustmentEvent((AdjustmentEvent)e);
            return;
        }
        super.processEvent(e);
!!!6321026.java!!!	processAdjustmentEvent(inout e : AdjustmentEvent) : void
        AdjustmentListener listener = adjustmentListener;
        if (listener != null) {
            listener.adjustmentValueChanged(e);
        }
!!!6321154.java!!!	paramString() : String
        return super.paramString() +
            ",val=" + value +
            ",vis=" + visibleAmount +
            ",min=" + minimum +
            ",max=" + maximum +
            ((orientation == VERTICAL) ? ",vert" : ",horz") +
            ",isAdjusting=" + isAdjusting;
!!!6321282.java!!!	writeObject(inout s : ObjectOutputStream) : void
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, adjustmentListenerK, adjustmentListener);
      s.writeObject(null);
!!!6321410.java!!!	readObject(inout s : ObjectInputStream) : void
      GraphicsEnvironment.checkHeadless();
      s.defaultReadObject();

      Object keyOrNull;
      while(null != (keyOrNull = s.readObject())) {
        String key = ((String)keyOrNull).intern();

        if (adjustmentListenerK == key)
          addAdjustmentListener((AdjustmentListener)(s.readObject()));

        else // skip value for unrecognized key
          s.readObject();
      }
!!!6321538.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTScrollBar();
        }
        return accessibleContext;
