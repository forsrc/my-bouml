class AbstractItr
!!!9096706.java!!!	AbstractItr()
            advance();
!!!9096834.java!!!	advance() : void
            lastRet = nextNode;

            Node<E> p = (nextNode == null) ? startNode() : nextNode(nextNode);
            for (;; p = nextNode(p)) {
                if (p == null) {
                    // p might be active end or TERMINATOR node; both are OK
                    nextNode = null;
                    nextItem = null;
                    break;
                }
                E item = p.item;
                if (item != null) {
                    nextNode = p;
                    nextItem = item;
                    break;
                }
            }
!!!9096962.java!!!	hasNext() : boolean
            return nextItem != null;
!!!9097090.java!!!	next() : E
            E item = nextItem;
            if (item == null) throw new NoSuchElementException();
            advance();
            return item;
!!!9097218.java!!!	remove() : void
            Node<E> l = lastRet;
            if (l == null) throw new IllegalStateException();
            l.item = null;
            unlink(l);
            lastRet = null;
