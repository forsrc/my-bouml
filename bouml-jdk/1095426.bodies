class TaskQueue
!!!8934146.java!!!	size() : int
        return size;
!!!8934274.java!!!	add(inout task : TimerTask) : void
        // Grow backing store if necessary
        if (size + 1 == queue.length)
            queue = Arrays.copyOf(queue, 2*queue.length);

        queue[++size] = task;
        fixUp(size);
!!!8934402.java!!!	getMin() : TimerTask
        return queue[1];
!!!8934530.java!!!	get(in i : int) : TimerTask
        return queue[i];
!!!8934658.java!!!	removeMin() : void
        queue[1] = queue[size];
        queue[size--] = null;  // Drop extra reference to prevent memory leak
        fixDown(1);
!!!8934786.java!!!	quickRemove(in i : int) : void
        assert i <= size;

        queue[i] = queue[size];
        queue[size--] = null;  // Drop extra ref to prevent memory leak
!!!8934914.java!!!	rescheduleMin(in newTime : long) : void
        queue[1].nextExecutionTime = newTime;
        fixDown(1);
!!!8935042.java!!!	isEmpty() : boolean
        return size==0;
!!!8935170.java!!!	clear() : void
        // Null out task references to prevent memory leak
        for (int i=1; i<=size; i++)
            queue[i] = null;

        size = 0;
!!!8935298.java!!!	fixUp(in k : int) : void
        while (k > 1) {
            int j = k >> 1;
            if (queue[j].nextExecutionTime <= queue[k].nextExecutionTime)
                break;
            TimerTask tmp = queue[j];  queue[j] = queue[k]; queue[k] = tmp;
            k = j;
        }
!!!8935426.java!!!	fixDown(in k : int) : void
        int j;
        while ((j = k << 1) <= size && j > 0) {
            if (j < size &&
                queue[j].nextExecutionTime > queue[j+1].nextExecutionTime)
                j++; // j indexes smallest kid
            if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime)
                break;
            TimerTask tmp = queue[j];  queue[j] = queue[k]; queue[k] = tmp;
            k = j;
        }
!!!8935554.java!!!	heapify() : void
        for (int i = size/2; i >= 1; i--)
            fixDown(i);
