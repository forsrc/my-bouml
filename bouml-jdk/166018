format 222
"stream" // jdk1.8::javax::xml::stream
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/xml/stream/"
  java_package "javax.xml.stream"
  classview 159618 "stream"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 640130 "XMLEventWriter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
This is the top level interface for writing XML documents.

Instances of this interface are not required to validate the
form of the XML.

@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@see XMLEventReader
@see javax.xml.stream.events.XMLEvent
@see javax.xml.stream.events.Characters
@see javax.xml.stream.events.ProcessingInstruction
@see javax.xml.stream.events.StartElement
@see javax.xml.stream.events.EndElement
@since 1.6
"
      classrelation 4795010 // <generalisation>
	relation 4795010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4795010 // <generalisation>
	  b parent class_ref 1430914 // XMLEventConsumer
      end

      operation 12090114 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes any cached events to the underlying output mechanism
@throws XMLStreamException
"
      end

      operation 12090242 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frees any resources associated with this stream
@throws XMLStreamException
"
      end

      operation 12090370 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 643842 // XMLEvent
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an event to the output stream
Adding a START_ELEMENT will open a new namespace scope that
will be closed when the corresponding END_ELEMENT is written.
<table border=\"2\" rules=\"all\" cellpadding=\"4\">
  <thead>
    <tr>
      <th align=\"center\" colspan=\"2\">
        Required and optional fields for events added to the writer
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Event Type</th>
      <th>Required Fields</th>
      <th>Optional Fields</th>
      <th>Required Behavior</th>
    </tr>
    <tr>
      <td> START_ELEMENT  </td>
      <td> QName name </td>
      <td> namespaces , attributes </td>
      <td> A START_ELEMENT will be written by writing the name,
      namespaces, and attributes of the event in XML 1.0 valid
      syntax for START_ELEMENTs.
      The name is written by looking up the prefix for
      the namespace uri.  The writer can be configured to
      respect prefixes of QNames.  If the writer is respecting
      prefixes it must use the prefix set on the QName.  The
      default behavior is to lookup the value for the prefix
      on the EventWriter's internal namespace context.
      Each attribute (if any)
      is written using the behavior specified in the attribute
      section of this table.  Each namespace (if any) is written
      using the behavior specified in the namespace section of this
      table.
      </td>
    </tr>
    <tr>
      <td> END_ELEMENT  </td>
      <td> Qname name  </td>
      <td> None </td>
      <td> A well formed END_ELEMENT tag is written.
      The name is written by looking up the prefix for
      the namespace uri.  The writer can be configured to
      respect prefixes of QNames.  If the writer is respecting
      prefixes it must use the prefix set on the QName.  The
      default behavior is to lookup the value for the prefix
      on the EventWriter's internal namespace context.
      If the END_ELEMENT name does not match the START_ELEMENT
      name an XMLStreamException is thrown.
      </td>
    </tr>
    <tr>
      <td> ATTRIBUTE  </td>
      <td> QName name , String value </td>
      <td> QName type </td>
      <td> An attribute is written using the same algorithm
           to find the lexical form as used in START_ELEMENT.
           The default is to use double quotes to wrap attribute
           values and to escape any double quotes found in the
           value.  The type value is ignored.
      </td>
    </tr>
    <tr>
      <td> NAMESPACE  </td>
      <td> String prefix, String namespaceURI,
           boolean isDefaultNamespaceDeclaration
     </td>
      <td> None  </td>
      <td> A namespace declaration is written.  If the
           namespace is a default namespace declaration
           (isDefault is true) then xmlns=\"$namespaceURI\"
           is written and the prefix is optional.  If
           isDefault is false, the prefix must be declared
           and the writer must prepend xmlns to the prefix
           and write out a standard prefix declaration.
     </td>
    </tr>
    <tr>
      <td> PROCESSING_INSTRUCTION  </td>
      <td>   None</td>
      <td>   String target, String data</td>
      <td>   The data does not need to be present and may be
             null.  Target is required and many not be null.
             The writer
             will write data section
             directly after the target,
             enclosed in appropriate XML 1.0 syntax
     </td>
    </tr>
    <tr>
      <td> COMMENT  </td>
      <td> None  </td>
      <td> String comment  </td>
      <td> If the comment is present (not null) it is written, otherwise an
           an empty comment is written
     </td>
    </tr>
    <tr>
      <td> START_DOCUMENT  </td>
      <td> None  </td>
      <td> String encoding , boolean standalone, String version  </td>
      <td> A START_DOCUMENT event is not required to be written to the
            stream.  If present the attributes are written inside
            the appropriate XML declaration syntax
     </td>
    </tr>
    <tr>
      <td> END_DOCUMENT  </td>
      <td> None </td>
      <td> None  </td>
      <td> Nothing is written to the output  </td>
    </tr>
    <tr>
      <td> DTD  </td>
      <td> String DocumentTypeDefinition  </td>
      <td> None  </td>
      <td> The DocumentTypeDefinition is written to the output  </td>
    </tr>
  </tbody>
</table>
@param event the event to be added
@throws XMLStreamException
"
      end

      operation 12090498 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 643586 // XMLEventReader
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an entire stream to an output stream,
calls next() on the inputStream argument until hasNext() returns false
This should be treated as a convenience method that will
perform the following loop over all the events in an
event reader and call add on each event.

@param reader the event stream to add to the output
@throws XMLStreamException
"
      end

      operation 12090626 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the prefix the uri is bound to
@param uri the uri to look up
@throws XMLStreamException
"
      end

      operation 12090754 "setPrefix"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the prefix the uri is bound to.  This prefix is bound
in the scope of the current START_ELEMENT / END_ELEMENT pair.
If this method is called before a START_ELEMENT has been written
the prefix is bound in the root scope.
@param prefix the prefix to bind to the uri
@param uri the uri to bind to the prefix
@throws XMLStreamException
"
      end

      operation 12090882 "setDefaultNamespace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a URI to the default namespace
This URI is bound
in the scope of the current START_ELEMENT / END_ELEMENT pair.
If this method is called before a START_ELEMENT has been written
the uri is bound in the root scope.
@param uri the uri to bind to the default namespace
@throws XMLStreamException
"
      end

      operation 12091010 "setNamespaceContext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "context" type class_ref 673794 // NamespaceContext
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current namespace context for prefix and uri bindings.
This context becomes the root namespace context for writing and
will replace the current root namespace context.  Subsequent calls
to setPrefix and setDefaultNamespace will bind namespaces using
the context passed to the method as the root context for resolving
namespaces.
@param context the namespace context to use for this writer
@throws XMLStreamException
"
      end

      operation 12091138 "getNamespaceContext"
	public return_type class_ref 673794 // NamespaceContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current namespace context.
@return the current namespace context
"
      end
    end

    class 640258 "XMLStreamWriter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The XMLStreamWriter interface specifies how to write XML.  The XMLStreamWriter  does
not perform well formedness checking on its input.  However
the writeCharacters method is required to escape &amp; , &lt; and &gt;
For attribute values the writeAttribute method will escape the
above characters plus &quot; to ensure that all character content
and attribute values are well formed.

Each NAMESPACE
and ATTRIBUTE must be individually written.

<table border=\"1\" cellpadding=\"2\" cellspacing=\"0\">
    <thead>
        <tr>
            <th colspan=\"5\">XML Namespaces, <code>javax.xml.stream.isRepairingNamespaces</code> and write method behaviour</th>
        </tr>
        <tr>
            <th>Method</th> <!-- method -->
            <th colspan=\"2\"><code>isRepairingNamespaces</code> == true</th>
            <th colspan=\"2\"><code>isRepairingNamespaces</code> == false</th>
        </tr>
        <tr>
            <th></th> <!-- method -->
            <th>namespaceURI bound</th>
            <th>namespaceURI unbound</th>
            <th>namespaceURI bound</th>
            <th>namespaceURI unbound</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <th><code>writeAttribute(namespaceURI, localName, value)</code></th>
            <!-- isRepairingNamespaces == true -->
            <td>
                <!-- namespaceURI bound -->
                prefix:localName=\"value\"&nbsp;<sup>[1]</sup>
            </td>
            <td>
                <!-- namespaceURI unbound -->
                xmlns:{generated}=\"namespaceURI\" {generated}:localName=\"value\"
            </td>
            <!-- isRepairingNamespaces == false -->
            <td>
                <!-- namespaceURI bound -->
                prefix:localName=\"value\"&nbsp;<sup>[1]</sup>
            </td>
            <td>
                <!-- namespaceURI unbound -->
                <code>XMLStreamException</code>
            </td>
        </tr>

        <tr>
            <th><code>writeAttribute(prefix, namespaceURI, localName, value)</code></th>
            <!-- isRepairingNamespaces == true -->
            <td>
                <!-- namespaceURI bound -->
                bound to same prefix:<br />
                prefix:localName=\"value\"&nbsp;<sup>[1]</sup><br />
                <br />
                bound to different prefix:<br />
                xmlns:{generated}=\"namespaceURI\" {generated}:localName=\"value\"
            </td>
            <td>
                <!-- namespaceURI unbound -->
                xmlns:prefix=\"namespaceURI\" prefix:localName=\"value\"&nbsp;<sup>[3]</sup>
            </td>
            <!-- isRepairingNamespaces == false -->
            <td>
                <!-- namespaceURI bound -->
                bound to same prefix:<br />
                prefix:localName=\"value\"&nbsp;<sup>[1][2]</sup><br />
                <br />
                bound to different prefix:<br />
                <code>XMLStreamException</code><sup>[2]</sup>
            </td>
            <td>
                <!-- namespaceURI unbound -->
                xmlns:prefix=\"namespaceURI\" prefix:localName=\"value\"&nbsp;<sup>[2][5]</sup>
            </td>
        </tr>

        <tr>
            <th><code>writeStartElement(namespaceURI, localName)</code><br />
                <br />
                <code>writeEmptyElement(namespaceURI, localName)</code></th>
            <!-- isRepairingNamespaces == true -->
            <td >
                <!-- namespaceURI bound -->
                &lt;prefix:localName&gt;&nbsp;<sup>[1]</sup>
            </td>
            <td>
                <!-- namespaceURI unbound -->
                &lt;{generated}:localName xmlns:{generated}=\"namespaceURI\"&gt;
            </td>
            <!-- isRepairingNamespaces == false -->
            <td>
                <!-- namespaceURI bound -->
                &lt;prefix:localName&gt;&nbsp;<sup>[1]</sup>
            </td>
            <td>
                <!-- namespaceURI unbound -->
                <code>XMLStreamException</code>
            </td>
        </tr>

        <tr>
            <th><code>writeStartElement(prefix, localName, namespaceURI)</code><br />
                <br />
                <code>writeEmptyElement(prefix, localName, namespaceURI)</code></th>
            <!-- isRepairingNamespaces == true -->
            <td>
                <!-- namespaceURI bound -->
                bound to same prefix:<br />
                &lt;prefix:localName&gt;&nbsp;<sup>[1]</sup><br />
                <br />
                bound to different prefix:<br />
                &lt;{generated}:localName xmlns:{generated}=\"namespaceURI\"&gt;
            </td>
            <td>
                <!-- namespaceURI unbound -->
                &lt;prefix:localName xmlns:prefix=\"namespaceURI\"&gt;&nbsp;<sup>[4]</sup>
            </td>
            <!-- isRepairingNamespaces == false -->
            <td>
                <!-- namespaceURI bound -->
                bound to same prefix:<br />
                &lt;prefix:localName&gt;&nbsp;<sup>[1]</sup><br />
                <br />
                bound to different prefix:<br />
                <code>XMLStreamException</code>
            </td>
            <td>
                <!-- namespaceURI unbound -->
                &lt;prefix:localName&gt;&nbsp;
            </td>
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <td colspan=\"5\">
                Notes:
                <ul>
                    <li>[1] if namespaceURI == default Namespace URI, then no prefix is written</li>
                    <li>[2] if prefix == \"\" || null && namespaceURI == \"\", then no prefix or Namespace declaration is generated or written</li>
                    <li>[3] if prefix == \"\" || null, then a prefix is randomly generated</li>
                    <li>[4] if prefix == \"\" || null, then it is treated as the default Namespace and no prefix is generated or written, an xmlns declaration is generated and written if the namespaceURI is unbound</li>
                    <li>[5] if prefix == \"\" || null, then it is treated as an invalid attempt to define the default Namespace and an XMLStreamException is thrown</li>
                </ul>
            </td>
        </tr>
    </tfoot>
</table>

@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@see XMLOutputFactory
@see XMLStreamReader
@since 1.6
"
      operation 12098306 "writeStartElement"
	public explicit_return_type "void"
	nparams 1
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a start tag to the output.  All writeStartElement methods
open a new scope in the internal namespace context.  Writing the
corresponding EndElement causes the scope to be closed.
@param localName local name of the tag, may not be null
@throws XMLStreamException
"
      end

      operation 12098434 "writeStartElement"
	public explicit_return_type "void"
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a start tag to the output
@param namespaceURI the namespaceURI of the prefix to use, may not be null
@param localName local name of the tag, may not be null
@throws XMLStreamException if the namespace URI has not been bound to a prefix and
javax.xml.stream.isRepairingNamespaces has not been set to true
"
      end

      operation 12098562 "writeStartElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "namespaceURI" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a start tag to the output
@param localName local name of the tag, may not be null
@param prefix the prefix of the tag, may not be null
@param namespaceURI the uri to bind the prefix to, may not be null
@throws XMLStreamException
"
      end

      operation 12098690 "writeEmptyElement"
	public explicit_return_type "void"
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an empty element tag to the output
@param namespaceURI the uri to bind the tag to, may not be null
@param localName local name of the tag, may not be null
@throws XMLStreamException if the namespace URI has not been bound to a prefix and
javax.xml.stream.isRepairingNamespaces has not been set to true
"
      end

      operation 12098818 "writeEmptyElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "namespaceURI" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an empty element tag to the output
@param prefix the prefix of the tag, may not be null
@param localName local name of the tag, may not be null
@param namespaceURI the uri to bind the tag to, may not be null
@throws XMLStreamException
"
      end

      operation 12098946 "writeEmptyElement"
	public explicit_return_type "void"
	nparams 1
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an empty element tag to the output
@param localName local name of the tag, may not be null
@throws XMLStreamException
"
      end

      operation 12099074 "writeEndElement"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes string data to the output without checking for well formedness.
The data is opaque to the XMLStreamWriter, i.e. the characters are written
blindly to the underlying output.  If the method cannot be supported
in the currrent writing context the implementation may throw a
UnsupportedOperationException.  For example note that any
namespace declarations, end tags, etc. will be ignored and could
interfere with proper maintanence of the writers internal state.

@param data the data to write

  public void writeRaw(String data) throws XMLStreamException;

Writes an end tag to the output relying on the internal
state of the writer to determine the prefix and local name
of the event.
@throws XMLStreamException
"
      end

      operation 12099202 "writeEndDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes any start tags and writes corresponding end tags.
@throws XMLStreamException
"
      end

      operation 12099330 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close this writer and free any resources associated with the
writer.  This must not close the underlying output stream.
@throws XMLStreamException
"
      end

      operation 12099458 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write any cached data to the underlying output mechanism.
@throws XMLStreamException
"
      end

      operation 12099586 "writeAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an attribute to the output stream without
a prefix.
@param localName the local name of the attribute
@param value the value of the attribute
@throws IllegalStateException if the current state does not allow Attribute writing
@throws XMLStreamException
"
      end

      operation 12099714 "writeAttribute"
	public explicit_return_type "void"
	nparams 4
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an attribute to the output stream
@param prefix the prefix for this attribute
@param namespaceURI the uri of the prefix for this attribute
@param localName the local name of the attribute
@param value the value of the attribute
@throws IllegalStateException if the current state does not allow Attribute writing
@throws XMLStreamException if the namespace URI has not been bound to a prefix and
javax.xml.stream.isRepairingNamespaces has not been set to true
"
      end

      operation 12099842 "writeAttribute"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an attribute to the output stream
@param namespaceURI the uri of the prefix for this attribute
@param localName the local name of the attribute
@param value the value of the attribute
@throws IllegalStateException if the current state does not allow Attribute writing
@throws XMLStreamException if the namespace URI has not been bound to a prefix and
javax.xml.stream.isRepairingNamespaces has not been set to true
"
      end

      operation 12099970 "writeNamespace"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceURI" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a namespace to the output stream
If the prefix argument to this method is the empty string,
\"xmlns\", or null this method will delegate to writeDefaultNamespace

@param prefix the prefix to bind this namespace to
@param namespaceURI the uri to bind the prefix to
@throws IllegalStateException if the current state does not allow Namespace writing
@throws XMLStreamException
"
      end

      operation 12100098 "writeDefaultNamespace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the default namespace to the stream
@param namespaceURI the uri to bind the default namespace to
@throws IllegalStateException if the current state does not allow Namespace writing
@throws XMLStreamException
"
      end

      operation 12100226 "writeComment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an xml comment with the data enclosed
@param data the data contained in the comment, may be null
@throws XMLStreamException
"
      end

      operation 12100354 "writeProcessingInstruction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a processing instruction
@param target the target of the processing instruction, may not be null
@throws XMLStreamException
"
      end

      operation 12100482 "writeProcessingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a processing instruction
@param target the target of the processing instruction, may not be null
@param data the data contained in the processing instruction, may not be null
@throws XMLStreamException
"
      end

      operation 12100610 "writeCData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a CData section
@param data the data contained in the CData Section, may not be null
@throws XMLStreamException
"
      end

      operation 12100738 "writeDTD"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dtd" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a DTD section.  This string represents the entire doctypedecl production
from the XML 1.0 specification.

@param dtd the DTD to be written
@throws XMLStreamException
"
      end

      operation 12100866 "writeEntityRef"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an entity reference
@param name the name of the entity
@throws XMLStreamException
"
      end

      operation 12100994 "writeStartDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the XML Declaration. Defaults the XML version to 1.0, and the encoding to utf-8
@throws XMLStreamException
"
      end

      operation 12101122 "writeStartDocument"
	public explicit_return_type "void"
	nparams 1
	  param inout name "version" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the XML Declaration. Defaults the XML version to 1.0
@param version version of the xml document
@throws XMLStreamException
"
      end

      operation 12101250 "writeStartDocument"
	public explicit_return_type "void"
	nparams 2
	  param inout name "encoding" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the XML Declaration.  Note that the encoding parameter does
not set the actual encoding of the underlying output.  That must
be set when the instance of the XMLStreamWriter is created using the
XMLOutputFactory
@param encoding encoding of the xml declaration
@param version version of the xml document
@throws XMLStreamException If given encoding does not match encoding
of the underlying stream
"
      end

      operation 12101378 "writeCharacters"
	public explicit_return_type "void"
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write text to the output
@param text the value to write
@throws XMLStreamException
"
      end

      operation 12101506 "writeCharacters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write text to the output
@param text the value to write
@param start the starting position in the array
@param len the number of characters to write
@throws XMLStreamException
"
      end

      operation 12101634 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the prefix the uri is bound to
@return the prefix or null
@throws XMLStreamException
"
      end

      operation 12101762 "setPrefix"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the prefix the uri is bound to.  This prefix is bound
in the scope of the current START_ELEMENT / END_ELEMENT pair.
If this method is called before a START_ELEMENT has been written
the prefix is bound in the root scope.
@param prefix the prefix to bind to the uri, may not be null
@param uri the uri to bind to the prefix, may be null
@throws XMLStreamException
"
      end

      operation 12101890 "setDefaultNamespace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a URI to the default namespace
This URI is bound
in the scope of the current START_ELEMENT / END_ELEMENT pair.
If this method is called before a START_ELEMENT has been written
the uri is bound in the root scope.
@param uri the uri to bind to the default namespace, may be null
@throws XMLStreamException
"
      end

      operation 12102018 "setNamespaceContext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "context" type class_ref 673794 // NamespaceContext
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current namespace context for prefix and uri bindings.
This context becomes the root namespace context for writing and
will replace the current root namespace context.  Subsequent calls
to setPrefix and setDefaultNamespace will bind namespaces using
the context passed to the method as the root context for resolving
namespaces.  This method may only be called once at the start of
the document.  It does not cause the namespaces to be declared.
If a namespace URI to prefix mapping is found in the namespace
context it is treated as declared and the prefix may be used
by the StreamWriter.
@param context the namespace context to use for this writer, may not be null
@throws XMLStreamException
"
      end

      operation 12102146 "getNamespaceContext"
	public return_type class_ref 673794 // NamespaceContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current namespace context.
@return the current NamespaceContext
"
      end

      operation 12102274 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of a feature/property from the underlying implementation
@param name The name of the property, may not be null
@return The value of the property
@throws IllegalArgumentException if the property is not supported
@throws NullPointerException if the name is null
"
      end
    end

    class 641410 "XMLReporter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is used to report non-fatal errors.
Only warnings should be echoed through this interface.
@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@since 1.6
"
      operation 12097026 "report"
	public explicit_return_type "void"
	nparams 4
	  param inout name "message" type class_ref 128130 // String
	  param inout name "errorType" type class_ref 128130 // String
	  param inout name "relatedInformation" type class_ref 129538 // Object
	  param inout name "location" type class_ref 641538 // Location
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Report the desired message in an application specific format.

Only warnings and non-fatal errors should be reported through

this interface.

Fatal errors should be thrown as XMLStreamException.



@param message the error message

@param errorType an implementation defined error type

@param relatedInformation information related to the error, if available

@param location the location of the error, if available

@throws XMLStreamException

"
      end
    end

    class 641538 "Location"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides information on the location of an event.

All the information provided by a Location is optional.  For example
an application may only report line numbers.

@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@since 1.6
"
      operation 4103810 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the line number where the current event ends,
returns -1 if none is available.
@return the current line number
"
      end

      operation 4103938 "getColumnNumber"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the column number where the current event ends,
returns -1 if none is available.
@return the current column number
"
      end

      operation 4104066 "getCharacterOffset"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the byte or character offset into the input source this location
is pointing to. If the input source is a file or a byte stream then
this is the byte offset into that stream, but if the input source is
a character media then the offset is the character offset.
Returns -1 if there is no offset available.
@return the current offset
"
      end

      operation 4104194 "getPublicId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the public ID of the XML
@return the public ID, or null if not available
"
      end

      operation 4104322 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system ID of the XML
@return the system ID, or null if not available
"
      end
    end

    class 641922 "XMLEventFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a utility class for creating instances of
XMLEvents
@version 1.2
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@see javax.xml.stream.events.StartElement
@see javax.xml.stream.events.EndElement
@see javax.xml.stream.events.ProcessingInstruction
@see javax.xml.stream.events.Comment
@see javax.xml.stream.events.Characters
@see javax.xml.stream.events.StartDocument
@see javax.xml.stream.events.EndDocument
@see javax.xml.stream.events.DTD
@since 1.6
"
      operation 12085122 "XMLEventFactory"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 4794626 // JAXPFACTORYID (<unidirectional association>)
	relation 4794626 --->
	  a role_name "JAXPFACTORYID" init_value " \"javax.xml.stream.XMLEventFactory\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4794626 // JAXPFACTORYID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4794754 // DEFAULIMPL (<unidirectional association>)
	relation 4794754 --->
	  a role_name "DEFAULIMPL" init_value " \"com.sun.xml.internal.stream.events.XMLEventFactoryImpl\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4794754 // DEFAULIMPL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12085250 "newInstance"
	class_operation public return_type class_ref 641922 // XMLEventFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the factory in exactly the same manner as the
{@link #newFactory()} method.
@throws FactoryConfigurationError if an instance of this factory cannot be loaded
"
      end

      operation 12085378 "newFactory"
	class_operation public return_type class_ref 641922 // XMLEventFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory.
<p>
This static method creates a new factory instance.
This method uses the following ordered lookup procedure to determine
the XMLEventFactory implementation class to load:
</p>
<ul>
<li>
  Use the javax.xml.stream.XMLEventFactory system property.
</li>
<li>
  Use the properties file \"lib/stax.properties\" in the JRE directory.
    This configuration file is in standard java.util.Properties format
    and contains the fully qualified name of the implementation class
    with the key being the system property defined above.
</li>
<li>
  Use the service-provider loading facilities, defined by the
  {@link java.util.ServiceLoader} class, to attempt to locate and load an
  implementation of the service using the {@linkplain
  java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:
  the service-provider loading facility will use the {@linkplain
  java.lang.Thread#getContextClassLoader() current thread's context class loader}
  to attempt to load the service. If the context class
  loader is null, the {@linkplain
  ClassLoader#getSystemClassLoader() system class loader} will be used.
</li>
<li>
  Otherwise, the system-default implementation is returned.
</li>
</ul>
<p>
  Once an application has obtained a reference to a XMLEventFactory it
  can use the factory to configure and obtain stream instances.
</p>
<p>
  Note that this is a new method that replaces the deprecated newInstance() method.
    No changes in behavior are defined by this replacement method relative to
    the deprecated method.
</p>
@throws FactoryConfigurationError in case of {@linkplain
  java.util.ServiceConfigurationError service configuration error} or if
  the implementation is not available or cannot be instantiated.
"
      end

      operation 12085506 "newInstance"
	class_operation public return_type class_ref 641922 // XMLEventFactory
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory

@param factoryId             Name of the factory to find, same as
                             a property name
@param classLoader           classLoader to use
@return the factory implementation
@throws FactoryConfigurationError if an instance of this factory cannot be loaded

@deprecated  This method has been deprecated to maintain API consistency.
             All newInstance methods have been replaced with corresponding
             newFactory methods. The replacement {@link
             #newFactory(java.lang.String, java.lang.ClassLoader)}
             method defines no changes in behavior.
"
      end

      operation 12085634 "newFactory"
	class_operation public return_type class_ref 641922 // XMLEventFactory
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory.
If the classLoader argument is null, then the ContextClassLoader is used.
<p>
This method uses the following ordered lookup procedure to determine
the XMLEventFactory implementation class to load:
</p>
<ul>
<li>
  Use the value of the system property identified by {@code factoryId}.
</li>
<li>
  Use the properties file \"lib/stax.properties\" in the JRE directory.
    This configuration file is in standard java.util.Properties format
    and contains the fully qualified name of the implementation class
    with the key being the given {@code factoryId}.
</li>
<li>
  If {@code factoryId} is \"javax.xml.stream.XMLEventFactory\",
  use the service-provider loading facilities, defined by the
  {@link java.util.ServiceLoader} class, to attempt to {@linkplain
  java.util.ServiceLoader#load(java.lang.Class, java.lang.ClassLoader) locate and load}
  an implementation of the service using the specified {@code ClassLoader}.
  If {@code classLoader} is null, the {@linkplain
  java.util.ServiceLoader#load(java.lang.Class) default loading mechanism} will apply:
  That is, the service-provider loading facility will use the {@linkplain
  java.lang.Thread#getContextClassLoader() current thread's context class loader}
  to attempt to load the service. If the context class
  loader is null, the {@linkplain
  ClassLoader#getSystemClassLoader() system class loader} will be used.
</li>
<li>
  Otherwise, throws a {@link FactoryConfigurationError}.
</li>
</ul>

<p>
Note that this is a new method that replaces the deprecated
  {@link #newInstance(java.lang.String, java.lang.ClassLoader)
  newInstance(String factoryId, ClassLoader classLoader)} method.
No changes in behavior are defined by this replacement method relative
to the deprecated method.
</p>

@apiNote The parameter factoryId defined here is inconsistent with that
of other JAXP factories where the first parameter is fully qualified
factory class name that provides implementation of the factory.

@param factoryId             Name of the factory to find, same as
                             a property name
@param classLoader           classLoader to use
@return the factory implementation
@throws FactoryConfigurationError in case of {@linkplain
  java.util.ServiceConfigurationError service configuration error} or if
  the implementation is not available or cannot be instantiated.
"
      end

      operation 12085762 "setLocation"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "location" type class_ref 641538 // Location
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method allows setting of the Location on each event that
is created by this factory.  The values are copied by value into
the events created by this factory.  To reset the location
information set the location to null.
@param location the location to set on each event created
"
      end

      operation 12085890 "createAttribute"
	abstract public return_type class_ref 1430018 // Attribute
	nparams 4
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new Attribute
@param prefix the prefix of this attribute, may not be null
@param namespaceURI the attribute value is set to this value, may not be null
@param localName the local name of the XML name of the attribute, localName cannot be null
@param value the attribute value to set, may not be null
@return the Attribute with specified values
"
      end

      operation 12086018 "createAttribute"
	abstract public return_type class_ref 1430018 // Attribute
	nparams 2
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new Attribute
@param localName the local name of the XML name of the attribute, localName cannot be null
@param value the attribute value to set, may not be null
@return the Attribute with specified values
"
      end

      operation 12086146 "createAttribute"
	abstract public return_type class_ref 1430018 // Attribute
	nparams 2
	  param inout name "name" type class_ref 673666 // QName
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new Attribute
@param name the qualified name of the attribute, may not be null
@param value the attribute value to set, may not be null
@return the Attribute with specified values
"
      end

      operation 12086274 "createNamespace"
	abstract public return_type class_ref 642050 // Namespace
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new default Namespace
@param namespaceURI the default namespace uri
@return the Namespace with the specified value
"
      end

      operation 12086402 "createNamespace"
	abstract public return_type class_ref 642050 // Namespace
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceUri" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new Namespace
@param prefix the prefix of this namespace, may not be null
@param namespaceUri the attribute value is set to this value, may not be null
@return the Namespace with the specified values
"
      end

      operation 12086530 "createStartElement"
	abstract public return_type class_ref 644354 // StartElement
	nparams 3
	  param inout name "name" type class_ref 673666 // QName
	  param inout name "attributes" type class_ref 132994 // Iterator
	  param inout name "namespaces" type class_ref 132994 // Iterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new StartElement.  Namespaces can be added to this StartElement
by passing in an Iterator that walks over a set of Namespace interfaces.
Attributes can be added to this StartElement by passing an iterator
that walks over a set of Attribute interfaces.

@param name the qualified name of the attribute, may not be null
@param attributes an optional unordered set of objects that
implement Attribute to add to the new StartElement, may be null
@param namespaces an optional unordered set of objects that
implement Namespace to add to the new StartElement, may be null
@return an instance of the requested StartElement
"
      end

      operation 12086658 "createStartElement"
	abstract public return_type class_ref 644354 // StartElement
	nparams 3
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceUri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new StartElement.  This defaults the NamespaceContext to
an empty NamespaceContext.  Querying this event for its namespaces or
attributes will result in an empty iterator being returned.

@param namespaceUri the uri of the QName of the new StartElement
@param localName the local name of the QName of the new StartElement
@param prefix the prefix of the QName of the new StartElement
@return an instance of the requested StartElement
"
      end

      operation 12086786 "createStartElement"
	abstract public return_type class_ref 644354 // StartElement
	nparams 5
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceUri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 132994 // Iterator
	  param inout name "namespaces" type class_ref 132994 // Iterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new StartElement.  Namespaces can be added to this StartElement
by passing in an Iterator that walks over a set of Namespace interfaces.
Attributes can be added to this StartElement by passing an iterator
that walks over a set of Attribute interfaces.

@param namespaceUri the uri of the QName of the new StartElement
@param localName the local name of the QName of the new StartElement
@param prefix the prefix of the QName of the new StartElement
@param attributes an unordered set of objects that implement
Attribute to add to the new StartElement
@param namespaces an unordered set of objects that implement
Namespace to add to the new StartElement
@return an instance of the requested StartElement
"
      end

      operation 12086914 "createStartElement"
	abstract public return_type class_ref 644354 // StartElement
	nparams 6
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceUri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 132994 // Iterator
	  param inout name "namespaces" type class_ref 132994 // Iterator
	  param inout name "context" type class_ref 673794 // NamespaceContext
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new StartElement.  Namespaces can be added to this StartElement
by passing in an Iterator that walks over a set of Namespace interfaces.
Attributes can be added to this StartElement by passing an iterator
that walks over a set of Attribute interfaces.

@param namespaceUri the uri of the QName of the new StartElement
@param localName the local name of the QName of the new StartElement
@param prefix the prefix of the QName of the new StartElement
@param attributes an unordered set of objects that implement
Attribute to add to the new StartElement, may be null
@param namespaces an unordered set of objects that implement
Namespace to add to the new StartElement, may be null
@param context the namespace context of this element
@return an instance of the requested StartElement
"
      end

      operation 12087042 "createEndElement"
	abstract public return_type class_ref 644226 // EndElement
	nparams 2
	  param inout name "name" type class_ref 673666 // QName
	  param inout name "namespaces" type class_ref 132994 // Iterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new EndElement
@param name the qualified name of the EndElement
@param namespaces an optional unordered set of objects that
implement Namespace that have gone out of scope, may be null
@return an instance of the requested EndElement
"
      end

      operation 12087170 "createEndElement"
	abstract public return_type class_ref 644226 // EndElement
	nparams 3
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceUri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new EndElement
@param namespaceUri the uri of the QName of the new StartElement
@param localName the local name of the QName of the new StartElement
@param prefix the prefix of the QName of the new StartElement
@return an instance of the requested EndElement
"
      end

      operation 12087298 "createEndElement"
	abstract public return_type class_ref 644226 // EndElement
	nparams 4
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "namespaceUri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "namespaces" type class_ref 132994 // Iterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new EndElement
@param namespaceUri the uri of the QName of the new StartElement
@param localName the local name of the QName of the new StartElement
@param prefix the prefix of the QName of the new StartElement
@param namespaces an unordered set of objects that implement
Namespace that have gone out of scope, may be null
@return an instance of the requested EndElement
"
      end

      operation 12087426 "createCharacters"
	abstract public return_type class_ref 644098 // Characters
	nparams 1
	  param inout name "content" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Characters event, this method does not check if the content
is all whitespace.  To create a space event use #createSpace(String)
@param content the string to create
@return a Characters event
"
      end

      operation 12087554 "createCData"
	abstract public return_type class_ref 644098 // Characters
	nparams 1
	  param inout name "content" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Characters event with the CData flag set to true
@param content the string to create
@return a Characters event
"
      end

      operation 12087682 "createSpace"
	abstract public return_type class_ref 644098 // Characters
	nparams 1
	  param inout name "content" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Characters event with the isSpace flag set to true
@param content the content of the space to create
@return a Characters event
"
      end

      operation 12087810 "createIgnorableSpace"
	abstract public return_type class_ref 644098 // Characters
	nparams 1
	  param inout name "content" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an ignorable space
@param content the space to create
@return a Characters event
"
      end

      operation 12087938 "createStartDocument"
	abstract public return_type class_ref 1430146 // StartDocument
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of a StartDocument event
@return a StartDocument event
"
      end

      operation 12088066 "createStartDocument"
	abstract public return_type class_ref 1430146 // StartDocument
	nparams 3
	  param inout name "encoding" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	  param inout name "standalone" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of a StartDocument event

@param encoding the encoding style
@param version the XML version
@param standalone the status of standalone may be set to \"true\" or \"false\"
@return a StartDocument event
"
      end

      operation 12088194 "createStartDocument"
	abstract public return_type class_ref 1430146 // StartDocument
	nparams 2
	  param inout name "encoding" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of a StartDocument event

@param encoding the encoding style
@param version the XML version
@return a StartDocument event
"
      end

      operation 12088322 "createStartDocument"
	abstract public return_type class_ref 1430146 // StartDocument
	nparams 1
	  param inout name "encoding" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of a StartDocument event

@param encoding the encoding style
@return a StartDocument event
"
      end

      operation 12088450 "createEndDocument"
	abstract public return_type class_ref 1430274 // EndDocument
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of an EndDocument event
@return an EndDocument event
"
      end

      operation 12088578 "createEntityReference"
	abstract public return_type class_ref 1430402 // EntityReference
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "declaration" type class_ref 1430530 // EntityDeclaration
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a new instance of a EntityReference event

@param name The name of the reference
@param declaration the declaration for the event
@return an EntityReference event
"
      end

      operation 12088706 "createComment"
	abstract public return_type class_ref 1430658 // Comment
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a comment
@param text The text of the comment
a Comment event
"
      end

      operation 12088834 "createProcessingInstruction"
	abstract public return_type class_ref 643970 // ProcessingInstruction
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a processing instruction
@param target The target of the processing instruction
@param data The text of the processing instruction
@return a ProcessingInstruction event
"
      end

      operation 12088962 "createDTD"
	abstract public return_type class_ref 1430786 // DTD
	nparams 1
	  param inout name "dtd" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a document type definition event
This string contains the entire document type declaration that matches
the doctypedecl in the XML 1.0 specification
@param dtd the text of the document type definition
@return a DTD event
"
      end
    end

    class 643586 "XMLEventReader"
      visibility public stereotype "interface"
      nactuals 1
      actual class class_ref 132994 // Iterator
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
This is the top level interface for parsing XML Events.  It provides
the ability to peek at the next event and returns configuration
information through the property interface.

@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@see XMLInputFactory
@see XMLEventWriter
@since 1.6
"
      classrelation 4794882 // <generalisation>
	relation 4794882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4794882 // <generalisation>
	  b parent class_ref 132994 // Iterator
      end

      operation 12089090 "nextEvent"
	public return_type class_ref 643842 // XMLEvent
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next XMLEvent
@see XMLEvent
@throws XMLStreamException if there is an error with the underlying XML.
@throws NoSuchElementException iteration has no more elements.
"
      end

      operation 12089218 "hasNext"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if there are more events.
Returns true if there are more events and false otherwise.
@return true if the event reader has more events, false otherwise
"
      end

      operation 12089346 "peek"
	public return_type class_ref 643842 // XMLEvent
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check the next XMLEvent without reading it from the stream.
Returns null if the stream is at EOF or has no more XMLEvents.
A call to peek() will be equal to the next return of next().
@see XMLEvent
@throws XMLStreamException
"
      end

      operation 12089474 "getElementText"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the content of a text-only element. Precondition:
the current event is START_ELEMENT. Postcondition:
The current event is the corresponding END_ELEMENT.
@throws XMLStreamException if the current event is not a START_ELEMENT
or if a non text element is encountered
"
      end

      operation 12089602 "nextTag"
	public return_type class_ref 643842 // XMLEvent
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips any insignificant space events until a START_ELEMENT or
END_ELEMENT is reached. If anything other than space characters are
encountered, an exception is thrown. This method should
be used when processing element-only content because
the parser is not able to recognize ignorable whitespace if
the DTD is missing or not interpreted.
@throws XMLStreamException if anything other than space characters are encountered
"
      end

      operation 12089730 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of a feature/property from the underlying implementation
@param name The name of the property
@return The value of the property
@throws IllegalArgumentException if the property is not supported
"
      end

      operation 12089858 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frees any resources associated with this Reader.  This method does not close the
underlying input source.
@throws XMLStreamException if there are errors freeing associated resources
"
      end
    end

    class 643714 "XMLStreamException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The base exception for unexpected processing errors.  This Exception
class is used to report well-formedness errors as well as unexpected
processing conditions.
@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@since 1.6
"
      classrelation 4796674 // <generalisation>
	relation 4796674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4796674 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 4796802 // nested (<unidirectional association>)
	relation 4796802 --->
	  a role_name "nested" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4796802 // nested (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      classrelation 4796930 // location (<unidirectional association>)
	relation 4796930 --->
	  a role_name "location" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4796930 // location (<unidirectional association>)
	  b parent class_ref 641538 // Location
      end

      operation 12097282 "XMLStreamException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor
"
      end

      operation 12097410 "XMLStreamException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with the assocated message.

@param msg the message to report
"
      end

      operation 12097538 "XMLStreamException"
	public explicit_return_type ""
	nparams 1
	  param inout name "th" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with the assocated exception

@param th a nested exception
"
      end

      operation 12097666 "XMLStreamException"
	public explicit_return_type ""
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "th" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with the assocated message and exception

@param th a nested exception
@param msg the message to report
"
      end

      operation 12097794 "XMLStreamException"
	public explicit_return_type ""
	nparams 3
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "location" type class_ref 641538 // Location
	  param inout name "th" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with the assocated message, exception and location.

@param th a nested exception
@param msg the message to report
@param location the location of the error
"
      end

      operation 12097922 "XMLStreamException"
	public explicit_return_type ""
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "location" type class_ref 641538 // Location
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with the assocated message, exception and location.

@param msg the message to report
@param location the location of the error
"
      end

      operation 12098050 "getNestedException"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the nested exception.

@return Nested exception
"
      end

      operation 12098178 "getLocation"
	public return_type class_ref 641538 // Location
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the location of the exception

@return the location of the exception, may be null if none is available
"
      end
    end

    class 644610 "XMLStreamReader"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The XMLStreamReader interface allows forward, read-only access to XML.
 It is designed to be the lowest level and most efficient way to
 read XML data.

<p> The XMLStreamReader is designed to iterate over XML using
next() and hasNext().  The data can be accessed using methods such as getEventType(),
getNamespaceURI(), getLocalName() and getText();

<p> The <a href=\"#next()\">next()</a> method causes the reader to read the next parse event.
The next() method returns an integer which identifies the type of event just read.
<p> The event type can be determined using <a href=\"#getEventType()\">getEventType()</a>.
<p> Parsing events are defined as the XML Declaration, a DTD,
start tag, character data, white space, end tag, comment,
or processing instruction.  An attribute or namespace event may be encountered
at the root level of a document as the result of a query operation.

<p>For XML 1.0 compliance an XML processor must pass the
identifiers of declared unparsed entities, notation declarations and their
associated identifiers to the application.  This information is
provided through the property API on this interface.
The following two properties allow access to this information:
javax.xml.stream.notations and javax.xml.stream.entities.
When the current event is a DTD the following call will return a
list of Notations
 <code>List l = (List) getProperty(\"javax.xml.stream.notations\");</code>
The following call will return a list of entity declarations:
<code>List l = (List) getProperty(\"javax.xml.stream.entities\");</code>
These properties can only be accessed during a DTD event and
are defined to return null if the information is not available.

<p>The following table describes which methods are valid in what state.
If a method is called in an invalid state the method will throw a
java.lang.IllegalStateException.

<table border=\"2\" rules=\"all\" cellpadding=\"4\">
  <thead>
    <tr>
      <th align=\"center\" colspan=\"2\">
        Valid methods for each state
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Event Type</th>
      <th>Valid Methods</th>
    </tr>
    <tr>
      <td> All States  </td>
      <td> getProperty(), hasNext(), require(), close(),
           getNamespaceURI(), isStartElement(),
           isEndElement(), isCharacters(), isWhiteSpace(),
           getNamespaceContext(), getEventType(),getLocation(),
           hasText(), hasName()
      </td>
    </tr>
    <tr>
      <td> START_ELEMENT  </td>
      <td> next(), getName(), getLocalName(), hasName(), getPrefix(),
           getAttributeXXX(), isAttributeSpecified(),
           getNamespaceXXX(),
           getElementText(), nextTag()
      </td>
    </tr>
      <td> ATTRIBUTE  </td>
      <td> next(), nextTag()
           getAttributeXXX(), isAttributeSpecified(),
      </td>
    </tr>
    </tr>
      <td> NAMESPACE  </td>
      <td> next(), nextTag()
           getNamespaceXXX()
      </td>
    </tr>
    <tr>
      <td> END_ELEMENT  </td>
      <td> next(), getName(), getLocalName(), hasName(), getPrefix(),
           getNamespaceXXX(), nextTag()
     </td>
    </tr>
    <tr>
      <td> CHARACTERS  </td>
      <td> next(), getTextXXX(), nextTag() </td>
    </tr>
    <tr>
      <td> CDATA  </td>
      <td> next(), getTextXXX(), nextTag() </td>
    </tr>
    <tr>
      <td> COMMENT  </td>
      <td> next(), getTextXXX(), nextTag() </td>
    </tr>
    <tr>
      <td> SPACE  </td>
      <td> next(), getTextXXX(), nextTag() </td>
    </tr>
    <tr>
      <td> START_DOCUMENT  </td>
      <td> next(), getEncoding(), getVersion(), isStandalone(), standaloneSet(),
           getCharacterEncodingScheme(), nextTag()</td>
    </tr>
    <tr>
      <td> END_DOCUMENT  </td>
      <td> close()</td>
    </tr>
    <tr>
      <td> PROCESSING_INSTRUCTION  </td>
      <td> next(), getPITarget(), getPIData(), nextTag() </td>
    </tr>
    <tr>
      <td> ENTITY_REFERENCE  </td>
      <td> next(), getLocalName(), getText(), nextTag() </td>
    </tr>
    <tr>
      <td> DTD  </td>
      <td> next(), getText(), nextTag() </td>
    </tr>
  </tbody>
 </table>

@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@see javax.xml.stream.events.XMLEvent
@see XMLInputFactory
@see XMLStreamWriter
@since 1.6
"
      classrelation 1873922 // <generalisation>
	relation 1873922 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1873922 // <generalisation>
	  b parent class_ref 673538 // XMLStreamConstants
      end

      operation 4407170 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of a feature/property from the underlying implementation
@param name The name of the property, may not be null
@return The value of the property
@throws IllegalArgumentException if name is null
"
      end

      operation 4407298 "next"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get next parsing event - a processor may return all contiguous
character data in a single chunk, or it may split it into several chunks.
If the property javax.xml.stream.isCoalescing is set to true
element content must be coalesced and only one CHARACTERS event
must be returned for contiguous element content or
CDATA Sections.

By default entity references must be
expanded and reported transparently to the application.
An exception will be thrown if an entity reference cannot be expanded.
If element content is empty (i.e. content is \"\") then no CHARACTERS event will be reported.

<p>Given the following XML:<br>
&lt;foo>&lt;!--description-->content text&lt;![CDATA[&lt;greeting>Hello&lt;/greeting>]]>other content&lt;/foo><br>
The behavior of calling next() when being on foo will be:<br>
1- the comment (COMMENT)<br>
2- then the characters section (CHARACTERS)<br>
3- then the CDATA section (another CHARACTERS)<br>
4- then the next characters section (another CHARACTERS)<br>
5- then the END_ELEMENT<br>

<p><b>NOTE:</b> empty element (such as &lt;tag/>) will be reported
 with  two separate events: START_ELEMENT, END_ELEMENT - This preserves
  parsing equivalency of empty element to &lt;tag>&lt;/tag>.

This method will throw an IllegalStateException if it is called after hasNext() returns false.
@see javax.xml.stream.events.XMLEvent
@return the integer code corresponding to the current parse event
@throws NoSuchElementException if this is called when hasNext() returns false
@throws XMLStreamException  if there is an error processing the underlying XML source
"
      end

      operation 4407426 "require"
	public explicit_return_type "void"
	nparams 3
	  param in name "type" explicit_type "int"
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test if the current event is of the given type and if the namespace and name match the current
namespace and name of the current event.  If the namespaceURI is null it is not checked for equality,
if the localName is null it is not checked for equality.
@param type the event type
@param namespaceURI the uri of the event, may be null
@param localName the localName of the event, may be null
@throws XMLStreamException if the required values are not matched.
"
      end

      operation 4407554 "getElementText"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the content of a text-only element, an exception is thrown if this is
not a text-only element.
Regardless of value of javax.xml.stream.isCoalescing this method always returns coalesced content.
<br /> Precondition: the current event is START_ELEMENT.
<br /> Postcondition: the current event is the corresponding END_ELEMENT.

<br />The method does the following (implementations are free to optimized
but must do equivalent processing):
<pre>
if(getEventType() != XMLStreamConstants.START_ELEMENT) {
throw new XMLStreamException(
\"parser must be on START_ELEMENT to read next text\", getLocation());
}
int eventType = next();
StringBuffer content = new StringBuffer();
while(eventType != XMLStreamConstants.END_ELEMENT ) {
if(eventType == XMLStreamConstants.CHARACTERS
|| eventType == XMLStreamConstants.CDATA
|| eventType == XMLStreamConstants.SPACE
|| eventType == XMLStreamConstants.ENTITY_REFERENCE) {
buf.append(getText());
} else if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
|| eventType == XMLStreamConstants.COMMENT) {
// skipping
} else if(eventType == XMLStreamConstants.END_DOCUMENT) {
throw new XMLStreamException(
\"unexpected end of document when reading element text content\", this);
} else if(eventType == XMLStreamConstants.START_ELEMENT) {
throw new XMLStreamException(
\"element text content may not contain START_ELEMENT\", getLocation());
} else {
throw new XMLStreamException(
\"Unexpected event type \"+eventType, getLocation());
}
eventType = next();
}
return buf.toString();
</pre>

@throws XMLStreamException if the current event is not a START_ELEMENT
or if a non text element is encountered
"
      end

      operation 4407682 "nextTag"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips any white space (isWhiteSpace() returns true), COMMENT,
or PROCESSING_INSTRUCTION,
until a START_ELEMENT or END_ELEMENT is reached.
If other than white space characters, COMMENT, PROCESSING_INSTRUCTION, START_ELEMENT, END_ELEMENT
are encountered, an exception is thrown. This method should
be used when processing element-only content seperated by white space.

<br /> Precondition: none
<br /> Postcondition: the current event is START_ELEMENT or END_ELEMENT
and cursor may have moved over any whitespace event.

<br />Essentially it does the following (implementations are free to optimized
but must do equivalent processing):
<pre>
int eventType = next();
while((eventType == XMLStreamConstants.CHARACTERS &amp;&amp; isWhiteSpace()) // skip whitespace
|| (eventType == XMLStreamConstants.CDATA &amp;&amp; isWhiteSpace())
// skip whitespace
|| eventType == XMLStreamConstants.SPACE
|| eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
|| eventType == XMLStreamConstants.COMMENT
) {
eventType = next();
}
if (eventType != XMLStreamConstants.START_ELEMENT &amp;&amp; eventType != XMLStreamConstants.END_ELEMENT) {
throw new String XMLStreamException(\"expected start or end tag\", getLocation());
}
return eventType;
</pre>

@return the event type of the element read (START_ELEMENT or END_ELEMENT)
@throws XMLStreamException if the current event is not white space, PROCESSING_INSTRUCTION,
START_ELEMENT or END_ELEMENT
@throws NoSuchElementException if this is called when hasNext() returns false
"
      end

      operation 4407810 "hasNext"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if there are more parsing events and false
if there are no more events.  This method will return
false if the current state of the XMLStreamReader is
END_DOCUMENT
@return true if there are more events, false otherwise
@throws XMLStreamException if there is a fatal error detecting the next state
"
      end

      operation 4407938 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frees any resources associated with this Reader.  This method does not close the
underlying input source.
@throws XMLStreamException if there are errors freeing associated resources
"
      end

      operation 4408066 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the uri for the given prefix.
The uri returned depends on the current state of the processor.

<p><strong>NOTE:</strong>The 'xml' prefix is bound as defined in
<a href=\"http://www.w3.org/TR/REC-xml-names/#ns-using\">Namespaces in XML</a>
specification to \"http://www.w3.org/XML/1998/namespace\".

<p><strong>NOTE:</strong> The 'xmlns' prefix must be resolved to following namespace
<a href=\"http://www.w3.org/2000/xmlns/\">http://www.w3.org/2000/xmlns/</a>
@param prefix The prefix to lookup, may not be null
@return the uri bound to the given prefix or null if it is not bound
@throws IllegalArgumentException if the prefix is null
"
      end

      operation 4408194 "isStartElement"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the cursor points to a start tag (otherwise false)
@return true if the cursor points to a start tag, false otherwise
"
      end

      operation 4408322 "isEndElement"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the cursor points to an end tag (otherwise false)
@return true if the cursor points to an end tag, false otherwise
"
      end

      operation 4408450 "isCharacters"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the cursor points to a character data event
@return true if the cursor points to character data, false otherwise
"
      end

      operation 4408578 "isWhiteSpace"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the cursor points to a character data event
that consists of all whitespace
@return true if the cursor points to all whitespace, false otherwise
"
      end

      operation 4408706 "getAttributeValue"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the normalized attribute value of the
attribute with the namespace and localName
If the namespaceURI is null the namespace
is not checked for equality
@param namespaceURI the namespace of the attribute
@param localName the local name of the attribute, cannot be null
@return returns the value of the attribute , returns null if not found
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4408834 "getAttributeCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count of attributes on this START_ELEMENT,
this method is only valid on a START_ELEMENT or ATTRIBUTE.  This
count excludes namespace definitions.  Attribute indices are
zero-based.
@return returns the number of attributes
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4408962 "getAttributeName"
	public return_type class_ref 673666 // QName
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the qname of the attribute at the provided index

@param index the position of the attribute
@return the QName of the attribute
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4409090 "getAttributeNamespace"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the namespace of the attribute at the provided
index
@param index the position of the attribute
@return the namespace URI (can be null)
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4409218 "getAttributeLocalName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the localName of the attribute at the provided
index
@param index the position of the attribute
@return the localName of the attribute
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4409346 "getAttributePrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the prefix of this attribute at the
provided index
@param index the position of the attribute
@return the prefix of the attribute
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4409474 "getAttributeType"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the XML type of the attribute at the provided
index
@param index the position of the attribute
@return the XML type of the attribute
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4409602 "getAttributeValue"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the attribute at the
index
@param index the position of the attribute
@return the attribute value
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4409730 "isAttributeSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean which indicates if this
attribute was created by default
@param index the position of the attribute
@return true if this is a default attribute
@throws IllegalStateException if this is not a START_ELEMENT or ATTRIBUTE
"
      end

      operation 4409858 "getNamespaceCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT,
this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE. On
an END_ELEMENT the count is of the namespaces that are about to go
out of scope.  This is the equivalent of the information reported
by SAX callback for an end element event.
@return returns the number of namespace declarations on this specific element
@throws IllegalStateException if this is not a START_ELEMENT, END_ELEMENT or NAMESPACE
"
      end

      operation 4409986 "getNamespacePrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the prefix for the namespace declared at the
index.  Returns null if this is the default namespace
declaration

@param index the position of the namespace declaration
@return returns the namespace prefix
@throws IllegalStateException if this is not a START_ELEMENT, END_ELEMENT or NAMESPACE
"
      end

      operation 4410114 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the uri for the namespace declared at the
index.

@param index the position of the namespace declaration
@return returns the namespace uri
@throws IllegalStateException if this is not a START_ELEMENT, END_ELEMENT or NAMESPACE
"
      end

      operation 4410242 "getNamespaceContext"
	public return_type class_ref 673794 // NamespaceContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a read only namespace context for the current
position.  The context is transient and only valid until
a call to next() changes the state of the reader.
@return return a namespace context
"
      end

      operation 4410370 "getEventType"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reader that points to the current start element
and all of its contents.  Throws an XMLStreamException if the
cursor does not point to a START_ELEMENT.<p>
The sub stream is read from it MUST be read before the parent stream is
moved on, if not any call on the sub stream will cause an XMLStreamException to be
thrown.   The parent stream will always return the same result from next()
whatever is done to the sub stream.
@return an XMLStreamReader which points to the next element

  public XMLStreamReader subReader() throws XMLStreamException;

Allows the implementation to reset and reuse any underlying tables

  public void recycle() throws XMLStreamException;

Returns an integer code that indicates the type
of the event the cursor is pointing to.
"
      end

      operation 4410498 "getText"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the parse event as a string,
this returns the string value of a CHARACTERS event,
returns the value of a COMMENT, the replacement value
for an ENTITY_REFERENCE, the string value of a CDATA section,
the string value for a SPACE event,
or the String value of the internal subset of the DTD.
If an ENTITY_REFERENCE has been resolved, any character data
will be reported as CHARACTERS events.
@return the current text or null
@throws java.lang.IllegalStateException if this state is not
a valid text state.
"
      end

      operation 4410626 "getTextCharacters"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array which contains the characters from this event.
This array should be treated as read-only and transient. I.e. the array will
contain the text characters until the XMLStreamReader moves on to the next event.
Attempts to hold onto the character array beyond that time or modify the
contents of the array are breaches of the contract for this interface.
@return the current text or an empty array
@throws java.lang.IllegalStateException if this state is not
a valid text state.
"
      end

      operation 4410754 "getTextCharacters"
	public explicit_return_type "int"
	nparams 4
	  param in name "sourceStart" explicit_type "int"
	  param inout name "target" explicit_type "char"
	multiplicity "[]"
	  param in name "targetStart" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the the text associated with a CHARACTERS, SPACE or CDATA event.
Text starting a \"sourceStart\" is copied into \"target\" starting at \"targetStart\".
Up to \"length\" characters are copied.  The number of characters actually copied is returned.

The \"sourceStart\" argument must be greater or equal to 0 and less than or equal to
the number of characters associated with the event.  Usually, one requests text starting at a \"sourceStart\" of 0.
If the number of characters actually copied is less than the \"length\", then there is no more text.
Otherwise, subsequent calls need to be made until all text has been retrieved. For example:

<code>
int length = 1024;
char[] myBuffer = new char[ length ];

for ( int sourceStart = 0 ; ; sourceStart += length )
{
   int nCopied = stream.getTextCharacters( sourceStart, myBuffer, 0, length );

  if (nCopied < length)
      break;
}
</code>
XMLStreamException may be thrown if there are any XML errors in the underlying source.
The \"targetStart\" argument must be greater than or equal to 0 and less than the length of \"target\",
Length must be greater than 0 and \"targetStart + length\" must be less than or equal to length of \"target\".

@param sourceStart the index of the first character in the source array to copy
@param target the destination array
@param targetStart the start offset in the target array
@param length the number of characters to copy
@return the number of characters actually copied
@throws XMLStreamException if the underlying XML source is not well-formed
@throws IndexOutOfBoundsException if targetStart < 0 or > than the length of target
@throws IndexOutOfBoundsException if length < 0 or targetStart + length > length of target
@throws UnsupportedOperationException if this method is not supported
@throws NullPointerException is if target is null
"
      end

      operation 4410882 "getTextStart"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the text associated with a CHARACTERS, SPACE or CDATA event.  Allows the underlying
implementation to return the text as a stream of characters.  The reference to the
Reader returned by this method is only valid until next() is called.

All characters must have been checked for well-formedness.

<p> This method is optional and will throw UnsupportedOperationException if it is not supported.
@throws UnsupportedOperationException if this method is not supported
@throws IllegalStateException if this is not a valid text state

public Reader getTextStream();

Returns the offset into the text character array where the first
character (of this text event) is stored.
@throws java.lang.IllegalStateException if this state is not
a valid text state.
"
      end

      operation 4411010 "getTextLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the sequence of characters for this
Text event within the text character array.
@throws java.lang.IllegalStateException if this state is not
a valid text state.
"
      end

      operation 4411138 "getEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return input encoding if known or null if unknown.
@return the encoding of this instance or null
"
      end

      operation 4411266 "hasText"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the current event has text, false otherwise
The following events have text:
CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE
"
      end

      operation 4411394 "getLocation"
	public return_type class_ref 641538 // Location
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current location of the processor.
If the Location is unknown the processor should return
an implementation of Location that returns -1 for the
location and null for the publicId and systemId.
The location information is only valid until next() is
called.
"
      end

      operation 4411522 "getName"
	public return_type class_ref 673666 // QName
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a QName for the current START_ELEMENT or END_ELEMENT event
@return the QName for the current START_ELEMENT or END_ELEMENT event
@throws IllegalStateException if this is not a START_ELEMENT or
END_ELEMENT
"
      end

      operation 4411650 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the (local) name of the current event.
For START_ELEMENT or END_ELEMENT returns the (local) name of the current element.
For ENTITY_REFERENCE it returns entity name.
The current event must be START_ELEMENT or END_ELEMENT,
or ENTITY_REFERENCE
@return the localName
@throws IllegalStateException if this not a START_ELEMENT,
END_ELEMENT or ENTITY_REFERENCE
"
      end

      operation 4411778 "hasName"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns true if the current event has a name (is a START_ELEMENT or END_ELEMENT)
returns false otherwise
"
      end

      operation 4411906 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the current event is a START_ELEMENT or END_ELEMENT  this method
returns the URI of the prefix or the default namespace.
Returns null if the event does not have a prefix.
@return the URI bound to this elements prefix, the default namespace, or null
"
      end

      operation 4412034 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the prefix of the current event or null if the event does not have a prefix
@return the prefix or null
"
      end

      operation 4412162 "getVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the xml version declared on the xml declaration
Returns null if none was declared
@return the XML version or null
"
      end

      operation 4412290 "isStandalone"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the standalone declaration from the xml declaration
@return true if this is standalone, or false otherwise
"
      end

      operation 4412418 "standaloneSet"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if standalone was set in the document
@return true if standalone was set in the document, or false otherwise
"
      end

      operation 4412546 "getCharacterEncodingScheme"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character encoding declared on the xml declaration
Returns null if none was declared
@return the encoding declared in the document or null
"
      end

      operation 4412674 "getPITarget"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the target of a processing instruction
@return the target or null
"
      end

      operation 4412802 "getPIData"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the data section of a processing instruction
@return the data or null
"
      end
    end

    class 673538 "XMLStreamConstants"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface declares the constants used in this API.
Numbers in the range 0 to 256 are reserved for the specification,
user defined events must use event codes outside that range.

@since 1.6
"
      attribute 942722 "START_ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is a start element
@see javax.xml.stream.events.StartElement

"
      end

      attribute 942850 "END_ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is an end element
@see javax.xml.stream.events.EndElement

"
      end

      attribute 942978 "PROCESSING_INSTRUCTION"
	class_attribute const_attribute public explicit_type "int"
	init_value "3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is a processing instruction
@see javax.xml.stream.events.ProcessingInstruction

"
      end

      attribute 943106 "CHARACTERS"
	class_attribute const_attribute public explicit_type "int"
	init_value "4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is characters
@see javax.xml.stream.events.Characters

"
      end

      attribute 943234 "COMMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is a comment
@see javax.xml.stream.events.Comment

"
      end

      attribute 943362 "SPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value "6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The characters are white space
(see [XML], 2.10 \"White Space Handling\").
Events are only reported as SPACE if they are ignorable white
space.  Otherwise they are reported as CHARACTERS.
@see javax.xml.stream.events.Characters

"
      end

      attribute 943490 "START_DOCUMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is a start document
@see javax.xml.stream.events.StartDocument

"
      end

      attribute 943618 "END_DOCUMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is an end document
@see javax.xml.stream.events.EndDocument

"
      end

      attribute 943746 "ENTITY_REFERENCE"
	class_attribute const_attribute public explicit_type "int"
	init_value "9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is an entity reference
@see javax.xml.stream.events.EntityReference

"
      end

      attribute 943874 "ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value "10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is an attribute
@see javax.xml.stream.events.Attribute

"
      end

      attribute 944002 "DTD"
	class_attribute const_attribute public explicit_type "int"
	init_value "11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is a DTD
@see javax.xml.stream.events.DTD

"
      end

      attribute 944130 "CDATA"
	class_attribute const_attribute public explicit_type "int"
	init_value "12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates an event is a CDATA section
@see javax.xml.stream.events.Characters

"
      end

      attribute 944258 "NAMESPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value "13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates the event is a namespace declaration

@see javax.xml.stream.events.Namespace

"
      end

      attribute 944386 "NOTATION_DECLARATION"
	class_attribute const_attribute public explicit_type "int"
	init_value "14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates a Notation
@see javax.xml.stream.events.NotationDeclaration

"
      end

      attribute 944514 "ENTITY_DECLARATION"
	class_attribute const_attribute public explicit_type "int"
	init_value "15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates a Entity Declaration
@see javax.xml.stream.events.NotationDeclaration

"
      end
    end

    class 673922 "StreamFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface declares a simple filter interface that one can
create to filter XMLStreamReaders
@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@since 1.6
"
      operation 12084994 "accept"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "reader" type class_ref 644610 // XMLStreamReader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the current state is part of this stream.  This method
will return true if this filter accepts this event and false otherwise.

The method should not change the state of the reader when accepting
a state.

@param reader the event to test
@return true if this filter accepts this event, false otherwise
"
      end
    end

    class 1429506 "EventFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface declares a simple filter interface that one can
create to filter XMLEventReaders
@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@since 1.6
"
      operation 12082306 "accept"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 643842 // XMLEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this event is part of this stream.  This method
will return true if this filter accepts this event and false
otherwise.

@param event the event to test
@return true if this filter accepts this event, false otherwise
"
      end
    end

    class 1429634 "FactoryConfigurationError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An error class for reporting factory configuration errors.

@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@since 1.6
"
      classrelation 4793986 // <generalisation>
	relation 4793986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4793986 // <generalisation>
	  b parent class_ref 195842 // Error
      end

      attribute 2624514 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2994412584589975744L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 4794114 // nested (<unidirectional association>)
	relation 4794114 --->
	  a role_name "nested" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4794114 // nested (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      operation 12082434 "FactoryConfigurationError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor
"
      end

      operation 12082562 "FactoryConfigurationError"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with a nested inner exception

@param e the exception to nest
"
      end

      operation 12082690 "FactoryConfigurationError"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 132226 // Exception
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with a nested inner exception
and a message

@param e the exception to nest
@param msg the message to report
"
      end

      operation 12082818 "FactoryConfigurationError"
	public explicit_return_type ""
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with a nested inner exception
and a message

@param msg the message to report
@param e the exception to nest
"
      end

      operation 12082946 "FactoryConfigurationError"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an exception with associated message

@param msg the message to report
"
      end

      operation 12083074 "getException"
	public return_type class_ref 132226 // Exception
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the nested exception (if any)

@return the nested exception or null
"
      end

      operation 12083202 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "use the exception chaining mechanism of JDK1.4
"
      end

      operation 12083330 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the message associated with this error

@return the string value of the message
"
      end
    end

    class 1429762 "FactoryFinder"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Implements pluggable streams.</p>

<p>This class is duplicated for each JAXP subpackage so keep it in
sync.  It is package private for secure class loading.</p>

@author Santiago.PericasGeertsen@sun.com
"
      classrelation 4794242 // DEFAULT_PACKAGE (<unidirectional association>)
	relation 4794242 --->
	  a role_name "DEFAULT_PACKAGE" init_value " \"com.sun.xml.internal.\"" class_relation const_relation private
	    comment " Check we have access to package.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4794242 // DEFAULT_PACKAGE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2624642 "debug"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internal debug flag.

"
      end

      classrelation 4794370 // cacheProps (<unidirectional association>)
	relation 4794370 --->
	  a role_name "cacheProps" init_value " new Properties()" class_relation const_relation private
	    comment "
Cache for properties in java.home/lib/jaxp.properties

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4794370 // cacheProps (<unidirectional association>)
	  b parent class_ref 240130 // Properties
      end

      attribute 2624770 "firstTime"
	class_attribute volatile private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag indicating if properties from java.home/lib/jaxp.properties
have been cached.

"
      end

      classrelation 4794498 // ss (<unidirectional association>)
	relation 4794498 --->
	  a role_name "ss" init_value " new SecuritySupport()" class_relation const_relation private
	    comment "
Security support class use to check access control before
getting certain system resources.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4794498 // ss (<unidirectional association>)
	  b parent class_ref 1429890 // SecuritySupport
      end

      extra_member 188930 "initialization"
	
	cpp "" ""
	java "  static {
        // Use try/catch block to support applets, which throws
        // SecurityException out of this code.
        try {
            String val = ss.getSystemProperty(\"jaxp.debug\");
            // Allow simply setting the prop to turn on debug
            debug = val != null && !\"false\".equals(val);
        }
        catch (SecurityException se) {
            debug = false;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 12083458 "dPrint"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12083586 "getProviderClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "cl" type class_ref 129026 // ClassLoader
	  param inout name "doFallback" explicit_type "boolean"
	  param inout name "useBSClsLoader" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to load a class using the class loader supplied. If that fails
and fall back is enabled, the current (i.e. bootstrap) class loader is
tried.

If the class loader supplied is <code>null</code>, first try using the
context class loader followed by the current (i.e. bootstrap) class
loader.

Use bootstrap classLoader if cl = null and useBSClsLoader is true
"
      end

      operation 12083714 "newInstance"
	class_operation package explicit_return_type "T"
	nparams 4
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "className" type class_ref 128130 // String
	  param inout name "cl" type class_ref 129026 // ClassLoader
	  param inout name "doFallback" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an instance of a class. Delegates to method
<code>getProviderClass()</code> in order to load the class.

@param type Base class / Service interface  of the factory to
            instantiate.

@param className Name of the concrete class corresponding to the
service provider

@param cl <code>ClassLoader</code> used to load the factory class. If <code>null</code>
current <code>Thread</code>'s context classLoader is used to load the factory class.

@param doFallback True if the current ClassLoader should be tried as
a fallback if the class is not found using cl
"
      end

      operation 12083842 "newInstance"
	class_operation package explicit_return_type "T"
	nparams 5
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "className" type class_ref 128130 // String
	  param inout name "cl" type class_ref 129026 // ClassLoader
	  param inout name "doFallback" explicit_type "boolean"
	  param inout name "useBSClsLoader" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an instance of a class. Delegates to method
<code>getProviderClass()</code> in order to load the class.

@param type Base class / Service interface  of the factory to
            instantiate.

@param className Name of the concrete class corresponding to the
service provider

@param cl <code>ClassLoader</code> used to load the factory class. If <code>null</code>
current <code>Thread</code>'s context classLoader is used to load the factory class.

@param doFallback True if the current ClassLoader should be tried as
a fallback if the class is not found using cl

@param useBSClsLoader True if cl=null actually meant bootstrap classLoader. This parameter
is needed since DocumentBuilderFactory/SAXParserFactory defined null as context classLoader.
"
      end

      operation 12083970 "find"
	class_operation package explicit_return_type "T"
	nparams 2
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "fallbackClassName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the implementation Class object in the specified order.

@return Class object of factory, never null

@param type                  Base class / Service interface  of the
                             factory to find.

@param fallbackClassName     Implementation class name, if nothing else
                             is found.  Use null to mean no fallback.

Package private so this code can be shared.
"
      end

      operation 12084098 "find"
	class_operation package explicit_return_type "T"
	nparams 4
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "cl" type class_ref 129026 // ClassLoader
	  param inout name "fallbackClassName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the implementation Class object in the specified order.  Main
entry point.
@return Class object of factory, never null

@param type                  Base class / Service interface  of the
                             factory to find.

@param factoryId             Name of the factory to find, same as
                             a property name

@param cl                    ClassLoader to be used to load the class, null means to use
the bootstrap ClassLoader

@param fallbackClassName     Implementation class name, if nothing else
                             is found.  Use null to mean no fallback.

Package private so this code can be shared.
"
      end

      operation 12084226 "findServiceProvider"
	class_operation private explicit_return_type "T"
	nparams 2
	  param in name "type" type class_ref 130818 // Class
	  param in name "cl" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Try to find provider using the ServiceLoader API

@param type Base class / Service interface  of the factory to find.

@return instance of provider class if found or null
"
      end
    end

    class 1429890 "SecuritySupport"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is duplicated for each JAXP subpackage so keep it in sync.
It is package private and therefore is not exposed as part of the JAXP
API.

Security related methods that only work on J2SE 1.2 and newer.
"
      operation 12084354 "getContextClassLoader"
	package return_type class_ref 129026 // ClassLoader
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12084482 "getSystemProperty"
	package return_type class_ref 128130 // String
	nparams 1
	  param in name "propName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12084610 "getFileInputStream"
	package return_type class_ref 580226 // FileInputStream
	nparams 1
	  param in name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12084738 "getResourceAsStream"
	package return_type class_ref 146434 // InputStream
	nparams 2
	  param in name "cl" type class_ref 129026 // ClassLoader
	  param in name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12084866 "doesFileExist"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1431042 "XMLInputFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines an abstract implementation of a factory for getting streams.

The following table defines the standard properties of this specification.
Each property varies in the level of support required by each implementation.
The level of support required is described in the 'Required' column.

  <table border=\"2\" rules=\"all\" cellpadding=\"4\">
   <thead>
     <tr>
       <th align=\"center\" colspan=\"5\">
         Configuration parameters
       </th>
     </tr>
   </thead>
   <tbody>
     <tr>
       <th>Property Name</th>
       <th>Behavior</th>
       <th>Return type</th>
       <th>Default Value</th>
       <th>Required</th>
     </tr>
<tr><td>javax.xml.stream.isValidating</td><td>Turns on/off implementation specific DTD validation</td><td>Boolean</td><td>False</td><td>No</td></tr>
<tr><td>javax.xml.stream.isNamespaceAware</td><td>Turns on/off namespace processing for XML 1.0 support</td><td>Boolean</td><td>True</td><td>True (required) / False (optional)</td></tr>
<tr><td>javax.xml.stream.isCoalescing</td><td>Requires the processor to coalesce adjacent character data</td><td>Boolean</td><td>False</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.isReplacingEntityReferences</td><td>replace internal entity references with their replacement text and report them as characters</td><td>Boolean</td><td>True</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.isSupportingExternalEntities</td><td>Resolve external parsed entities</td><td>Boolean</td><td>Unspecified</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.supportDTD</td><td>Use this property to request processors that do not support DTDs</td><td>Boolean</td><td>True</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.reporter</td><td>sets/gets the impl of the XMLReporter </td><td>javax.xml.stream.XMLReporter</td><td>Null</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.resolver</td><td>sets/gets the impl of the XMLResolver interface</td><td>javax.xml.stream.XMLResolver</td><td>Null</td><td>Yes</td></tr>
<tr><td>javax.xml.stream.allocator</td><td>sets/gets the impl of the XMLEventAllocator interface</td><td>javax.xml.stream.util.XMLEventAllocator</td><td>Null</td><td>Yes</td></tr>
   </tbody>
 </table>


@version 1.2
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@see XMLOutputFactory
@see XMLEventReader
@see XMLStreamReader
@see EventFilter
@see XMLReporter
@see XMLResolver
@see javax.xml.stream.util.XMLEventAllocator
@since 1.6
"
      classrelation 4795138 // IS_NAMESPACE_AWARE (<unidirectional association>)
	relation 4795138 --->
	  a role_name "IS_NAMESPACE_AWARE" init_value "
    \"javax.xml.stream.isNamespaceAware\"" class_relation const_relation public
	    comment "
The property used to turn on/off namespace support,
this is to support XML 1.0 documents,
only the true setting must be supported

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4795138 // IS_NAMESPACE_AWARE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4795266 // IS_VALIDATING (<unidirectional association>)
	relation 4795266 --->
	  a role_name "IS_VALIDATING" init_value "
    \"javax.xml.stream.isValidating\"" class_relation const_relation public
	    comment "
The property used to turn on/off implementation specific validation

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4795266 // IS_VALIDATING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4795394 // IS_COALESCING (<unidirectional association>)
	relation 4795394 --->
	  a role_name "IS_COALESCING" init_value "
    \"javax.xml.stream.isCoalescing\"" class_relation const_relation public
	    comment "
The property that requires the parser to coalesce adjacent character data sections

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4795394 // IS_COALESCING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4795522 // IS_REPLACING_ENTITY_REFERENCES (<unidirectional association>)
	relation 4795522 --->
	  a role_name "IS_REPLACING_ENTITY_REFERENCES" init_value "
    \"javax.xml.stream.isReplacingEntityReferences\"" class_relation const_relation public
	    comment "
Requires the parser to replace internal
entity references with their replacement
text and report them as characters

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4795522 // IS_REPLACING_ENTITY_REFERENCES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4795650 // IS_SUPPORTING_EXTERNAL_ENTITIES (<unidirectional association>)
	relation 4795650 --->
	  a role_name "IS_SUPPORTING_EXTERNAL_ENTITIES" init_value "
    \"javax.xml.stream.isSupportingExternalEntities\"" class_relation const_relation public
	    comment "
 The property that requires the parser to resolve external parsed entities

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4795650 // IS_SUPPORTING_EXTERNAL_ENTITIES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4795778 // SUPPORT_DTD (<unidirectional association>)
	relation 4795778 --->
	  a role_name "SUPPORT_DTD" init_value "
    \"javax.xml.stream.supportDTD\"" class_relation const_relation public
	    comment "
 The property that requires the parser to support DTDs

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4795778 // SUPPORT_DTD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4795906 // REPORTER (<unidirectional association>)
	relation 4795906 --->
	  a role_name "REPORTER" init_value "
    \"javax.xml.stream.reporter\"" class_relation const_relation public
	    comment "
The property used to
set/get the implementation of the XMLReporter interface

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4795906 // REPORTER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4796034 // RESOLVER (<unidirectional association>)
	relation 4796034 --->
	  a role_name "RESOLVER" init_value "
    \"javax.xml.stream.resolver\"" class_relation const_relation public
	    comment "
The property used to set/get the implementation of the XMLResolver

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4796034 // RESOLVER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4796162 // ALLOCATOR (<unidirectional association>)
	relation 4796162 --->
	  a role_name "ALLOCATOR" init_value "
    \"javax.xml.stream.allocator\"" class_relation const_relation public
	    comment "
The property used to set/get the implementation of the allocator

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4796162 // ALLOCATOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4796290 // DEFAULIMPL (<unidirectional association>)
	relation 4796290 --->
	  a role_name "DEFAULIMPL" init_value " \"com.sun.xml.internal.stream.XMLInputFactoryImpl\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4796290 // DEFAULIMPL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12091266 "XMLInputFactory"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12091394 "newInstance"
	class_operation public return_type class_ref 1431042 // XMLInputFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the factory in exactly the same manner as the
{@link #newFactory()} method.
@throws FactoryConfigurationError if an instance of this factory cannot be loaded
"
      end

      operation 12091522 "newFactory"
	class_operation public return_type class_ref 1431042 // XMLInputFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory.
<p>
This static method creates a new factory instance.
This method uses the following ordered lookup procedure to determine
the XMLInputFactory implementation class to load:
</p>
<ul>
<li>
  Use the javax.xml.stream.XMLInputFactory system property.
</li>
<li>
  Use the properties file \"lib/stax.properties\" in the JRE directory.
    This configuration file is in standard java.util.Properties format
    and contains the fully qualified name of the implementation class
    with the key being the system property defined above.
</li>
<li>
  Use the service-provider loading facilities, defined by the
  {@link java.util.ServiceLoader} class, to attempt to locate and load an
  implementation of the service using the {@linkplain
  java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:
  the service-provider loading facility will use the {@linkplain
  java.lang.Thread#getContextClassLoader() current thread's context class loader}
  to attempt to load the service. If the context class
  loader is null, the {@linkplain
  ClassLoader#getSystemClassLoader() system class loader} will be used.
</li>
<li>
Otherwise, the system-default implementation is returned.
</li>
</ul>
<p>
  Once an application has obtained a reference to a XMLInputFactory it
  can use the factory to configure and obtain stream instances.
</p>
<p>
  Note that this is a new method that replaces the deprecated newInstance() method.
    No changes in behavior are defined by this replacement method relative to
    the deprecated method.
</p>
@throws FactoryConfigurationError in case of {@linkplain
  java.util.ServiceConfigurationError service configuration error} or if
  the implementation is not available or cannot be instantiated.
"
      end

      operation 12091650 "newInstance"
	class_operation public return_type class_ref 1431042 // XMLInputFactory
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory

@param factoryId             Name of the factory to find, same as
                             a property name
@param classLoader           classLoader to use
@return the factory implementation
@throws FactoryConfigurationError if an instance of this factory cannot be loaded

@deprecated  This method has been deprecated to maintain API consistency.
             All newInstance methods have been replaced with corresponding
             newFactory methods. The replacement {@link
             #newFactory(java.lang.String, java.lang.ClassLoader)} method
             defines no changes in behavior.
"
      end

      operation 12091778 "newFactory"
	class_operation public return_type class_ref 1431042 // XMLInputFactory
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory.
If the classLoader argument is null, then the ContextClassLoader is used.
<p>
This method uses the following ordered lookup procedure to determine
the XMLInputFactory implementation class to load:
</p>
<ul>
<li>
  Use the value of the system property identified by {@code factoryId}.
</li>
<li>
  Use the properties file \"lib/stax.properties\" in the JRE directory.
    This configuration file is in standard java.util.Properties format
    and contains the fully qualified name of the implementation class
    with the key being the given {@code factoryId}.
</li>
<li>
  If {@code factoryId} is \"javax.xml.stream.XMLInputFactory\",
  use the service-provider loading facilities, defined by the
  {@link java.util.ServiceLoader} class, to attempt to {@linkplain
  java.util.ServiceLoader#load(java.lang.Class, java.lang.ClassLoader) locate and load}
  an implementation of the service using the specified {@code ClassLoader}.
  If {@code classLoader} is null, the {@linkplain
  java.util.ServiceLoader#load(java.lang.Class) default loading mechanism} will apply:
  That is, the service-provider loading facility will use the {@linkplain
  java.lang.Thread#getContextClassLoader() current thread's context class loader}
  to attempt to load the service. If the context class
  loader is null, the {@linkplain
  ClassLoader#getSystemClassLoader() system class loader} will be used.
</li>
<li>
  Otherwise, throws a {@link FactoryConfigurationError}.
</li>
</ul>

<p>
Note that this is a new method that replaces the deprecated
  {@link #newInstance(java.lang.String, java.lang.ClassLoader)
  newInstance(String factoryId, ClassLoader classLoader)} method.
No changes in behavior are defined by this replacement method relative
to the deprecated method.
</p>

@apiNote The parameter factoryId defined here is inconsistent with that
of other JAXP factories where the first parameter is fully qualified
factory class name that provides implementation of the factory.

@param factoryId             Name of the factory to find, same as
                             a property name
@param classLoader           classLoader to use
@return the factory implementation
@throws FactoryConfigurationError in case of {@linkplain
  java.util.ServiceConfigurationError service configuration error} or if
  the implementation is not available or cannot be instantiated.
@throws FactoryConfigurationError if an instance of this factory cannot be loaded
"
      end

      operation 12091906 "createXMLStreamReader"
	abstract public return_type class_ref 644610 // XMLStreamReader
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamReader from a reader
@param reader the XML data to read from
@throws XMLStreamException
"
      end

      operation 12092034 "createXMLStreamReader"
	abstract public return_type class_ref 644610 // XMLStreamReader
	nparams 1
	  param inout name "source" type class_ref 627202 // Source
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamReader from a JAXP source.  This method is optional.
@param source the source to read from
@throws UnsupportedOperationException if this method is not
supported by this XMLInputFactory
@throws XMLStreamException
"
      end

      operation 12092162 "createXMLStreamReader"
	abstract public return_type class_ref 644610 // XMLStreamReader
	nparams 1
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamReader from a java.io.InputStream
@param stream the InputStream to read from
@throws XMLStreamException
"
      end

      operation 12092290 "createXMLStreamReader"
	abstract public return_type class_ref 644610 // XMLStreamReader
	nparams 2
	  param inout name "stream" type class_ref 146434 // InputStream
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamReader from a java.io.InputStream
@param stream the InputStream to read from
@param encoding the character encoding of the stream
@throws XMLStreamException
"
      end

      operation 12092418 "createXMLStreamReader"
	abstract public return_type class_ref 644610 // XMLStreamReader
	nparams 2
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamReader from a java.io.InputStream
@param systemId the system ID of the stream
@param stream the InputStream to read from
"
      end

      operation 12092546 "createXMLStreamReader"
	abstract public return_type class_ref 644610 // XMLStreamReader
	nparams 2
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamReader from a java.io.InputStream
@param systemId the system ID of the stream
@param reader the InputStream to read from
"
      end

      operation 12092674 "createXMLEventReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventReader from a reader
@param reader the XML data to read from
@throws XMLStreamException
"
      end

      operation 12092802 "createXMLEventReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 2
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventReader from a reader
@param systemId the system ID of the input
@param reader the XML data to read from
@throws XMLStreamException
"
      end

      operation 12092930 "createXMLEventReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 1
	  param inout name "reader" type class_ref 644610 // XMLStreamReader
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventReader from an XMLStreamReader.  After being used
to construct the XMLEventReader instance returned from this method
the XMLStreamReader must not be used.
@param reader the XMLStreamReader to read from (may not be modified)
@return a new XMLEventReader
@throws XMLStreamException
"
      end

      operation 12093058 "createXMLEventReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 1
	  param inout name "source" type class_ref 627202 // Source
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventReader from a JAXP source.
Support of this method is optional.
@param source the source to read from
@throws UnsupportedOperationException if this method is not
supported by this XMLInputFactory
"
      end

      operation 12093186 "createXMLEventReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 1
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventReader from a java.io.InputStream
@param stream the InputStream to read from
@throws XMLStreamException
"
      end

      operation 12093314 "createXMLEventReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 2
	  param inout name "stream" type class_ref 146434 // InputStream
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventReader from a java.io.InputStream
@param stream the InputStream to read from
@param encoding the character encoding of the stream
@throws XMLStreamException
"
      end

      operation 12093442 "createXMLEventReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 2
	  param inout name "systemId" type class_ref 128130 // String
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventReader from a java.io.InputStream
@param systemId the system ID of the stream
@param stream the InputStream to read from
@throws XMLStreamException
"
      end

      operation 12093570 "createFilteredReader"
	abstract public return_type class_ref 644610 // XMLStreamReader
	nparams 2
	  param inout name "reader" type class_ref 644610 // XMLStreamReader
	  param inout name "filter" type class_ref 673922 // StreamFilter
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a filtered reader that wraps the filter around the reader
@param reader the reader to filter
@param filter the filter to apply to the reader
@throws XMLStreamException
"
      end

      operation 12093698 "createFilteredReader"
	abstract public return_type class_ref 643586 // XMLEventReader
	nparams 2
	  param inout name "reader" type class_ref 643586 // XMLEventReader
	  param inout name "filter" type class_ref 1429506 // EventFilter
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a filtered event reader that wraps the filter around the event reader
@param reader the event reader to wrap
@param filter the filter to apply to the event reader
@throws XMLStreamException
"
      end

      operation 12093826 "getXMLResolver"
	abstract public return_type class_ref 1431170 // XMLResolver
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The resolver that will be set on any XMLStreamReader or XMLEventReader created
by this factory instance.
"
      end

      operation 12093954 "setXMLResolver"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "resolver" type class_ref 1431170 // XMLResolver
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The resolver that will be set on any XMLStreamReader or XMLEventReader created
by this factory instance.
@param resolver the resolver to use to resolve references
"
      end

      operation 12094082 "getXMLReporter"
	abstract public return_type class_ref 641410 // XMLReporter
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The reporter that will be set on any XMLStreamReader or XMLEventReader created
by this factory instance.
"
      end

      operation 12094210 "setXMLReporter"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "reporter" type class_ref 641410 // XMLReporter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The reporter that will be set on any XMLStreamReader or XMLEventReader created
by this factory instance.
@param reporter the resolver to use to report non fatal errors
"
      end

      operation 12094338 "setProperty"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the user to set specific feature/property on the underlying
implementation. The underlying implementation is not required to support
every setting of every property in the specification and may use
IllegalArgumentException to signal that an unsupported property may not be
set with the specified value.
<p>
All implementations that implement JAXP 1.5 or newer are required to
support the {@link javax.xml.XMLConstants#ACCESS_EXTERNAL_DTD} property.
</p>
<ul>
  <li>
       <p>
       Access to external DTDs, external Entity References is restricted to the
       protocols specified by the property. If access is denied during parsing
       due to the restriction of this property, {@link javax.xml.stream.XMLStreamException}
       will be thrown by the {@link javax.xml.stream.XMLStreamReader#next()} or
       {@link javax.xml.stream.XMLEventReader#nextEvent()} method.
       </p>
  </li>
</ul>
@param name The name of the property (may not be null)
@param value The value of the property
@throws java.lang.IllegalArgumentException if the property is not supported
"
      end

      operation 12094466 "getProperty"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of a feature/property from the underlying implementation
@param name The name of the property (may not be null)
@return The value of the property
@throws IllegalArgumentException if the property is not supported
"
      end

      operation 12094594 "isPropertySupported"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the set of properties that this factory supports.

@param name The name of the property (may not be null)
@return true if the property is supported and false otherwise
"
      end

      operation 12094722 "setEventAllocator"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "allocator" type class_ref 1431298 // XMLEventAllocator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a user defined event allocator for events
@param allocator the user defined allocator
"
      end

      operation 12094850 "getEventAllocator"
	abstract public return_type class_ref 1431298 // XMLEventAllocator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the allocator used by streams created with this factory
"
      end
    end

    class 1431170 "XMLResolver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is used to resolve resources during an XML parse.  If an application wishes to
perform custom entity resolution it must register an instance of this interface with
the XMLInputFactory using the setXMLResolver method.

@version 1.0
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@since 1.6
"
      operation 12097154 "resolveEntity"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "publicID" type class_ref 128130 // String
	  param inout name "systemID" type class_ref 128130 // String
	  param inout name "baseURI" type class_ref 128130 // String
	  param inout name "namespace" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a resource.  This resource can be of the following three return types:
(1) java.io.InputStream (2) javax.xml.stream.XMLStreamReader (3) java.xml.stream.XMLEventReader.
If this method returns null the processor will attempt to resolve the entity using its
default mechanism.

@param publicID The public identifier of the external entity being referenced, or null if none was supplied.
@param systemID The system identifier of the external entity being referenced.
@param baseURI  Absolute base URI associated with systemId.
@param namespace The namespace of the entity to resolve.
@return The resource requested or null.
@throws XMLStreamException if there was a failure attempting to resolve the resource.
"
      end
    end

    class 1431426 "XMLOutputFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines an abstract implementation of a factory for
getting XMLEventWriters and XMLStreamWriters.

The following table defines the standard properties of this specification.
Each property varies in the level of support required by each implementation.
The level of support required is described in the 'Required' column.

    <table border=\"2\" rules=\"all\" cellpadding=\"4\">
    <thead>
     <tr>
       <th align=\"center\" colspan=\"2\">
         Configuration parameters
       </th>
     </tr>
   </thead>
   <tbody>
     <tr>
       <th>Property Name</th>
       <th>Behavior</th>
       <th>Return type</th>
       <th>Default Value</th>
       <th>Required</th>
             </tr>
        <tr><td>javax.xml.stream.isRepairingNamespaces</td><td>defaults prefixes on the output side</td><td>Boolean</td><td>False</td><td>Yes</td></tr>
     </tbody>
  </table>

<p>The following paragraphs describe the namespace and prefix repair algorithm:</p>

<p>The property can be set with the following code line:
<code>setProperty(\"javax.xml.stream.isRepairingNamespaces\",new Boolean(true|false));</code></p>

<p>This property specifies that the writer default namespace prefix declarations.
The default value is false. </p>

<p>If a writer isRepairingNamespaces it will create a namespace declaration
on the current StartElement for
any attribute that does not
currently have a namespace declaration in scope.  If the StartElement
has a uri but no prefix specified a prefix will be assigned, if the prefix
has not been declared in a parent of the current StartElement it will be declared
on the current StartElement.  If the defaultNamespace is bound and in scope
and the default namespace matches the URI of the attribute or StartElement
QName no prefix will be assigned.</p>

<p>If an element or attribute name has a prefix, but is not
bound to any namespace URI, then the prefix will be removed
during serialization.</p>

<p>If element and/or attribute names in the same start or
empty-element tag are bound to different namespace URIs and
are using the same prefix then the element or the first
occurring attribute retains the original prefix and the
following attributes have their prefixes replaced with a
new prefix that is bound to the namespace URIs of those
attributes. </p>

<p>If an element or attribute name uses a prefix that is
bound to a different URI than that inherited from the
namespace context of the parent of that element and there
is no namespace declaration in the context of the current
element then such a namespace declaration is added. </p>

<p>If an element or attribute name is bound to a prefix and
there is a namespace declaration that binds that prefix
to a different URI then that namespace declaration is
either removed if the correct mapping is inherited from
the parent context of that element, or changed to the
namespace URI of the element or attribute using that prefix.</p>

@version 1.2
@author Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
@see XMLInputFactory
@see XMLEventWriter
@see XMLStreamWriter
@since 1.6
"
      classrelation 4796418 // IS_REPAIRING_NAMESPACES (<unidirectional association>)
	relation 4796418 --->
	  a role_name "IS_REPAIRING_NAMESPACES" init_value "
    \"javax.xml.stream.isRepairingNamespaces\"" class_relation const_relation public
	    comment "
Property used to set prefix defaulting on the output side

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4796418 // IS_REPAIRING_NAMESPACES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4796546 // DEFAULIMPL (<unidirectional association>)
	relation 4796546 --->
	  a role_name "DEFAULIMPL" init_value " \"com.sun.xml.internal.stream.XMLOutputFactoryImpl\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4796546 // DEFAULIMPL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12094978 "XMLOutputFactory"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12095106 "newInstance"
	class_operation public return_type class_ref 1431426 // XMLOutputFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the factory in exactly the same manner as the
{@link #newFactory()} method.
@throws FactoryConfigurationError if an instance of this factory cannot be loaded
"
      end

      operation 12095234 "newFactory"
	class_operation public return_type class_ref 1431426 // XMLOutputFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory.
<p>
This static method creates a new factory instance. This method uses the
following ordered lookup procedure to determine the XMLOutputFactory
implementation class to load:
</p>
<ul>
<li>
  Use the javax.xml.stream.XMLOutputFactory system property.
</li>
<li>
  Use the properties file \"lib/stax.properties\" in the JRE directory.
    This configuration file is in standard java.util.Properties format
    and contains the fully qualified name of the implementation class
    with the key being the system property defined above.
</li>
<li>
  Use the service-provider loading facilities, defined by the
  {@link java.util.ServiceLoader} class, to attempt to locate and load an
  implementation of the service using the {@linkplain
  java.util.ServiceLoader#load(java.lang.Class) default loading mechanism}:
  the service-provider loading facility will use the {@linkplain
  java.lang.Thread#getContextClassLoader() current thread's context class loader}
  to attempt to load the service. If the context class
  loader is null, the {@linkplain
  ClassLoader#getSystemClassLoader() system class loader} will be used.
</li>
<li>
  Otherwise, the system-default implementation is returned.
</li>
<p>
Once an application has obtained a reference to a XMLOutputFactory it
can use the factory to configure and obtain stream instances.
</p>
<p>
Note that this is a new method that replaces the deprecated newInstance() method.
  No changes in behavior are defined by this replacement method relative to the
  deprecated method.
</p>
@throws FactoryConfigurationError in case of {@linkplain
  java.util.ServiceConfigurationError service configuration error} or if
  the implementation is not available or cannot be instantiated.
"
      end

      operation 12095362 "newInstance"
	class_operation public return_type class_ref 1431042 // XMLInputFactory
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory.

@param factoryId             Name of the factory to find, same as
                             a property name
@param classLoader           classLoader to use
@return the factory implementation
@throws FactoryConfigurationError if an instance of this factory cannot be loaded

@deprecated  This method has been deprecated because it returns an
             instance of XMLInputFactory, which is of the wrong class.
             Use the new method {@link #newFactory(java.lang.String,
             java.lang.ClassLoader)} instead.
"
      end

      operation 12095490 "newFactory"
	class_operation public return_type class_ref 1431426 // XMLOutputFactory
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1429634 // FactoryConfigurationError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new instance of the factory.
If the classLoader argument is null, then the ContextClassLoader is used.
<p>
This method uses the following ordered lookup procedure to determine
the XMLOutputFactory implementation class to load:
</p>
<ul>
<li>
  Use the value of the system property identified by {@code factoryId}.
</li>
<li>
  Use the properties file \"lib/stax.properties\" in the JRE directory.
    This configuration file is in standard java.util.Properties format
    and contains the fully qualified name of the implementation class
    with the key being the given {@code factoryId}.
</li>
<li>
  If {@code factoryId} is \"javax.xml.stream.XMLOutputFactory\",
  use the service-provider loading facilities, defined by the
  {@link java.util.ServiceLoader} class, to attempt to {@linkplain
  java.util.ServiceLoader#load(java.lang.Class, java.lang.ClassLoader) locate and load}
  an implementation of the service using the specified {@code ClassLoader}.
  If {@code classLoader} is null, the {@linkplain
  java.util.ServiceLoader#load(java.lang.Class) default loading mechanism} will apply:
  That is, the service-provider loading facility will use the {@linkplain
  java.lang.Thread#getContextClassLoader() current thread's context class loader}
  to attempt to load the service. If the context class
  loader is null, the {@linkplain
  ClassLoader#getSystemClassLoader() system class loader} will be used.
</li>
<li>
  Otherwise, throws a {@link FactoryConfigurationError}.
</li>
</ul>

@apiNote The parameter factoryId defined here is inconsistent with that
of other JAXP factories where the first parameter is fully qualified
factory class name that provides implementation of the factory.

<p>
  Note that this is a new method that replaces the deprecated
  {@link #newInstance(java.lang.String, java.lang.ClassLoader)
  newInstance(String factoryId, ClassLoader classLoader)} method.
  The original method was incorrectly defined to return XMLInputFactory.
</p>

@param factoryId             Name of the factory to find, same as
                             a property name
@param classLoader           classLoader to use
@return the factory implementation
@throws FactoryConfigurationError in case of {@linkplain
  java.util.ServiceConfigurationError service configuration error} or if
  the implementation is not available or cannot be instantiated.
"
      end

      operation 12095618 "createXMLStreamWriter"
	abstract public return_type class_ref 640258 // XMLStreamWriter
	nparams 1
	  param inout name "stream" type class_ref 428034 // Writer
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamWriter that writes to a writer
@param stream the writer to write to
@throws XMLStreamException
"
      end

      operation 12095746 "createXMLStreamWriter"
	abstract public return_type class_ref 640258 // XMLStreamWriter
	nparams 1
	  param inout name "stream" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamWriter that writes to a stream
@param stream the stream to write to
@throws XMLStreamException
"
      end

      operation 12095874 "createXMLStreamWriter"
	abstract public return_type class_ref 640258 // XMLStreamWriter
	nparams 2
	  param inout name "stream" type class_ref 151298 // OutputStream
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamWriter that writes to a stream
@param stream the stream to write to
@param encoding the encoding to use
@throws XMLStreamException
"
      end

      operation 12096002 "createXMLStreamWriter"
	abstract public return_type class_ref 640258 // XMLStreamWriter
	nparams 1
	  param inout name "result" type class_ref 645506 // Result
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLStreamWriter that writes to a JAXP result.  This method is optional.
@param result the result to write to
@throws UnsupportedOperationException if this method is not
supported by this XMLOutputFactory
@throws XMLStreamException
"
      end

      operation 12096130 "createXMLEventWriter"
	abstract public return_type class_ref 640130 // XMLEventWriter
	nparams 1
	  param inout name "result" type class_ref 645506 // Result
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventWriter that writes to a JAXP result.  This method is optional.
@param result the result to write to
@throws UnsupportedOperationException if this method is not
supported by this XMLOutputFactory
@throws XMLStreamException
"
      end

      operation 12096258 "createXMLEventWriter"
	abstract public return_type class_ref 640130 // XMLEventWriter
	nparams 1
	  param inout name "stream" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventWriter that writes to a stream
@param stream the stream to write to
@throws XMLStreamException
"
      end

      operation 12096386 "createXMLEventWriter"
	abstract public return_type class_ref 640130 // XMLEventWriter
	nparams 2
	  param inout name "stream" type class_ref 151298 // OutputStream
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventWriter that writes to a stream
@param stream the stream to write to
@param encoding the encoding to use
@throws XMLStreamException
"
      end

      operation 12096514 "createXMLEventWriter"
	abstract public return_type class_ref 640130 // XMLEventWriter
	nparams 1
	  param inout name "stream" type class_ref 428034 // Writer
	nexceptions 1
	  exception class_ref 643714 // XMLStreamException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new XMLEventWriter that writes to a writer
@param stream the stream to write to
@throws XMLStreamException
"
      end

      operation 12096642 "setProperty"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the user to set specific features/properties on the underlying implementation.
@param name The name of the property
@param value The value of the property
@throws java.lang.IllegalArgumentException if the property is not supported
"
      end

      operation 12096770 "getProperty"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a feature/property on the underlying implementation
@param name The name of the property
@return The value of the property
@throws java.lang.IllegalArgumentException if the property is not supported
"
      end

      operation 12096898 "isPropertySupported"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the set of properties that this factory supports.

@param name The name of the property (may not be null)
@return true if the property is supported and false otherwise
"
      end
    end
  end

  deploymentview 153090 "stream"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 442626 "Location"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 641538 // Location
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 463874 "XMLStreamConstants"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 673538 // XMLStreamConstants
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 464002 "XMLStreamReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Reader;
import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 644610 // XMLStreamReader
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1019138 "EventFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.stream.events.XMLEvent;
${definition}"
      associated_elems
	class_ref 1429506 // EventFilter
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1019266 "FactoryConfigurationError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1429634 // FactoryConfigurationError
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1019394 "FactoryFinder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Iterator;
import java.util.Properties;
import java.util.ServiceConfigurationError;
import java.util.ServiceLoader;
${definition}"
      associated_elems
	class_ref 1429762 // FactoryFinder
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1019522 "SecuritySupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.net.*;
import java.io.*;
import java.util.*;
${definition}"
      associated_elems
	class_ref 1429890 // SecuritySupport
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1019650 "StreamFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 673922 // StreamFilter
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1019778 "XMLEventFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.stream.events.*;
${definition}"
      associated_elems
	class_ref 641922 // XMLEventFactory
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009, 2013, by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1019906 "XMLEventReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.stream.events.XMLEvent;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 643586 // XMLEventReader
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1020162 "XMLEventWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.stream.events.*;
import javax.xml.stream.util.XMLEventConsumer;
import javax.xml.namespace.NamespaceContext;
${definition}"
      associated_elems
	class_ref 640130 // XMLEventWriter
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1020290 "XMLInputFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.stream.util.XMLEventAllocator;
import javax.xml.transform.Source;
${definition}"
      associated_elems
	class_ref 1431042 // XMLInputFactory
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009, 2013, by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1020418 "XMLOutputFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.Result;
${definition}"
      associated_elems
	class_ref 1431426 // XMLOutputFactory
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009, 2013, by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1020546 "XMLReporter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 641410 // XMLReporter
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1020674 "XMLResolver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1431170 // XMLResolver
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1020802 "XMLStreamException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 643714 // XMLStreamException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end

    artifact 1020930 "XMLStreamWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.namespace.NamespaceContext;
${definition}"
      associated_elems
	class_ref 640258 // XMLStreamWriter
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2009 by Oracle Corporation. All Rights Reserved.
"
    end
  end

  package_ref 166274 // events

  package_ref 189186 // util
end
