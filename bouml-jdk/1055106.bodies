class ChronoLocalDateTimeImpl
!!!8454786.java!!!	of(inout date : R, inout time : LocalTime) : ChronoLocalDateTimeImpl
        return new ChronoLocalDateTimeImpl<>(date, time);
!!!8454914.java!!!	ensureValid(inout chrono : Chronology, inout temporal : Temporal) : ChronoLocalDateTimeImpl
        @SuppressWarnings("unchecked")
        ChronoLocalDateTimeImpl<R> other = (ChronoLocalDateTimeImpl<R>) temporal;
        if (chrono.equals(other.getChronology()) == false) {
            throw new ClassCastException("Chronology mismatch, required: " + chrono.getId()
                    + ", actual: " + other.getChronology().getId());
        }
        return other;
!!!8455042.java!!!	ChronoLocalDateTimeImpl(inout date : D, inout time : LocalTime)
        Objects.requireNonNull(date, "date");
        Objects.requireNonNull(time, "time");
        this.date = date;
        this.time = time;
!!!8455170.java!!!	with(inout newDate : Temporal, inout newTime : LocalTime) : ChronoLocalDateTimeImpl
        if (date == newDate && time == newTime) {
            return this;
        }
        // Validate that the new Temporal is a ChronoLocalDate (and not something else)
        D cd = ChronoLocalDateImpl.ensureValid(date.getChronology(), newDate);
        return new ChronoLocalDateTimeImpl<>(cd, newTime);
!!!8455298.java!!!	toLocalDate() : D
        return date;
!!!8455426.java!!!	toLocalTime() : LocalTime
        return time;
!!!8455554.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return f.isDateBased() || f.isTimeBased();
        }
        return field != null && field.isSupportedBy(this);
!!!8455682.java!!!	range(inout field : TemporalField) : ValueRange
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return (f.isTimeBased() ? time.range(field) : date.range(field));
        }
        return field.rangeRefinedBy(this);
!!!8455810.java!!!	get(inout field : TemporalField) : int
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return (f.isTimeBased() ? time.get(field) : date.get(field));
        }
        return range(field).checkValidIntValue(getLong(field), field);
!!!8455938.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            return (f.isTimeBased() ? time.getLong(field) : date.getLong(field));
        }
        return field.getFrom(this);
!!!8456066.java!!!	with(inout adjuster : TemporalAdjuster) : ChronoLocalDateTimeImpl
        if (adjuster instanceof ChronoLocalDate) {
            // The Chronology is checked in with(date,time)
            return with((ChronoLocalDate) adjuster, time);
        } else if (adjuster instanceof LocalTime) {
            return with(date, (LocalTime) adjuster);
        } else if (adjuster instanceof ChronoLocalDateTimeImpl) {
            return ChronoLocalDateTimeImpl.ensureValid(date.getChronology(), (ChronoLocalDateTimeImpl<?>) adjuster);
        }
        return ChronoLocalDateTimeImpl.ensureValid(date.getChronology(), (ChronoLocalDateTimeImpl<?>) adjuster.adjustInto(this));
!!!8456194.java!!!	with(inout field : TemporalField, in newValue : long) : ChronoLocalDateTimeImpl
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            if (f.isTimeBased()) {
                return with(date, time.with(field, newValue));
            } else {
                return with(date.with(field, newValue), time);
            }
        }
        return ChronoLocalDateTimeImpl.ensureValid(date.getChronology(), field.adjustInto(this, newValue));
!!!8456322.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : ChronoLocalDateTimeImpl
        if (unit instanceof ChronoUnit) {
            ChronoUnit f = (ChronoUnit) unit;
            switch (f) {
                case NANOS: return plusNanos(amountToAdd);
                case MICROS: return plusDays(amountToAdd / MICROS_PER_DAY).plusNanos((amountToAdd % MICROS_PER_DAY) * 1000);
                case MILLIS: return plusDays(amountToAdd / MILLIS_PER_DAY).plusNanos((amountToAdd % MILLIS_PER_DAY) * 1000000);
                case SECONDS: return plusSeconds(amountToAdd);
                case MINUTES: return plusMinutes(amountToAdd);
                case HOURS: return plusHours(amountToAdd);
                case HALF_DAYS: return plusDays(amountToAdd / 256).plusHours((amountToAdd % 256) * 12);  // no overflow (256 is multiple of 2)
            }
            return with(date.plus(amountToAdd, unit), time);
        }
        return ChronoLocalDateTimeImpl.ensureValid(date.getChronology(), unit.addTo(this, amountToAdd));
!!!8456450.java!!!	plusDays(in days : long) : ChronoLocalDateTimeImpl
        return with(date.plus(days, ChronoUnit.DAYS), time);
!!!8456578.java!!!	plusHours(in hours : long) : ChronoLocalDateTimeImpl
        return plusWithOverflow(date, hours, 0, 0, 0);
!!!8456706.java!!!	plusMinutes(in minutes : long) : ChronoLocalDateTimeImpl
        return plusWithOverflow(date, 0, minutes, 0, 0);
!!!8456834.java!!!	plusSeconds(in seconds : long) : ChronoLocalDateTimeImpl
        return plusWithOverflow(date, 0, 0, seconds, 0);
!!!8456962.java!!!	plusNanos(in nanos : long) : ChronoLocalDateTimeImpl
        return plusWithOverflow(date, 0, 0, 0, nanos);
!!!8457090.java!!!	plusWithOverflow(inout newDate : D, in hours : long, in minutes : long, in seconds : long, in nanos : long) : ChronoLocalDateTimeImpl
        // 9223372036854775808 long, 2147483648 int
        if ((hours | minutes | seconds | nanos) == 0) {
            return with(newDate, time);
        }
        long totDays = nanos / NANOS_PER_DAY +             //   max/24*60*60*1B
                seconds / SECONDS_PER_DAY +                //   max/24*60*60
                minutes / MINUTES_PER_DAY +                //   max/24*60
                hours / HOURS_PER_DAY;                     //   max/24
        long totNanos = nanos % NANOS_PER_DAY +                    //   max  86400000000000
                (seconds % SECONDS_PER_DAY) * NANOS_PER_SECOND +   //   max  86400000000000
                (minutes % MINUTES_PER_DAY) * NANOS_PER_MINUTE +   //   max  86400000000000
                (hours % HOURS_PER_DAY) * NANOS_PER_HOUR;          //   max  86400000000000
        long curNoD = time.toNanoOfDay();                          //   max  86400000000000
        totNanos = totNanos + curNoD;                              // total 432000000000000
        totDays += Math.floorDiv(totNanos, NANOS_PER_DAY);
        long newNoD = Math.floorMod(totNanos, NANOS_PER_DAY);
        LocalTime newTime = (newNoD == curNoD ? time : LocalTime.ofNanoOfDay(newNoD));
        return with(newDate.plus(totDays, ChronoUnit.DAYS), newTime);
!!!8457218.java!!!	atZone(inout zone : ZoneId) : ChronoZonedDateTime
        return ChronoZonedDateTimeImpl.ofBest(this, zone, null);
!!!8457346.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        Objects.requireNonNull(endExclusive, "endExclusive");
        @SuppressWarnings("unchecked")
        ChronoLocalDateTime<D> end = (ChronoLocalDateTime<D>) getChronology().localDateTime(endExclusive);
        if (unit instanceof ChronoUnit) {
            if (unit.isTimeBased()) {
                long amount = end.getLong(EPOCH_DAY) - date.getLong(EPOCH_DAY);
                switch ((ChronoUnit) unit) {
                    case NANOS: amount = Math.multiplyExact(amount, NANOS_PER_DAY); break;
                    case MICROS: amount = Math.multiplyExact(amount, MICROS_PER_DAY); break;
                    case MILLIS: amount = Math.multiplyExact(amount, MILLIS_PER_DAY); break;
                    case SECONDS: amount = Math.multiplyExact(amount, SECONDS_PER_DAY); break;
                    case MINUTES: amount = Math.multiplyExact(amount, MINUTES_PER_DAY); break;
                    case HOURS: amount = Math.multiplyExact(amount, HOURS_PER_DAY); break;
                    case HALF_DAYS: amount = Math.multiplyExact(amount, 2); break;
                }
                return Math.addExact(amount, time.until(end.toLocalTime(), unit));
            }
            ChronoLocalDate endDate = end.toLocalDate();
            if (end.toLocalTime().isBefore(time)) {
                endDate = endDate.minus(1, ChronoUnit.DAYS);
            }
            return date.until(endDate, unit);
        }
        Objects.requireNonNull(unit, "unit");
        return unit.between(this, end);
!!!8457474.java!!!	writeReplace() : Object
        return new Ser(Ser.CHRONO_LOCAL_DATE_TIME_TYPE, this);
!!!8457602.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8457730.java!!!	writeExternal(inout out : ObjectOutput) : void
        out.writeObject(date);
        out.writeObject(time);
!!!8457858.java!!!	readExternal(inout in : ObjectInput) : ChronoLocalDateTime
        ChronoLocalDate date = (ChronoLocalDate) in.readObject();
        LocalTime time = (LocalTime) in.readObject();
        return date.atTime(time);
!!!8457986.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof ChronoLocalDateTime) {
            return compareTo((ChronoLocalDateTime<?>) obj) == 0;
        }
        return false;
!!!8458114.java!!!	hashCode() : int
        return toLocalDate().hashCode() ^ toLocalTime().hashCode();
!!!8458242.java!!!	toString() : String
        return toLocalDate().toString() + 'T' + toLocalTime().toString();
