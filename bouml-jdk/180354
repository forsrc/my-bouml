format 222
"util" // jdk1.8::javax::lang::model::util
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/lang/model/util/"
  java_package "javax.lang.model.util"
  classview 173058 "util"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 853890 "Elements"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility methods for operating on program elements.

<p><b>Compatibility Note:</b> Methods may be added to this interface
in future releases of the platform.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see javax.annotation.processing.ProcessingEnvironment#getElementUtils
@since 1.6
"
      operation 9722242 "getPackageElement"
	public return_type class_ref 1180034 // PackageElement
	nparams 1
	  param inout name "name" type class_ref 429442 // CharSequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a package given its fully qualified name.

@param name  fully qualified package name, or \"\" for an unnamed package
@return the named package, or {@code null} if it cannot be found
"
      end

      operation 9722370 "getTypeElement"
	public return_type class_ref 848898 // TypeElement
	nparams 1
	  param inout name "name" type class_ref 429442 // CharSequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a type element given its canonical name.

@param name  the canonical name
@return the named type element, or {@code null} if it cannot be found
"
      end

      operation 9722498 "getElementValuesWithDefaults"
	public return_type class_ref 130178 // Map
	nparams 1
	  param inout name "a" type class_ref 851970 // AnnotationMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExecutableElement, ? extends AnnotationValue> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the values of an annotation's elements, including defaults.

@see AnnotationMirror#getElementValues()
@param a  annotation to examine
@return the values of the annotation's elements, including defaults
"
      end

      operation 9722626 "getDocComment"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "e" type class_ref 851842 // Element
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the text of the documentation (&quot;Javadoc&quot;)
comment of an element.

<p> A documentation comment of an element is a comment that
begins with \"{@code /**}\" , ends with a separate
\"<code>*&#47;</code>\", and immediately precedes the element,
ignoring white space.  Therefore, a documentation comment
contains at least three\"{@code *}\" characters.  The text
returned for the documentation comment is a processed form of
the comment as it appears in source code.  The leading \"{@code
/**}\" and trailing \"<code>*&#47;</code>\" are removed.  For lines
of the comment starting after the initial \"{@code /**}\",
leading white space characters are discarded as are any
consecutive \"{@code *}\" characters appearing after the white
space or starting the line.  The processed lines are then
concatenated together (including line terminators) and
returned.

@param e  the element being examined
@return the documentation comment of the element, or {@code null}
         if there is none
@jls 3.6 White Space
"
      end

      operation 9722754 "isDeprecated"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 851842 // Element
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the element is deprecated, {@code false} otherwise.

@param e  the element being examined
@return {@code true} if the element is deprecated, {@code false} otherwise
"
      end

      operation 9722882 "getBinaryName"
	public return_type class_ref 838018 // Name
	nparams 1
	  param inout name "type" type class_ref 848898 // TypeElement
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>binary name</i> of a type element.

@param type  the type element being examined
@return the binary name

@see TypeElement#getQualifiedName
@jls 13.1 The Form of a Binary
"
      end

      operation 9723010 "getPackageOf"
	public return_type class_ref 1180034 // PackageElement
	nparams 1
	  param inout name "type" type class_ref 851842 // Element
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the package of an element.  The package of a package is
itself.

@param type the element being examined
@return the package of an element
"
      end

      operation 9723138 "getAllMembers"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "type" type class_ref 848898 // TypeElement
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Element> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all members of a type element, whether inherited or
declared directly.  For a class the result also includes its
constructors, but not local or anonymous classes.

<p>Note that elements of certain kinds can be isolated using
methods in {@link ElementFilter}.

@param type  the type being examined
@return all members of the type
@see Element#getEnclosedElements
"
      end

      operation 9723266 "getAllAnnotationMirrors"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "e" type class_ref 851842 // Element
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationMirror> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all annotations <i>present</i> on an element, whether
directly present or present via inheritance.

@param e  the element being examined
@return all annotations of the element
@see Element#getAnnotationMirrors
@see javax.lang.model.AnnotatedConstruct
"
      end

      operation 9723394 "hides"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "hider" type class_ref 851842 // Element
	  param inout name "hidden" type class_ref 851842 // Element
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether one type, method, or field hides another.

@param hider   the first element
@param hidden  the second element
@return {@code true} if and only if the first element hides
         the second
"
      end

      operation 9723522 "overrides"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "overrider" type class_ref 849026 // ExecutableElement
	  param inout name "overridden" type class_ref 849026 // ExecutableElement
	  param inout name "type" type class_ref 848898 // TypeElement
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether one method, as a member of a given type,
overrides another method.
When a non-abstract method overrides an abstract one, the
former is also said to <i>implement</i> the latter.

<p> In the simplest and most typical usage, the value of the
{@code type} parameter will simply be the class or interface
directly enclosing {@code overrider} (the possibly-overriding
method).  For example, suppose {@code m1} represents the method
{@code String.hashCode} and {@code m2} represents {@code
Object.hashCode}.  We can then ask whether {@code m1} overrides
{@code m2} within the class {@code String} (it does):

<blockquote>
{@code assert elements.overrides(m1, m2,
         elements.getTypeElement(\"java.lang.String\")); }
</blockquote>

A more interesting case can be illustrated by the following example
in which a method in type {@code A} does not override a
like-named method in type {@code B}:

<blockquote>
{@code class A { public void m() {} } }<br>
{@code interface B { void m(); } }<br>
...<br>
{@code m1 = ...;  // A.m }<br>
{@code m2 = ...;  // B.m }<br>
{@code assert ! elements.overrides(m1, m2,
         elements.getTypeElement(\"A\")); }
</blockquote>

When viewed as a member of a third type {@code C}, however,
the method in {@code A} does override the one in {@code B}:

<blockquote>
{@code class C extends A implements B {} }<br>
...<br>
{@code assert elements.overrides(m1, m2,
         elements.getTypeElement(\"C\")); }
</blockquote>

@param overrider  the first method, possible overrider
@param overridden  the second method, possibly being overridden
@param type   the type of which the first method is a member
@return {@code true} if and only if the first method overrides
         the second
@jls 8.4.8 Inheritance, Overriding, and Hiding
@jls 9.4.1 Inheritance and Overriding
"
      end

      operation 9723650 "getConstantExpression"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the text of a <i>constant expression</i> representing a
primitive value or a string.
The text returned is in a form suitable for representing the value
in source code.

@param value  a primitive value or string
@return the text of a constant expression
@throws IllegalArgumentException if the argument is not a primitive
         value or string

@see VariableElement#getConstantValue()
"
      end

      operation 9723778 "printElements"
	public explicit_return_type "void"
	nparams 2
	  param inout name "w" type class_ref 428034 // Writer
	  param inout name "" explicit_type "Element...elements"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a representation of the elements to the given writer in
the specified order.  The main purpose of this method is for
diagnostics.  The exact format of the output is <em>not</em>
specified and is subject to change.

@param w the writer to print the output to
@param elements the elements to print
"
      end

      operation 9723906 "getName"
	public return_type class_ref 838018 // Name
	nparams 1
	  param inout name "cs" type class_ref 429442 // CharSequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a name with the same sequence of characters as the
argument.

@param cs the character sequence to return as a name
@return a name with the same sequence of characters as the argument
"
      end

      operation 9724034 "isFunctionalInterface"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 848898 // TypeElement
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the type element is a functional interface, {@code false} otherwise.

@param type the type element being examined
@return {@code true} if the element is a functional interface, {@code false} otherwise
@jls 9.8 Functional Interfaces
@since 1.8
"
      end
    end

    class 854018 "Types"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility methods for operating on types.

<p><b>Compatibility Note:</b> Methods may be added to this interface
in future releases of the platform.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see javax.annotation.processing.ProcessingEnvironment#getTypeUtils
@since 1.6
"
      operation 9734274 "asElement"
	public return_type class_ref 851842 // Element
	nparams 1
	  param inout name "t" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the element corresponding to a type.
The type may be a {@code DeclaredType} or {@code TypeVariable}.
Returns {@code null} if the type is not one with a
corresponding element.

@param t the type to map to an element
@return the element corresponding to the given type
"
      end

      operation 9734402 "isSameType"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "t1" type class_ref 852226 // TypeMirror
	  param inout name "t2" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether two {@code TypeMirror} objects represent the same type.

<p>Caveat: if either of the arguments to this method represents a
wildcard, this method will return false.  As a consequence, a wildcard
is not the same type as itself.  This might be surprising at first,
but makes sense once you consider that an example like this must be
rejected by the compiler:
<pre>
  {@code List<?> list = new ArrayList<Object>();}
  {@code list.add(list.get(0));}
</pre>

<p>Since annotations are only meta-data associated with a type,
the set of annotations on either argument is <em>not</em> taken
into account when computing whether or not two {@code
TypeMirror} objects are the same type. In particular, two
{@code TypeMirror} objects can have different annotations and
still be considered the same.

@param t1  the first type
@param t2  the second type
@return {@code true} if and only if the two types are the same
"
      end

      operation 9734530 "isSubtype"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "t1" type class_ref 852226 // TypeMirror
	  param inout name "t2" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether one type is a subtype of another.
Any type is considered to be a subtype of itself.

@param t1  the first type
@param t2  the second type
@return {@code true} if and only if the first type is a subtype
         of the second
@throws IllegalArgumentException if given an executable or package type
@jls 4.10 Subtyping
"
      end

      operation 9734658 "isAssignable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "t1" type class_ref 852226 // TypeMirror
	  param inout name "t2" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether one type is assignable to another.

@param t1  the first type
@param t2  the second type
@return {@code true} if and only if the first type is assignable
         to the second
@throws IllegalArgumentException if given an executable or package type
@jls 5.2 Assignment Conversion
"
      end

      operation 9734786 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "t1" type class_ref 852226 // TypeMirror
	  param inout name "t2" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether one type argument <i>contains</i> another.

@param t1  the first type
@param t2  the second type
@return {@code true} if and only if the first type contains the second
@throws IllegalArgumentException if given an executable or package type
@jls 4.5.1.1 Type Argument Containment and Equivalence
"
      end

      operation 9734914 "isSubsignature"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "m1" type class_ref 1181314 // ExecutableType
	  param inout name "m2" type class_ref 1181314 // ExecutableType
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the signature of one method is a <i>subsignature</i>
of another.

@param m1  the first method
@param m2  the second method
@return {@code true} if and only if the first signature is a
         subsignature of the second
@jls 8.4.2 Method Signature
"
      end

      operation 9735042 "directSupertypes"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "t" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the direct supertypes of a type.  The interface types, if any,
will appear last in the list.

@param t  the type being examined
@return the direct supertypes, or an empty list if none
@throws IllegalArgumentException if given an executable or package type
"
      end

      operation 9735170 "erasure"
	public return_type class_ref 852226 // TypeMirror
	nparams 1
	  param inout name "t" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the erasure of a type.

@param t  the type to be erased
@return the erasure of the given type
@throws IllegalArgumentException if given a package type
@jls 4.6 Type Erasure
"
      end

      operation 9735298 "boxedClass"
	public return_type class_ref 848898 // TypeElement
	nparams 1
	  param inout name "p" type class_ref 1182082 // PrimitiveType
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class of a boxed value of a given primitive type.
That is, <i>boxing conversion</i> is applied.

@param p  the primitive type to be converted
@return the class of a boxed value of type {@code p}
@jls 5.1.7 Boxing Conversion
"
      end

      operation 9735426 "unboxedType"
	public return_type class_ref 1182082 // PrimitiveType
	nparams 1
	  param inout name "t" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type (a primitive type) of unboxed values of a given type.
That is, <i>unboxing conversion</i> is applied.

@param t  the type to be unboxed
@return the type of an unboxed value of type {@code t}
@throws IllegalArgumentException if the given type has no
         unboxing conversion
@jls 5.1.8 Unboxing Conversion
"
      end

      operation 9735554 "capture"
	public return_type class_ref 852226 // TypeMirror
	nparams 1
	  param inout name "t" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies capture conversion to a type.

@param t  the type to be converted
@return the result of applying capture conversion
@throws IllegalArgumentException if given an executable or package type
@jls 5.1.10 Capture Conversion
"
      end

      operation 9735682 "getPrimitiveType"
	public return_type class_ref 1182082 // PrimitiveType
	nparams 1
	  param inout name "kind" type class_ref 848514 // TypeKind
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a primitive type.

@param kind  the kind of primitive type to return
@return a primitive type
@throws IllegalArgumentException if {@code kind} is not a primitive kind
"
      end

      operation 9735810 "getNullType"
	public return_type class_ref 1181954 // NullType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the null type.  This is the type of {@code null}.

@return the null type
"
      end

      operation 9735938 "getNoType"
	public return_type class_ref 1181826 // NoType
	nparams 1
	  param inout name "kind" type class_ref 848514 // TypeKind
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudo-type used where no actual type is appropriate.
The kind of type to return may be either
{@link TypeKind#VOID VOID} or {@link TypeKind#NONE NONE}.
For packages, use
{@link Elements#getPackageElement(CharSequence)}{@code .asType()}
instead.

@param kind  the kind of type to return
@return a pseudo-type of kind {@code VOID} or {@code NONE}
@throws IllegalArgumentException if {@code kind} is not valid
"
      end

      operation 9736066 "getArrayType"
	public return_type class_ref 1180930 // ArrayType
	nparams 1
	  param inout name "componentType" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array type with the specified component type.

@param componentType  the component type
@return an array type with the specified component type.
@throws IllegalArgumentException if the component type is not valid for
         an array
"
      end

      operation 9736194 "getWildcardType"
	public return_type class_ref 1182338 // WildcardType
	nparams 2
	  param inout name "extendsBound" type class_ref 852226 // TypeMirror
	  param inout name "superBound" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new wildcard type argument.  Either of the wildcard's
bounds may be specified, or neither, but not both.

@param extendsBound  the extends (upper) bound, or {@code null} if none
@param superBound    the super (lower) bound, or {@code null} if none
@return a new wildcard
@throws IllegalArgumentException if bounds are not valid
"
      end

      operation 9736322 "getDeclaredType"
	public return_type class_ref 852354 // DeclaredType
	nparams 2
	  param inout name "typeElem" type class_ref 848898 // TypeElement
	  param inout name "" explicit_type "TypeMirror...typeArgs"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type corresponding to a type element and
actual type arguments.
Given the type element for {@code Set} and the type mirror
for {@code String},
for example, this method may be used to get the
parameterized type {@code Set<String>}.

<p> The number of type arguments must either equal the
number of the type element's formal type parameters, or must be
zero.  If zero, and if the type element is generic,
then the type element's raw type is returned.

<p> If a parameterized type is being returned, its type element
must not be contained within a generic outer class.
The parameterized type {@code Outer<String>.Inner<Number>},
for example, may be constructed by first using this
method to get the type {@code Outer<String>}, and then invoking
{@link #getDeclaredType(DeclaredType, TypeElement, TypeMirror...)}.

@param typeElem  the type element
@param typeArgs  the actual type arguments
@return the type corresponding to the type element and
         actual type arguments
@throws IllegalArgumentException if too many or too few
         type arguments are given, or if an inappropriate type
         argument or type element is provided
"
      end

      operation 9736450 "getDeclaredType"
	public return_type class_ref 852354 // DeclaredType
	nparams 3
	  param inout name "containing" type class_ref 852354 // DeclaredType
	  param inout name "typeElem" type class_ref 848898 // TypeElement
	  param inout name "" explicit_type "TypeMirror...typeArgs"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type corresponding to a type element
and actual type arguments, given a
{@linkplain DeclaredType#getEnclosingType() containing type}
of which it is a member.
The parameterized type {@code Outer<String>.Inner<Number>},
for example, may be constructed by first using
{@link #getDeclaredType(TypeElement, TypeMirror...)}
to get the type {@code Outer<String>}, and then invoking
this method.

<p> If the containing type is a parameterized type,
the number of type arguments must equal the
number of {@code typeElem}'s formal type parameters.
If it is not parameterized or if it is {@code null}, this method is
equivalent to {@code getDeclaredType(typeElem, typeArgs)}.

@param containing  the containing type, or {@code null} if none
@param typeElem    the type element
@param typeArgs    the actual type arguments
@return the type corresponding to the type element and
         actual type arguments, contained within the given type
@throws IllegalArgumentException if too many or too few
         type arguments are given, or if an inappropriate type
         argument, type element, or containing type is provided
"
      end

      operation 9736578 "asMemberOf"
	public return_type class_ref 852226 // TypeMirror
	nparams 2
	  param inout name "containing" type class_ref 852354 // DeclaredType
	  param inout name "element" type class_ref 851842 // Element
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of an element when that element is viewed as
a member of, or otherwise directly contained by, a given type.
For example,
when viewed as a member of the parameterized type {@code Set<String>},
the {@code Set.add} method is an {@code ExecutableType}
whose parameter is of type {@code String}.

@param containing  the containing type
@param element     the element
@return the type of the element as viewed from the containing type
@throws IllegalArgumentException if the element is not a valid one
         for the given type
"
      end
    end

    class 1182722 "AbstractAnnotationValueVisitor6"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1179522 // AnnotationValueVisitor
        rank 0 explicit_value ""
      actual class class_ref 1179522 // AnnotationValueVisitor
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor for annotation values with default behavior
appropriate for the {@link SourceVersion#RELEASE_6 RELEASE_6}
source version.

<p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract annotation
value visitor class will also be introduced to correspond to the
new language level; this visitor will have different default
behavior for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods
@param <P> the type of the additional parameter to this visitor's methods.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see AbstractAnnotationValueVisitor7
@see AbstractAnnotationValueVisitor8
@since 1.6
"
      classrelation 3775362 // <realization>
	relation 3775362 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3775362 // <realization>
	  b parent class_ref 1179522 // AnnotationValueVisitor
      end

      operation 9713410 "AbstractAnnotationValueVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end

      operation 9713538 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "av" type class_ref 852098 // AnnotationValue
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an annotation value as if by passing itself to that
value's {@link AnnotationValue#accept accept}.  The invocation
{@code v.visit(av)} is equivalent to {@code av.accept(v, p)}.
@param av {@inheritDoc}
@param p  {@inheritDoc}
"
      end

      operation 9713666 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "av" type class_ref 852098 // AnnotationValue
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an annotation value as if by passing itself to that
value's {@link AnnotationValue#accept accept} method passing
{@code null} for the additional parameter.  The invocation
{@code v.visit(av)} is equivalent to {@code av.accept(v,
null)}.
@param av {@inheritDoc}
"
      end

      operation 9713794 "visitUnknown"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "av" type class_ref 852098 // AnnotationValue
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

<p>The default implementation of this method in {@code
AbstractAnnotationValueVisitor6} will always throw {@code
UnknownAnnotationValueException}.  This behavior is not
required of a subclass.

@param av {@inheritDoc}
@param p  {@inheritDoc}
"
      end
    end

    class 1182850 "AbstractAnnotationValueVisitor7"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1182722 // AbstractAnnotationValueVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1182722 // AbstractAnnotationValueVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor for annotation values with default behavior
appropriate for the {@link SourceVersion#RELEASE_7 RELEASE_7}
source version.

<p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract annotation
value visitor class will also be introduced to correspond to the
new language level; this visitor will have different default
behavior for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods
@param <P> the type of the additional parameter to this visitor's methods.

@see AbstractAnnotationValueVisitor6
@see AbstractAnnotationValueVisitor8
@since 1.7
"
      classrelation 3775490 // <realization>
	relation 3775490 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3775490 // <realization>
	  b parent class_ref 1182722 // AbstractAnnotationValueVisitor6
      end

      operation 9713922 "AbstractAnnotationValueVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end
    end

    class 1182978 "AbstractAnnotationValueVisitor8"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1182850 // AbstractAnnotationValueVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1182850 // AbstractAnnotationValueVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor for annotation values with default behavior
appropriate for the {@link SourceVersion#RELEASE_8 RELEASE_8}
source version.

<p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract annotation
value visitor class will also be introduced to correspond to the
new language level; this visitor will have different default
behavior for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods
@param <P> the type of the additional parameter to this visitor's methods.

@see AbstractAnnotationValueVisitor6
@see AbstractAnnotationValueVisitor7
@since 1.8
"
      classrelation 3775618 // <realization>
	relation 3775618 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3775618 // <realization>
	  b parent class_ref 1182850 // AbstractAnnotationValueVisitor7
      end

      operation 9714050 "AbstractAnnotationValueVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end
    end

    class 1183106 "AbstractElementVisitor6"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1179906 // ElementVisitor
        rank 0 explicit_value ""
      actual class class_ref 1179906 // ElementVisitor
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_6 RELEASE_6}
source version.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract element visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see AbstractElementVisitor7
@see AbstractElementVisitor8
@since 1.6
"
      classrelation 3775746 // <realization>
	relation 3775746 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3775746 // <realization>
	  b parent class_ref 1179906 // ElementVisitor
      end

      operation 9714178 "AbstractElementVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end

      operation 9714306 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 851842 // Element
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits any program element as if by passing itself to that
element's {@link Element#accept accept} method.  The invocation
{@code v.visit(elem)} is equivalent to {@code elem.accept(v,
p)}.

@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9714434 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "e" type class_ref 851842 // Element
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits any program element as if by passing itself to that
element's {@link Element#accept accept} method and passing
{@code null} for the additional parameter.  The invocation
{@code v.visit(elem)} is equivalent to {@code elem.accept(v,
null)}.

@param e  the element to visit
@return a visitor-specified result
"
      end

      operation 9714562 "visitUnknown"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 851842 // Element
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

<p> The default implementation of this method in
{@code AbstractElementVisitor6} will always throw
{@code UnknownElementException}.
This behavior is not required of a subclass.

@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
@throws UnknownElementException
         a visitor implementation may optionally throw this exception
"
      end
    end

    class 1183234 "AbstractElementVisitor7"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1183106 // AbstractElementVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1183106 // AbstractElementVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_7 RELEASE_7}
source version.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract element visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see AbstractElementVisitor6
@see AbstractElementVisitor8
@since 1.7
"
      classrelation 3775874 // <realization>
	relation 3775874 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3775874 // <realization>
	  b parent class_ref 1183106 // AbstractElementVisitor6
      end

      operation 9714690 "AbstractElementVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end
    end

    class 1183362 "AbstractElementVisitor8"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1183234 // AbstractElementVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1183234 // AbstractElementVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_8 RELEASE_8}
source version.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract element visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see AbstractElementVisitor6
@see AbstractElementVisitor7
@since 1.8
"
      classrelation 3776002 // <realization>
	relation 3776002 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3776002 // <realization>
	  b parent class_ref 1183234 // AbstractElementVisitor7
      end

      operation 9714818 "AbstractElementVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end
    end

    class 1183490 "AbstractTypeVisitor6"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1181186 // TypeVisitor
        rank 0 explicit_value ""
      actual class class_ref 1181186 // TypeVisitor
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor of types with default behavior appropriate for
the {@link javax.lang.model.SourceVersion#RELEASE_6 RELEASE_6}
source version.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract type visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see AbstractTypeVisitor7
@see AbstractTypeVisitor8
@since 1.6
"
      classrelation 3776130 // <realization>
	relation 3776130 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3776130 // <realization>
	  b parent class_ref 1181186 // TypeVisitor
      end

      operation 9714946 "AbstractTypeVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end

      operation 9715074 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852226 // TypeMirror
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits any type mirror as if by passing itself to that type
mirror's {@link TypeMirror#accept accept} method.  The
invocation {@code v.visit(t, p)} is equivalent to {@code
t.accept(v, p)}.

@param t  the type to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9715202 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "t" type class_ref 852226 // TypeMirror
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits any type mirror as if by passing itself to that type
mirror's {@link TypeMirror#accept accept} method and passing
{@code null} for the additional parameter.  The invocation
{@code v.visit(t)} is equivalent to {@code t.accept(v, null)}.

@param t  the type to visit
@return a visitor-specified result
"
      end

      operation 9715330 "visitUnion"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182466 // UnionType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code UnionType} element by calling {@code
visitUnknown}.

@param t  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of {@code visitUnknown}

@since 1.7
"
      end

      operation 9715458 "visitIntersection"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181442 // IntersectionType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code IntersectionType} element by calling {@code
visitUnknown}.

@param t  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of {@code visitUnknown}

@since 1.8
"
      end

      operation 9715586 "visitUnknown"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852226 // TypeMirror
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

<p> The default implementation of this method in {@code
AbstractTypeVisitor6} will always throw {@code
UnknownTypeException}.  This behavior is not required of a
subclass.

@param t  the type to visit
@return a visitor-specified result
@throws UnknownTypeException
 a visitor implementation may optionally throw this exception
"
      end
    end

    class 1183618 "AbstractTypeVisitor7"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1183490 // AbstractTypeVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1183490 // AbstractTypeVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor of types with default behavior appropriate for
the {@link javax.lang.model.SourceVersion#RELEASE_7 RELEASE_7}
source version.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract type visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see AbstractTypeVisitor6
@see AbstractTypeVisitor8
@since 1.7
"
      classrelation 3776258 // <realization>
	relation 3776258 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3776258 // <realization>
	  b parent class_ref 1183490 // AbstractTypeVisitor6
      end

      operation 9715714 "AbstractTypeVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end

      operation 9715842 "visitUnion"
	abstract cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182466 // UnionType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code UnionType} in a manner defined by a subclass.

@param t  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of the visit as defined by a subclass
"
      end
    end

    class 1183746 "AbstractTypeVisitor8"
      abstract visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1183618 // AbstractTypeVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1183618 // AbstractTypeVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A skeletal visitor of types with default behavior appropriate for
the {@link javax.lang.model.SourceVersion#RELEASE_8 RELEASE_8}
source version.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract type visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see AbstractTypeVisitor6
@see AbstractTypeVisitor7
@since 1.8
"
      classrelation 3776386 // <realization>
	relation 3776386 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3776386 // <realization>
	  b parent class_ref 1183618 // AbstractTypeVisitor7
      end

      operation 9715970 "AbstractTypeVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call.
"
      end

      operation 9716098 "visitIntersection"
	abstract cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181442 // IntersectionType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code IntersectionType} in a manner defined by a subclass.

@param t  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of the visit as defined by a subclass
"
      end
    end

    class 1183874 "ElementFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Filters for selecting just the elements of interest from a
collection of elements.  The returned sets and lists are new
collections and do use the argument as a backing store.  The
methods in this class do not make any attempts to guard against
concurrent modifications of the arguments.  The returned sets and
lists are mutable but unsafe for concurrent access.  A returned set
has the same iteration order as the argument set to a method.

<p>If iterables and sets containing {@code null} are passed as
arguments to methods in this class, a {@code NullPointerException}
will be thrown.

<p>Note that a <i>static import</i> statement can make the text of
calls to the methods in this class more concise; for example:

<blockquote><pre>
    import static javax.lang.model.util.ElementFilter.*;
    ...
        {@code List<VariableElement>} fs = fieldsIn(someClass.getEnclosedElements());
</pre></blockquote>

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@author Martin Buchholz
@since 1.6
"
      operation 9716226 "ElementFilter"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3776514 // CONSTRUCTOR_KIND (<unidirectional association>)
	relation 3776514 --->
	  a role_name "CONSTRUCTOR_KIND" init_value "
        Collections.unmodifiableSet(EnumSet.of(ElementKind.CONSTRUCTOR))" class_relation const_relation private
	    comment " Do not instantiate.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ElementKind> ${name}${value};
"
	    classrelation_ref 3776514 // CONSTRUCTOR_KIND (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3776642 // FIELD_KINDS (<unidirectional association>)
	relation 3776642 --->
	  a role_name "FIELD_KINDS" init_value "
        Collections.unmodifiableSet(EnumSet.of(ElementKind.FIELD,
                                               ElementKind.ENUM_CONSTANT))" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ElementKind> ${name}${value};
"
	    classrelation_ref 3776642 // FIELD_KINDS (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3776770 // METHOD_KIND (<unidirectional association>)
	relation 3776770 --->
	  a role_name "METHOD_KIND" init_value "
        Collections.unmodifiableSet(EnumSet.of(ElementKind.METHOD))" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ElementKind> ${name}${value};
"
	    classrelation_ref 3776770 // METHOD_KIND (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3776898 // PACKAGE_KIND (<unidirectional association>)
	relation 3776898 --->
	  a role_name "PACKAGE_KIND" init_value "
        Collections.unmodifiableSet(EnumSet.of(ElementKind.PACKAGE))" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ElementKind> ${name}${value};
"
	    classrelation_ref 3776898 // PACKAGE_KIND (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3777026 // TYPE_KINDS (<unidirectional association>)
	relation 3777026 --->
	  a role_name "TYPE_KINDS" init_value "
        Collections.unmodifiableSet(EnumSet.of(ElementKind.CLASS,
                                               ElementKind.ENUM,
                                               ElementKind.INTERFACE,
                                               ElementKind.ANNOTATION_TYPE))" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ElementKind> ${name}${value};
"
	    classrelation_ref 3777026 // TYPE_KINDS (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 9716354 "fieldsIn"
	class_operation public return_type class_ref 175362 // List
	nparams 1
	  param inout name "elements" type class_ref 184322 // Iterable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<VariableElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of fields in {@code elements}.
@return a list of fields in {@code elements}
@param elements the elements to filter
"
      end

      operation 9716482 "fieldsIn"
	class_operation public return_type class_ref 192258 // Set
	nparams 1
	  param inout name "elements" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<VariableElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set of fields in {@code elements}.
@return a set of fields in {@code elements}
@param elements the elements to filter
"
      end

      operation 9716610 "constructorsIn"
	class_operation public return_type class_ref 175362 // List
	nparams 1
	  param inout name "elements" type class_ref 184322 // Iterable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ExecutableElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of constructors in {@code elements}.
@return a list of constructors in {@code elements}
@param elements the elements to filter
"
      end

      operation 9716738 "constructorsIn"
	class_operation public return_type class_ref 192258 // Set
	nparams 1
	  param inout name "elements" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ExecutableElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set of constructors in {@code elements}.
@return a set of constructors in {@code elements}
@param elements the elements to filter
"
      end

      operation 9716866 "methodsIn"
	class_operation public return_type class_ref 175362 // List
	nparams 1
	  param inout name "elements" type class_ref 184322 // Iterable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ExecutableElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of methods in {@code elements}.
@return a list of methods in {@code elements}
@param elements the elements to filter
"
      end

      operation 9716994 "methodsIn"
	class_operation public return_type class_ref 192258 // Set
	nparams 1
	  param inout name "elements" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ExecutableElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set of methods in {@code elements}.
@return a set of methods in {@code elements}
@param elements the elements to filter
"
      end

      operation 9717122 "typesIn"
	class_operation public return_type class_ref 175362 // List
	nparams 1
	  param inout name "elements" type class_ref 184322 // Iterable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TypeElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of types in {@code elements}.
@return a list of types in {@code elements}
@param elements the elements to filter
"
      end

      operation 9717250 "typesIn"
	class_operation public return_type class_ref 192258 // Set
	nparams 1
	  param inout name "elements" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TypeElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set of types in {@code elements}.
@return a set of types in {@code elements}
@param elements the elements to filter
"
      end

      operation 9717378 "packagesIn"
	class_operation public return_type class_ref 175362 // List
	nparams 1
	  param inout name "elements" type class_ref 184322 // Iterable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PackageElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of packages in {@code elements}.
@return a list of packages in {@code elements}
@param elements the elements to filter
"
      end

      operation 9717506 "packagesIn"
	class_operation public return_type class_ref 192258 // Set
	nparams 1
	  param inout name "elements" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PackageElement> ${name}${(}${t0}<? extends Element> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set of packages in {@code elements}.
@return a set of packages in {@code elements}
@param elements the elements to filter
"
      end

      operation 9717634 "listFilter"
	class_operation private return_type class_ref 175362 // List
	nparams 3
	  param inout name "elements" type class_ref 184322 // Iterable
	  param inout name "targetKinds" type class_ref 192258 // Set
	  param inout name "clazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Element> ${type}<E> ${name}${(}${t0}<? extends Element> ${p0}, ${t1}<ElementKind> ${p1}, ${t2}<E> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Assumes targetKinds and E are sensible."
      end

      operation 9717762 "setFilter"
	class_operation private return_type class_ref 192258 // Set
	nparams 3
	  param inout name "elements" type class_ref 192258 // Set
	  param inout name "targetKinds" type class_ref 192258 // Set
	  param inout name "clazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E extends Element> ${type}<E> ${name}${(}${t0}<? extends Element> ${p0}, ${t1}<ElementKind> ${p1}, ${t2}<E> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Assumes targetKinds and E are sensible."
      end
    end

    class 1184002 "ElementKindVisitor6"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1184130 // SimpleElementVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1184130 // SimpleElementVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of program elements based on their {@linkplain
ElementKind kind} with default behavior appropriate for the {@link
SourceVersion#RELEASE_6 RELEASE_6} source version.  For {@linkplain
Element elements} <tt><i>XYZ</i></tt> that may have more than one
kind, the <tt>visit<i>XYZ</i></tt> methods in this class delegate
to the <tt>visit<i>XYZKind</i></tt> method corresponding to the
first argument's kind.  The <tt>visit<i>XYZKind</i></tt> methods
call {@link #defaultAction defaultAction}, passing their arguments
to {@code defaultAction}'s corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it or the
{@code ElementKind} {@code enum} used in this case may have
constants added to it in the future to accommodate new, currently
unknown, language structures added to future versions of the
Java&trade; programming language.  Therefore, methods whose names
begin with {@code \"visit\"} may be added to this class in the
future; to avoid incompatibilities, classes which extend this class
should not declare any instance methods with names beginning with
{@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract element kind
visitor class will also be introduced to correspond to the new
language level; this visitor will have different default behavior
for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see ElementKindVisitor7
@see ElementKindVisitor8
@since 1.6
"
      classrelation 3777282 // <realization>
	relation 3777282 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3777282 // <realization>
	  b parent class_ref 1184130 // SimpleElementVisitor6
      end

      operation 9718914 "ElementKindVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9719042 "ElementKindVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9719170 "visitPackage"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180034 // PackageElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

The element argument has kind {@code PACKAGE}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  {@inheritDoc}
"
      end

      operation 9719298 "visitType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Visits a type element, dispatching to the visit method for the
specific {@linkplain ElementKind kind} of type, {@code
ANNOTATION_TYPE}, {@code CLASS}, {@code ENUM}, or {@code
INTERFACE}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of the kind-specific visit method
"
      end

      operation 9719426 "visitTypeAsAnnotationType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code ANNOTATION_TYPE} type element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9719554 "visitTypeAsClass"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code CLASS} type element by calling {@code
defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9719682 "visitTypeAsEnum"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code ENUM} type element by calling {@code
defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9719810 "visitTypeAsInterface"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code INTERFACE} type element by calling {@code
defaultAction}.
.
@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9719938 "visitVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Visits a variable element, dispatching to the visit method for
the specific {@linkplain ElementKind kind} of variable, {@code
ENUM_CONSTANT}, {@code EXCEPTION_PARAMETER}, {@code FIELD},
{@code LOCAL_VARIABLE}, {@code PARAMETER}, or {@code RESOURCE_VARIABLE}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of the kind-specific visit method
"
      end

      operation 9720066 "visitVariableAsEnumConstant"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code ENUM_CONSTANT} variable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9720194 "visitVariableAsExceptionParameter"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code EXCEPTION_PARAMETER} variable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9720322 "visitVariableAsField"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code FIELD} variable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9720450 "visitVariableAsLocalVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code LOCAL_VARIABLE} variable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9720578 "visitVariableAsParameter"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code PARAMETER} variable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9720706 "visitVariableAsResourceVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code RESOURCE_VARIABLE} variable element by calling
{@code visitUnknown}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code visitUnknown}

@since 1.7
"
      end

      operation 9720834 "visitExecutable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Visits an executable element, dispatching to the visit method
for the specific {@linkplain ElementKind kind} of executable,
{@code CONSTRUCTOR}, {@code INSTANCE_INIT}, {@code METHOD}, or
{@code STATIC_INIT}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of the kind-specific visit method
"
      end

      operation 9720962 "visitExecutableAsConstructor"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code CONSTRUCTOR} executable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9721090 "visitExecutableAsInstanceInit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code INSTANCE_INIT} executable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9721218 "visitExecutableAsMethod"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code METHOD} executable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9721346 "visitExecutableAsStaticInit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code STATIC_INIT} executable element by calling
{@code defaultAction}.

@param e the element to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9721474 "visitTypeParameter"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180162 // TypeParameterElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

The element argument has kind {@code TYPE_PARAMETER}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  {@inheritDoc}
"
      end
    end

    class 1184130 "SimpleElementVisitor6"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1183106 // AbstractElementVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1183106 // AbstractElementVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_6 RELEASE_6}
source version.

Visit methods corresponding to {@code RELEASE_6} language
constructs call {@link #defaultAction defaultAction}, passing their
arguments to {@code defaultAction}'s corresponding parameters.

For constructs introduced in {@code RELEASE_7} and later, {@code
visitUnknown} is called instead.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple element visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@code Void}
            for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's methods.  Use {@code Void}
             for visitors that do not need an additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see SimpleElementVisitor7
@see SimpleElementVisitor8
@since 1.6
"
      classrelation 3777154 // <realization>
	relation 3777154 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3777154 // <realization>
	  b parent class_ref 1183106 // AbstractElementVisitor6
      end

      attribute 2260994 "DEFAULT_VALUE"
	const_attribute protected explicit_type "R"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Default value to be returned; {@link #defaultAction
defaultAction} returns this value unless the method is
overridden.

"
      end

      operation 9717890 "SimpleElementVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9718018 "SimpleElementVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9718146 "defaultAction"
	cpp_inline protected explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 851842 // Element
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default action for visit methods.  The implementation in
this class just returns {@link #DEFAULT_VALUE}; subclasses will
commonly override this method.

@param e the element to process
@param p a visitor-specified parameter
@return {@code DEFAULT_VALUE} unless overridden
"
      end

      operation 9718274 "visitPackage"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180034 // PackageElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9718402 "visitType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9718530 "visitVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

This implementation calls {@code defaultAction}, unless the
element is a {@code RESOURCE_VARIABLE} in which case {@code
visitUnknown} is called.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction} or {@code visitUnknown}
"
      end

      operation 9718658 "visitExecutable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9718786 "visitTypeParameter"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180162 // TypeParameterElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end
    end

    class 1184258 "ElementKindVisitor7"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1184002 // ElementKindVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1184002 // ElementKindVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of program elements based on their {@linkplain
ElementKind kind} with default behavior appropriate for the {@link
SourceVersion#RELEASE_7 RELEASE_7} source version.  For {@linkplain
Element elements} <tt><i>XYZ</i></tt> that may have more than one
kind, the <tt>visit<i>XYZ</i></tt> methods in this class delegate
to the <tt>visit<i>XYZKind</i></tt> method corresponding to the
first argument's kind.  The <tt>visit<i>XYZKind</i></tt> methods
call {@link #defaultAction defaultAction}, passing their arguments
to {@code defaultAction}'s corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it or the
{@code ElementKind} {@code enum} used in this case may have
constants added to it in the future to accommodate new, currently
unknown, language structures added to future versions of the
Java&trade; programming language.  Therefore, methods whose names
begin with {@code \"visit\"} may be added to this class in the
future; to avoid incompatibilities, classes which extend this class
should not declare any instance methods with names beginning with
{@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract element kind
visitor class will also be introduced to correspond to the new
language level; this visitor will have different default behavior
for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see ElementKindVisitor6
@see ElementKindVisitor8
@since 1.7
"
      classrelation 3777410 // <realization>
	relation 3777410 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3777410 // <realization>
	  b parent class_ref 1184002 // ElementKindVisitor6
      end

      operation 9721602 "ElementKindVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9721730 "ElementKindVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9721858 "visitVariableAsResourceVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Visits a {@code RESOURCE_VARIABLE} variable element by calling
{@code defaultAction}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end
    end

    class 1184386 "ElementKindVisitor8"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1184258 // ElementKindVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1184258 // ElementKindVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of program elements based on their {@linkplain
ElementKind kind} with default behavior appropriate for the {@link
SourceVersion#RELEASE_8 RELEASE_8} source version.  For {@linkplain
Element elements} <tt><i>XYZ</i></tt> that may have more than one
kind, the <tt>visit<i>XYZ</i></tt> methods in this class delegate
to the <tt>visit<i>XYZKind</i></tt> method corresponding to the
first argument's kind.  The <tt>visit<i>XYZKind</i></tt> methods
call {@link #defaultAction defaultAction}, passing their arguments
to {@code defaultAction}'s corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it or the
{@code ElementKind} {@code enum} used in this case may have
constants added to it in the future to accommodate new, currently
unknown, language structures added to future versions of the
Java&trade; programming language.  Therefore, methods whose names
begin with {@code \"visit\"} may be added to this class in the
future; to avoid incompatibilities, classes which extend this class
should not declare any instance methods with names beginning with
{@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new abstract element kind
visitor class will also be introduced to correspond to the new
language level; this visitor will have different default behavior
for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see ElementKindVisitor6
@see ElementKindVisitor7
@since 1.8
"
      classrelation 3777538 // <realization>
	relation 3777538 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3777538 // <realization>
	  b parent class_ref 1184258 // ElementKindVisitor7
      end

      operation 9721986 "ElementKindVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9722114 "ElementKindVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end
    end

    class 1184514 "ElementScanner6"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1183106 // AbstractElementVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1183106 // AbstractElementVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A scanning visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_6 RELEASE_6}
source version.  The <tt>visit<i>XYZ</i></tt> methods in this
class scan their component elements by calling {@code scan} on
their {@linkplain Element#getEnclosedElements enclosed elements},
{@linkplain ExecutableElement#getParameters parameters}, etc., as
indicated in the individual method specifications.  A subclass can
control the order elements are visited by overriding the
<tt>visit<i>XYZ</i></tt> methods.  Note that clients of a scanner
may get the desired behavior be invoking {@code v.scan(e, p)} rather
than {@code v.visit(e, p)} on the root objects of interest.

<p>When a subclass overrides a <tt>visit<i>XYZ</i></tt> method, the
new method can cause the enclosed elements to be scanned in the
default way by calling <tt>super.visit<i>XYZ</i></tt>.  In this
fashion, the concrete visitor can control the ordering of traversal
over the component elements with respect to the additional
processing; for example, consistently calling
<tt>super.visit<i>XYZ</i></tt> at the start of the overridden
methods will yield a preorder traversal, etc.  If the component
elements should be traversed in some other order, instead of
calling <tt>super.visit<i>XYZ</i></tt>, an overriding visit method
should call {@code scan} with the elements in the desired order.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new element scanner visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see ElementScanner7
@see ElementScanner8
@since 1.6
"
      classrelation 3777666 // <realization>
	relation 3777666 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3777666 // <realization>
	  b parent class_ref 1183106 // AbstractElementVisitor6
      end

      attribute 2261122 "DEFAULT_VALUE"
	const_attribute protected explicit_type "R"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The specified default value.

"
      end

      operation 9724162 "ElementScanner6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9724290 "ElementScanner6"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the default value
"
      end

      operation 9724418 "scan"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "iterable" type class_ref 184322 // Iterable
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Element> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Iterates over the given elements and calls {@link
#scan(Element, Object) scan(Element, P)} on each one.  Returns
the result of the last call to {@code scan} or {@code
DEFAULT_VALUE} for an empty iterable.

@param iterable the elements to scan
@param  p additional parameter
@return the scan of the last element or {@code DEFAULT_VALUE} if no elements
"
      end

      operation 9724546 "scan"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 851842 // Element
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Processes an element by calling {@code e.accept(this, p)};
this method may be overridden by subclasses.

@param e the element to scan
@param p a scanner-specified parameter
@return the result of visiting {@code e}.
"
      end

      operation 9724674 "scan"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "e" type class_ref 851842 // Element
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method equivalent to {@code v.scan(e, null)}.

@param e the element to scan
@return the result of scanning {@code e}.
"
      end

      operation 9724802 "visitPackage"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180034 // PackageElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation scans the enclosed elements.

@param e  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of scanning
"
      end

      operation 9724930 "visitType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation scans the enclosed elements.

@param e  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of scanning
"
      end

      operation 9725058 "visitVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

This implementation scans the enclosed elements, unless the
element is a {@code RESOURCE_VARIABLE} in which case {@code
visitUnknown} is called.

@param e  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of scanning
"
      end

      operation 9725186 "visitExecutable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation scans the parameters.

@param e  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of scanning
"
      end

      operation 9725314 "visitTypeParameter"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180162 // TypeParameterElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation scans the enclosed elements.

@param e  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of scanning
"
      end
    end

    class 1184642 "ElementScanner7"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1184514 // ElementScanner6
        rank 0 explicit_value ""
      actual class class_ref 1184514 // ElementScanner6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A scanning visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_7 RELEASE_7}
source version.  The <tt>visit<i>XYZ</i></tt> methods in this
class scan their component elements by calling {@code scan} on
their {@linkplain Element#getEnclosedElements enclosed elements},
{@linkplain ExecutableElement#getParameters parameters}, etc., as
indicated in the individual method specifications.  A subclass can
control the order elements are visited by overriding the
<tt>visit<i>XYZ</i></tt> methods.  Note that clients of a scanner
may get the desired behavior be invoking {@code v.scan(e, p)} rather
than {@code v.visit(e, p)} on the root objects of interest.

<p>When a subclass overrides a <tt>visit<i>XYZ</i></tt> method, the
new method can cause the enclosed elements to be scanned in the
default way by calling <tt>super.visit<i>XYZ</i></tt>.  In this
fashion, the concrete visitor can control the ordering of traversal
over the component elements with respect to the additional
processing; for example, consistently calling
<tt>super.visit<i>XYZ</i></tt> at the start of the overridden
methods will yield a preorder traversal, etc.  If the component
elements should be traversed in some other order, instead of
calling <tt>super.visit<i>XYZ</i></tt>, an overriding visit method
should call {@code scan} with the elements in the desired order.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new element scanner visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see ElementScanner6
@see ElementScanner8
@since 1.7
"
      classrelation 3777794 // <realization>
	relation 3777794 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3777794 // <realization>
	  b parent class_ref 1184514 // ElementScanner6
      end

      operation 9725442 "ElementScanner7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9725570 "ElementScanner7"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the default value
"
      end

      operation 9725698 "visitVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This implementation scans the enclosed elements.

@param e  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of scanning
"
      end
    end

    class 1184770 "ElementScanner8"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1184642 // ElementScanner7
        rank 0 explicit_value ""
      actual class class_ref 1184642 // ElementScanner7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A scanning visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_8 RELEASE_8}
source version.  The <tt>visit<i>XYZ</i></tt> methods in this
class scan their component elements by calling {@code scan} on
their {@linkplain Element#getEnclosedElements enclosed elements},
{@linkplain ExecutableElement#getParameters parameters}, etc., as
indicated in the individual method specifications.  A subclass can
control the order elements are visited by overriding the
<tt>visit<i>XYZ</i></tt> methods.  Note that clients of a scanner
may get the desired behavior be invoking {@code v.scan(e, p)} rather
than {@code v.visit(e, p)} on the root objects of interest.

<p>When a subclass overrides a <tt>visit<i>XYZ</i></tt> method, the
new method can cause the enclosed elements to be scanned in the
default way by calling <tt>super.visit<i>XYZ</i></tt>.  In this
fashion, the concrete visitor can control the ordering of traversal
over the component elements with respect to the additional
processing; for example, consistently calling
<tt>super.visit<i>XYZ</i></tt> at the start of the overridden
methods will yield a preorder traversal, etc.  If the component
elements should be traversed in some other order, instead of
calling <tt>super.visit<i>XYZ</i></tt>, an overriding visit method
should call {@code scan} with the elements in the desired order.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new element scanner visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see ElementScanner6
@see ElementScanner7
@since 1.8
"
      classrelation 3777922 // <realization>
	relation 3777922 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3777922 // <realization>
	  b parent class_ref 1184642 // ElementScanner7
      end

      operation 9725826 "ElementScanner8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9725954 "ElementScanner8"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the default value
"
      end
    end

    class 1184898 "SimpleAnnotationValueVisitor6"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1182722 // AbstractAnnotationValueVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1182722 // AbstractAnnotationValueVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor for annotation values with default behavior
appropriate for the {@link SourceVersion#RELEASE_6 RELEASE_6}
source version.  Visit methods call {@link
#defaultAction} passing their arguments to {@code defaultAction}'s
corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple annotation
value visitor class will also be introduced to correspond to the
new language level; this visitor will have different default
behavior for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods
@param <P> the type of the additional parameter to this visitor's methods.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see SimpleAnnotationValueVisitor7
@see SimpleAnnotationValueVisitor8
@since 1.6
"
      classrelation 3778050 // <realization>
	relation 3778050 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778050 // <realization>
	  b parent class_ref 1182722 // AbstractAnnotationValueVisitor6
      end

      attribute 2261250 "DEFAULT_VALUE"
	const_attribute protected explicit_type "R"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Default value to be returned; {@link #defaultAction
defaultAction} returns this value unless the method is
overridden.

"
      end

      operation 9726082 "SimpleAnnotationValueVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9726210 "SimpleAnnotationValueVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9726338 "defaultAction"
	cpp_inline protected explicit_return_type "R"
	nparams 2
	  param inout name "o" type class_ref 129538 // Object
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default action for visit methods.  The implementation in
this class just returns {@link #DEFAULT_VALUE}; subclasses will
commonly override this method.

@param o the value of the annotation
@param p a visitor-specified parameter
@return {@code DEFAULT_VALUE} unless overridden
"
      end

      operation 9726466 "visitBoolean"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "b" explicit_type "boolean"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param b {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9726594 "visitByte"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param b {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9726722 "visitChar"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "c" explicit_type "char"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param c {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9726850 "visitDouble"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "d" explicit_type "double"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param d {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9726978 "visitFloat"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "f" explicit_type "float"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param f {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9727106 "visitInt"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param i {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9727234 "visitLong"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "i" explicit_type "long"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param i {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9727362 "visitShort"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "s" explicit_type "short"
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param s {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9727490 "visitString"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param s {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9727618 "visitType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852226 // TypeMirror
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9727746 "visitEnumConstant"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "c" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param c {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9727874 "visitAnnotation"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "a" type class_ref 851970 // AnnotationMirror
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param a {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9728002 "visitArray"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "vals" type class_ref 175362 // List
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends AnnotationValue> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param vals {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end
    end

    class 1185026 "SimpleAnnotationValueVisitor7"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1184898 // SimpleAnnotationValueVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1184898 // SimpleAnnotationValueVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor for annotation values with default behavior
appropriate for the {@link SourceVersion#RELEASE_7 RELEASE_7}
source version.  Visit methods call {@link #defaultAction
defaultAction} passing their arguments to {@code defaultAction}'s
corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple annotation
value visitor class will also be introduced to correspond to the
new language level; this visitor will have different default
behavior for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods
@param <P> the type of the additional parameter to this visitor's methods.

@see SimpleAnnotationValueVisitor6
@see SimpleAnnotationValueVisitor8
@since 1.7
"
      classrelation 3778178 // <realization>
	relation 3778178 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778178 // <realization>
	  b parent class_ref 1184898 // SimpleAnnotationValueVisitor6
      end

      operation 9728130 "SimpleAnnotationValueVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9728258 "SimpleAnnotationValueVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end
    end

    class 1185154 "SimpleAnnotationValueVisitor8"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1185026 // SimpleAnnotationValueVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1185026 // SimpleAnnotationValueVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor for annotation values with default behavior
appropriate for the {@link SourceVersion#RELEASE_8 RELEASE_8}
source version.  Visit methods call {@link #defaultAction
defaultAction} passing their arguments to {@code defaultAction}'s
corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code AnnotationValueVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple annotation
value visitor class will also be introduced to correspond to the
new language level; this visitor will have different default
behavior for the visit method in question.  When the new visitor is
introduced, all or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods
@param <P> the type of the additional parameter to this visitor's methods.

@see SimpleAnnotationValueVisitor6
@see SimpleAnnotationValueVisitor7
@since 1.8
"
      classrelation 3778306 // <realization>
	relation 3778306 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778306 // <realization>
	  b parent class_ref 1185026 // SimpleAnnotationValueVisitor7
      end

      operation 9728386 "SimpleAnnotationValueVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9728514 "SimpleAnnotationValueVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end
    end

    class 1185282 "SimpleElementVisitor7"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1184130 // SimpleElementVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1184130 // SimpleElementVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_7 RELEASE_7}
source version.

Visit methods corresponding to {@code RELEASE_7} and earlier
language constructs call {@link #defaultAction defaultAction},
passing their arguments to {@code defaultAction}'s corresponding
parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple element visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@code Void}
            for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's methods.  Use {@code Void}
             for visitors that do not need an additional parameter.

@see SimpleElementVisitor6
@see SimpleElementVisitor8
@since 1.7
"
      classrelation 3778434 // <realization>
	relation 3778434 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778434 // <realization>
	  b parent class_ref 1184130 // SimpleElementVisitor6
      end

      operation 9728642 "SimpleElementVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9728770 "SimpleElementVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9728898 "visitVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This implementation calls {@code defaultAction}.

@param e {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end
    end

    class 1185410 "SimpleElementVisitor8"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1185282 // SimpleElementVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1185282 // SimpleElementVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor of program elements with default behavior
appropriate for the {@link SourceVersion#RELEASE_8 RELEASE_8}
source version.

Visit methods corresponding to {@code RELEASE_7} and earlier
language constructs call {@link #defaultAction defaultAction},
passing their arguments to {@code defaultAction}'s corresponding
parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code ElementVisitor} interface
implemented by this class may have methods added to it in the
future to accommodate new, currently unknown, language structures
added to future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple element visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@code Void}
            for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's methods.  Use {@code Void}
             for visitors that do not need an additional parameter.

@see SimpleElementVisitor6
@see SimpleElementVisitor7
@since 1.8
"
      classrelation 3778562 // <realization>
	relation 3778562 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778562 // <realization>
	  b parent class_ref 1185282 // SimpleElementVisitor7
      end

      operation 9729026 "SimpleElementVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9729154 "SimpleElementVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end
    end

    class 1185538 "SimpleTypeVisitor6"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1183490 // AbstractTypeVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1183490 // AbstractTypeVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor of types with default behavior appropriate for the
{@link SourceVersion#RELEASE_6 RELEASE_6} source version.

Visit methods corresponding to {@code RELEASE_6} language
constructs call {@link #defaultAction defaultAction}, passing their
arguments to {@code defaultAction}'s corresponding parameters.

For constructs introduced in {@code RELEASE_7} and later, {@code
visitUnknown} is called instead.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple type visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see SimpleTypeVisitor7
@see SimpleTypeVisitor8
@since 1.6
"
      classrelation 3778690 // <realization>
	relation 3778690 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778690 // <realization>
	  b parent class_ref 1183490 // AbstractTypeVisitor6
      end

      attribute 2261378 "DEFAULT_VALUE"
	const_attribute protected explicit_type "R"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Default value to be returned; {@link #defaultAction
defaultAction} returns this value unless the method is
overridden.

"
      end

      operation 9729282 "SimpleTypeVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9729410 "SimpleTypeVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9729538 "defaultAction"
	cpp_inline protected explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 852226 // TypeMirror
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default action for visit methods.  The implementation in
this class just returns {@link #DEFAULT_VALUE}; subclasses will
commonly override this method.

@param e the type to process
@param p a visitor-specified parameter
@return {@code DEFAULT_VALUE} unless overridden
"
      end

      operation 9729666 "visitPrimitive"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9729794 "visitNull"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181954 // NullType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9729922 "visitArray"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1180930 // ArrayType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9730050 "visitDeclared"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852354 // DeclaredType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9730178 "visitError"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852482 // ErrorType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9730306 "visitTypeVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182210 // TypeVariable
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9730434 "visitWildcard"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182338 // WildcardType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9730562 "visitExecutable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181314 // ExecutableType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end

      operation 9730690 "visitNoType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181826 // NoType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc} This implementation calls {@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end
    end

    class 1185666 "SimpleTypeVisitor7"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1185538 // SimpleTypeVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1185538 // SimpleTypeVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor of types with default behavior appropriate for the
{@link SourceVersion#RELEASE_7 RELEASE_7} source version.

Visit methods corresponding to {@code RELEASE_7} and earlier
language constructs call {@link #defaultAction defaultAction},
passing their arguments to {@code defaultAction}'s corresponding
parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple type visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see SimpleTypeVisitor6
@see SimpleTypeVisitor8
@since 1.7
"
      classrelation 3778818 // <realization>
	relation 3778818 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778818 // <realization>
	  b parent class_ref 1185538 // SimpleTypeVisitor6
      end

      operation 9730818 "SimpleTypeVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9730946 "SimpleTypeVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9731074 "visitUnion"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182466 // UnionType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This implementation visits a {@code UnionType} by calling
{@code defaultAction}.

@param t  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of {@code defaultAction}
"
      end
    end

    class 1185794 "SimpleTypeVisitor8"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1185666 // SimpleTypeVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1185666 // SimpleTypeVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple visitor of types with default behavior appropriate for the
{@link SourceVersion#RELEASE_7 RELEASE_7} source version.

Visit methods corresponding to {@code RELEASE_8} and earlier
language constructs call {@link #defaultAction defaultAction},
passing their arguments to {@code defaultAction}'s corresponding
parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new simple type visitor
class will also be introduced to correspond to the new language
level; this visitor will have different default behavior for the
visit method in question.  When the new visitor is introduced, all
or portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see SimpleTypeVisitor6
@see SimpleTypeVisitor7
@since 1.8
"
      classrelation 3778946 // <realization>
	relation 3778946 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3778946 // <realization>
	  b parent class_ref 1185666 // SimpleTypeVisitor7
      end

      operation 9731202 "SimpleTypeVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses {@code null} for the
default value.
"
      end

      operation 9731330 "SimpleTypeVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses; uses the argument for the
default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9731458 "visitIntersection"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181442 // IntersectionType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This implementation visits an {@code IntersectionType} by calling
{@code defaultAction}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of {@code defaultAction}
"
      end
    end

    class 1185922 "TypeKindVisitor6"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1185538 // SimpleTypeVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1185538 // SimpleTypeVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_6)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of types based on their {@linkplain TypeKind kind} with
default behavior appropriate for the {@link SourceVersion#RELEASE_6
RELEASE_6} source version.  For {@linkplain
TypeMirror types} <tt><i>XYZ</i></tt> that may have more than one
kind, the <tt>visit<i>XYZ</i></tt> methods in this class delegate
to the <tt>visit<i>XYZKind</i></tt> method corresponding to the
first argument's kind.  The <tt>visit<i>XYZKind</i></tt> methods
call {@link #defaultAction defaultAction}, passing their arguments
to {@code defaultAction}'s corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new type kind visitor class
will also be introduced to correspond to the new language level;
this visitor will have different default behavior for the visit
method in question.  When the new visitor is introduced, all or
portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;

@see TypeKindVisitor7
@see TypeKindVisitor8
@since 1.6
"
      classrelation 3779074 // <realization>
	relation 3779074 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3779074 // <realization>
	  b parent class_ref 1185538 // SimpleTypeVisitor6
      end

      operation 9731586 "TypeKindVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call; uses {@code null}
for the default value.
"
      end

      operation 9731714 "TypeKindVisitor6"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call; uses the argument
for the default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9731842 "visitPrimitive"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Visits a primitive type, dispatching to the visit method for
the specific {@linkplain TypeKind kind} of primitive type:
{@code BOOLEAN}, {@code BYTE}, etc.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of the kind-specific visit method
"
      end

      operation 9731970 "visitPrimitiveAsBoolean"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code BOOLEAN} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732098 "visitPrimitiveAsByte"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code BYTE} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732226 "visitPrimitiveAsShort"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code SHORT} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732354 "visitPrimitiveAsInt"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code INT} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732482 "visitPrimitiveAsLong"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code LONG} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732610 "visitPrimitiveAsChar"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code CHAR} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732738 "visitPrimitiveAsFloat"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code FLOAT} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732866 "visitPrimitiveAsDouble"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code DOUBLE} primitive type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9732994 "visitNoType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181826 // NoType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Visits a {@link NoType} instance, dispatching to the visit method for
the specific {@linkplain TypeKind kind} of pseudo-type:
{@code VOID}, {@code PACKAGE}, or {@code NONE}.

@param t {@inheritDoc}
@param p {@inheritDoc}
@return  the result of the kind-specific visit method
"
      end

      operation 9733122 "visitNoTypeAsVoid"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181826 // NoType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@link TypeKind#VOID VOID} pseudo-type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9733250 "visitNoTypeAsPackage"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181826 // NoType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@link TypeKind#PACKAGE PACKAGE} pseudo-type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end

      operation 9733378 "visitNoTypeAsNone"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181826 // NoType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@link TypeKind#NONE NONE} pseudo-type by calling
{@code defaultAction}.

@param t the type to visit
@param p a visitor-specified parameter
@return  the result of {@code defaultAction}
"
      end
    end

    class 1186050 "TypeKindVisitor7"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1185922 // TypeKindVisitor6
        rank 0 explicit_value ""
      actual class class_ref 1185922 // TypeKindVisitor6
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_7)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of types based on their {@linkplain TypeKind kind} with
default behavior appropriate for the {@link SourceVersion#RELEASE_7
RELEASE_7} source version.  For {@linkplain
TypeMirror types} <tt><i>XYZ</i></tt> that may have more than one
kind, the <tt>visit<i>XYZ</i></tt> methods in this class delegate
to the <tt>visit<i>XYZKind</i></tt> method corresponding to the
first argument's kind.  The <tt>visit<i>XYZKind</i></tt> methods
call {@link #defaultAction defaultAction}, passing their arguments
to {@code defaultAction}'s corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new type kind visitor class
will also be introduced to correspond to the new language level;
this visitor will have different default behavior for the visit
method in question.  When the new visitor is introduced, all or
portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see TypeKindVisitor6
@see TypeKindVisitor8
@since 1.7
"
      classrelation 3779202 // <realization>
	relation 3779202 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3779202 // <realization>
	  b parent class_ref 1185922 // TypeKindVisitor6
      end

      operation 9733506 "TypeKindVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call; uses {@code null}
for the default value.
"
      end

      operation 9733634 "TypeKindVisitor7"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call; uses the argument
for the default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9733762 "visitUnion"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182466 // UnionType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This implementation visits a {@code UnionType} by calling
{@code defaultAction}.

@param t  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of {@code defaultAction}
"
      end
    end

    class 1186178 "TypeKindVisitor8"
      visibility public 
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1186050 // TypeKindVisitor7
        rank 0 explicit_value ""
      actual class class_ref 1186050 // TypeKindVisitor7
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SupportedSourceVersion(RELEASE_8)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of types based on their {@linkplain TypeKind kind} with
default behavior appropriate for the {@link SourceVersion#RELEASE_8
RELEASE_8} source version.  For {@linkplain
TypeMirror types} <tt><i>XYZ</i></tt> that may have more than one
kind, the <tt>visit<i>XYZ</i></tt> methods in this class delegate
to the <tt>visit<i>XYZKind</i></tt> method corresponding to the
first argument's kind.  The <tt>visit<i>XYZKind</i></tt> methods
call {@link #defaultAction defaultAction}, passing their arguments
to {@code defaultAction}'s corresponding parameters.

<p> Methods in this class may be overridden subject to their
general contract.  Note that annotating methods in concrete
subclasses with {@link java.lang.Override @Override} will help
ensure that methods are overridden as intended.

<p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
by this class may have methods added to it in the future to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.
Therefore, methods whose names begin with {@code \"visit\"} may be
added to this class in the future; to avoid incompatibilities,
classes which extend this class should not declare any instance
methods with names beginning with {@code \"visit\"}.

<p>When such a new visit method is added, the default
implementation in this class will be to call the {@link
#visitUnknown visitUnknown} method.  A new type kind visitor class
will also be introduced to correspond to the new language level;
this visitor will have different default behavior for the visit
method in question.  When the new visitor is introduced, all or
portions of this visitor may be deprecated.

<p>Note that adding a default implementation of a new visit method
in a visitor class will occur instead of adding a <em>default
method</em> directly in the visitor interface since a Java SE 8
language feature cannot be used to this version of the API since
this version is required to be runnable on Java SE 7
implementations.  Future versions of the API that are only required
to run on Java SE 8 and later may take advantage of default methods
in this situation.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@see TypeKindVisitor6
@see TypeKindVisitor7
@since 1.8
"
      classrelation 3779330 // <realization>
	relation 3779330 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3779330 // <realization>
	  b parent class_ref 1186050 // TypeKindVisitor7
      end

      operation 9733890 "TypeKindVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call; uses {@code null}
for the default value.
"
      end

      operation 9734018 "TypeKindVisitor8"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param inout name "defaultValue" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for concrete subclasses to call; uses the argument
for the default value.

@param defaultValue the value to assign to {@link #DEFAULT_VALUE}
"
      end

      operation 9734146 "visitIntersection"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181442 // IntersectionType
	  param inout name "p" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This implementation visits an {@code IntersectionType} by calling
{@code defaultAction}.

@param t  {@inheritDoc}
@param p  {@inheritDoc}
@return the result of {@code defaultAction}
"
      end
    end
  end

  deploymentview 172674 "util"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 845442 "AbstractAnnotationValueVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.lang.model.SourceVersion;
import javax.annotation.processing.SupportedSourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1182722 // AbstractAnnotationValueVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 845570 "AbstractAnnotationValueVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.SourceVersion;
import javax.annotation.processing.SupportedSourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1182850 // AbstractAnnotationValueVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 845698 "AbstractAnnotationValueVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.SourceVersion;
import javax.annotation.processing.SupportedSourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1182978 // AbstractAnnotationValueVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 845826 "AbstractElementVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1183106 // AbstractElementVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 845954 "AbstractElementVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1183234 // AbstractElementVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846082 "AbstractElementVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1183362 // AbstractElementVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846210 "AbstractTypeVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.type.*;
${definition}"
      associated_elems
	class_ref 1183490 // AbstractTypeVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846338 "AbstractTypeVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.type.*;
${definition}"
      associated_elems
	class_ref 1183618 // AbstractTypeVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846466 "AbstractTypeVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.type.*;
${definition}"
      associated_elems
	class_ref 1183746 // AbstractTypeVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846594 "ElementFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.EnumSet;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import javax.lang.model.element.*;
${definition}"
      associated_elems
	class_ref 1183874 // ElementFilter
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846722 "SimpleElementVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184130 // SimpleElementVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846850 "ElementKindVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184002 // ElementKindVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 846978 "ElementKindVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184258 // ElementKindVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 847106 "ElementKindVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184386 // ElementKindVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 847234 "Elements"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Map;
import javax.lang.model.element.*;
import javax.lang.model.type.*;
${definition}"
      associated_elems
	class_ref 853890 // Elements
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 847362 "ElementScanner6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184514 // ElementScanner6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 847490 "ElementScanner7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184642 // ElementScanner7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 847618 "ElementScanner8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184770 // ElementScanner8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 847746 "SimpleAnnotationValueVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.element.*;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.SourceVersion;
import javax.annotation.processing.SupportedSourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1184898 // SimpleAnnotationValueVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 847874 "SimpleAnnotationValueVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185026 // SimpleAnnotationValueVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848002 "SimpleAnnotationValueVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185154 // SimpleAnnotationValueVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848130 "SimpleElementVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185282 // SimpleElementVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848258 "SimpleElementVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185410 // SimpleElementVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848386 "SimpleTypeVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.type.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185538 // SimpleTypeVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848514 "SimpleTypeVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.type.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185666 // SimpleTypeVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848642 "SimpleTypeVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.type.IntersectionType;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185794 // SimpleTypeVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848770 "TypeKindVisitor6"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.type.*;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1185922 // TypeKindVisitor6
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 848898 "TypeKindVisitor7"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.type.*;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1186050 // TypeKindVisitor7
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849026 "TypeKindVisitor8"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.type.*;
import static javax.lang.model.SourceVersion.*;
${definition}"
      associated_elems
	class_ref 1186178 // TypeKindVisitor8
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849154 "Types"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.lang.annotation.AnnotationTypeMismatchException;
import java.lang.annotation.IncompleteAnnotationException;
import java.util.List;
import javax.lang.model.element.*;
import javax.lang.model.type.*;
${definition}"
      associated_elems
	class_ref 854018 // Types
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
