class DoublePipeline
!!!9501058.java!!!	DoublePipeline(inout source : Supplier, in sourceFlags : int, inout parallel : boolean)
        super(source, sourceFlags, parallel);
!!!9501186.java!!!	DoublePipeline(inout source : Spliterator, in sourceFlags : int, inout parallel : boolean)
        super(source, sourceFlags, parallel);
!!!9501314.java!!!	DoublePipeline(inout upstream : AbstractPipeline, in opFlags : int)
        super(upstream, opFlags);
!!!9501442.java!!!	adapt(inout sink : Sink) : DoubleConsumer
        if (sink instanceof DoubleConsumer) {
            return (DoubleConsumer) sink;
        } else {
            if (Tripwire.ENABLED)
                Tripwire.trip(AbstractPipeline.class,
                              "using DoubleStream.adapt(Sink<Double> s)");
            return sink::accept;
        }
!!!9501570.java!!!	adapt(inout s : Spliterator) : Spliterator::OfDouble
        if (s instanceof Spliterator.OfDouble) {
            return (Spliterator.OfDouble) s;
        } else {
            if (Tripwire.ENABLED)
                Tripwire.trip(AbstractPipeline.class,
                              "using DoubleStream.adapt(Spliterator<Double> s)");
            throw new UnsupportedOperationException("DoubleStream.adapt(Spliterator<Double> s)");
        }
!!!9501698.java!!!	getOutputShape() : StreamShape
        return StreamShape.DOUBLE_VALUE;
!!!9501826.java!!!	evaluateToNode(inout helper : PipelineHelper, inout spliterator : Spliterator, inout flattenTree : boolean, inout generator : IntFunction) : Node
        return Nodes.collectDouble(helper, spliterator, flattenTree);
!!!9501954.java!!!	wrap(inout ph : PipelineHelper, inout supplier : Supplier, inout isParallel : boolean) : Spliterator
        return new StreamSpliterators.DoubleWrappingSpliterator<>(ph, supplier, isParallel);
!!!9502082.java!!!	lazySpliterator(inout supplier : Supplier) : Spliterator::OfDouble
        return new StreamSpliterators.DelegatingSpliterator.OfDouble((Supplier<Spliterator.OfDouble>) supplier);
!!!9502210.java!!!	forEachWithCancel(inout spliterator : Spliterator, inout sink : Sink) : void
        Spliterator.OfDouble spl = adapt(spliterator);
        DoubleConsumer adaptedSink = adapt(sink);
        do { } while (!sink.cancellationRequested() && spl.tryAdvance(adaptedSink));
!!!9502338.java!!!	makeNodeBuilder(in exactSizeIfKnown : long, inout generator : IntFunction) : Node::Builder
        return Nodes.doubleBuilder(exactSizeIfKnown);
!!!9502466.java!!!	iterator() : PrimitiveIterator::OfDouble
        return Spliterators.iterator(spliterator());
!!!9502594.java!!!	spliterator() : Spliterator::OfDouble
        return adapt(super.spliterator());
!!!9502722.java!!!	boxed() : Stream
        return mapToObj(Double::valueOf);
!!!9502850.java!!!	map(inout mapper : DoubleUnaryOperator) : DoubleStream
        Objects.requireNonNull(mapper);
        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,
                                       StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedDouble<Double>(sink) {
                    @Override
                    public void accept(double t) {
                        downstream.accept(mapper.applyAsDouble(t));
                    }
                };
            }
        };
!!!9502978.java!!!	mapToObj(inout mapper : DoubleFunction) : Stream
        Objects.requireNonNull(mapper);
        return new ReferencePipeline.StatelessOp<Double, U>(this, StreamShape.DOUBLE_VALUE,
                                                            StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<U> sink) {
                return new Sink.ChainedDouble<U>(sink) {
                    @Override
                    public void accept(double t) {
                        downstream.accept(mapper.apply(t));
                    }
                };
            }
        };
!!!9503106.java!!!	mapToInt(inout mapper : DoubleToIntFunction) : IntStream
        Objects.requireNonNull(mapper);
        return new IntPipeline.StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,
                                                   StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<Integer> sink) {
                return new Sink.ChainedDouble<Integer>(sink) {
                    @Override
                    public void accept(double t) {
                        downstream.accept(mapper.applyAsInt(t));
                    }
                };
            }
        };
!!!9503234.java!!!	mapToLong(inout mapper : DoubleToLongFunction) : LongStream
        Objects.requireNonNull(mapper);
        return new LongPipeline.StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,
                                                    StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<Long> sink) {
                return new Sink.ChainedDouble<Long>(sink) {
                    @Override
                    public void accept(double t) {
                        downstream.accept(mapper.applyAsLong(t));
                    }
                };
            }
        };
!!!9503362.java!!!	flatMap(inout mapper : DoubleFunction) : DoubleStream
        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,
                                        StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedDouble<Double>(sink) {
                    @Override
                    public void begin(long size) {
                        downstream.begin(-1);
                    }

                    @Override
                    public void accept(double t) {
                        try (DoubleStream result = mapper.apply(t)) {
                            // We can do better that this too; optimize for depth=0 case and just grab spliterator and forEach it
                            if (result != null)
                                result.sequential().forEach(i -> downstream.accept(i));
                        }
                    }
                };
            }
        };
!!!9503490.java!!!	unordered() : DoubleStream
        if (!isOrdered())
            return this;
        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE, StreamOpFlag.NOT_ORDERED) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<Double> sink) {
                return sink;
            }
        };
!!!9503618.java!!!	filter(inout predicate : DoublePredicate) : DoubleStream
        Objects.requireNonNull(predicate);
        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,
                                       StreamOpFlag.NOT_SIZED) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedDouble<Double>(sink) {
                    @Override
                    public void begin(long size) {
                        downstream.begin(-1);
                    }

                    @Override
                    public void accept(double t) {
                        if (predicate.test(t))
                            downstream.accept(t);
                    }
                };
            }
        };
!!!9503746.java!!!	peek(inout action : DoubleConsumer) : DoubleStream
        Objects.requireNonNull(action);
        return new StatelessOp<Double>(this, StreamShape.DOUBLE_VALUE,
                                       0) {
            @Override
            Sink<Double> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedDouble<Double>(sink) {
                    @Override
                    public void accept(double t) {
                        action.accept(t);
                        downstream.accept(t);
                    }
                };
            }
        };
!!!9503874.java!!!	limit(in maxSize : long) : DoubleStream
        if (maxSize < 0)
            throw new IllegalArgumentException(Long.toString(maxSize));
        return SliceOps.makeDouble(this, (long) 0, maxSize);
!!!9504002.java!!!	skip(in n : long) : DoubleStream
        if (n < 0)
            throw new IllegalArgumentException(Long.toString(n));
        if (n == 0)
            return this;
        else {
            long limit = -1;
            return SliceOps.makeDouble(this, n, limit);
        }
!!!9504130.java!!!	sorted() : DoubleStream
        return SortedOps.makeDouble(this);
!!!9504258.java!!!	distinct() : DoubleStream
        // While functional and quick to implement, this approach is not very efficient.
        // An efficient version requires a double-specific map/set implementation.
        return boxed().distinct().mapToDouble(i -> (double) i);
!!!9504386.java!!!	forEach(inout consumer : DoubleConsumer) : void
        evaluate(ForEachOps.makeDouble(consumer, false));
!!!9504514.java!!!	forEachOrdered(inout consumer : DoubleConsumer) : void
        evaluate(ForEachOps.makeDouble(consumer, true));
!!!9504642.java!!!	sum() : double
        /*
         * In the arrays allocated for the collect operation, index 0
         * holds the high-order bits of the running sum, index 1 holds
         * the low-order bits of the sum computed via compensated
         * summation, and index 2 holds the simple sum used to compute
         * the proper result if the stream contains infinite values of
         * the same sign.
         */
        double[] summation = collect(() -> new double[3],
                               (ll, d) -> {
                                   Collectors.sumWithCompensation(ll, d);
                                   ll[2] += d;
                               },
                               (ll, rr) -> {
                                   Collectors.sumWithCompensation(ll, rr[0]);
                                   Collectors.sumWithCompensation(ll, rr[1]);
                                   ll[2] += rr[2];
                               });

        return Collectors.computeFinalSum(summation);
!!!9504770.java!!!	min() : OptionalDouble
        return reduce(Math::min);
!!!9504898.java!!!	max() : OptionalDouble
        return reduce(Math::max);
!!!9505026.java!!!	average() : OptionalDouble
        /*
         * In the arrays allocated for the collect operation, index 0
         * holds the high-order bits of the running sum, index 1 holds
         * the low-order bits of the sum computed via compensated
         * summation, index 2 holds the number of values seen, index 3
         * holds the simple sum.
         */
        double[] avg = collect(() -> new double[4],
                               (ll, d) -> {
                                   ll[2]++;
                                   Collectors.sumWithCompensation(ll, d);
                                   ll[3] += d;
                               },
                               (ll, rr) -> {
                                   Collectors.sumWithCompensation(ll, rr[0]);
                                   Collectors.sumWithCompensation(ll, rr[1]);
                                   ll[2] += rr[2];
                                   ll[3] += rr[3];
                               });
        return avg[2] > 0
            ? OptionalDouble.of(Collectors.computeFinalSum(avg) / avg[2])
            : OptionalDouble.empty();
!!!9505154.java!!!	count() : long
        return mapToLong(e -> 1L).sum();
!!!9505282.java!!!	summaryStatistics() : DoubleSummaryStatistics
        return collect(DoubleSummaryStatistics::new, DoubleSummaryStatistics::accept,
                       DoubleSummaryStatistics::combine);
!!!9505410.java!!!	reduce(in identity : double, inout op : DoubleBinaryOperator) : double
        return evaluate(ReduceOps.makeDouble(identity, op));
!!!9505538.java!!!	reduce(inout op : DoubleBinaryOperator) : OptionalDouble
        return evaluate(ReduceOps.makeDouble(op));
!!!9505666.java!!!	collect(inout supplier : Supplier, inout accumulator : ObjDoubleConsumer, inout combiner : BiConsumer) : R
        BinaryOperator<R> operator = (left, right) -> {
            combiner.accept(left, right);
            return left;
        };
        return evaluate(ReduceOps.makeDouble(supplier, accumulator, operator));
!!!9505794.java!!!	anyMatch(inout predicate : DoublePredicate) : boolean
        return evaluate(MatchOps.makeDouble(predicate, MatchOps.MatchKind.ANY));
!!!9505922.java!!!	allMatch(inout predicate : DoublePredicate) : boolean
        return evaluate(MatchOps.makeDouble(predicate, MatchOps.MatchKind.ALL));
!!!9506050.java!!!	noneMatch(inout predicate : DoublePredicate) : boolean
        return evaluate(MatchOps.makeDouble(predicate, MatchOps.MatchKind.NONE));
!!!9506178.java!!!	findFirst() : OptionalDouble
        return evaluate(FindOps.makeDouble(true));
!!!9506306.java!!!	findAny() : OptionalDouble
        return evaluate(FindOps.makeDouble(false));
!!!9506434.java!!!	toArray() : double
        return Nodes.flattenDouble((Node.OfDouble) evaluateToArrayNode(Double[]::new))
                        .asPrimitiveArray();
