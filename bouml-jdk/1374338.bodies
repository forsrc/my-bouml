class DefaultTreeCellEditor
!!!11582722.java!!!	DefaultTreeCellEditor(inout tree : JTree, inout renderer : DefaultTreeCellRenderer)
        this(tree, renderer, null);
!!!11582850.java!!!	DefaultTreeCellEditor(inout tree : JTree, inout renderer : DefaultTreeCellRenderer, inout editor : TreeCellEditor)
        this.renderer = renderer;
        realEditor = editor;
        if(realEditor == null)
            realEditor = createTreeCellEditor();
        editingContainer = createContainer();
        setTree(tree);
        setBorderSelectionColor(UIManager.getColor
                                ("Tree.editorBorderSelectionColor"));
!!!11582978.java!!!	setBorderSelectionColor(inout newColor : Color) : void
        borderSelectionColor = newColor;
!!!11583106.java!!!	getBorderSelectionColor() : Color
        return borderSelectionColor;
!!!11583234.java!!!	setFont(inout font : Font) : void
        this.font = font;
!!!11583362.java!!!	getFont() : Font
        return font;
!!!11583490.java!!!	getTreeCellEditorComponent(inout tree : JTree, inout value : Object, inout isSelected : boolean, inout expanded : boolean, inout leaf : boolean, in row : int) : Component
        setTree(tree);
        lastRow = row;
        determineOffset(tree, value, isSelected, expanded, leaf, row);

        if (editingComponent != null) {
            editingContainer.remove(editingComponent);
        }
        editingComponent = realEditor.getTreeCellEditorComponent(tree, value,
                                        isSelected, expanded,leaf, row);


        // this is kept for backwards compatibility but isn't really needed
        // with the current BasicTreeUI implementation.
        TreePath        newPath = tree.getPathForRow(row);

        canEdit = (lastPath != null && newPath != null &&
                   lastPath.equals(newPath));

        Font            font = getFont();

        if(font == null) {
            if(renderer != null)
                font = renderer.getFont();
            if(font == null)
                font = tree.getFont();
        }
        editingContainer.setFont(font);
        prepareForEditing();
        return editingContainer;
!!!11583618.java!!!	getCellEditorValue() : Object
        return realEditor.getCellEditorValue();
!!!11583746.java!!!	isCellEditable(inout event : EventObject) : boolean
        boolean            retValue = false;
        boolean            editable = false;

        if (event != null) {
            if (event.getSource() instanceof JTree) {
                setTree((JTree)event.getSource());
                if (event instanceof MouseEvent) {
                    TreePath path = tree.getPathForLocation(
                                         ((MouseEvent)event).getX(),
                                         ((MouseEvent)event).getY());
                    editable = (lastPath != null && path != null &&
                               lastPath.equals(path));
                    if (path!=null) {
                        lastRow = tree.getRowForPath(path);
                        Object value = path.getLastPathComponent();
                        boolean isSelected = tree.isRowSelected(lastRow);
                        boolean expanded = tree.isExpanded(path);
                        TreeModel treeModel = tree.getModel();
                        boolean leaf = treeModel.isLeaf(value);
                        determineOffset(tree, value, isSelected,
                                        expanded, leaf, lastRow);
                    }
                }
            }
        }
        if(!realEditor.isCellEditable(event))
            return false;
        if(canEditImmediately(event))
            retValue = true;
        else if(editable && shouldStartEditingTimer(event)) {
            startEditingTimer();
        }
        else if(timer != null && timer.isRunning())
            timer.stop();
        if(retValue)
            prepareForEditing();
        return retValue;
!!!11583874.java!!!	shouldSelectCell(inout event : EventObject) : boolean
        return realEditor.shouldSelectCell(event);
!!!11584002.java!!!	stopCellEditing() : boolean
        if(realEditor.stopCellEditing()) {
            cleanupAfterEditing();
            return true;
        }
        return false;
!!!11584130.java!!!	cancelCellEditing() : void
        realEditor.cancelCellEditing();
        cleanupAfterEditing();
!!!11584258.java!!!	addCellEditorListener(inout l : CellEditorListener) : void
        realEditor.addCellEditorListener(l);
!!!11584386.java!!!	removeCellEditorListener(inout l : CellEditorListener) : void
        realEditor.removeCellEditorListener(l);
!!!11584514.java!!!	getCellEditorListeners() : CellEditorListener
        return ((DefaultCellEditor)realEditor).getCellEditorListeners();
!!!11584642.java!!!	valueChanged(inout e : TreeSelectionEvent) : void
        if(tree != null) {
            if(tree.getSelectionCount() == 1)
                lastPath = tree.getSelectionPath();
            else
                lastPath = null;
        }
        if(timer != null) {
            timer.stop();
        }
!!!11584770.java!!!	actionPerformed(inout e : ActionEvent) : void
        if(tree != null && lastPath != null) {
            tree.startEditingAtPath(lastPath);
        }
!!!11584898.java!!!	setTree(inout newTree : JTree) : void
        if(tree != newTree) {
            if(tree != null)
                tree.removeTreeSelectionListener(this);
            tree = newTree;
            if(tree != null)
                tree.addTreeSelectionListener(this);
            if(timer != null) {
                timer.stop();
            }
        }
!!!11585026.java!!!	shouldStartEditingTimer(inout event : EventObject) : boolean
        if((event instanceof MouseEvent) &&
            SwingUtilities.isLeftMouseButton((MouseEvent)event)) {
            MouseEvent        me = (MouseEvent)event;

            return (me.getClickCount() == 1 &&
                    inHitRegion(me.getX(), me.getY()));
        }
        return false;
!!!11585154.java!!!	startEditingTimer() : void
        if(timer == null) {
            timer = new Timer(1200, this);
            timer.setRepeats(false);
        }
        timer.start();
!!!11585282.java!!!	canEditImmediately(inout event : EventObject) : boolean
        if((event instanceof MouseEvent) &&
           SwingUtilities.isLeftMouseButton((MouseEvent)event)) {
            MouseEvent       me = (MouseEvent)event;

            return ((me.getClickCount() > 2) &&
                    inHitRegion(me.getX(), me.getY()));
        }
        return (event == null);
!!!11585410.java!!!	inHitRegion(in x : int, in y : int) : boolean
        if(lastRow != -1 && tree != null) {
            Rectangle bounds = tree.getRowBounds(lastRow);
            ComponentOrientation treeOrientation = tree.getComponentOrientation();

            if ( treeOrientation.isLeftToRight() ) {
                if (bounds != null && x <= (bounds.x + offset) &&
                    offset < (bounds.width - 5)) {
                    return false;
                }
            } else if ( bounds != null &&
                        ( x >= (bounds.x+bounds.width-offset+5) ||
                          x <= (bounds.x + 5) ) &&
                        offset < (bounds.width - 5) ) {
                return false;
            }
        }
        return true;
!!!11585538.java!!!	determineOffset(inout tree : JTree, inout value : Object, inout isSelected : boolean, inout expanded : boolean, inout leaf : boolean, in row : int) : void
        if(renderer != null) {
            if(leaf)
                editingIcon = renderer.getLeafIcon();
            else if(expanded)
                editingIcon = renderer.getOpenIcon();
            else
                editingIcon = renderer.getClosedIcon();
            if(editingIcon != null)
                offset = renderer.getIconTextGap() +
                         editingIcon.getIconWidth();
            else
                offset = renderer.getIconTextGap();
        }
        else {
            editingIcon = null;
            offset = 0;
        }
!!!11585666.java!!!	prepareForEditing() : void
        if (editingComponent != null) {
            editingContainer.add(editingComponent);
        }
!!!11585794.java!!!	createContainer() : Container
        return new EditorContainer();
!!!11585922.java!!!	createTreeCellEditor() : TreeCellEditor
        Border              aBorder = UIManager.getBorder("Tree.editorBorder");
        DefaultCellEditor   editor = new DefaultCellEditor
            (new DefaultTextField(aBorder)) {
            public boolean shouldSelectCell(EventObject event) {
                boolean retValue = super.shouldSelectCell(event);
                return retValue;
            }
        };

        // One click to edit.
        editor.setClickCountToStart(1);
        return editor;
!!!11586050.java!!!	cleanupAfterEditing() : void
        if (editingComponent != null) {
            editingContainer.remove(editingComponent);
        }
        editingComponent = null;
!!!11586178.java!!!	writeObject(inout s : ObjectOutputStream) : void
        Vector<Object> values = new Vector<Object>();

        s.defaultWriteObject();
        // Save the realEditor, if its Serializable.
        if(realEditor != null && realEditor instanceof Serializable) {
            values.addElement("realEditor");
            values.addElement(realEditor);
        }
        s.writeObject(values);
!!!11586306.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();

        Vector          values = (Vector)s.readObject();
        int             indexCounter = 0;
        int             maxCounter = values.size();

        if(indexCounter < maxCounter && values.elementAt(indexCounter).
           equals("realEditor")) {
            realEditor = (TreeCellEditor)values.elementAt(++indexCounter);
            indexCounter++;
        }
