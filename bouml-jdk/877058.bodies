class BreakIterator
!!!8241154.java!!!	clone() : Object
        try {
            return super.clone();
        }
        catch (CloneNotSupportedException e) {
            throw new InternalError(e);
        }
!!!8242050.java!!!	preceding(in offset : int) : int
        // NOTE:  This implementation is here solely because we can't add new
        // abstract methods to an existing class.  There is almost ALWAYS a
        // better, faster way to do this.
        int pos = following(offset);
        while (pos >= offset && pos != DONE) {
            pos = previous();
        }
        return pos;
!!!8242178.java!!!	isBoundary(in offset : int) : boolean
        // NOTE: This implementation probably is wrong for most situations
        // because it fails to take into account the possibility that a
        // CharacterIterator passed to setText() may not have a begin offset
        // of 0.  But since the abstract BreakIterator doesn't have that
        // knowledge, it assumes the begin offset is 0.  If you subclass
        // BreakIterator, copy the SimpleTextBoundary implementation of this
        // function into your subclass.  [This should have been abstract at
        // this level, but it's too late to fix that now.]
        if (offset == 0) {
            return true;
        }
        int boundary = following(offset - 1);
        if (boundary == DONE) {
            throw new IllegalArgumentException();
        }
        return boundary == offset;
!!!8242562.java!!!	setText(inout newText : String) : void
        setText(new StringCharacterIterator(newText));
!!!8242818.java!!!	getWordInstance() : BreakIterator
        return getWordInstance(Locale.getDefault());
!!!8242946.java!!!	getWordInstance(inout locale : Locale) : BreakIterator
        return getBreakInstance(locale, WORD_INDEX);
!!!8243074.java!!!	getLineInstance() : BreakIterator
        return getLineInstance(Locale.getDefault());
!!!8243202.java!!!	getLineInstance(inout locale : Locale) : BreakIterator
        return getBreakInstance(locale, LINE_INDEX);
!!!8243330.java!!!	getCharacterInstance() : BreakIterator
        return getCharacterInstance(Locale.getDefault());
!!!8243458.java!!!	getCharacterInstance(inout locale : Locale) : BreakIterator
        return getBreakInstance(locale, CHARACTER_INDEX);
!!!8243586.java!!!	getSentenceInstance() : BreakIterator
        return getSentenceInstance(Locale.getDefault());
!!!8243714.java!!!	getSentenceInstance(inout locale : Locale) : BreakIterator
        return getBreakInstance(locale, SENTENCE_INDEX);
!!!8243842.java!!!	getBreakInstance(inout locale : Locale, in type : int) : BreakIterator
        if (iterCache[type] != null) {
            BreakIteratorCache cache = iterCache[type].get();
            if (cache != null) {
                if (cache.getLocale().equals(locale)) {
                    return cache.createBreakInstance();
                }
            }
        }

        BreakIterator result = createBreakInstance(locale, type);
        BreakIteratorCache cache = new BreakIteratorCache(locale, result);
        iterCache[type] = new SoftReference<>(cache);
        return result;
!!!8243970.java!!!	createBreakInstance(inout locale : Locale, in type : int) : BreakIterator
        LocaleProviderAdapter adapter = LocaleProviderAdapter.getAdapter(BreakIteratorProvider.class, locale);
        BreakIterator iterator = createBreakInstance(adapter, locale, type);
        if (iterator == null) {
            iterator = createBreakInstance(LocaleProviderAdapter.forJRE(), locale, type);
        }
        return iterator;
!!!8244098.java!!!	createBreakInstance(inout adapter : LocaleProviderAdapter, inout locale : Locale, in type : int) : BreakIterator
        BreakIteratorProvider breakIteratorProvider = adapter.getBreakIteratorProvider();
        BreakIterator iterator = null;
        switch (type) {
        case CHARACTER_INDEX:
            iterator = breakIteratorProvider.getCharacterInstance(locale);
            break;
        case WORD_INDEX:
            iterator = breakIteratorProvider.getWordInstance(locale);
            break;
        case LINE_INDEX:
            iterator = breakIteratorProvider.getLineInstance(locale);
            break;
        case SENTENCE_INDEX:
            iterator = breakIteratorProvider.getSentenceInstance(locale);
            break;
        }
        return iterator;
!!!8244226.java!!!	getAvailableLocales() : Locale
        LocaleServiceProviderPool pool =
            LocaleServiceProviderPool.getPool(BreakIteratorProvider.class);
        return pool.getAvailableLocales();
