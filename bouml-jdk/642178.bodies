class SAX2StAXStreamWriter
!!!4107650.java!!!	SAX2StAXStreamWriter()

!!!4107778.java!!!	SAX2StAXStreamWriter(inout writer : XMLStreamWriter)

                this.writer = writer;

!!!4107906.java!!!	getStreamWriter() : XMLStreamWriter

                return writer;

!!!4108034.java!!!	setStreamWriter(inout writer : XMLStreamWriter) : void

                this.writer = writer;

!!!4108162.java!!!	startDocument() : void

                super.startDocument();
                // Encoding and version info will be available only after startElement
                // is called for first time. So, defer START_DOCUMENT event of StAX till
                // that point of time.
                needToCallStartDocument = true;
!!!4108290.java!!!	endDocument() : void

                try {

                        writer.writeEndDocument();

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

                super.endDocument();

!!!4108418.java!!!	startElement(inout uri : String, inout localName : String, inout qName : String, inout attributes : Attributes) : void

                if (needToCallStartDocument) {
                    try {
                        if (docLocator == null)
                            writer.writeStartDocument();
                        else {
                            try{
                                writer.writeStartDocument(((Locator2)docLocator).getXMLVersion());
                            }catch(ClassCastException e){
                                writer.writeStartDocument();
                            }
                        }

                    } catch (XMLStreamException e) {

                            throw new SAXException(e);

                    }
                    needToCallStartDocument = false;
                }

                try {

                        String[] qname = {null, null};
                        parseQName(qName, qname);
                        //Do not call writeStartElement with prefix and namespaceURI, as it writes out
                        //namespace declaration.
                        //writer.writeStartElement(qname[0], qname[1], uri);
                        writer.writeStartElement(qName);


                        // No need to write namespaces, as they are written as part of attributes.
                        /*if (namespaces != null) {

                            final int nDecls = namespaces.size();
                            for (int i = 0; i < nDecls; i++) {
                                final String prefix = (String) namespaces.elementAt(i);
                                if (prefix.length() == 0) {
                                    writer.setDefaultNamespace((String)namespaces.elementAt(++i));
                                } else {
                                    writer.setPrefix(prefix, (String) namespaces.elementAt(++i));
                                }

                                writer.writeNamespace(prefix, (String)namespaces.elementAt(i));
                            }


                        }*/

                        // write attributes
                        for (int i = 0, s = attributes.getLength(); i < s; i++) {

                                parseQName(attributes.getQName(i), qname);

                                String attrPrefix = qname[0];
                                String attrLocal = qname[1];

                                String attrQName = attributes.getQName(i);
                                String attrValue = attributes.getValue(i);
                                String attrURI = attributes.getURI(i);

                                if ("xmlns".equals(attrPrefix) || "xmlns".equals(attrQName)) {

                                        // namespace declaration disguised as an attribute.
                                        // write it as an namespace

                                        if (attrLocal.length() == 0) {

                                            writer.setDefaultNamespace(attrValue);

                                        } else {

                                            writer.setPrefix(attrLocal, attrValue);

                                        }

                                        writer.writeNamespace(attrLocal, attrValue);

                                } else if (attrPrefix.length() > 0) {

                                        writer.writeAttribute(attrPrefix, attrURI, attrLocal,
                                                        attrValue);

                                } else {
                                        writer.writeAttribute(attrQName, attrValue);
                                }

                        }

                } catch (XMLStreamException e) {
                        throw new SAXException(e);

                } finally {

                        super.startElement(uri, localName, qName, attributes);

                }

!!!4108546.java!!!	endElement(inout uri : String, inout localName : String, inout qName : String) : void

                try {

                        writer.writeEndElement();

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                } finally {

                        super.endElement(uri, localName, qName);

                }

!!!4108674.java!!!	comment(inout ch : char [[]], in start : int, in length : int) : void

                super.comment(ch, start, length);
                try {

                        writer.writeComment(new String(ch, start, length));

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

!!!4108802.java!!!	characters(inout ch : char [[]], in start : int, in length : int) : void

                super.characters(ch, start, length);
                try {

                        if (!isCDATA) {

                                writer.writeCharacters(ch, start, length);

                        }

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

!!!4108930.java!!!	endCDATA() : void

                try {

                        writer.writeCData(CDATABuffer.toString());

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

                super.endCDATA();

!!!4109058.java!!!	ignorableWhitespace(inout ch : char [[]], in start : int, in length : int) : void

                super.ignorableWhitespace(ch, start, length);
                try {

                        writer.writeCharacters(ch, start, length);

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

!!!4109186.java!!!	processingInstruction(inout target : String, inout data : String) : void

                super.processingInstruction(target, data);
                try {

                        writer.writeProcessingInstruction(target, data);

                } catch (XMLStreamException e) {

                        throw new SAXException(e);

                }

