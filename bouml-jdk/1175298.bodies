class PartiallyOrderedSet
!!!9683458.java!!!	size() : int
        return nodes.size();
!!!9683586.java!!!	contains(inout o : Object) : boolean
        return nodes.contains(o);
!!!9683714.java!!!	iterator() : Iterator
        return new PartialOrderIterator(poNodes.values().iterator());
!!!9683842.java!!!	add(inout o : Object) : boolean
        if (nodes.contains(o)) {
            return false;
        }

        DigraphNode node = new DigraphNode(o);
        poNodes.put(o, node);
        return true;
!!!9683970.java!!!	remove(inout o : Object) : boolean
        DigraphNode node = (DigraphNode)poNodes.get(o);
        if (node == null) {
            return false;
        }

        poNodes.remove(o);
        node.dispose();
        return true;
!!!9684098.java!!!	clear() : void
        poNodes.clear();
!!!9684226.java!!!	setOrdering(inout first : Object, inout second : Object) : boolean
        DigraphNode firstPONode =
            (DigraphNode)poNodes.get(first);
        DigraphNode secondPONode =
            (DigraphNode)poNodes.get(second);

        secondPONode.removeEdge(firstPONode);
        return firstPONode.addEdge(secondPONode);
!!!9684354.java!!!	unsetOrdering(inout first : Object, inout second : Object) : boolean
        DigraphNode firstPONode =
            (DigraphNode)poNodes.get(first);
        DigraphNode secondPONode =
            (DigraphNode)poNodes.get(second);

        return firstPONode.removeEdge(secondPONode) ||
            secondPONode.removeEdge(firstPONode);
!!!9684482.java!!!	hasOrdering(inout preferred : Object, inout other : Object) : boolean
        DigraphNode preferredPONode =
            (DigraphNode)poNodes.get(preferred);
        DigraphNode otherPONode =
            (DigraphNode)poNodes.get(other);

        return preferredPONode.hasEdge(otherPONode);
