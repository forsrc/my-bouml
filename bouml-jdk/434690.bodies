class JProgressBar
!!!10670466.java!!!	JProgressBar()
        this(defaultOrientation);
!!!10670594.java!!!	JProgressBar(in orient : int)
        this(orient, defaultMinimum, defaultMaximum);
!!!10670722.java!!!	JProgressBar(in min : int, in max : int)
        this(defaultOrientation, min, max);
!!!10670850.java!!!	JProgressBar(in orient : int, in min : int, in max : int)
        // Creating the model this way is a bit simplistic, but
        //  I believe that it is the the most common usage of this
        //  component - it's what people will expect.
        setModel(new DefaultBoundedRangeModel(min, 0, min, max));
        updateUI();

        setOrientation(orient);      // documented with set/getOrientation()
        setBorderPainted(true);      // documented with is/setBorderPainted()
        setStringPainted(false);     // see setStringPainted
        setString(null);             // see getString
        setIndeterminate(false);     // see setIndeterminate
!!!10670978.java!!!	JProgressBar(inout newModel : BoundedRangeModel)
        setModel(newModel);
        updateUI();

        setOrientation(defaultOrientation);  // see setOrientation()
        setBorderPainted(true);              // see setBorderPainted()
        setStringPainted(false);             // see setStringPainted
        setString(null);                     // see getString
        setIndeterminate(false);             // see setIndeterminate
!!!10671106.java!!!	getOrientation() : int
        return orientation;
!!!10671234.java!!!	setOrientation(in newOrientation : int) : void
        if (orientation != newOrientation) {
            switch (newOrientation) {
            case VERTICAL:
            case HORIZONTAL:
                int oldOrientation = orientation;
                orientation = newOrientation;
                firePropertyChange("orientation", oldOrientation, newOrientation);
                if (accessibleContext != null) {
                    accessibleContext.firePropertyChange(
                            AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                            ((oldOrientation == VERTICAL)
                             ? AccessibleState.VERTICAL
                             : AccessibleState.HORIZONTAL),
                            ((orientation == VERTICAL)
                             ? AccessibleState.VERTICAL
                             : AccessibleState.HORIZONTAL));
                }
                break;
            default:
                throw new IllegalArgumentException(newOrientation +
                                             " is not a legal orientation");
            }
            revalidate();
        }
!!!10671362.java!!!	isStringPainted() : boolean
        return paintString;
!!!10671490.java!!!	setStringPainted(inout b : boolean) : void
        //PENDING: specify that string not painted when in indeterminate mode?
        //         or just leave that to the L&F?
        boolean oldValue = paintString;
        paintString = b;
        firePropertyChange("stringPainted", oldValue, paintString);
        if (paintString != oldValue) {
            revalidate();
            repaint();
        }
!!!10671618.java!!!	getString() : String
        if (progressString != null) {
            return progressString;
        } else {
            if (format == null) {
                format = NumberFormat.getPercentInstance();
            }
            return format.format(new Double(getPercentComplete()));
        }
!!!10671746.java!!!	setString(inout s : String) : void
        String oldValue = progressString;
        progressString = s;
        firePropertyChange("string", oldValue, progressString);
        if (progressString == null || oldValue == null || !progressString.equals(oldValue)) {
            repaint();
        }
!!!10671874.java!!!	getPercentComplete() : double
        long span = model.getMaximum() - model.getMinimum();
        double currentValue = model.getValue();
        double pc = (currentValue - model.getMinimum()) / span;
        return pc;
!!!10672002.java!!!	isBorderPainted() : boolean
        return paintBorder;
!!!10672130.java!!!	setBorderPainted(inout b : boolean) : void
        boolean oldValue = paintBorder;
        paintBorder = b;
        firePropertyChange("borderPainted", oldValue, paintBorder);
        if (paintBorder != oldValue) {
            repaint();
        }
!!!10672258.java!!!	paintBorder(inout g : Graphics) : void
        if (isBorderPainted()) {
            super.paintBorder(g);
        }
!!!10672386.java!!!	getUI() : ProgressBarUI
        return (ProgressBarUI)ui;
!!!10672514.java!!!	setUI(inout ui : ProgressBarUI) : void
        super.setUI(ui);
!!!10672642.java!!!	updateUI() : void
        setUI((ProgressBarUI)UIManager.getUI(this));
!!!10672770.java!!!	getUIClassID() : String
        return uiClassID;
!!!10673026.java!!!	createChangeListener() : ChangeListener
        return new ModelListener();
!!!10673154.java!!!	addChangeListener(inout l : ChangeListener) : void
        listenerList.add(ChangeListener.class, l);
!!!10673282.java!!!	removeChangeListener(inout l : ChangeListener) : void
        listenerList.remove(ChangeListener.class, l);
!!!10673410.java!!!	getChangeListeners() : ChangeListener
        return listenerList.getListeners(ChangeListener.class);
!!!10673538.java!!!	fireStateChanged() : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ChangeListener.class) {
                // Lazily create the event:
                if (changeEvent == null)
                    changeEvent = new ChangeEvent(this);
                ((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
            }
        }
!!!10673666.java!!!	getModel() : BoundedRangeModel
        return model;
!!!10673794.java!!!	setModel(inout newModel : BoundedRangeModel) : void
        // PENDING(???) setting the same model to multiple bars is broken; listeners
        BoundedRangeModel oldModel = getModel();

        if (newModel != oldModel) {
            if (oldModel != null) {
                oldModel.removeChangeListener(changeListener);
                changeListener = null;
            }

            model = newModel;

            if (newModel != null) {
                changeListener = createChangeListener();
                newModel.addChangeListener(changeListener);
            }

            if (accessibleContext != null) {
                accessibleContext.firePropertyChange(
                        AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,
                        (oldModel== null
                         ? null : Integer.valueOf(oldModel.getValue())),
                        (newModel== null
                         ? null : Integer.valueOf(newModel.getValue())));
            }

            if (model != null) {
                model.setExtent(0);
            }
            repaint();
        }
!!!10673922.java!!!	getValue() : int
 return getModel().getValue();
!!!10674050.java!!!	getMinimum() : int
 return getModel().getMinimum();
!!!10674178.java!!!	getMaximum() : int
 return getModel().getMaximum();
!!!10674306.java!!!	setValue(in n : int) : void
        BoundedRangeModel brm = getModel();
        int oldValue = brm.getValue();
        brm.setValue(n);

        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                    AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,
                    Integer.valueOf(oldValue),
                    Integer.valueOf(brm.getValue()));
        }
!!!10674434.java!!!	setMinimum(in n : int) : void
 getModel().setMinimum(n);
!!!10674562.java!!!	setMaximum(in n : int) : void
 getModel().setMaximum(n);
!!!10674690.java!!!	setIndeterminate(inout newValue : boolean) : void
        boolean oldValue = indeterminate;
        indeterminate = newValue;
        firePropertyChange("indeterminate", oldValue, indeterminate);
!!!10674818.java!!!	isIndeterminate() : boolean
        return indeterminate;
!!!10674946.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!10675074.java!!!	paramString() : String
        String orientationString = (orientation == HORIZONTAL ?
                                    "HORIZONTAL" : "VERTICAL");
        String paintBorderString = (paintBorder ?
                                    "true" : "false");
        String progressStringString = (progressString != null ?
                                       progressString : "");
        String paintStringString = (paintString ?
                                    "true" : "false");
        String indeterminateString = (indeterminate ?
                                    "true" : "false");

        return super.paramString() +
        ",orientation=" + orientationString +
        ",paintBorder=" + paintBorderString +
        ",paintString=" + paintStringString +
        ",progressString=" + progressStringString +
        ",indeterminateString=" + indeterminateString;
!!!10675202.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJProgressBar();
        }
        return accessibleContext;
