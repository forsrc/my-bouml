class PageAttributes
!!!6292482.java!!!	PageAttributes()
        setColor(ColorType.MONOCHROME);
        setMediaToDefault();
        setOrientationRequestedToDefault();
        setOrigin(OriginType.PHYSICAL);
        setPrintQualityToDefault();
        setPrinterResolutionToDefault();
!!!6292610.java!!!	PageAttributes(inout obj : PageAttributes)
        set(obj);
!!!6292738.java!!!	PageAttributes(inout color : PageAttributes::ColorType, inout media : PageAttributes::MediaType, inout orientationRequested : PageAttributes::OrientationRequestedType, inout origin : PageAttributes::OriginType, inout printQuality : PageAttributes::PrintQualityType, inout printerResolution : int [[]])
        setColor(color);
        setMedia(media);
        setOrientationRequested(orientationRequested);
        setOrigin(origin);
        setPrintQuality(printQuality);
        setPrinterResolution(printerResolution);
!!!6292866.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            // Since we implement Cloneable, this should never happen
            throw new InternalError(e);
        }
!!!6292994.java!!!	set(inout obj : PageAttributes) : void
        color = obj.color;
        media = obj.media;
        orientationRequested = obj.orientationRequested;
        origin = obj.origin;
        printQuality = obj.printQuality;
        // okay because we never modify the contents of printerResolution
        printerResolution = obj.printerResolution;
!!!6293122.java!!!	getColor() : PageAttributes::ColorType
        return color;
!!!6293250.java!!!	setColor(inout color : PageAttributes::ColorType) : void
        if (color == null) {
            throw new IllegalArgumentException("Invalid value for attribute "+
                                               "color");
        }
        this.color = color;
!!!6293378.java!!!	getMedia() : PageAttributes::MediaType
        return media;
!!!6293506.java!!!	setMedia(inout media : PageAttributes::MediaType) : void
        if (media == null) {
            throw new IllegalArgumentException("Invalid value for attribute "+
                                               "media");
        }
        this.media = media;
!!!6293634.java!!!	setMediaToDefault() : void
        String defaultCountry = Locale.getDefault().getCountry();
        if (defaultCountry != null &&
            (defaultCountry.equals(Locale.US.getCountry()) ||
             defaultCountry.equals(Locale.CANADA.getCountry()))) {
            setMedia(MediaType.NA_LETTER);
        } else {
            setMedia(MediaType.ISO_A4);
        }
!!!6293762.java!!!	getOrientationRequested() : PageAttributes::OrientationRequestedType
        return orientationRequested;
!!!6293890.java!!!	setOrientationRequested(inout orientationRequested : PageAttributes::OrientationRequestedType) : void
        if (orientationRequested == null) {
            throw new IllegalArgumentException("Invalid value for attribute "+
                                               "orientationRequested");
        }
        this.orientationRequested = orientationRequested;
!!!6294018.java!!!	setOrientationRequested(in orientationRequested : int) : void
        switch (orientationRequested) {
          case 3:
            setOrientationRequested(OrientationRequestedType.PORTRAIT);
            break;
          case 4:
            setOrientationRequested(OrientationRequestedType.LANDSCAPE);
            break;
          default:
            // This will throw an IllegalArgumentException
            setOrientationRequested(null);
            break;
        }
!!!6294146.java!!!	setOrientationRequestedToDefault() : void
        setOrientationRequested(OrientationRequestedType.PORTRAIT);
!!!6294274.java!!!	getOrigin() : PageAttributes::OriginType
        return origin;
!!!6294402.java!!!	setOrigin(inout origin : PageAttributes::OriginType) : void
        if (origin == null) {
            throw new IllegalArgumentException("Invalid value for attribute "+
                                               "origin");
        }
        this.origin = origin;
!!!6294530.java!!!	getPrintQuality() : PageAttributes::PrintQualityType
        return printQuality;
!!!6294658.java!!!	setPrintQuality(inout printQuality : PageAttributes::PrintQualityType) : void
        if (printQuality == null) {
            throw new IllegalArgumentException("Invalid value for attribute "+
                                               "printQuality");
        }
        this.printQuality = printQuality;
!!!6294786.java!!!	setPrintQuality(in printQuality : int) : void
        switch (printQuality) {
          case 3:
            setPrintQuality(PrintQualityType.DRAFT);
            break;
          case 4:
            setPrintQuality(PrintQualityType.NORMAL);
            break;
          case 5:
            setPrintQuality(PrintQualityType.HIGH);
            break;
          default:
            // This will throw an IllegalArgumentException
            setPrintQuality(null);
            break;
        }
!!!6294914.java!!!	setPrintQualityToDefault() : void
        setPrintQuality(PrintQualityType.NORMAL);
!!!6295042.java!!!	getPrinterResolution() : int
        // Return a copy because otherwise client code could circumvent the
        // the checks made in setPrinterResolution by modifying the
        // returned array.
        int[] copy = new int[3];
        copy[0] = printerResolution[0];
        copy[1] = printerResolution[1];
        copy[2] = printerResolution[2];
        return copy;
!!!6295170.java!!!	setPrinterResolution(inout printerResolution : int [[]]) : void
        if (printerResolution == null ||
            printerResolution.length != 3 ||
            printerResolution[0] <= 0 ||
            printerResolution[1] <= 0 ||
            (printerResolution[2] != 3 && printerResolution[2] != 4)) {
            throw new IllegalArgumentException("Invalid value for attribute "+
                                               "printerResolution");
        }
        // Store a copy because otherwise client code could circumvent the
        // the checks made above by holding a reference to the array and
        // modifying it after calling setPrinterResolution.
        int[] copy = new int[3];
        copy[0] = printerResolution[0];
        copy[1] = printerResolution[1];
        copy[2] = printerResolution[2];
        this.printerResolution = copy;
!!!6295298.java!!!	setPrinterResolution(in printerResolution : int) : void
        setPrinterResolution(new int[] { printerResolution, printerResolution,
                                         3 } );
!!!6295426.java!!!	setPrinterResolutionToDefault() : void
        setPrinterResolution(72);
!!!6295554.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof PageAttributes)) {
            return false;
        }

        PageAttributes rhs = (PageAttributes)obj;

        return (color == rhs.color &&
                media == rhs.media &&
                orientationRequested == rhs.orientationRequested &&
                origin == rhs.origin &&
                printQuality == rhs.printQuality &&
                printerResolution[0] == rhs.printerResolution[0] &&
                printerResolution[1] == rhs.printerResolution[1] &&
                printerResolution[2] == rhs.printerResolution[2]);
!!!6295682.java!!!	hashCode() : int
        return (color.hashCode() << 31 ^
                media.hashCode() << 24 ^
                orientationRequested.hashCode() << 23 ^
                origin.hashCode() << 22 ^
                printQuality.hashCode() << 20 ^
                printerResolution[2] >> 2 << 19 ^
                printerResolution[1] << 10 ^
                printerResolution[0]);
!!!6295810.java!!!	toString() : String
        // int[] printerResolution = getPrinterResolution();
        return "color=" + getColor() + ",media=" + getMedia() +
            ",orientation-requested=" + getOrientationRequested() +
            ",origin=" + getOrigin() + ",print-quality=" + getPrintQuality() +
            ",printer-resolution=[" + printerResolution[0] + "," +
            printerResolution[1] + "," + printerResolution[2] + "]";
