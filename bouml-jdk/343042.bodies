class PropertyChangeSupport
!!!6368898.java!!!	PropertyChangeSupport(inout sourceBean : Object)
        if (sourceBean == null) {
            throw new NullPointerException();
        }
        source = sourceBean;
!!!6369026.java!!!	addPropertyChangeListener(inout listener : PropertyChangeListener) : void
        if (listener == null) {
            return;
        }
        if (listener instanceof PropertyChangeListenerProxy) {
            PropertyChangeListenerProxy proxy =
                   (PropertyChangeListenerProxy)listener;
            // Call two argument add method.
            addPropertyChangeListener(proxy.getPropertyName(),
                                      proxy.getListener());
        } else {
            this.map.add(null, listener);
        }
!!!6369154.java!!!	removePropertyChangeListener(inout listener : PropertyChangeListener) : void
        if (listener == null) {
            return;
        }
        if (listener instanceof PropertyChangeListenerProxy) {
            PropertyChangeListenerProxy proxy =
                    (PropertyChangeListenerProxy)listener;
            // Call two argument remove method.
            removePropertyChangeListener(proxy.getPropertyName(),
                                         proxy.getListener());
        } else {
            this.map.remove(null, listener);
        }
!!!6369282.java!!!	getPropertyChangeListeners() : PropertyChangeListener
        return this.map.getListeners();
!!!6369410.java!!!	addPropertyChangeListener(inout propertyName : String, inout listener : PropertyChangeListener) : void
        if (listener == null || propertyName == null) {
            return;
        }
        listener = this.map.extract(listener);
        if (listener != null) {
            this.map.add(propertyName, listener);
        }
!!!6369538.java!!!	removePropertyChangeListener(inout propertyName : String, inout listener : PropertyChangeListener) : void
        if (listener == null || propertyName == null) {
            return;
        }
        listener = this.map.extract(listener);
        if (listener != null) {
            this.map.remove(propertyName, listener);
        }
!!!6369666.java!!!	getPropertyChangeListeners(inout propertyName : String) : PropertyChangeListener
        return this.map.getListeners(propertyName);
!!!6369794.java!!!	firePropertyChange(inout propertyName : String, inout oldValue : Object, inout newValue : Object) : void
        if (oldValue == null || newValue == null || !oldValue.equals(newValue)) {
            firePropertyChange(new PropertyChangeEvent(this.source, propertyName, oldValue, newValue));
        }
!!!6369922.java!!!	firePropertyChange(inout propertyName : String, in oldValue : int, in newValue : int) : void
        if (oldValue != newValue) {
            firePropertyChange(propertyName, Integer.valueOf(oldValue), Integer.valueOf(newValue));
        }
!!!6370050.java!!!	firePropertyChange(inout propertyName : String, inout oldValue : boolean, inout newValue : boolean) : void
        if (oldValue != newValue) {
            firePropertyChange(propertyName, Boolean.valueOf(oldValue), Boolean.valueOf(newValue));
        }
!!!6370178.java!!!	firePropertyChange(inout event : PropertyChangeEvent) : void
        Object oldValue = event.getOldValue();
        Object newValue = event.getNewValue();
        if (oldValue == null || newValue == null || !oldValue.equals(newValue)) {
            String name = event.getPropertyName();

            PropertyChangeListener[] common = this.map.get(null);
            PropertyChangeListener[] named = (name != null)
                        ? this.map.get(name)
                        : null;

            fire(common, event);
            fire(named, event);
        }
!!!6370306.java!!!	fire(inout listeners : PropertyChangeListener [[]], inout event : PropertyChangeEvent) : void
        if (listeners != null) {
            for (PropertyChangeListener listener : listeners) {
                listener.propertyChange(event);
            }
        }
!!!6370434.java!!!	fireIndexedPropertyChange(inout propertyName : String, in index : int, inout oldValue : Object, inout newValue : Object) : void
        if (oldValue == null || newValue == null || !oldValue.equals(newValue)) {
            firePropertyChange(new IndexedPropertyChangeEvent(source, propertyName, oldValue, newValue, index));
        }
!!!6370562.java!!!	fireIndexedPropertyChange(inout propertyName : String, in index : int, in oldValue : int, in newValue : int) : void
        if (oldValue != newValue) {
            fireIndexedPropertyChange(propertyName, index, Integer.valueOf(oldValue), Integer.valueOf(newValue));
        }
!!!6370690.java!!!	fireIndexedPropertyChange(inout propertyName : String, in index : int, inout oldValue : boolean, inout newValue : boolean) : void
        if (oldValue != newValue) {
            fireIndexedPropertyChange(propertyName, index, Boolean.valueOf(oldValue), Boolean.valueOf(newValue));
        }
!!!6370818.java!!!	hasListeners(inout propertyName : String) : boolean
        return this.map.hasListeners(propertyName);
!!!6370946.java!!!	writeObject(inout s : ObjectOutputStream) : void
        Hashtable<String, PropertyChangeSupport> children = null;
        PropertyChangeListener[] listeners = null;
        synchronized (this.map) {
            for (Entry<String, PropertyChangeListener[]> entry : this.map.getEntries()) {
                String property = entry.getKey();
                if (property == null) {
                    listeners = entry.getValue();
                } else {
                    if (children == null) {
                        children = new Hashtable<>();
                    }
                    PropertyChangeSupport pcs = new PropertyChangeSupport(this.source);
                    pcs.map.set(null, entry.getValue());
                    children.put(property, pcs);
                }
            }
        }
        ObjectOutputStream.PutField fields = s.putFields();
        fields.put("children", children);
        fields.put("source", this.source);
        fields.put("propertyChangeSupportSerializedDataVersion", 2);
        s.writeFields();

        if (listeners != null) {
            for (PropertyChangeListener l : listeners) {
                if (l instanceof Serializable) {
                    s.writeObject(l);
                }
            }
        }
        s.writeObject(null);
!!!6371074.java!!!	readObject(inout s : ObjectInputStream) : void
        this.map = new PropertyChangeListenerMap();

        ObjectInputStream.GetField fields = s.readFields();

        @SuppressWarnings("unchecked")
        Hashtable<String, PropertyChangeSupport> children = (Hashtable<String, PropertyChangeSupport>) fields.get("children", null);
        this.source = fields.get("source", null);
        fields.get("propertyChangeSupportSerializedDataVersion", 2);

        Object listenerOrNull;
        while (null != (listenerOrNull = s.readObject())) {
            this.map.add(null, (PropertyChangeListener)listenerOrNull);
        }
        if (children != null) {
            for (Entry<String, PropertyChangeSupport> entry : children.entrySet()) {
                for (PropertyChangeListener listener : entry.getValue().getPropertyChangeListeners()) {
                    this.map.add(entry.getKey(), listener);
                }
            }
        }
