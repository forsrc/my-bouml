class SimpleType
!!!9896706.java!!!	SimpleType(inout valueClass : Class)
        super(valueClass.getName(), valueClass.getName(), valueClass.getName(),
              false);
!!!9896834.java!!!	isValue(inout obj : Object) : boolean

        // if obj is null, return false
        //
        if (obj == null) {
            return false;
        }

        // Test if obj's class name is the same as for this instance
        //
        return this.getClassName().equals(obj.getClass().getName());
!!!9896962.java!!!	equals(inout obj : Object) : boolean

        /* If it weren't for readReplace(), we could replace this method
           with just:
           return (this == obj);
        */

        if (!(obj instanceof SimpleType<?>))
            return false;

        SimpleType<?> other = (SimpleType<?>) obj;

        // Test if other's className field is the same as for this instance
        //
        return this.getClassName().equals(other.getClassName());
!!!9897090.java!!!	hashCode() : int

        // Calculate the hash code value if it has not yet been done (ie 1st call to hashCode())
        //
        if (myHashCode == null) {
            myHashCode = Integer.valueOf(this.getClassName().hashCode());
        }

        // return always the same hash code for this instance (immutable)
        //
        return myHashCode.intValue();
!!!9897218.java!!!	toString() : String

        // Calculate the string representation if it has not yet been done (ie 1st call to toString())
        //
        if (myToString == null) {
            myToString = this.getClass().getName()+ "(name="+ getTypeName() +")";
        }

        // return always the same string representation for this instance (immutable)
        //
        return myToString;
!!!9897346.java!!!	readResolve() : Object
        final SimpleType<?> canonical = canonicalTypes.get(this);
        if (canonical == null) {
            // Should not happen
            throw new InvalidObjectException("Invalid SimpleType: " + this);
        }
        return canonical;
