class JDKBridge
!!!1457282.java!!!	getLocalCodebase() : String
        return localCodebase;
!!!1457410.java!!!	useCodebaseOnly() : boolean
        return useCodebaseOnly;
!!!1457538.java!!!	loadClass(inout className : String, inout remoteCodebase : String, inout loader : ClassLoader) : Class

        if (loader == null) {
            return loadClassM(className,remoteCodebase,useCodebaseOnly);
        } else {
            try {
                return loadClassM(className,remoteCodebase,useCodebaseOnly);
            } catch (ClassNotFoundException e) {
                return loader.loadClass(className);
            }
        }
!!!1457666.java!!!	loadClass(inout className : String, inout remoteCodebase : String) : Class
        return loadClass(className,remoteCodebase,null);
!!!1457794.java!!!	loadClass(inout className : String) : Class
        return loadClass(className,null,null);
!!!1457922.java!!!	main(inout args : String [[]]) : void
        System.out.println("1.2 VM");

        /*
                 // If on 1.2, use a policy with all permissions.
                 System.setSecurityManager (new javax.rmi.download.SecurityManager());
                 String targetClass = "[[Lrmic.Typedef;";
                 System.out.println("localCodebase =  "+localCodebase);
                 System.out.println("Trying to load "+targetClass);
                 try {
                 Class clz = loadClass(targetClass,null,localCodebase);
                 System.out.println("Loaded: "+clz);
                 } catch (ClassNotFoundException e) {
                 System.out.println("Caught "+e);
                 }
        */
!!!1458050.java!!!	setCodebaseProperties() : void
        String prop = (String)AccessController.doPrivileged(
            new GetPropertyAction(LOCAL_CODEBASE_KEY)
        );
        if (prop != null && prop.trim().length() > 0) {
            localCodebase = prop;
        }

        prop = (String)AccessController.doPrivileged(
            new GetPropertyAction(USE_CODEBASE_ONLY_KEY)
        );
        if (prop != null && prop.trim().length() > 0) {
            useCodebaseOnly = Boolean.valueOf(prop).booleanValue();
        }
!!!1458178.java!!!	setLocalCodebase(inout codebase : String) : void
        localCodebase = codebase;
!!!1458306.java!!!	loadClassM(inout className : String, inout remoteCodebase : String, inout useCodebaseOnly : boolean) : Class

        try {
            return JDKClassLoader.loadClass(null,className);
        } catch (ClassNotFoundException e) {}
        try {
            if (!useCodebaseOnly && remoteCodebase != null) {
                return RMIClassLoader.loadClass(remoteCodebase,
                                                className);
            } else {
                return RMIClassLoader.loadClass(className);
            }
        } catch (MalformedURLException e) {
            className = className + ": " + e.toString();
        }

        throw new ClassNotFoundException(className);
