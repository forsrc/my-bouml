class FileSystemProvider
!!!7869826.java!!!	checkPermission() : Void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null)
            sm.checkPermission(new RuntimePermission("fileSystemProvider"));
        return null;
!!!7870082.java!!!	FileSystemProvider()
        this(checkPermission());
!!!7870210.java!!!	loadInstalledProviders() : List
        List<FileSystemProvider> list = new ArrayList<FileSystemProvider>();

        ServiceLoader<FileSystemProvider> sl = ServiceLoader
            .load(FileSystemProvider.class, ClassLoader.getSystemClassLoader());

        // ServiceConfigurationError may be throw here
        for (FileSystemProvider provider: sl) {
            String scheme = provider.getScheme();

            // add to list if the provider is not "file" and isn't a duplicate
            if (!scheme.equalsIgnoreCase("file")) {
                boolean found = false;
                for (FileSystemProvider p: list) {
                    if (p.getScheme().equalsIgnoreCase(scheme)) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    list.add(provider);
                }
            }
        }
        return list;
!!!7870338.java!!!	installedProviders() : List
        if (installedProviders == null) {
            // ensure default provider is initialized
            FileSystemProvider defaultProvider = FileSystems.getDefault().provider();

            synchronized (lock) {
                if (installedProviders == null) {
                    if (loadingProviders) {
                        throw new Error("Circular loading of installed providers detected");
                    }
                    loadingProviders = true;

                    List<FileSystemProvider> list = AccessController
                        .doPrivileged(new PrivilegedAction<List<FileSystemProvider>>() {
                            @Override
                            public List<FileSystemProvider> run() {
                                return loadInstalledProviders();
                        }});

                    // insert the default provider at the start of the list
                    list.add(0, defaultProvider);

                    installedProviders = Collections.unmodifiableList(list);
                }
            }
        }
        return installedProviders;
!!!7870978.java!!!	newFileSystem(inout path : Path, inout env : Map) : FileSystem
        throw new UnsupportedOperationException();
!!!7871106.java!!!	newInputStream(inout path : Path, inout  : OpenOption...options) : InputStream
        if (options.length > 0) {
            for (OpenOption opt: options) {
                // All OpenOption values except for APPEND and WRITE are allowed
                if (opt == StandardOpenOption.APPEND ||
                    opt == StandardOpenOption.WRITE)
                    throw new UnsupportedOperationException("'" + opt + "' not allowed");
            }
        }
        return Channels.newInputStream(Files.newByteChannel(path, options));
!!!7871234.java!!!	newOutputStream(inout path : Path, inout  : OpenOption...options) : OutputStream
        int len = options.length;
        Set<OpenOption> opts = new HashSet<OpenOption>(len + 3);
        if (len == 0) {
            opts.add(StandardOpenOption.CREATE);
            opts.add(StandardOpenOption.TRUNCATE_EXISTING);
        } else {
            for (OpenOption opt: options) {
                if (opt == StandardOpenOption.READ)
                    throw new IllegalArgumentException("READ not allowed");
                opts.add(opt);
            }
        }
        opts.add(StandardOpenOption.WRITE);
        return Channels.newOutputStream(newByteChannel(path, opts));
!!!7871362.java!!!	newFileChannel(inout path : Path, inout options : Set, inout attrs : FileAttribute<?>...) : FileChannel
        throw new UnsupportedOperationException();
!!!7871490.java!!!	newAsynchronousFileChannel(inout path : Path, inout options : Set, inout executor : ExecutorService, inout attrs : FileAttribute<?>...) : AsynchronousFileChannel
        throw new UnsupportedOperationException();
!!!7872002.java!!!	createSymbolicLink(inout link : Path, inout target : Path, inout attrs : FileAttribute<?>...) : void
        throw new UnsupportedOperationException();
!!!7872130.java!!!	createLink(inout link : Path, inout existing : Path) : void
        throw new UnsupportedOperationException();
!!!7872386.java!!!	deleteIfExists(inout path : Path) : boolean
        try {
            delete(path);
            return true;
        } catch (NoSuchFileException ignore) {
            return false;
        }
!!!7872514.java!!!	readSymbolicLink(inout link : Path) : Path
        throw new UnsupportedOperationException();
