class Util
!!!10189314.java!!!	readAllowCustomValueHandlerProperty() : boolean
       return AccessController
        .doPrivileged(new PrivilegedAction<Boolean>() {
            @Override
            public Boolean run() {
                return Boolean.getBoolean(ALLOW_CREATEVALUEHANDLER_PROP);
            }
        });
!!!10189570.java!!!	mapSystemException(inout ex : SystemException) : RemoteException

        if (utilDelegate != null) {
            return utilDelegate.mapSystemException(ex);
        }
        return null;
!!!10189698.java!!!	writeAny(inout out : OutputStream, inout obj : Object) : void

        if (utilDelegate != null) {
            utilDelegate.writeAny(out, obj);
        }
!!!10189826.java!!!	readAny(inout in : InputStream) : Object

        if (utilDelegate != null) {
            return utilDelegate.readAny(in);
        }
        return null;
!!!10189954.java!!!	writeRemoteObject(inout out : OutputStream, inout obj : Object) : void

        if (utilDelegate != null) {
            utilDelegate.writeRemoteObject(out, obj);
        }

!!!10190082.java!!!	writeAbstractObject(inout out : OutputStream, inout obj : Object) : void

        if (utilDelegate != null) {
            utilDelegate.writeAbstractObject(out, obj);
        }
!!!10190210.java!!!	registerTarget(inout tie : Tie, inout target : Remote) : void

        if (utilDelegate != null) {
            utilDelegate.registerTarget(tie, target);
        }

!!!10190338.java!!!	unexportObject(inout target : Remote) : void

        if (utilDelegate != null) {
            utilDelegate.unexportObject(target);
        }

!!!10190466.java!!!	getTie(inout target : Remote) : Tie

        if (utilDelegate != null) {
            return utilDelegate.getTie(target);
        }
        return null;
!!!10190594.java!!!	createValueHandler() : ValueHandler

        isCustomSerializationPermitted();

        if (utilDelegate != null) {
            return utilDelegate.createValueHandler();
        }
        return null;
!!!10190722.java!!!	getCodebase(inout clz : Class) : String
        if (utilDelegate != null) {
            return utilDelegate.getCodebase(clz);
        }
        return null;
!!!10190850.java!!!	loadClass(inout className : String, inout remoteCodebase : String, inout loader : ClassLoader) : Class
        if (utilDelegate != null) {
            return utilDelegate.loadClass(className,remoteCodebase,loader);
        }
        return null ;
!!!10190978.java!!!	isLocal(inout stub : Stub) : boolean

        if (utilDelegate != null) {
            return utilDelegate.isLocal(stub);
        }

        return false;
!!!10191106.java!!!	wrapException(inout orig : Throwable) : RemoteException

        if (utilDelegate != null) {
            return utilDelegate.wrapException(orig);
        }

        return null;
!!!10191234.java!!!	copyObjects(inout obj : Object [[]], inout orb : ORB) : Object

        if (utilDelegate != null) {
            return utilDelegate.copyObjects(obj, orb);
        }

        return null;
!!!10191362.java!!!	copyObject(inout obj : Object, inout orb : ORB) : Object

        if (utilDelegate != null) {
            return utilDelegate.copyObject(obj, orb);
        }
        return null;
!!!10191490.java!!!	createDelegate(inout classKey : String) : Object

        String className = (String)
            AccessController.doPrivileged(new GetPropertyAction(classKey));
        if (className == null) {
            Properties props = getORBPropertiesFile();
            if (props != null) {
                className = props.getProperty(classKey);
            }
        }

        if (className == null) {
            return new com.sun.corba.se.impl.javax.rmi.CORBA.Util();
        }

        try {
            return loadDelegateClass(className).newInstance();
        } catch (ClassNotFoundException ex) {
            INITIALIZE exc = new INITIALIZE( "Cannot instantiate " + className);
            exc.initCause( ex ) ;
            throw exc ;
        } catch (Exception ex) {
            INITIALIZE exc = new INITIALIZE( "Error while instantiating" + className);
            exc.initCause( ex ) ;
            throw exc ;
        }
!!!10191618.java!!!	loadDelegateClass(inout className : String) : Class
        try {
            ClassLoader loader = Thread.currentThread().getContextClassLoader();
            return Class.forName(className, false, loader);
        } catch (ClassNotFoundException e) {
            // ignore, then try RMIClassLoader
        }

        try {
            return RMIClassLoader.loadClass(className);
        } catch (MalformedURLException e) {
            String msg = "Could not load " + className + ": " + e.toString();
            ClassNotFoundException exc = new ClassNotFoundException( msg ) ;
            throw exc ;
        }
!!!10191746.java!!!	getORBPropertiesFile() : Properties
        return (Properties) AccessController.doPrivileged(
            new GetORBPropertiesFileAction());
!!!10191874.java!!!	isCustomSerializationPermitted() : void
        SecurityManager sm = System.getSecurityManager();
        if (!allowCustomValueHandler) {
            if ( sm != null) {
                // check that a serialization permission has been
                // set to allow the loading of the Util delegate
                // which provides access to custom ValueHandler
                sm.checkPermission(new SerializablePermission(
                        "enableCustomValueHandler"));
            }
        }
