format 222
"spi" // jdk1.8::javax::xml::ws::spi
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/xml/ws/spi/"
  java_package "javax.xml.ws.spi"
  package_ref 189826 // http

  classview 182914 "spi"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1436290 "ServiceDelegate"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Service delegates are used internally by <code>Service</code> objects
to allow pluggability of JAX-WS implementations.
<p>
Every <code>Service</code> object has its own delegate, created using
the {@link javax.xml.ws.spi.Provider#createServiceDelegate} method. A <code>Service</code>
object delegates all of its instance methods to its delegate.

@see javax.xml.ws.Service
@see javax.xml.ws.spi.Provider

@since JAX-WS 2.0
"
      operation 12156034 "ServiceDelegate"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12156162 "getPort"
	abstract public explicit_return_type "T"
	nparams 2
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "serviceEndpointInterface" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>getPort</code> method returns a proxy. A service client
uses this proxy to invoke operations on the target
service endpoint. The <code>serviceEndpointInterface</code>
specifies the service endpoint interface that is supported by
the created dynamic proxy instance.

@param portName  Qualified name of the service endpoint in
                 the WSDL service description
@param serviceEndpointInterface Service endpoint interface
                 supported by the dynamic proxy
@return Object Proxy instance that
               supports the specified service endpoint
               interface
@throws WebServiceException This exception is thrown in the
                 following cases:
                 <UL>
                 <LI>If there is an error in creation of
                     the proxy
                 <LI>If there is any missing WSDL metadata
                     as required by this method
                 <LI>If an illegal
                     <code>serviceEndpointInterface</code>
                     or <code>portName</code> is specified
                 </UL>
@see java.lang.reflect.Proxy
@see java.lang.reflect.InvocationHandler
"
      end

      operation 12156290 "getPort"
	abstract public explicit_return_type "T"
	nparams 3
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "serviceEndpointInterface" type class_ref 130818 // Class
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>getPort</code> method returns a proxy. A service client
uses this proxy to invoke operations on the target
service endpoint. The <code>serviceEndpointInterface</code>
specifies the service endpoint interface that is supported by
the created dynamic proxy instance.

@param portName  Qualified name of the service endpoint in
                 the WSDL service description
@param serviceEndpointInterface Service endpoint interface
                 supported by the dynamic proxy or instance
@param features  A list of WebServiceFeatures to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.
@return Object Proxy instance that
               supports the specified service endpoint
               interface
@throws WebServiceException This exception is thrown in the
                 following cases:
                 <UL>
                 <LI>If there is an error in creation of
                     the proxy
                 <LI>If there is any missing WSDL metadata
                     as required by this method
                 <LI>If an illegal
                     <code>serviceEndpointInterface</code>
                     or <code>portName</code> is specified
                 <LI>If a feature is enabled that is not compatible
                     with this port or is unsupported.
                 </UL>
@see java.lang.reflect.Proxy
@see java.lang.reflect.InvocationHandler
@see WebServiceFeature

@since JAX-WS 2.1
"
      end

      operation 12156418 "getPort"
	abstract public explicit_return_type "T"
	nparams 3
	  param inout name "endpointReference" type class_ref 1434114 // EndpointReference
	  param inout name "serviceEndpointInterface" type class_ref 130818 // Class
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>getPort</code> method returns a proxy.
The parameter <code>endpointReference</code> specifies the
endpoint that will be invoked by the returned proxy.  If there
are any reference parameters in the
<code>endpointReference</code>, then those reference
parameters MUST appear as SOAP headers, indicating them to be
reference parameters, on all messages sent to the endpoint.
The <code>endpointReference's</code> address MUST be used
for invocations on the endpoint.
The parameter <code>serviceEndpointInterface</code> specifies
the service endpoint interface that is supported by the
returned proxy.
In the implementation of this method, the JAX-WS
runtime system takes the responsibility of selecting a protocol
binding (and a port) and configuring the proxy accordingly from
the WSDL associated with this <code>Service</code> instance or
from the metadata from the <code>endpointReference</code>.
If this <code>Service</code> instance has a WSDL and
the <code>endpointReference</code> metadata
also has a WSDL, then the WSDL from this instance MUST be used.
If this <code>Service</code> instance does not have a WSDL and
the <code>endpointReference</code> does have a WSDL, then the
WSDL from the <code>endpointReference</code> MAY be used.
The returned proxy should not be reconfigured by the client.
If this <code>Service</code> instance has a known proxy
port that matches the information contained in
the WSDL,
then that proxy is returned, otherwise a WebServiceException
is thrown.
<p>
Calling this method has the same behavior as the following
<pre>
<code>port = service.getPort(portName, serviceEndpointInterface);</code>
</pre>
where the <code>portName</code> is retrieved from the
metadata of the <code>endpointReference</code> or from the
<code>serviceEndpointInterface</code> and the WSDL
associated with this <code>Service</code> instance.

@param endpointReference  The <code>EndpointReference</code>
for the target service endpoint that will be invoked by the
returned proxy.
@param serviceEndpointInterface Service endpoint interface.
@param features  A list of <code>WebServiceFeatures</code> to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.
@return Object Proxy instance that supports the
                 specified service endpoint interface.
@throws WebServiceException
                 <UL>
                 <LI>If there is an error during creation
                     of the proxy.
                 <LI>If there is any missing WSDL metadata
                     as required by this method.
                 <LI>If the <code>endpointReference</code> metadata does
                     not match the <code>serviceName</code> of this
                     <code>Service</code> instance.
                 <LI>If a <code>portName</code> cannot be extracted
                     from the WSDL or <code>endpointReference</code> metadata.
                 <LI>If an invalid
                     <code>endpointReference</code>
                     is specified.
                 <LI>If an invalid
                     <code>serviceEndpointInterface</code>
                     is specified.
                 <LI>If a feature is enabled that is not compatible
                     with this port or is unsupported.
                 </UL>

@since JAX-WS 2.1
"
      end

      operation 12156546 "getPort"
	abstract public explicit_return_type "T"
	nparams 1
	  param inout name "serviceEndpointInterface" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>getPort</code> method returns a proxy. The parameter
<code>serviceEndpointInterface</code> specifies the service
endpoint interface that is supported by the returned proxy.
In the implementation of this method, the JAX-WS
runtime system takes the responsibility of selecting a protocol
binding (and a port) and configuring the proxy accordingly.
The returned proxy should not be reconfigured by the client.

@param serviceEndpointInterface Service endpoint interface
@return Object instance that supports the
                 specified service endpoint interface
@throws WebServiceException
                 <UL>
                 <LI>If there is an error during creation
                     of the proxy
                 <LI>If there is any missing WSDL metadata
                     as required by this method
                 <LI>If an illegal
                     <code>serviceEndpointInterface</code>
                     is specified
                 </UL>
"
      end

      operation 12156674 "getPort"
	abstract public explicit_return_type "T"
	nparams 2
	  param inout name "serviceEndpointInterface" type class_ref 130818 // Class
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>getPort</code> method returns a proxy. The parameter
<code>serviceEndpointInterface</code> specifies the service
endpoint interface that is supported by the returned proxy.
In the implementation of this method, the JAX-WS
runtime system takes the responsibility of selecting a protocol
binding (and a port) and configuring the proxy accordingly.
The returned proxy should not be reconfigured by the client.

@param serviceEndpointInterface Service endpoint interface
@param features  An array of <code>WebServiceFeatures</code> to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.
@return Object instance that supports the
                 specified service endpoint interface
@throws WebServiceException
                 <UL>
                 <LI>If there is an error during creation
                     of the proxy
                 <LI>If there is any missing WSDL metadata
                     as required by this method
                 <LI>If an illegal
                     <code>serviceEndpointInterface</code>
                     is specified
                 <LI>If a feature is enabled that is not compatible
                     with this port or is unsupported.
                 </UL>

@see WebServiceFeature

@since JAX-WS 2.1
"
      end

      operation 12156802 "addPort"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "bindingId" type class_ref 128130 // String
	  param inout name "endpointAddress" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new port for the service. Ports created in this way contain
no WSDL port type information and can only be used for creating
<code>Dispatch</code>instances.

@param portName  Qualified name for the target service endpoint
@param bindingId A URI identifier of a binding.
@param endpointAddress Address of the target service endpoint as a URI
@throws WebServiceException If any error in the creation of
the port

@see javax.xml.ws.soap.SOAPBinding#SOAP11HTTP_BINDING
@see javax.xml.ws.soap.SOAPBinding#SOAP12HTTP_BINDING
@see javax.xml.ws.http.HTTPBinding#HTTP_BINDING
"
      end

      operation 12156930 "createDispatch"
	abstract public return_type class_ref 1434370 // Dispatch
	nparams 3
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "mode" type class_ref 1436418 // Mode
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Dispatch</code> instance for use with objects of
the user's choosing.

@param portName  Qualified name for the target service endpoint
@param type The class of object used for messages or message
payloads. Implementations are required to support
<code>javax.xml.transform.Source</code> and <code>javax.xml.soap.SOAPMessage</code>.
@param mode Controls whether the created dispatch instance is message
or payload oriented, i.e. whether the user will work with complete
protocol messages or message payloads. E.g. when using the SOAP
protocol, this parameter controls whether the user will work with
SOAP messages or the contents of a SOAP body. Mode MUST be <code>MESSAGE</code>
when type is <code>SOAPMessage</code>.

@return Dispatch instance
@throws WebServiceException If any error in the creation of
                 the <code>Dispatch</code> object
@see javax.xml.transform.Source
@see javax.xml.soap.SOAPMessage
"
      end

      operation 12157058 "createDispatch"
	abstract public return_type class_ref 1434370 // Dispatch
	nparams 4
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "mode" type class_ref 1436418 // Mode
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Dispatch</code> instance for use with objects of
the user's choosing.

@param portName  Qualified name for the target service endpoint
@param type The class of object used for messages or message
payloads. Implementations are required to support
<code>javax.xml.transform.Source</code> and <code>javax.xml.soap.SOAPMessage</code>.
@param mode Controls whether the created dispatch instance is message
or payload oriented, i.e. whether the user will work with complete
protocol messages or message payloads. E.g. when using the SOAP
protocol, this parameter controls whether the user will work with
SOAP messages or the contents of a SOAP body. Mode MUST be <code>MESSAGE</code>
when type is <code>SOAPMessage</code>.
@param features  A list of <code>WebServiceFeatures</code> to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.

@return Dispatch instance
@throws WebServiceException If any error in the creation of
                 the <code>Dispatch</code> object or if a
                 feature is enabled that is not compatible with
                 this port or is unsupported.

@see javax.xml.transform.Source
@see javax.xml.soap.SOAPMessage
@see WebServiceFeature

@since JAX-WS 2.1
"
      end

      operation 12157186 "createDispatch"
	abstract public return_type class_ref 1434370 // Dispatch
	nparams 4
	  param inout name "endpointReference" type class_ref 1434114 // EndpointReference
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "mode" type class_ref 1436418 // Mode
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Dispatch</code> instance for use with objects of
the user's choosing. If there
are any reference parameters in the
<code>endpointReference</code>, then those reference
parameters MUST appear as SOAP headers, indicating them to be
reference parameters, on all messages sent to the endpoint.
The <code>endpointReference's</code> address MUST be used
for invocations on the endpoint.
In the implementation of this method, the JAX-WS
runtime system takes the responsibility of selecting a protocol
binding (and a port) and configuring the dispatch accordingly from
the WSDL associated with this <code>Service</code> instance or
from the metadata from the <code>endpointReference</code>.
If this <code>Service</code> instance has a WSDL and
the <code>endpointReference</code>
also has a WSDL in its metadata, then the WSDL from this instance MUST be used.
If this <code>Service</code> instance does not have a WSDL and
the <code>endpointReference</code> does have a WSDL, then the
WSDL from the <code>endpointReference</code> MAY be used.
An implementation MUST be able to retrieve the <code>portName</code> from the
<code>endpointReference</code> metadata.
<p>
This method behaves the same as calling
<pre>
<code>dispatch = service.createDispatch(portName, type, mode, features);</code>
</pre>
where the <code>portName</code> is retrieved from the
WSDL or <code>EndpointReference</code> metadata.

@param endpointReference  The <code>EndpointReference</code>
for the target service endpoint that will be invoked by the
returned <code>Dispatch</code> object.
@param type The class of object used to messages or message
payloads. Implementations are required to support
<code>javax.xml.transform.Source</code> and <code>javax.xml.soap.SOAPMessage</code>.
@param mode Controls whether the created dispatch instance is message
or payload oriented, i.e. whether the user will work with complete
protocol messages or message payloads. E.g. when using the SOAP
protocol, this parameter controls whether the user will work with
SOAP messages or the contents of a SOAP body. Mode MUST be <code>MESSAGE</code>
when type is <code>SOAPMessage</code>.
@param features  An array of <code>WebServiceFeatures</code> to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.

@return Dispatch instance
@throws WebServiceException
                 <UL>
                   <LI>If there is any missing WSDL metadata
                     as required by this method.
                   <li>If the <code>endpointReference</code> metadata does
                     not match the <code>serviceName</code> or <code>portName</code>
                     of a WSDL associated
                     with this <code>Service</code> instance.
                   <li>If the <code>portName</code> cannot be determined
                   from the <code>EndpointReference</code> metadata.
                   <li>If any error in the creation of
                    the <code>Dispatch</code> object.
                   <li>If a feature is enabled that is not
                   compatible with this port or is unsupported.
                 </UL>

@see javax.xml.transform.Source
@see javax.xml.soap.SOAPMessage
@see WebServiceFeature

@since JAX-WS 2.1
"
      end

      operation 12157314 "createDispatch"
	abstract public return_type class_ref 1434370 // Dispatch
	nparams 3
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "context" type class_ref 1405570 // JAXBContext
	  param inout name "mode" type class_ref 1436418 // Mode
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Dispatch</code> instance for use with JAXB
generated objects.

@param portName  Qualified name for the target service endpoint
@param context The JAXB context used to marshall and unmarshall
messages or message payloads.
@param mode Controls whether the created dispatch instance is message
or payload oriented, i.e. whether the user will work with complete
protocol messages or message payloads. E.g. when using the SOAP
protocol, this parameter controls whether the user will work with
SOAP messages or the contents of a SOAP body.

@return Dispatch instance
@throws WebServiceException If any error in the creation of
                 the <code>Dispatch</code> object

@see javax.xml.bind.JAXBContext
"
      end

      operation 12157442 "createDispatch"
	abstract public return_type class_ref 1434370 // Dispatch
	nparams 4
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "context" type class_ref 1405570 // JAXBContext
	  param inout name "mode" type class_ref 1436418 // Mode
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Dispatch</code> instance for use with JAXB
generated objects.

@param portName  Qualified name for the target service endpoint
@param context The JAXB context used to marshall and unmarshall
messages or message payloads.
@param mode Controls whether the created dispatch instance is message
or payload oriented, i.e. whether the user will work with complete
protocol messages or message payloads. E.g. when using the SOAP
protocol, this parameter controls whether the user will work with
SOAP messages or the contents of a SOAP body.
@param features  A list of <code>WebServiceFeatures</code> to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.

@return Dispatch instance
@throws WebServiceException If any error in the creation of
                 the <code>Dispatch</code> object or if a
                 feature is enabled that is not compatible with
                 this port or is unsupported.

@see javax.xml.bind.JAXBContext
@see WebServiceFeature

@since JAX-WS 2.1
"
      end

      operation 12157570 "createDispatch"
	abstract public return_type class_ref 1434370 // Dispatch
	nparams 4
	  param inout name "endpointReference" type class_ref 1434114 // EndpointReference
	  param inout name "context" type class_ref 1405570 // JAXBContext
	  param inout name "mode" type class_ref 1436418 // Mode
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Dispatch</code> instance for use with JAXB
generated objects. If there
are any reference parameters in the
<code>endpointReference</code>, then those reference
parameters MUST appear as SOAP headers, indicating them to be
reference parameters, on all messages sent to the endpoint.
The <code>endpointReference's</code> address MUST be used
for invocations on the endpoint.
In the implementation of this method, the JAX-WS
runtime system takes the responsibility of selecting a protocol
binding (and a port) and configuring the dispatch accordingly from
the WSDL associated with this <code>Service</code> instance or
from the metadata from the <code>endpointReference</code>.
If this <code>Service</code> instance has a WSDL and
the <code>endpointReference</code>
also has a WSDL in its metadata, then the WSDL from this instance
MUST be used.
If this <code>Service</code> instance does not have a WSDL and
the <code>endpointReference</code> does have a WSDL, then the
WSDL from the <code>endpointReference</code> MAY be used.
An implementation MUST be able to retrieve the <code>portName</code> from the
<code>endpointReference</code> metadata.
<p>
This method behavies the same as calling
<pre>
<code>dispatch = service.createDispatch(portName, context, mode, features);</code>
</pre>
where the <code>portName</code> is retrieved from the
WSDL or <code>endpointReference</code> metadata.

@param endpointReference  The <code>EndpointReference</code>
for the target service endpoint that will be invoked by the
returned <code>Dispatch</code> object.
@param context The JAXB context used to marshall and unmarshall
messages or message payloads.
@param mode Controls whether the created dispatch instance is message
or payload oriented, i.e. whether the user will work with complete
protocol messages or message payloads. E.g. when using the SOAP
protocol, this parameter controls whether the user will work with
SOAP messages or the contents of a SOAP body.
@param features  An array of <code>WebServiceFeatures</code> to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.

@return Dispatch instance
@throws WebServiceException
                 <UL>
                   <li>If there is any missing WSDL metadata
                     as required by this method.
                   <li>If the <code>endpointReference</code> metadata does
                   not match the <code>serviceName</code> or <code>portName</code>
                   of a WSDL associated
                   with this <code>Service</code> instance.
                   <li>If the <code>portName</code> cannot be determined
                   from the <code>EndpointReference</code> metadata.
                   <li>If any error in the creation of
                   the <code>Dispatch</code> object.
                   <li>if a feature is enabled that is not
                   compatible with this port or is unsupported.
                 </UL>

@see javax.xml.bind.JAXBContext
@see WebServiceFeature

@since JAX-WS 2.1
"
      end

      operation 12157698 "getServiceName"
	abstract public return_type class_ref 673666 // QName
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of this service.
@return Qualified name of this service
"
      end

      operation 12157826 "getPorts"
	abstract public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<javax.xml.namespace.QName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> for the list of
<code>QName</code>s of service endpoints grouped by this
service

@return Returns <code>java.util.Iterator</code> with elements
        of type <code>javax.xml.namespace.QName</code>
@throws WebServiceException If this Service class does not
        have access to the required WSDL metadata
"
      end

      operation 12157954 "getWSDLDocumentLocation"
	abstract public return_type class_ref 243458 // URL
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the location of the WSDL document for this Service.

@return URL for the location of the WSDL document for
        this service
"
      end

      operation 12158082 "getHandlerResolver"
	abstract public return_type class_ref 1436546 // HandlerResolver
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the configured handler resolver.

@return HandlerResolver The <code>HandlerResolver</code> being
        used by this <code>Service</code> instance, or <code>null</code>
        if there isn't one.
"
      end

      operation 12158210 "setHandlerResolver"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "handlerResolver" type class_ref 1436546 // HandlerResolver
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>HandlerResolver</code> for this <code>Service</code>
instance.
<p>
The handler resolver, if present, will be called once for each
proxy or dispatch instance that is created, and the handler chain
returned by the resolver will be set on the instance.

@param handlerResolver The <code>HandlerResolver</code> to use
       for all subsequently created proxy/dispatch objects.

@see javax.xml.ws.handler.HandlerResolver
"
      end

      operation 12158338 "getExecutor"
	abstract public return_type class_ref 503426 // Executor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the executor for this <code>Service</code>instance.

The executor is used for all asynchronous invocations that
require callbacks.

@return The <code>java.util.concurrent.Executor</code> to be
        used to invoke a callback.

@see java.util.concurrent.Executor
"
      end

      operation 12158466 "setExecutor"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "executor" type class_ref 503426 // Executor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the executor for this <code>Service</code> instance.

The executor is used for all asynchronous invocations that
require callbacks.

@param executor The <code>java.util.concurrent.Executor</code>
       to be used to invoke a callback.

@throws SecurityException If the instance does not support
        setting an executor for security reasons (e.g. the
        necessary permissions are missing).

@see java.util.concurrent.Executor
"
      end
    end

    class 1439874 "FactoryFinder"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 12153218 "newInstance"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of the specified class using the specified
<code>ClassLoader</code> object.

@exception WebServiceException if the given class could not be found
           or could not be instantiated
"
      end

      operation 12153346 "find"
	class_operation package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "fallbackClassName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the implementation <code>Class</code> object for the given
factory name, or if that fails, finds the <code>Class</code> object
for the given fallback class name. The arguments supplied MUST be
used in order. If using the first argument is successful, the second
one will not be used.
<P>
This method is package private so that this code can be shared.

@return the <code>Class</code> object of the specified message factory;
        may not be <code>null</code>

@param factoryId             the name of the factory to find, which is
                             a system property
@param fallbackClassName     the implementation class name, which is
                             to be used only if nothing else
                             is found; <code>null</code> to indicate that
                             there is no fallback class name
@exception WebServiceException if there is an error
"
      end

      operation 12153474 "close"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "closeable" type class_ref 146562 // Closeable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12153602 "safeLoadClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the class, provided that the calling thread has an access to the class being loaded.
"
      end

      classrelation 4812546 // OSGI_SERVICE_LOADER_CLASS_NAME (<unidirectional association>)
	relation 4812546 --->
	  a role_name "OSGI_SERVICE_LOADER_CLASS_NAME" init_value " \"com.sun.org.glassfish.hk2.osgiresourcelocator.ServiceLoader\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4812546 // OSGI_SERVICE_LOADER_CLASS_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12153730 "isOsgi"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12153858 "lookupUsingOSGiServiceLoader"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "factoryId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1440002 "Invoker"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Invoker hides the detail of calling into application endpoint
implementation. Container hands over an implementation of Invoker
to JAX-WS runtime, and jax-ws runtime calls {@link #invoke}
for a web service invocation. Finally, Invoker does the actual
invocation of web service on endpoint instance.

Container also injects the provided <code>WebServiceContext</code> and takes
care of invoking <code>javax.annotation.PostConstruct</code> methods,
if present, on the endpoint implementation.

@see Provider#createEndpoint(String, Class, Invoker, WebServiceFeature...)
@author Jitendra Kotamraju
@since JAX-WS 2.2
"
      operation 12153986 "inject"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "webServiceContext" type class_ref 1437186 // WebServiceContext
	nexceptions 3
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 193410 // InvocationTargetException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "JAX-WS runtimes calls this method to ask container to inject
WebServiceContext on the endpoint instance. The
<code>WebServiceContext</code> object uses thread-local information
to return the correct information during the actual endpoint invocation
regardless of how many threads are concurrently being used to serve
requests.

@param webServiceContext a holder for MessageContext
@throws IllegalAccessException if the injection done
        by reflection API throws this exception
@throws IllegalArgumentException if the injection done
        by reflection API throws this exception
@throws InvocationTargetException if the injection done
        by reflection API throws this exception
"
      end

      operation 12154114 "invoke"
	abstract public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "m" type class_ref 137858 // Method
	  param inout name "" explicit_type "Object...args"
	nexceptions 3
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 193410 // InvocationTargetException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "JAX-WS runtime calls this method to do the actual web service
invocation on endpoint instance. The injected
<code>WebServiceContext.getMessageContext()</code> gives the correct
information for this invocation.

@param m Method to be invoked on the service
@param args Method arguments
@return return value of the method
@throws IllegalAccessException if the invocation done
        by reflection API throws this exception
@throws IllegalArgumentException if the invocation done
        by reflection API throws this exception
@throws InvocationTargetException if the invocation done
        by reflection API throws this exception

@see Method#invoke
"
      end
    end

    class 1440130 "Provider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Service provider for <code>ServiceDelegate</code> and
<code>Endpoint</code> objects.
<p>

@since JAX-WS 2.0
"
      classrelation 4812674 // JAXWSPROVIDER_PROPERTY (<unidirectional association>)
	relation 4812674 --->
	  a role_name "JAXWSPROVIDER_PROPERTY" init_value " \"javax.xml.ws.spi.Provider\"" class_relation const_relation public
	    comment "
A constant representing the property used to lookup the
name of a <code>Provider</code> implementation
class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4812674 // JAXWSPROVIDER_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4812802 // DEFAULT_JAXWSPROVIDER (<unidirectional association>)
	relation 4812802 --->
	  a role_name "DEFAULT_JAXWSPROVIDER" init_value " \"com.sun\"+\".xml.internal.ws.spi.ProviderImpl\"" class_relation const_relation package
	    comment "
A constant representing the name of the default
<code>Provider</code> implementation class.

 Using two strings so that package renaming doesn't change it
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4812802 // DEFAULT_JAXWSPROVIDER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4812930 // loadMethod (<unidirectional association>)
	relation 4812930 --->
	  a role_name "loadMethod" class_relation const_relation private
	    comment "
Take advantage of Java SE 6's java.util.ServiceLoader API.
Using reflection so that there is no compile-time dependency on SE 6.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4812930 // loadMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 4813058 // iteratorMethod (<unidirectional association>)
	relation 4813058 --->
	  a role_name "iteratorMethod" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4813058 // iteratorMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      extra_member 189314 "initialization"
	
	cpp "" ""
	java "  static {
        Method tLoadMethod = null;
        Method tIteratorMethod = null;
        try {
            Class<?> clazz = Class.forName(\"java.util.ServiceLoader\");
            tLoadMethod = clazz.getMethod(\"load\", Class.class);
            tIteratorMethod = clazz.getMethod(\"iterator\");
        } catch(ClassNotFoundException ce) {
            // Running on Java SE 5
        } catch(NoSuchMethodException ne) {
            // Shouldn't happen
        }
        loadMethod = tLoadMethod;
        iteratorMethod = tIteratorMethod;
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 12154242 "Provider"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of Provider
"
      end

      operation 12154370 "provider"
	class_operation public return_type class_ref 1440130 // Provider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Creates a new provider object.
<p>
The algorithm used to locate the provider subclass to use consists
of the following steps:
<p>
<ul>
<li>
  If a resource with the name of
  <code>META-INF/services/javax.xml.ws.spi.Provider</code>
  exists, then its first line, if present, is used as the UTF-8 encoded
  name of the implementation class.
</li>
<li>
  If the $java.home/lib/jaxws.properties file exists and it is readable by
  the <code>java.util.Properties.load(InputStream)</code> method and it contains
  an entry whose key is <code>javax.xml.ws.spi.Provider</code>, then the value of
  that entry is used as the name of the implementation class.
</li>
<li>
  If a system property with the name <code>javax.xml.ws.spi.Provider</code>
  is defined, then its value is used as the name of the implementation class.
</li>
<li>
  Finally, a default implementation class name is used.
</li>
</ul>

"
      end

      operation 12154498 "getProviderUsingServiceLoader"
	class_operation private return_type class_ref 1440130 // Provider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12154626 "createServiceDelegate"
	abstract public return_type class_ref 1436290 // ServiceDelegate
	nparams 3
	  param inout name "wsdlDocumentLocation" type class_ref 243458 // URL
	  param inout name "serviceName" type class_ref 673666 // QName
	  param inout name "serviceClass" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? extends Service> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a service delegate object.
<p>
@param wsdlDocumentLocation A URL pointing to the WSDL document
       for the service, or <code>null</code> if there isn't one.
@param serviceName The qualified name of the service.
@param serviceClass The service class, which MUST be either
       <code>javax.xml.ws.Service</code> or a subclass thereof.
@return The newly created service delegate.
"
      end

      operation 12154754 "createServiceDelegate"
	public return_type class_ref 1436290 // ServiceDelegate
	nparams 4
	  param inout name "wsdlDocumentLocation" type class_ref 243458 // URL
	  param inout name "serviceName" type class_ref 673666 // QName
	  param inout name "serviceClass" type class_ref 130818 // Class
	  param inout name "features" type class_ref 1434626 // WebServiceFeature
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? extends Service> ${p2}, ${t3} ... ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a service delegate object.
<p>
@param wsdlDocumentLocation A URL pointing to the WSDL document
       for the service, or <code>null</code> if there isn't one.
@param serviceName The qualified name of the service.
@param serviceClass The service class, which MUST be either
       <code>javax.xml.ws.Service</code> or a subclass thereof.
@param features Web Service features that must be configured on
       the service. If the provider doesn't understand a feature,
       it must throw a WebServiceException.
@return The newly created service delegate.

@since JAX-WS 2.2
"
      end

      operation 12154882 "createEndpoint"
	abstract public return_type class_ref 1434498 // Endpoint
	nparams 2
	  param inout name "bindingId" type class_ref 128130 // String
	  param inout name "implementor" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Creates an endpoint object with the provided binding and implementation
object.

@param bindingId A URI specifying the desired binding (e.g. SOAP/HTTP)
@param implementor A service implementation object to which
       incoming requests will be dispatched. The corresponding
       class MUST be annotated with all the necessary Web service
       annotations.
@return The newly created endpoint.
"
      end

      operation 12155010 "createAndPublishEndpoint"
	abstract public return_type class_ref 1434498 // Endpoint
	nparams 2
	  param inout name "address" type class_ref 128130 // String
	  param inout name "implementor" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and publishes an endpoint object with the specified
address and implementation object.

@param address A URI specifying the address and transport/protocol
       to use. A http: URI MUST result in the SOAP 1.1/HTTP
       binding being used. Implementations may support other
       URI schemes.
@param implementor A service implementation object to which
       incoming requests will be dispatched. The corresponding
       class MUST be annotated with all the necessary Web service
       annotations.
@return The newly created endpoint.
"
      end

      operation 12155138 "readEndpointReference"
	abstract public return_type class_ref 1434114 // EndpointReference
	nparams 1
	  param inout name "eprInfoset" type class_ref 627202 // Source
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "read an EndpointReference from the infoset contained in
<code>eprInfoset</code>.

@param eprInfoset infoset for EndpointReference

@return the <code>EndpointReference</code> unmarshalled from
<code>eprInfoset</code>.  This method never returns <code>null</code>.

@throws WebServiceException If there is an error creating the
<code>EndpointReference</code> from the specified <code>eprInfoset</code>.

@throws NullPointerException If the <code>null</code>
<code>eprInfoset</code> value is given.

@since JAX-WS 2.1
"
      end

      operation 12155266 "getPort"
	abstract public explicit_return_type "T"
	nparams 3
	  param inout name "endpointReference" type class_ref 1434114 // EndpointReference
	  param inout name "serviceEndpointInterface" type class_ref 130818 // Class
	  param inout name "" explicit_type "WebServiceFeature...features"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The getPort method returns a proxy.  If there
are any reference parameters in the
<code>endpointReference</code>, then those reference
parameters MUST appear as SOAP headers, indicating them to be
reference parameters, on all messages sent to the endpoint.
The parameter  <code>serviceEndpointInterface</code> specifies
the service endpoint interface that is supported by the
returned proxy.
The parameter <code>endpointReference</code> specifies the
endpoint that will be invoked by the returned proxy.
In the implementation of this method, the JAX-WS
runtime system takes the responsibility of selecting a protocol
binding (and a port) and configuring the proxy accordingly from
the WSDL metadata of the
<code>serviceEndpointInterface</code> and the <code>EndpointReference</code>.
For this method
to successfully return a proxy, WSDL metadata MUST be available and the
<code>endpointReference</code> MUST contain an implementation understood
<code>serviceName</code> metadata.


@param endpointReference the EndpointReference that will
be invoked by the returned proxy.
@param serviceEndpointInterface Service endpoint interface
@param features  A list of WebServiceFeatures to configure on the
               proxy.  Supported features not in the <code>features
               </code> parameter will have their default values.
@return Object Proxy instance that supports the
                 specified service endpoint interface
@throws WebServiceException
                 <UL>
                 <LI>If there is an error during creation
                     of the proxy
                 <LI>If there is any missing WSDL metadata
                     as required by this method}
                 <LI>If this
                     <code>endpointReference</code>
                     is illegal
                 <LI>If an illegal
                     <code>serviceEndpointInterface</code>
                     is specified
                 <LI>If a feature is enabled that is not compatible with
                     this port or is unsupported.
                  </UL>

@see WebServiceFeature

@since JAX-WS 2.1
"
      end

      operation 12155394 "createW3CEndpointReference"
	abstract public return_type class_ref 1440258 // W3CEndpointReference
	nparams 6
	  param inout name "address" type class_ref 128130 // String
	  param inout name "serviceName" type class_ref 673666 // QName
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "metadata" type class_ref 175362 // List
	  param inout name "wsdlDocumentLocation" type class_ref 128130 // String
	  param inout name "referenceParameters" type class_ref 175362 // List
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<Element> ${p3}, ${t4} ${p4}, ${t5}<Element> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method to create a <code>W3CEndpointReference</code>.

<p>
This method can be used to create a <code>W3CEndpointReference</code>
for any endpoint by specifying the <code>address</code> property along
with any other desired properties.  This method
can also be used to create a <code>W3CEndpointReference</code> for
an endpoint that is published by the same Java EE application.
To do so the <code>address</code> property can be provided or this
method can automatically determine the <code>address</code> of
an endpoint that is published by the same Java EE application and is
identified by the <code>serviceName</code> and
<code>portName</code> propeties.  If the <code>address</code> is
<code>null</code> and the <code>serviceName</code> and
<code>portName</code> do not identify an endpoint published by the
same Java EE application, a
<code>javax.lang.IllegalStateException</code> MUST be thrown.

@param address Specifies the address of the target endpoint
@param serviceName Qualified name of the service in the WSDL.
@param portName Qualified name of the endpoint in the WSDL.
@param metadata A list of elements that should be added to the
<code>W3CEndpointReference</code> instances <code>wsa:metadata</code>
element.
@param wsdlDocumentLocation URL for the WSDL document location for
the service.
@param referenceParameters Reference parameters to be associated
with the returned <code>EndpointReference</code> instance.

@return the <code>W3CEndpointReference</code> created from
         <code>serviceName</code>, <code>portName</code>,
         <code>metadata</code>, <code>wsdlDocumentLocation</code>
         and <code>referenceParameters</code>. This method
         never returns <code>null</code>.

@throws java.lang.IllegalStateException
    <ul>
       <li>If the <code>address</code>, <code>serviceName</code> and
           <code>portName</code> are all <code>null</code>.
       <li>If the <code>serviceName</code> service is <code>null</code> and the
           <code>portName</code> is NOT <code>null</code>.
       <li>If the <code>address</code> property is <code>null</code> and
           the <code>serviceName</code> and <code>portName</code> do not
           specify a valid endpoint published by the same Java EE
           application.
       <li>If the <code>serviceName</code>is NOT <code>null</code>
            and is not present in the specified WSDL.
       <li>If the <code>portName</code> port is not <code>null</code> and it
            is not present in <code>serviceName</code> service in the WSDL.
       <li>If the <code>wsdlDocumentLocation</code> is NOT <code>null</code>
           and does not represent a valid WSDL.
    </ul>
@throws WebServiceException If an error occurs while creating the
                            <code>W3CEndpointReference</code>.

@since JAX-WS 2.1
"
      end

      operation 12155522 "createW3CEndpointReference"
	public return_type class_ref 1440258 // W3CEndpointReference
	nparams 9
	  param inout name "address" type class_ref 128130 // String
	  param inout name "interfaceName" type class_ref 673666 // QName
	  param inout name "serviceName" type class_ref 673666 // QName
	  param inout name "portName" type class_ref 673666 // QName
	  param inout name "metadata" type class_ref 175362 // List
	  param inout name "wsdlDocumentLocation" type class_ref 128130 // String
	  param inout name "referenceParameters" type class_ref 175362 // List
	  param inout name "elements" type class_ref 175362 // List
	  param inout name "attributes" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Element> ${p4}, ${t5} ${p5}, ${t6}<Element> ${p6}, ${t7}<Element> ${p7}, ${t8}<QName, String> ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method to create a <code>W3CEndpointReference</code>.
Using this method, a <code>W3CEndpointReference</code> instance
can be created with extension elements, and attributes.
<code>Provider</code> implementations must override the default
implementation.

<p>
This method can be used to create a <code>W3CEndpointReference</code>
for any endpoint by specifying the <code>address</code> property along
with any other desired properties.  This method
can also be used to create a <code>W3CEndpointReference</code> for
an endpoint that is published by the same Java EE application.
To do so the <code>address</code> property can be provided or this
method can automatically determine the <code>address</code> of
an endpoint that is published by the same Java EE application and is
identified by the <code>serviceName</code> and
<code>portName</code> propeties.  If the <code>address</code> is
<code>null</code> and the <code>serviceName</code> and
<code>portName</code> do not identify an endpoint published by the
same Java EE application, a
<code>javax.lang.IllegalStateException</code> MUST be thrown.

@param address Specifies the address of the target endpoint
@param interfaceName the <code>wsam:InterfaceName</code> element in the
<code>wsa:Metadata</code> element.
@param serviceName Qualified name of the service in the WSDL.
@param portName Qualified name of the endpoint in the WSDL.
@param metadata A list of elements that should be added to the
<code>W3CEndpointReference</code> instances <code>wsa:metadata</code>
element.
@param wsdlDocumentLocation URL for the WSDL document location for
the service.
@param referenceParameters Reference parameters to be associated
with the returned <code>EndpointReference</code> instance.
@param elements extension elements to be associated
with the returned <code>EndpointReference</code> instance.
@param attributes extension attributes to be associated
with the returned <code>EndpointReference</code> instance.

@return the <code>W3CEndpointReference</code> created from
         <code>serviceName</code>, <code>portName</code>,
         <code>metadata</code>, <code>wsdlDocumentLocation</code>
         and <code>referenceParameters</code>. This method
         never returns <code>null</code>.

@throws java.lang.IllegalStateException
    <ul>
       <li>If the <code>address</code>, <code>serviceName</code> and
           <code>portName</code> are all <code>null</code>.
       <li>If the <code>serviceName</code> service is <code>null</code> and the
           <code>portName</code> is NOT <code>null</code>.
       <li>If the <code>address</code> property is <code>null</code> and
           the <code>serviceName</code> and <code>portName</code> do not
           specify a valid endpoint published by the same Java EE
           application.
       <li>If the <code>serviceName</code>is NOT <code>null</code>
            and is not present in the specified WSDL.
       <li>If the <code>portName</code> port is not <code>null</code> and it
            is not present in <code>serviceName</code> service in the WSDL.
       <li>If the <code>wsdlDocumentLocation</code> is NOT <code>null</code>
           and does not represent a valid WSDL.
       <li>If the <code>wsdlDocumentLocation</code> is NOT <code>null</code> but
           wsdli:wsdlLocation's namespace name cannot be got from the available
           metadata.
    </ul>
@throws WebServiceException If an error occurs while creating the
                            <code>W3CEndpointReference</code>.
@since JAX-WS 2.2
"
      end

      operation 12155650 "createAndPublishEndpoint"
	public return_type class_ref 1434498 // Endpoint
	nparams 3
	  param inout name "address" type class_ref 128130 // String
	  param inout name "implementor" type class_ref 129538 // Object
	  param inout name "features" type class_ref 1434626 // WebServiceFeature
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and publishes an endpoint object with the specified
address, implementation object and web service features.
<code>Provider</code> implementations must override the
default implementation.

@param address A URI specifying the address and transport/protocol
       to use. A http: URI MUST result in the SOAP 1.1/HTTP
       binding being used. Implementations may support other
       URI schemes.
@param implementor A service implementation object to which
       incoming requests will be dispatched. The corresponding
       class MUST be annotated with all the necessary Web service
       annotations.
@param features A list of WebServiceFeatures to configure on the
       endpoint.  Supported features not in the <code>features
       </code> parameter will have their default values.
@return The newly created endpoint.
@since JAX-WS 2.2
"
      end

      operation 12155778 "createEndpoint"
	public return_type class_ref 1434498 // Endpoint
	nparams 3
	  param inout name "bindingId" type class_ref 128130 // String
	  param inout name "implementor" type class_ref 129538 // Object
	  param inout name "features" type class_ref 1434626 // WebServiceFeature
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an endpoint object with the provided binding, implementation
object and web service features. <code>Provider</code> implementations
must override the default implementation.

@param bindingId A URI specifying the desired binding (e.g. SOAP/HTTP)
@param implementor A service implementation object to which
       incoming requests will be dispatched. The corresponding
       class MUST be annotated with all the necessary Web service
       annotations.
@param features A list of WebServiceFeatures to configure on the
       endpoint.  Supported features not in the <code>features
       </code> parameter will have their default values.
@return The newly created endpoint.
@since JAX-WS 2.2
"
      end

      operation 12155906 "createEndpoint"
	public return_type class_ref 1434498 // Endpoint
	nparams 4
	  param inout name "bindingId" type class_ref 128130 // String
	  param inout name "implementorClass" type class_ref 130818 // Class
	  param inout name "invoker" type class_ref 1440002 // Invoker
	  param inout name "features" type class_ref 1434626 // WebServiceFeature
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ... ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an endpoint object with the provided binding, implementation
class, invoker and web service features. Containers typically use
this to create Endpoint objects. <code>Provider</code>
implementations must override the default implementation.

@param bindingId A URI specifying the desired binding (e.g. SOAP/HTTP).
       Can be null.
@param implementorClass A service implementation class that
       MUST be annotated with all the necessary Web service
       annotations.
@param invoker that does the actual invocation on the service instance.
@param features A list of WebServiceFeatures to configure on the
       endpoint.  Supported features not in the <code>features
       </code> parameter will have their default values.
@return The newly created endpoint.
@since JAX-WS 2.2
"
      end
    end

    class 1440386 "WebServiceFeatureAnnotation"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target(ElementType.ANNOTATION_TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Annotation used to identify other annotations
as a <code>WebServiceFeature</code>.
<p>
Each <code>WebServiceFeature</code> annotation annotated with
this annotation MUST contain an
<code>enabled</code> property of type
<code>boolean</code> with a default value of <code>true</code>.
<p>
JAX-WS defines the following
<code>WebServiceFeature</code> annotations (<code>Addressing</code>,
<code>MTOM</code>, <code>RespectBinding</code>), however, an implementation
may define vendors specific annotations for other features.
<p>
Annotations annotated with <code>WebServiceFeatureAnnotation</code> MUST
have the same @Target of {@link WebServiceRef} annotation, so that the resulting
feature annotation can be used in conjunction with the {@link WebServiceRef}
annotation if necessary.
<p>
If a JAX-WS implementation encounters an annotation annotated
with the <code>WebServiceFeatureAnnotation</code> that it does not
recognize/support an error MUST be given.
<p>

@see Addressing
@see MTOM
@see RespectBinding

@since JAX-WS 2.1
"
      operation 12158594 "id"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unique identifier for the WebServiceFeature.  This
identifier MUST be unique across all implementations
of JAX-WS.
"
      end

      operation 12158722 "bean"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends WebServiceFeature> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>WebServiceFeature</code> bean that is associated
with the <code>WebServiceFeature</code> annotation
"
      end
    end
  end

  deploymentview 179970 "spi"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1031170 "FactoryFinder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.Properties;
import javax.xml.ws.WebServiceException;
${definition}"
      associated_elems
	class_ref 1439874 // FactoryFinder
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1031298 "Invoker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceFeature;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
${definition}"
      associated_elems
	class_ref 1440002 // Invoker
      end
      comment "Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1031426 "Provider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URL;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.lang.reflect.Method;
import javax.xml.namespace.QName;
import javax.xml.ws.*;
import javax.xml.ws.wsaddressing.W3CEndpointReference;
import org.w3c.dom.Element;
${definition}"
      associated_elems
	class_ref 1440130 // Provider
      end
      comment "Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1031554 "ServiceDelegate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import javax.xml.namespace.QName;
import javax.xml.ws.Dispatch;
import javax.xml.ws.Service;
import javax.xml.ws.handler.HandlerResolver;
import javax.xml.ws.WebServiceFeature;
import javax.xml.bind.JAXBContext;
import javax.xml.ws.EndpointReference;
import javax.xml.ws.WebServiceException;
${definition}"
      associated_elems
	class_ref 1436290 // ServiceDelegate
      end
      comment "Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1031682 "WebServiceFeatureAnnotation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Documented;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.WebServiceRef;
import javax.xml.ws.WebServiceRefs;
import javax.xml.ws.RespectBinding;
import javax.xml.ws.soap.Addressing;
import javax.xml.ws.soap.MTOM;
${definition}"
      associated_elems
	class_ref 1440386 // WebServiceFeatureAnnotation
      end
      comment "Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
