class JDialog
!!!10563970.java!!!	JDialog()
        this((Frame)null, false);
!!!10564098.java!!!	JDialog(inout owner : Frame)
        this(owner, false);
!!!10564226.java!!!	JDialog(inout owner : Frame, inout modal : boolean)
        this(owner, "", modal);
!!!10564354.java!!!	JDialog(inout owner : Frame, inout title : String)
        this(owner, title, false);
!!!10564482.java!!!	JDialog(inout owner : Frame, inout title : String, inout modal : boolean)
        super(owner == null? SwingUtilities.getSharedOwnerFrame() : owner,
              title, modal);
        if (owner == null) {
            WindowListener ownerShutdownListener =
                    SwingUtilities.getSharedOwnerFrameShutdownListener();
            addWindowListener(ownerShutdownListener);
        }
        dialogInit();
!!!10564610.java!!!	JDialog(inout owner : Frame, inout title : String, inout modal : boolean, inout gc : GraphicsConfiguration)
        super(owner == null? SwingUtilities.getSharedOwnerFrame() : owner,
              title, modal, gc);
        if (owner == null) {
            WindowListener ownerShutdownListener =
                    SwingUtilities.getSharedOwnerFrameShutdownListener();
            addWindowListener(ownerShutdownListener);
        }
        dialogInit();
!!!10564738.java!!!	JDialog(inout owner : Dialog)
        this(owner, false);
!!!10564866.java!!!	JDialog(inout owner : Dialog, inout modal : boolean)
        this(owner, "", modal);
!!!10564994.java!!!	JDialog(inout owner : Dialog, inout title : String)
        this(owner, title, false);
!!!10565122.java!!!	JDialog(inout owner : Dialog, inout title : String, inout modal : boolean)
        super(owner, title, modal);
        dialogInit();
!!!10565250.java!!!	JDialog(inout owner : Dialog, inout title : String, inout modal : boolean, inout gc : GraphicsConfiguration)
        super(owner, title, modal, gc);
        dialogInit();
!!!10565378.java!!!	JDialog(inout owner : Window)
        this(owner, Dialog.ModalityType.MODELESS);
!!!10565506.java!!!	JDialog(inout owner : Window, inout modalityType : Dialog::ModalityType)
        this(owner, "", modalityType);
!!!10565634.java!!!	JDialog(inout owner : Window, inout title : String)
        this(owner, title, Dialog.ModalityType.MODELESS);
!!!10565762.java!!!	JDialog(inout owner : Window, inout title : String, inout modalityType : Dialog::ModalityType)
        super(owner, title, modalityType);
        dialogInit();
!!!10565890.java!!!	JDialog(inout owner : Window, inout title : String, inout modalityType : Dialog::ModalityType, inout gc : GraphicsConfiguration)
        super(owner, title, modalityType, gc);
        dialogInit();
!!!10566018.java!!!	dialogInit() : void
        enableEvents(AWTEvent.KEY_EVENT_MASK | AWTEvent.WINDOW_EVENT_MASK);
        setLocale( JComponent.getDefaultLocale() );
        setRootPane(createRootPane());
        setBackground(UIManager.getColor("control"));
        setRootPaneCheckingEnabled(true);
        if (JDialog.isDefaultLookAndFeelDecorated()) {
            boolean supportsWindowDecorations =
            UIManager.getLookAndFeel().getSupportsWindowDecorations();
            if (supportsWindowDecorations) {
                setUndecorated(true);
                getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
            }
        }
        sun.awt.SunToolkit.checkAndSetPolicy(this);
!!!10566146.java!!!	createRootPane() : JRootPane
        JRootPane rp = new JRootPane();
        // NOTE: this uses setOpaque vs LookAndFeel.installProperty as there
        // is NO reason for the RootPane not to be opaque. For painting to
        // work the contentPane must be opaque, therefor the RootPane can
        // also be opaque.
        rp.setOpaque(true);
        return rp;
!!!10566274.java!!!	processWindowEvent(inout e : WindowEvent) : void
        super.processWindowEvent(e);

        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            switch(defaultCloseOperation) {
              case HIDE_ON_CLOSE:
                 setVisible(false);
                 break;
              case DISPOSE_ON_CLOSE:
                 dispose();
                 break;
              case DO_NOTHING_ON_CLOSE:
                 default:
                 break;
            }
        }
!!!10566402.java!!!	setDefaultCloseOperation(in operation : int) : void
        if (operation != DO_NOTHING_ON_CLOSE &&
            operation != HIDE_ON_CLOSE &&
            operation != DISPOSE_ON_CLOSE) {
            throw new IllegalArgumentException("defaultCloseOperation must be one of: DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE, or DISPOSE_ON_CLOSE");
        }

        int oldValue = this.defaultCloseOperation;
        this.defaultCloseOperation = operation;
        firePropertyChange("defaultCloseOperation", oldValue, operation);
!!!10566530.java!!!	getDefaultCloseOperation() : int
        return defaultCloseOperation;
!!!10566658.java!!!	setTransferHandler(inout newHandler : TransferHandler) : void
        TransferHandler oldHandler = transferHandler;
        transferHandler = newHandler;
        SwingUtilities.installSwingDropTargetAsNecessary(this, transferHandler);
        firePropertyChange("transferHandler", oldHandler, newHandler);
!!!10566786.java!!!	getTransferHandler() : TransferHandler
        return transferHandler;
!!!10566914.java!!!	update(inout g : Graphics) : void
        paint(g);
!!!10567042.java!!!	setJMenuBar(inout menu : JMenuBar) : void
        getRootPane().setMenuBar(menu);
!!!10567170.java!!!	getJMenuBar() : JMenuBar
        return getRootPane().getMenuBar();
!!!10567298.java!!!	isRootPaneCheckingEnabled() : boolean
        return rootPaneCheckingEnabled;
!!!10567426.java!!!	setRootPaneCheckingEnabled(inout enabled : boolean) : void
        rootPaneCheckingEnabled = enabled;
!!!10567554.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().add(comp, constraints, index);
        }
        else {
            super.addImpl(comp, constraints, index);
        }
!!!10567682.java!!!	remove(inout comp : Component) : void
        if (comp == rootPane) {
            super.remove(comp);
        } else {
            getContentPane().remove(comp);
        }
!!!10567810.java!!!	setLayout(inout manager : LayoutManager) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().setLayout(manager);
        }
        else {
            super.setLayout(manager);
        }
!!!10567938.java!!!	getRootPane() : JRootPane
        return rootPane;
!!!10568066.java!!!	setRootPane(inout root : JRootPane) : void
        if(rootPane != null) {
            remove(rootPane);
        }
        rootPane = root;
        if(rootPane != null) {
            boolean checkingEnabled = isRootPaneCheckingEnabled();
            try {
                setRootPaneCheckingEnabled(false);
                add(rootPane, BorderLayout.CENTER);
            }
            finally {
                setRootPaneCheckingEnabled(checkingEnabled);
            }
        }
!!!10568194.java!!!	getContentPane() : Container
        return getRootPane().getContentPane();
!!!10568322.java!!!	setContentPane(inout contentPane : Container) : void
        getRootPane().setContentPane(contentPane);
!!!10568450.java!!!	getLayeredPane() : JLayeredPane
        return getRootPane().getLayeredPane();
!!!10568578.java!!!	setLayeredPane(inout layeredPane : JLayeredPane) : void
        getRootPane().setLayeredPane(layeredPane);
!!!10568706.java!!!	getGlassPane() : Component
        return getRootPane().getGlassPane();
!!!10568834.java!!!	setGlassPane(inout glassPane : Component) : void
        getRootPane().setGlassPane(glassPane);
!!!10568962.java!!!	getGraphics() : Graphics
        JComponent.getGraphicsInvoked(this);
        return super.getGraphics();
!!!10569090.java!!!	repaint(in time : long, in x : int, in y : int, in width : int, in height : int) : void
        if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {
            RepaintManager.currentManager(this).addDirtyRegion(
                              this, x, y, width, height);
        }
        else {
            super.repaint(time, x, y, width, height);
        }
!!!10569218.java!!!	setDefaultLookAndFeelDecorated(inout defaultLookAndFeelDecorated : boolean) : void
        if (defaultLookAndFeelDecorated) {
            SwingUtilities.appContextPut(defaultLookAndFeelDecoratedKey, Boolean.TRUE);
        } else {
            SwingUtilities.appContextPut(defaultLookAndFeelDecoratedKey, Boolean.FALSE);
        }
!!!10569346.java!!!	isDefaultLookAndFeelDecorated() : boolean
        Boolean defaultLookAndFeelDecorated =
            (Boolean) SwingUtilities.appContextGet(defaultLookAndFeelDecoratedKey);
        if (defaultLookAndFeelDecorated == null) {
            defaultLookAndFeelDecorated = Boolean.FALSE;
        }
        return defaultLookAndFeelDecorated.booleanValue();
!!!10569474.java!!!	paramString() : String
        String defaultCloseOperationString;
        if (defaultCloseOperation == HIDE_ON_CLOSE) {
            defaultCloseOperationString = "HIDE_ON_CLOSE";
        } else if (defaultCloseOperation == DISPOSE_ON_CLOSE) {
            defaultCloseOperationString = "DISPOSE_ON_CLOSE";
        } else if (defaultCloseOperation == DO_NOTHING_ON_CLOSE) {
            defaultCloseOperationString = "DO_NOTHING_ON_CLOSE";
        } else defaultCloseOperationString = "";
        String rootPaneString = (rootPane != null ?
                                 rootPane.toString() : "");
        String rootPaneCheckingEnabledString = (rootPaneCheckingEnabled ?
                                                "true" : "false");

        return super.paramString() +
        ",defaultCloseOperation=" + defaultCloseOperationString +
        ",rootPane=" + rootPaneString +
        ",rootPaneCheckingEnabled=" + rootPaneCheckingEnabledString;
!!!10569602.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJDialog();
        }
        return accessibleContext;
