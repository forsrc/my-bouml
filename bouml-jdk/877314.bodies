class TextField
!!!6347138.java!!!	TextField()
        this("", 0);
!!!6347266.java!!!	TextField(inout text : String)
        this(text, (text != null) ? text.length() : 0);
!!!6347394.java!!!	TextField(in columns : int)
        this("", columns);
!!!6347522.java!!!	TextField(inout text : String, in columns : int)
        super(text);
        this.columns = (columns >= 0) ? columns : 0;
!!!6347650.java!!!	constructComponentName() : String
        synchronized (TextField.class) {
            return base + nameCounter++;
        }
!!!6347778.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = getToolkit().createTextField(this);
            super.addNotify();
        }
!!!6347906.java!!!	getEchoChar() : char
        return echoChar;
!!!6348034.java!!!	setEchoChar(in c : char) : void
        setEchoCharacter(c);
!!!6348162.java!!!	setEchoCharacter(in c : char) : void
        if (echoChar != c) {
            echoChar = c;
            TextFieldPeer peer = (TextFieldPeer)this.peer;
            if (peer != null) {
                peer.setEchoChar(c);
            }
        }
!!!6348290.java!!!	setText(inout t : String) : void
        super.setText(t);

        // This could change the preferred size of the Component.
        invalidateIfValid();
!!!6348418.java!!!	echoCharIsSet() : boolean
        return echoChar != 0;
!!!6348546.java!!!	getColumns() : int
        return columns;
!!!6348674.java!!!	setColumns(in columns : int) : void
        int oldVal;
        synchronized (this) {
            oldVal = this.columns;
            if (columns < 0) {
                throw new IllegalArgumentException("columns less than zero.");
            }
            if (columns != oldVal) {
                this.columns = columns;
            }
        }

        if (columns != oldVal) {
            invalidate();
        }
!!!6348802.java!!!	getPreferredSize(in columns : int) : Dimension
        return preferredSize(columns);
!!!6348930.java!!!	preferredSize(in columns : int) : Dimension
        synchronized (getTreeLock()) {
            TextFieldPeer peer = (TextFieldPeer)this.peer;
            return (peer != null) ?
                       peer.getPreferredSize(columns) :
                       super.preferredSize();
        }
!!!6349058.java!!!	getPreferredSize() : Dimension
        return preferredSize();
!!!6349186.java!!!	preferredSize() : Dimension
        synchronized (getTreeLock()) {
            return (columns > 0) ?
                       preferredSize(columns) :
                       super.preferredSize();
        }
!!!6349314.java!!!	getMinimumSize(in columns : int) : Dimension
        return minimumSize(columns);
!!!6349442.java!!!	minimumSize(in columns : int) : Dimension
        synchronized (getTreeLock()) {
            TextFieldPeer peer = (TextFieldPeer)this.peer;
            return (peer != null) ?
                       peer.getMinimumSize(columns) :
                       super.minimumSize();
        }
!!!6349570.java!!!	getMinimumSize() : Dimension
        return minimumSize();
!!!6349698.java!!!	minimumSize() : Dimension
        synchronized (getTreeLock()) {
            return (columns > 0) ?
                       minimumSize(columns) :
                       super.minimumSize();
        }
!!!6349826.java!!!	addActionListener(inout l : ActionListener) : void
        if (l == null) {
            return;
        }
        actionListener = AWTEventMulticaster.add(actionListener, l);
        newEventsOnly = true;
!!!6349954.java!!!	removeActionListener(inout l : ActionListener) : void
        if (l == null) {
            return;
        }
        actionListener = AWTEventMulticaster.remove(actionListener, l);
!!!6350082.java!!!	getActionListeners() : ActionListener
        return getListeners(ActionListener.class);
!!!6350210.java!!!	getListeners(inout listenerType : Class) : T
        EventListener l = null;
        if  (listenerType == ActionListener.class) {
            l = actionListener;
        } else {
            return super.getListeners(listenerType);
        }
        return AWTEventMulticaster.getListeners(l, listenerType);
!!!6350338.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == ActionEvent.ACTION_PERFORMED) {
            if ((eventMask & AWTEvent.ACTION_EVENT_MASK) != 0 ||
                actionListener != null) {
                return true;
            }
            return false;
        }
        return super.eventEnabled(e);
!!!6350466.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof ActionEvent) {
            processActionEvent((ActionEvent)e);
            return;
        }
        super.processEvent(e);
!!!6350594.java!!!	processActionEvent(inout e : ActionEvent) : void
        ActionListener listener = actionListener;
        if (listener != null) {
            listener.actionPerformed(e);
        }
!!!6350722.java!!!	paramString() : String
        String str = super.paramString();
        if (echoChar != 0) {
            str += ",echo=" + echoChar;
        }
        return str;
!!!6350850.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        AWTEventMulticaster.save(s, actionListenerK, actionListener);
        s.writeObject(null);
!!!6350978.java!!!	readObject(inout s : ObjectInputStream) : void
        // HeadlessException will be thrown by TextComponent's readObject
        s.defaultReadObject();

        // Make sure the state we just read in for columns has legal values
        if (columns < 0) {
            columns = 0;
        }

        // Read in listeners, if any
        Object keyOrNull;
        while(null != (keyOrNull = s.readObject())) {
            String key = ((String)keyOrNull).intern();

            if (actionListenerK == key) {
                addActionListener((ActionListener)(s.readObject()));
            } else {
                // skip value for unrecognized key
                s.readObject();
            }
        }
!!!6351106.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTTextField();
        }
        return accessibleContext;
