class RelationSupport
!!!9923330.java!!!	RelationSupport(inout relationId : String, inout relationServiceName : ObjectName, inout relationTypeName : String, inout list : RoleList)

        super();

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "RelationSupport");

        // Can throw InvalidRoleValueException and IllegalArgumentException
        initMembers(relationId,
                    relationServiceName,
                    null,
                    relationTypeName,
                    list);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "RelationSupport");
!!!9923458.java!!!	RelationSupport(inout relationId : String, inout relationServiceName : ObjectName, inout relationServiceMBeanServer : MBeanServer, inout relationTypeName : String, inout list : RoleList)

        super();

        if (relationServiceMBeanServer == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "RelationSupport");

        // Can throw InvalidRoleValueException and
        // IllegalArgumentException
        initMembers(relationId,
                    relationServiceName,
                    relationServiceMBeanServer,
                    relationTypeName,
                    list);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "RelationSupport");
!!!9923586.java!!!	getRole(inout roleName : String) : List

        if (roleName == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "getRole", roleName);

        // Can throw RoleNotFoundException and
        // RelationServiceNotRegisteredException
        List<ObjectName> result = cast(
            getRoleInt(roleName, false, null, false));

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "getRole");
        return result;
!!!9923714.java!!!	getRoles(inout roleNameArray : String [[]]) : RoleResult

        if (roleNameArray == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(), "getRoles");

        // Can throw RelationServiceNotRegisteredException
        RoleResult result = getRolesInt(roleNameArray, false, null);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "getRoles");
        return result;
!!!9923842.java!!!	getAllRoles() : RoleResult

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "getAllRoles");

        RoleResult result = null;
        try {
            result = getAllRolesInt(false, null);
        } catch (IllegalArgumentException exc) {
            // OK : Invalid parameters, ignore...
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "getAllRoles");
        return result;
!!!9923970.java!!!	retrieveAllRoles() : RoleList

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "retrieveAllRoles");

        RoleList result;
        synchronized(myRoleName2ValueMap) {
            result =
                new RoleList(new ArrayList<Role>(myRoleName2ValueMap.values()));
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "retrieveAllRoles");
        return result;
!!!9924098.java!!!	getRoleCardinality(inout roleName : String) : Integer

        if (roleName == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "getRoleCardinality", roleName);

        // Try to retrieve the role
        Role role;
        synchronized(myRoleName2ValueMap) {
            // No null Role is allowed, so direct use of get()
            role = (myRoleName2ValueMap.get(roleName));
        }
        if (role == null) {
            int pbType = RoleStatus.NO_ROLE_WITH_NAME;
            // Will throw a RoleNotFoundException
            //
            // Will not throw InvalidRoleValueException, so catch it for the
            // compiler
            try {
                RelationService.throwRoleProblemException(pbType,
                                                          roleName);
            } catch (InvalidRoleValueException exc) {
                // OK : Do not throw InvalidRoleValueException as
                //      a RoleNotFoundException will be thrown.
            }
        }

        List<ObjectName> roleValue = role.getRoleValue();

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "getRoleCardinality");
        return roleValue.size();
!!!9924226.java!!!	setRole(inout role : Role) : void

        if (role == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "setRole", role);

        // Will return null :)
        Object result = setRoleInt(role, false, null, false);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "setRole");
        return;
!!!9924354.java!!!	setRoles(inout list : RoleList) : RoleResult

        if (list == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "setRoles", list);

        RoleResult result = setRolesInt(list, false, null);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "setRoles");
        return result;
!!!9924482.java!!!	handleMBeanUnregistration(inout objectName : ObjectName, inout roleName : String) : void

        if (objectName == null || roleName == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "handleMBeanUnregistration",
                new Object[]{objectName, roleName});

        // Can throw RoleNotFoundException, InvalidRoleValueException,
        // or RelationTypeNotFoundException
        handleMBeanUnregistrationInt(objectName,
                                     roleName,
                                     false,
                                     null);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "handleMBeanUnregistration");
        return;
!!!9924610.java!!!	getReferencedMBeans() : Map

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "getReferencedMBeans");

        Map<ObjectName,List<String>> refMBeanMap =
            new HashMap<ObjectName,List<String>>();

        synchronized(myRoleName2ValueMap) {

            for (Role currRole : myRoleName2ValueMap.values()) {

                String currRoleName = currRole.getRoleName();
                // Retrieves ObjectNames of MBeans referenced in current role
                List<ObjectName> currRefMBeanList = currRole.getRoleValue();

                for (ObjectName currRoleObjName : currRefMBeanList) {

                    // Sees if current MBean has been already referenced in
                    // roles already seen
                    List<String> mbeanRoleNameList =
                        refMBeanMap.get(currRoleObjName);

                    boolean newRefFlg = false;
                    if (mbeanRoleNameList == null) {
                        newRefFlg = true;
                        mbeanRoleNameList = new ArrayList<String>();
                    }
                    mbeanRoleNameList.add(currRoleName);
                    if (newRefFlg) {
                        refMBeanMap.put(currRoleObjName, mbeanRoleNameList);
                    }
                }
            }
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "getReferencedMBeans");
        return refMBeanMap;
!!!9924738.java!!!	getRelationTypeName() : String
        return myRelTypeName;
!!!9924866.java!!!	getRelationServiceName() : ObjectName
        return myRelServiceName;
!!!9924994.java!!!	getRelationId() : String
        return myRelId;
!!!9925122.java!!!	preRegister(inout server : MBeanServer, inout name : ObjectName) : ObjectName

        myRelServiceMBeanServer = server;
        return name;
!!!9925250.java!!!	postRegister(inout registrationDone : Boolean) : void
        return;
!!!9925378.java!!!	preDeregister() : void
        return;
!!!9925506.java!!!	postDeregister() : void
        return;
!!!9925634.java!!!	isInRelationService() : Boolean
        return myInRelServFlg.get();
!!!9925762.java!!!	setRelationServiceManagementFlag(inout flag : Boolean) : void

        if (flag == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }
        myInRelServFlg.set(flag);
!!!9925890.java!!!	getRoleInt(inout roleName : String, inout relationServCallFlg : boolean, inout relationServ : RelationService, inout multiRoleFlg : boolean) : Object

        if (roleName == null ||
            (relationServCallFlg && relationServ == null)) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "getRoleInt", roleName);

        int pbType = 0;

        Role role;
        synchronized(myRoleName2ValueMap) {
            // No null Role is allowed, so direct use of get()
            role = (myRoleName2ValueMap.get(roleName));
        }

        if (role == null) {
                pbType = RoleStatus.NO_ROLE_WITH_NAME;

        } else {
            // Checks if the role is readable
            Integer status;

            if (relationServCallFlg) {

                // Call from the Relation Service, so direct access to it,
                // avoiding MBean Server
                // Shall not throw a RelationTypeNotFoundException
                try {
                    status = relationServ.checkRoleReading(roleName,
                                                         myRelTypeName);
                } catch (RelationTypeNotFoundException exc) {
                    throw new RuntimeException(exc.getMessage());
                }

            } else {

                // Call from getRole() method above
                // So we have a MBean. We must access the Relation Service
                // via the MBean Server.
                Object[] params = new Object[2];
                params[0] = roleName;
                params[1] = myRelTypeName;
                String[] signature = new String[2];
                signature[0] = "java.lang.String";
                signature[1] = "java.lang.String";
                // Can throw InstanceNotFoundException if the Relation
                // Service is not registered (to be catched in any case and
                // transformed into RelationServiceNotRegisteredException).
                //
                // Shall not throw a MBeanException, or a ReflectionException
                // or an InstanceNotFoundException
                try {
                    status = (Integer)
                        (myRelServiceMBeanServer.invoke(myRelServiceName,
                                                        "checkRoleReading",
                                                        params,
                                                        signature));
                } catch (MBeanException exc1) {
                    throw new RuntimeException("incorrect relation type");
                } catch (ReflectionException exc2) {
                    throw new RuntimeException(exc2.getMessage());
                } catch (InstanceNotFoundException exc3) {
                    throw new RelationServiceNotRegisteredException(
                                                            exc3.getMessage());
                }
            }

            pbType = status.intValue();
        }

        Object result;

        if (pbType == 0) {
            // Role can be retrieved

            if (!(multiRoleFlg)) {
                // Single role retrieved: returns its value
                // Note: no need to test if role value (list) not null before
                //       cloning, null value not allowed, empty list if
                //       nothing.
                result = new ArrayList<ObjectName>(role.getRoleValue());

            } else {
                // Role retrieved during multi-role retrieval: returns the
                // role
                result = (Role)(role.clone());
            }

        } else {
            // Role not retrieved

            if (!(multiRoleFlg)) {
                // Problem when retrieving a simple role: either role not
                // found or not readable, so raises a RoleNotFoundException.
                try {
                    RelationService.throwRoleProblemException(pbType,
                                                              roleName);
                    // To keep compiler happy :)
                    return null;
                } catch (InvalidRoleValueException exc) {
                    throw new RuntimeException(exc.getMessage());
                }

            } else {
                // Problem when retrieving a role in a multi-role retrieval:
                // returns a RoleUnresolved object
                result = new RoleUnresolved(roleName, null, pbType);
            }
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "getRoleInt");
        return result;
!!!9926018.java!!!	getRolesInt(inout roleNameArray : String [[]], inout relationServCallFlg : boolean, inout relationServ : RelationService) : RoleResult

        if (roleNameArray == null ||
            (relationServCallFlg && relationServ == null)) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "getRolesInt");

        RoleList roleList = new RoleList();
        RoleUnresolvedList roleUnresList = new RoleUnresolvedList();

        for (int i = 0; i < roleNameArray.length; i++) {
            String currRoleName = roleNameArray[i];

            Object currResult;

            // Can throw RelationServiceNotRegisteredException
            //
            // RoleNotFoundException: not possible but catch it for compiler :)
            try {
                currResult = getRoleInt(currRoleName,
                                        relationServCallFlg,
                                        relationServ,
                                        true);

            } catch (RoleNotFoundException exc) {
                return null; // :)
            }

            if (currResult instanceof Role) {
                // Can throw IllegalArgumentException if role is null
                // (normally should not happen :(
                try {
                    roleList.add((Role)currResult);
                } catch (IllegalArgumentException exc) {
                    throw new RuntimeException(exc.getMessage());
                }

            } else if (currResult instanceof RoleUnresolved) {
                // Can throw IllegalArgumentException if role is null
                // (normally should not happen :(
                try {
                    roleUnresList.add((RoleUnresolved)currResult);
                } catch (IllegalArgumentException exc) {
                    throw new RuntimeException(exc.getMessage());
                }
            }
        }

        RoleResult result = new RoleResult(roleList, roleUnresList);
        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "getRolesInt");
        return result;
!!!9926146.java!!!	getAllRolesInt(inout relationServCallFlg : boolean, inout relationServ : RelationService) : RoleResult

        if (relationServCallFlg && relationServ == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "getAllRolesInt");

        List<String> roleNameList;
        synchronized(myRoleName2ValueMap) {
            roleNameList =
                new ArrayList<String>(myRoleName2ValueMap.keySet());
        }
        String[] roleNames = new String[roleNameList.size()];
        roleNameList.toArray(roleNames);

        RoleResult result = getRolesInt(roleNames,
                                        relationServCallFlg,
                                        relationServ);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "getAllRolesInt");
        return result;
!!!9926274.java!!!	setRoleInt(inout aRole : Role, inout relationServCallFlg : boolean, inout relationServ : RelationService, inout multiRoleFlg : boolean) : Object

        if (aRole == null ||
            (relationServCallFlg && relationServ == null)) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "setRoleInt", new Object[] {aRole, relationServCallFlg,
                relationServ, multiRoleFlg});

        String roleName = aRole.getRoleName();
        int pbType = 0;

        // Checks if role exists in the relation
        // No error if the role does not exist in the relation, to be able to
        // handle initialization of role when creating the relation
        // (roles provided in the RoleList parameter are directly set but
        // roles automatically initialized are set using setRole())
        Role role;
        synchronized(myRoleName2ValueMap) {
            role = (myRoleName2ValueMap.get(roleName));
        }

        List<ObjectName> oldRoleValue;
        Boolean initFlg;

        if (role == null) {
            initFlg = true;
            oldRoleValue = new ArrayList<ObjectName>();

        } else {
            initFlg = false;
            oldRoleValue = role.getRoleValue();
        }

        // Checks if the role can be set: is writable (except if
        // initialization) and correct value
        try {
            Integer status;

            if (relationServCallFlg) {

                // Call from the Relation Service, so direct access to it,
                // avoiding MBean Server
                //
                // Shall not raise a RelationTypeNotFoundException
                status = relationServ.checkRoleWriting(aRole,
                                                     myRelTypeName,
                                                     initFlg);

            } else {

                // Call from setRole() method above
                // So we have a MBean. We must access the Relation Service
                // via the MBean Server.
                Object[] params = new Object[3];
                params[0] = aRole;
                params[1] = myRelTypeName;
                params[2] = initFlg;
                String[] signature = new String[3];
                signature[0] = "javax.management.relation.Role";
                signature[1] = "java.lang.String";
                signature[2] = "java.lang.Boolean";
                // Can throw InstanceNotFoundException if the Relation Service
                // is not registered (to be transformed into
                // RelationServiceNotRegisteredException in any case).
                //
                // Can throw a MBeanException wrapping a
                // RelationTypeNotFoundException:
                // throw wrapped exception.
                //
                // Shall not throw a ReflectionException
                status = (Integer)
                    (myRelServiceMBeanServer.invoke(myRelServiceName,
                                                    "checkRoleWriting",
                                                    params,
                                                    signature));
            }

            pbType = status.intValue();

        } catch (MBeanException exc2) {

            // Retrieves underlying exception
            Exception wrappedExc = exc2.getTargetException();
            if (wrappedExc instanceof RelationTypeNotFoundException) {
                throw ((RelationTypeNotFoundException)wrappedExc);

            } else {
                throw new RuntimeException(wrappedExc.getMessage());
            }

        } catch (ReflectionException exc3) {
            throw new RuntimeException(exc3.getMessage());

        } catch (RelationTypeNotFoundException exc4) {
            throw new RuntimeException(exc4.getMessage());

        } catch (InstanceNotFoundException exc5) {
            throw new RelationServiceNotRegisteredException(exc5.getMessage());
        }

        Object result = null;

        if (pbType == 0) {
            // Role can be set
            if (!(initFlg.booleanValue())) {

                // Not initializing the role
                // If role being initialized:
                // - do not send an update notification
                // - do not try to update internal map of Relation Service
                //   listing referenced MBeans, as role is initialized to an
                //   empty list

                // Sends a notification (RelationNotification)
                // Can throw a RelationNotFoundException
                sendRoleUpdateNotification(aRole,
                                           oldRoleValue,
                                           relationServCallFlg,
                                           relationServ);

                // Updates the role map of the Relation Service
                // Can throw RelationNotFoundException
                updateRelationServiceMap(aRole,
                                         oldRoleValue,
                                         relationServCallFlg,
                                         relationServ);

            }

            // Sets the role
            synchronized(myRoleName2ValueMap) {
                myRoleName2ValueMap.put(roleName,
                                        (Role)(aRole.clone()));
            }

            // Single role set: returns null: nothing to set in result

            if (multiRoleFlg) {
                // Multi-roles retrieval: returns the role
                result = aRole;
            }

        } else {

            // Role not set

            if (!(multiRoleFlg)) {
                // Problem when setting a simple role: either role not
                // found, not writable, or incorrect value:
                // raises appropriate exception, RoleNotFoundException or
                // InvalidRoleValueException
                RelationService.throwRoleProblemException(pbType,
                                                          roleName);
                // To keep compiler happy :)
                return null;

            } else {
                // Problem when retrieving a role in a multi-role retrieval:
                // returns a RoleUnresolved object
                result = new RoleUnresolved(roleName,
                                            aRole.getRoleValue(),
                                            pbType);
            }
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "setRoleInt");
        return result;
!!!9926402.java!!!	sendRoleUpdateNotification(inout newRole : Role, inout oldRoleValue : List, inout relationServCallFlg : boolean, inout relationServ : RelationService) : void

        if (newRole == null ||
            oldRoleValue == null ||
            (relationServCallFlg && relationServ == null)) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "sendRoleUpdateNotification", new Object[] {newRole,
                oldRoleValue, relationServCallFlg, relationServ});

        if (relationServCallFlg) {
            // Direct call to the Relation Service
            // Shall not throw a RelationNotFoundException for an internal
            // relation
            try {
                relationServ.sendRoleUpdateNotification(myRelId,
                                                      newRole,
                                                      oldRoleValue);
            } catch (RelationNotFoundException exc) {
                throw new RuntimeException(exc.getMessage());
            }

        } else {

            Object[] params = new Object[3];
            params[0] = myRelId;
            params[1] = newRole;
            params[2] = oldRoleValue;
            String[] signature = new String[3];
            signature[0] = "java.lang.String";
            signature[1] = "javax.management.relation.Role";
            signature[2] = "java.util.List";

            // Can throw InstanceNotFoundException if the Relation Service
            // is not registered (to be transformed).
            //
            // Can throw a MBeanException wrapping a
            // RelationNotFoundException (to be raised in any case): wrapped
            // exception to be thrown
            //
            // Shall not throw a ReflectionException
            try {
                myRelServiceMBeanServer.invoke(myRelServiceName,
                                               "sendRoleUpdateNotification",
                                               params,
                                               signature);
            } catch (ReflectionException exc1) {
                throw new RuntimeException(exc1.getMessage());
            } catch (InstanceNotFoundException exc2) {
                throw new RelationServiceNotRegisteredException(
                                                            exc2.getMessage());
            } catch (MBeanException exc3) {
                Exception wrappedExc = exc3.getTargetException();
                if (wrappedExc instanceof RelationNotFoundException) {
                    throw ((RelationNotFoundException)wrappedExc);
                } else {
                    throw new RuntimeException(wrappedExc.getMessage());
                }
            }
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "sendRoleUpdateNotification");
        return;
!!!9926530.java!!!	updateRelationServiceMap(inout newRole : Role, inout oldRoleValue : List, inout relationServCallFlg : boolean, inout relationServ : RelationService) : void

        if (newRole == null ||
            oldRoleValue == null ||
            (relationServCallFlg && relationServ == null)) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "updateRelationServiceMap", new Object[] {newRole,
                oldRoleValue, relationServCallFlg, relationServ});

        if (relationServCallFlg) {
            // Direct call to the Relation Service
            // Shall not throw a RelationNotFoundException
            try {
                relationServ.updateRoleMap(myRelId,
                                         newRole,
                                         oldRoleValue);
            } catch (RelationNotFoundException exc) {
                throw new RuntimeException(exc.getMessage());
            }

        } else {
            Object[] params = new Object[3];
            params[0] = myRelId;
            params[1] = newRole;
            params[2] = oldRoleValue;
            String[] signature = new String[3];
            signature[0] = "java.lang.String";
            signature[1] = "javax.management.relation.Role";
            signature[2] = "java.util.List";
            // Can throw InstanceNotFoundException if the Relation Service
            // is not registered (to be transformed).
            // Can throw a MBeanException wrapping a RelationNotFoundException:
            // wrapped exception to be thrown
            //
            // Shall not throw a ReflectionException
            try {
                myRelServiceMBeanServer.invoke(myRelServiceName,
                                               "updateRoleMap",
                                               params,
                                               signature);
            } catch (ReflectionException exc1) {
                throw new RuntimeException(exc1.getMessage());
            } catch (InstanceNotFoundException exc2) {
                throw new
                     RelationServiceNotRegisteredException(exc2.getMessage());
            } catch (MBeanException exc3) {
                Exception wrappedExc = exc3.getTargetException();
                if (wrappedExc instanceof RelationNotFoundException) {
                    throw ((RelationNotFoundException)wrappedExc);
                } else {
                    throw new RuntimeException(wrappedExc.getMessage());
                }
            }
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "updateRelationServiceMap");
        return;
!!!9926658.java!!!	setRolesInt(inout list : RoleList, inout relationServCallFlg : boolean, inout relationServ : RelationService) : RoleResult

        if (list == null ||
            (relationServCallFlg && relationServ == null)) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "setRolesInt",
                new Object[] {list, relationServCallFlg, relationServ});

        RoleList roleList = new RoleList();
        RoleUnresolvedList roleUnresList = new RoleUnresolvedList();

        for (Role currRole : list.asList()) {

            Object currResult = null;
            // Can throw:
            // RelationServiceNotRegisteredException,
            // RelationTypeNotFoundException
            //
            // Will not throw, due to parameters, RoleNotFoundException or
            // InvalidRoleValueException, but catch them to keep compiler
            // happy
            try {
                currResult = setRoleInt(currRole,
                                        relationServCallFlg,
                                        relationServ,
                                        true);
            } catch (RoleNotFoundException exc1) {
                // OK : Do not throw a RoleNotFoundException.
            } catch (InvalidRoleValueException exc2) {
                // OK : Do not throw an InvalidRoleValueException.
            }

            if (currResult instanceof Role) {
                // Can throw IllegalArgumentException if role is null
                // (normally should not happen :(
                try {
                    roleList.add((Role)currResult);
                } catch (IllegalArgumentException exc) {
                    throw new RuntimeException(exc.getMessage());
                }

            } else if (currResult instanceof RoleUnresolved) {
                // Can throw IllegalArgumentException if role is null
                // (normally should not happen :(
                try {
                    roleUnresList.add((RoleUnresolved)currResult);
                } catch (IllegalArgumentException exc) {
                    throw new RuntimeException(exc.getMessage());
                }
            }
        }

        RoleResult result = new RoleResult(roleList, roleUnresList);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "setRolesInt");
        return result;
!!!9926786.java!!!	initMembers(inout relationId : String, inout relationServiceName : ObjectName, inout relationServiceMBeanServer : MBeanServer, inout relationTypeName : String, inout list : RoleList) : void

        if (relationId == null ||
            relationServiceName == null ||
            relationTypeName == null) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "initMembers", new Object[] {relationId, relationServiceName,
                relationServiceMBeanServer, relationTypeName, list});

        myRelId = relationId;
        myRelServiceName = relationServiceName;
        myRelServiceMBeanServer = relationServiceMBeanServer;
        myRelTypeName = relationTypeName;
        // Can throw InvalidRoleValueException
        initRoleMap(list);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "initMembers");
        return;
!!!9926914.java!!!	initRoleMap(inout list : RoleList) : void

        if (list == null) {
            return;
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "initRoleMap", list);

        synchronized(myRoleName2ValueMap) {

            for (Role currRole : list.asList()) {

                // No need to check if role is null, it is not allowed to store
                // a null role in a RoleList :)
                String currRoleName = currRole.getRoleName();

                if (myRoleName2ValueMap.containsKey(currRoleName)) {
                    // Role already provided in current list
                    StringBuilder excMsgStrB = new StringBuilder("Role name ");
                    excMsgStrB.append(currRoleName);
                    excMsgStrB.append(" used for two roles.");
                    throw new InvalidRoleValueException(excMsgStrB.toString());
                }

                myRoleName2ValueMap.put(currRoleName,
                                        (Role)(currRole.clone()));
            }
        }

        RELATION_LOGGER.exiting(RelationSupport.class.getName(), "initRoleMap");
        return;
!!!9927042.java!!!	handleMBeanUnregistrationInt(inout objectName : ObjectName, inout roleName : String, inout relationServCallFlg : boolean, inout relationServ : RelationService) : void

        if (objectName == null ||
            roleName == null ||
            (relationServCallFlg && relationServ == null)) {
            String excMsg = "Invalid parameter.";
            throw new IllegalArgumentException(excMsg);
        }

        RELATION_LOGGER.entering(RelationSupport.class.getName(),
                "handleMBeanUnregistrationInt", new Object[] {objectName,
                roleName, relationServCallFlg, relationServ});

        // Retrieves current role value
        Role role;
        synchronized(myRoleName2ValueMap) {
            role = (myRoleName2ValueMap.get(roleName));
        }

        if (role == null) {
            StringBuilder excMsgStrB = new StringBuilder();
            String excMsg = "No role with name ";
            excMsgStrB.append(excMsg);
            excMsgStrB.append(roleName);
            throw new RoleNotFoundException(excMsgStrB.toString());
        }
        List<ObjectName> currRoleValue = role.getRoleValue();

        // Note: no need to test if list not null before cloning, null value
        //       not allowed for role value.
        List<ObjectName> newRoleValue = new ArrayList<ObjectName>(currRoleValue);
        newRoleValue.remove(objectName);
        Role newRole = new Role(roleName, newRoleValue);

        // Can throw InvalidRoleValueException,
        // RelationTypeNotFoundException
        // (RoleNotFoundException already detected)
        Object result =
            setRoleInt(newRole, relationServCallFlg, relationServ, false);

        RELATION_LOGGER.exiting(RelationSupport.class.getName(),
                "handleMBeanUnregistrationInt");
        return;
