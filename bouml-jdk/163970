format 222
"xslt" // jdk1.8::com::sun::org::apache::xalan::internal::xslt
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xalan/internal/xslt/"
  java_package "com.sun.org.apache.xalan.internal.xslt"
  classview 157570 "xslt"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 589442 "EnvironmentCheck"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class to report simple information about the environment.
Simplistic reporting about certain classes found in your JVM may
help answer some FAQs for simple problems.

<p>Usage-command line:
<code>
java com.sun.org.apache.xalan.internal.xslt.EnvironmentCheck [-out outFile]
</code></p>

<p>Usage-from program:
<code>
boolean environmentOK =
(new EnvironmentCheck()).checkEnvironment(yourPrintWriter);
</code></p>

<p>Usage-from stylesheet:
<code><pre>
   &lt;?xml version=\"1.0\"?&gt;
   &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"
       xmlns:xalan=\"http://xml.apache.org/xalan\"
       exclude-result-prefixes=\"xalan\"&gt;
   &lt;xsl:output indent=\"yes\"/&gt;
   &lt;xsl:template match=\"/\"&gt;
     &lt;xsl:copy-of select=\"xalan:checkEnvironment()\"/&gt;
   &lt;/xsl:template&gt;
   &lt;/xsl:stylesheet&gt;
</pre></code></p>

<p>Xalan users reporting problems are encouraged to use this class
to see if there are potential problems with their actual
Java environment <b>before</b> reporting a bug.  Note that you
should both check from the JVM/JRE's command line as well as
temporarily calling checkEnvironment() directly from your code,
since the classpath may differ (especially for servlets, etc).</p>

<p>Also see http://xml.apache.org/xalan-j/faq.html</p>

<p>Note: This class is pretty simplistic:
results are not necessarily definitive nor will it find all
problems related to environment setup.  Also, you should avoid
calling this in deployed production code, both because it is
quite slow and because it forces classes to get loaded.</p>

<p>Note: This class explicitly has very limited compile-time
dependencies to enable easy compilation and usage even when
Xalan, DOM/SAX/JAXP, etc. are not present.</p>

<p>Note: for an improved version of this utility, please see
the xml-commons' project Which utility which does the same kind
of thing but in a much simpler manner.</p>

@author Shane_Curcuru@us.ibm.com
@version $Id: EnvironmentCheck.java,v 1.10 2010-11-01 04:34:13 joehw Exp $
"
      operation 3667202 "main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Command line runnability: checks for [-out outFilename] arg.
<p>Command line entrypoint; Sets output and calls
{@link #checkEnvironment(PrintWriter)}.</p>
@param args command line args
"
      end

      operation 3667330 "checkEnvironment"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "pw" type class_ref 195330 // PrintWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Programmatic entrypoint: Report on basic Java environment
and CLASSPATH settings that affect Xalan.

<p>Note that this class is not advanced enough to tell you
everything about the environment that affects Xalan, and
sometimes reports errors that will not actually affect
Xalan's behavior.  Currently, it very simplistically
checks the JVM's environment for some basic properties and
logs them out; it will report a problem if it finds a setting
or .jar file that is <i>likely</i> to cause problems.</p>

<p>Advanced users can peruse the code herein to help them
investigate potential environment problems found; other users
may simply send the output from this tool along with any bugs
they submit to help us in the debugging process.</p>

@param pw PrintWriter to send output to; can be sent to a
file that will look similar to a Properties file; defaults
to System.out if null
@return true if your environment appears to have no major
problems; false if potential environment problems found
@see #getEnvironmentHash()
"
      end

      operation 3667458 "getEnvironmentHash"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fill a hash with basic environment settings that affect Xalan.

<p>Worker method called from various places.</p>
<p>Various system and CLASSPATH, etc. properties are put into
the hash as keys with a brief description of the current state
of that item as the value.  Any serious problems will be put in
with a key that is prefixed with {@link #ERROR 'ERROR.'} so it
stands out in any resulting report; also a key with just that
constant will be set as well for any error.</p>
<p>Note that some legitimate cases are flaged as potential
errors - namely when a developer recompiles xalan.jar on their
own - and even a non-error state doesn't guaruntee that
everything in the environment is correct.  But this will help
point out the most common classpath and system property
problems that we've seen.</p>

@return Map full of useful environment info about Xalan and related
system properties, etc.
"
      end

      operation 3667586 "writeEnvironmentReport"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump a basic Xalan environment report to outWriter.

<p>This dumps a simple header and then each of the entries in
the Map to our PrintWriter; it does special processing
for entries that are .jars found in the classpath.</p>

@param h Map of items to report on; presumably
filled in by our various check*() methods
@return true if your environment appears to have no major
problems; false if potential environment problems found
@see #appendEnvironmentReport(Node, Document, Map)
for an equivalent that appends to a Node instead
"
      end

      classrelation 1575170 // ERROR (<unidirectional association>)
	relation 1575170 --->
	  a role_name "ERROR" init_value " \"ERROR.\"" class_relation const_relation public
	    comment " Prefixed to hash keys that signify serious problems.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1575170 // ERROR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1575298 // WARNING (<unidirectional association>)
	relation 1575298 --->
	  a role_name "WARNING" init_value " \"WARNING.\"" class_relation const_relation public
	    comment " Added to descriptions that signify potential problems.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1575298 // WARNING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1575426 // ERROR_FOUND (<unidirectional association>)
	relation 1575426 --->
	  a role_name "ERROR_FOUND" init_value " \"At least one error was found!\"" class_relation const_relation public
	    comment " Value for any error found.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1575426 // ERROR_FOUND (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1575554 // VERSION (<unidirectional association>)
	relation 1575554 --->
	  a role_name "VERSION" init_value " \"version.\"" class_relation const_relation public
	    comment " Prefixed to hash keys that signify version numbers.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1575554 // VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1575682 // FOUNDCLASSES (<unidirectional association>)
	relation 1575682 --->
	  a role_name "FOUNDCLASSES" init_value " \"foundclasses.\"" class_relation const_relation public
	    comment " Prefixed to hash keys that signify .jars found in classpath.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1575682 // FOUNDCLASSES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1575810 // CLASS_PRESENT (<unidirectional association>)
	relation 1575810 --->
	  a role_name "CLASS_PRESENT" init_value " \"present-unknown-version\"" class_relation const_relation public
	    comment " Marker that a class or .jar was found.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1575810 // CLASS_PRESENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1575938 // CLASS_NOTPRESENT (<unidirectional association>)
	relation 1575938 --->
	  a role_name "CLASS_NOTPRESENT" init_value " \"not-present\"" class_relation const_relation public
	    comment " Marker that a class or .jar was not found.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1575938 // CLASS_NOTPRESENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1576066 // jarNames (<unidirectional association>)
	relation 1576066 --->
	  a role_name "jarNames" multiplicity "[]" init_value "
  {
    \"xalan.jar\", \"xalansamples.jar\", \"xalanj1compat.jar\", \"xalanservlet.jar\",
    \"serializer.jar\",   // Serializer (shared between Xalan & Xerces)
    \"xerces.jar\",       // Xerces-J 1.x
    \"xercesImpl.jar\",   // Xerces-J 2.x
    \"testxsl.jar\",
    \"crimson.jar\",
    \"lotusxsl.jar\",
    \"jaxp.jar\", \"parser.jar\", \"dom.jar\", \"sax.jar\", \"xml.jar\",
    \"xml-apis.jar\",
    \"xsltc.jar\"
  }" public
	    comment " Listing of common .jar files that include Xalan-related classes.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1576066 // jarNames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 3667714 "logFoundJars"
	protected explicit_return_type "boolean"
	nparams 2
	  param inout name "v" type class_ref 175362 // List
	  param inout name "desc" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Map> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print out report of .jars found in a classpath.

Takes the information encoded from a checkPathForJars()
call and dumps it out to our PrintWriter.

@param v List of Maps of .jar file info
@param desc description to print out in header

@return false if OK, true if any .jars were reported
as having errors
@see #checkPathForJars(String, String[])
"
      end

      operation 3667842 "appendEnvironmentReport"
	public explicit_return_type "void"
	nparams 3
	  param inout name "container" type class_ref 317570 // Node
	  param inout name "factory" type class_ref 378626 // Document
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, Object> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stylesheet extension entrypoint: Dump a basic Xalan
environment report from getEnvironmentHash() to a Node.

<p>Copy of writeEnvironmentReport that creates a Node suitable
for other processing instead of a properties-like text output.
</p>
@param container Node to append our report to
@param factory Document providing createElement, etc. services
@param h Hash presumably from {@link #getEnvironmentHash()}
@see #writeEnvironmentReport(Map)
for an equivalent that writes to a PrintWriter instead
"
      end

      operation 3667970 "appendFoundJars"
	protected explicit_return_type "boolean"
	nparams 4
	  param inout name "container" type class_ref 317570 // Node
	  param inout name "factory" type class_ref 378626 // Document
	  param inout name "v" type class_ref 175362 // List
	  param inout name "desc" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<Map> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print out report of .jars found in a classpath.

Takes the information encoded from a checkPathForJars()
call and dumps it out to our PrintWriter.

@param container Node to append our report to
@param factory Document providing createElement, etc. services
@param v Map of Maps of .jar file info
@param desc description to print out in header

@return false if OK, true if any .jars were reported
as having errors
@see #checkPathForJars(String, String[])
"
      end

      operation 3668098 "checkSystemProperties"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fillin hash with info about SystemProperties.

Logs java.class.path and other likely paths; then attempts
to search those paths for .jar files with Xalan-related classes.

//@todo NOTE: We don't actually search java.ext.dirs for
//  *.jar files therein! This should be updated

@param h Map to put information in
@see #jarNames
@see #checkPathForJars(String, String[])
"
      end

      operation 3668226 "checkPathForJars"
	protected return_type class_ref 175362 // List
	nparams 2
	  param inout name "cp" type class_ref 128130 // String
	  param inout name "jars" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map> ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cheap-o listing of specified .jars found in the classpath.

cp should be separated by the usual File.pathSeparator.  We
then do a simplistic search of the path for any requested
.jar filenames, and return a listing of their names and
where (apparently) they came from.

@param cp classpath to search
@param jars array of .jar base filenames to look for

@return List of Maps filled with info about found .jars
@see #jarNames
@see #logFoundJars(Map, String)
@see #appendFoundJars(Node, Document, Map, String )
@see #getApparentVersion(String, long)
"
      end

      operation 3668354 "getApparentVersion"
	protected return_type class_ref 128130 // String
	nparams 2
	  param inout name "jarName" type class_ref 128130 // String
	  param in name "jarSize" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cheap-o method to determine the product version of a .jar.

Currently does a lookup into a local table of some recent
shipped Xalan builds to determine where the .jar probably
came from.  Note that if you recompile Xalan or Xerces
yourself this will likely report a potential error, since
we can't certify builds other than the ones we ship.
Only reports against selected posted Xalan-J builds.

//@todo actually look up version info in manifests

@param jarName base filename of the .jarfile
@param jarSize size of the .jarfile

@return String describing where the .jar file probably
came from
"
      end

      operation 3668482 "checkJAXPVersion"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report version information about JAXP interfaces.

Currently distinguishes between JAXP 1.0.1 and JAXP 1.1,
and not found; only tests the interfaces, and does not
check for reference implementation versions.

@param h Map to put information in
"
      end

      operation 3668610 "checkProcessorVersion"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report product version information from Xalan-J.

Looks for version info in xalan.jar from Xalan-J products.

@param h Map to put information in
"
      end

      operation 3668738 "checkParserVersion"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report product version information from common parsers.

Looks for version info in xerces.jar/xercesImpl.jar/crimson.jar.

//@todo actually look up version info in crimson manifest

@param h Map to put information in
"
      end

      operation 3668866 "checkAntVersion"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report product version information from Ant.

@param h Map to put information in
"
      end

      operation 3668994 "checkDOML3"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report version info from DOM interfaces.

@param h Map to put information in
"
      end

      operation 3669122 "checkDOMVersion"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report version info from DOM interfaces.

Currently distinguishes between pre-DOM level 2, the DOM
level 2 working draft, the DOM level 2 final draft,
and not found.

@param h Map to put information in
"
      end

      operation 3669250 "checkSAXVersion"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report version info from SAX interfaces.

Currently distinguishes between SAX 2, SAX 2.0beta2,
SAX1, and not found.

@param h Map to put information in
"
      end

      classrelation 1576194 // JARVERSIONS (<unidirectional association>)
	relation 1576194 --->
	  a role_name "JARVERSIONS" class_relation const_relation private
	    comment "
Manual table of known .jar sizes.
Only includes shipped versions of certain projects.
key=jarsize, value=jarname ' from ' distro name
Note assumption: two jars cannot have the same size!

@see #getApparentVersion(String, long)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Long, String> ${name}${value};
"
	    classrelation_ref 1576194 // JARVERSIONS (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 140674 "initialization"
	
	cpp "" ""
	java "  static {
    Map<Long, String> jarVersions = new HashMap<>();
    jarVersions.put(new Long(857192), \"xalan.jar from xalan-j_1_1\");
    jarVersions.put(new Long(440237), \"xalan.jar from xalan-j_1_2\");
    jarVersions.put(new Long(436094), \"xalan.jar from xalan-j_1_2_1\");
    jarVersions.put(new Long(426249), \"xalan.jar from xalan-j_1_2_2\");
    jarVersions.put(new Long(702536), \"xalan.jar from xalan-j_2_0_0\");
    jarVersions.put(new Long(720930), \"xalan.jar from xalan-j_2_0_1\");
    jarVersions.put(new Long(732330), \"xalan.jar from xalan-j_2_1_0\");
    jarVersions.put(new Long(872241), \"xalan.jar from xalan-j_2_2_D10\");
    jarVersions.put(new Long(882739), \"xalan.jar from xalan-j_2_2_D11\");
    jarVersions.put(new Long(923866), \"xalan.jar from xalan-j_2_2_0\");
    jarVersions.put(new Long(905872), \"xalan.jar from xalan-j_2_3_D1\");
    jarVersions.put(new Long(906122), \"xalan.jar from xalan-j_2_3_0\");
    jarVersions.put(new Long(906248), \"xalan.jar from xalan-j_2_3_1\");
    jarVersions.put(new Long(983377), \"xalan.jar from xalan-j_2_4_D1\");
    jarVersions.put(new Long(997276), \"xalan.jar from xalan-j_2_4_0\");
    jarVersions.put(new Long(1031036), \"xalan.jar from xalan-j_2_4_1\");
    // Stop recording xalan.jar sizes as of Xalan Java 2.5.0

    jarVersions.put(new Long(596540), \"xsltc.jar from xalan-j_2_2_0\");
    jarVersions.put(new Long(590247), \"xsltc.jar from xalan-j_2_3_D1\");
    jarVersions.put(new Long(589914), \"xsltc.jar from xalan-j_2_3_0\");
    jarVersions.put(new Long(589915), \"xsltc.jar from xalan-j_2_3_1\");
    jarVersions.put(new Long(1306667), \"xsltc.jar from xalan-j_2_4_D1\");
    jarVersions.put(new Long(1328227), \"xsltc.jar from xalan-j_2_4_0\");
    jarVersions.put(new Long(1344009), \"xsltc.jar from xalan-j_2_4_1\");
    jarVersions.put(new Long(1348361), \"xsltc.jar from xalan-j_2_5_D1\");
    // Stop recording xsltc.jar sizes as of Xalan Java 2.5.0

    jarVersions.put(new Long(1268634), \"xsltc.jar-bundled from xalan-j_2_3_0\");

    jarVersions.put(new Long(100196), \"xml-apis.jar from xalan-j_2_2_0 or xalan-j_2_3_D1\");
    jarVersions.put(new Long(108484), \"xml-apis.jar from xalan-j_2_3_0, or xalan-j_2_3_1 from xml-commons-1.0.b2\");
    jarVersions.put(new Long(109049), \"xml-apis.jar from xalan-j_2_4_0 from xml-commons RIVERCOURT1 branch\");
    jarVersions.put(new Long(113749), \"xml-apis.jar from xalan-j_2_4_1 from factoryfinder-build of xml-commons RIVERCOURT1\");
    jarVersions.put(new Long(124704), \"xml-apis.jar from tck-jaxp-1_2_0 branch of xml-commons\");
    jarVersions.put(new Long(124724), \"xml-apis.jar from tck-jaxp-1_2_0 branch of xml-commons, tag: xml-commons-external_1_2_01\");
    jarVersions.put(new Long(194205), \"xml-apis.jar from head branch of xml-commons, tag: xml-commons-external_1_3_02\");

    // If the below were more common I would update it to report
    //  errors better; but this is so old hardly anyone has it
    jarVersions.put(new Long(424490), \"xalan.jar from Xerces Tools releases - ERROR:DO NOT USE!\");

    jarVersions.put(new Long(1591855), \"xerces.jar from xalan-j_1_1 from xerces-1...\");
    jarVersions.put(new Long(1498679), \"xerces.jar from xalan-j_1_2 from xerces-1_2_0.bin\");
    jarVersions.put(new Long(1484896), \"xerces.jar from xalan-j_1_2_1 from xerces-1_2_1.bin\");
    jarVersions.put(new Long(804460),  \"xerces.jar from xalan-j_1_2_2 from xerces-1_2_2.bin\");
    jarVersions.put(new Long(1499244), \"xerces.jar from xalan-j_2_0_0 from xerces-1_2_3.bin\");
    jarVersions.put(new Long(1605266), \"xerces.jar from xalan-j_2_0_1 from xerces-1_3_0.bin\");
    jarVersions.put(new Long(904030), \"xerces.jar from xalan-j_2_1_0 from xerces-1_4.bin\");
    jarVersions.put(new Long(904030), \"xerces.jar from xerces-1_4_0.bin\");
    jarVersions.put(new Long(1802885), \"xerces.jar from xerces-1_4_2.bin\");
    jarVersions.put(new Long(1734594), \"xerces.jar from Xerces-J-bin.2.0.0.beta3\");
    jarVersions.put(new Long(1808883), \"xerces.jar from xalan-j_2_2_D10,D11,D12 or xerces-1_4_3.bin\");
    jarVersions.put(new Long(1812019), \"xerces.jar from xalan-j_2_2_0\");
    jarVersions.put(new Long(1720292), \"xercesImpl.jar from xalan-j_2_3_D1\");
    jarVersions.put(new Long(1730053), \"xercesImpl.jar from xalan-j_2_3_0 or xalan-j_2_3_1 from xerces-2_0_0\");
    jarVersions.put(new Long(1728861), \"xercesImpl.jar from xalan-j_2_4_D1 from xerces-2_0_1\");
    jarVersions.put(new Long(972027), \"xercesImpl.jar from xalan-j_2_4_0 from xerces-2_1\");
    jarVersions.put(new Long(831587), \"xercesImpl.jar from xalan-j_2_4_1 from xerces-2_2\");
    jarVersions.put(new Long(891817), \"xercesImpl.jar from xalan-j_2_5_D1 from xerces-2_3\");
    jarVersions.put(new Long(895924), \"xercesImpl.jar from xerces-2_4\");
    jarVersions.put(new Long(1010806), \"xercesImpl.jar from Xerces-J-bin.2.6.2\");
    jarVersions.put(new Long(1203860), \"xercesImpl.jar from Xerces-J-bin.2.7.1\");

    jarVersions.put(new Long(37485), \"xalanj1compat.jar from xalan-j_2_0_0\");
    jarVersions.put(new Long(38100), \"xalanj1compat.jar from xalan-j_2_0_1\");

    jarVersions.put(new Long(18779), \"xalanservlet.jar from xalan-j_2_0_0\");
    jarVersions.put(new Long(21453), \"xalanservlet.jar from xalan-j_2_0_1\");
    jarVersions.put(new Long(24826), \"xalanservlet.jar from xalan-j_2_3_1 or xalan-j_2_4_1\");
    jarVersions.put(new Long(24831), \"xalanservlet.jar from xalan-j_2_4_1\");
    // Stop recording xalanservlet.jar sizes as of Xalan Java 2.5.0; now a .war file

    // For those who've downloaded JAXP from sun
    jarVersions.put(new Long(5618), \"jaxp.jar from jaxp1.0.1\");
    jarVersions.put(new Long(136133), \"parser.jar from jaxp1.0.1\");
    jarVersions.put(new Long(28404), \"jaxp.jar from jaxp-1.1\");
    jarVersions.put(new Long(187162), \"crimson.jar from jaxp-1.1\");
    jarVersions.put(new Long(801714), \"xalan.jar from jaxp-1.1\");
    jarVersions.put(new Long(196399), \"crimson.jar from crimson-1.1.1\");
    jarVersions.put(new Long(33323), \"jaxp.jar from crimson-1.1.1 or jakarta-ant-1.4.1b1\");
    jarVersions.put(new Long(152717), \"crimson.jar from crimson-1.1.2beta2\");
    jarVersions.put(new Long(88143), \"xml-apis.jar from crimson-1.1.2beta2\");
    jarVersions.put(new Long(206384), \"crimson.jar from crimson-1.1.3 or jakarta-ant-1.4.1b1\");

    // jakarta-ant: since many people use ant these days
    jarVersions.put(new Long(136198), \"parser.jar from jakarta-ant-1.3 or 1.2\");
    jarVersions.put(new Long(5537), \"jaxp.jar from jakarta-ant-1.3 or 1.2\");

    JARVERSIONS = Collections.unmodifiableMap(jarVersions);
  }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 1576322 // outWriter (<unidirectional association>)
	relation 1576322 --->
	  a role_name "outWriter" init_value " new PrintWriter(System.out, true)" protected
	    comment " Simple PrintWriter we send output to; defaults to System.out.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1576322 // outWriter (<unidirectional association>)
	  b parent class_ref 195330 // PrintWriter
      end

      operation 3669378 "logMsg"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bottleneck output: calls outWriter.println(s).
@param s String to print
"
      end
    end

    class 589570 "Process"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The main() method handles the Xalan command-line interface.
@xsl.usage general
"
      operation 3669506 "printArgOptions"
	class_operation protected explicit_return_type "void"
	nparams 1
	  param inout name "resbundle" type class_ref 249858 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints argument options.

@param resbundle Resource bundle
"
      end

      operation 3669634 "_main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "argv" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Command line interface to transform an XML document according to
the instructions found in an XSL stylesheet.
<p>The Process class provides basic functionality for
performing transformations from the command line.  To see a
list of arguments supported, call with zero arguments.</p>
<p>To set stylesheet parameters from the command line, use
<code>-PARAM name expression</code>. If you want to set the
parameter to a string value, simply pass the string value
as-is, and it will be interpreted as a string.  (Note: if
the value has spaces in it, you may need to quote it depending
on your shell environment).</p>

@param argv Input parameters from command line

 J2SE does not support Xalan interpretive
 main -> _main"
      end

      operation 3669762 "doExit"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " It is _much_ easier to debug under VJ++ if I can set a single breakpoint
before this blows itself out of the water...
(I keep checking this in, it keeps vanishing. Grr!)
"
      end

      operation 3669890 "waitForReturnKey"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "resbundle" type class_ref 249858 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wait for a return key to continue

@param resbundle The resource bundle
"
      end

      operation 3670018 "printInvalidXSLTCOption"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "option" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a message if an option cannot be used with -XSLTC.

@param option The option String
"
      end

      operation 3670146 "printInvalidXalanOption"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "option" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a message if an option can only be used with -XSLTC.

@param option The option String
"
      end
    end
  end

  deploymentview 150914 "xslt"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 404738 "EnvironmentCheck"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xalan.internal.utils.ObjectFactory;
import com.sun.org.apache.xalan.internal.utils.SecuritySupport;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 589442 // EnvironmentCheck
      end
      comment "Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: EnvironmentCheck.java,v 1.2.4.1 2005/09/09 07:13:59 pvedula Exp $
"
    end

    artifact 404866 "Process"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Vector;
import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Source;
import javax.xml.transform.Templates;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.URIResolver;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.sax.SAXTransformerFactory;
import javax.xml.transform.sax.TransformerHandler;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import com.sun.org.apache.xalan.internal.Version;
import com.sun.org.apache.xalan.internal.res.XSLMessages;
import com.sun.org.apache.xalan.internal.res.XSLTErrorResources;
import com.sun.org.apache.xalan.internal.utils.ObjectFactory;
import com.sun.org.apache.xalan.internal.utils.ConfigurationError;
import com.sun.org.apache.xalan.internal.utils.SecuritySupport;
import com.sun.org.apache.xml.internal.utils.DefaultErrorHandler;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.ContentHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;
${definition}"
      associated_elems
	class_ref 589570 // Process
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: Process.java,v 1.2.4.2 2005/09/15 18:21:57 jeffsuttor Exp $
"
    end
  end
end
