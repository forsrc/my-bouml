class ZipEntry
!!!9331714.java!!!	ZipEntry(inout name : String)
        Objects.requireNonNull(name, "name");
        if (name.length() > 0xFFFF) {
            throw new IllegalArgumentException("entry name too long");
        }
        this.name = name;
!!!9331842.java!!!	ZipEntry(inout e : ZipEntry)
        Objects.requireNonNull(e, "entry");
        name = e.name;
        xdostime = e.xdostime;
        mtime = e.mtime;
        atime = e.atime;
        ctime = e.ctime;
        crc = e.crc;
        size = e.size;
        csize = e.csize;
        method = e.method;
        flag = e.flag;
        extra = e.extra;
        comment = e.comment;
!!!9332098.java!!!	getName() : String
        return name;
!!!9332226.java!!!	setTime(in time : long) : void
        this.xdostime = javaToExtendedDosTime(time);
        // Avoid setting the mtime field if time is in the valid
        // range for a DOS time
        if (xdostime != DOSTIME_BEFORE_1980 && time <= UPPER_DOSTIME_BOUND) {
            this.mtime = null;
        } else {
            this.mtime = FileTime.from(time, TimeUnit.MILLISECONDS);
        }
!!!9332354.java!!!	getTime() : long
        if (mtime != null) {
            return mtime.toMillis();
        }
        return (xdostime != -1) ? extendedDosToJavaTime(xdostime) : -1;
!!!9332482.java!!!	setLastModifiedTime(inout time : FileTime) : ZipEntry
        this.mtime = Objects.requireNonNull(time, "lastModifiedTime");
        this.xdostime = javaToExtendedDosTime(time.to(TimeUnit.MILLISECONDS));
        return this;
!!!9332610.java!!!	getLastModifiedTime() : FileTime
        if (mtime != null)
            return mtime;
        if (xdostime == -1)
            return null;
        return FileTime.from(getTime(), TimeUnit.MILLISECONDS);
!!!9332738.java!!!	setLastAccessTime(inout time : FileTime) : ZipEntry
        this.atime = Objects.requireNonNull(time, "lastAccessTime");
        return this;
!!!9332866.java!!!	getLastAccessTime() : FileTime
        return atime;
!!!9332994.java!!!	setCreationTime(inout time : FileTime) : ZipEntry
        this.ctime = Objects.requireNonNull(time, "creationTime");
        return this;
!!!9333122.java!!!	getCreationTime() : FileTime
        return ctime;
!!!9333250.java!!!	setSize(in size : long) : void
        if (size < 0) {
            throw new IllegalArgumentException("invalid entry size");
        }
        this.size = size;
!!!9333378.java!!!	getSize() : long
        return size;
!!!9333506.java!!!	getCompressedSize() : long
        return csize;
!!!9333634.java!!!	setCompressedSize(in csize : long) : void
        this.csize = csize;
!!!9333762.java!!!	setCrc(in crc : long) : void
        if (crc < 0 || crc > 0xFFFFFFFFL) {
            throw new IllegalArgumentException("invalid entry crc-32");
        }
        this.crc = crc;
!!!9333890.java!!!	getCrc() : long
        return crc;
!!!9334018.java!!!	setMethod(in method : int) : void
        if (method != STORED && method != DEFLATED) {
            throw new IllegalArgumentException("invalid compression method");
        }
        this.method = method;
!!!9334146.java!!!	getMethod() : int
        return method;
!!!9334274.java!!!	setExtra(inout extra : byte [[]]) : void
        setExtra0(extra, false);
!!!9334402.java!!!	setExtra0(inout extra : byte [[]], inout doZIP64 : boolean) : void
        if (extra != null) {
            if (extra.length > 0xFFFF) {
                throw new IllegalArgumentException("invalid extra field length");
            }
            // extra fields are in "HeaderID(2)DataSize(2)Data... format
            int off = 0;
            int len = extra.length;
            while (off + 4 < len) {
                int tag = get16(extra, off);
                int sz = get16(extra, off + 2);
                off += 4;
                if (off + sz > len)         // invalid data
                    break;
                switch (tag) {
                case EXTID_ZIP64:
                    if (doZIP64) {
                        // LOC extra zip64 entry MUST include BOTH original
                        // and compressed file size fields.
                        // If invalid zip64 extra fields, simply skip. Even
                        // it's rare, it's possible the entry size happens to
                        // be the magic value and it "accidently" has some
                        // bytes in extra match the id.
                        if (sz >= 16) {
                            size = get64(extra, off);
                            csize = get64(extra, off + 8);
                        }
                    }
                    break;
                case EXTID_NTFS:
                    if (sz < 32) // reserved  4 bytes + tag 2 bytes + size 2 bytes
                        break;   // m[a|c]time 24 bytes
                    int pos = off + 4;               // reserved 4 bytes
                    if (get16(extra, pos) !=  0x0001 || get16(extra, pos + 2) != 24)
                        break;
                    mtime = winTimeToFileTime(get64(extra, pos + 4));
                    atime = winTimeToFileTime(get64(extra, pos + 12));
                    ctime = winTimeToFileTime(get64(extra, pos + 20));
                    break;
                case EXTID_EXTT:
                    int flag = Byte.toUnsignedInt(extra[off]);
                    int sz0 = 1;
                    // The CEN-header extra field contains the modification
                    // time only, or no timestamp at all. 'sz' is used to
                    // flag its presence or absence. But if mtime is present
                    // in LOC it must be present in CEN as well.
                    if ((flag & 0x1) != 0 && (sz0 + 4) <= sz) {
                        mtime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    if ((flag & 0x2) != 0 && (sz0 + 4) <= sz) {
                        atime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    if ((flag & 0x4) != 0 && (sz0 + 4) <= sz) {
                        ctime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    break;
                 default:
                }
                off += sz;
            }
        }
        this.extra = extra;
!!!9334530.java!!!	getExtra() : byte
        return extra;
!!!9334658.java!!!	setComment(inout comment : String) : void
        this.comment = comment;
!!!9334786.java!!!	getComment() : String
        return comment;
!!!9334914.java!!!	isDirectory() : boolean
        return name.endsWith("/");
!!!9335042.java!!!	toString() : String
        return getName();
!!!9335170.java!!!	hashCode() : int
        return name.hashCode();
!!!9335298.java!!!	clone() : Object
        try {
            ZipEntry e = (ZipEntry)super.clone();
            e.extra = (extra == null) ? null : extra.clone();
            return e;
        } catch (CloneNotSupportedException e) {
            // This should never happen, since we are Cloneable
            throw new InternalError(e);
        }
