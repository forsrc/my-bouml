class MatteBorder
!!!10868994.java!!!	MatteBorder(in top : int, in left : int, in bottom : int, in right : int, inout matteColor : Color)
        super(top, left, bottom, right);
        this.color = matteColor;
!!!10869122.java!!!	MatteBorder(inout borderInsets : Insets, inout matteColor : Color)
        super(borderInsets);
        this.color = matteColor;
!!!10869250.java!!!	MatteBorder(in top : int, in left : int, in bottom : int, in right : int, inout tileIcon : Icon)
        super(top, left, bottom, right);
        this.tileIcon = tileIcon;
!!!10869378.java!!!	MatteBorder(inout borderInsets : Insets, inout tileIcon : Icon)
        super(borderInsets);
        this.tileIcon = tileIcon;
!!!10869506.java!!!	MatteBorder(inout tileIcon : Icon)
        this(-1,-1,-1,-1, tileIcon);
!!!10869634.java!!!	paintBorder(inout c : Component, inout g : Graphics, in x : int, in y : int, in width : int, in height : int) : void
        Insets insets = getBorderInsets(c);
        Color oldColor = g.getColor();
        g.translate(x, y);

        // If the tileIcon failed loading, paint as gray.
        if (tileIcon != null) {
            color = (tileIcon.getIconWidth() == -1) ? Color.gray : null;
        }

        if (color != null) {
            g.setColor(color);
            g.fillRect(0, 0, width - insets.right, insets.top);
            g.fillRect(0, insets.top, insets.left, height - insets.top);
            g.fillRect(insets.left, height - insets.bottom, width - insets.left, insets.bottom);
            g.fillRect(width - insets.right, 0, insets.right, height - insets.bottom);

        } else if (tileIcon != null) {
            int tileW = tileIcon.getIconWidth();
            int tileH = tileIcon.getIconHeight();
            paintEdge(c, g, 0, 0, width - insets.right, insets.top, tileW, tileH);
            paintEdge(c, g, 0, insets.top, insets.left, height - insets.top, tileW, tileH);
            paintEdge(c, g, insets.left, height - insets.bottom, width - insets.left, insets.bottom, tileW, tileH);
            paintEdge(c, g, width - insets.right, 0, insets.right, height - insets.bottom, tileW, tileH);
        }
        g.translate(-x, -y);
        g.setColor(oldColor);

!!!10869762.java!!!	paintEdge(inout c : Component, inout g : Graphics, in x : int, in y : int, in width : int, in height : int, in tileW : int, in tileH : int) : void
        g = g.create(x, y, width, height);
        int sY = -(y % tileH);
        for (x = -(x % tileW); x < width; x += tileW) {
            for (y = sY; y < height; y += tileH) {
                this.tileIcon.paintIcon(c, g, x, y);
            }
        }
        g.dispose();
!!!10869890.java!!!	getBorderInsets(inout c : Component, inout insets : Insets) : Insets
        return computeInsets(insets);
!!!10870018.java!!!	getBorderInsets() : Insets
        return computeInsets(new Insets(0,0,0,0));
!!!10870146.java!!!	computeInsets(inout insets : Insets) : Insets
        if (tileIcon != null && top == -1 && bottom == -1 &&
            left == -1 && right == -1) {
            int w = tileIcon.getIconWidth();
            int h = tileIcon.getIconHeight();
            insets.top = h;
            insets.right = w;
            insets.bottom = h;
            insets.left = w;
        } else {
            insets.left = left;
            insets.top = top;
            insets.right = right;
            insets.bottom = bottom;
        }
        return insets;
!!!10870274.java!!!	getMatteColor() : Color
        return color;
!!!10870402.java!!!	getTileIcon() : Icon
        return tileIcon;
!!!10870530.java!!!	isBorderOpaque() : boolean
        // If a tileIcon is set, then it may contain transparent bits
        return color != null;
