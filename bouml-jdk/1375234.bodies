class DefaultTableModel
!!!11600258.java!!!	DefaultTableModel()
        this(0, 0);
!!!11600386.java!!!	newVector(in size : int) : Vector
        Vector v = new Vector(size);
        v.setSize(size);
        return v;
!!!11600514.java!!!	DefaultTableModel(in rowCount : int, in columnCount : int)
        this(newVector(columnCount), rowCount);
!!!11600642.java!!!	DefaultTableModel(inout columnNames : Vector, in rowCount : int)
        setDataVector(newVector(rowCount), columnNames);
!!!11600770.java!!!	DefaultTableModel(inout columnNames : Object [[]], in rowCount : int)
        this(convertToVector(columnNames), rowCount);
!!!11600898.java!!!	DefaultTableModel(inout data : Vector, inout columnNames : Vector)
        setDataVector(data, columnNames);
!!!11601026.java!!!	DefaultTableModel(inout data : Object [[][]], inout columnNames : Object [[]])
        setDataVector(data, columnNames);
!!!11601154.java!!!	getDataVector() : Vector
        return dataVector;
!!!11601282.java!!!	nonNullVector(inout v : Vector) : Vector
        return (v != null) ? v : new Vector();
!!!11601410.java!!!	setDataVector(inout dataVector : Vector, inout columnIdentifiers : Vector) : void
        this.dataVector = nonNullVector(dataVector);
        this.columnIdentifiers = nonNullVector(columnIdentifiers);
        justifyRows(0, getRowCount());
        fireTableStructureChanged();
!!!11601538.java!!!	setDataVector(inout dataVector : Object [[][]], inout columnIdentifiers : Object [[]]) : void
        setDataVector(convertToVector(dataVector), convertToVector(columnIdentifiers));
!!!11601666.java!!!	newDataAvailable(inout event : TableModelEvent) : void
        fireTableChanged(event);
!!!11601794.java!!!	justifyRows(in from : int, in to : int) : void
        // Sometimes the DefaultTableModel is subclassed
        // instead of the AbstractTableModel by mistake.
        // Set the number of rows for the case when getRowCount
        // is overridden.
        dataVector.setSize(getRowCount());

        for (int i = from; i < to; i++) {
            if (dataVector.elementAt(i) == null) {
                dataVector.setElementAt(new Vector(), i);
            }
            ((Vector)dataVector.elementAt(i)).setSize(getColumnCount());
        }
!!!11601922.java!!!	newRowsAdded(inout e : TableModelEvent) : void
        justifyRows(e.getFirstRow(), e.getLastRow() + 1);
        fireTableChanged(e);
!!!11602050.java!!!	rowsRemoved(inout event : TableModelEvent) : void
        fireTableChanged(event);
!!!11602178.java!!!	setNumRows(in rowCount : int) : void
        int old = getRowCount();
        if (old == rowCount) {
            return;
        }
        dataVector.setSize(rowCount);
        if (rowCount <= old) {
            fireTableRowsDeleted(rowCount, old-1);
        }
        else {
            justifyRows(old, rowCount);
            fireTableRowsInserted(old, rowCount-1);
        }
!!!11602306.java!!!	setRowCount(in rowCount : int) : void
        setNumRows(rowCount);
!!!11602434.java!!!	addRow(inout rowData : Vector) : void
        insertRow(getRowCount(), rowData);
!!!11602562.java!!!	addRow(inout rowData : Object [[]]) : void
        addRow(convertToVector(rowData));
!!!11602690.java!!!	insertRow(in row : int, inout rowData : Vector) : void
        dataVector.insertElementAt(rowData, row);
        justifyRows(row, row+1);
        fireTableRowsInserted(row, row);
!!!11602818.java!!!	insertRow(in row : int, inout rowData : Object [[]]) : void
        insertRow(row, convertToVector(rowData));
!!!11602946.java!!!	gcd(in i : int, in j : int) : int
        return (j == 0) ? i : gcd(j, i%j);
!!!11603074.java!!!	rotate(inout v : Vector, in a : int, in b : int, in shift : int) : void
        int size = b - a;
        int r = size - shift;
        int g = gcd(size, r);
        for(int i = 0; i < g; i++) {
            int to = i;
            Object tmp = v.elementAt(a + to);
            for(int from = (to + r) % size; from != i; from = (to + r) % size) {
                v.setElementAt(v.elementAt(a + from), a + to);
                to = from;
            }
            v.setElementAt(tmp, a + to);
        }
!!!11603202.java!!!	moveRow(in start : int, in end : int, in to : int) : void
        int shift = to - start;
        int first, last;
        if (shift < 0) {
            first = to;
            last = end;
        }
        else {
            first = start;
            last = to + end - start;
        }
        rotate(dataVector, first, last + 1, shift);

        fireTableRowsUpdated(first, last);
!!!11603330.java!!!	removeRow(in row : int) : void
        dataVector.removeElementAt(row);
        fireTableRowsDeleted(row, row);
!!!11603458.java!!!	setColumnIdentifiers(inout columnIdentifiers : Vector) : void
        setDataVector(dataVector, columnIdentifiers);
!!!11603586.java!!!	setColumnIdentifiers(inout newIdentifiers : Object [[]]) : void
        setColumnIdentifiers(convertToVector(newIdentifiers));
!!!11603714.java!!!	setColumnCount(in columnCount : int) : void
        columnIdentifiers.setSize(columnCount);
        justifyRows(0, getRowCount());
        fireTableStructureChanged();
!!!11603842.java!!!	addColumn(inout columnName : Object) : void
        addColumn(columnName, (Vector)null);
!!!11603970.java!!!	addColumn(inout columnName : Object, inout columnData : Vector) : void
        columnIdentifiers.addElement(columnName);
        if (columnData != null) {
            int columnSize = columnData.size();
            if (columnSize > getRowCount()) {
                dataVector.setSize(columnSize);
            }
            justifyRows(0, getRowCount());
            int newColumn = getColumnCount() - 1;
            for(int i = 0; i < columnSize; i++) {
                  Vector row = (Vector)dataVector.elementAt(i);
                  row.setElementAt(columnData.elementAt(i), newColumn);
            }
        }
        else {
            justifyRows(0, getRowCount());
        }

        fireTableStructureChanged();
!!!11604098.java!!!	addColumn(inout columnName : Object, inout columnData : Object [[]]) : void
        addColumn(columnName, convertToVector(columnData));
!!!11604226.java!!!	getRowCount() : int
        return dataVector.size();
!!!11604354.java!!!	getColumnCount() : int
        return columnIdentifiers.size();
!!!11604482.java!!!	getColumnName(in column : int) : String
        Object id = null;
        // This test is to cover the case when
        // getColumnCount has been subclassed by mistake ...
        if (column < columnIdentifiers.size() && (column >= 0)) {
            id = columnIdentifiers.elementAt(column);
        }
        return (id == null) ? super.getColumnName(column)
                            : id.toString();
!!!11604610.java!!!	isCellEditable(in row : int, in column : int) : boolean
        return true;
!!!11604738.java!!!	getValueAt(in row : int, in column : int) : Object
        Vector rowVector = (Vector)dataVector.elementAt(row);
        return rowVector.elementAt(column);
!!!11604866.java!!!	setValueAt(inout aValue : Object, in row : int, in column : int) : void
        Vector rowVector = (Vector)dataVector.elementAt(row);
        rowVector.setElementAt(aValue, column);
        fireTableCellUpdated(row, column);
!!!11604994.java!!!	convertToVector(inout anArray : Object [[]]) : Vector
        if (anArray == null) {
            return null;
        }
        Vector<Object> v = new Vector<Object>(anArray.length);
        for (Object o : anArray) {
            v.addElement(o);
        }
        return v;
!!!11605122.java!!!	convertToVector(inout anArray : Object [[][]]) : Vector
        if (anArray == null) {
            return null;
        }
        Vector<Vector> v = new Vector<Vector>(anArray.length);
        for (Object[] o : anArray) {
            v.addElement(convertToVector(o));
        }
        return v;
