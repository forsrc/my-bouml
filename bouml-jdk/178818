format 222
"jgss" // jdk1.8::org::ietf::jgss
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/org/ietf/jgss/"
  java_package "org.ietf.jgss"
  classview 171906 "jgss"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 835970 "GSSContext"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface encapsulates the GSS-API security context and provides
the security services that are available over the context.  Security
contexts are established between peers using locally acquired
credentials.  Multiple contexts may exist simultaneously between a pair
of peers, using the same or different set of credentials.  GSS-API
functions in a manner independent of the underlying transport protocol
and depends on its calling application to transport the tokens that are
generated by the security context between the peers.<p>

If the caller instantiates the context using the default
<code>GSSManager</code> instance, then the Kerberos v5 GSS-API mechanism
is guaranteed to be available for context establishment. This mechanism
is identified by the Oid \"1.2.840.113554.1.2.2\" and is defined in RFC
1964.<p>

Before the context establishment phase is initiated, the context
initiator may request specific characteristics desired of the
established context. Not all underlying mechanisms support all
characteristics that a caller might desire. After the context is
established, the caller can check the actual characteristics and services
offered by that context by means of various query methods. When using
the Kerberos v5 GSS-API mechanism offered by the default
<code>GSSManager</code> instance, all optional services will be
available locally. They are mutual authentication, credential
delegation, confidentiality and integrity protection, and per-message
replay detection and sequencing. Note that in the GSS-API, message integrity
is a prerequisite for message confidentiality.<p>

The context establishment occurs in a loop where the
initiator calls {@link #initSecContext(byte[], int, int) initSecContext}
and the acceptor calls {@link #acceptSecContext(byte[], int, int)
acceptSecContext} until the context is established. While in this loop
the <code>initSecContext</code> and <code>acceptSecContext</code>
methods produce tokens that the application sends over to the peer. The
peer passes any such token as input to its <code>acceptSecContext</code>
or <code>initSecContext</code> as the case may be.<p>

During the context establishment phase, the {@link
#isProtReady() isProtReady} method may be called to determine if the
context can be used for the per-message operations of {@link
#wrap(byte[], int, int, MessageProp) wrap} and {@link #getMIC(byte[],
int, int, MessageProp) getMIC}.  This allows applications to use
per-message operations on contexts which aren't yet fully
established.<p>

After the context has been established or the <code>isProtReady</code>
method returns <code>true</code>, the query routines can be invoked to
determine the actual characteristics and services of the established
context.  The application can also start using the per-message methods
of {@link #wrap(byte[], int, int, MessageProp) wrap} and
{@link #getMIC(byte[], int, int, MessageProp) getMIC} to obtain
cryptographic operations on application supplied data.<p>

When the context is no longer needed, the application should call
{@link #dispose() dispose} to release any system resources the context
may be using.<p>

A security context typically maintains sequencing and replay detection
information about the tokens it processes. Therefore, the sequence in
which any tokens are presented to this context for processing can be
important. Also note that none of the methods in this interface are
synchronized. Therefore, it is not advisable to share a
<code>GSSContext</code> among several threads unless some application
level synchronization is in place.<p>

Finally, different mechanism providers might place different security
restrictions on using GSS-API contexts. These will be documented by the
mechanism provider. The application will need to ensure that it has the
appropriate permissions if such checks are made in the mechanism layer.<p>

The example code presented below demonstrates the usage of the
<code>GSSContext</code> interface for the initiating peer.  Different
operations on the <code>GSSContext</code> object are presented,
including: object instantiation, setting of desired flags, context
establishment, query of actual context flags, per-message operations on
application data, and finally context deletion.<p>

<pre>
   // Create a context using default credentials
   // and the implementation specific default mechanism
   GSSManager manager ...
   GSSName targetName ...
   GSSContext context = manager.createContext(targetName, null, null,
                                          GSSContext.INDEFINITE_LIFETIME);

   // set desired context options prior to context establishment
   context.requestConf(true);
   context.requestMutualAuth(true);
   context.requestReplayDet(true);
   context.requestSequenceDet(true);

   // establish a context between peers

   byte []inToken = new byte[0];

   // Loop while there still is a token to be processed

   while (!context.isEstablished()) {

       byte[] outToken
           = context.initSecContext(inToken, 0, inToken.length);

       // send the output token if generated
       if (outToken != null)
           sendToken(outToken);

       if (!context.isEstablished()) {
           inToken = readToken();
   }

    // display context information
    System.out.println(\"Remaining lifetime in seconds = \"
                                         + context.getLifetime());
    System.out.println(\"Context mechanism = \" + context.getMech());
    System.out.println(\"Initiator = \" + context.getSrcName());
    System.out.println(\"Acceptor = \" + context.getTargName());

    if (context.getConfState())
            System.out.println(\"Confidentiality (i.e., privacy) is available\");

    if (context.getIntegState())
            System.out.println(\"Integrity is available\");

    // perform wrap on an application supplied message, appMsg,
    // using QOP = 0, and requesting privacy service
    byte [] appMsg ...

    MessageProp mProp = new MessageProp(0, true);

    byte []tok = context.wrap(appMsg, 0, appMsg.length, mProp);

    sendToken(tok);

    // release the local-end of the context
    context.dispose();

</pre>

@author Mayank Upadhyay
@since 1.4
"
      attribute 1308162 "DEFAULT_LIFETIME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A lifetime constant representing the default context lifetime.  This
value is set to 0.

"
      end

      attribute 1308290 "INDEFINITE_LIFETIME"
	class_attribute const_attribute public explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A lifetime constant representing indefinite context lifetime.
This value must is set to the maximum integer value in Java -
{@link java.lang.Integer#MAX_VALUE Integer.MAX_VALUE}.

"
      end

      operation 5988482 "initSecContext"
	public explicit_return_type "byte"
	nparams 3
	  param inout name "inputBuf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the context initiator to start the context creation
phase and process any tokens generated
by the peer's <code>acceptSecContext</code> method.
This method may return an output token which the application will need
to send to the peer for processing by its <code>acceptSecContext</code>
method. The application can call {@link #isEstablished()
isEstablished} to determine if the context establishment phase is
complete on this side of the context.  A return value of
<code>false</code> from <code>isEstablished</code> indicates that
more tokens are expected to be supplied to
<code>initSecContext</code>.  Upon completion of the context
establishment, the available context options may be queried through
the get methods.<p>

Note that it is possible that the <code>initSecContext</code> method
return a token for the peer, and <code>isEstablished</code> return
<code>true</code> also. This indicates that the token needs to be sent
to the peer, but the local end of the context is now fully
established.<p>

Some mechanism providers might require that the caller be granted
permission to initiate a security context. A failed permission check
might cause a {@link java.lang.SecurityException SecurityException}
to be thrown from this method.<p>

@return a byte[] containing the token to be sent to the
peer. <code>null</code> indicates that no token is generated.
@param inputBuf token generated by the peer. This parameter is ignored
on the first call since no token has been received from the peer.
@param offset the offset within the inputBuf where the token begins.
@param len the length of the token.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},
  {@link GSSException#BAD_MIC GSSException.BAD_MIC},
  {@link GSSException#NO_CRED GSSException.NO_CRED},
  {@link GSSException#CREDENTIALS_EXPIRED
                                 GSSException.CREDENTIALS_EXPIRED},
  {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},
  {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},
  {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},
  {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
  {@link GSSException#BAD_MECH GSSException.BAD_MECH},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5988610 "initSecContext"
	public explicit_return_type "int"
	nparams 2
	  param inout name "inStream" type class_ref 146434 // InputStream
	  param inout name "outStream" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the context initiator to start the context creation
phase and process any tokens generated
by the peer's <code>acceptSecContext</code> method using
streams. This method may write an output token to the
<code>OutpuStream</code>, which the application will
need to send to the peer for processing by its
<code>acceptSecContext</code> call. Typically, the application would
ensure this by calling the  {@link java.io.OutputStream#flush() flush}
method on an <code>OutputStream</code> that encapsulates the
connection between the two peers. The application can
determine if a token is written to the OutputStream from the return
value of this method. A return value of <code>0</code> indicates that
no token was written. The application can call
{@link #isEstablished() isEstablished} to determine if the context
establishment phase is complete on this side of the context. A
return  value of <code>false</code> from <code>isEstablished</code>
indicates that more tokens are expected to be supplied to
<code>initSecContext</code>.
Upon completion of the context establishment, the available context
options may be queried through the get methods.<p>

Note that it is possible that the <code>initSecContext</code> method
return a token for the peer, and <code>isEstablished</code> return
<code>true</code> also. This indicates that the token needs to be sent
to the peer, but the local end of the context is now fully
established.<p>

The GSS-API authentication tokens contain a definitive start and
end. This method will attempt to read one of these tokens per
invocation, and may block on the stream if only part of the token is
available.  In all other respects this method is equivalent to the
byte array based {@link #initSecContext(byte[], int, int)
initSecContext}.<p>

Some mechanism providers might require that the caller be granted
permission to initiate a security context. A failed permission check
might cause a {@link java.lang.SecurityException SecurityException}
to be thrown from this method.<p>

The following example code demonstrates how this method might be
used:<p>
<pre>
    InputStream is ...
    OutputStream os ...
    GSSContext context ...

    // Loop while there is still a token to be processed

    while (!context.isEstablished()) {

        context.initSecContext(is, os);

        // send output token if generated
        os.flush();
    }
</pre>


@return the number of bytes written to the OutputStream as part of the
token to be sent to the peer. A value of 0 indicates that no token
needs to be sent.
@param inStream an InputStream that contains the token generated by
the peer. This parameter is ignored on the first call since no token
has been or will be received from the peer at that point.
@param outStream an OutputStream where the output token will be
written. During the final stage of context establishment, there may be
no bytes written.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},
  {@link GSSException#BAD_MIC GSSException.BAD_MIC},
  {@link GSSException#NO_CRED GSSException.NO_CRED},
  {@link GSSException#CREDENTIALS_EXPIRED GSSException.CREDENTIALS_EXPIRED},
  {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},
  {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},
  {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},
  {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
  {@link GSSException#BAD_MECH GSSException.BAD_MECH},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5988738 "acceptSecContext"
	public explicit_return_type "byte"
	nparams 3
	  param inout name "inToken" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the context acceptor upon receiving a token from the
peer. This method may return an output token which the application
will need to send to the peer for further processing by its
<code>initSecContext</code> call.<p>

The application can call {@link #isEstablished() isEstablished} to
determine if the context establishment phase is complete for this
peer.  A return value of <code>false</code> from
<code>isEstablished</code> indicates that more tokens are expected to
be supplied to this method.    Upon completion of the context
establishment, the available context options may be queried through
the get methods.<p>

Note that it is possible that <code>acceptSecContext</code> return a
token for the peer, and <code>isEstablished</code> return
<code>true</code> also.  This indicates that the token needs to be
sent to the peer, but the local end of the context is now fully
established.<p>

Some mechanism providers might require that the caller be granted
permission to accept a security context. A failed permission check
might cause a {@link java.lang.SecurityException SecurityException}
to be thrown from this method.<p>

The following example code demonstrates how this method might be
used:<p>
<pre>
    byte[] inToken;
    byte[] outToken;
    GSSContext context ...

    // Loop while there is still a token to be processed

    while (!context.isEstablished()) {
        inToken = readToken();
        outToken = context.acceptSecContext(inToken, 0,
                                            inToken.length);
        // send output token if generated
        if (outToken != null)
            sendToken(outToken);
    }
</pre>


@return a byte[] containing the token to be sent to the
peer. <code>null</code> indicates that no token is generated.
@param inToken token generated by the peer.
@param offset the offset within the inToken where the token begins.
@param len the length of the token.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},
  {@link GSSException#BAD_MIC GSSException.BAD_MIC},
  {@link GSSException#NO_CRED GSSException.NO_CRED},
  {@link GSSException#CREDENTIALS_EXPIRED
                              GSSException.CREDENTIALS_EXPIRED},
  {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},
  {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},
  {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},
  {@link GSSException#BAD_MECH GSSException.BAD_MECH},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5988866 "acceptSecContext"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inStream" type class_ref 146434 // InputStream
	  param inout name "outStream" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the context acceptor to process a token from the peer using
streams.   It may write an output token to the
<code>OutputStream</code>, which the application
will need to send to the peer for processing by its
<code>initSecContext</code> method.  Typically, the application would
ensure this by calling the  {@link java.io.OutputStream#flush() flush}
method on an <code>OutputStream</code> that encapsulates the
connection between the two peers. The application can call
{@link #isEstablished() isEstablished} to determine if the context
establishment phase is complete on this side of the context. A
return  value of <code>false</code> from <code>isEstablished</code>
indicates that more tokens are expected to be supplied to
<code>acceptSecContext</code>.
Upon completion of the context establishment, the available context
options may be queried through the get methods.<p>

Note that it is possible that <code>acceptSecContext</code> return a
token for the peer, and <code>isEstablished</code> return
<code>true</code> also.  This indicates that the token needs to be
sent to the peer, but the local end of the context is now fully
established.<p>

The GSS-API authentication tokens contain a definitive start and
end. This method will attempt to read one of these tokens per
invocation, and may block on the stream if only part of the token is
available. In all other respects this method is equivalent to the byte
array based {@link #acceptSecContext(byte[], int, int)
acceptSecContext}.<p>

Some mechanism providers might require that the caller be granted
permission to accept a security context. A failed permission check
might cause a {@link java.lang.SecurityException SecurityException}
to be thrown from this method.<p>

The following example code demonstrates how this method might be
used:<p>
<pre>
    InputStream is ...
    OutputStream os ...
    GSSContext context ...

    // Loop while there is still a token to be processed

    while (!context.isEstablished()) {

        context.acceptSecContext(is, os);

        // send output token if generated
        os.flush();
    }
</pre>


@param inStream an InputStream that contains the token generated by
the peer.
@param outStream an OutputStream where the output token will be
written. During the final stage of context establishment, there may be
no bytes written.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},
  {@link GSSException#BAD_MIC GSSException.BAD_MIC},
  {@link GSSException#NO_CRED GSSException.NO_CRED},
  {@link GSSException#CREDENTIALS_EXPIRED
                          GSSException.CREDENTIALS_EXPIRED},
  {@link GSSException#BAD_BINDINGS GSSException.BAD_BINDINGS},
  {@link GSSException#OLD_TOKEN GSSException.OLD_TOKEN},
  {@link GSSException#DUPLICATE_TOKEN GSSException.DUPLICATE_TOKEN},
  {@link GSSException#BAD_MECH GSSException.BAD_MECH},
  {@link GSSException#FAILURE GSSException.FAILURE}

 Missing return value in RFC. int should have been returned.
-----------------------------------------------------------

The application can determine if a token is written to the
OutputStream from the return value of this method. A return value of
<code>0</code> indicates that no token was written.

@return <strong>the number of bytes written to the
OutputStream as part of the token to be sent to the peer. A value of
0 indicates that no token  needs to be
sent.</strong>
"
      end

      operation 5988994 "isEstablished"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used during context establishment to determine the state of the
context.

@return <code>true</code> if this is a fully established context on
the caller's side and no more tokens are needed from the peer.
"
      end

      operation 5989122 "dispose"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases any system resources and cryptographic information stored in
the context object and invalidates the context.


@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5989250 "getWrapSizeLimit"
	public explicit_return_type "int"
	nparams 3
	  param in name "qop" explicit_type "int"
	  param inout name "confReq" explicit_type "boolean"
	  param in name "maxTokenSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to determine limits on the size of the message
that can be passed to <code>wrap</code>. Returns the maximum
message size that, if presented to the <code>wrap</code> method with
the same <code>confReq</code> and <code>qop</code> parameters, will
result in an output token containing no more
than <code>maxTokenSize</code> bytes.<p>

This call is intended for use by applications that communicate over
protocols that impose a maximum message size.  It enables the
application to fragment messages prior to applying protection.<p>

GSS-API implementations are recommended but not required to detect
invalid QOP values when <code>getWrapSizeLimit</code> is called.
This routine guarantees only a maximum message size, not the
availability of specific QOP values for message protection.<p>

@param qop the level of protection wrap will be asked to provide.
@param confReq <code>true</code> if wrap will be asked to provide
privacy, <code>false</code>  otherwise.
@param maxTokenSize the desired maximum size of the token emitted by
wrap.
@return the maximum size of the input token for the given output
token size

@throws GSSException containing the following
major error codes:
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#BAD_QOP GSSException.BAD_QOP},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5989378 "wrap"
	public explicit_return_type "byte"
	nparams 4
	  param inout name "inBuf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies per-message security services over the established security
context. The method will return a token with the
application supplied data and a cryptographic MIC over it.
The data may be encrypted if confidentiality (privacy) was
requested.<p>

The MessageProp object is instantiated by the application and used
to specify a QOP value which selects cryptographic algorithms, and a
privacy service to optionally encrypt the message.  The underlying
mechanism that is used in the call may not be able to provide the
privacy service.  It sets the actual privacy service that it does
provide in this MessageProp object which the caller should then
query upon return.  If the mechanism is not able to provide the
requested QOP, it throws a GSSException with the BAD_QOP code.<p>

Since some application-level protocols may wish to use tokens
emitted by wrap to provide \"secure framing\", implementations should
support the wrapping of zero-length messages.<p>

The application will be responsible for sending the token to the
peer.

@param inBuf application data to be protected.
@param offset the offset within the inBuf where the data begins.
@param len the length of the data
@param msgProp instance of MessageProp that is used by the
application to set the desired QOP and privacy state. Set the
desired QOP to 0 to request the default QOP. Upon return from this
method, this object will contain the the actual privacy state that
was applied to the message by the underlying mechanism.
@return a byte[] containing the token to be sent to the peer.

@throws GSSException containing the following major error codes:
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#BAD_QOP GSSException.BAD_QOP},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5989506 "wrap"
	public explicit_return_type "void"
	nparams 3
	  param inout name "inStream" type class_ref 146434 // InputStream
	  param inout name "outStream" type class_ref 151298 // OutputStream
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies per-message security services over the established security
context using streams. The method will return a
token with the application supplied data and a cryptographic MIC over it.
The data may be encrypted if confidentiality
(privacy) was requested. This method is equivalent to the byte array
based {@link #wrap(byte[], int, int, MessageProp) wrap} method.<p>

The application will be responsible for sending the token to the
peer.  Typically, the application would
ensure this by calling the  {@link java.io.OutputStream#flush() flush}
method on an <code>OutputStream</code> that encapsulates the
connection between the two peers.<p>

The MessageProp object is instantiated by the application and used
to specify a QOP value which selects cryptographic algorithms, and a
privacy service to optionally encrypt the message.  The underlying
mechanism that is used in the call may not be able to provide the
privacy service.  It sets the actual privacy service that it does
provide in this MessageProp object which the caller should then
query upon return.  If the mechanism is not able to provide the
requested QOP, it throws a GSSException with the BAD_QOP code.<p>

Since some application-level protocols may wish to use tokens
emitted by wrap to provide \"secure framing\", implementations should
support the wrapping of zero-length messages.<p>

@param inStream an InputStream containing the application data to be
protected. All of the data that is available in
inStream is used.
@param outStream an OutputStream to write the protected message
to.
@param msgProp instance of MessageProp that is used by the
application to set the desired QOP and privacy state. Set the
desired QOP to 0 to request the default QOP. Upon return from this
method, this object will contain the the actual privacy state that
was applied to the message by the underlying mechanism.

@throws GSSException containing the following
major error codes:
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#BAD_QOP GSSException.BAD_QOP},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5989634 "unwrap"
	public explicit_return_type "byte"
	nparams 4
	  param inout name "inBuf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to process tokens generated by the <code>wrap</code> method on
the other side of the context. The method will return the message
supplied by the peer application to its wrap call, while at the same
time verifying the embedded MIC for that message.<p>

The MessageProp object is instantiated by the application and is
used by the underlying mechanism to return information to the caller
such as the QOP, whether confidentiality was applied to the message,
and other supplementary message state information.<p>

Since some application-level protocols may wish to use tokens
emitted by wrap to provide \"secure framing\", implementations should
support the wrapping and unwrapping of zero-length messages.<p>

@param inBuf a byte array containing the wrap token received from
peer.
@param offset the offset where the token begins.
@param len the length of the token
@param msgProp upon return from the method, this object will contain
the applied QOP, the privacy state of the message, and supplementary
information stating if the token was a duplicate, old, out of
sequence or arriving after a gap.
@return a byte[] containing the message unwrapped from the input
token.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},
  {@link GSSException#BAD_MIC GSSException.BAD_MIC},
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5989762 "unwrap"
	public explicit_return_type "void"
	nparams 3
	  param inout name "inStream" type class_ref 146434 // InputStream
	  param inout name "outStream" type class_ref 151298 // OutputStream
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uses streams to process tokens generated by the <code>wrap</code>
method on the other side of the context. The method will return the
message supplied by the peer application to its wrap call, while at
the same time verifying the embedded MIC for that message.<p>

The MessageProp object is instantiated by the application and is
used by the underlying mechanism to return information to the caller
such as the QOP, whether confidentiality was applied to the message,
and other supplementary message state information.<p>

Since some application-level protocols may wish to use tokens
emitted by wrap to provide \"secure framing\", implementations should
support the wrapping and unwrapping of zero-length messages.<p>

The format of the input token that this method
reads is defined in the specification for the underlying mechanism that
will be used. This method will attempt to read one of these tokens per
invocation. If the mechanism token contains a definitive start and
end this method may block on the <code>InputStream</code> if only
part of the token is available. If the start and end of the token
are not definitive then the method will attempt to treat all
available bytes as part of the token.<p>

Other than the possible blocking behavior described above, this
method is equivalent to the byte array based {@link #unwrap(byte[],
int, int, MessageProp) unwrap} method.<p>

@param inStream an InputStream that contains the wrap token generated
by the peer.
@param outStream an OutputStream to write the application message
to.
@param msgProp upon return from the method, this object will contain
the applied QOP, the privacy state of the message, and supplementary
information stating if the token was a duplicate, old, out of
sequence or arriving after a gap.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},
  {@link GSSException#BAD_MIC GSSException.BAD_MIC},
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5989890 "getMIC"
	public explicit_return_type "byte"
	nparams 4
	  param inout name "inMsg" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a token containing a cryptographic Message Integrity Code
(MIC) for the supplied message,  for transfer to the peer
application.  Unlike wrap, which encapsulates the user message in the
returned token, only the message MIC is returned in the output
token.<p>

Note that privacy can only be applied through the wrap call.<p>

Since some application-level protocols may wish to use tokens emitted
by getMIC to provide \"secure framing\", implementations should support
derivation of MICs from zero-length messages.

@param inMsg the message to generate the MIC over.
@param offset offset within the inMsg where the message begins.
@param len the length of the message
@param msgProp an instance of <code>MessageProp</code> that is used
by the application to set the desired QOP.  Set the desired QOP to
<code>0</code> in <code>msgProp</code> to request the default
QOP. Alternatively pass in <code>null</code> for <code>msgProp</code>
to request the default QOP.
@return a byte[] containing the token to be sent to the peer.

@throws GSSException containing the following
major error codes:
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#BAD_QOP GSSException.BAD_QOP},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990018 "getMIC"
	public explicit_return_type "void"
	nparams 3
	  param inout name "inStream" type class_ref 146434 // InputStream
	  param inout name "outStream" type class_ref 151298 // OutputStream
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uses streams to produce a token containing a cryptographic MIC for
the supplied message, for transfer to the peer application.
Unlike wrap, which encapsulates the user message in the returned
token, only the message MIC is produced in the output token. This
method is equivalent to the byte array based {@link #getMIC(byte[],
int, int, MessageProp) getMIC} method.

Note that privacy can only be applied through the wrap call.<p>

Since some application-level protocols may wish to use tokens emitted
by getMIC to provide \"secure framing\", implementations should support
derivation of MICs from zero-length messages.

@param inStream an InputStream containing the message to generate the
MIC over. All of the data that is available in
inStream is used.
@param outStream an OutputStream to write the output token to.
@param msgProp an instance of <code>MessageProp</code> that is used
by the application to set the desired QOP.  Set the desired QOP to
<code>0</code> in <code>msgProp</code> to request the default
QOP. Alternatively pass in <code>null</code> for <code>msgProp</code>
to request the default QOP.

@throws GSSException containing the following
major error codes:
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#BAD_QOP GSSException.BAD_QOP},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990146 "verifyMIC"
	public explicit_return_type "void"
	nparams 7
	  param inout name "inToken" explicit_type "byte"
	multiplicity "[]"
	  param in name "tokOffset" explicit_type "int"
	  param in name "tokLen" explicit_type "int"
	  param inout name "inMsg" explicit_type "byte"
	multiplicity "[]"
	  param in name "msgOffset" explicit_type "int"
	  param in name "msgLen" explicit_type "int"
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies the cryptographic MIC, contained in the token parameter,
over the supplied message.<p>

The MessageProp object is instantiated by the application and is used
by the underlying mechanism to return information to the caller such
as the QOP indicating the strength of protection that was applied to
the message and other supplementary message state information.<p>

Since some application-level protocols may wish to use tokens emitted
by getMIC to provide \"secure framing\", implementations should support
the calculation and verification of MICs over zero-length messages.

@param inToken the token generated by peer's getMIC method.
@param tokOffset the offset within the inToken where the token
begins.
@param tokLen the length of the token.
@param inMsg the application message to verify the cryptographic MIC
over.
@param msgOffset the offset in inMsg where the message begins.
@param msgLen the length of the message.
@param msgProp upon return from the method, this object will contain
the applied QOP and supplementary information stating if the token
was a duplicate, old, out of sequence or arriving after a gap.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}
  {@link GSSException#BAD_MIC GSSException.BAD_MIC}
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED}
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990274 "verifyMIC"
	public explicit_return_type "void"
	nparams 3
	  param inout name "tokStream" type class_ref 146434 // InputStream
	  param inout name "msgStream" type class_ref 146434 // InputStream
	  param inout name "msgProp" type class_ref 836226 // MessageProp
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uses streams to verify the cryptographic MIC, contained in the token
parameter, over the supplied message.  This method is equivalent to
the byte array based {@link #verifyMIC(byte[], int, int, byte[], int,
int, MessageProp) verifyMIC} method.

The MessageProp object is instantiated by the application and is used
by the underlying mechanism to return information to the caller such
as the QOP indicating the strength of protection that was applied to
the message and other supplementary message state information.<p>

Since some application-level protocols may wish to use tokens emitted
by getMIC to provide \"secure framing\", implementations should support
the calculation and verification of MICs over zero-length messages.<p>

The format of the input token that this method
reads is defined in the specification for the underlying mechanism that
will be used. This method will attempt to read one of these tokens per
invocation. If the mechanism token contains a definitive start and
end this method may block on the <code>InputStream</code> if only
part of the token is available. If the start and end of the token
are not definitive then the method will attempt to treat all
available bytes as part of the token.<p>

Other than the possible blocking behavior described above, this
method is equivalent to the byte array based {@link #verifyMIC(byte[],
int, int, byte[], int, int, MessageProp) verifyMIC} method.<p>

@param tokStream an InputStream containing the token generated by the
peer's getMIC method.
@param msgStream an InputStream containing the application message to
verify the cryptographic MIC over. All of the data
that is available in msgStream is used.
@param msgProp upon return from the method, this object will contain
the applied QOP and supplementary information stating if the token
was a duplicate, old, out of sequence or arriving after a gap.

@throws GSSException containing the following
major error codes:
  {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN}
  {@link GSSException#BAD_MIC GSSException.BAD_MIC}
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED}
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990402 "export"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports this context so that another process may
import it.. Provided to support the sharing of work between
multiple processes. This routine will typically be used by the
context-acceptor, in an application where a single process receives
incoming connection requests and accepts security contexts over
them, then passes the established context to one or more other
processes for message exchange.<p>

This method deactivates the security context and creates an
interprocess token which, when passed to {@link
GSSManager#createContext(byte[]) GSSManager.createContext} in
another process, will re-activate the context in the second process.
Only a single instantiation of a given context may be active at any
one time; a subsequent attempt by a context exporter to access the
exported security context will fail.<p>

The implementation may constrain the set of processes by which the
interprocess token may be imported, either as a function of local
security policy, or as a result of implementation decisions.  For
example, some implementations may constrain contexts to be passed
only between processes that run under the same account, or which are
part of the same process group.<p>

The interprocess token may contain security-sensitive information
(for example cryptographic keys).  While mechanisms are encouraged
to either avoid placing such sensitive information within
interprocess tokens, or to encrypt the token before returning it to
the application, in a typical GSS-API implementation this may not be
possible.  Thus the application must take care to protect the
interprocess token, and ensure that any process to which the token
is transferred is trustworthy. <p>

Implementations are not required to support the inter-process
transfer of security contexts.  Calling the {@link #isTransferable()
isTransferable} method will indicate if the context object is
transferable.<p>

Calling this method on a context that
is not exportable will result in this exception being thrown with
the error code {@link GSSException#UNAVAILABLE
GSSException.UNAVAILABLE}.

@return a byte[] containing the exported context
@see GSSManager#createContext(byte[])

@throws GSSException containing the following
major error codes:
  {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},
  {@link GSSException#CONTEXT_EXPIRED GSSException.CONTEXT_EXPIRED},
  {@link GSSException#NO_CONTEXT GSSException.NO_CONTEXT},
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990530 "requestMutualAuth"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that mutual authentication be done during
context establishment. This request can only be made on the context
initiator's side and it has to be done prior to the first call to
<code>initSecContext</code>.<p>

Not all mechanisms support mutual authentication and some mechanisms
might require mutual authentication even if the application
doesn't. Therefore, the application should check to see if the
request was honored with the {@link #getMutualAuthState()
getMutualAuthState} method.<p>

@param state a boolean value indicating whether mutual
authentication should be used or not.
@see #getMutualAuthState()

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990658 "requestReplayDet"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that replay detection be enabled for the
per-message security services after context establishment. This
request can only be made on the context initiator's side and it has
to be done prior to the first call to
<code>initSecContext</code>. During context establishment replay
detection is not an option and is a function of the underlying
mechanism's capabilities.<p>

Not all mechanisms support replay detection and some mechanisms
might require replay detection even if the application
doesn't. Therefore, the application should check to see if the
request was honored with the {@link #getReplayDetState()
getReplayDetState} method. If replay detection is enabled then the
{@link MessageProp#isDuplicateToken() MessageProp.isDuplicateToken} and {@link
MessageProp#isOldToken() MessageProp.isOldToken} methods will return
valid results for the <code>MessageProp</code> object that is passed
in to the <code>unwrap</code> method or the <code>verifyMIC</code>
method.<p>

@param state a boolean value indicating whether replay detection
should be enabled over the established context or not.
@see #getReplayDetState()

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990786 "requestSequenceDet"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that sequence checking be enabled for the
per-message security services after context establishment. This
request can only be made on the context initiator's side and it has
to be done prior to the first call to
<code>initSecContext</code>. During context establishment sequence
checking is not an option and is a function of the underlying
mechanism's capabilities.<p>

Not all mechanisms support sequence checking and some mechanisms
might require sequence checking even if the application
doesn't. Therefore, the application should check to see if the
request was honored with the {@link #getSequenceDetState()
getSequenceDetState} method. If sequence checking is enabled then the
{@link MessageProp#isDuplicateToken() MessageProp.isDuplicateToken},
{@link MessageProp#isOldToken() MessageProp.isOldToken},
{@link MessageProp#isUnseqToken() MessageProp.isUnseqToken}, and
{@link MessageProp#isGapToken() MessageProp.isGapToken} methods will return
valid results for the <code>MessageProp</code> object that is passed
in to the <code>unwrap</code> method or the <code>verifyMIC</code>
method.<p>

@param state a boolean value indicating whether sequence checking
should be enabled over the established context or not.
@see #getSequenceDetState()

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5990914 "requestCredDeleg"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that the initiator's credentials be
delegated to the acceptor during context establishment. This
request can only be made on the context initiator's side and it has
to be done prior to the first call to
<code>initSecContext</code>.

Not all mechanisms support credential delegation. Therefore, an
application that desires delegation should check to see if the
request was honored with the {@link #getCredDelegState()
getCredDelegState} method. If the application indicates that
delegation must not be used, then the mechanism will honor the
request and delegation will not occur. This is an exception
to the general rule that a mechanism may enable a service even if it
is not requested.<p>

@param state a boolean value indicating whether the credentials
should be delegated or not.
@see #getCredDelegState()

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5991042 "requestAnonymity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that the initiator's identity not be
disclosed to the acceptor. This request can only be made on the
context initiator's side and it has to be done prior to the first
call to <code>initSecContext</code>.

Not all mechanisms support anonymity for the initiator. Therefore, the
application should check to see if the request was honored with the
{@link #getAnonymityState() getAnonymityState} method.<p>

@param state a boolean value indicating if the initiator should
be authenticated to the acceptor as an anonymous principal.
@see #getAnonymityState

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5991170 "requestConf"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that data confidentiality be enabled
for the <code>wrap</code> method. This request can only be made on
the context initiator's side and it has to be done prior to the
first call to <code>initSecContext</code>.

Not all mechanisms support confidentiality and other mechanisms
might enable it even if the application doesn't request
it. The application may check to see if the request was honored with
the {@link #getConfState() getConfState} method. If confidentiality
is enabled, only then will the mechanism honor a request for privacy
in the {@link MessageProp#MessageProp(int, boolean) MessageProp}
object that is passed in to the <code>wrap</code> method.<p>

Enabling confidentiality will also automatically enable
integrity.<p>

@param state a boolean value indicating whether confidentiality
should be enabled or not.
@see #getConfState()
@see #getIntegState()
@see #requestInteg(boolean)
@see MessageProp

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5991298 "requestInteg"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that data integrity be enabled
for the <code>wrap</code> and <code>getMIC</code>methods. This
request can only be made on the context initiator's side and it has
to be done prior to the first call to <code>initSecContext</code>.

Not all mechanisms support integrity and other mechanisms
might enable it even if the application doesn't request
it. The application may check to see if the request was honored with
the {@link #getIntegState() getIntegState} method.<p>

Disabling integrity will also automatically disable
confidentiality.<p>

@param state a boolean value indicating whether integrity
should be enabled or not.
@see #getIntegState()

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5991426 "requestLifetime"
	public explicit_return_type "void"
	nparams 1
	  param in name "lifetime" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests a lifetime in seconds for the
context. This method can only be called on the context initiator's
side  and it has to be done prior to the first call to
<code>initSecContext</code>.<p>

The actual lifetime of the context will depend on the capabilities of
the underlying mechanism and the application should call the {@link
#getLifetime() getLifetime} method to determine this.<p>

@param lifetime the desired context lifetime in seconds. Use
<code>INDEFINITE_LIFETIME</code> to request an indefinite lifetime
and <code>DEFAULT_LIFETIME</code> to request a default lifetime.
@see #getLifetime()

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5991554 "setChannelBinding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cb" type class_ref 836354 // ChannelBinding
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the channel bindings to be used during context
establishment. This method can be called on both
the context initiator's and the context acceptor's side, but it must
be called before context establishment begins. This means that an
initiator must call it before the first call to
<code>initSecContext</code> and the acceptor must call it before the
first call to <code>acceptSecContext</code>.

@param cb the channel bindings to use.

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5991682 "getCredDelegState"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if credential delegation is enabled on
this context. It can be called by both the context initiator and the
context acceptor. For a definitive answer this method must be
called only after context establishment is complete. Note that if an
initiator requests that delegation not be allowed the {@link
#requestCredDeleg(boolean) requestCredDeleg} method will honor that
request and this method will return <code>false</code> on the
initiator's side from that point onwards. <p>

@return true if delegation is enabled, false otherwise.
@see #requestCredDeleg(boolean)
"
      end

      operation 5991810 "getMutualAuthState"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if mutual authentication is enabled on
this context. It can be called by both the context initiator and the
context acceptor. For a definitive answer this method must be
called only after context establishment is complete. An initiator
that requests mutual authentication can call this method after
context completion and dispose the context if its request was not
honored.<p>

@return true if mutual authentication is enabled, false otherwise.
@see #requestMutualAuth(boolean)
"
      end

      operation 5991938 "getReplayDetState"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if replay detection is enabled for the
per-message security services from this context. It can be called by
both the context initiator and the context acceptor. For a
definitive answer this method must be called only after context
establishment is complete. An initiator that requests replay
detection can call this method after context completion and
dispose the context if its request was not honored.<p>

@return true if replay detection is enabled, false otherwise.
@see #requestReplayDet(boolean)
"
      end

      operation 5992066 "getSequenceDetState"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if sequence checking is enabled for the
per-message security services from this context. It can be called by
both the context initiator and the context acceptor. For a
definitive answer this method must be called only after context
establishment is complete. An initiator that requests sequence
checking can call this method after context completion and
dispose the context if its request was not honored.<p>

@return true if sequence checking is enabled, false otherwise.
@see #requestSequenceDet(boolean)
"
      end

      operation 5992194 "getAnonymityState"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the context initiator is
anonymously authenticated to the context acceptor. It can be called by
both the context initiator and the context acceptor, and at any
time. <strong>On the initiator side, a call to this method determines
if the identity of the initiator has been disclosed in any of the
context establishment tokens that might have been generated thus far
by <code>initSecContext</code>. An initiator that absolutely must be
authenticated anonymously should call this method after each call to
<code>initSecContext</code> to determine if the generated token
should be sent to the peer or the context aborted.</strong> On the
acceptor side, a call to this method determines if any of the tokens
processed by <code>acceptSecContext</code> thus far have divulged
the identity of the initiator.<p>

@return true if the context initiator is still anonymous, false
otherwise.
@see #requestAnonymity(boolean)
"
      end

      operation 5992322 "isTransferable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the context is transferable to other processes
through the use of the {@link #export() export} method.  This call
is only valid on fully established contexts.

@return true if this context can be exported, false otherwise.

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5992450 "isProtReady"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the context is ready for per message operations to be
used over it.  Some mechanisms may allow the usage of the
per-message operations before the context is fully established.

@return true if methods like <code>wrap</code>, <code>unwrap</code>,
<code>getMIC</code>, and <code>verifyMIC</code> can be used with
this context at the current stage of context establishment, false
otherwise.
"
      end

      operation 5992578 "getConfState"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if data confidentiality is available
over the context. This method can be called by both the context
initiator and the context acceptor, but only after one of {@link
#isProtReady() isProtReady} or {@link #isEstablished()
isEstablished} return <code>true</code>. If this method returns
<code>true</code>, so will {@link #getIntegState()
getIntegState}<p>

@return true if confidentiality services are available, false
otherwise.
@see #requestConf(boolean)
"
      end

      operation 5992706 "getIntegState"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if data integrity is available
over the context. This method can be called by both the context
initiator and the context acceptor, but only after one of {@link
#isProtReady() isProtReady} or {@link #isEstablished()
isEstablished} return <code>true</code>. This method will always
return <code>true</code> if {@link #getConfState() getConfState}
returns true.<p>

@return true if integrity services are available, false otherwise.
@see #requestInteg(boolean)
"
      end

      operation 5992834 "getLifetime"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines what the remaining lifetime for this
context is. It can be called by both the context initiator and the
context acceptor, but for a definitive answer it should be called
only after {@link #isEstablished() isEstablished} returns
true.<p>

@return the remaining lifetime in seconds
@see #requestLifetime(int)
"
      end

      operation 5992962 "getSrcName"
	public return_type class_ref 836482 // GSSName
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the context initiator. This call is valid only
after one of {@link #isProtReady() isProtReady} or {@link
#isEstablished() isEstablished} return <code>true</code>.

@return a GSSName that is an MN containing the name of the context
initiator.
@see GSSName

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5993090 "getTargName"
	public return_type class_ref 836482 // GSSName
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the context acceptor. This call is valid only
after one of {@link #isProtReady() isProtReady} or {@link
#isEstablished() isEstablished} return <code>true</code>.

@return a GSSName that is an MN containing the name of the context
acceptor.

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5993218 "getMech"
	public return_type class_ref 836610 // Oid
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines what mechanism is being used for this
context. This method may be called before the context is fully
established, but the mechanism returned may change on successive
calls in the negotiated mechanism case.

@return the Oid of the mechanism being used

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5993346 "getDelegCred"
	public return_type class_ref 836738 // GSSCredential
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the credentials delegated by the context
initiator to the context acceptor. It should be called only on the
context acceptor's side, and once the context is fully
established. The caller can use the method {@link
#getCredDelegState() getCredDelegState} to determine if there are
any delegated credentials.

@return a GSSCredential containing the initiator's delegated
credentials, or <code>null</code> is no credentials
were delegated.

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5993474 "isInitiator"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this is the context initiator. This
can be called on both the context initiator's and context acceptor's
side.

@return true if this is the context initiator, false if it is the
context acceptor.

@throws GSSException containing the following
major error codes:
  {@link GSSException#FAILURE GSSException.FAILURE}
"
      end
    end

    class 836098 "GSSException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown whenever a GSS-API error occurs, including
any mechanism specific error.  It may contain both the major and the
minor GSS-API status codes.  Major error codes are those defined at the
GSS-API level in this class. Minor error codes are mechanism specific
error codes that can provide additional information. The underlying
mechanism implementation is responsible for setting appropriate minor
status codes when throwing this exception.  Aside from delivering the
numeric error codes to the caller, this class performs the mapping from
their numeric values to textual representations. <p>

@author Mayank Upadhyay
@since 1.4
"
      classrelation 4818690 // <generalisation>
	relation 4818690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4818690 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2628482 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2706218945227726672L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2628610 "BAD_BINDINGS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Channel bindings mismatch.

start with 1"
      end

      attribute 2628738 "BAD_MECH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unsupported mechanism requested.

"
      end

      attribute 2628866 "BAD_NAME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Invalid name provided.

"
      end

      attribute 2628994 "BAD_NAMETYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Name of unsupported type provided.

"
      end

      attribute 2629122 "BAD_STATUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Invalid status code.


This is meant to be thrown by display_status which displays
major/minor status when an incorrect status type is passed in to it!

"
      end

      attribute 2629250 "BAD_MIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Token had invalid integrity check.

"
      end

      attribute 2629378 "CONTEXT_EXPIRED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Security context expired.

"
      end

      attribute 2629506 "CREDENTIALS_EXPIRED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Expired credentials.

"
      end

      attribute 2629634 "DEFECTIVE_CREDENTIAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Defective credentials.


"
      end

      attribute 2629762 "DEFECTIVE_TOKEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Defective token.


"
      end

      attribute 2629890 "FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "General failure, unspecified at GSS-API level.

"
      end

      attribute 2630018 "NO_CONTEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Invalid security context.

"
      end

      attribute 2630146 "NO_CRED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Invalid credentials.

"
      end

      attribute 2630274 "BAD_QOP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unsupported QOP value.

"
      end

      attribute 2630402 "UNAUTHORIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Operation unauthorized.

"
      end

      attribute 2630530 "UNAVAILABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Operation unavailable.

"
      end

      attribute 2630658 "DUPLICATE_ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Duplicate credential element requested.

"
      end

      attribute 2630786 "NAME_NOT_MN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Name contains multi-mechanism elements.

"
      end

      attribute 2630914 "DUPLICATE_TOKEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The token was a duplicate of an earlier token.
This is a fatal error code that may occur during
context establishment.  It is not used to indicate
supplementary status values. The MessageProp object is
used for that purpose.

"
      end

      attribute 2631042 "OLD_TOKEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The token's validity period has expired.  This is a
fatal error code that may occur during context establishment.
It is not used to indicate supplementary status values.
The MessageProp object is used for that purpose.

"
      end

      attribute 2631170 "UNSEQ_TOKEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 21"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A later token has already been processed.  This is a
fatal error code that may occur during context establishment.
It is not used to indicate supplementary status values.
The MessageProp object is used for that purpose.

"
      end

      attribute 2631298 "GAP_TOKEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 22"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An expected per-message token was not received.  This is a
fatal error code that may occur during context establishment.
It is not used to indicate supplementary status values.
The MessageProp object is used for that purpose.

"
      end

      classrelation 4818818 // messages (<unidirectional association>)
	relation 4818818 --->
	  a role_name "messages" multiplicity "[]" init_value " {
        \"Channel binding mismatch\", // BAD_BINDINGS
        \"Unsupported mechanism requested\", // BAD_MECH
        \"Invalid name provided\", // BAD_NAME
        \"Name of unsupported type provided\", //BAD_NAMETYPE
        \"Invalid input status selector\", // BAD_STATUS
        \"Token had invalid integrity check\", // BAD_SIG
        \"Specified security context expired\", // CONTEXT_EXPIRED
        \"Expired credentials detected\", // CREDENTIALS_EXPIRED
        \"Defective credential detected\", // DEFECTIVE_CREDENTIAL
        \"Defective token detected\", // DEFECTIVE_TOKEN
        \"Failure unspecified at GSS-API level\", // FAILURE
        \"Security context init/accept not yet called or context deleted\",
                                                // NO_CONTEXT
        \"No valid credentials provided\", // NO_CRED
        \"Unsupported QOP value\", // BAD_QOP
        \"Operation unauthorized\", // UNAUTHORIZED
        \"Operation unavailable\", // UNAVAILABLE
        \"Duplicate credential element requested\", //DUPLICATE_ELEMENT
        \"Name contains multi-mechanism elements\", // NAME_NOT_MN
        \"The token was a duplicate of an earlier token\", //DUPLICATE_TOKEN
        \"The token's validity period has expired\", //OLD_TOKEN
        \"A later token has already been processed\", //UNSEQ_TOKEN
        \"An expected per-message token was not received\", //GAP_TOKEN
    }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 4818818 // messages (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2631426 "major"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The major code for this exception

@serial

"
      end

      attribute 2631554 "minor"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minor code for this exception

@serial

"
      end

      classrelation 4818946 // minorMessage (<unidirectional association>)
	relation 4818946 --->
	  a role_name "minorMessage" init_value " null" private
	    comment "
The text string for minor code

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4818946 // minorMessage (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4819074 // majorString (<unidirectional association>)
	relation 4819074 --->
	  a role_name "majorString" init_value " null" private
	    comment "
Alternate text string for major code

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819074 // majorString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12170370 "GSSException"
	public explicit_return_type ""
	nparams 1
	  param in name "majorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a GSSException object with a specified major code.

@param majorCode the The GSS error code for the problem causing this
exception to be thrown.
"
      end

      operation 12170498 "GSSException"
	package explicit_return_type ""
	nparams 2
	  param in name "majorCode" explicit_type "int"
	  param inout name "majorString" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a GSSException object with a specified major code and a
specific major string for it.

@param majorCode the fatal error code causing this exception.
@param majorString an expicit message to be included in this exception
"
      end

      operation 12170626 "GSSException"
	public explicit_return_type ""
	nparams 3
	  param in name "majorCode" explicit_type "int"
	  param in name "minorCode" explicit_type "int"
	  param inout name "minorString" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a GSSException object with the specified major code, minor
code, and minor code textual explanation.  This constructor is to be
used when the exception is originating from the underlying mechanism
level. It allows the setting of both the GSS code and the mechanism
code.

@param majorCode the GSS error code for the problem causing this
exception to be thrown.
@param minorCode the mechanism level error code for the problem
causing this exception to be thrown.
@param minorString the textual explanation of the mechanism error
code.
"
      end

      operation 12170754 "getMajor"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the GSS-API level major error code for the problem causing
this exception to be thrown. Major error codes are
defined at the mechanism independent GSS-API level in this
class. Mechanism specific error codes that might provide more
information are set as the minor error code.

@return int the GSS-API level major error code causing this exception
@see #getMajorString
@see #getMinor
@see #getMinorString
"
      end

      operation 12170882 "getMinor"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mechanism level error code for the problem causing this
exception to be thrown. The minor code is set by the underlying
mechanism.

@return int the mechanism error code; 0 indicates that it has not
been set.
@see #getMinorString
@see #setMinor
"
      end

      operation 12171010 "getMajorString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string explaining the GSS-API level major error code in
this exception.

@return String explanation string for the major error code
@see #getMajor
@see #toString
"
      end

      operation 12171138 "getMinorString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string explaining the mechanism specific error code.
If the minor status code is 0, then no mechanism level error details
will be available.

@return String a textual explanation of mechanism error code
@see #getMinor
@see #getMajorString
@see #toString
"
      end

      operation 12171266 "setMinor"
	public explicit_return_type "void"
	nparams 2
	  param in name "minorCode" explicit_type "int"
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by the exception thrower to set the mechanism
level minor error code and its string explanation.  This is used by
mechanism providers to indicate error details.

@param minorCode the mechanism specific error code
@param message textual explanation of the mechanism error code
@see #getMinor
"
      end

      operation 12171394 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a textual representation of both the major and the minor
status codes.

@return a String with the error descriptions
"
      end

      operation 12171522 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a textual representation of both the major and the minor
status codes.

@return a String with the error descriptions
"
      end

      operation 12171650 "validateMajor"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "major" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the major code in the proper range.
"
      end
    end

    class 836226 "MessageProp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is a utility class used within the per-message GSSContext
methods to convey per-message properties.<p>

When used with the GSSContext interface's wrap and getMIC methods, an
instance of this class is used to indicate the desired
Quality-of-Protection (QOP) and to request if confidentiality services
are to be applied to caller supplied data (wrap only).  To request
default QOP, the value of 0 should be used for QOP.<p>

When used with the unwrap and verifyMIC methods of the GSSContext
interface, an instance of this class will be used to indicate the
applied QOP and confidentiality services over the supplied message.
In the case of verifyMIC, the confidentiality state will always be
<code>false</code>.  Upon return from these methods, this object will also
contain any supplementary status values applicable to the processed
token.  The supplementary status values can indicate old tokens, out
of sequence tokens, gap tokens or duplicate tokens.<p>

@see GSSContext#wrap
@see GSSContext#unwrap
@see GSSContext#getMIC
@see GSSContext#verifyMIC

@author Mayank Upadhyay
@since 1.4
"
      attribute 2631682 "privacyState"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2631810 "qop"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2631938 "dupToken"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2632066 "oldToken"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2632194 "unseqToken"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2632322 "gapToken"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2632450 "minorStatus"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 4819970 // minorString (<unidirectional association>)
	relation 4819970 --->
	  a role_name "minorString" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819970 // minorString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12174978 "MessageProp"
	public explicit_return_type ""
	nparams 1
	  param inout name "privState" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor which sets the desired privacy state. The QOP value used
is 0.

@param privState the privacy (i.e. confidentiality) state
"
      end

      operation 12175106 "MessageProp"
	public explicit_return_type ""
	nparams 2
	  param in name "qop" explicit_type "int"
	  param inout name "privState" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor which sets the values for the qop and privacy state.

@param qop the QOP value
@param privState the privacy (i.e. confidentiality) state
"
      end

      operation 12175234 "getQOP"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the QOP value.

@return an int representing the QOP value
@see #setQOP
"
      end

      operation 12175362 "getPrivacy"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the privacy state.

@return true if the privacy (i.e., confidentiality) state is true,
false otherwise.
@see #setPrivacy
"
      end

      operation 12175490 "setQOP"
	public explicit_return_type "void"
	nparams 1
	  param in name "qop" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the QOP value.

@param qop the int value to set the QOP to
@see #getQOP
"
      end

      operation 12175618 "setPrivacy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "privState" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the privacy state.

@param privState true is the privacy (i.e., confidentiality) state
is true, false otherwise.
@see #getPrivacy
"
      end

      operation 12175746 "isDuplicateToken"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this is a duplicate of an earlier token.

@return true if this is a duplicate, false otherwise.
"
      end

      operation 12175874 "isOldToken"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this token's validity period has expired, i.e., the token
is too old to be checked for duplication.

@return true if the token's validity period has expired, false
otherwise.
"
      end

      operation 12176002 "isUnseqToken"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if a later token had already been processed.

@return true if a later token had already been processed, false otherwise.
"
      end

      operation 12176130 "isGapToken"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if an expected token was not received, i.e., one or more
predecessor tokens have not yet been successfully processed.

@return true if an expected per-message token was not received,
false otherwise.
"
      end

      operation 12176258 "getMinorStatus"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the minor status code that the underlying mechanism might
have set for this per-message operation.

@return the int minor status
"
      end

      operation 12176386 "getMinorString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a string explaining the minor status code.

@return a String corresponding to the minor status
code. <code>null</code> will be returned when no minor status code
has been set.
"
      end

      operation 12176514 "setSupplementaryStates"
	public explicit_return_type "void"
	nparams 6
	  param inout name "duplicate" explicit_type "boolean"
	  param inout name "old" explicit_type "boolean"
	  param inout name "unseq" explicit_type "boolean"
	  param inout name "gap" explicit_type "boolean"
	  param in name "minorStatus" explicit_type "int"
	  param inout name "minorString" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method sets the state for the supplementary information flags
and the minor status in MessageProp.  It is not used by the
application but by the GSS implementation to return this information
to the caller of a per-message context method.

@param duplicate true if the token was a duplicate of an earlier
token, false otherwise
@param old true if the token's validity period has expired, false
otherwise
@param unseq true if a later token has already been processed, false
otherwise
@param gap true if one or more predecessor tokens have not yet been
successfully processed, false otherwise
@param minorStatus the int minor status code for the per-message
operation
@param  minorString the textual representation of the minorStatus value
"
      end

      operation 12176642 "resetStatusValues"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the supplementary status values to false.
"
      end
    end

    class 836354 "ChannelBinding"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class encapsulates the concept of caller-provided channel
binding information. Channel bindings are used to strengthen the
quality with which peer entity authentication is provided during
context establishment.  They enable the GSS-API callers to bind the
establishment of the security context to relevant characteristics
like addresses or to application specific data.<p>

The caller initiating the security context must determine the
appropriate channel binding values to set in the GSSContext object.
The acceptor must provide an identical binding in order to validate
that received tokens possess correct channel-related characteristics.<p>

Use of channel bindings is optional in GSS-API. ChannelBinding can be
set for the {@link GSSContext GSSContext} using the {@link
GSSContext#setChannelBinding(ChannelBinding) setChannelBinding} method
before the first call to {@link GSSContext#initSecContext(byte[], int, int)
initSecContext} or {@link GSSContext#acceptSecContext(byte[], int, int)
acceptSecContext} has been performed.  Unless the <code>setChannelBinding</code>
method has been used to set the ChannelBinding for a GSSContext object,
<code>null</code> ChannelBinding will be assumed. <p>

Conceptually, the GSS-API concatenates the initiator and acceptor
address information, and the application supplied byte array to form an
octet string.  The mechanism calculates a MIC over this octet string and
binds the MIC to the context establishment token emitted by
<code>initSecContext</code> method of the <code>GSSContext</code>
interface.  The same bindings are set by the context acceptor for its
<code>GSSContext</code> object and during processing of the
<code>acceptSecContext</code> method a MIC is calculated in the same
way. The calculated MIC is compared with that found in the token, and if
the MICs differ, accept will throw a <code>GSSException</code> with the
major code set to {@link GSSException#BAD_BINDINGS BAD_BINDINGS}, and
the context will not be established. Some mechanisms may include the
actual channel binding data in the token (rather than just a MIC);
applications should therefore not use confidential data as
channel-binding components.<p>

 Individual mechanisms may impose additional constraints on addresses
 that may appear in channel bindings.  For example, a mechanism may
 verify that the initiator address field of the channel binding
 contains the correct network address of the host system.  Portable
 applications should therefore ensure that they either provide correct
 information for the address fields, or omit setting of the addressing
 information.

@author Mayank Upadhyay
@since 1.4
"
      classrelation 4818434 // initiator (<unidirectional association>)
	relation 4818434 --->
	  a role_name "initiator" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4818434 // initiator (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      classrelation 4818562 // acceptor (<unidirectional association>)
	relation 4818562 --->
	  a role_name "acceptor" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4818562 // acceptor (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 2628354 "appData"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 12169474 "ChannelBinding"
	public explicit_return_type ""
	nparams 3
	  param inout name "initAddr" type class_ref 513154 // InetAddress
	  param inout name "acceptAddr" type class_ref 513154 // InetAddress
	  param inout name "appData" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a ChannelBinding object with user supplied address information
and data.  <code>null</code> values can be used for any fields which the
application does not want to specify.

@param initAddr the address of the context initiator.
<code>null</code> value can be supplied to indicate that the
application does not want to set this value.
@param acceptAddr the address of the context
acceptor. <code>null</code> value can be supplied to indicate that
the application does not want to set this value.
@param appData application supplied data to be used as part of the
channel bindings. <code>null</code> value can be supplied to
indicate that the application does not want to set this value.
"
      end

      operation 12169602 "ChannelBinding"
	public explicit_return_type ""
	nparams 1
	  param inout name "appData" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ChannelBinding object without any addressing information.

@param appData application supplied data to be used as part of the
channel bindings.
"
      end

      operation 12169730 "getInitiatorAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the initiator's address for this channel binding.

@return the initiator's address. <code>null</code> is returned if
the address has not been set.
"
      end

      operation 12169858 "getAcceptorAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the acceptor's address for this channel binding.

@return the acceptor's address. null is returned if the address has
not been set.
"
      end

      operation 12169986 "getApplicationData"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the application specified data for this channel binding.

@return the application data being used as part of the
ChannelBinding. <code>null</code> is returned if no application data
has been specified for the channel binding.
"
      end

      operation 12170114 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two instances of ChannelBinding.

@param obj another ChannelBinding to compare this one with
@return true if the two ChannelBinding's contain
the same values for the initiator and acceptor addresses and the
application data.
"
      end

      operation 12170242 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this ChannelBinding object.

@return a hashCode value
"
      end
    end

    class 836482 "GSSName"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface encapsulates a single GSS-API principal entity. The
application obtains an implementation of this interface
through one of the <code>createName</code> methods that exist in the {@link
GSSManager GSSManager} class. Conceptually a GSSName contains many
representations of the entity or many primitive name elements, one for
each supported underlying mechanism. In GSS terminology, a GSSName that
contains an element from just one mechanism is called a Mechanism Name
(MN)<p>

Since different authentication mechanisms may employ different
namespaces for identifying their principals, GSS-API's naming support is
necessarily complex in multi-mechanism environments (or even in some
single-mechanism environments where the underlying mechanism supports
multiple namespaces). Different name formats and their definitions are
identified with {@link Oid Oid's} and some standard types
are defined in this interface. The format of the names can be derived
based on the unique <code>Oid</code> of its name type.<p>

Included below are code examples utilizing the <code>GSSName</code> interface.
The code below creates a <code>GSSName</code>, converts it to an MN, performs a
comparison, obtains a printable representation of the name, exports it
to a byte array and then re-imports to obtain a
new <code>GSSName</code>.<p>
<pre>
     GSSManager manager = GSSManager.getInstance();

     // create a host based service name
     GSSName name = manager.createName(\"service@host\",
                  GSSName.NT_HOSTBASED_SERVICE);

     Oid krb5 = new Oid(\"1.2.840.113554.1.2.2\");

     GSSName mechName = name.canonicalize(krb5);

     // the above two steps are equivalent to the following
     GSSName mechName = manager.createName(\"service@host\",
                     GSSName.NT_HOSTBASED_SERVICE, krb5);

     // perform name comparison
     if (name.equals(mechName))
             print(\"Names are equals.\");

     // obtain textual representation of name and its printable
     // name type
     print(mechName.toString() +
                     mechName.getStringNameType().toString());

     // export and re-import the name
     byte [] exportName = mechName.export();

     // create a new name object from the exported buffer
     GSSName newName = manager.createName(exportName,
                     GSSName.NT_EXPORT_NAME);

</pre>
@see #export()
@see #equals(GSSName)
@see GSSManager#createName(String, Oid)
@see GSSManager#createName(String, Oid, Oid)
@see GSSManager#createName(byte[], Oid)

@author Mayank Upadhyay
@since 1.4
"
      classrelation 4819202 // NT_HOSTBASED_SERVICE (<unidirectional association>)
	relation 4819202 --->
	  a role_name "NT_HOSTBASED_SERVICE" init_value " Oid.getInstance(\"1.2.840.113554.1.2.1.4\")" class_relation const_relation public
	    comment "
Oid indicating a host-based service name form.  It is used to
represent services associated with host computers.  This name form
is constructed using two elements, \"service\" and \"hostname\", as
follows: service@hostname.<p>

It represents the following Oid value:<br>
 <code>{ iso(1) member-body(2) United
States(840) mit(113554) infosys(1) gssapi(2) generic(1) service_name(4)
}</code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819202 // NT_HOSTBASED_SERVICE (<unidirectional association>)
	  b parent class_ref 836610 // Oid
      end

      classrelation 4819330 // NT_USER_NAME (<unidirectional association>)
	relation 4819330 --->
	  a role_name "NT_USER_NAME" init_value " Oid.getInstance(\"1.2.840.113554.1.2.1.1\")" class_relation const_relation public
	    comment "
Name type to indicate a named user on a local system.<p>
It represents the following Oid value:<br>
 <code>{ iso(1) member-body(2) United
States(840) mit(113554) infosys(1) gssapi(2) generic(1) user_name(1)
}</code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819330 // NT_USER_NAME (<unidirectional association>)
	  b parent class_ref 836610 // Oid
      end

      classrelation 4819458 // NT_MACHINE_UID_NAME (<unidirectional association>)
	relation 4819458 --->
	  a role_name "NT_MACHINE_UID_NAME" init_value " Oid.getInstance(\"1.2.840.113554.1.2.1.2\")" class_relation const_relation public
	    comment "
Name type to indicate a numeric user identifier corresponding to a
user on a local system. (e.g. Uid).<p>

 It represents the following Oid value:<br>
<code>{ iso(1) member-body(2) United States(840) mit(113554)
infosys(1) gssapi(2) generic(1) machine_uid_name(2) }</code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819458 // NT_MACHINE_UID_NAME (<unidirectional association>)
	  b parent class_ref 836610 // Oid
      end

      classrelation 4819586 // NT_STRING_UID_NAME (<unidirectional association>)
	relation 4819586 --->
	  a role_name "NT_STRING_UID_NAME" init_value " Oid.getInstance(\"1.2.840.113554.1.2.1.3\")" class_relation const_relation public
	    comment "
Name type to indicate a string of digits representing the numeric
user identifier of a user on a local system.<p>

It represents the following Oid value:<br>
<code>{ iso(1) member-body(2) United
States(840) mit(113554) infosys(1) gssapi(2) generic(1)
string_uid_name(3) }</code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819586 // NT_STRING_UID_NAME (<unidirectional association>)
	  b parent class_ref 836610 // Oid
      end

      classrelation 4819714 // NT_ANONYMOUS (<unidirectional association>)
	relation 4819714 --->
	  a role_name "NT_ANONYMOUS" init_value " Oid.getInstance(\"1.3.6.1.5.6.3\")" class_relation const_relation public
	    comment "
Name type for representing an anonymous entity.<p>
It represents the following Oid value:<br>
<code>{ 1(iso), 3(org), 6(dod), 1(internet),
5(security), 6(nametypes), 3(gss-anonymous-name) }</code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819714 // NT_ANONYMOUS (<unidirectional association>)
	  b parent class_ref 836610 // Oid
      end

      classrelation 4819842 // NT_EXPORT_NAME (<unidirectional association>)
	relation 4819842 --->
	  a role_name "NT_EXPORT_NAME" init_value " Oid.getInstance(\"1.3.6.1.5.6.4\")" class_relation const_relation public
	    comment "
Name type used to indicate an exported name produced by the export
method.<p>

It represents the following Oid value:<br> <code>{ 1(iso),
3(org), 6(dod), 1(internet), 5(security), 6(nametypes),
4(gss-api-exported-name) }</code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4819842 // NT_EXPORT_NAME (<unidirectional association>)
	  b parent class_ref 836610 // Oid
      end

      operation 12173826 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "another" type class_ref 836482 // GSSName
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>GSSName</code> objects to determine if they refer to the
same entity.

@param another the <code>GSSName</code> to compare this name with
@return true if the two names contain at least one primitive element
in common. If either of the names represents an anonymous entity, the
method will return false.

@throws GSSException when the names cannot be compared, containing the following
major error codes:
        {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12173954 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "another" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>GSSName</code> object to another Object that might be a
<code>GSSName</code>. The behaviour is exactly the same as in {@link
#equals(GSSName) equals} except that no GSSException is thrown;
instead, false will be returned in the situation where an error
occurs.
@return true if the object to compare to is also a <code>GSSName</code> and the two
names refer to the same entity.
@param another the object to compare this name to
@see #equals(GSSName)
"
      end

      operation 12174082 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this GSSName.

@return a hashCode value
"
      end

      operation 12174210 "canonicalize"
	public return_type class_ref 836482 // GSSName
	nparams 1
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a name that is canonicalized for some
mechanism.

@return a <code>GSSName</code> that contains just one primitive
element representing this name in a canonicalized form for the desired
mechanism.
@param mech the oid for the mechanism for which the canonical form of
the name is requested.

@throws GSSException containing the following
major error codes:
        {@link GSSException#BAD_MECH GSSException.BAD_MECH},
        {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
        {@link GSSException#BAD_NAME GSSException.BAD_NAME},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12174338 "export"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a canonical contiguous byte representation of a mechanism name
(MN), suitable for direct, byte by byte comparison by authorization
functions.  If the name is not an MN, implementations may throw a
GSSException with the NAME_NOT_MN status code.  If an implementation
chooses not to throw an exception, it should use some system specific
default mechanism to canonicalize the name and then export
it. Structurally, an exported name object consists of a header
containing an OID identifying the mechanism that authenticated the
name, and a trailer containing the name itself, where the syntax of
the trailer is defined by the individual mechanism specification. The
format of the header of the output buffer is specified in RFC 2743.<p>

The exported name is useful when used in large access control lists
where the overhead of creating a <code>GSSName</code> object on each
name and invoking the equals method on each name from the ACL may be
prohibitive.<p>

Exported names may be re-imported by using the byte array factory
method {@link GSSManager#createName(byte[], Oid)
GSSManager.createName} and specifying the NT_EXPORT_NAME as the name
type object identifier. The resulting <code>GSSName</code> name will
also be a MN.<p>
@return a byte[] containing the exported name. RFC 2743 defines the
\"Mechanism-Independent Exported Name Object Format\" for these bytes.

@throws GSSException containing the following
major error codes:
        {@link GSSException#BAD_NAME GSSException.BAD_NAME},
        {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12174466 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a textual representation of the <code>GSSName</code> object.  To retrieve
the printed name format, which determines the syntax of the returned
string, use the {@link #getStringNameType() getStringNameType}
method.

@return a String representing this name in printable form.
"
      end

      operation 12174594 "getStringNameType"
	public return_type class_ref 836610 // Oid
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name type of the printable
representation of this name that can be obtained from the <code>
toString</code> method.

@return an Oid representing the namespace of the name returned
from the toString method.

@throws GSSException containing the following
major error codes:
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12174722 "isAnonymous"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this name object represents an anonymous entity.

@return true if this is an anonymous name, false otherwise.
"
      end

      operation 12174850 "isMN"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this name object represents a Mechanism Name (MN). An MN is
a GSSName the contains exactly one mechanism's primitive name
element.

@return true if this is an MN, false otherwise.
"
      end
    end

    class 836610 "Oid"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents Universal Object Identifiers (Oids) and their
associated operations.<p>

Oids are hierarchically globally-interpretable identifiers used
within the GSS-API framework to identify mechanisms and name formats.<p>

The structure and encoding of Oids is defined in ISOIEC-8824 and
ISOIEC-8825.  For example the Oid representation of Kerberos V5
mechanism is \"1.2.840.113554.1.2.2\"<p>

The GSSName name class contains public static Oid objects
representing the standard name types defined in GSS-API.

@author Mayank Upadhyay
@since 1.4
"
      attribute 2632578 "oid"
	private explicit_type "ObjectIdentifier"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2632706 "derEncoding"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 12176770 "Oid"
	public explicit_return_type ""
	nparams 1
	  param inout name "strOid" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an Oid object from a string representation of its
integer components.

@param strOid the dot separated string representation of the oid.
For instance, \"1.2.840.113554.1.2.2\".
@exception GSSException may be thrown when the string is incorrectly
    formatted
"
      end

      operation 12176898 "Oid"
	public explicit_return_type ""
	nparams 1
	  param inout name "derOid" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Oid object from its ASN.1 DER encoding.  This refers to
the full encoding including tag and length.  The structure and
encoding of Oids is defined in ISOIEC-8824 and ISOIEC-8825.  This
method is identical in functionality to its byte array counterpart.

@param derOid stream containing the DER encoded oid
@exception GSSException may be thrown when the DER encoding does not
 follow the prescribed format.
"
      end

      operation 12177026 "Oid"
	public explicit_return_type ""
	nparams 1
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Oid object from its ASN.1 DER encoding.  This refers to
the full encoding including tag and length.  The structure and
encoding of Oids is defined in ISOIEC-8824 and ISOIEC-8825.  This
method is identical in functionality to its InputStream conterpart.

@param data byte array containing the DER encoded oid
@exception GSSException may be thrown when the DER encoding does not
    follow the prescribed format.
"
      end

      operation 12177154 "getInstance"
	class_operation package return_type class_ref 836610 // Oid
	nparams 1
	  param inout name "strOid" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Only for calling by initializators used with declarations.

@param strOid
"
      end

      operation 12177282 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the oid's integer components
in dot separated notation.

@return string representation in the following format: \"1.2.3.4.5\"
"
      end

      operation 12177410 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if two Oid objects represent the same Object identifier
value.

@return <code>true</code> if the two Oid objects represent the same
value, <code>false</code> otherwise.
@param other the Oid object that has to be compared to this one
"
      end

      operation 12177538 "getDER"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the full ASN.1 DER encoding for this oid object, which
includes the tag and length.

@return byte array containing the DER encoding of this oid object.
@exception GSSException may be thrown when the oid can't be encoded
"
      end

      operation 12177666 "containedIn"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "oids" type class_ref 836610 // Oid
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A utility method to test if this Oid value is contained within the
supplied Oid array.

@param oids the array of Oid's to search
@return true if the array contains this Oid value, false otherwise
"
      end

      operation 12177794 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this Oid.

@return a hashCode value
"
      end
    end

    class 836738 "GSSCredential"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface encapsulates the GSS-API credentials for an entity.  A
credential contains all the necessary cryptographic information to
enable the creation of a context on behalf of the entity that it
represents.  It may contain multiple, distinct, mechanism specific
credential elements, each containing information for a specific
security mechanism, but all referring to the same entity. A credential
may be used to perform context initiation, acceptance, or both.<p>

Credentials are instantiated using one of the
<code>createCredential</code> methods in the {@link GSSManager
GSSManager} class. GSS-API credential creation is not
intended to provide a \"login to the network\" function, as such a
function would involve the creation of new credentials rather than
merely acquiring a handle to existing credentials. The
<a href=package-summary.html#useSubjectCredsOnly>section on credential
acquisition</a> in the package level description describes
how existing credentials are acquired in the Java platform. GSS-API
implementations must impose a local access-control policy on callers to
prevent unauthorized callers from acquiring credentials to which they
are not entitled. <p>

Applications will create a credential object passing the desired
parameters.  The application can then use the query methods to obtain
specific information about the instantiated credential object.
When the credential is no longer needed, the application should call
the {@link #dispose() dispose} method to release any resources held by
the credential object and to destroy any cryptographically sensitive
information.<p>

This example code demonstrates the creation of a GSSCredential
implementation for a specific entity, querying of its fields, and its
release when it is no longer needed:<p>
<pre>
   GSSManager manager = GSSManager.getInstance();

   // start by creating a name object for the entity
   GSSName name = manager.createName(\"myusername\", GSSName.NT_USER_NAME);

   // now acquire credentials for the entity
   GSSCredential cred = manager.createCredential(name,
                   GSSCredential.ACCEPT_ONLY);

   // display credential information - name, remaining lifetime,
   // and the mechanisms it has been acquired over
   System.out.println(cred.getName().toString());
   System.out.println(cred.getRemainingLifetime());

   Oid [] mechs = cred.getMechs();
   if (mechs != null) {
           for (int i = 0; i < mechs.length; i++)
                   System.out.println(mechs[i].toString());
   }

   // release system resources held by the credential
   cred.dispose();
</pre>

@see GSSManager#createCredential(int)
@see GSSManager#createCredential(GSSName, int, Oid, int)
@see GSSManager#createCredential(GSSName, int, Oid[], int)
@see #dispose()

@author Mayank Upadhyay
@since 1.4
"
      classrelation 2864002 // <generalisation>
	relation 2864002 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2864002 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1308418 "INITIATE_AND_ACCEPT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Credential usage flag requesting that it be usable
for both context initiation and acceptance.


"
      end

      attribute 1308546 "INITIATE_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Credential usage flag requesting that it be usable
for context initiation only.


"
      end

      attribute 1308674 "ACCEPT_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Credential usage flag requesting that it be usable
for context acceptance only.


"
      end

      attribute 1308802 "DEFAULT_LIFETIME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A lifetime constant representing the default credential lifetime. This
value it set to 0.

"
      end

      attribute 1308930 "INDEFINITE_LIFETIME"
	class_attribute const_attribute public explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A lifetime constant representing indefinite credential lifetime.
This value must is set to the maximum integer value in Java -
{@link java.lang.Integer#MAX_VALUE Integer.MAX_VALUE}.

"
      end

      operation 5993986 "dispose"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases any sensitive information that the GSSCredential object may
be containing.  Applications should call this method as soon as the
credential is no longer needed to minimize the time any sensitive
information is maintained.

@throws GSSException containing the following
major error codes:
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5994114 "getName"
	public return_type class_ref 836482 // GSSName
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the name of the entity that the credential asserts.

@return a GSSName representing the entity

@throws GSSException containing the following
major error codes:
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5994242 "getName"
	public return_type class_ref 836482 // GSSName
	nparams 1
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a Mechanism Name of the entity that the credential
asserts. This is equivalent to calling {@link
GSSName#canonicalize(Oid) canonicalize} on the value returned by
the other form of {@link #getName() getName}.

@param mech the Oid of the mechanism for which the Mechanism Name
should be returned.
@return a GSSName representing the entity canonicalized for the
desired mechanism

@throws GSSException containing the following
major error codes:
        {@link GSSException#BAD_MECH GSSException.BAD_MECH},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5994370 "getRemainingLifetime"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the remaining lifetime in seconds for a credential.  The
remaining lifetime is the minimum lifetime amongst all of the underlying
mechanism specific credential elements.

@return the minimum remaining lifetime in seconds for this
credential. A return value of {@link #INDEFINITE_LIFETIME
INDEFINITE_LIFETIME} indicates that the credential does
not expire. A return value of 0 indicates that the credential is
already expired.

@see #getRemainingInitLifetime(Oid)
@see #getRemainingAcceptLifetime(Oid)

@throws GSSException containing the following
major error codes:
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5994498 "getRemainingInitLifetime"
	public explicit_return_type "int"
	nparams 1
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lifetime in seconds for the credential to remain capable
of initiating security contexts using the specified mechanism. This
method queries the initiator credential element that belongs to the
specified mechanism.

@return the number of seconds remaining in the life of this credential
element. A return value of {@link #INDEFINITE_LIFETIME
INDEFINITE_LIFETIME} indicates that the credential element does not
expire.  A return value of 0 indicates that the credential element is
already expired.

@param mech the Oid of the mechanism whose initiator credential element
should be queried.

@throws GSSException containing the following
major error codes:
        {@link GSSException#BAD_MECH GSSException.BAD_MECH},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5994626 "getRemainingAcceptLifetime"
	public explicit_return_type "int"
	nparams 1
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lifetime in seconds for the credential to remain capable
of accepting security contexts using the specified mechanism. This
method queries the acceptor credential element that belongs to the
specified mechanism.

@return the number of seconds remaining in the life of this credential
element. A return value of {@link #INDEFINITE_LIFETIME
INDEFINITE_LIFETIME} indicates that the credential element does not
expire.  A return value of 0 indicates that the credential element is
already expired.

@param mech the Oid of the mechanism whose acceptor credential element
should be queried.

@throws GSSException containing the following
major error codes:
        {@link GSSException#BAD_MECH GSSException.BAD_MECH},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5994754 "getUsage"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the credential usage mode. In other words, it
tells us if this credential can be used for initiating or accepting
security contexts. It does not tell us which mechanism(s) has to be
used in order to do so. It is expected that an application will allow
the GSS-API to pick a default mechanism after calling this method.

@return The return value will be one of {@link #INITIATE_ONLY
INITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link
#INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.

@throws GSSException containing the following
major error codes:
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5994882 "getUsage"
	public explicit_return_type "int"
	nparams 1
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the credential usage mode for a specific mechanism. In other
words, it tells us if this credential can be used
for initiating or accepting security contexts with a given underlying
mechanism.

@return The return value will be one of {@link #INITIATE_ONLY
INITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link
#INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.
@param mech the Oid of the mechanism whose credentials usage mode is
to be determined.

@throws GSSException containing the following
major error codes:
        {@link GSSException#BAD_MECH GSSException.BAD_MECH},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5995010 "getMechs"
	public return_type class_ref 836610 // Oid
	nparams 0
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of mechanisms supported by this credential. It does
not tell us which ones can be used to initiate
contexts and which ones can be used to accept contexts. The
application must call the {@link #getUsage(Oid) getUsage} method with
each of the returned Oid's to determine the possible modes of
usage.

@return an array of Oid's corresponding to the supported mechanisms.

@throws GSSException containing the following
major error codes:
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5995138 "add"
	public explicit_return_type "void"
	nparams 5
	  param inout name "name" type class_ref 836482 // GSSName
	  param in name "initLifetime" explicit_type "int"
	  param in name "acceptLifetime" explicit_type "int"
	  param inout name "mech" type class_ref 836610 // Oid
	  param in name "usage" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a mechanism specific credential-element to an existing
credential.  This method allows the construction of credentials, one
mechanism at a time.<p>

This routine is envisioned to be used mainly by context acceptors
during the creation of acceptor credentials which are to be used
with a variety of clients using different security mechanisms.<p>

This routine adds the new credential element \"in-place\".  To add the
element in a new credential, first call <code>clone</code> to obtain a
copy of this credential, then call its <code>add</code> method.<p>

As always, GSS-API implementations must impose a local access-control
policy on callers to prevent unauthorized callers from acquiring
credentials to which they are not entitled.

Non-default values for initLifetime and acceptLifetime cannot always
be honored by the underlying mechanisms, thus callers should be
prepared to call {@link #getRemainingInitLifetime(Oid)
getRemainingInitLifetime} and {@link #getRemainingAcceptLifetime(Oid)
getRemainingAcceptLifetime} on the credential.

@param name the name of the principal for whom this credential is to
be acquired.  Use <code>null</code> to specify the default
principal.
@param initLifetime the number of seconds that the credential element
should remain valid for initiating of security contexts. Use {@link
GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}
to request that the credentials have the maximum permitted lifetime
for this.  Use {@link GSSCredential#DEFAULT_LIFETIME
GSSCredential.DEFAULT_LIFETIME} to request default credential lifetime
for this.
@param acceptLifetime the number of seconds that the credential
element should remain valid for accepting security contexts. Use {@link
GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}
to request that the credentials have the maximum permitted lifetime
for this.  Use {@link GSSCredential#DEFAULT_LIFETIME
GSSCredential.DEFAULT_LIFETIME} to request default credential lifetime
for this.
@param mech the mechanism over which the credential is to be acquired.
@param usage the usage mode that this credential
element should add to the credential. The value
of this parameter must be one of:
{@link #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT},
{@link #ACCEPT_ONLY ACCEPT_ONLY}, and
{@link #INITIATE_ONLY INITIATE_ONLY}.

@throws GSSException containing the following
major error codes:
        {@link GSSException#DUPLICATE_ELEMENT
                         GSSException.DUPLICATE_ELEMENT},
        {@link GSSException#BAD_MECH GSSException.BAD_MECH},
        {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
        {@link GSSException#NO_CRED GSSException.NO_CRED},
        {@link GSSException#CREDENTIALS_EXPIRED
                                 GSSException.CREDENTIALS_EXPIRED},
        {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 5995266 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "another" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this GSSCredential asserts the same entity as the supplied
object.  The two credentials must be acquired over the same
mechanisms and must refer to the same principal.

@return <code>true</code> if the two GSSCredentials assert the same
entity; <code>false</code> otherwise.
@param another another GSSCredential for comparison to this one
"
      end

      operation 5995394 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this GSSCredential.

@return a hashCode value
"
      end
    end

    class 1441794 "GSSManager"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class serves as a factory for other important
GSS-API classes and also provides information about the mechanisms that
are supported. It can create instances of classes
implementing the following three GSS-API interfaces: {@link
GSSName GSSName}, {@link GSSCredential GSSCredential}, and {@link
GSSContext GSSContext}. It also has methods to query for the list
of available mechanisms and the nametypes that each mechanism
supports.<p>

An instance of the default <code>GSSManager</code> subclass
may be obtained through the static method {@link #getInstance()
getInstance}, but applications are free to instantiate other subclasses
of <code>GSSManager</code>. The default <code>GSSManager</code> instance
will support the Kerberos v5 GSS-API mechanism in addition to any
others. This mechanism is identified by the Oid \"1.2.840.113554.1.2.2\"
and is defined in RFC 1964.<p>

A subclass extending the <code>GSSManager</code> abstract class may be
implemented  as a modular provider based layer that utilizes some well
known  service provider specification. The <code>GSSManager</code> API
allows the application to set provider preferences on
such an implementation. These methods also allow the implementation to
throw a well-defined exception in case provider based configuration is
not supported. Applications that expect to be portable should be aware
of this and recover cleanly by catching the exception.<p>

It is envisioned that there will be three most common ways in which
providers will be used:<p>
<ol>
<li> The application does not care about what provider is used (the
default case).
<li> The application wants a particular provider to be used
preferentially, either for a particular mechanism or all the
time, irrespective of mechanism.
<li> The application wants to use the locally configured providers
as far as possible but if support is missing for one or more
mechanisms then it wants to fall back on its own provider.
</ol><p>

The <code>GSSManager</code> class has two methods that enable these modes of
usage:  {@link #addProviderAtFront(Provider, Oid) addProviderAtFront} and
{@link #addProviderAtEnd(Provider, Oid) addProviderAtEnd}. These methods
have the effect of creating an ordered list of <i>&lt;provider,
oid&gt;</i> pairs  where each pair indicates a preference of provider
for a given oid.<p>

It is important to note that there are certain interactions
between the different GSS-API objects that are created by a
GSSManager, where the provider that is used for a particular mechanism
might need to be consistent across all objects. For instance, if a
GSSCredential contains elements from a provider <i>p</i> for a mechanism
<i>m</i>, it should generally be passed in to a GSSContext that will use
provider <i>p</i> for the mechanism <i>m</i>. A simple rule of thumb
that will maximize portability is that objects created from different
GSSManager's should not be mixed, and if possible, a different
GSSManager instance should be created if the application wants to invoke
the <code>addProviderAtFront</code> method on a GSSManager that has
already created an object.<p>

 Here is some sample code showing how the GSSManager might be used: <p>
<pre>
    GSSManager manager = GSSManager.getInstance();

    Oid krb5Mechanism = new Oid(\"1.2.840.113554.1.2.2\");
    Oid krb5PrincipalNameType = new Oid(\"1.2.840.113554.1.2.2.1\");

    // Identify who the client wishes to be
    GSSName userName = manager.createName(\"duke\", GSSName.NT_USER_NAME);

    // Identify the name of the server. This uses a Kerberos specific
    // name format.
    GSSName serverName = manager.createName(\"nfs/foo.sun.com\",
                                            krb5PrincipalNameType);

    // Acquire credentials for the user
    GSSCredential userCreds = manager.createCredential(userName,
                                            GSSCredential.DEFAULT_LIFETIME,
                                            krb5Mechanism,
                                            GSSCredential.INITIATE_ONLY);

    // Instantiate and initialize a security context that will be
    // established with the server
    GSSContext context = manager.createContext(serverName,
                                               krb5Mechanism,
                                               userCreds,
                                               GSSContext.DEFAULT_LIFETIME);
</pre><p>

The server side might use the following variation of this source:<p>

<pre>
    // Acquire credentials for the server
    GSSCredential serverCreds = manager.createCredential(serverName,
                                            GSSCredential.DEFAULT_LIFETIME,
                                            krb5Mechanism,
                                            GSSCredential.ACCEPT_ONLY);

    // Instantiate and initialize a security context that will
    // wait for an establishment request token from the client
    GSSContext context = manager.createContext(serverCreds);
</pre>

@author Mayank Upadhyay
@see GSSName
@see GSSCredential
@see GSSContext
@since 1.4
"
      operation 12171778 "getInstance"
	class_operation public return_type class_ref 1441794 // GSSManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default GSSManager implementation.

@return a GSSManager implementation
"
      end

      operation 12171906 "getMechs"
	abstract public return_type class_ref 836610 // Oid
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of mechanisms that are available to GSS-API callers
through this GSSManager. The default GSSManager obtained from the
{@link #getInstance() getInstance()} method includes the Oid
\"1.2.840.113554.1.2.2\" in its list. This Oid identifies the Kerberos
v5 GSS-API mechanism that is defined in RFC 1964.

@return an array of Oid objects corresponding to the mechanisms that
are available. A <code>null</code> value is returned when no
mechanism are available (an example of this would be when mechanism
are dynamically configured, and currently no mechanisms are
installed).
"
      end

      operation 12172034 "getNamesForMech"
	abstract public return_type class_ref 836610 // Oid
	nparams 1
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns then name types supported by the indicated mechanism.<p>

The default GSSManager instance includes support for the Kerberos v5
mechanism. When this mechanism (\"1.2.840.113554.1.2.2\") is indicated,
the returned list will contain at least the following nametypes:
{@link GSSName#NT_HOSTBASED_SERVICE GSSName.NT_HOSTBASED_SERVICE},
{@link GSSName#NT_EXPORT_NAME GSSName.NT_EXPORT_NAME}, and the
Kerberos v5 specific Oid \"1.2.840.113554.1.2.2.1\". The namespace for
the Oid \"1.2.840.113554.1.2.2.1\" is defined in RFC 1964.

@return an array of Oid objects corresponding to the name types that
the mechanism supports.
@param mech the Oid of the mechanism to query

@see #getMechsForName(Oid)

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_MECH GSSException.BAD_MECH}
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12172162 "getMechsForName"
	abstract public return_type class_ref 836610 // Oid
	nparams 1
	  param inout name "nameType" type class_ref 836610 // Oid
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of mechanisms that support the indicated name type.<p>

The Kerberos v5 mechanism (\"1.2.840.113554.1.2.2\") will always be
returned in this list when the indicated nametype is one of
{@link GSSName#NT_HOSTBASED_SERVICE GSSName.NT_HOSTBASED_SERVICE},
{@link GSSName#NT_EXPORT_NAME GSSName.NT_EXPORT_NAME}, or
\"1.2.840.113554.1.2.2.1\".

@return an array of Oid objects corresponding to the mechanisms that
support the specified name type.  <code>null</code> is returned when no
mechanisms are found to support the specified name type.
@param nameType the Oid of the name type to look for

@see #getNamesForMech(Oid)
"
      end

      operation 12172290 "createName"
	abstract public return_type class_ref 836482 // GSSName
	nparams 2
	  param inout name "nameStr" type class_ref 128130 // String
	  param inout name "nameType" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method to convert a string name from the
specified namespace to a GSSName object. In general, the
<code>GSSName</code> object created  will contain multiple
representations of the name, one for each mechanism that is
supported; two examples that are exceptions to this are when
the namespace type parameter indicates NT_EXPORT_NAME or when the
GSS-API implementation is not multi-mechanism. It is
not recommended to use this method with a NT_EXPORT_NAME type because
representing a previously exported name consisting of arbitrary bytes
as a String might cause problems with character encoding schemes. In
such cases it is recommended that the bytes be passed in directly to
the overloaded form of this method {@link #createName(byte[],
Oid) createName}.

@param nameStr the string representing a printable form of the name to
create.
@param nameType the Oid specifying the namespace of the printable name
supplied. <code>null</code> can be used to specify
that a mechanism specific default printable syntax should
be assumed by each mechanism that examines nameStr.
It is not advisable to use the nametype NT_EXPORT_NAME with this
method.
@return a GSSName representing the indicated principal

@see GSSName
@see GSSName#NT_EXPORT_NAME

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
   {@link GSSException#BAD_NAME GSSException.BAD_NAME},
   {@link GSSException#BAD_MECH GSSException.BAD_MECH},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12172418 "createName"
	abstract public return_type class_ref 836482 // GSSName
	nparams 2
	  param inout name "name" explicit_type "byte"
	multiplicity "[]"
	  param inout name "nameType" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method to convert a byte array containing a
name from the specified namespace to a GSSName object. In general,
the <code>GSSName</code> object created  will contain multiple
representations of the name, one for each mechanism that is
supported; two examples that are exceptions to this are when the
namespace type parameter indicates NT_EXPORT_NAME or when the
GSS-API implementation is not multi-mechanism. The bytes that are
passed in are interpreted by each underlying mechanism according to
some encoding scheme of its choice for the given nametype.

@param name the byte array containing the name to create
@param nameType the Oid specifying the namespace of the name supplied
in the byte array. <code>null</code> can be used to specify that a
mechanism specific default syntax should be assumed by each mechanism
that examines the byte array.
@return a GSSName representing the indicated principal

@see GSSName
@see GSSName#NT_EXPORT_NAME

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
   {@link GSSException#BAD_NAME GSSException.BAD_NAME},
   {@link GSSException#BAD_MECH GSSException.BAD_MECH},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12172546 "createName"
	abstract public return_type class_ref 836482 // GSSName
	nparams 3
	  param inout name "nameStr" type class_ref 128130 // String
	  param inout name "nameType" type class_ref 836610 // Oid
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory method to convert a string name from the
specified namespace to a GSSName object and canonicalize it at the
same time for a mechanism. In other words, this method is
a utility that does the equivalent of two steps: the {@link
#createName(String, Oid) createName} and then also the {@link
GSSName#canonicalize(Oid) GSSName.canonicalize}.

@param nameStr the string representing a printable form of the name to
create.
@param nameType the Oid specifying the namespace of the printable name
supplied. <code>null</code> can be used to specify
that a mechanism specific default printable syntax should
be assumed by each mechanism that examines nameStr.
It is not advisable to use the nametype NT_EXPORT_NAME with this
method.
@param mech Oid specifying the mechanism for which the name should be
canonicalized
@return a GSSName representing the indicated principal

@see GSSName#canonicalize(Oid)
@see GSSName#NT_EXPORT_NAME

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
   {@link GSSException#BAD_NAME GSSException.BAD_NAME},
   {@link GSSException#BAD_MECH GSSException.BAD_MECH},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12172674 "createName"
	abstract public return_type class_ref 836482 // GSSName
	nparams 3
	  param inout name "name" explicit_type "byte"
	multiplicity "[]"
	  param inout name "nameType" type class_ref 836610 // Oid
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory method to convert a byte array containing a
name from the specified namespace to a GSSName object and canonicalize
it at the same time for a mechanism. In other words, this method is a
utility that does the equivalent of two steps: the {@link
#createName(byte[], Oid) createName} and then also {@link
GSSName#canonicalize(Oid) GSSName.canonicalize}.

@param name the byte array containing the name to create
@param nameType the Oid specifying the namespace of the name supplied
in the byte array. <code>null</code> can be used to specify that a
mechanism specific default syntax should be assumed by each mechanism
that examines the byte array.
@param mech Oid specifying the mechanism for which the name should be
canonicalized
@return a GSSName representing the indicated principal

@see GSSName#canonicalize(Oid)
@see GSSName#NT_EXPORT_NAME

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
   {@link GSSException#BAD_NAME GSSException.BAD_NAME},
   {@link GSSException#BAD_MECH GSSException.BAD_MECH},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12172802 "createCredential"
	abstract public return_type class_ref 836738 // GSSCredential
	nparams 1
	  param in name "usage" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for acquiring default credentials.  This will cause
the GSS-API to use system specific defaults for the set of mechanisms,
name, and lifetime.<p>

GSS-API mechanism providers must impose a local access-control
policy on callers to prevent unauthorized callers from acquiring
credentials to which they are not entitled. The kinds of permissions
needed by different mechanism providers will be documented on a
per-mechanism basis. A failed permission check might cause a {@link
java.lang.SecurityException SecurityException} to be thrown from
this method.

@param usage The intended usage for this credential object. The value
of this parameter must be one of:
{@link GSSCredential#INITIATE_AND_ACCEPT
GSSCredential.INITIATE_AND_ACCEPT},
{@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY}, and
{@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}.
@return a GSSCredential of the requested type.

@see GSSCredential

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_MECH GSSException.BAD_MECH},
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
   {@link GSSException#BAD_NAME GSSException.BAD_NAME},
   {@link GSSException#CREDENTIALS_EXPIRED
                                  GSSException.CREDENTIALS_EXPIRED},
   {@link GSSException#NO_CRED GSSException.NO_CRED},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12172930 "createCredential"
	abstract public return_type class_ref 836738 // GSSCredential
	nparams 4
	  param inout name "name" type class_ref 836482 // GSSName
	  param in name "lifetime" explicit_type "int"
	  param inout name "mech" type class_ref 836610 // Oid
	  param in name "usage" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for acquiring a single mechanism credential.<p>

GSS-API mechanism providers must impose a local access-control
policy on callers to prevent unauthorized callers from acquiring
credentials to which they are not entitled. The kinds of permissions
needed by different mechanism providers will be documented on a
per-mechanism basis. A failed permission check might cause a {@link
java.lang.SecurityException SecurityException} to be thrown from
this method. <p>

Non-default values for lifetime cannot always be honored by the
underlying mechanisms, thus applications should be prepared to call
{@link GSSCredential#getRemainingLifetime() getRemainingLifetime}
on the returned credential.<p>

@param name the name of the principal for whom this credential is to be
acquired.  Use <code>null</code> to specify the default principal.
@param lifetime The number of seconds that credentials should remain
valid.  Use {@link GSSCredential#INDEFINITE_LIFETIME
GSSCredential.INDEFINITE_LIFETIME} to request that the credentials
have the maximum permitted lifetime.  Use {@link
GSSCredential#DEFAULT_LIFETIME GSSCredential.DEFAULT_LIFETIME} to
request default credential lifetime.
@param mech the Oid of the desired mechanism.  Use <code>(Oid) null
</code> to request the default mechanism.
@param usage The intended usage for this credential object. The value
of this parameter must be one of:
{@link GSSCredential#INITIATE_AND_ACCEPT
GSSCredential.INITIATE_AND_ACCEPT},
{@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY}, and
{@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}.
@return a GSSCredential of the requested type.

@see GSSCredential

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_MECH GSSException.BAD_MECH},
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
   {@link GSSException#BAD_NAME GSSException.BAD_NAME},
   {@link GSSException#CREDENTIALS_EXPIRED
                                  GSSException.CREDENTIALS_EXPIRED},
   {@link GSSException#NO_CRED GSSException.NO_CRED},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12173058 "createCredential"
	abstract public return_type class_ref 836738 // GSSCredential
	nparams 4
	  param inout name "name" type class_ref 836482 // GSSName
	  param in name "lifetime" explicit_type "int"
	  param inout name "mechs" type class_ref 836610 // Oid
	multiplicity "[]"
	  param in name "usage" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for acquiring credentials over a set of
mechanisms. This method attempts to acquire credentials for
each of the mechanisms specified in the array called mechs.  To
determine the list of mechanisms for which the acquisition of
credentials succeeded, the caller should use the {@link
GSSCredential#getMechs() GSSCredential.getMechs} method.<p>

GSS-API mechanism providers must impose a local access-control
policy on callers to prevent unauthorized callers from acquiring
credentials to which they are not entitled. The kinds of permissions
needed by different mechanism providers will be documented on a
per-mechanism basis. A failed permission check might cause a {@link
java.lang.SecurityException SecurityException} to be thrown from
this method.<p>

Non-default values for lifetime cannot always be honored by the
underlying mechanisms, thus applications should be prepared to call
{@link GSSCredential#getRemainingLifetime() getRemainingLifetime}
on the returned credential.<p>

@param name the name of the principal for whom this credential is to
be acquired.  Use <code>null</code> to specify the default
principal.
@param lifetime The number of seconds that credentials should remain
valid.  Use {@link GSSCredential#INDEFINITE_LIFETIME
GSSCredential.INDEFINITE_LIFETIME} to request that the credentials
have the maximum permitted lifetime.  Use {@link
GSSCredential#DEFAULT_LIFETIME GSSCredential.DEFAULT_LIFETIME} to
request default credential lifetime.
@param mechs an array of Oid's indicating the mechanisms over which
the credential is to be acquired.  Use <code>(Oid[]) null</code> for
requesting a system specific default set of mechanisms.
@param usage The intended usage for this credential object. The value
of this parameter must be one of:
{@link GSSCredential#INITIATE_AND_ACCEPT
GSSCredential.INITIATE_AND_ACCEPT},
{@link GSSCredential#ACCEPT_ONLY GSSCredential.ACCEPT_ONLY}, and
{@link GSSCredential#INITIATE_ONLY GSSCredential.INITIATE_ONLY}.
@return a GSSCredential of the requested type.

@see GSSCredential

@throws GSSException containing the following
major error codes:
   {@link GSSException#BAD_MECH GSSException.BAD_MECH},
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},
   {@link GSSException#BAD_NAME GSSException.BAD_NAME},
   {@link GSSException#CREDENTIALS_EXPIRED
                                  GSSException.CREDENTIALS_EXPIRED},
   {@link GSSException#NO_CRED GSSException.NO_CRED},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12173186 "createContext"
	abstract public return_type class_ref 835970 // GSSContext
	nparams 4
	  param inout name "peer" type class_ref 836482 // GSSName
	  param inout name "mech" type class_ref 836610 // Oid
	  param inout name "myCred" type class_ref 836738 // GSSCredential
	  param in name "lifetime" explicit_type "int"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for creating a context on the initiator's
side.

Some mechanism providers might require that the caller be granted
permission to initiate a security context. A failed permission check
might cause a {@link java.lang.SecurityException SecurityException}
to be thrown from this method.<p>

Non-default values for lifetime cannot always be honored by the
underlying mechanism, thus applications should be prepared to call
{@link GSSContext#getLifetime() getLifetime} on the returned
context.<p>

@param peer the name of the target peer.
@param mech the Oid of the desired mechanism.  Use <code>null</code>
to request the default mechanism.
@param myCred the credentials of the initiator.  Use
<code>null</code> to act as the default initiator principal.
@param lifetime the lifetime, in seconds, requested for the
context. Use {@link GSSContext#INDEFINITE_LIFETIME
GSSContext.INDEFINITE_LIFETIME} to request that the context have the
maximum permitted lifetime. Use {@link GSSContext#DEFAULT_LIFETIME
GSSContext.DEFAULT_LIFETIME} to request a default lifetime for the
context.
@return an unestablished GSSContext

@see GSSContext

@throws GSSException containing the following
major error codes:
   {@link GSSException#NO_CRED GSSException.NO_CRED}
   {@link GSSException#CREDENTIALS_EXPIRED
                     GSSException.CREDENTIALS_EXPIRED}
   {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE}
   {@link GSSException#BAD_MECH GSSException.BAD_MECH}
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12173314 "createContext"
	abstract public return_type class_ref 835970 // GSSContext
	nparams 1
	  param inout name "myCred" type class_ref 836738 // GSSCredential
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for creating a context on the acceptor' side.  The
context's properties will be determined from the input token supplied
to the accept method.

Some mechanism providers might require that the caller be granted
permission to accept a security context. A failed permission check
might cause a {@link java.lang.SecurityException SecurityException}
to be thrown from this method.

@param myCred the credentials for the acceptor.  Use
<code>null</code> to act as a default acceptor principal.
@return an unestablished GSSContext

@see GSSContext

@throws GSSException containing the following
major error codes:
   {@link GSSException#NO_CRED GSSException.NO_CRED}
   {@link GSSException#CREDENTIALS_EXPIRED
                       GSSException.CREDENTIALS_EXPIRED}
   {@link GSSException#BAD_MECH GSSException.BAD_MECH}
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12173442 "createContext"
	abstract public return_type class_ref 835970 // GSSContext
	nparams 1
	  param inout name "interProcessToken" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for creating a previously exported context.  The
context properties will be determined from the input token and
cannot be modified through the set methods.<p>

Implementations are not required to support the inter-process
transfer of security contexts.  Before exporting a context, calling
the {@link GSSContext#isTransferable() GSSContext.isTransferable}
will indicate if the context is transferable. Calling this method in
an implementation that does not support it will result in a
<code>GSSException</code> with the error
code {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE}.

Some mechanism providers might require that the caller be granted
permission to initiate or accept a security context. A failed
permission check might cause a {@link java.lang.SecurityException
SecurityException} to be thrown from this method.

@param interProcessToken the token previously emitted from the
export method.
@return the previously established GSSContext

@see GSSContext

@throws GSSException containing the following
major error codes:
   {@link GSSException#NO_CONTEXT GSSException.NO_CONTEXT},
   {@link GSSException#DEFECTIVE_TOKEN GSSException.DEFECTIVE_TOKEN},
   {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},
   {@link GSSException#UNAUTHORIZED GSSException.UNAUTHORIZED},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12173570 "addProviderAtFront"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "p" type class_ref 509570 // Provider
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used to indicate to the GSSManager that the
application would like a particular provider to be used ahead of all
others when support is desired for the given mechanism. When a value
of null is used instead of an <code>Oid</code> for the mechanism,
the GSSManager must use the indicated provider ahead of all others
no matter what the mechanism is. Only when the indicated provider
does not support the needed mechanism should the GSSManager move on
to a different provider.<p>

Calling this method repeatedly preserves the older settings but
lowers them in preference thus forming an ordered list of provider
and <code>Oid</code> pairs that grows at the top.<p>

Calling addProviderAtFront with a null <code>Oid</code> will remove
all previous preferences that were set for this provider in the
GSSManager instance. Calling addProviderAtFront with a non-null
<code>Oid</code> will remove any previous preference that was set
using this mechanism and this provider together.<p>

If the GSSManager implementation does not support an SPI with a
pluggable provider architecture it should throw a GSSException with
the status code GSSException.UNAVAILABLE to indicate that the
operation is unavailable.<p>

Suppose an application desired that the provider A always be checked
first when any mechanism is needed, it would call:<p>
<pre>
        GSSManager mgr = GSSManager.getInstance();
        // mgr may at this point have its own pre-configured list
        // of provider preferences. The following will prepend to
        // any such list:

        mgr.addProviderAtFront(A, null);
</pre>
Now if it also desired that the mechanism of Oid m1 always be
obtained from the provider B before the previously set A was checked,
it would call:<p>
<pre>
        mgr.addProviderAtFront(B, m1);
</pre>
The GSSManager would then first check with B if m1 was needed. In
case B did not provide support for m1, the GSSManager would continue
on to check with A.  If any mechanism m2 is needed where m2 is
different from m1 then the GSSManager would skip B and check with A
directly.<p>

Suppose at a later time the following call is made to the same
GSSManager instance:<p>
<pre>
        mgr.addProviderAtFront(B, null)
</pre>
then the previous setting with the pair (B, m1) is subsumed by this
and should be removed. Effectively the list of preferences now
becomes {(B, null), (A, null),
        ... //followed by the pre-configured list.<p>

Please note, however, that the following call:
<pre>
        mgr.addProviderAtFront(A, m3)
</pre>
does not subsume the previous setting of (A, null) and the list will
effectively become {(A, m3), (B, null), (A, null), ...}

@param p the provider instance that should be used whenever support
is needed for mech.
@param mech the mechanism for which the provider is being set

@throws GSSException containing the following
major error codes:
   {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end

      operation 12173698 "addProviderAtEnd"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "p" type class_ref 509570 // Provider
	  param inout name "mech" type class_ref 836610 // Oid
	nexceptions 1
	  exception class_ref 836098 // GSSException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used to indicate to the GSSManager that the
application would like a particular provider to be used if no other
provider can be found that supports the given mechanism. When a value
of null is used instead of an Oid for the mechanism, the GSSManager
must use the indicated provider for any mechanism.<p>

Calling this method repeatedly preserves the older settings but
raises them above newer ones in preference thus forming an ordered
list of providers and Oid pairs that grows at the bottom. Thus the
older provider settings will be utilized first before this one is.<p>

If there are any previously existing preferences that conflict with
the preference being set here, then the GSSManager should ignore this
request.<p>

If the GSSManager implementation does not support an SPI with a
pluggable provider architecture it should throw a GSSException with
the status code GSSException.UNAVAILABLE to indicate that the
operation is unavailable.<p>

Suppose an application desired that when a mechanism of Oid m1 is
needed the system default providers always be checked first, and only
when they do not support m1 should a provider A be checked. It would
then make the call:<p>
<pre>
        GSSManager mgr = GSSManager.getInstance();
        mgr.addProviderAtEnd(A, m1);
</pre>
Now, if it also desired that for all mechanisms the provider B be
checked after all configured providers have been checked, it would
then call:<p>
<pre>
        mgr.addProviderAtEnd(B, null);
</pre>
Effectively the list of preferences now becomes {..., (A, m1), (B,
null)}.<p>

Suppose at a later time the following call is made to the same
GSSManager instance:<p>
<pre>
        mgr.addProviderAtEnd(B, m2)
</pre>
then the previous setting with the pair (B, null) subsumes this and
therefore this request should be ignored. The same would happen if a
request is made for the already existing pairs of (A, m1) or (B,
null).<p>

Please note, however, that the following call:<p>
<pre>
        mgr.addProviderAtEnd(A, null)
</pre>
is not subsumed by the previous setting of (A, m1) and the list will
effectively become {..., (A, m1), (B, null), (A, null)}

@param p the provider instance that should be used whenever support
is needed for mech.
@param mech the mechanism for which the provider is being set

@throws GSSException containing the following
major error codes:
   {@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE},
   {@link GSSException#FAILURE GSSException.FAILURE}
"
      end
    end
  end

  deploymentview 165122 "jgss"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 600194 "GSSContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.security.jgss.spi.*;
import java.io.InputStream;
import java.io.OutputStream;
${definition}"
      associated_elems
	class_ref 835970 // GSSContext
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 600450 "GSSCredential"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 836738 // GSSCredential
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1033730 "ChannelBinding"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.InetAddress;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 836354 // ChannelBinding
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1033858 "GSSException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 836098 // GSSException
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1033986 "GSSManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.Provider;
${definition}"
      associated_elems
	class_ref 1441794 // GSSManager
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1034114 "GSSName"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.security.jgss.spi.*;
import java.util.Vector;
import java.util.Enumeration;
${definition}"
      associated_elems
	class_ref 836482 // GSSName
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1034242 "MessageProp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 836226 // MessageProp
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1034370 "Oid"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import sun.security.util.DerValue;
import sun.security.util.DerOutputStream;
import sun.security.util.ObjectIdentifier;
${definition}"
      associated_elems
	class_ref 836610 // Oid
      end
      comment "Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
