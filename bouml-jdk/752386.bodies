class MessageDigest
!!!7973378.java!!!	MessageDigest(inout algorithm : String)
        this.algorithm = algorithm;
!!!7973506.java!!!	getInstance(inout algorithm : String) : MessageDigest
        try {
            MessageDigest md;
            Object[] objs = Security.getImpl(algorithm, "MessageDigest",
                                             (String)null);
            if (objs[0] instanceof MessageDigest) {
                md = (MessageDigest)objs[0];
            } else {
                md = new Delegate((MessageDigestSpi)objs[0], algorithm);
            }
            md.provider = (Provider)objs[1];

            if (!skipDebug && pdebug != null) {
                pdebug.println("MessageDigest." + algorithm +
                    " algorithm from: " + md.provider.getName());
            }

            return md;

        } catch(NoSuchProviderException e) {
            throw new NoSuchAlgorithmException(algorithm + " not found");
        }
!!!7973634.java!!!	getInstance(inout algorithm : String, inout provider : String) : MessageDigest
        if (provider == null || provider.length() == 0)
            throw new IllegalArgumentException("missing provider");
        Object[] objs = Security.getImpl(algorithm, "MessageDigest", provider);
        if (objs[0] instanceof MessageDigest) {
            MessageDigest md = (MessageDigest)objs[0];
            md.provider = (Provider)objs[1];
            return md;
        } else {
            MessageDigest delegate =
                new Delegate((MessageDigestSpi)objs[0], algorithm);
            delegate.provider = (Provider)objs[1];
            return delegate;
        }
!!!7973762.java!!!	getInstance(inout algorithm : String, inout provider : Provider) : MessageDigest
        if (provider == null)
            throw new IllegalArgumentException("missing provider");
        Object[] objs = Security.getImpl(algorithm, "MessageDigest", provider);
        if (objs[0] instanceof MessageDigest) {
            MessageDigest md = (MessageDigest)objs[0];
            md.provider = (Provider)objs[1];
            return md;
        } else {
            MessageDigest delegate =
                new Delegate((MessageDigestSpi)objs[0], algorithm);
            delegate.provider = (Provider)objs[1];
            return delegate;
        }
!!!7973890.java!!!	getProvider() : Provider
        return this.provider;
!!!7974018.java!!!	update(in input : byte) : void
        engineUpdate(input);
        state = IN_PROGRESS;
!!!7974146.java!!!	update(inout input : byte [[]], in offset : int, in len : int) : void
        if (input == null) {
            throw new IllegalArgumentException("No input buffer given");
        }
        if (input.length - offset < len) {
            throw new IllegalArgumentException("Input buffer too short");
        }
        engineUpdate(input, offset, len);
        state = IN_PROGRESS;
!!!7974274.java!!!	update(inout input : byte [[]]) : void
        engineUpdate(input, 0, input.length);
        state = IN_PROGRESS;
!!!7974402.java!!!	update(inout input : ByteBuffer) : void
        if (input == null) {
            throw new NullPointerException();
        }
        engineUpdate(input);
        state = IN_PROGRESS;
!!!7974530.java!!!	digest() : byte
        /* Resetting is the responsibility of implementors. */
        byte[] result = engineDigest();
        state = INITIAL;
        return result;
!!!7974658.java!!!	digest(inout buf : byte [[]], in offset : int, in len : int) : int
        if (buf == null) {
            throw new IllegalArgumentException("No output buffer given");
        }
        if (buf.length - offset < len) {
            throw new IllegalArgumentException
                ("Output buffer too small for specified offset and length");
        }
        int numBytes = engineDigest(buf, offset, len);
        state = INITIAL;
        return numBytes;
!!!7974786.java!!!	digest(inout input : byte [[]]) : byte
        update(input);
        return digest();
!!!7974914.java!!!	toString() : String
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream p = new PrintStream(baos);
        p.print(algorithm+" Message Digest from "+provider.getName()+", ");
        switch (state) {
        case INITIAL:
            p.print("<initialized>");
            break;
        case IN_PROGRESS:
            p.print("<in progress>");
            break;
        }
        p.println();
        return (baos.toString());
!!!7975042.java!!!	isEqual(inout digesta : byte [[]], inout digestb : byte [[]]) : boolean
        if (digesta == digestb) return true;
        if (digesta == null || digestb == null) {
            return false;
        }
        if (digesta.length != digestb.length) {
            return false;
        }

        int result = 0;
        // time-constant comparison
        for (int i = 0; i < digesta.length; i++) {
            result |= digesta[i] ^ digestb[i];
        }
        return result == 0;
!!!7975170.java!!!	reset() : void
        engineReset();
        state = INITIAL;
!!!7975298.java!!!	getAlgorithm() : String
        return this.algorithm;
!!!7975426.java!!!	getDigestLength() : int
        int digestLen = engineGetDigestLength();
        if (digestLen == 0) {
            try {
                MessageDigest md = (MessageDigest)clone();
                byte[] digest = md.digest();
                return digest.length;
            } catch (CloneNotSupportedException e) {
                return digestLen;
            }
        }
        return digestLen;
!!!7975554.java!!!	clone() : Object
        if (this instanceof Cloneable) {
            return super.clone();
        } else {
            throw new CloneNotSupportedException();
        }
