class WrappingSpliterator
!!!9596674.java!!!	WrappingSpliterator(inout ph : PipelineHelper, inout supplier : Supplier, inout parallel : boolean)
            super(ph, supplier, parallel);
!!!9596802.java!!!	WrappingSpliterator(inout ph : PipelineHelper, inout spliterator : Spliterator, inout parallel : boolean)
            super(ph, spliterator, parallel);
!!!9596930.java!!!	wrap(inout s : Spliterator) : StreamSpliterators::WrappingSpliterator
            return new WrappingSpliterator<>(ph, s, isParallel);
!!!9597058.java!!!	initPartialTraversalState() : void
            SpinedBuffer<P_OUT> b = new SpinedBuffer<>();
            buffer = b;
            bufferSink = ph.wrapSink(b::accept);
            pusher = () -> spliterator.tryAdvance(bufferSink);
!!!9597186.java!!!	tryAdvance(inout consumer : Consumer) : boolean
            Objects.requireNonNull(consumer);
            boolean hasNext = doAdvance();
            if (hasNext)
                consumer.accept(buffer.get(nextToConsume));
            return hasNext;
!!!9597314.java!!!	forEachRemaining(inout consumer : Consumer) : void
            if (buffer == null && !finished) {
                Objects.requireNonNull(consumer);
                init();

                ph.wrapAndCopyInto((Sink<P_OUT>) consumer::accept, spliterator);
                finished = true;
            }
            else {
                do { } while (tryAdvance(consumer));
            }
