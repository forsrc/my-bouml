class LockSupport
!!!9302402.java!!!	setBlocker(inout t : Thread, inout arg : Object) : void
        // Even though volatile, hotspot doesn't need a write barrier here.
        UNSAFE.putObject(t, parkBlockerOffset, arg);
!!!9302530.java!!!	unpark(inout thread : Thread) : void
        if (thread != null)
            UNSAFE.unpark(thread);
!!!9302658.java!!!	park(inout blocker : Object) : void
        Thread t = Thread.currentThread();
        setBlocker(t, blocker);
        UNSAFE.park(false, 0L);
        setBlocker(t, null);
!!!9302786.java!!!	parkNanos(inout blocker : Object, in nanos : long) : void
        if (nanos > 0) {
            Thread t = Thread.currentThread();
            setBlocker(t, blocker);
            UNSAFE.park(false, nanos);
            setBlocker(t, null);
        }
!!!9302914.java!!!	parkUntil(inout blocker : Object, in deadline : long) : void
        Thread t = Thread.currentThread();
        setBlocker(t, blocker);
        UNSAFE.park(true, deadline);
        setBlocker(t, null);
!!!9303042.java!!!	getBlocker(inout t : Thread) : Object
        if (t == null)
            throw new NullPointerException();
        return UNSAFE.getObjectVolatile(t, parkBlockerOffset);
!!!9303170.java!!!	park() : void
        UNSAFE.park(false, 0L);
!!!9303298.java!!!	parkNanos(in nanos : long) : void
        if (nanos > 0)
            UNSAFE.park(false, nanos);
!!!9303426.java!!!	parkUntil(in deadline : long) : void
        UNSAFE.park(true, deadline);
!!!9303554.java!!!	nextSecondarySeed() : int
        int r;
        Thread t = Thread.currentThread();
        if ((r = UNSAFE.getInt(t, SECONDARY)) != 0) {
            r ^= r << 13;   // xorshift
            r ^= r >>> 17;
            r ^= r << 5;
        }
        else if ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)
            r = 1; // avoid zero
        UNSAFE.putInt(t, SECONDARY, r);
        return r;
