class ShortHandPointer
!!!5170306.java!!!	ShortHandPointer(inout symbolTable : SymbolTable)
        fSymbolTable = symbolTable;
!!!5170434.java!!!	parseXPointer(inout part : String) : void
        fShortHandPointer = part;
        // reset fIsFragmentResolved
        fIsFragmentResolved = false;
!!!5170562.java!!!	resolveXPointer(inout element : QName, inout attributes : XMLAttributes, inout augs : Augmentations, in event : int) : boolean

        // reset fIsFragmentResolved
        if (fMatchingChildCount == 0) {
            fIsFragmentResolved = false;
        }

        // On startElement or emptyElement, if no matching elements or parent
        // elements were found, check for a matching idenfitier.
        if (event == XPointerPart.EVENT_ELEMENT_START) {
            if (fMatchingChildCount == 0) {
                fIsFragmentResolved = hasMatchingIdentifier(element, attributes, augs,
                    event);
            }
            if (fIsFragmentResolved) {
               fMatchingChildCount++;
            }
        } else if (event == XPointerPart.EVENT_ELEMENT_EMPTY) {
            if (fMatchingChildCount == 0) {
                fIsFragmentResolved = hasMatchingIdentifier(element, attributes, augs,
                    event);
            }
        }
        else {
            // On endElement, decrease the matching child count if the child or
            // its parent was resolved.
            if (fIsFragmentResolved) {
                fMatchingChildCount--;
            }
        }

        return fIsFragmentResolved ;
!!!5170690.java!!!	hasMatchingIdentifier(inout element : QName, inout attributes : XMLAttributes, inout augs : Augmentations, in event : int) : boolean
        String normalizedValue = null;

        // The identifiers of an element are determined by the
        // ShortHand Pointer as follows:

        if (attributes != null) {
            for (int i = 0; i < attributes.getLength(); i++) {

                // 1. If an element information item has an attribute information item
                // among its [attributes] that is a schema-determined ID, then it is
                // identified by the value of that attribute information item's
                // [schema normalized value] property;
                normalizedValue = getSchemaDeterminedID(attributes, i);
                if (normalizedValue != null) {
                    break;
                }

                // 2. If an element information item has an element information item among
                // its [children] that is a schema-determined ID, then it is identified by
                // the value of that element information item's [schema normalized value] property;
                // ???
                normalizedValue = getChildrenSchemaDeterminedID(attributes, i);
                if (normalizedValue != null) {
                    break;
                }

                // 3. If an element information item has an attribute information item among
                // its [attributes] that is a DTD-determined ID, then it is identified by the
                // value of that attribute information item's [normalized value] property.
                // An attribute information item is a DTD-determined ID if and only if it has
                // a [type definition] property whose value is equal to ID.
                normalizedValue = getDTDDeterminedID(attributes, i);
                if (normalizedValue != null) {
                    break;
                }
                // 4. No externally determined ID's
            }
        }

        if (normalizedValue != null
                && normalizedValue.equals(fShortHandPointer)) {
            return true;
        }

        return false;
!!!5170818.java!!!	getDTDDeterminedID(inout attributes : XMLAttributes, in index : int) : String

        if (attributes.getType(index).equals("ID")) {
            return attributes.getValue(index);
        }
        return null;
!!!5170946.java!!!	getSchemaDeterminedID(inout attributes : XMLAttributes, in index : int) : String
        Augmentations augs = attributes.getAugmentations(index);
        AttributePSVI attrPSVI = (AttributePSVI) augs
        .getItem(Constants.ATTRIBUTE_PSVI);

        if (attrPSVI != null) {
            // An element or attribute information item is a schema-determined
            // ID if and only if one of the following is true:]

            // 1. It has a [member type definition] or [type definition] property
            // whose value in turn has [name] equal to ID and [target namespace]
            // equal to http://www.w3.org/2001/XMLSchema;

            // 2. It has a [base type definition] whose value has that [name] and [target namespace];

            // 3. It has a [base type definition] whose value has a [base type definition]
            // whose value has that [name] and [target namespace], and so on following
            // the [base type definition] property recursively;

            XSTypeDefinition typeDef = attrPSVI.getMemberTypeDefinition();
            if (typeDef != null) {
                typeDef = attrPSVI.getTypeDefinition();
            }

            //
            if (typeDef != null && ((XSSimpleType) typeDef).isIDType()) {
                return attrPSVI.getSchemaNormalizedValue();
            }

            // 4 & 5 NA
        }

        return null;
!!!5171074.java!!!	getChildrenSchemaDeterminedID(inout attributes : XMLAttributes, in index : int) : String
        return null;
!!!5171202.java!!!	isFragmentResolved() : boolean
        return fIsFragmentResolved;
!!!5171330.java!!!	isChildFragmentResolved() : boolean
        return fIsFragmentResolved & ( fMatchingChildCount >  0);
!!!5171458.java!!!	getSchemeName() : String
        return fShortHandPointer;
!!!5171586.java!!!	getSchemeData() : String
        return null;
!!!5171714.java!!!	setSchemeName(inout schemeName : String) : void
        fShortHandPointer = schemeName;
!!!5171842.java!!!	setSchemeData(inout schemeData : String) : void
        // NA
