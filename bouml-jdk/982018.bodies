class HeapCharBuffer
!!!7740290.java!!!	HeapCharBuffer(in cap : int, in lim : int)
            // package-private

        super(-1, 0, lim, cap, new char[cap], 0);
        /*
        hb = new char[cap];
        offset = 0;
        */




!!!7740418.java!!!	HeapCharBuffer(inout buf : char [[]], in off : int, in len : int)
 // package-private

        super(-1, off, off + len, buf.length, buf, 0);
        /*
        hb = buf;
        offset = 0;
        */




!!!7740546.java!!!	HeapCharBuffer(inout buf : char [[]], in mark : int, in pos : int, in lim : int, in cap : int, in off : int)

        super(mark, pos, lim, cap, buf, off);
        /*
        hb = buf;
        offset = off;
        */




!!!7740674.java!!!	slice() : CharBuffer
        return new HeapCharBuffer(hb,
                                        -1,
                                        0,
                                        this.remaining(),
                                        this.remaining(),
                                        this.position() + offset);
!!!7740802.java!!!	duplicate() : CharBuffer
        return new HeapCharBuffer(hb,
                                        this.markValue(),
                                        this.position(),
                                        this.limit(),
                                        this.capacity(),
                                        offset);
!!!7740930.java!!!	asReadOnlyBuffer() : CharBuffer

        return new HeapCharBufferR(hb,
                                     this.markValue(),
                                     this.position(),
                                     this.limit(),
                                     this.capacity(),
                                     offset);



!!!7741058.java!!!	ix(in i : int) : int
        return i + offset;
!!!7741186.java!!!	get() : char
        return hb[ix(nextGetIndex())];
!!!7741314.java!!!	get(in i : int) : char
        return hb[ix(checkIndex(i))];
!!!7741442.java!!!	getUnchecked(in i : int) : char
	return hb[ix(i)];
!!!7741570.java!!!	get(inout dst : char [[]], in offset : int, in length : int) : CharBuffer
        checkBounds(offset, length, dst.length);
        if (length > remaining())
            throw new BufferUnderflowException();
        System.arraycopy(hb, ix(position()), dst, offset, length);
        position(position() + length);
        return this;
!!!7741698.java!!!	isDirect() : boolean
        return false;
!!!7741826.java!!!	isReadOnly() : boolean
        return false;
!!!7741954.java!!!	put(in x : char) : CharBuffer

        hb[ix(nextPutIndex())] = x;
        return this;



!!!7742082.java!!!	put(in i : int, in x : char) : CharBuffer

        hb[ix(checkIndex(i))] = x;
        return this;



!!!7742210.java!!!	put(inout src : char [[]], in offset : int, in length : int) : CharBuffer

        checkBounds(offset, length, src.length);
        if (length > remaining())
            throw new BufferOverflowException();
        System.arraycopy(src, offset, hb, ix(position()), length);
        position(position() + length);
        return this;



!!!7742338.java!!!	put(inout src : CharBuffer) : CharBuffer

        if (src instanceof HeapCharBuffer) {
            if (src == this)
                throw new IllegalArgumentException();
            HeapCharBuffer sb = (HeapCharBuffer)src;
            int n = sb.remaining();
            if (n > remaining())
                throw new BufferOverflowException();
            System.arraycopy(sb.hb, sb.ix(sb.position()),
                             hb, ix(position()), n);
            sb.position(sb.position() + n);
            position(position() + n);
        } else if (src.isDirect()) {
            int n = src.remaining();
            if (n > remaining())
                throw new BufferOverflowException();
            src.get(hb, ix(position()), n);
            position(position() + n);
        } else {
            super.put(src);
        }
        return this;



!!!7742466.java!!!	compact() : CharBuffer

        System.arraycopy(hb, ix(position()), hb, ix(0), remaining());
        position(remaining());
        limit(capacity());
        discardMark();
        return this;



!!!7742594.java!!!	toString(in start : int, in end : int) : String
               // package-private
        try {
            return new String(hb, start + offset, end - start);
        } catch (StringIndexOutOfBoundsException x) {
            throw new IndexOutOfBoundsException();
        }
!!!7742722.java!!!	subSequence(in start : int, in end : int) : CharBuffer
        if ((start < 0)
            || (end > length())
            || (start > end))
            throw new IndexOutOfBoundsException();
        int pos = position();
        return new HeapCharBuffer(hb,
                                      -1,
                                      pos + start,
                                      pos + end,
                                      capacity(),
                                      offset);
!!!7742850.java!!!	order() : ByteOrder
        return ByteOrder.nativeOrder();
