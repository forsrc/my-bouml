class SAXCatalogReader
!!!5271554.java!!!	setParserFactory(inout parserFactory : SAXParserFactory) : void
    this.parserFactory = parserFactory;
!!!5271682.java!!!	setParserClass(inout parserClass : String) : void
    this.parserClass = parserClass;
!!!5271810.java!!!	getParserFactory() : SAXParserFactory
    return parserFactory;
!!!5271938.java!!!	getParserClass() : String
    return parserClass;
!!!5272066.java!!!	SAXCatalogReader()
    parserFactory = null;
    parserClass = null;
!!!5272194.java!!!	SAXCatalogReader(inout parserFactory : SAXParserFactory)
    this.parserFactory = parserFactory;
!!!5272322.java!!!	SAXCatalogReader(inout parserClass : String)
    this.parserClass = parserClass;
!!!5272450.java!!!	setCatalogParser(inout namespaceURI : String, inout rootElement : String, inout parserClass : String) : void
    if (namespaceURI == null) {
      namespaceMap.put(rootElement, parserClass);
    } else {
      namespaceMap.put("{"+namespaceURI+"}"+rootElement, parserClass);
    }
!!!5272578.java!!!	getCatalogParser(inout namespaceURI : String, inout rootElement : String) : String
    if (namespaceURI == null) {
      return namespaceMap.get(rootElement);
    } else {
      return namespaceMap.get("{"+namespaceURI+"}"+rootElement);
    }
!!!5272706.java!!!	readCatalog(inout catalog : Catalog, inout fileUrl : String) : void

    URL url = null;

    try {
      url = new URL(fileUrl);
    } catch (MalformedURLException e) {
      url = new URL("file:///" + fileUrl);
    }

    debug = catalog.getCatalogManager().debug;

    try {
      URLConnection urlCon = url.openConnection();
      readCatalog(catalog, urlCon.getInputStream());
    } catch (FileNotFoundException e) {
      catalog.getCatalogManager().debug.message(1, "Failed to load catalog, file not found",
                    url.toString());
    }
!!!5272834.java!!!	readCatalog(inout catalog : Catalog, inout is : InputStream) : void

    // Create an instance of the parser
    if (parserFactory == null && parserClass == null) {
      debug.message(1, "Cannot read SAX catalog without a parser");
      throw new CatalogException(CatalogException.UNPARSEABLE);
    }

    debug = catalog.getCatalogManager().debug;
    EntityResolver bResolver = catalog.getCatalogManager().getBootstrapResolver();

    this.catalog = catalog;

    try {
      if (parserFactory != null) {
        SAXParser parser = parserFactory.newSAXParser();
        SAXParserHandler spHandler = new SAXParserHandler();
        spHandler.setContentHandler(this);
        if (bResolver != null) {
          spHandler.setEntityResolver(bResolver);
        }
        parser.parse(new InputSource(is), spHandler);
      } else {
        Parser parser = (Parser) ReflectUtil.forName(parserClass).newInstance();
        parser.setDocumentHandler(this);
        if (bResolver != null) {
          parser.setEntityResolver(bResolver);
        }
        parser.parse(new InputSource(is));
      }
    } catch (ClassNotFoundException cnfe) {
      throw new CatalogException(CatalogException.UNPARSEABLE);
    } catch (IllegalAccessException iae) {
      throw new CatalogException(CatalogException.UNPARSEABLE);
    } catch (InstantiationException ie) {
      throw new CatalogException(CatalogException.UNPARSEABLE);
    } catch (ParserConfigurationException pce) {
      throw new CatalogException(CatalogException.UNKNOWN_FORMAT);
    } catch (SAXException se) {
      Exception e = se.getException();
      // FIXME: there must be a better way
      UnknownHostException uhe = new UnknownHostException();
      FileNotFoundException fnfe = new FileNotFoundException();
      if (e != null) {
        if (e.getClass() == uhe.getClass()) {
          throw new CatalogException(CatalogException.PARSE_FAILED,
                                     e.toString());
        } else if (e.getClass() == fnfe.getClass()) {
          throw new CatalogException(CatalogException.PARSE_FAILED,
                                     e.toString());
        }
      }
      throw new CatalogException(se);
    }
!!!5272962.java!!!	setDocumentLocator(inout locator : Locator) : void
    if (saxParser != null) {
      saxParser.setDocumentLocator(locator);
    }
!!!5273090.java!!!	startDocument() : void
    saxParser = null;
    abandonHope = false;
    return;
!!!5273218.java!!!	endDocument() : void
    if (saxParser != null) {
      saxParser.endDocument();
    }
!!!5273346.java!!!	startElement(inout name : String, inout atts : AttributeList) : void

    if (abandonHope) {
      return;
    }

    if (saxParser == null) {
      String prefix = "";
      if (name.indexOf(':') > 0) {
        prefix = name.substring(0, name.indexOf(':'));
      }

      String localName = name;
      if (localName.indexOf(':') > 0) {
        localName = localName.substring(localName.indexOf(':')+1);
      }

      String namespaceURI = null;
      if (prefix.equals("")) {
        namespaceURI = atts.getValue("xmlns");
      } else {
        namespaceURI = atts.getValue("xmlns:" + prefix);
      }

      String saxParserClass = getCatalogParser(namespaceURI,
                                               localName);

      if (saxParserClass == null) {
        abandonHope = true;
        if (namespaceURI == null) {
          debug.message(2, "No Catalog parser for " + name);
        } else {
          debug.message(2, "No Catalog parser for "
                        + "{" + namespaceURI + "}"
                        + name);
        }
        return;
      }

      try {
        saxParser = (SAXCatalogParser)
          ReflectUtil.forName(saxParserClass).newInstance();

        saxParser.setCatalog(catalog);
        saxParser.startDocument();
        saxParser.startElement(name, atts);
      } catch (ClassNotFoundException cnfe) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cnfe.toString());
      } catch (InstantiationException ie) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, ie.toString());
      } catch (IllegalAccessException iae) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, iae.toString());
      } catch (ClassCastException cce ) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cce.toString());
      }
    } else {
      saxParser.startElement(name, atts);
    }
!!!5273474.java!!!	startElement(inout namespaceURI : String, inout localName : String, inout qName : String, inout atts : Attributes) : void

    if (abandonHope) {
      return;
    }

    if (saxParser == null) {
      String saxParserClass = getCatalogParser(namespaceURI,
                                               localName);

      if (saxParserClass == null) {
        abandonHope = true;
        if (namespaceURI == null) {
          debug.message(2, "No Catalog parser for " + localName);
        } else {
          debug.message(2, "No Catalog parser for "
                        + "{" + namespaceURI + "}"
                        + localName);
        }
        return;
      }

      try {
        saxParser = (SAXCatalogParser)
          ReflectUtil.forName(saxParserClass).newInstance();

        saxParser.setCatalog(catalog);
        saxParser.startDocument();
        saxParser.startElement(namespaceURI, localName, qName, atts);
      } catch (ClassNotFoundException cnfe) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cnfe.toString());
      } catch (InstantiationException ie) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, ie.toString());
      } catch (IllegalAccessException iae) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, iae.toString());
      } catch (ClassCastException cce ) {
        saxParser = null;
        abandonHope = true;
        debug.message(2, cce.toString());
      }
    } else {
      saxParser.startElement(namespaceURI, localName, qName, atts);
    }
!!!5273602.java!!!	endElement(inout name : String) : void
    if (saxParser != null) {
      saxParser.endElement(name);
    }
!!!5273730.java!!!	endElement(inout namespaceURI : String, inout localName : String, inout qName : String) : void
    if (saxParser != null) {
      saxParser.endElement(namespaceURI, localName, qName);
    }
!!!5273858.java!!!	characters(inout ch : char [[]], in start : int, in length : int) : void
    if (saxParser != null) {
      saxParser.characters(ch, start, length);
    }
!!!5273986.java!!!	ignorableWhitespace(inout ch : char [[]], in start : int, in length : int) : void
    if (saxParser != null) {
      saxParser.ignorableWhitespace(ch, start, length);
    }
!!!5274114.java!!!	processingInstruction(inout target : String, inout data : String) : void
    if (saxParser != null) {
      saxParser.processingInstruction(target, data);
    }
!!!5274242.java!!!	startPrefixMapping(inout prefix : String, inout uri : String) : void
    if (saxParser != null) {
      saxParser.startPrefixMapping (prefix, uri);
    }
!!!5274370.java!!!	endPrefixMapping(inout prefix : String) : void
    if (saxParser != null) {
      saxParser.endPrefixMapping (prefix);
    }
!!!5274498.java!!!	skippedEntity(inout name : String) : void
    if (saxParser != null) {
      saxParser.skippedEntity(name);
    }
