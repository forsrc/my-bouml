class SerializerBase
!!!5568386.java!!!	fireEndElem(inout name : String) : void
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name, (Attributes)null);
        }
!!!5568514.java!!!	fireCharEvent(inout chars : char [[]], in start : int, in length : int) : void
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CHARACTERS, chars, start,length);
        }
!!!5568642.java!!!	comment(inout data : String) : void
        final int length = data.length();
        if (length > m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        data.getChars(0, length, m_charsBuff, 0);
        comment(m_charsBuff, 0, length);
!!!5568770.java!!!	patchName(inout qname : String) : String


        final int lastColon = qname.lastIndexOf(':');

        if (lastColon > 0) {
            final int firstColon = qname.indexOf(':');
            final String prefix = qname.substring(0, firstColon);
            final String localName = qname.substring(lastColon + 1);

        // If uri is "" then ignore prefix
            final String uri = m_prefixMap.lookupNamespace(prefix);
            if (uri != null && uri.length() == 0) {
                return localName;
            }
            else if (firstColon != lastColon) {
                return prefix + ':' + localName;
            }
        }
        return qname;
!!!5568898.java!!!	getLocalName(inout qname : String) : String
        final int col = qname.lastIndexOf(':');
        return (col > 0) ? qname.substring(col + 1) : qname;
!!!5569026.java!!!	setDocumentLocator(inout locator : Locator) : void
        m_locator = locator;
!!!5569154.java!!!	addAttribute(inout uri : String, inout localName : String, inout rawName : String, inout type : String, inout value : String, inout XSLAttribute : boolean) : void
        if (m_elemContext.m_startTagOpen)
        {
            addAttributeAlways(uri, localName, rawName, type, value, XSLAttribute);
        }

!!!5569282.java!!!	addAttributeAlways(inout uri : String, inout localName : String, inout rawName : String, inout type : String, inout value : String, inout XSLAttribute : boolean) : boolean
        boolean was_added;
//            final int index =
//                (localName == null || uri == null) ?
//                m_attributes.getIndex(rawName):m_attributes.getIndex(uri, localName);
            int index;
//            if (localName == null || uri == null){
//                index = m_attributes.getIndex(rawName);
//            }
//            else {
//                index = m_attributes.getIndex(uri, localName);
//            }

            if (localName == null || uri == null || uri.length() == 0)
                index = m_attributes.getIndex(rawName);
            else {
                index = m_attributes.getIndex(uri,localName);
            }
            if (index >= 0)
            {
                /* We've seen the attribute before.
                 * We may have a null uri or localName, but all
                 * we really want to re-set is the value anyway.
                 */
                m_attributes.setValue(index,value);
                was_added = false;
            }
            else
            {
                // the attribute doesn't exist yet, create it
                m_attributes.addAttribute(uri, localName, rawName, type, value);
                was_added = true;
            }
            return was_added;

!!!5569410.java!!!	addAttribute(inout name : String, in value : String) : void
        if (m_elemContext.m_startTagOpen)
        {
            final String patchedName = patchName(name);
            final String localName = getLocalName(patchedName);
            final String uri = getNamespaceURI(patchedName, false);

            addAttributeAlways(uri,localName, patchedName, "CDATA", value, false);
         }
!!!5569538.java!!!	addXSLAttribute(inout name : String, in value : String, in uri : String) : void
        if (m_elemContext.m_startTagOpen)
        {
            final String patchedName = patchName(name);
            final String localName = getLocalName(patchedName);

            addAttributeAlways(uri,localName, patchedName, "CDATA", value, true);
         }
!!!5569666.java!!!	addAttributes(inout atts : Attributes) : void

        int nAtts = atts.getLength();
        for (int i = 0; i < nAtts; i++)
        {
            String uri = atts.getURI(i);

            if (null == uri)
                uri = "";

            addAttributeAlways(
                uri,
                atts.getLocalName(i),
                atts.getQName(i),
                atts.getType(i),
                atts.getValue(i),
                false);

        }
!!!5569794.java!!!	asContentHandler() : ContentHandler
        return this;
!!!5569922.java!!!	endEntity(inout name : String) : void
        if (name.equals("[dtd]"))
            m_inExternalDTD = false;
        m_inEntityRef = false;

        if (m_tracer != null)
            this.fireEndEntity(name);
!!!5570050.java!!!	close() : void
        // do nothing (base behavior)
!!!5570178.java!!!	initCDATA() : void
        // CDATA stack
        //        _cdataStack = new Stack();
        //        _cdataStack.push(new Integer(-1)); // push dummy value
!!!5570306.java!!!	getEncoding() : String
        return m_encoding;
!!!5570434.java!!!	setEncoding(inout m_encoding : String) : void
        this.m_encoding = m_encoding;
!!!5570562.java!!!	setOmitXMLDeclaration(inout b : boolean) : void
        this.m_shouldNotWriteXMLHeader = b;
!!!5570690.java!!!	getOmitXMLDeclaration() : boolean
        return m_shouldNotWriteXMLHeader;
!!!5570818.java!!!	getDoctypePublic() : String
        return m_doctypePublic;
!!!5570946.java!!!	setDoctypePublic(inout doctypePublic : String) : void
        this.m_doctypePublic = doctypePublic;
!!!5571074.java!!!	getDoctypeSystem() : String
        return m_doctypeSystem;
!!!5571202.java!!!	setDoctypeSystem(inout doctypeSystem : String) : void
        this.m_doctypeSystem = doctypeSystem;
!!!5571330.java!!!	setDoctype(inout doctypeSystem : String, inout doctypePublic : String) : void
        this.m_doctypeSystem = doctypeSystem;
        this.m_doctypePublic = doctypePublic;
!!!5571458.java!!!	setStandalone(inout standalone : String) : void
        if (standalone != null)
        {
            m_standaloneWasSpecified = true;
            setStandaloneInternal(standalone);
        }
!!!5571586.java!!!	setStandaloneInternal(inout standalone : String) : void
        if ("yes".equals(standalone))
            m_standalone = "yes";
        else
            m_standalone = "no";

!!!5571714.java!!!	getStandalone() : String
        return m_standalone;
!!!5571842.java!!!	getIndent() : boolean
        return m_doIndent;
!!!5571970.java!!!	getMediaType() : String
        return m_mediatype;
!!!5572098.java!!!	getVersion() : String
        return m_version;
!!!5572226.java!!!	setVersion(inout version : String) : void
        m_version = version;
!!!5572354.java!!!	setMediaType(inout mediaType : String) : void
        m_mediatype = mediaType;
!!!5572482.java!!!	getIndentAmount() : int
        return m_indentAmount;
!!!5572610.java!!!	setIndentAmount(in m_indentAmount : int) : void
        this.m_indentAmount = m_indentAmount;
!!!5572738.java!!!	setIndent(inout doIndent : boolean) : void
        m_doIndent = doIndent;
!!!5572866.java!!!	setIsStandalone(inout isStandalone : boolean) : void
       m_isStandalone = isStandalone;
!!!5572994.java!!!	namespaceAfterStartElement(inout uri : String, inout prefix : String) : void
        // default behavior is to do nothing
!!!5573122.java!!!	asDOMSerializer() : DOMSerializer
        return this;
!!!5573250.java!!!	isCdataSection() : boolean

        boolean b = false;

        if (null != m_cdataSectionElements)
        {
            if (m_elemContext.m_elementLocalName == null)
                m_elemContext.m_elementLocalName =
                    getLocalName(m_elemContext.m_elementName);
            if (m_elemContext.m_elementURI == null)
            {
                String prefix = getPrefixPart(m_elemContext.m_elementName);
                if (prefix != null)
                    m_elemContext.m_elementURI =
                        m_prefixMap.lookupNamespace(prefix);

            }

            if ((null != m_elemContext.m_elementURI)
                && m_elemContext.m_elementURI.length() == 0)
                m_elemContext.m_elementURI = null;

            int nElems = m_cdataSectionElements.size();

            // loop through 2 at a time, as these are pairs of URI and localName
            for (int i = 0; i < nElems; i += 2)
            {
                String uri = (String) m_cdataSectionElements.elementAt(i);
                String loc = (String) m_cdataSectionElements.elementAt(i + 1);
                if (loc.equals(m_elemContext.m_elementLocalName)
                    && subPartMatch(m_elemContext.m_elementURI, uri))
                {
                    b = true;

                    break;
                }
            }
        }
        return b;
!!!5573378.java!!!	subPartMatch(inout p : String, inout t : String) : boolean
        return (p == t) || ((null != p) && (p.equals(t)));
!!!5573506.java!!!	getPrefixPart(inout qname : String) : String
        final int col = qname.indexOf(':');
        return (col > 0) ? qname.substring(0, col) : null;
        //return (col > 0) ? qname.substring(0,col) : "";
!!!5573634.java!!!	getNamespaceMappings() : NamespaceMappings
        return m_prefixMap;
!!!5573762.java!!!	getPrefix(inout namespaceURI : String) : String
        String prefix = m_prefixMap.lookupPrefix(namespaceURI);
        return prefix;
!!!5573890.java!!!	getNamespaceURI(inout qname : String, inout isElement : boolean) : String
        String uri = EMPTYSTRING;
        int col = qname.lastIndexOf(':');
        final String prefix = (col > 0) ? qname.substring(0, col) : EMPTYSTRING;

        if (!EMPTYSTRING.equals(prefix) || isElement)
        {
            if (m_prefixMap != null)
            {
                uri = m_prefixMap.lookupNamespace(prefix);
                if (uri == null && !prefix.equals(XMLNS_PREFIX))
                {
                    throw new RuntimeException(
                        Utils.messages.createMessage(
                            MsgKey.ER_NAMESPACE_PREFIX,
                            new Object[] { qname.substring(0, col) }  ));
                }
            }
        }
        return uri;
!!!5574018.java!!!	getNamespaceURIFromPrefix(inout prefix : String) : String
        String uri = null;
        if (m_prefixMap != null)
            uri = m_prefixMap.lookupNamespace(prefix);
        return uri;
!!!5574146.java!!!	entityReference(inout name : String) : void

        flushPending();

        startEntity(name);
        endEntity(name);

        if (m_tracer != null)
                    fireEntityReference(name);
!!!5574274.java!!!	setTransformer(inout t : Transformer) : void
        m_transformer = t;

        // If this transformer object implements the SerializerTrace interface
        // then assign m_tracer to the transformer object so it can be used
        // to fire trace events.
        if ((m_transformer instanceof SerializerTrace) &&
            (((SerializerTrace) m_transformer).hasTraceListeners())) {
           m_tracer = (SerializerTrace) m_transformer;
        } else {
           m_tracer = null;
        }
!!!5574402.java!!!	getTransformer() : Transformer
        return m_transformer;
!!!5574530.java!!!	characters(inout node : Node) : void
        flushPending();
        String data = node.getNodeValue();
        if (data != null)
        {
            final int length = data.length();
            if (length > m_charsBuff.length)
            {
                m_charsBuff = new char[length * 2 + 1];
            }
            data.getChars(0, length, m_charsBuff, 0);
            characters(m_charsBuff, 0, length);
        }
!!!5574786.java!!!	fatalError(inout exc : SAXParseException) : void

      m_elemContext.m_startTagOpen = false;

!!!5575042.java!!!	fireStartEntity(inout name : String) : void
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF, name);
        }
!!!5575170.java!!!	flushMyWriter() : void
        if (m_writer != null)
        {
            try
            {
                m_writer.flush();
            }
            catch(IOException ioe)
            {

            }
        }
!!!5575298.java!!!	fireCDATAEvent(inout chars : char [[]], in start : int, in length : int) : void
                if (m_tracer != null)
        {
            flushMyWriter();
                        m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CDATA, chars, start,length);
        }
!!!5575426.java!!!	fireCommentEvent(inout chars : char [[]], in start : int, in length : int) : void
                if (m_tracer != null)
        {
            flushMyWriter();
                        m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_COMMENT, new String(chars, start, length));
        }
!!!5575554.java!!!	fireEndEntity(inout name : String) : void
        if (m_tracer != null)
            flushMyWriter();
        // we do not need to handle this.
!!!5575682.java!!!	fireStartDoc() : void
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTDOCUMENT);
        }
!!!5575810.java!!!	fireEndDoc() : void
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDDOCUMENT);
        }
!!!5575938.java!!!	fireStartElem(inout elemName : String) : void
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTELEMENT,
                elemName, m_attributes);
        }
!!!5576066.java!!!	fireEscapingEvent(inout name : String, inout data : String) : void

        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_PI,name, data);
        }
!!!5576194.java!!!	fireEntityReference(inout name : String) : void
        if (m_tracer != null)
        {
            flushMyWriter();
            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name, (Attributes)null);
        }
!!!5576322.java!!!	startDocument() : void

        // if we do get called with startDocument(), handle it right away
        startDocumentInternal();
        m_needToCallStartDocument = false;
        return;
!!!5576450.java!!!	startDocumentInternal() : void
        if (m_tracer != null)
            this.fireStartDoc();

!!!5576578.java!!!	setDocumentInfo() : void
        if (m_locator == null)
                return;
        try{
            String strVersion = ((Locator2)m_locator).getXMLVersion();
            if (strVersion != null)
                setVersion(strVersion);
            /*String strEncoding = ((Locator2)m_locator).getEncoding();
            if (strEncoding != null)
                setEncoding(strEncoding); */

        }catch(ClassCastException e){}
!!!5576706.java!!!	setSourceLocator(inout locator : SourceLocator) : void
        m_sourceLocator = locator;
!!!5576834.java!!!	setNamespaceMappings(inout mappings : NamespaceMappings) : void
        m_prefixMap = mappings;
!!!5576962.java!!!	reset() : boolean
        resetSerializerBase();
        return true;
!!!5577090.java!!!	resetSerializerBase() : void
        this.m_attributes.clear();
        this.m_cdataSectionElements = null;
        this.m_elemContext = new ElemContext();
        this.m_doctypePublic = null;
        this.m_doctypeSystem = null;
        this.m_doIndent = false;
        this.m_encoding = null;
        this.m_indentAmount = 0;
        this.m_inEntityRef = false;
        this.m_inExternalDTD = false;
        this.m_mediatype = null;
        this.m_needToCallStartDocument = true;
        this.m_needToOutputDocTypeDecl = false;
        if (this.m_prefixMap != null)
            this.m_prefixMap.reset();
        this.m_shouldNotWriteXMLHeader = false;
        this.m_sourceLocator = null;
        this.m_standalone = null;
        this.m_standaloneWasSpecified = false;
        this.m_tracer = null;
        this.m_transformer = null;
        this.m_version = null;
        // don't set writer to null, so that it might be re-used
        //this.m_writer = null;
!!!5577218.java!!!	inTemporaryOutputState() : boolean
        /* This is a hack. We should really be letting the serializer know
         * that it is in temporary output state with an explicit call, but
         * from a pragmatic point of view (for now anyways) having no output
         * encoding at all, not even the default UTF-8 indicates that the serializer
         * is being used for temporary RTF.
         */
        return (getEncoding() == null);

!!!5577346.java!!!	addAttribute(inout uri : String, inout localName : String, inout rawName : String, inout type : String, inout value : String) : void
        if (m_elemContext.m_startTagOpen)
        {
            addAttributeAlways(uri, localName, rawName, type, value, false);
        }
!!!5577474.java!!!	notationDecl(inout arg0 : String, inout arg1 : String, inout arg2 : String) : void
        // This method just provides a definition to satisfy the interface
        // A particular sub-class of SerializerBase provides the implementation (if desired)
!!!5577602.java!!!	unparsedEntityDecl(inout arg0 : String, inout arg1 : String, inout arg2 : String, inout arg3 : String) : void
        // This method just provides a definition to satisfy the interface
        // A particular sub-class of SerializerBase provides the implementation (if desired)
!!!5577730.java!!!	setDTDEntityExpansion(inout expand : boolean) : void
        // This method just provides a definition to satisfy the interface
        // A particular sub-class of SerializerBase provides the implementation (if desired)
