class MXBeanSupport
!!!2990466.java!!!	MXBeanSupport(inout resource : T, inout mxbeanInterface : Class)
        super(resource, mxbeanInterface);
!!!2990594.java!!!	getMBeanIntrospector() : MBeanIntrospector
        return MXBeanIntrospector.getInstance();
!!!2990722.java!!!	getCookie() : Object
        return mxbeanLookup;
!!!2990850.java!!!	findMXBeanInterface(inout resourceClass : Class) : Class
        if (resourceClass == null)
            throw new IllegalArgumentException("Null resource class");
        final Set<Class<?>> intfs = transitiveInterfaces(resourceClass);
        final Set<Class<?>> candidates = newSet();
        for (Class<?> intf : intfs) {
            if (JMX.isMXBeanInterface(intf))
                candidates.add(intf);
        }
    reduce:
        while (candidates.size() > 1) {
            for (Class<?> intf : candidates) {
                for (Iterator<Class<?>> it = candidates.iterator(); it.hasNext();
                    ) {
                    final Class<?> intf2 = it.next();
                    if (intf != intf2 && intf2.isAssignableFrom(intf)) {
                        it.remove();
                        continue reduce;
                    }
                }
            }
            final String msg =
                "Class " + resourceClass.getName() + " implements more than " +
                "one MXBean interface: " + candidates;
            throw new IllegalArgumentException(msg);
        }
        if (candidates.iterator().hasNext()) {
            return Util.cast(candidates.iterator().next());
        } else {
            final String msg =
                "Class " + resourceClass.getName() +
                " is not a JMX compliant MXBean";
            throw new IllegalArgumentException(msg);
        }
!!!2990978.java!!!	transitiveInterfaces(inout c : Class) : Set
        Set<Class<?>> set = newSet();
        transitiveInterfaces(c, set);
        return set;
!!!2991106.java!!!	transitiveInterfaces(inout c : Class, inout intfs : Set) : void
        if (c == null)
            return;
        if (c.isInterface())
            intfs.add(c);
        transitiveInterfaces(c.getSuperclass(), intfs);
        for (Class<?> sup : c.getInterfaces())
            transitiveInterfaces(sup, intfs);
!!!2991234.java!!!	register(inout server : MBeanServer, inout name : ObjectName) : void
        if (name == null)
            throw new IllegalArgumentException("Null object name");
        // eventually we could have some logic to supply a default name

        synchronized (lock) {
            this.mxbeanLookup = MXBeanLookup.lookupFor(server);
            this.mxbeanLookup.addReference(name, getResource());
            this.objectName = name;
        }
!!!2991362.java!!!	unregister() : void
        synchronized (lock) {
            if (mxbeanLookup != null) {
                if (mxbeanLookup.removeReference(objectName, getResource()))
                    objectName = null;
            }
        }
