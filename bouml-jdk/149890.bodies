class ByteBuffer
!!!7592706.java!!!	ByteBuffer(in mark : int, in pos : int, in lim : int, in cap : int, inout hb : byte [[]], in offset : int)
        super(mark, pos, lim, cap);
        this.hb = hb;
        this.offset = offset;
!!!7592834.java!!!	ByteBuffer(in mark : int, in pos : int, in lim : int, in cap : int)
 // package-private
        this(mark, pos, lim, cap, null, 0);
!!!7592962.java!!!	allocateDirect(in capacity : int) : ByteBuffer
        return new DirectByteBuffer(capacity);
!!!7593090.java!!!	allocate(in capacity : int) : ByteBuffer
        if (capacity < 0)
            throw new IllegalArgumentException();
        return new HeapByteBuffer(capacity, capacity);
!!!7593218.java!!!	wrap(inout array : byte [[]], in offset : int, in length : int) : ByteBuffer
        try {
            return new HeapByteBuffer(array, offset, length);
        } catch (IllegalArgumentException x) {
            throw new IndexOutOfBoundsException();
        }
!!!7593346.java!!!	wrap(inout array : byte [[]]) : ByteBuffer
        return wrap(array, 0, array.length);
!!!7594370.java!!!	get(inout dst : byte [[]], in offset : int, in length : int) : ByteBuffer
        checkBounds(offset, length, dst.length);
        if (length > remaining())
            throw new BufferUnderflowException();
        int end = offset + length;
        for (int i = offset; i < end; i++)
            dst[i] = get();
        return this;
!!!7594498.java!!!	get(inout dst : byte [[]]) : ByteBuffer
        return get(dst, 0, dst.length);
!!!7594626.java!!!	put(inout src : ByteBuffer) : ByteBuffer
        if (src == this)
            throw new IllegalArgumentException();
        if (isReadOnly())
            throw new ReadOnlyBufferException();
        int n = src.remaining();
        if (n > remaining())
            throw new BufferOverflowException();
        for (int i = 0; i < n; i++)
            put(src.get());
        return this;
!!!7594754.java!!!	put(inout src : byte [[]], in offset : int, in length : int) : ByteBuffer
        checkBounds(offset, length, src.length);
        if (length > remaining())
            throw new BufferOverflowException();
        int end = offset + length;
        for (int i = offset; i < end; i++)
            this.put(src[i]);
        return this;
!!!7594882.java!!!	put(inout src : byte [[]]) : ByteBuffer
        return put(src, 0, src.length);
!!!7595010.java!!!	hasArray() : boolean
        return (hb != null) && !isReadOnly;
!!!7595138.java!!!	array() : byte
        if (hb == null)
            throw new UnsupportedOperationException();
        if (isReadOnly)
            throw new ReadOnlyBufferException();
        return hb;
!!!7595266.java!!!	arrayOffset() : int
        if (hb == null)
            throw new UnsupportedOperationException();
        if (isReadOnly)
            throw new ReadOnlyBufferException();
        return offset;
!!!7595650.java!!!	toString() : String
        StringBuffer sb = new StringBuffer();
        sb.append(getClass().getName());
        sb.append("[pos=");
        sb.append(position());
        sb.append(" lim=");
        sb.append(limit());
        sb.append(" cap=");
        sb.append(capacity());
        sb.append("]");
        return sb.toString();
!!!7595778.java!!!	hashCode() : int
        int h = 1;
        int p = position();
        for (int i = limit() - 1; i >= p; i--)



            h = 31 * h + (int)get(i);

        return h;
!!!7595906.java!!!	equals(inout ob : Object) : boolean
        if (this == ob)
            return true;
        if (!(ob instanceof ByteBuffer))
            return false;
        ByteBuffer that = (ByteBuffer)ob;
        if (this.remaining() != that.remaining())
            return false;
        int p = this.position();
        for (int i = this.limit() - 1, j = that.limit() - 1; i >= p; i--, j--)
            if (!equals(this.get(i), that.get(j)))
                return false;
        return true;
!!!7596034.java!!!	equals(in x : byte, in y : byte) : boolean



        return x == y;

!!!7596162.java!!!	compareTo(inout that : ByteBuffer) : int
        int n = this.position() + Math.min(this.remaining(), that.remaining());
        for (int i = this.position(), j = that.position(); i < n; i++, j++) {
            int cmp = compare(this.get(i), that.get(j));
            if (cmp != 0)
                return cmp;
        }
        return this.remaining() - that.remaining();
!!!7596290.java!!!	compare(in x : byte, in y : byte) : int






        return Byte.compare(x, y);

!!!7596418.java!!!	order() : ByteOrder
        return bigEndian ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;
!!!7596546.java!!!	order(inout bo : ByteOrder) : ByteBuffer
        bigEndian = (bo == ByteOrder.BIG_ENDIAN);
        nativeByteOrder =
            (bigEndian == (Bits.byteOrder() == ByteOrder.BIG_ENDIAN));
        return this;
