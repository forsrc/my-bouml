format 222
"net" // jdk1.8::java::net
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/net/"
  java_package "java.net"
  classview 136578 "net"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 208898 "ServerSocket"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements server sockets. A server socket waits for
requests to come in over the network. It performs some operation
based on that request, and then possibly returns a result to the requester.
<p>
The actual work of the server socket is performed by an instance
of the {@code SocketImpl} class. An application can
change the socket factory that creates the socket
implementation to configure itself to create sockets
appropriate to the local firewall.

@author  unascribed
@see     java.net.SocketImpl
@see     java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)
@see     java.nio.channels.ServerSocketChannel
@since   JDK1.0
"
      classrelation 3255426 // <realization>
	relation 3255426 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3255426 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      attribute 1777538 "created"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Various states of this socket.

"
      end

      attribute 1777666 "bound"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1777794 "closed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3255554 // closeLock (<unidirectional association>)
	relation 3255554 --->
	  a role_name "closeLock" init_value " new Object()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3255554 // closeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3255682 // impl (<unidirectional association>)
	relation 3255682 --->
	  a role_name "impl" private
	    comment "
The implementation of this Socket.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3255682 // impl (<unidirectional association>)
	  b parent class_ref 962690 // SocketImpl
      end

      attribute 1777922 "oldImpl"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Are we using an older SocketImpl?

"
      end

      operation 7520386 "ServerSocket"
	package explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 962690 // SocketImpl
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor to create a ServerSocket associated with
the given SocketImpl.
"
      end

      operation 7520514 "ServerSocket"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unbound server socket.

@exception IOException IO error when opening the socket.
@revised 1.4
"
      end

      operation 7520642 "ServerSocket"
	public explicit_return_type ""
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a server socket, bound to the specified port. A port number
of {@code 0} means that the port number is automatically
allocated, typically from an ephemeral port range. This port
number can then be retrieved by calling {@link #getLocalPort getLocalPort}.
<p>
The maximum queue length for incoming connection indications (a
request to connect) is set to {@code 50}. If a connection
indication arrives when the queue is full, the connection is refused.
<p>
If the application has specified a server socket factory, that
factory's {@code createSocketImpl} method is called to create
the actual socket implementation. Otherwise a \"plain\" socket is created.
<p>
If there is a security manager,
its {@code checkListen} method is called
with the {@code port} argument
as its argument to ensure the operation is allowed.
This could result in a SecurityException.


@param      port  the port number, or {@code 0} to use a port
                  number that is automatically allocated.

@exception  IOException  if an I/O error occurs when opening the socket.
@exception  SecurityException
if a security manager exists and its {@code checkListen}
method doesn't allow the operation.
@exception  IllegalArgumentException if the port parameter is outside
            the specified range of valid port values, which is between
            0 and 65535, inclusive.

@see        java.net.SocketImpl
@see        java.net.SocketImplFactory#createSocketImpl()
@see        java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)
@see        SecurityManager#checkListen
"
      end

      operation 7520770 "ServerSocket"
	public explicit_return_type ""
	nparams 2
	  param in name "port" explicit_type "int"
	  param in name "backlog" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a server socket and binds it to the specified local port
number, with the specified backlog.
A port number of {@code 0} means that the port number is
automatically allocated, typically from an ephemeral port range.
This port number can then be retrieved by calling
{@link #getLocalPort getLocalPort}.
<p>
The maximum queue length for incoming connection indications (a
request to connect) is set to the {@code backlog} parameter. If
a connection indication arrives when the queue is full, the
connection is refused.
<p>
If the application has specified a server socket factory, that
factory's {@code createSocketImpl} method is called to create
the actual socket implementation. Otherwise a \"plain\" socket is created.
<p>
If there is a security manager,
its {@code checkListen} method is called
with the {@code port} argument
as its argument to ensure the operation is allowed.
This could result in a SecurityException.

The {@code backlog} argument is the requested maximum number of
pending connections on the socket. Its exact semantics are implementation
specific. In particular, an implementation may impose a maximum length
or may choose to ignore the parameter altogther. The value provided
should be greater than {@code 0}. If it is less than or equal to
{@code 0}, then an implementation specific default will be used.
<P>

@param      port     the port number, or {@code 0} to use a port
                     number that is automatically allocated.
@param      backlog  requested maximum length of the queue of incoming
                     connections.

@exception  IOException  if an I/O error occurs when opening the socket.
@exception  SecurityException
if a security manager exists and its {@code checkListen}
method doesn't allow the operation.
@exception  IllegalArgumentException if the port parameter is outside
            the specified range of valid port values, which is between
            0 and 65535, inclusive.

@see        java.net.SocketImpl
@see        java.net.SocketImplFactory#createSocketImpl()
@see        java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)
@see        SecurityManager#checkListen
"
      end

      operation 7520898 "ServerSocket"
	public explicit_return_type ""
	nparams 3
	  param in name "port" explicit_type "int"
	  param in name "backlog" explicit_type "int"
	  param inout name "bindAddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a server with the specified port, listen backlog, and
local IP address to bind to.  The <i>bindAddr</i> argument
can be used on a multi-homed host for a ServerSocket that
will only accept connect requests to one of its addresses.
If <i>bindAddr</i> is null, it will default accepting
connections on any/all local addresses.
The port must be between 0 and 65535, inclusive.
A port number of {@code 0} means that the port number is
automatically allocated, typically from an ephemeral port range.
This port number can then be retrieved by calling
{@link #getLocalPort getLocalPort}.

<P>If there is a security manager, this method
calls its {@code checkListen} method
with the {@code port} argument
as its argument to ensure the operation is allowed.
This could result in a SecurityException.

The {@code backlog} argument is the requested maximum number of
pending connections on the socket. Its exact semantics are implementation
specific. In particular, an implementation may impose a maximum length
or may choose to ignore the parameter altogther. The value provided
should be greater than {@code 0}. If it is less than or equal to
{@code 0}, then an implementation specific default will be used.
<P>
@param port  the port number, or {@code 0} to use a port
             number that is automatically allocated.
@param backlog requested maximum length of the queue of incoming
               connections.
@param bindAddr the local InetAddress the server will bind to

@throws  SecurityException if a security manager exists and
its {@code checkListen} method doesn't allow the operation.

@throws  IOException if an I/O error occurs when opening the socket.
@exception  IllegalArgumentException if the port parameter is outside
            the specified range of valid port values, which is between
            0 and 65535, inclusive.

@see SocketOptions
@see SocketImpl
@see SecurityManager#checkListen
@since   JDK1.1
"
      end

      operation 7521026 "getImpl"
	package return_type class_ref 962690 // SocketImpl
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the {@code SocketImpl} attached to this socket, creating
it if necessary.

@return  the {@code SocketImpl} attached to that ServerSocket.
@throws SocketException if creation fails.
@since 1.4
"
      end

      operation 7521154 "checkOldImpl"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7521282 "setImpl"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7521410 "createImpl"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the socket implementation.

@throws IOException if creation fails
@since 1.4
"
      end

      operation 7521538 "bind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "endpoint" type class_ref 962178 // SocketAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Binds the {@code ServerSocket} to a specific address
(IP address and port number).
<p>
If the address is {@code null}, then the system will pick up
an ephemeral port and a valid local address to bind the socket.
<p>
@param   endpoint        The IP address and port number to bind to.
@throws  IOException if the bind operation fails, or if the socket
                    is already bound.
@throws  SecurityException       if a {@code SecurityManager} is present and
its {@code checkListen} method doesn't allow the operation.
@throws  IllegalArgumentException if endpoint is a
         SocketAddress subclass not supported by this socket
@since 1.4
"
      end

      operation 7521666 "bind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "endpoint" type class_ref 962178 // SocketAddress
	  param in name "backlog" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Binds the {@code ServerSocket} to a specific address
(IP address and port number).
<p>
If the address is {@code null}, then the system will pick up
an ephemeral port and a valid local address to bind the socket.
<P>
The {@code backlog} argument is the requested maximum number of
pending connections on the socket. Its exact semantics are implementation
specific. In particular, an implementation may impose a maximum length
or may choose to ignore the parameter altogther. The value provided
should be greater than {@code 0}. If it is less than or equal to
{@code 0}, then an implementation specific default will be used.
@param   endpoint        The IP address and port number to bind to.
@param   backlog         requested maximum length of the queue of
                         incoming connections.
@throws  IOException if the bind operation fails, or if the socket
                    is already bound.
@throws  SecurityException       if a {@code SecurityManager} is present and
its {@code checkListen} method doesn't allow the operation.
@throws  IllegalArgumentException if endpoint is a
         SocketAddress subclass not supported by this socket
@since 1.4
"
      end

      operation 7521794 "getInetAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the local address of this server socket.
<p>
If the socket was bound prior to being {@link #close closed},
then this method will continue to return the local address
after the socket is closed.
<p>
If there is a security manager set, its {@code checkConnect} method is
called with the local address and {@code -1} as its arguments to see
if the operation is allowed. If the operation is not allowed,
the {@link InetAddress#getLoopbackAddress loopback} address is returned.

@return  the address to which this socket is bound,
         or the loopback address if denied by the security manager,
         or {@code null} if the socket is unbound.

@see SecurityManager#checkConnect
"
      end

      operation 7521922 "getLocalPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port number on which this socket is listening.
<p>
If the socket was bound prior to being {@link #close closed},
then this method will continue to return the port number
after the socket is closed.

@return  the port number to which this socket is listening or
         -1 if the socket is not bound yet.
"
      end

      operation 7522050 "getLocalSocketAddress"
	public return_type class_ref 962178 // SocketAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address of the endpoint this socket is bound to.
<p>
If the socket was bound prior to being {@link #close closed},
then this method will continue to return the address of the endpoint
after the socket is closed.
<p>
If there is a security manager set, its {@code checkConnect} method is
called with the local address and {@code -1} as its arguments to see
if the operation is allowed. If the operation is not allowed,
a {@code SocketAddress} representing the
{@link InetAddress#getLoopbackAddress loopback} address and the local
port to which the socket is bound is returned.

@return a {@code SocketAddress} representing the local endpoint of
        this socket, or a {@code SocketAddress} representing the
        loopback address if denied by the security manager,
        or {@code null} if the socket is not bound yet.

@see #getInetAddress()
@see #getLocalPort()
@see #bind(SocketAddress)
@see SecurityManager#checkConnect
@since 1.4
"
      end

      operation 7522178 "accept"
	public return_type class_ref 209154 // Socket
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Listens for a connection to be made to this socket and accepts
it. The method blocks until a connection is made.

<p>A new Socket {@code s} is created and, if there
is a security manager,
the security manager's {@code checkAccept} method is called
with {@code s.getInetAddress().getHostAddress()} and
{@code s.getPort()}
as its arguments to ensure the operation is allowed.
This could result in a SecurityException.

@exception  IOException  if an I/O error occurs when waiting for a
              connection.
@exception  SecurityException  if a security manager exists and its
            {@code checkAccept} method doesn't allow the operation.
@exception  SocketTimeoutException if a timeout was previously set with setSoTimeout and
            the timeout has been reached.
@exception  java.nio.channels.IllegalBlockingModeException
            if this socket has an associated channel, the channel is in
            non-blocking mode, and there is no connection ready to be
            accepted

@return the new Socket
@see SecurityManager#checkAccept
@revised 1.4
@spec JSR-51
"
      end

      operation 7522306 "implAccept"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 209154 // Socket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclasses of ServerSocket use this method to override accept()
to return their own subclass of socket.  So a FooServerSocket
will typically hand this method an <i>empty</i> FooSocket.  On
return from implAccept the FooSocket will be connected to a client.

@param s the Socket
@throws java.nio.channels.IllegalBlockingModeException
        if this socket has an associated channel,
        and the channel is in non-blocking mode
@throws IOException if an I/O error occurs when waiting
for a connection.
@since   JDK1.1
@revised 1.4
@spec JSR-51
"
      end

      operation 7522434 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this socket.

Any thread currently blocked in {@link #accept()} will throw
a {@link SocketException}.

<p> If this socket has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs when closing the socket.
@revised 1.4
@spec JSR-51
"
      end

      operation 7522562 "getChannel"
	public return_type class_ref 211714 // ServerSocketChannel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.ServerSocketChannel} object
associated with this socket, if any.

<p> A server socket will have a channel if, and only if, the channel
itself was created via the {@link
java.nio.channels.ServerSocketChannel#open ServerSocketChannel.open}
method.

@return  the server-socket channel associated with this socket,
         or {@code null} if this socket was not created
         for a channel

@since 1.4
@spec JSR-51
"
      end

      operation 7522690 "isBound"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the binding state of the ServerSocket.

@return true if the ServerSocket successfully bound to an address
@since 1.4
"
      end

      operation 7522818 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the closed state of the ServerSocket.

@return true if the socket has been closed
@since 1.4
"
      end

      operation 7522946 "setSoTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} with the
specified timeout, in milliseconds.  With this option set to a non-zero
timeout, a call to accept() for this ServerSocket
will block for only this amount of time.  If the timeout expires,
a <B>java.net.SocketTimeoutException</B> is raised, though the
ServerSocket is still valid.  The option <B>must</B> be enabled
prior to entering the blocking operation to have effect.  The
timeout must be {@code > 0}.
A timeout of zero is interpreted as an infinite timeout.
@param timeout the specified timeout, in milliseconds
@exception SocketException if there is an error in
the underlying protocol, such as a TCP error.
@since   JDK1.1
@see #getSoTimeout()
"
      end

      operation 7523074 "getSoTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}.
0 returns implies that the option is disabled (i.e., timeout of infinity).
@return the {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} value
@exception IOException if an I/O error occurs
@since   JDK1.1
@see #setSoTimeout(int)
"
      end

      operation 7523202 "setReuseAddress"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}
socket option.
<p>
When a TCP connection is closed the connection may remain
in a timeout state for a period of time after the connection
is closed (typically known as the {@code TIME_WAIT} state
or {@code 2MSL} wait state).
For applications using a well known socket address or port
it may not be possible to bind a socket to the required
{@code SocketAddress} if there is a connection in the
timeout state involving the socket address or port.
<p>
Enabling {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} prior to
binding the socket using {@link #bind(SocketAddress)} allows the socket
to be bound even though a previous connection is in a timeout state.
<p>
When a {@code ServerSocket} is created the initial setting
of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is not defined.
Applications can use {@link #getReuseAddress()} to determine the initial
setting of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}.
<p>
The behaviour when {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is
enabled or disabled after a socket is bound (See {@link #isBound()})
is not defined.

@param on  whether to enable or disable the socket option
@exception SocketException if an error occurs enabling or
           disabling the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}
           socket option, or the socket is closed.
@since 1.4
@see #getReuseAddress()
@see #bind(SocketAddress)
@see #isBound()
@see #isClosed()
"
      end

      operation 7523330 "getReuseAddress"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.

@return a {@code boolean} indicating whether or not
        {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since   1.4
@see #setReuseAddress(boolean)
"
      end

      operation 7523458 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the implementation address and implementation port of
this socket as a {@code String}.
<p>
If there is a security manager set, its {@code checkConnect} method is
called with the local address and {@code -1} as its arguments to see
if the operation is allowed. If the operation is not allowed,
an {@code InetAddress} representing the
{@link InetAddress#getLoopbackAddress loopback} address is returned as
the implementation address.

@return  a string representation of this socket.
"
      end

      operation 7523586 "setBound"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7523714 "setCreated"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3255810 // factory (<unidirectional association>)
	relation 3255810 --->
	  a role_name "factory" init_value " null" class_relation private
	    comment "
The factory for all server sockets.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3255810 // factory (<unidirectional association>)
	  b parent class_ref 970754 // SocketImplFactory
      end

      operation 7523842 "setSocketFactory"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fac" type class_ref 970754 // SocketImplFactory
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the server socket implementation factory for the
application. The factory can be specified only once.
<p>
When an application creates a new server socket, the socket
implementation factory's {@code createSocketImpl} method is
called to create the actual socket implementation.
<p>
Passing {@code null} to the method is a no-op unless the factory
was already set.
<p>
If there is a security manager, this method first calls
the security manager's {@code checkSetFactory} method
to ensure the operation is allowed.
This could result in a SecurityException.

@param      fac   the desired factory.
@exception  IOException  if an I/O error occurs when setting the
              socket factory.
@exception  SocketException  if the factory has already been defined.
@exception  SecurityException  if a security manager exists and its
            {@code checkSetFactory} method doesn't allow the operation.
@see        java.net.SocketImplFactory#createSocketImpl()
@see        SecurityManager#checkSetFactory
"
      end

      operation 7523970 "setReceiveBufferSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a default proposed value for the
{@link SocketOptions#SO_RCVBUF SO_RCVBUF} option for sockets
accepted from this {@code ServerSocket}. The value actually set
in the accepted socket must be determined by calling
{@link Socket#getReceiveBufferSize()} after the socket
is returned by {@link #accept()}.
<p>
The value of {@link SocketOptions#SO_RCVBUF SO_RCVBUF} is used both to
set the size of the internal socket receive buffer, and to set the size
of the TCP receive window that is advertized to the remote peer.
<p>
It is possible to change the value subsequently, by calling
{@link Socket#setReceiveBufferSize(int)}. However, if the application
wishes to allow a receive window larger than 64K bytes, as defined by RFC1323
then the proposed value must be set in the ServerSocket <B>before</B>
it is bound to a local address. This implies, that the ServerSocket must be
created with the no-argument constructor, then setReceiveBufferSize() must
be called and lastly the ServerSocket is bound to an address by calling bind().
<p>
Failure to do this will not cause an error, and the buffer size may be set to the
requested value but the TCP receive window in sockets accepted from
this ServerSocket will be no larger than 64K bytes.

@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.

@param size the size to which to set the receive buffer
size. This value must be greater than 0.

@exception IllegalArgumentException if the
value is 0 or is negative.

@since 1.4
@see #getReceiveBufferSize
"
      end

      operation 7524098 "getReceiveBufferSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option
for this {@code ServerSocket}, that is the proposed buffer size that
will be used for Sockets accepted from this {@code ServerSocket}.

<p>Note, the value actually set in the accepted socket is determined by
calling {@link Socket#getReceiveBufferSize()}.
@return the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF}
        option for this {@code Socket}.
@exception SocketException if there is an error
           in the underlying protocol, such as a TCP error.
@see #setReceiveBufferSize(int)
@since 1.4
"
      end

      operation 7524226 "setPerformancePreferences"
	public explicit_return_type "void"
	nparams 3
	  param in name "connectionTime" explicit_type "int"
	  param in name "latency" explicit_type "int"
	  param in name "bandwidth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets performance preferences for this ServerSocket.

<p> Sockets use the TCP/IP protocol by default.  Some implementations
may offer alternative protocols which have different performance
characteristics than TCP/IP.  This method allows the application to
express its own preferences as to how these tradeoffs should be made
when the implementation chooses from the available protocols.

<p> Performance preferences are described by three integers
whose values indicate the relative importance of short connection time,
low latency, and high bandwidth.  The absolute values of the integers
are irrelevant; in order to choose a protocol the values are simply
compared, with larger values indicating stronger preferences.  If the
application prefers short connection time over both low latency and high
bandwidth, for example, then it could invoke this method with the values
{@code (1, 0, 0)}.  If the application prefers high bandwidth above low
latency, and low latency above short connection time, then it could
invoke this method with the values {@code (0, 1, 2)}.

<p> Invoking this method after this socket has been bound
will have no effect. This implies that in order to use this capability
requires the socket to be created with the no-argument constructor.

@param  connectionTime
        An {@code int} expressing the relative importance of a short
        connection time

@param  latency
        An {@code int} expressing the relative importance of low
        latency

@param  bandwidth
        An {@code int} expressing the relative importance of high
        bandwidth

@since 1.5
"
      end
    end

    class 209154 "Socket"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements client sockets (also called just
\"sockets\"). A socket is an endpoint for communication
between two machines.
<p>
The actual work of the socket is performed by an instance of the
{@code SocketImpl} class. An application, by changing
the socket factory that creates the socket implementation,
can configure itself to create sockets appropriate to the local
firewall.

@author  unascribed
@see     java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)
@see     java.net.SocketImpl
@see     java.nio.channels.SocketChannel
@since   JDK1.0
"
      classrelation 3255938 // <realization>
	relation 3255938 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3255938 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      attribute 1778050 "created"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Various states of this socket.

"
      end

      attribute 1778178 "bound"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1778306 "connected"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1778434 "closed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3256066 // closeLock (<unidirectional association>)
	relation 3256066 --->
	  a role_name "closeLock" init_value " new Object()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3256066 // closeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1778562 "shutIn"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1778690 "shutOut"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3256194 // impl (<unidirectional association>)
	relation 3256194 --->
	  a role_name "impl" package
	    comment "
The implementation of this Socket.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3256194 // impl (<unidirectional association>)
	  b parent class_ref 962690 // SocketImpl
      end

      attribute 1778818 "oldImpl"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Are we using an older SocketImpl?

"
      end

      operation 7524354 "Socket"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unconnected socket, with the
system-default type of SocketImpl.

@since   JDK1.1
@revised 1.4
"
      end

      operation 7524482 "Socket"
	public explicit_return_type ""
	nparams 1
	  param inout name "proxy" type class_ref 966018 // Proxy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unconnected socket, specifying the type of proxy, if any,
that should be used regardless of any other settings.
<P>
If there is a security manager, its {@code checkConnect} method
is called with the proxy host address and port number
as its arguments. This could result in a SecurityException.
<P>
Examples:
<UL> <LI>{@code Socket s = new Socket(Proxy.NO_PROXY);} will create
a plain socket ignoring any other proxy configuration.</LI>
<LI>{@code Socket s = new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(\"socks.mydom.com\", 1080)));}
will create a socket connecting through the specified SOCKS proxy
server.</LI>
</UL>

@param proxy a {@link java.net.Proxy Proxy} object specifying what kind
             of proxying should be used.
@throws IllegalArgumentException if the proxy is of an invalid type
         or {@code null}.
@throws SecurityException if a security manager is present and
                          permission to connect to the proxy is
                          denied.
@see java.net.ProxySelector
@see java.net.Proxy

@since   1.5
"
      end

      operation 7524610 "Socket"
	protected explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 962690 // SocketImpl
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unconnected Socket with a user-specified
SocketImpl.
<P>
@param impl an instance of a <B>SocketImpl</B>
the subclass wishes to use on the Socket.

@exception SocketException if there is an error in the underlying protocol,
such as a TCP error.
@since   JDK1.1
"
      end

      operation 7524738 "Socket"
	public explicit_return_type ""
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 2
	  exception class_ref 246786 // UnknownHostException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a stream socket and connects it to the specified port
number on the named host.
<p>
If the specified host is {@code null} it is the equivalent of
specifying the address as
{@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.
In other words, it is equivalent to specifying an address of the
loopback interface. </p>
<p>
If the application has specified a server socket factory, that
factory's {@code createSocketImpl} method is called to create
the actual socket implementation. Otherwise a \"plain\" socket is created.
<p>
If there is a security manager, its
{@code checkConnect} method is called
with the host address and {@code port}
as its arguments. This could result in a SecurityException.

@param      host   the host name, or {@code null} for the loopback address.
@param      port   the port number.

@exception  UnknownHostException if the IP address of
the host could not be determined.

@exception  IOException  if an I/O error occurs when creating the socket.
@exception  SecurityException  if a security manager exists and its
            {@code checkConnect} method doesn't allow the operation.
@exception  IllegalArgumentException if the port parameter is outside
            the specified range of valid port values, which is between
            0 and 65535, inclusive.
@see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)
@see        java.net.SocketImpl
@see        java.net.SocketImplFactory#createSocketImpl()
@see        SecurityManager#checkConnect
"
      end

      operation 7524866 "Socket"
	public explicit_return_type ""
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a stream socket and connects it to the specified port
number at the specified IP address.
<p>
If the application has specified a socket factory, that factory's
{@code createSocketImpl} method is called to create the
actual socket implementation. Otherwise a \"plain\" socket is created.
<p>
If there is a security manager, its
{@code checkConnect} method is called
with the host address and {@code port}
as its arguments. This could result in a SecurityException.

@param      address   the IP address.
@param      port      the port number.
@exception  IOException  if an I/O error occurs when creating the socket.
@exception  SecurityException  if a security manager exists and its
            {@code checkConnect} method doesn't allow the operation.
@exception  IllegalArgumentException if the port parameter is outside
            the specified range of valid port values, which is between
            0 and 65535, inclusive.
@exception  NullPointerException if {@code address} is null.
@see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)
@see        java.net.SocketImpl
@see        java.net.SocketImplFactory#createSocketImpl()
@see        SecurityManager#checkConnect
"
      end

      operation 7524994 "Socket"
	public explicit_return_type ""
	nparams 4
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "localAddr" type class_ref 513154 // InetAddress
	  param in name "localPort" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket and connects it to the specified remote host on
the specified remote port. The Socket will also bind() to the local
address and port supplied.
<p>
If the specified host is {@code null} it is the equivalent of
specifying the address as
{@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.
In other words, it is equivalent to specifying an address of the
loopback interface. </p>
<p>
A local port number of {@code zero} will let the system pick up a
free port in the {@code bind} operation.</p>
<p>
If there is a security manager, its
{@code checkConnect} method is called
with the host address and {@code port}
as its arguments. This could result in a SecurityException.

@param host the name of the remote host, or {@code null} for the loopback address.
@param port the remote port
@param localAddr the local address the socket is bound to, or
       {@code null} for the {@code anyLocal} address.
@param localPort the local port the socket is bound to, or
       {@code zero} for a system selected free port.
@exception  IOException  if an I/O error occurs when creating the socket.
@exception  SecurityException  if a security manager exists and its
            {@code checkConnect} method doesn't allow the connection
            to the destination, or if its {@code checkListen} method
            doesn't allow the bind to the local port.
@exception  IllegalArgumentException if the port parameter or localPort
            parameter is outside the specified range of valid port values,
            which is between 0 and 65535, inclusive.
@see        SecurityManager#checkConnect
@since   JDK1.1
"
      end

      operation 7525122 "Socket"
	public explicit_return_type ""
	nparams 4
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param inout name "localAddr" type class_ref 513154 // InetAddress
	  param in name "localPort" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket and connects it to the specified remote address on
the specified remote port. The Socket will also bind() to the local
address and port supplied.
<p>
If the specified local address is {@code null} it is the equivalent of
specifying the address as the AnyLocal address
(see {@link java.net.InetAddress#isAnyLocalAddress InetAddress.isAnyLocalAddress}{@code ()}).
<p>
A local port number of {@code zero} will let the system pick up a
free port in the {@code bind} operation.</p>
<p>
If there is a security manager, its
{@code checkConnect} method is called
with the host address and {@code port}
as its arguments. This could result in a SecurityException.

@param address the remote address
@param port the remote port
@param localAddr the local address the socket is bound to, or
       {@code null} for the {@code anyLocal} address.
@param localPort the local port the socket is bound to or
       {@code zero} for a system selected free port.
@exception  IOException  if an I/O error occurs when creating the socket.
@exception  SecurityException  if a security manager exists and its
            {@code checkConnect} method doesn't allow the connection
            to the destination, or if its {@code checkListen} method
            doesn't allow the bind to the local port.
@exception  IllegalArgumentException if the port parameter or localPort
            parameter is outside the specified range of valid port values,
            which is between 0 and 65535, inclusive.
@exception  NullPointerException if {@code address} is null.
@see        SecurityManager#checkConnect
@since   JDK1.1
"
      end

      operation 7525250 "Socket"
	public explicit_return_type ""
	nparams 3
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "stream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a stream socket and connects it to the specified port
number on the named host.
<p>
If the specified host is {@code null} it is the equivalent of
specifying the address as
{@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.
In other words, it is equivalent to specifying an address of the
loopback interface. </p>
<p>
If the stream argument is {@code true}, this creates a
stream socket. If the stream argument is {@code false}, it
creates a datagram socket.
<p>
If the application has specified a server socket factory, that
factory's {@code createSocketImpl} method is called to create
the actual socket implementation. Otherwise a \"plain\" socket is created.
<p>
If there is a security manager, its
{@code checkConnect} method is called
with the host address and {@code port}
as its arguments. This could result in a SecurityException.
<p>
If a UDP socket is used, TCP/IP related socket options will not apply.

@param      host     the host name, or {@code null} for the loopback address.
@param      port     the port number.
@param      stream   a {@code boolean} indicating whether this is
                     a stream socket or a datagram socket.
@exception  IOException  if an I/O error occurs when creating the socket.
@exception  SecurityException  if a security manager exists and its
            {@code checkConnect} method doesn't allow the operation.
@exception  IllegalArgumentException if the port parameter is outside
            the specified range of valid port values, which is between
            0 and 65535, inclusive.
@see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)
@see        java.net.SocketImpl
@see        java.net.SocketImplFactory#createSocketImpl()
@see        SecurityManager#checkConnect
@deprecated Use DatagramSocket instead for UDP transport.
"
      end

      operation 7525378 "Socket"
	public explicit_return_type ""
	nparams 3
	  param inout name "host" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param inout name "stream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a socket and connects it to the specified port number at
the specified IP address.
<p>
If the stream argument is {@code true}, this creates a
stream socket. If the stream argument is {@code false}, it
creates a datagram socket.
<p>
If the application has specified a server socket factory, that
factory's {@code createSocketImpl} method is called to create
the actual socket implementation. Otherwise a \"plain\" socket is created.

<p>If there is a security manager, its
{@code checkConnect} method is called
with {@code host.getHostAddress()} and {@code port}
as its arguments. This could result in a SecurityException.
<p>
If UDP socket is used, TCP/IP related socket options will not apply.

@param      host     the IP address.
@param      port      the port number.
@param      stream    if {@code true}, create a stream socket;
                      otherwise, create a datagram socket.
@exception  IOException  if an I/O error occurs when creating the socket.
@exception  SecurityException  if a security manager exists and its
            {@code checkConnect} method doesn't allow the operation.
@exception  IllegalArgumentException if the port parameter is outside
            the specified range of valid port values, which is between
            0 and 65535, inclusive.
@exception  NullPointerException if {@code host} is null.
@see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)
@see        java.net.SocketImpl
@see        java.net.SocketImplFactory#createSocketImpl()
@see        SecurityManager#checkConnect
@deprecated Use DatagramSocket instead for UDP transport.
"
      end

      operation 7525506 "Socket"
	private explicit_return_type ""
	nparams 3
	  param inout name "address" type class_ref 962178 // SocketAddress
	  param inout name "localAddr" type class_ref 962178 // SocketAddress
	  param inout name "stream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7525634 "createImpl"
	package explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the socket implementation.

@param stream a {@code boolean} value : {@code true} for a TCP socket,
              {@code false} for UDP.
@throws IOException if creation fails
@since 1.4
"
      end

      operation 7525762 "checkOldImpl"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7525890 "setImpl"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets impl to the system-default type of SocketImpl.
@since 1.4
"
      end

      operation 7526018 "getImpl"
	package return_type class_ref 962690 // SocketImpl
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the {@code SocketImpl} attached to this socket, creating
it if necessary.

@return  the {@code SocketImpl} attached to that ServerSocket.
@throws SocketException if creation fails
@since 1.4
"
      end

      operation 7526146 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "endpoint" type class_ref 962178 // SocketAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this socket to the server.

@param   endpoint the {@code SocketAddress}
@throws  IOException if an error occurs during the connection
@throws  java.nio.channels.IllegalBlockingModeException
         if this socket has an associated channel,
         and the channel is in non-blocking mode
@throws  IllegalArgumentException if endpoint is null or is a
         SocketAddress subclass not supported by this socket
@since 1.4
@spec JSR-51
"
      end

      operation 7526274 "connect"
	public explicit_return_type "void"
	nparams 2
	  param inout name "endpoint" type class_ref 962178 // SocketAddress
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this socket to the server with a specified timeout value.
A timeout of zero is interpreted as an infinite timeout. The connection
will then block until established or an error occurs.

@param   endpoint the {@code SocketAddress}
@param   timeout  the timeout value to be used in milliseconds.
@throws  IOException if an error occurs during the connection
@throws  SocketTimeoutException if timeout expires before connecting
@throws  java.nio.channels.IllegalBlockingModeException
         if this socket has an associated channel,
         and the channel is in non-blocking mode
@throws  IllegalArgumentException if endpoint is null or is a
         SocketAddress subclass not supported by this socket
@since 1.4
@spec JSR-51
"
      end

      operation 7526402 "bind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bindpoint" type class_ref 962178 // SocketAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds the socket to a local address.
<P>
If the address is {@code null}, then the system will pick up
an ephemeral port and a valid local address to bind the socket.

@param   bindpoint the {@code SocketAddress} to bind to
@throws  IOException if the bind operation fails, or if the socket
                    is already bound.
@throws  IllegalArgumentException if bindpoint is a
         SocketAddress subclass not supported by this socket
@throws  SecurityException  if a security manager exists and its
         {@code checkListen} method doesn't allow the bind
         to the local port.

@since   1.4
@see #isBound
"
      end

      operation 7526530 "checkAddress"
	private explicit_return_type "void"
	nparams 2
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param inout name "op" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7526658 "postAccept"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "set the flags after an accept() call.
"
      end

      operation 7526786 "setCreated"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7526914 "setBound"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7527042 "setConnected"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7527170 "getInetAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address to which the socket is connected.
<p>
If the socket was connected prior to being {@link #close closed},
then this method will continue to return the connected address
after the socket is closed.

@return  the remote IP address to which this socket is connected,
         or {@code null} if the socket is not connected.
"
      end

      operation 7527298 "getLocalAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local address to which the socket is bound.
<p>
If there is a security manager set, its {@code checkConnect} method is
called with the local address and {@code -1} as its arguments to see
if the operation is allowed. If the operation is not allowed,
the {@link InetAddress#getLoopbackAddress loopback} address is returned.

@return the local address to which the socket is bound,
        the loopback address if denied by the security manager, or
        the wildcard address if the socket is closed or not bound yet.
@since   JDK1.1

@see SecurityManager#checkConnect
"
      end

      operation 7527426 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the remote port number to which this socket is connected.
<p>
If the socket was connected prior to being {@link #close closed},
then this method will continue to return the connected port number
after the socket is closed.

@return  the remote port number to which this socket is connected, or
         0 if the socket is not connected yet.
"
      end

      operation 7527554 "getLocalPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the local port number to which this socket is bound.
<p>
If the socket was bound prior to being {@link #close closed},
then this method will continue to return the local port number
after the socket is closed.

@return  the local port number to which this socket is bound or -1
         if the socket is not bound yet.
"
      end

      operation 7527682 "getRemoteSocketAddress"
	public return_type class_ref 962178 // SocketAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address of the endpoint this socket is connected to, or
{@code null} if it is unconnected.
<p>
If the socket was connected prior to being {@link #close closed},
then this method will continue to return the connected address
after the socket is closed.


@return a {@code SocketAddress} representing the remote endpoint of this
        socket, or {@code null} if it is not connected yet.
@see #getInetAddress()
@see #getPort()
@see #connect(SocketAddress, int)
@see #connect(SocketAddress)
@since 1.4
"
      end

      operation 7527810 "getLocalSocketAddress"
	public return_type class_ref 962178 // SocketAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address of the endpoint this socket is bound to.
<p>
If a socket bound to an endpoint represented by an
{@code InetSocketAddress } is {@link #close closed},
then this method will continue to return an {@code InetSocketAddress}
after the socket is closed. In that case the returned
{@code InetSocketAddress}'s address is the
{@link InetAddress#isAnyLocalAddress wildcard} address
and its port is the local port that it was bound to.
<p>
If there is a security manager set, its {@code checkConnect} method is
called with the local address and {@code -1} as its arguments to see
if the operation is allowed. If the operation is not allowed,
a {@code SocketAddress} representing the
{@link InetAddress#getLoopbackAddress loopback} address and the local
port to which this socket is bound is returned.

@return a {@code SocketAddress} representing the local endpoint of
        this socket, or a {@code SocketAddress} representing the
        loopback address if denied by the security manager, or
        {@code null} if the socket is not bound yet.

@see #getLocalAddress()
@see #getLocalPort()
@see #bind(SocketAddress)
@see SecurityManager#checkConnect
@since 1.4
"
      end

      operation 7527938 "getChannel"
	public return_type class_ref 212482 // SocketChannel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.SocketChannel SocketChannel}
object associated with this socket, if any.

<p> A socket will have a channel if, and only if, the channel itself was
created via the {@link java.nio.channels.SocketChannel#open
SocketChannel.open} or {@link
java.nio.channels.ServerSocketChannel#accept ServerSocketChannel.accept}
methods.

@return  the socket channel associated with this socket,
         or {@code null} if this socket was not created
         for a channel

@since 1.4
@spec JSR-51
"
      end

      operation 7528066 "getInputStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an input stream for this socket.

<p> If this socket has an associated channel then the resulting input
stream delegates all of its operations to the channel.  If the channel
is in non-blocking mode then the input stream's {@code read} operations
will throw an {@link java.nio.channels.IllegalBlockingModeException}.

<p>Under abnormal conditions the underlying connection may be
broken by the remote host or the network software (for example
a connection reset in the case of TCP connections). When a
broken connection is detected by the network software the
following applies to the returned input stream :-

<ul>

  <li><p>The network software may discard bytes that are buffered
  by the socket. Bytes that aren't discarded by the network
  software can be read using {@link java.io.InputStream#read read}.

  <li><p>If there are no bytes buffered on the socket, or all
  buffered bytes have been consumed by
  {@link java.io.InputStream#read read}, then all subsequent
  calls to {@link java.io.InputStream#read read} will throw an
  {@link java.io.IOException IOException}.

  <li><p>If there are no bytes buffered on the socket, and the
  socket has not been closed using {@link #close close}, then
  {@link java.io.InputStream#available available} will
  return {@code 0}.

</ul>

<p> Closing the returned {@link java.io.InputStream InputStream}
will close the associated socket.

@return     an input stream for reading bytes from this socket.
@exception  IOException  if an I/O error occurs when creating the
            input stream, the socket is closed, the socket is
            not connected, or the socket input has been shutdown
            using {@link #shutdownInput()}

@revised 1.4
@spec JSR-51
"
      end

      operation 7528194 "getOutputStream"
	public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an output stream for this socket.

<p> If this socket has an associated channel then the resulting output
stream delegates all of its operations to the channel.  If the channel
is in non-blocking mode then the output stream's {@code write}
operations will throw an {@link
java.nio.channels.IllegalBlockingModeException}.

<p> Closing the returned {@link java.io.OutputStream OutputStream}
will close the associated socket.

@return     an output stream for writing bytes to this socket.
@exception  IOException  if an I/O error occurs when creating the
              output stream or if the socket is not connected.
@revised 1.4
@spec JSR-51
"
      end

      operation 7528322 "setTcpNoDelay"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable {@link SocketOptions#TCP_NODELAY TCP_NODELAY}
(disable/enable Nagle's algorithm).

@param on {@code true} to enable TCP_NODELAY,
{@code false} to disable.

@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.

@since   JDK1.1

@see #getTcpNoDelay()
"
      end

      operation 7528450 "getTcpNoDelay"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if {@link SocketOptions#TCP_NODELAY TCP_NODELAY} is enabled.

@return a {@code boolean} indicating whether or not
        {@link SocketOptions#TCP_NODELAY TCP_NODELAY} is enabled.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since   JDK1.1
@see #setTcpNoDelay(boolean)
"
      end

      operation 7528578 "setSoLinger"
	public explicit_return_type "void"
	nparams 2
	  param inout name "on" explicit_type "boolean"
	  param in name "linger" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable {@link SocketOptions#SO_LINGER SO_LINGER} with the
specified linger time in seconds. The maximum timeout value is platform
specific.

The setting only affects socket close.

@param on     whether or not to linger on.
@param linger how long to linger for, if on is true.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@exception IllegalArgumentException if the linger value is negative.
@since JDK1.1
@see #getSoLinger()
"
      end

      operation 7528706 "getSoLinger"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns setting for {@link SocketOptions#SO_LINGER SO_LINGER}.
-1 returns implies that the
option is disabled.

The setting only affects socket close.

@return the setting for {@link SocketOptions#SO_LINGER SO_LINGER}.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since   JDK1.1
@see #setSoLinger(boolean, int)
"
      end

      operation 7528834 "sendUrgentData"
	public explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Send one byte of urgent data on the socket. The byte to be sent is the lowest eight
bits of the data parameter. The urgent byte is
sent after any preceding writes to the socket OutputStream
and before any future writes to the OutputStream.
@param data The byte of data to send
@exception IOException if there is an error
 sending the data.
@since 1.4
"
      end

      operation 7528962 "setOOBInline"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE}
(receipt of TCP urgent data)

By default, this option is disabled and TCP urgent data received on a
socket is silently discarded. If the user wishes to receive urgent data, then
this option must be enabled. When enabled, urgent data is received
inline with normal data.
<p>
Note, only limited support is provided for handling incoming urgent
data. In particular, no notification of incoming urgent data is provided
and there is no capability to distinguish between normal data and urgent
data unless provided by a higher level protocol.

@param on {@code true} to enable
          {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE},
          {@code false} to disable.

@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.

@since   1.4

@see #getOOBInline()
"
      end

      operation 7529090 "getOOBInline"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE} is enabled.

@return a {@code boolean} indicating whether or not
        {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE}is enabled.

@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since   1.4
@see #setOOBInline(boolean)
"
      end

      operation 7529218 "setSoTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}
 with the specified timeout, in milliseconds. With this option set
 to a non-zero timeout, a read() call on the InputStream associated with
 this Socket will block for only this amount of time.  If the timeout
 expires, a <B>java.net.SocketTimeoutException</B> is raised, though the
 Socket is still valid. The option <B>must</B> be enabled
 prior to entering the blocking operation to have effect. The
 timeout must be {@code > 0}.
 A timeout of zero is interpreted as an infinite timeout.

@param timeout the specified timeout, in milliseconds.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since   JDK 1.1
@see #getSoTimeout()
"
      end

      operation 7529346 "getSoTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}.
0 returns implies that the option is disabled (i.e., timeout of infinity).

@return the setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.

@since   JDK1.1
@see #setSoTimeout(int)
"
      end

      operation 7529474 "setSendBufferSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option to the
specified value for this {@code Socket}.
The {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option is used by the
platform's networking code as a hint for the size to set the underlying
network I/O buffers.

<p>Because {@link SocketOptions#SO_SNDBUF SO_SNDBUF} is a hint,
applications that want to verify what size the buffers were set to
should call {@link #getSendBufferSize()}.

@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.

@param size the size to which to set the send buffer
size. This value must be greater than 0.

@exception IllegalArgumentException if the
value is 0 or is negative.

@see #getSendBufferSize()
@since 1.2
"
      end

      operation 7529602 "getSendBufferSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get value of the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option
for this {@code Socket}, that is the buffer size used by the platform
for output on this {@code Socket}.
@return the value of the {@link SocketOptions#SO_SNDBUF SO_SNDBUF}
        option for this {@code Socket}.

@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.

@see #setSendBufferSize(int)
@since 1.2
"
      end

      operation 7529730 "setReceiveBufferSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option to the
specified value for this {@code Socket}. The
{@link SocketOptions#SO_RCVBUF SO_RCVBUF} option is
used by the platform's networking code as a hint for the size to set
the underlying network I/O buffers.

<p>Increasing the receive buffer size can increase the performance of
network I/O for high-volume connection, while decreasing it can
help reduce the backlog of incoming data.

<p>Because {@link SocketOptions#SO_RCVBUF SO_RCVBUF} is a hint,
applications that want to verify what size the buffers were set to
should call {@link #getReceiveBufferSize()}.

<p>The value of {@link SocketOptions#SO_RCVBUF SO_RCVBUF} is also used
to set the TCP receive window that is advertized to the remote peer.
Generally, the window size can be modified at any time when a socket is
connected. However, if a receive window larger than 64K is required then
this must be requested <B>before</B> the socket is connected to the
remote peer. There are two cases to be aware of:
<ol>
<li>For sockets accepted from a ServerSocket, this must be done by calling
{@link ServerSocket#setReceiveBufferSize(int)} before the ServerSocket
is bound to a local address.<p></li>
<li>For client sockets, setReceiveBufferSize() must be called before
connecting the socket to its remote peer.</li></ol>
@param size the size to which to set the receive buffer
size. This value must be greater than 0.

@exception IllegalArgumentException if the value is 0 or is
negative.

@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.

@see #getReceiveBufferSize()
@see ServerSocket#setReceiveBufferSize(int)
@since 1.2
"
      end

      operation 7529858 "getReceiveBufferSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option
for this {@code Socket}, that is the buffer size used by the platform
for input on this {@code Socket}.

@return the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF}
        option for this {@code Socket}.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@see #setReceiveBufferSize(int)
@since 1.2
"
      end

      operation 7529986 "setKeepAlive"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE}.

@param on  whether or not to have socket keep alive turned on.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since 1.3
@see #getKeepAlive()
"
      end

      operation 7530114 "getKeepAlive"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE} is enabled.

@return a {@code boolean} indicating whether or not
        {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE} is enabled.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since   1.3
@see #setKeepAlive(boolean)
"
      end

      operation 7530242 "setTrafficClass"
	public explicit_return_type "void"
	nparams 1
	  param in name "tc" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets traffic class or type-of-service octet in the IP
header for packets sent from this Socket.
As the underlying network implementation may ignore this
value applications should consider it a hint.

<P> The tc <B>must</B> be in the range {@code 0 <= tc <=
255} or an IllegalArgumentException will be thrown.
<p>Notes:
<p>For Internet Protocol v4 the value consists of an
{@code integer}, the least significant 8 bits of which
represent the value of the TOS octet in IP packets sent by
the socket.
RFC 1349 defines the TOS values as follows:

<UL>
<LI><CODE>IPTOS_LOWCOST (0x02)</CODE></LI>
<LI><CODE>IPTOS_RELIABILITY (0x04)</CODE></LI>
<LI><CODE>IPTOS_THROUGHPUT (0x08)</CODE></LI>
<LI><CODE>IPTOS_LOWDELAY (0x10)</CODE></LI>
</UL>
The last low order bit is always ignored as this
corresponds to the MBZ (must be zero) bit.
<p>
Setting bits in the precedence field may result in a
SocketException indicating that the operation is not
permitted.
<p>
As RFC 1122 section 4.2.4.2 indicates, a compliant TCP
implementation should, but is not required to, let application
change the TOS field during the lifetime of a connection.
So whether the type-of-service field can be changed after the
TCP connection has been established depends on the implementation
in the underlying platform. Applications should not assume that
they can change the TOS field after the connection.
<p>
For Internet Protocol v6 {@code tc} is the value that
would be placed into the sin6_flowinfo field of the IP header.

@param tc        an {@code int} value for the bitset.
@throws SocketException if there is an error setting the
traffic class or type-of-service
@since 1.4
@see #getTrafficClass
@see SocketOptions#IP_TOS
"
      end

      operation 7530370 "getTrafficClass"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets traffic class or type-of-service in the IP header
for packets sent from this Socket
<p>
As the underlying network implementation may ignore the
traffic class or type-of-service set using {@link #setTrafficClass(int)}
this method may return a different value than was previously
set using the {@link #setTrafficClass(int)} method on this Socket.

@return the traffic class or type-of-service already set
@throws SocketException if there is an error obtaining the
traffic class or type-of-service value.
@since 1.4
@see #setTrafficClass(int)
@see SocketOptions#IP_TOS
"
      end

      operation 7530498 "setReuseAddress"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}
socket option.
<p>
When a TCP connection is closed the connection may remain
in a timeout state for a period of time after the connection
is closed (typically known as the {@code TIME_WAIT} state
or {@code 2MSL} wait state).
For applications using a well known socket address or port
it may not be possible to bind a socket to the required
{@code SocketAddress} if there is a connection in the
timeout state involving the socket address or port.
<p>
Enabling {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}
prior to binding the socket using {@link #bind(SocketAddress)} allows
the socket to be bound even though a previous connection is in a timeout
state.
<p>
When a {@code Socket} is created the initial setting
of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is disabled.
<p>
The behaviour when {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is
enabled or disabled after a socket is bound (See {@link #isBound()})
is not defined.

@param on  whether to enable or disable the socket option
@exception SocketException if an error occurs enabling or
           disabling the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}
           socket option, or the socket is closed.
@since 1.4
@see #getReuseAddress()
@see #bind(SocketAddress)
@see #isClosed()
@see #isBound()
"
      end

      operation 7530626 "getReuseAddress"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.

@return a {@code boolean} indicating whether or not
        {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.
@exception SocketException if there is an error
in the underlying protocol, such as a TCP error.
@since   1.4
@see #setReuseAddress(boolean)
"
      end

      operation 7530754 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this socket.
<p>
Any thread currently blocked in an I/O operation upon this socket
will throw a {@link SocketException}.
<p>
Once a socket has been closed, it is not available for further networking
use (i.e. can't be reconnected or rebound). A new socket needs to be
created.

<p> Closing this socket will also close the socket's
{@link java.io.InputStream InputStream} and
{@link java.io.OutputStream OutputStream}.

<p> If this socket has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs when closing this socket.
@revised 1.4
@spec JSR-51
@see #isClosed
"
      end

      operation 7530882 "shutdownInput"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Places the input stream for this socket at \"end of stream\".
Any data sent to the input stream side of the socket is acknowledged
and then silently discarded.
<p>
If you read from a socket input stream after invoking this method on the
socket, the stream's {@code available} method will return 0, and its
{@code read} methods will return {@code -1} (end of stream).

@exception IOException if an I/O error occurs when shutting down this
socket.

@since 1.3
@see java.net.Socket#shutdownOutput()
@see java.net.Socket#close()
@see java.net.Socket#setSoLinger(boolean, int)
@see #isInputShutdown
"
      end

      operation 7531010 "shutdownOutput"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables the output stream for this socket.
For a TCP socket, any previously written data will be sent
followed by TCP's normal connection termination sequence.

If you write to a socket output stream after invoking
shutdownOutput() on the socket, the stream will throw
an IOException.

@exception IOException if an I/O error occurs when shutting down this
socket.

@since 1.3
@see java.net.Socket#shutdownInput()
@see java.net.Socket#close()
@see java.net.Socket#setSoLinger(boolean, int)
@see #isOutputShutdown
"
      end

      operation 7531138 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this socket to a {@code String}.

@return  a string representation of this socket.
"
      end

      operation 7531266 "isConnected"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the connection state of the socket.
<p>
Note: Closing a socket doesn't clear its connection state, which means
this method will return {@code true} for a closed socket
(see {@link #isClosed()}) if it was successfuly connected prior
to being closed.

@return true if the socket was successfuly connected to a server
@since 1.4
"
      end

      operation 7531394 "isBound"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the binding state of the socket.
<p>
Note: Closing a socket doesn't clear its binding state, which means
this method will return {@code true} for a closed socket
(see {@link #isClosed()}) if it was successfuly bound prior
to being closed.

@return true if the socket was successfuly bound to an address
@since 1.4
@see #bind
"
      end

      operation 7531522 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the closed state of the socket.

@return true if the socket has been closed
@since 1.4
@see #close
"
      end

      operation 7531650 "isInputShutdown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the read-half of the socket connection is closed.

@return true if the input of the socket has been shutdown
@since 1.4
@see #shutdownInput
"
      end

      operation 7531778 "isOutputShutdown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the write-half of the socket connection is closed.

@return true if the output of the socket has been shutdown
@since 1.4
@see #shutdownOutput
"
      end

      classrelation 3256322 // factory (<unidirectional association>)
	relation 3256322 --->
	  a role_name "factory" init_value " null" class_relation private
	    comment "
The factory for all client sockets.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3256322 // factory (<unidirectional association>)
	  b parent class_ref 970754 // SocketImplFactory
      end

      operation 7531906 "setSocketImplFactory"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fac" type class_ref 970754 // SocketImplFactory
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the client socket implementation factory for the
application. The factory can be specified only once.
<p>
When an application creates a new client socket, the socket
implementation factory's {@code createSocketImpl} method is
called to create the actual socket implementation.
<p>
Passing {@code null} to the method is a no-op unless the factory
was already set.
<p>If there is a security manager, this method first calls
the security manager's {@code checkSetFactory} method
to ensure the operation is allowed.
This could result in a SecurityException.

@param      fac   the desired factory.
@exception  IOException  if an I/O error occurs when setting the
              socket factory.
@exception  SocketException  if the factory is already defined.
@exception  SecurityException  if a security manager exists and its
            {@code checkSetFactory} method doesn't allow the operation.
@see        java.net.SocketImplFactory#createSocketImpl()
@see        SecurityManager#checkSetFactory
"
      end

      operation 7532034 "setPerformancePreferences"
	public explicit_return_type "void"
	nparams 3
	  param in name "connectionTime" explicit_type "int"
	  param in name "latency" explicit_type "int"
	  param in name "bandwidth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets performance preferences for this socket.

<p> Sockets use the TCP/IP protocol by default.  Some implementations
may offer alternative protocols which have different performance
characteristics than TCP/IP.  This method allows the application to
express its own preferences as to how these tradeoffs should be made
when the implementation chooses from the available protocols.

<p> Performance preferences are described by three integers
whose values indicate the relative importance of short connection time,
low latency, and high bandwidth.  The absolute values of the integers
are irrelevant; in order to choose a protocol the values are simply
compared, with larger values indicating stronger preferences. Negative
values represent a lower priority than positive values. If the
application prefers short connection time over both low latency and high
bandwidth, for example, then it could invoke this method with the values
{@code (1, 0, 0)}.  If the application prefers high bandwidth above low
latency, and low latency above short connection time, then it could
invoke this method with the values {@code (0, 1, 2)}.

<p> Invoking this method after this socket has been connected
will have no effect.

@param  connectionTime
        An {@code int} expressing the relative importance of a short
        connection time

@param  latency
        An {@code int} expressing the relative importance of low
        latency

@param  bandwidth
        An {@code int} expressing the relative importance of high
        bandwidth

@since 1.5
"
      end
    end

    class 243458 "URL"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class {@code URL} represents a Uniform Resource
Locator, a pointer to a \"resource\" on the World
Wide Web. A resource can be something as simple as a file or a
directory, or it can be a reference to a more complicated object,
such as a query to a database or to a search engine. More
information on the types of URLs and their formats can be found at:
<a href=
\"http://web.archive.org/web/20051219043731/http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/Demo/url-primer.html\">
<i>Types of URL</i></a>
<p>
In general, a URL can be broken into several parts. Consider the
following example:
<blockquote><pre>
    http://www.example.com/docs/resource1.html
</pre></blockquote>
<p>
The URL above indicates that the protocol to use is
{@code http} (HyperText Transfer Protocol) and that the
information resides on a host machine named
{@code www.example.com}. The information on that host
machine is named {@code /docs/resource1.html}. The exact
meaning of this name on the host machine is both protocol
dependent and host dependent. The information normally resides in
a file, but it could be generated on the fly. This component of
the URL is called the <i>path</i> component.
<p>
A URL can optionally specify a \"port\", which is the
port number to which the TCP connection is made on the remote host
machine. If the port is not specified, the default port for
the protocol is used instead. For example, the default port for
{@code http} is {@code 80}. An alternative port could be
specified as:
<blockquote><pre>
    http://www.example.com:1080/docs/resource1.html
</pre></blockquote>
<p>
The syntax of {@code URL} is defined by  <a
href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform
Resource Identifiers (URI): Generic Syntax</i></a>, amended by <a
href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for
Literal IPv6 Addresses in URLs</i></a>. The Literal IPv6 address format
also supports scope_ids. The syntax and usage of scope_ids is described
<a href=\"Inet6Address.html#scoped\">here</a>.
<p>
A URL may have appended to it a \"fragment\", also known
as a \"ref\" or a \"reference\". The fragment is indicated by the sharp
sign character \"#\" followed by more characters. For example,
<blockquote><pre>
    http://java.sun.com/index.html#chapter1
</pre></blockquote>
<p>
This fragment is not technically part of the URL. Rather, it
indicates that after the specified resource is retrieved, the
application is specifically interested in that part of the
document that has the tag {@code chapter1} attached to it. The
meaning of a tag is resource specific.
<p>
An application can also specify a \"relative URL\",
which contains only enough information to reach the resource
relative to another URL. Relative URLs are frequently used within
HTML pages. For example, if the contents of the URL:
<blockquote><pre>
    http://java.sun.com/index.html
</pre></blockquote>
contained within it the relative URL:
<blockquote><pre>
    FAQ.html
</pre></blockquote>
it would be a shorthand for:
<blockquote><pre>
    http://java.sun.com/FAQ.html
</pre></blockquote>
<p>
The relative URL need not specify all the components of a URL. If
the protocol, host name, or port number is missing, the value is
inherited from the fully specified URL. The file component must be
specified. The optional fragment is not inherited.
<p>
The URL class does not itself encode or decode any URL components
according to the escaping mechanism defined in RFC2396. It is the
responsibility of the caller to encode any fields, which need to be
escaped prior to calling URL, and also to decode any escaped fields,
that are returned from URL. Furthermore, because URL has no knowledge
of URL escaping, it does not recognise equivalence between the encoded
or decoded form of the same URL. For example, the two URLs:<br>
<pre>    http://foo.com/hello world/ and http://foo.com/hello%20world</pre>
would be considered not equal to each other.
<p>
Note, the {@link java.net.URI} class does perform escaping of its
component fields in certain circumstances. The recommended way
to manage the encoding and decoding of URLs is to use {@link java.net.URI},
and to convert between these two classes using {@link #toURI()} and
{@link URI#toURL()}.
<p>
The {@link URLEncoder} and {@link URLDecoder} classes can also be
used, but only for HTML form encoding, which is not the same
as the encoding scheme defined in RFC2396.

@author  James Gosling
@since JDK1.0
"
      classrelation 3264514 // <realization>
	relation 3264514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3264514 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3264642 // BUILTIN_HANDLERS_PREFIX (<unidirectional association>)
	relation 3264642 --->
	  a role_name "BUILTIN_HANDLERS_PREFIX" init_value " \"sun.net.www.protocol\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3264642 // BUILTIN_HANDLERS_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1793282 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -7627629688361524110L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3264770 // protocolPathProp (<unidirectional association>)
	relation 3264770 --->
	  a role_name "protocolPathProp" init_value " \"java.protocol.handler.pkgs\"" class_relation const_relation private
	    comment "
The property which specifies the package prefix list to be scanned
for protocol handlers.  The value of this property (if any) should
be a vertical bar delimited list of package names to search through
for a protocol handler to load.  The policy of this class is that
all protocol handlers will be in a class called <protocolname>.Handler,
and each package in the list is examined in turn for a matching
handler.  If none are found (or the property is not specified), the
default package prefix, sun.net.www.protocol, is used.  The search
proceeds from the first package in the list to the last and stops
when a match is found.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3264770 // protocolPathProp (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3264898 // protocol (<unidirectional association>)
	relation 3264898 --->
	  a role_name "protocol" private
	    comment "
The protocol to use (ftp, http, nntp, ... etc.) .
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3264898 // protocol (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3265026 // host (<unidirectional association>)
	relation 3265026 --->
	  a role_name "host" private
	    comment "
The host name to connect to.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265026 // host (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1793410 "port"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The protocol port to connect to.
@serial

"
      end

      classrelation 3265154 // file (<unidirectional association>)
	relation 3265154 --->
	  a role_name "file" private
	    comment "
The specified file name on that host. {@code file} is
defined as {@code path[?query]}
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265154 // file (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3265282 // query (<unidirectional association>)
	relation 3265282 --->
	  a role_name "query" private
	    comment "
The query part of this URL.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265282 // query (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3265410 // authority (<unidirectional association>)
	relation 3265410 --->
	  a role_name "authority" private
	    comment "
The authority part of this URL.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265410 // authority (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3265538 // path (<unidirectional association>)
	relation 3265538 --->
	  a role_name "path" private
	    comment "
The path part of this URL.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265538 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3265666 // userInfo (<unidirectional association>)
	relation 3265666 --->
	  a role_name "userInfo" private
	    comment "
The userinfo part of this URL.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265666 // userInfo (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3265794 // ref (<unidirectional association>)
	relation 3265794 --->
	  a role_name "ref" private
	    comment "
# reference.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265794 // ref (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3265922 // hostAddress (<unidirectional association>)
	relation 3265922 --->
	  a role_name "hostAddress" package
	    comment "
The host's IP address, used in equals and hashCode.
Computed on demand. An uninitialized or unknown hostAddress is null.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3265922 // hostAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      classrelation 3266050 // handler (<unidirectional association>)
	relation 3266050 --->
	  a role_name "handler" package
	    comment "
The URLStreamHandler for this URL.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3266050 // handler (<unidirectional association>)
	  b parent class_ref 972290 // URLStreamHandler
      end

      attribute 1793538 "hashCode"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Our hash code.
@serial

"
      end

      classrelation 3266178 // tempState (<unidirectional association>)
	relation 3266178 --->
	  a role_name "tempState" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3266178 // tempState (<unidirectional association>)
	  b parent class_ref 972418 // UrlDeserializedState
      end

      operation 7558530 "URL"
	public explicit_return_type ""
	nparams 4
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "file" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code URL} object from the specified
{@code protocol}, {@code host}, {@code port}
number, and {@code file}.<p>

{@code host} can be expressed as a host name or a literal
IP address. If IPv6 literal address is used, it should be
enclosed in square brackets ({@code '['} and {@code ']'}), as
specified by <a
href=\"http://www.ietf.org/rfc/rfc2732.txt\">RFC&nbsp;2732</a>;
However, the literal IPv6 address format defined in <a
href=\"http://www.ietf.org/rfc/rfc2373.txt\"><i>RFC&nbsp;2373: IP
Version 6 Addressing Architecture</i></a> is also accepted.<p>

Specifying a {@code port} number of {@code -1}
indicates that the URL should use the default port for the
protocol.<p>

If this is the first URL object being created with the specified
protocol, a <i>stream protocol handler</i> object, an instance of
class {@code URLStreamHandler}, is created for that protocol:
<ol>
<li>If the application has previously set up an instance of
    {@code URLStreamHandlerFactory} as the stream handler factory,
    then the {@code createURLStreamHandler} method of that instance
    is called with the protocol string as an argument to create the
    stream protocol handler.
<li>If no {@code URLStreamHandlerFactory} has yet been set up,
    or if the factory's {@code createURLStreamHandler} method
    returns {@code null}, then the constructor finds the
    value of the system property:
    <blockquote><pre>
        java.protocol.handler.pkgs
    </pre></blockquote>
    If the value of that system property is not {@code null},
    it is interpreted as a list of packages separated by a vertical
    slash character '{@code |}'. The constructor tries to load
    the class named:
    <blockquote><pre>
        &lt;<i>package</i>&gt;.&lt;<i>protocol</i>&gt;.Handler
    </pre></blockquote>
    where &lt;<i>package</i>&gt; is replaced by the name of the package
    and &lt;<i>protocol</i>&gt; is replaced by the name of the protocol.
    If this class does not exist, or if the class exists but it is not
    a subclass of {@code URLStreamHandler}, then the next package
    in the list is tried.
<li>If the previous step fails to find a protocol handler, then the
    constructor tries to load from a system default package.
    <blockquote><pre>
        &lt;<i>system default package</i>&gt;.&lt;<i>protocol</i>&gt;.Handler
    </pre></blockquote>
    If this class does not exist, or if the class exists but it is not a
    subclass of {@code URLStreamHandler}, then a
    {@code MalformedURLException} is thrown.
</ol>

<p>Protocol handlers for the following protocols are guaranteed
to exist on the search path :-
<blockquote><pre>
    http, https, file, and jar
</pre></blockquote>
Protocol handlers for additional protocols may also be
available.

<p>No validation of the inputs is performed by this constructor.

@param      protocol   the name of the protocol to use.
@param      host       the name of the host.
@param      port       the port number on the host.
@param      file       the file on the host
@exception  MalformedURLException  if an unknown protocol is specified.
@see        java.lang.System#getProperty(java.lang.String)
@see        java.net.URL#setURLStreamHandlerFactory(
                 java.net.URLStreamHandlerFactory)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandlerFactory#createURLStreamHandler(
                 java.lang.String)
"
      end

      operation 7558658 "URL"
	public explicit_return_type ""
	nparams 3
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param inout name "file" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a URL from the specified {@code protocol}
name, {@code host} name, and {@code file} name. The
default port for the specified protocol is used.
<p>
This method is equivalent to calling the four-argument
constructor with the arguments being {@code protocol},
{@code host}, {@code -1}, and {@code file}.

No validation of the inputs is performed by this constructor.

@param      protocol   the name of the protocol to use.
@param      host       the name of the host.
@param      file       the file on the host.
@exception  MalformedURLException  if an unknown protocol is specified.
@see        java.net.URL#URL(java.lang.String, java.lang.String,
                 int, java.lang.String)
"
      end

      operation 7558786 "URL"
	public explicit_return_type ""
	nparams 5
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "file" type class_ref 128130 // String
	  param inout name "handler" type class_ref 972290 // URLStreamHandler
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code URL} object from the specified
{@code protocol}, {@code host}, {@code port}
number, {@code file}, and {@code handler}. Specifying
a {@code port} number of {@code -1} indicates that
the URL should use the default port for the protocol. Specifying
a {@code handler} of {@code null} indicates that the URL
should use a default stream handler for the protocol, as outlined
for:
    java.net.URL#URL(java.lang.String, java.lang.String, int,
                     java.lang.String)

<p>If the handler is not null and there is a security manager,
the security manager's {@code checkPermission}
method is called with a
{@code NetPermission(\"specifyStreamHandler\")} permission.
This may result in a SecurityException.

No validation of the inputs is performed by this constructor.

@param      protocol   the name of the protocol to use.
@param      host       the name of the host.
@param      port       the port number on the host.
@param      file       the file on the host
@param      handler    the stream handler for the URL.
@exception  MalformedURLException  if an unknown protocol is specified.
@exception  SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       specifying a stream handler explicitly.
@see        java.lang.System#getProperty(java.lang.String)
@see        java.net.URL#setURLStreamHandlerFactory(
                 java.net.URLStreamHandlerFactory)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandlerFactory#createURLStreamHandler(
                 java.lang.String)
@see        SecurityManager#checkPermission
@see        java.net.NetPermission
"
      end

      operation 7558914 "URL"
	public explicit_return_type ""
	nparams 1
	  param inout name "spec" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code URL} object from the {@code String}
representation.
<p>
This constructor is equivalent to a call to the two-argument
constructor with a {@code null} first argument.

@param      spec   the {@code String} to parse as a URL.
@exception  MalformedURLException  if no protocol is specified, or an
              unknown protocol is found, or {@code spec} is {@code null}.
@see        java.net.URL#URL(java.net.URL, java.lang.String)
"
      end

      operation 7559042 "URL"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 243458 // URL
	  param inout name "spec" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a URL by parsing the given spec within a specified context.

The new URL is created from the given context URL and the spec
argument as described in
RFC2396 &quot;Uniform Resource Identifiers : Generic * Syntax&quot; :
<blockquote><pre>
         &lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;
</pre></blockquote>
The reference is parsed into the scheme, authority, path, query and
fragment parts. If the path component is empty and the scheme,
authority, and query components are undefined, then the new URL is a
reference to the current document. Otherwise, the fragment and query
parts present in the spec are used in the new URL.
<p>
If the scheme component is defined in the given spec and does not match
the scheme of the context, then the new URL is created as an absolute
URL based on the spec alone. Otherwise the scheme component is inherited
from the context URL.
<p>
If the authority component is present in the spec then the spec is
treated as absolute and the spec authority and path will replace the
context authority and path. If the authority component is absent in the
spec then the authority of the new URL will be inherited from the
context.
<p>
If the spec's path component begins with a slash character
&quot;/&quot; then the
path is treated as absolute and the spec path replaces the context path.
<p>
Otherwise, the path is treated as a relative path and is appended to the
context path, as described in RFC2396. Also, in this case,
the path is canonicalized through the removal of directory
changes made by occurrences of &quot;..&quot; and &quot;.&quot;.
<p>
For a more detailed description of URL parsing, refer to RFC2396.

@param      context   the context in which to parse the specification.
@param      spec      the {@code String} to parse as a URL.
@exception  MalformedURLException  if no protocol is specified, or an
              unknown protocol is found, or {@code spec} is {@code null}.
@see        java.net.URL#URL(java.lang.String, java.lang.String,
                 int, java.lang.String)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandler#parseURL(java.net.URL,
                 java.lang.String, int, int)
"
      end

      operation 7559170 "URL"
	public explicit_return_type ""
	nparams 3
	  param inout name "context" type class_ref 243458 // URL
	  param inout name "spec" type class_ref 128130 // String
	  param inout name "handler" type class_ref 972290 // URLStreamHandler
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a URL by parsing the given spec with the specified handler
within a specified context. If the handler is null, the parsing
occurs as with the two argument constructor.

@param      context   the context in which to parse the specification.
@param      spec      the {@code String} to parse as a URL.
@param      handler   the stream handler for the URL.
@exception  MalformedURLException  if no protocol is specified, or an
              unknown protocol is found, or {@code spec} is {@code null}.
@exception  SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       specifying a stream handler.
@see        java.net.URL#URL(java.lang.String, java.lang.String,
                 int, java.lang.String)
@see        java.net.URLStreamHandler
@see        java.net.URLStreamHandler#parseURL(java.net.URL,
                 java.lang.String, int, int)
"
      end

      operation 7559298 "isValidProtocol"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if specified string is a valid protocol name.
"
      end

      operation 7559426 "checkSpecifyHandler"
	private explicit_return_type "void"
	nparams 1
	  param inout name "sm" type class_ref 938242 // SecurityManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks for permission to specify a stream handler.
"
      end

      operation 7559554 "set"
	package explicit_return_type "void"
	nparams 5
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "file" type class_ref 128130 // String
	  param inout name "ref" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the fields of the URL. This is not a public method so that
only URLStreamHandlers can modify URL fields. URLs are
otherwise constant.

@param protocol the name of the protocol to use
@param host the name of the host
@param port the port number on the host
@param file the file on the host
@param ref the internal reference in the URL
"
      end

      operation 7559682 "set"
	package explicit_return_type "void"
	nparams 8
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "authority" type class_ref 128130 // String
	  param inout name "userInfo" type class_ref 128130 // String
	  param inout name "path" type class_ref 128130 // String
	  param inout name "query" type class_ref 128130 // String
	  param inout name "ref" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified 8 fields of the URL. This is not a public method so
that only URLStreamHandlers can modify URL fields. URLs are otherwise
constant.

@param protocol the name of the protocol to use
@param host the name of the host
@param port the port number on the host
@param authority the authority part for the url
@param userInfo the username and password
@param path the file on the host
@param ref the internal reference in the URL
@param query the query part of this URL
@since 1.3
"
      end

      operation 7559810 "getQuery"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the query part of this {@code URL}.

@return  the query part of this {@code URL},
or <CODE>null</CODE> if one does not exist
@since 1.3
"
      end

      operation 7559938 "getPath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the path part of this {@code URL}.

@return  the path part of this {@code URL}, or an
empty string if one does not exist
@since 1.3
"
      end

      operation 7560066 "getUserInfo"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the userInfo part of this {@code URL}.

@return  the userInfo part of this {@code URL}, or
<CODE>null</CODE> if one does not exist
@since 1.3
"
      end

      operation 7560194 "getAuthority"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the authority part of this {@code URL}.

@return  the authority part of this {@code URL}
@since 1.3
"
      end

      operation 7560322 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the port number of this {@code URL}.

@return  the port number, or -1 if the port is not set
"
      end

      operation 7560450 "getDefaultPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default port number of the protocol associated
with this {@code URL}. If the URL scheme or the URLStreamHandler
for the URL do not define a default port number,
then -1 is returned.

@return  the port number
@since 1.4
"
      end

      operation 7560578 "getProtocol"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the protocol name of this {@code URL}.

@return  the protocol of this {@code URL}.
"
      end

      operation 7560706 "getHost"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the host name of this {@code URL}, if applicable.
The format of the host conforms to RFC 2732, i.e. for a
literal IPv6 address, this method will return the IPv6 address
enclosed in square brackets ({@code '['} and {@code ']'}).

@return  the host name of this {@code URL}.
"
      end

      operation 7560834 "getFile"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the file name of this {@code URL}.
The returned file portion will be
the same as <CODE>getPath()</CODE>, plus the concatenation of
the value of <CODE>getQuery()</CODE>, if any. If there is
no query portion, this method and <CODE>getPath()</CODE> will
return identical results.

@return  the file name of this {@code URL},
or an empty string if one does not exist
"
      end

      operation 7560962 "getRef"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the anchor (also known as the \"reference\") of this
{@code URL}.

@return  the anchor (also known as the \"reference\") of this
         {@code URL}, or <CODE>null</CODE> if one does not exist
"
      end

      operation 7561090 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this URL for equality with another object.<p>

If the given object is not a URL then this method immediately returns
{@code false}.<p>

Two URL objects are equal if they have the same protocol, reference
equivalent hosts, have the same port number on the host, and the same
file and fragment of the file.<p>

Two hosts are considered equivalent if both host names can be resolved
into the same IP addresses; else if either host name can't be
resolved, the host names must be equal without regard to case; or both
host names equal to null.<p>

Since hosts comparison requires name resolution, this operation is a
blocking operation. <p>

Note: The defined behavior for {@code equals} is known to
be inconsistent with virtual hosting in HTTP.

@param   obj   the URL to compare against.
@return  {@code true} if the objects are the same;
         {@code false} otherwise.
"
      end

      operation 7561218 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an integer suitable for hash table indexing.<p>

The hash code is based upon all the URL components relevant for URL
comparison. As such, this operation is a blocking operation.<p>

@return  a hash code for this {@code URL}.
"
      end

      operation 7561346 "sameFile"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two URLs, excluding the fragment component.<p>

Returns {@code true} if this {@code URL} and the
{@code other} argument are equal without taking the
fragment component into consideration.

@param   other   the {@code URL} to compare against.
@return  {@code true} if they reference the same remote object;
         {@code false} otherwise.
"
      end

      operation 7561474 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string representation of this {@code URL}. The
string is created by calling the {@code toExternalForm}
method of the stream protocol handler for this object.

@return  a string representation of this object.
@see     java.net.URL#URL(java.lang.String, java.lang.String, int,
                 java.lang.String)
@see     java.net.URLStreamHandler#toExternalForm(java.net.URL)
"
      end

      operation 7561602 "toExternalForm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string representation of this {@code URL}. The
string is created by calling the {@code toExternalForm}
method of the stream protocol handler for this object.

@return  a string representation of this object.
@see     java.net.URL#URL(java.lang.String, java.lang.String,
                 int, java.lang.String)
@see     java.net.URLStreamHandler#toExternalForm(java.net.URL)
"
      end

      operation 7561730 "toURI"
	public return_type class_ref 783874 // URI
	nparams 0
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link java.net.URI} equivalent to this URL.
This method functions in the same way as {@code new URI (this.toString())}.
<p>Note, any URL instance that complies with RFC 2396 can be converted
to a URI. However, some URLs that are not strictly in compliance
can not be converted to a URI.

@exception URISyntaxException if this URL is not formatted strictly according to
           to RFC2396 and cannot be converted to a URI.

@return    a URI instance equivalent to this URL.
@since 1.5
"
      end

      operation 7561858 "openConnection"
	public return_type class_ref 783746 // URLConnection
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link java.net.URLConnection URLConnection} instance that
represents a connection to the remote object referred to by the
{@code URL}.

<P>A new instance of {@linkplain java.net.URLConnection URLConnection} is
created every time when invoking the
{@linkplain java.net.URLStreamHandler#openConnection(URL)
URLStreamHandler.openConnection(URL)} method of the protocol handler for
this URL.</P>

<P>It should be noted that a URLConnection instance does not establish
the actual network connection on creation. This will happen only when
calling {@linkplain java.net.URLConnection#connect() URLConnection.connect()}.</P>

<P>If for the URL's protocol (such as HTTP or JAR), there
exists a public, specialized URLConnection subclass belonging
to one of the following packages or one of their subpackages:
java.lang, java.io, java.util, java.net, the connection
returned will be of that subclass. For example, for HTTP an
HttpURLConnection will be returned, and for JAR a
JarURLConnection will be returned.</P>

@return     a {@link java.net.URLConnection URLConnection} linking
            to the URL.
@exception  IOException  if an I/O exception occurs.
@see        java.net.URL#URL(java.lang.String, java.lang.String,
            int, java.lang.String)
"
      end

      operation 7561986 "openConnection"
	public return_type class_ref 783746 // URLConnection
	nparams 1
	  param inout name "proxy" type class_ref 966018 // Proxy
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as {@link #openConnection()}, except that the connection will be
made through the specified proxy; Protocol handlers that do not
support proxing will ignore the proxy parameter and make a
normal connection.

Invoking this method preempts the system's default ProxySelector
settings.

@param      proxy the Proxy through which this connection
            will be made. If direct connection is desired,
            Proxy.NO_PROXY should be specified.
@return     a {@code URLConnection} to the URL.
@exception  IOException  if an I/O exception occurs.
@exception  SecurityException if a security manager is present
            and the caller doesn't have permission to connect
            to the proxy.
@exception  IllegalArgumentException will be thrown if proxy is null,
            or proxy has the wrong type
@exception  UnsupportedOperationException if the subclass that
            implements the protocol handler doesn't support
            this method.
@see        java.net.URL#URL(java.lang.String, java.lang.String,
            int, java.lang.String)
@see        java.net.URLConnection
@see        java.net.URLStreamHandler#openConnection(java.net.URL,
            java.net.Proxy)
@since      1.5
"
      end

      operation 7562114 "openStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a connection to this {@code URL} and returns an
{@code InputStream} for reading from that connection. This
method is a shorthand for:
<blockquote><pre>
    openConnection().getInputStream()
</pre></blockquote>

@return     an input stream for reading from the URL connection.
@exception  IOException  if an I/O exception occurs.
@see        java.net.URL#openConnection()
@see        java.net.URLConnection#getInputStream()
"
      end

      operation 7562242 "getContent"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the contents of this URL. This method is a shorthand for:
<blockquote><pre>
    openConnection().getContent()
</pre></blockquote>

@return     the contents of this URL.
@exception  IOException  if an I/O exception occurs.
@see        java.net.URLConnection#getContent()
"
      end

      operation 7562370 "getContent"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "classes" type class_ref 130818 // Class
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the contents of this URL. This method is a shorthand for:
<blockquote><pre>
    openConnection().getContent(Class[])
</pre></blockquote>

@param classes an array of Java types
@return     the content object of this URL that is the first match of
              the types specified in the classes array.
              null if none of the requested types are supported.
@exception  IOException  if an I/O exception occurs.
@see        java.net.URLConnection#getContent(Class[])
@since 1.3
"
      end

      classrelation 3266306 // factory (<unidirectional association>)
	relation 3266306 --->
	  a role_name "factory" class_relation package
	    comment "
The URLStreamHandler factory.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3266306 // factory (<unidirectional association>)
	  b parent class_ref 972546 // URLStreamHandlerFactory
      end

      operation 7562498 "setURLStreamHandlerFactory"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fac" type class_ref 972546 // URLStreamHandlerFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets an application's {@code URLStreamHandlerFactory}.
This method can be called at most once in a given Java Virtual
Machine.

<p> The {@code URLStreamHandlerFactory} instance is used to
construct a stream protocol handler from a protocol name.

<p> If there is a security manager, this method first calls
the security manager's {@code checkSetFactory} method
to ensure the operation is allowed.
This could result in a SecurityException.

@param      fac   the desired factory.
@exception  Error  if the application has already set a factory.
@exception  SecurityException  if a security manager exists and its
            {@code checkSetFactory} method doesn't allow
            the operation.
@see        java.net.URL#URL(java.lang.String, java.lang.String,
            int, java.lang.String)
@see        java.net.URLStreamHandlerFactory
@see        SecurityManager#checkSetFactory
"
      end

      classrelation 3266434 // handlers (<unidirectional association>)
	relation 3266434 --->
	  a role_name "handlers" init_value " new Hashtable<>()" class_relation package
	    comment "
A table of protocol handlers.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,URLStreamHandler> ${name}${value};
"
	    classrelation_ref 3266434 // handlers (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      classrelation 3266562 // streamHandlerLock (<unidirectional association>)
	relation 3266562 --->
	  a role_name "streamHandlerLock" init_value " new Object()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3266562 // streamHandlerLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 7562626 "getURLStreamHandler"
	class_operation package return_type class_ref 972290 // URLStreamHandler
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Stream Handler.
@param protocol the protocol to use
"
      end

      classrelation 3266690 // serialPersistentFields (<unidirectional association>)
	relation 3266690 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"protocol\", String.class),
        new ObjectStreamField(\"host\", String.class),
        new ObjectStreamField(\"port\", int.class),
        new ObjectStreamField(\"authority\", String.class),
        new ObjectStreamField(\"file\", String.class),
        new ObjectStreamField(\"ref\", String.class),
        new ObjectStreamField(\"hashCode\", int.class), }" class_relation const_relation private
	    comment "
@serialField    protocol String

@serialField    host String

@serialField    port int

@serialField    authority String

@serialField    file String

@serialField    ref String

@serialField    hashCode int


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3266690 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7562754 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WriteObject is called to save the state of the URL to an
ObjectOutputStream. The handler is not saved since it is
specific to this system.

@serialData the default write object value. When read back in,
the reader must ensure that calling getURLStreamHandler with
the protocol variable returns a valid URLStreamHandler and
throw an IOException if it does not.
"
      end

      operation 7562882 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the URL from the
stream.  It reads the components of the URL and finds the local
stream handler.
"
      end

      operation 7563010 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the de-serialized object with an URL object.

@return a newly created object from the deserialzed state.

@throws ObjectStreamException if a new object replacing this
object could not be created
"
      end

      operation 7563138 "setDeserializedFields"
	private return_type class_ref 243458 // URL
	nparams 1
	  param inout name "handler" type class_ref 972290 // URLStreamHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7563266 "fabricateNewURL"
	private return_type class_ref 243458 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7563394 "isBuiltinStreamHandler"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "handlerClassName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7563522 "resetState"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7563650 "setSerializedHashCode"
	private explicit_return_type "void"
	nparams 1
	  param in name "hc" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 246786 "UnknownHostException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that the IP address of a host could not be determined.

@author  Jonathan Payne
@since   JDK1.0
"
      classrelation 3261698 // <generalisation>
	relation 3261698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3261698 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1786370 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4639126076052875403L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7544194 "UnknownHostException"
	public explicit_return_type ""
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnknownHostException} with the
specified detail message.

@param   host   the detail message.
"
      end

      operation 7544322 "UnknownHostException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnknownHostException} with no detail
message.
"
      end
    end

    class 247938 "InetSocketAddress"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
This class implements an IP Socket Address (IP address + port number)
It can also be a pair (hostname + port number), in which case an attempt
will be made to resolve the hostname. If resolution fails then the address
is said to be <I>unresolved</I> but can still be used on some circumstances
like connecting through a proxy.
<p>
It provides an immutable object used by sockets for binding, connecting, or
as returned values.
<p>
The <i>wildcard</i> is a special local IP address. It usually means \"any\"
and can only be used for {@code bind} operations.

@see java.net.Socket
@see java.net.ServerSocket
@since 1.4
"
      classrelation 3250178 // <generalisation>
	relation 3250178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3250178 // <generalisation>
	  b parent class_ref 962178 // SocketAddress
      end

      class 968450 "InetSocketAddressHolder"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3250306 // hostname (<unidirectional association>)
	  relation 3250306 --->
	    a role_name "hostname" private
	      comment " The hostname of the Socket Address
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3250306 // hostname (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3250434 // addr (<unidirectional association>)
	  relation 3250434 --->
	    a role_name "addr" private
	      comment " The IP address of the Socket Address
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3250434 // addr (<unidirectional association>)
	    b parent class_ref 513154 // InetAddress
	end

	attribute 1775234 "port"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The port number of the Socket Address
"
	end

	operation 7499010 "InetSocketAddressHolder"
	  private explicit_return_type ""
	  nparams 3
	    param inout name "hostname" type class_ref 128130 // String
	    param inout name "addr" type class_ref 513154 // InetAddress
	    param in name "port" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7499138 "getPort"
	  private explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7499266 "getAddress"
	  private return_type class_ref 513154 // InetAddress
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7499394 "getHostName"
	  private return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7499522 "getHostString"
	  private return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7499650 "isUnresolved"
	  private explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7499778 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7499906 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7500034 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3250562 // holder (<unidirectional association>)
	relation 3250562 --->
	  a role_name "holder" const_relation private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3250562 // holder (<unidirectional association>)
	  b parent class_ref 968450 // InetSocketAddressHolder
      end

      attribute 1775362 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5076001401234631237L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7500162 "checkPort"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7500290 "checkHost"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "hostname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7500418 "InetSocketAddress"
	public explicit_return_type ""
	nparams 1
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket address where the IP address is the wildcard address
and the port number a specified value.
<p>
A valid port value is between 0 and 65535.
A port number of {@code zero} will let the system pick up an
ephemeral port in a {@code bind} operation.
<p>
@param   port    The port number
@throws IllegalArgumentException if the port parameter is outside the specified
range of valid port values.
"
      end

      operation 7500546 "InetSocketAddress"
	public explicit_return_type ""
	nparams 2
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Creates a socket address from an IP address and a port number.
<p>
A valid port value is between 0 and 65535.
A port number of {@code zero} will let the system pick up an
ephemeral port in a {@code bind} operation.
<P>
A {@code null} address will assign the <i>wildcard</i> address.
<p>
@param   addr    The IP address
@param   port    The port number
@throws IllegalArgumentException if the port parameter is outside the specified
range of valid port values.
"
      end

      operation 7500674 "InetSocketAddress"
	public explicit_return_type ""
	nparams 2
	  param inout name "hostname" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Creates a socket address from a hostname and a port number.
<p>
An attempt will be made to resolve the hostname into an InetAddress.
If that attempt fails, the address will be flagged as <I>unresolved</I>.
<p>
If there is a security manager, its {@code checkConnect} method
is called with the host name as its argument to check the permission
to resolve it. This could result in a SecurityException.
<P>
A valid port value is between 0 and 65535.
A port number of {@code zero} will let the system pick up an
ephemeral port in a {@code bind} operation.
<P>
@param   hostname the Host name
@param   port    The port number
@throws IllegalArgumentException if the port parameter is outside the range
of valid port values, or if the hostname parameter is <TT>null</TT>.
@throws SecurityException if a security manager is present and
                          permission to resolve the host name is
                          denied.
@see     #isUnresolved()
"
      end

      operation 7500802 "InetSocketAddress"
	private explicit_return_type ""
	nparams 2
	  param in name "port" explicit_type "int"
	  param inout name "hostname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " private constructor for creating unresolved instances"
      end

      operation 7500930 "createUnresolved"
	class_operation public return_type class_ref 247938 // InetSocketAddress
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Creates an unresolved socket address from a hostname and a port number.
<p>
No attempt will be made to resolve the hostname into an InetAddress.
The address will be flagged as <I>unresolved</I>.
<p>
A valid port value is between 0 and 65535.
A port number of {@code zero} will let the system pick up an
ephemeral port in a {@code bind} operation.
<P>
@param   host    the Host name
@param   port    The port number
@throws IllegalArgumentException if the port parameter is outside
                 the range of valid port values, or if the hostname
                 parameter is <TT>null</TT>.
@see     #isUnresolved()
@return  a {@code InetSocketAddress} representing the unresolved
         socket address
@since 1.5
"
      end

      classrelation 3250690 // serialPersistentFields (<unidirectional association>)
	relation 3250690 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
         new ObjectStreamField(\"hostname\", String.class),
         new ObjectStreamField(\"addr\", InetAddress.class),
         new ObjectStreamField(\"port\", int.class)}" class_relation const_relation private
	    comment "
@serialField hostname String
@serialField addr InetAddress
@serialField port int

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3250690 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7501058 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7501186 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7501314 "readObjectNoData"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1775490 "FIELDS_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1775618 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 165122 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            sun.misc.Unsafe unsafe = sun.misc.Unsafe.getUnsafe();
            FIELDS_OFFSET = unsafe.objectFieldOffset(
                    InetSocketAddress.class.getDeclaredField(\"holder\"));
            UNSAFE = unsafe;
        } catch (ReflectiveOperationException e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7501442 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the port number.

@return the port number.
"
      end

      operation 7501570 "getAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Gets the {@code InetAddress}.

@return the InetAdress or {@code null} if it is unresolved.
"
      end

      operation 7501698 "getHostName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code hostname}.
Note: This method may trigger a name service reverse lookup if the
address was created with a literal IP address.

@return  the hostname part of the address.
"
      end

      operation 7501826 "getHostString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hostname, or the String form of the address if it
doesn't have a hostname (it was created using a literal).
This has the benefit of <b>not</b> attempting a reverse lookup.

@return the hostname, or String representation of the address.
@since 1.7
"
      end

      operation 7501954 "isUnresolved"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the address has been resolved or not.

@return {@code true} if the hostname couldn't be resolved into
         an {@code InetAddress}.
"
      end

      operation 7502082 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Constructs a string representation of this InetSocketAddress.
This String is constructed by calling toString() on the InetAddress
and concatenating the port number (with a colon). If the address
is unresolved then the part before the colon will only contain the hostname.

@return  a string representation of this object.
"
      end

      operation 7502210 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this object against the specified object.
The result is {@code true} if and only if the argument is
not {@code null} and it represents the same address as
this object.
<p>
Two instances of {@code InetSocketAddress} represent the same
address if both the InetAddresses (or hostnames if it is unresolved) and port
numbers are equal.
If both addresses are unresolved, then the hostname and the port number
are compared.

Note: Hostnames are case insensitive. e.g. \"FooBar\" and \"foobar\" are
considered equal.

@param   obj   the object to compare against.
@return  {@code true} if the objects are the same;
         {@code false} otherwise.
@see java.net.InetAddress#equals(java.lang.Object)
"
      end

      operation 7502338 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a hashcode for this socket address.

@return  a hash code value for this socket address.
"
      end
    end

    class 248066 "SocketException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that there is an error creating or accessing a Socket.

@author  Jonathan Payne
@since   JDK1.0
"
      classrelation 3238402 // <generalisation>
	relation 3238402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3238402 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1759106 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5935874303556886934L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7442562 "SocketException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SocketException} with the
specified detail message.

@param msg the detail message.
"
      end

      operation 7442690 "SocketException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SocketException} with no detail message.
"
      end
    end

    class 253442 "MalformedURLException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that a malformed URL has occurred. Either no
legal protocol could be found in a specification string or the
string could not be parsed.

@author  Arthur van Hoff
@since   JDK1.0
"
      classrelation 3252226 // <generalisation>
	relation 3252226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3252226 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1775874 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -182787522200415866L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7506178 "MalformedURLException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code MalformedURLException} with no detail message.
"
      end

      operation 7506306 "MalformedURLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code MalformedURLException} with the
specified detail message.

@param   msg   the detail message.
"
      end
    end

    class 513154 "InetAddress"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents an Internet Protocol (IP) address.

<p> An IP address is either a 32-bit or 128-bit unsigned number
used by IP, a lower-level protocol on which protocols like UDP and
TCP are built. The IP address architecture is defined by <a
href=\"http://www.ietf.org/rfc/rfc790.txt\"><i>RFC&nbsp;790:
Assigned Numbers</i></a>, <a
href=\"http://www.ietf.org/rfc/rfc1918.txt\"> <i>RFC&nbsp;1918:
Address Allocation for Private Internets</i></a>, <a
href=\"http://www.ietf.org/rfc/rfc2365.txt\"><i>RFC&nbsp;2365:
Administratively Scoped IP Multicast</i></a>, and <a
href=\"http://www.ietf.org/rfc/rfc2373.txt\"><i>RFC&nbsp;2373: IP
Version 6 Addressing Architecture</i></a>. An instance of an
InetAddress consists of an IP address and possibly its
corresponding host name (depending on whether it is constructed
with a host name or whether it has already done reverse host name
resolution).

<h3> Address types </h3>

<blockquote><table cellspacing=2 summary=\"Description of unicast and multicast address types\">
  <tr><th valign=top><i>unicast</i></th>
      <td>An identifier for a single interface. A packet sent to
        a unicast address is delivered to the interface identified by
        that address.

        <p> The Unspecified Address -- Also called anylocal or wildcard
        address. It must never be assigned to any node. It indicates the
        absence of an address. One example of its use is as the target of
        bind, which allows a server to accept a client connection on any
        interface, in case the server host has multiple interfaces.

        <p> The <i>unspecified</i> address must not be used as
        the destination address of an IP packet.

        <p> The <i>Loopback</i> Addresses -- This is the address
        assigned to the loopback interface. Anything sent to this
        IP address loops around and becomes IP input on the local
        host. This address is often used when testing a
        client.</td></tr>
  <tr><th valign=top><i>multicast</i></th>
      <td>An identifier for a set of interfaces (typically belonging
        to different nodes). A packet sent to a multicast address is
        delivered to all interfaces identified by that address.</td></tr>
</table></blockquote>

<h4> IP address scope </h4>

<p> <i>Link-local</i> addresses are designed to be used for addressing
on a single link for purposes such as auto-address configuration,
neighbor discovery, or when no routers are present.

<p> <i>Site-local</i> addresses are designed to be used for addressing
inside of a site without the need for a global prefix.

<p> <i>Global</i> addresses are unique across the internet.

<h4> Textual representation of IP addresses </h4>

The textual representation of an IP address is address family specific.

<p>

For IPv4 address format, please refer to <A
HREF=\"Inet4Address.html#format\">Inet4Address#format</A>; For IPv6
address format, please refer to <A
HREF=\"Inet6Address.html#format\">Inet6Address#format</A>.

<P>There is a <a href=\"doc-files/net-properties.html#Ipv4IPv6\">couple of
System Properties</a> affecting how IPv4 and IPv6 addresses are used.</P>

<h4> Host Name Resolution </h4>

Host name-to-IP address <i>resolution</i> is accomplished through
the use of a combination of local machine configuration information
and network naming services such as the Domain Name System (DNS)
and Network Information Service(NIS). The particular naming
services(s) being used is by default the local machine configured
one. For any host name, its corresponding IP address is returned.

<p> <i>Reverse name resolution</i> means that for any IP address,
the host associated with the IP address is returned.

<p> The InetAddress class provides methods to resolve host names to
their IP addresses and vice versa.

<h4> InetAddress Caching </h4>

The InetAddress class has a cache to store successful as well as
unsuccessful host name resolutions.

<p> By default, when a security manager is installed, in order to
protect against DNS spoofing attacks,
the result of positive host name resolutions are
cached forever. When a security manager is not installed, the default
behavior is to cache entries for a finite (implementation dependent)
period of time. The result of unsuccessful host
name resolution is cached for a very short period of time (10
seconds) to improve performance.

<p> If the default behavior is not desired, then a Java security property
can be set to a different Time-to-live (TTL) value for positive
caching. Likewise, a system admin can configure a different
negative caching TTL value when needed.

<p> Two Java security properties control the TTL values used for
 positive and negative host name resolution caching:

<blockquote>
<dl>
<dt><b>networkaddress.cache.ttl</b></dt>
<dd>Indicates the caching policy for successful name lookups from
the name service. The value is specified as as integer to indicate
the number of seconds to cache the successful lookup. The default
setting is to cache for an implementation specific period of time.
<p>
A value of -1 indicates \"cache forever\".
</dd>
<dt><b>networkaddress.cache.negative.ttl</b> (default: 10)</dt>
<dd>Indicates the caching policy for un-successful name lookups
from the name service. The value is specified as as integer to
indicate the number of seconds to cache the failure for
un-successful lookups.
<p>
A value of 0 indicates \"never cache\".
A value of -1 indicates \"cache forever\".
</dd>
</dl>
</blockquote>

@author  Chris Warth
@see     java.net.InetAddress#getByAddress(byte[])
@see     java.net.InetAddress#getByAddress(java.lang.String, byte[])
@see     java.net.InetAddress#getAllByName(java.lang.String)
@see     java.net.InetAddress#getByName(java.lang.String)
@see     java.net.InetAddress#getLocalHost()
@since JDK1.0
"
      classrelation 3246338 // <realization>
	relation 3246338 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3246338 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1771778 "IPv4"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Specify the address family: Internet Protocol, Version 4
@since 1.4

"
      end

      attribute 1771906 "IPv6"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Specify the address family: Internet Protocol, Version 6
@since 1.4

"
      end

      attribute 1772034 "preferIPv6Address"
	class_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Specify address family preference 
"
      end

      class 967042 "InetAddressHolder"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3246466 // originalHostName (<unidirectional association>)
	  relation 3246466 --->
	    a role_name "originalHostName" package
	      comment "
Reserve the original application specified hostname.

The original hostname is useful for domain-based endpoint
identification (see RFC 2818 and RFC 6125).  If an address
was created with a raw IP address, a reverse name lookup
may introduce endpoint identification security issue via
DNS forging.

Oracle JSSE provider is using this original hostname, via
sun.misc.JavaNetAccess, for SSL/TLS endpoint identification.

Note: May define a new public method in the future if necessary.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3246466 // originalHostName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 7478914 "InetAddressHolder"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7479042 "InetAddressHolder"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "hostName" type class_ref 128130 // String
	    param in name "address" explicit_type "int"
	    param in name "family" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7479170 "init"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "hostName" type class_ref 128130 // String
	    param in name "family" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3246594 // hostName (<unidirectional association>)
	  relation 3246594 --->
	    a role_name "hostName" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3246594 // hostName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 7479298 "getHostName"
	  package return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7479426 "getOriginalHostName"
	  package return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1772162 "address"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Holds a 32-bit IPv4 address.

"
	end

	operation 7479554 "getAddress"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1772290 "family"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Specifies the address family type, for instance, '1' for IPv4
addresses, and '2' for IPv6 addresses.

"
	end

	operation 7479682 "getFamily"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3246722 // holder (<unidirectional association>)
	relation 3246722 --->
	  a role_name "holder" const_relation package
	    comment " Used to store the serializable fields of InetAddress 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3246722 // holder (<unidirectional association>)
	  b parent class_ref 967042 // InetAddressHolder
      end

      operation 7479810 "holder"
	package return_type class_ref 967042 // InetAddressHolder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3246850 // nameServices (<unidirectional association>)
	relation 3246850 --->
	  a role_name "nameServices" init_value " null" class_relation private
	    comment " Used to store the name service provider 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<NameService> ${name}${value};
"
	    classrelation_ref 3246850 // nameServices (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3246978 // canonicalHostName (<unidirectional association>)
	relation 3246978 --->
	  a role_name "canonicalHostName" init_value " null" private
	    comment " Used to store the best available hostname 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3246978 // canonicalHostName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1772418 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3286316764910316507L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.0.2 for interoperability 
"
      end

      extra_member 164354 "initialization"
	
	cpp "" ""
	java "  static {
        preferIPv6Address = java.security.AccessController.doPrivileged(
            new GetBooleanAction(\"java.net.preferIPv6Addresses\")).booleanValue();
        AccessController.doPrivileged(
            new java.security.PrivilegedAction<Void>() {
                public Void run() {
                    System.loadLibrary(\"net\");
                    return null;
                }
            });
        init();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7479938 "InetAddress"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the Socket.accept() method.
This creates an empty InetAddress, which is filled in by
the accept() method.  This InetAddress, however, is not
put in the address cache, since it is not created by name.
"
      end

      operation 7480066 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the de-serialized object with an Inet4Address object.

@return the alternate object to the de-serialized object.

@throws ObjectStreamException if a new object replacing this
object could not be created
"
      end

      operation 7480194 "isMulticastAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is an
IP multicast address.
@return a {@code boolean} indicating if the InetAddress is
an IP multicast address
@since   JDK1.1
"
      end

      operation 7480322 "isAnyLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress in a wildcard address.
@return a {@code boolean} indicating if the Inetaddress is
        a wildcard address.
@since 1.4
"
      end

      operation 7480450 "isLoopbackAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is a loopback address.

@return a {@code boolean} indicating if the InetAddress is
a loopback address; or false otherwise.
@since 1.4
"
      end

      operation 7480578 "isLinkLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is an link local address.

@return a {@code boolean} indicating if the InetAddress is
a link local address; or false if address is not a link local unicast address.
@since 1.4
"
      end

      operation 7480706 "isSiteLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is a site local address.

@return a {@code boolean} indicating if the InetAddress is
a site local address; or false if address is not a site local unicast address.
@since 1.4
"
      end

      operation 7480834 "isMCGlobal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has global scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of global scope, false if it is not
        of global scope or it is not a multicast address
@since 1.4
"
      end

      operation 7480962 "isMCNodeLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has node scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of node-local scope, false if it is not
        of node-local scope or it is not a multicast address
@since 1.4
"
      end

      operation 7481090 "isMCLinkLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has link scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of link-local scope, false if it is not
        of link-local scope or it is not a multicast address
@since 1.4
"
      end

      operation 7481218 "isMCSiteLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has site scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of site-local scope, false if it is not
        of site-local scope or it is not a multicast address
@since 1.4
"
      end

      operation 7481346 "isMCOrgLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has organization scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of organization-local scope,
        false if it is not of organization-local scope
        or it is not a multicast address
@since 1.4
"
      end

      operation 7481474 "isReachable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test whether that address is reachable. Best effort is made by the
implementation to try to reach the host, but firewalls and server
configuration may block requests resulting in a unreachable status
while some specific ports may be accessible.
A typical implementation will use ICMP ECHO REQUESTs if the
privilege can be obtained, otherwise it will try to establish
a TCP connection on port 7 (Echo) of the destination host.
<p>
The timeout value, in milliseconds, indicates the maximum amount of time
the try should take. If the operation times out before getting an
answer, the host is deemed unreachable. A negative value will result
in an IllegalArgumentException being thrown.

@param   timeout the time, in milliseconds, before the call aborts
@return a {@code boolean} indicating if the address is reachable.
@throws IOException if a network error occurs
@throws  IllegalArgumentException if {@code timeout} is negative.
@since 1.5
"
      end

      operation 7481602 "isReachable"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "netif" type class_ref 962306 // NetworkInterface
	  param in name "ttl" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test whether that address is reachable. Best effort is made by the
implementation to try to reach the host, but firewalls and server
configuration may block requests resulting in a unreachable status
while some specific ports may be accessible.
A typical implementation will use ICMP ECHO REQUESTs if the
privilege can be obtained, otherwise it will try to establish
a TCP connection on port 7 (Echo) of the destination host.
<p>
The {@code network interface} and {@code ttl} parameters
let the caller specify which network interface the test will go through
and the maximum number of hops the packets should go through.
A negative value for the {@code ttl} will result in an
IllegalArgumentException being thrown.
<p>
The timeout value, in milliseconds, indicates the maximum amount of time
the try should take. If the operation times out before getting an
answer, the host is deemed unreachable. A negative value will result
in an IllegalArgumentException being thrown.

@param   netif   the NetworkInterface through which the
                   test will be done, or null for any interface
@param   ttl     the maximum numbers of hops to try or 0 for the
                 default
@param   timeout the time, in milliseconds, before the call aborts
@throws  IllegalArgumentException if either {@code timeout}
                         or {@code ttl} are negative.
@return a {@code boolean}indicating if the address is reachable.
@throws IOException if a network error occurs
@since 1.5
"
      end

      operation 7481730 "getHostName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the host name for this IP address.

<p>If this InetAddress was created with a host name,
this host name will be remembered and returned;
otherwise, a reverse name lookup will be performed
and the result will be returned based on the system
configured name lookup service. If a lookup of the name service
is required, call
{@link #getCanonicalHostName() getCanonicalHostName}.

<p>If there is a security manager, its
{@code checkConnect} method is first called
with the hostname and {@code -1}
as its arguments to see if the operation is allowed.
If the operation is not allowed, it will return
the textual representation of the IP address.

@return  the host name for this IP address, or if the operation
   is not allowed by the security check, the textual
   representation of the IP address.

@see InetAddress#getCanonicalHostName
@see SecurityManager#checkConnect
"
      end

      operation 7481858 "getHostName"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "check" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hostname for this address.
If the host is equal to null, then this address refers to any
of the local machine's available network addresses.
this is package private so SocketPermission can make calls into
here without a security check.

<p>If there is a security manager, this method first
calls its {@code checkConnect} method
with the hostname and {@code -1}
as its arguments to see if the calling code is allowed to know
the hostname for this IP address, i.e., to connect to the host.
If the operation is not allowed, it will return
the textual representation of the IP address.

@return  the host name for this IP address, or if the operation
   is not allowed by the security check, the textual
   representation of the IP address.

@param check make security check if true

@see SecurityManager#checkConnect
"
      end

      operation 7481986 "getCanonicalHostName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fully qualified domain name for this IP address.
Best effort method, meaning we may not be able to return
the FQDN depending on the underlying system configuration.

<p>If there is a security manager, this method first
calls its {@code checkConnect} method
with the hostname and {@code -1}
as its arguments to see if the calling code is allowed to know
the hostname for this IP address, i.e., to connect to the host.
If the operation is not allowed, it will return
the textual representation of the IP address.

@return  the fully qualified domain name for this IP address,
   or if the operation is not allowed by the security check,
   the textual representation of the IP address.

@see SecurityManager#checkConnect

@since 1.4
"
      end

      operation 7482114 "getHostFromNameService"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param inout name "check" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hostname for this address.

<p>If there is a security manager, this method first
calls its {@code checkConnect} method
with the hostname and {@code -1}
as its arguments to see if the calling code is allowed to know
the hostname for this IP address, i.e., to connect to the host.
If the operation is not allowed, it will return
the textual representation of the IP address.

@return  the host name for this IP address, or if the operation
   is not allowed by the security check, the textual
   representation of the IP address.

@param check make security check if true

@see SecurityManager#checkConnect
"
      end

      operation 7482242 "getAddress"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw IP address of this {@code InetAddress}
object. The result is in network byte order: the highest order
byte of the address is in {@code getAddress()[0]}.

@return  the raw IP address of this object.
"
      end

      operation 7482370 "getHostAddress"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the IP address string in textual presentation.

@return  the raw IP address in a string format.
@since   JDK1.0.2
"
      end

      operation 7482498 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this IP address.

@return  a hash code value for this IP address.
"
      end

      operation 7482626 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.
The result is {@code true} if and only if the argument is
not {@code null} and it represents the same IP address as
this object.
<p>
Two instances of {@code InetAddress} represent the same IP
address if the length of the byte arrays returned by
{@code getAddress} is the same for both, and each of the
array components is the same for the byte arrays.

@param   obj   the object to compare against.
@return  {@code true} if the objects are the same;
         {@code false} otherwise.
@see     java.net.InetAddress#getAddress()
"
      end

      operation 7482754 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this IP address to a {@code String}. The
string returned is of the form: hostname / literal IP
address.

If the host name is unresolved, no reverse name service lookup
is performed. The hostname part will be represented by an empty string.

@return  a string representation of this IP address.
"
      end

      class 967170 "Cache"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3247874 // cache (<unidirectional association>)
	  relation 3247874 --->
	    a role_name "cache" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, CacheEntry> ${name}${value};
"
	      classrelation_ref 3247874 // cache (<unidirectional association>)
	    b parent class_ref 377858 // LinkedHashMap
	end

	class 967554 "Type"
	  visibility package stereotype "enum"
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  attribute 1772802 "Positive"
	    public type class_ref 967554 // Type
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1772930 "Negative"
	    public type class_ref 967554 // Type
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end
	end

	classrelation 3248002 // type (<unidirectional association>)
	  relation 3248002 --->
	    a role_name "type" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3248002 // type (<unidirectional association>)
	    b parent class_ref 967554 // Type
	end

	operation 7483010 "Cache"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "type" type class_ref 967554 // Type
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create cache
"
	end

	operation 7483138 "getPolicy"
	  private explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7483266 "put"
	  public return_type class_ref 967170 // Cache
	  nparams 2
	    param inout name "host" type class_ref 128130 // String
	    param inout name "addresses" type class_ref 513154 // InetAddress
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Add an entry to the cache. If there's already an
entry then for this host then the entry will be
replaced.
"
	end

	operation 7483394 "get"
	  public return_type class_ref 967426 // CacheEntry
	  nparams 1
	    param inout name "host" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Query the cache for the specific host. If found then
return its CacheEntry, or null if not found.
"
	end
      end

      classrelation 3247106 // addressCache (<unidirectional association>)
	relation 3247106 --->
	  a role_name "addressCache" init_value " new Cache(Cache.Type.Positive)" class_relation private
	    comment "
Cached addresses - our own litle nis, not!

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3247106 // addressCache (<unidirectional association>)
	  b parent class_ref 967170 // Cache
      end

      classrelation 3247234 // negativeCache (<unidirectional association>)
	relation 3247234 --->
	  a role_name "negativeCache" init_value " new Cache(Cache.Type.Negative)" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3247234 // negativeCache (<unidirectional association>)
	  b parent class_ref 967170 // Cache
      end

      attribute 1772546 "addressCacheInit"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3247362 // unknown_array (<unidirectional association>)
	relation 3247362 --->
	  a role_name "unknown_array" multiplicity "[]" class_relation package
	    comment " put THIS in cache"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3247362 // unknown_array (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      classrelation 3247490 // impl (<unidirectional association>)
	relation 3247490 --->
	  a role_name "impl" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3247490 // impl (<unidirectional association>)
	  b parent class_ref 967298 // InetAddressImpl
      end

      classrelation 3247618 // lookupTable (<unidirectional association>)
	relation 3247618 --->
	  a role_name "lookupTable" init_value " new HashMap<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Void> ${name}${value};
"
	    classrelation_ref 3247618 // lookupTable (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      class 967426 "CacheEntry"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7482882 "CacheEntry"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "addresses" type class_ref 513154 // InetAddress
	  multiplicity "[]"
	    param in name "expiration" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3247746 // addresses (<unidirectional association>)
	  relation 3247746 --->
	    a role_name "addresses" multiplicity "[]" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3247746 // addresses (<unidirectional association>)
	    b parent class_ref 513154 // InetAddress
	end

	attribute 1772674 "expiration"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 7483522 "cacheInitIfNeeded"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize cache and insert anyLocalAddress into the
unknown array with no expiry.
"
      end

      operation 7483650 "cacheAddresses"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "hostname" type class_ref 128130 // String
	  param inout name "addresses" type class_ref 513154 // InetAddress
	multiplicity "[]"
	  param inout name "success" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cache the given hostname and addresses.
"
      end

      operation 7483778 "getCachedAddresses"
	class_operation private return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "hostname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lookup hostname in cache (positive & negative cache). If
found return addresses, null if not found.
"
      end

      operation 7483906 "createNSProvider"
	class_operation private explicit_return_type "NameService"
	nparams 1
	  param inout name "provider" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 164482 "initialization"
	
	cpp "" ""
	java "  static {
        // create the impl
        impl = InetAddressImplFactory.create();

        // get name service if provided and requested
        String provider = null;;
        String propPrefix = \"sun.net.spi.nameservice.provider.\";
        int n = 1;
        nameServices = new ArrayList<NameService>();
        provider = AccessController.doPrivileged(
                new GetPropertyAction(propPrefix + n));
        while (provider != null) {
            NameService ns = createNSProvider(provider);
            if (ns != null)
                nameServices.add(ns);

            n++;
            provider = AccessController.doPrivileged(
                    new GetPropertyAction(propPrefix + n));
        }

        // if not designate any name services provider,
        // create a default one
        if (nameServices.size() == 0) {
            NameService ns = createNSProvider(\"default\");
            nameServices.add(ns);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7484034 "getByAddress"
	class_operation public return_type class_ref 513154 // InetAddress
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an InetAddress based on the provided host name and IP address.
No name service is checked for the validity of the address.

<p> The host name can either be a machine name, such as
\"{@code java.sun.com}\", or a textual representation of its IP
address.
<p> No validity checking is done on the host name either.

<p> If addr specifies an IPv4 address an instance of Inet4Address
will be returned; otherwise, an instance of Inet6Address
will be returned.

<p> IPv4 address byte array must be 4 bytes long and IPv6 byte array
must be 16 bytes long

@param host the specified host
@param addr the raw IP address in network byte order
@return  an InetAddress object created from the raw IP address.
@exception  UnknownHostException  if IP address is of illegal length
@since 1.4
"
      end

      operation 7484162 "getByName"
	class_operation public return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the IP address of a host, given the host's name.

<p> The host name can either be a machine name, such as
\"{@code java.sun.com}\", or a textual representation of its
IP address. If a literal IP address is supplied, only the
validity of the address format is checked.

<p> For {@code host} specified in literal IPv6 address,
either the form defined in RFC 2732 or the literal IPv6 address
format defined in RFC 2373 is accepted. IPv6 scoped addresses are also
supported. See <a href=\"Inet6Address.html#scoped\">here</a> for a description of IPv6
scoped addresses.

<p> If the host is {@code null} then an {@code InetAddress}
representing an address of the loopback interface is returned.
See <a href=\"http://www.ietf.org/rfc/rfc3330.txt\">RFC&nbsp;3330</a>
section&nbsp;2 and <a href=\"http://www.ietf.org/rfc/rfc2373.txt\">RFC&nbsp;2373</a>
section&nbsp;2.5.3. </p>

@param      host   the specified host, or {@code null}.
@return     an IP address for the given host name.
@exception  UnknownHostException  if no IP address for the
              {@code host} could be found, or if a scope_id was specified
              for a global IPv6 address.
@exception  SecurityException if a security manager exists
            and its checkConnect method doesn't allow the operation
"
      end

      operation 7484290 "getByName"
	class_operation private return_type class_ref 513154 // InetAddress
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param inout name "reqAddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " called from deployment cache manager"
      end

      operation 7484418 "getAllByName"
	class_operation public return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given the name of a host, returns an array of its IP addresses,
based on the configured name service on the system.

<p> The host name can either be a machine name, such as
\"{@code java.sun.com}\", or a textual representation of its IP
address. If a literal IP address is supplied, only the
validity of the address format is checked.

<p> For {@code host} specified in <i>literal IPv6 address</i>,
either the form defined in RFC 2732 or the literal IPv6 address
format defined in RFC 2373 is accepted. A literal IPv6 address may
also be qualified by appending a scoped zone identifier or scope_id.
The syntax and usage of scope_ids is described
<a href=\"Inet6Address.html#scoped\">here</a>.
<p> If the host is {@code null} then an {@code InetAddress}
representing an address of the loopback interface is returned.
See <a href=\"http://www.ietf.org/rfc/rfc3330.txt\">RFC&nbsp;3330</a>
section&nbsp;2 and <a href=\"http://www.ietf.org/rfc/rfc2373.txt\">RFC&nbsp;2373</a>
section&nbsp;2.5.3. </p>

<p> If there is a security manager and {@code host} is not
null and {@code host.length() } is not equal to zero, the
security manager's
{@code checkConnect} method is called
with the hostname and {@code -1}
as its arguments to see if the operation is allowed.

@param      host   the name of the host, or {@code null}.
@return     an array of all the IP addresses for a given host name.

@exception  UnknownHostException  if no IP address for the
              {@code host} could be found, or if a scope_id was specified
              for a global IPv6 address.
@exception  SecurityException  if a security manager exists and its
              {@code checkConnect} method doesn't allow the operation.

@see SecurityManager#checkConnect
"
      end

      operation 7484546 "getAllByName"
	class_operation private return_type class_ref 513154 // InetAddress
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param inout name "reqAddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7484674 "getLoopbackAddress"
	class_operation public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the loopback address.
<p>
The InetAddress returned will represent the IPv4
loopback address, 127.0.0.1, or the IPv6 loopback
address, ::1. The IPv4 loopback address returned
is only one of many in the form 127.*.*.*

@return  the InetAddress loopback instance.
@since 1.7
"
      end

      operation 7484802 "checkNumericZone"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "check if the literal address string has %nn appended
returns -1 if not, or the numeric value otherwise.

%nn may also be a string that represents the displayName of
a currently available NetworkInterface.
"
      end

      operation 7484930 "getAllByName0"
	class_operation private return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7485058 "getAllByName0"
	class_operation package return_type class_ref 513154 // InetAddress
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param inout name "check" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package private so SocketPermission can call it
"
      end

      operation 7485186 "getAllByName0"
	class_operation private return_type class_ref 513154 // InetAddress
	nparams 3
	  param inout name "host" type class_ref 128130 // String
	  param inout name "reqAddr" type class_ref 513154 // InetAddress
	  param inout name "check" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7485314 "getAddressesFromNameService"
	class_operation private return_type class_ref 513154 // InetAddress
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param inout name "reqAddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7485442 "checkLookupTable"
	class_operation private return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7485570 "updateLookupTable"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7485698 "getByAddress"
	class_operation public return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code InetAddress} object given the raw IP address .
The argument is in network byte order: the highest order
byte of the address is in {@code getAddress()[0]}.

<p> This method doesn't block, i.e. no reverse name service lookup
is performed.

<p> IPv4 address byte array must be 4 bytes long and IPv6 byte array
must be 16 bytes long

@param addr the raw IP address in network byte order
@return  an InetAddress object created from the raw IP address.
@exception  UnknownHostException  if IP address is of illegal length
@since 1.4
"
      end

      classrelation 3248130 // cachedLocalHost (<unidirectional association>)
	relation 3248130 --->
	  a role_name "cachedLocalHost" init_value " null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3248130 // cachedLocalHost (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1773058 "cacheTime"
	class_attribute private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1773186 "maxCacheTime"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3248258 // cacheLock (<unidirectional association>)
	relation 3248258 --->
	  a role_name "cacheLock" init_value " new Object()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3248258 // cacheLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 7485826 "getLocalHost"
	class_operation public return_type class_ref 513154 // InetAddress
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address of the local host. This is achieved by retrieving
the name of the host from the system, then resolving that name into
an {@code InetAddress}.

<P>Note: The resolved address may be cached for a short period of time.
</P>

<p>If there is a security manager, its
{@code checkConnect} method is called
with the local host name and {@code -1}
as its arguments to see if the operation is allowed.
If the operation is not allowed, an InetAddress representing
the loopback address is returned.

@return     the address of the local host.

@exception  UnknownHostException  if the local host name could not
            be resolved into an address.

@see SecurityManager#checkConnect
@see java.net.InetAddress#getByName(java.lang.String)
"
      end

      operation 7485954 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Perform class load-time initializations.
"
      end

      operation 7486082 "anyLocalAddress"
	class_operation package return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the InetAddress representing anyLocalAddress
(typically 0.0.0.0 or ::0)
"
      end

      operation 7486210 "loadImpl"
	class_operation package return_type class_ref 967298 // InetAddressImpl
	nparams 1
	  param inout name "implName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load and instantiate an underlying impl class
"
      end

      operation 7486338 "readObjectNoData"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1773314 "FIELDS_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1773442 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 164610 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            sun.misc.Unsafe unsafe = sun.misc.Unsafe.getUnsafe();
            FIELDS_OFFSET = unsafe.objectFieldOffset(
                InetAddress.class.getDeclaredField(\"holder\")
            );
            UNSAFE = unsafe;
        } catch (ReflectiveOperationException e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7486466 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3248386 // serialPersistentFields (<unidirectional association>)
	relation 3248386 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"hostName\", String.class),
        new ObjectStreamField(\"address\", int.class),
        new ObjectStreamField(\"family\", int.class),
    }" class_relation const_relation private
	    comment " needed because the serializable fields no longer exist 

@serialField hostName String
@serialField address int
@serialField family int

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3248386 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7486594 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 527234 "DatagramSocket"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a socket for sending and receiving datagram packets.

<p>A datagram socket is the sending or receiving point for a packet
delivery service. Each packet sent or received on a datagram socket
is individually addressed and routed. Multiple packets sent from
one machine to another may be routed differently, and may arrive in
any order.

<p> Where possible, a newly constructed {@code DatagramSocket} has the
{@link SocketOptions#SO_BROADCAST SO_BROADCAST} socket option enabled so as
to allow the transmission of broadcast datagrams. In order to receive
broadcast packets a DatagramSocket should be bound to the wildcard address.
In some implementations, broadcast packets may also be received when
a DatagramSocket is bound to a more specific address.
<p>
Example:
{@code
             DatagramSocket s = new DatagramSocket(null);
             s.bind(new InetSocketAddress(8888));
}
Which is equivalent to:
{@code
             DatagramSocket s = new DatagramSocket(8888);
}
Both cases will create a DatagramSocket able to receive broadcasts on
UDP port 8888.

@author  Pavani Diwanji
@see     java.net.DatagramPacket
@see     java.nio.channels.DatagramChannel
@since JDK1.0
"
      classrelation 3239938 // <realization>
	relation 3239938 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3239938 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      attribute 1760130 "created"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Various states of this socket.

"
      end

      attribute 1760258 "bound"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1760386 "closed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3240066 // closeLock (<unidirectional association>)
	relation 3240066 --->
	  a role_name "closeLock" init_value " new Object()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3240066 // closeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3240194 // impl (<unidirectional association>)
	relation 3240194 --->
	  a role_name "impl" package
	    comment "
The implementation of this DatagramSocket.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3240194 // impl (<unidirectional association>)
	  b parent class_ref 961922 // DatagramSocketImpl
      end

      attribute 1760514 "oldImpl"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Are we using an older DatagramSocketImpl?

"
      end

      attribute 1760642 "explicitFilter"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set when a socket is ST_CONNECTED until we are certain
that any packets which might have been received prior
to calling connect() but not read by the application
have been read. During this time we check the source
address of all packets received to be sure they are from
the connected destination. Other packets are read but
silently dropped.

"
      end

      attribute 1760770 "bytesLeftToFilter"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1760898 "ST_NOT_CONNECTED"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Connection state:
ST_NOT_CONNECTED = socket not connected
ST_CONNECTED = socket connected
ST_CONNECTED_NO_IMPL = socket connected but not at impl level

"
      end

      attribute 1761026 "ST_CONNECTED"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1761154 "ST_CONNECTED_NO_IMPL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1761282 "connectState"
	package explicit_type "int"
	init_value " ST_NOT_CONNECTED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3240322 // connectedAddress (<unidirectional association>)
	relation 3240322 --->
	  a role_name "connectedAddress" init_value " null" package
	    comment "
Connected address & port

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3240322 // connectedAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1761410 "connectedPort"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7449474 "connectInternal"
	private explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this socket to a remote socket address (IP address + port number).
Binds socket if not already bound.
<p>
@param   address The remote address.
@param   port    The remote port
@throws  SocketException if binding the socket fails.
"
      end

      operation 7449602 "DatagramSocket"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a datagram socket and binds it to any available port
on the local host machine.  The socket will be bound to the
{@link InetAddress#isAnyLocalAddress wildcard} address,
an IP address chosen by the kernel.

<p>If there is a security manager,
its {@code checkListen} method is first called
with 0 as its argument to ensure the operation is allowed.
This could result in a SecurityException.

@exception  SocketException  if the socket could not be opened,
              or the socket could not bind to the specified local port.
@exception  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.

@see SecurityManager#checkListen
"
      end

      operation 7449730 "DatagramSocket"
	protected explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 961922 // DatagramSocketImpl
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unbound datagram socket with the specified
DatagramSocketImpl.

@param impl an instance of a <B>DatagramSocketImpl</B>
       the subclass wishes to use on the DatagramSocket.
@since   1.4
"
      end

      operation 7449858 "DatagramSocket"
	public explicit_return_type ""
	nparams 1
	  param inout name "bindaddr" type class_ref 962178 // SocketAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a datagram socket, bound to the specified local
socket address.
<p>
If, if the address is {@code null}, creates an unbound socket.

<p>If there is a security manager,
its {@code checkListen} method is first called
with the port from the socket address
as its argument to ensure the operation is allowed.
This could result in a SecurityException.

@param bindaddr local socket address to bind, or {@code null}
                for an unbound socket.

@exception  SocketException  if the socket could not be opened,
              or the socket could not bind to the specified local port.
@exception  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.

@see SecurityManager#checkListen
@since   1.4
"
      end

      operation 7449986 "DatagramSocket"
	public explicit_return_type ""
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a datagram socket and binds it to the specified port
on the local host machine.  The socket will be bound to the
{@link InetAddress#isAnyLocalAddress wildcard} address,
an IP address chosen by the kernel.

<p>If there is a security manager,
its {@code checkListen} method is first called
with the {@code port} argument
as its argument to ensure the operation is allowed.
This could result in a SecurityException.

@param      port port to use.
@exception  SocketException  if the socket could not be opened,
              or the socket could not bind to the specified local port.
@exception  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.

@see SecurityManager#checkListen
"
      end

      operation 7450114 "DatagramSocket"
	public explicit_return_type ""
	nparams 2
	  param in name "port" explicit_type "int"
	  param inout name "laddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a datagram socket, bound to the specified local
address.  The local port must be between 0 and 65535 inclusive.
If the IP address is 0.0.0.0, the socket will be bound to the
{@link InetAddress#isAnyLocalAddress wildcard} address,
an IP address chosen by the kernel.

<p>If there is a security manager,
its {@code checkListen} method is first called
with the {@code port} argument
as its argument to ensure the operation is allowed.
This could result in a SecurityException.

@param port local port to use
@param laddr local address to bind

@exception  SocketException  if the socket could not be opened,
              or the socket could not bind to the specified local port.
@exception  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.

@see SecurityManager#checkListen
@since   JDK1.1
"
      end

      operation 7450242 "checkOldImpl"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3240450 // implClass (<unidirectional association>)
	relation 3240450 --->
	  a role_name "implClass" init_value " null" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3240450 // implClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 7450370 "createImpl"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7450498 "getImpl"
	package return_type class_ref 961922 // DatagramSocketImpl
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the {@code DatagramSocketImpl} attached to this socket,
creating it if necessary.

@return  the {@code DatagramSocketImpl} attached to that
         DatagramSocket
@throws SocketException if creation fails.
@since 1.4
"
      end

      operation 7450626 "bind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "addr" type class_ref 962178 // SocketAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds this DatagramSocket to a specific address and port.
<p>
If the address is {@code null}, then the system will pick up
an ephemeral port and a valid local address to bind the socket.
<p>
@param   addr The address and port to bind to.
@throws  SocketException if any error happens during the bind, or if the
         socket is already bound.
@throws  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.
@throws IllegalArgumentException if addr is a SocketAddress subclass
        not supported by this socket.
@since 1.4
"
      end

      operation 7450754 "checkAddress"
	package explicit_return_type "void"
	nparams 2
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param inout name "op" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7450882 "connect"
	public explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects the socket to a remote address for this socket. When a
socket is connected to a remote address, packets may only be
sent to or received from that address. By default a datagram
socket is not connected.

<p>If the remote destination to which the socket is connected does not
exist, or is otherwise unreachable, and if an ICMP destination unreachable
packet has been received for that address, then a subsequent call to
send or receive may throw a PortUnreachableException. Note, there is no
guarantee that the exception will be thrown.

<p> If a security manager has been installed then it is invoked to check
access to the remote address. Specifically, if the given {@code address}
is a {@link InetAddress#isMulticastAddress multicast address},
the security manager's {@link
java.lang.SecurityManager#checkMulticast(InetAddress)
checkMulticast} method is invoked with the given {@code address}.
Otherwise, the security manager's {@link
java.lang.SecurityManager#checkConnect(String,int) checkConnect}
and {@link java.lang.SecurityManager#checkAccept checkAccept} methods
are invoked, with the given {@code address} and {@code port}, to
verify that datagrams are permitted to be sent and received
respectively.

<p> When a socket is connected, {@link #receive receive} and
{@link #send send} <b>will not perform any security checks</b>
on incoming and outgoing packets, other than matching the packet's
and the socket's address and port. On a send operation, if the
packet's address is set and the packet's address and the socket's
address do not match, an {@code IllegalArgumentException} will be
thrown. A socket connected to a multicast address may only be used
to send packets.

@param address the remote address for the socket

@param port the remote port for the socket.

@throws IllegalArgumentException
        if the address is null, or the port is out of range.

@throws SecurityException
        if a security manager has been installed and it does
        not permit access to the given remote address

@see #disconnect
"
      end

      operation 7451010 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "addr" type class_ref 962178 // SocketAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this socket to a remote socket address (IP address + port number).

<p> If given an {@link InetSocketAddress InetSocketAddress}, this method
behaves as if invoking {@link #connect(InetAddress,int) connect(InetAddress,int)}
with the the given socket addresses IP address and port number.

@param   addr    The remote address.

@throws  SocketException
         if the connect fails

@throws IllegalArgumentException
        if {@code addr} is {@code null}, or {@code addr} is a SocketAddress
        subclass not supported by this socket

@throws SecurityException
        if a security manager has been installed and it does
        not permit access to the given remote address

@since 1.4
"
      end

      operation 7451138 "disconnect"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disconnects the socket. If the socket is closed or not connected,
then this method has no effect.

@see #connect
"
      end

      operation 7451266 "isBound"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the binding state of the socket.
<p>
If the socket was bound prior to being {@link #close closed},
then this method will continue to return {@code true}
after the socket is closed.

@return true if the socket successfully bound to an address
@since 1.4
"
      end

      operation 7451394 "isConnected"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the connection state of the socket.
<p>
If the socket was connected prior to being {@link #close closed},
then this method will continue to return {@code true}
after the socket is closed.

@return true if the socket successfully connected to a server
@since 1.4
"
      end

      operation 7451522 "getInetAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address to which this socket is connected. Returns
{@code null} if the socket is not connected.
<p>
If the socket was connected prior to being {@link #close closed},
then this method will continue to return the connected address
after the socket is closed.

@return the address to which this socket is connected.
"
      end

      operation 7451650 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port number to which this socket is connected.
Returns {@code -1} if the socket is not connected.
<p>
If the socket was connected prior to being {@link #close closed},
then this method will continue to return the connected port number
after the socket is closed.

@return the port number to which this socket is connected.
"
      end

      operation 7451778 "getRemoteSocketAddress"
	public return_type class_ref 962178 // SocketAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address of the endpoint this socket is connected to, or
{@code null} if it is unconnected.
<p>
If the socket was connected prior to being {@link #close closed},
then this method will continue to return the connected address
after the socket is closed.

@return a {@code SocketAddress} representing the remote
        endpoint of this socket, or {@code null} if it is
        not connected yet.
@see #getInetAddress()
@see #getPort()
@see #connect(SocketAddress)
@since 1.4
"
      end

      operation 7451906 "getLocalSocketAddress"
	public return_type class_ref 962178 // SocketAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address of the endpoint this socket is bound to.

@return a {@code SocketAddress} representing the local endpoint of this
        socket, or {@code null} if it is closed or not bound yet.
@see #getLocalAddress()
@see #getLocalPort()
@see #bind(SocketAddress)
@since 1.4
"
      end

      operation 7452034 "send"
	public explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a datagram packet from this socket. The
{@code DatagramPacket} includes information indicating the
data to be sent, its length, the IP address of the remote host,
and the port number on the remote host.

<p>If there is a security manager, and the socket is not currently
connected to a remote address, this method first performs some
security checks. First, if {@code p.getAddress().isMulticastAddress()}
is true, this method calls the
security manager's {@code checkMulticast} method
with {@code p.getAddress()} as its argument.
If the evaluation of that expression is false,
this method instead calls the security manager's
{@code checkConnect} method with arguments
{@code p.getAddress().getHostAddress()} and
{@code p.getPort()}. Each call to a security manager method
could result in a SecurityException if the operation is not allowed.

@param      p   the {@code DatagramPacket} to be sent.

@exception  IOException  if an I/O error occurs.
@exception  SecurityException  if a security manager exists and its
            {@code checkMulticast} or {@code checkConnect}
            method doesn't allow the send.
@exception  PortUnreachableException may be thrown if the socket is connected
            to a currently unreachable destination. Note, there is no
            guarantee that the exception will be thrown.
@exception  java.nio.channels.IllegalBlockingModeException
            if this socket has an associated channel,
            and the channel is in non-blocking mode.
@exception  IllegalArgumentException if the socket is connected,
            and connected address and packet address differ.

@see        java.net.DatagramPacket
@see        SecurityManager#checkMulticast(InetAddress)
@see        SecurityManager#checkConnect
@revised 1.4
@spec JSR-51
"
      end

      operation 7452162 "receive"
	public explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a datagram packet from this socket. When this method
returns, the {@code DatagramPacket}'s buffer is filled with
the data received. The datagram packet also contains the sender's
IP address, and the port number on the sender's machine.
<p>
This method blocks until a datagram is received. The
{@code length} field of the datagram packet object contains
the length of the received message. If the message is longer than
the packet's length, the message is truncated.
<p>
If there is a security manager, a packet cannot be received if the
security manager's {@code checkAccept} method
does not allow it.

@param      p   the {@code DatagramPacket} into which to place
                the incoming data.
@exception  IOException  if an I/O error occurs.
@exception  SocketTimeoutException  if setSoTimeout was previously called
                and the timeout has expired.
@exception  PortUnreachableException may be thrown if the socket is connected
            to a currently unreachable destination. Note, there is no guarantee that the
            exception will be thrown.
@exception  java.nio.channels.IllegalBlockingModeException
            if this socket has an associated channel,
            and the channel is in non-blocking mode.
@see        java.net.DatagramPacket
@see        java.net.DatagramSocket
@revised 1.4
@spec JSR-51
"
      end

      operation 7452290 "checkFiltering"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7452418 "getLocalAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local address to which the socket is bound.

<p>If there is a security manager, its
{@code checkConnect} method is first called
with the host address and {@code -1}
as its arguments to see if the operation is allowed.

@see SecurityManager#checkConnect
@return  the local address to which the socket is bound,
         {@code null} if the socket is closed, or
         an {@code InetAddress} representing
         {@link InetAddress#isAnyLocalAddress wildcard}
         address if either the socket is not bound, or
         the security manager {@code checkConnect}
         method does not allow the operation
@since   1.1
"
      end

      operation 7452546 "getLocalPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port number on the local host to which this socket
is bound.

@return  the port number on the local host to which this socket is bound,
{@code -1} if the socket is closed, or
{@code 0} if it is not bound yet.
"
      end

      operation 7452674 "setSoTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Enable/disable SO_TIMEOUT with the specified timeout, in
 milliseconds. With this option set to a non-zero timeout,
 a call to receive() for this DatagramSocket
 will block for only this amount of time.  If the timeout expires,
 a <B>java.net.SocketTimeoutException</B> is raised, though the
 DatagramSocket is still valid.  The option <B>must</B> be enabled
 prior to entering the blocking operation to have effect.  The
 timeout must be {@code > 0}.
 A timeout of zero is interpreted as an infinite timeout.

@param timeout the specified timeout in milliseconds.
@throws SocketException if there is an error in the underlying protocol, such as an UDP error.
@since   JDK1.1
@see #getSoTimeout()
"
      end

      operation 7452802 "getSoTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve setting for SO_TIMEOUT.  0 returns implies that the
option is disabled (i.e., timeout of infinity).

@return the setting for SO_TIMEOUT
@throws SocketException if there is an error in the underlying protocol, such as an UDP error.
@since   JDK1.1
@see #setSoTimeout(int)
"
      end

      operation 7452930 "setSendBufferSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SO_SNDBUF option to the specified value for this
{@code DatagramSocket}. The SO_SNDBUF option is used by the
network implementation as a hint to size the underlying
network I/O buffers. The SO_SNDBUF setting may also be used
by the network implementation to determine the maximum size
of the packet that can be sent on this socket.
<p>
As SO_SNDBUF is a hint, applications that want to verify
what size the buffer is should call {@link #getSendBufferSize()}.
<p>
Increasing the buffer size may allow multiple outgoing packets
to be queued by the network implementation when the send rate
is high.
<p>
Note: If {@link #send(DatagramPacket)} is used to send a
{@code DatagramPacket} that is larger than the setting
of SO_SNDBUF then it is implementation specific if the
packet is sent or discarded.

@param size the size to which to set the send buffer
size. This value must be greater than 0.

@exception SocketException if there is an error
in the underlying protocol, such as an UDP error.
@exception IllegalArgumentException if the value is 0 or is
negative.
@see #getSendBufferSize()
"
      end

      operation 7453058 "getSendBufferSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get value of the SO_SNDBUF option for this {@code DatagramSocket}, that is the
buffer size used by the platform for output on this {@code DatagramSocket}.

@return the value of the SO_SNDBUF option for this {@code DatagramSocket}
@exception SocketException if there is an error in
the underlying protocol, such as an UDP error.
@see #setSendBufferSize
"
      end

      operation 7453186 "setReceiveBufferSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SO_RCVBUF option to the specified value for this
{@code DatagramSocket}. The SO_RCVBUF option is used by the
the network implementation as a hint to size the underlying
network I/O buffers. The SO_RCVBUF setting may also be used
by the network implementation to determine the maximum size
of the packet that can be received on this socket.
<p>
Because SO_RCVBUF is a hint, applications that want to
verify what size the buffers were set to should call
{@link #getReceiveBufferSize()}.
<p>
Increasing SO_RCVBUF may allow the network implementation
to buffer multiple packets when packets arrive faster than
are being received using {@link #receive(DatagramPacket)}.
<p>
Note: It is implementation specific if a packet larger
than SO_RCVBUF can be received.

@param size the size to which to set the receive buffer
size. This value must be greater than 0.

@exception SocketException if there is an error in
the underlying protocol, such as an UDP error.
@exception IllegalArgumentException if the value is 0 or is
negative.
@see #getReceiveBufferSize()
"
      end

      operation 7453314 "getReceiveBufferSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get value of the SO_RCVBUF option for this {@code DatagramSocket}, that is the
buffer size used by the platform for input on this {@code DatagramSocket}.

@return the value of the SO_RCVBUF option for this {@code DatagramSocket}
@exception SocketException if there is an error in the underlying protocol, such as an UDP error.
@see #setReceiveBufferSize(int)
"
      end

      operation 7453442 "setReuseAddress"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable the SO_REUSEADDR socket option.
<p>
For UDP sockets it may be necessary to bind more than one
socket to the same socket address. This is typically for the
purpose of receiving multicast packets
(See {@link java.net.MulticastSocket}). The
{@code SO_REUSEADDR} socket option allows multiple
sockets to be bound to the same socket address if the
{@code SO_REUSEADDR} socket option is enabled prior
to binding the socket using {@link #bind(SocketAddress)}.
<p>
Note: This functionality is not supported by all existing platforms,
so it is implementation specific whether this option will be ignored
or not. However, if it is not supported then
{@link #getReuseAddress()} will always return {@code false}.
<p>
When a {@code DatagramSocket} is created the initial setting
of {@code SO_REUSEADDR} is disabled.
<p>
The behaviour when {@code SO_REUSEADDR} is enabled or
disabled after a socket is bound (See {@link #isBound()})
is not defined.

@param on  whether to enable or disable the
@exception SocketException if an error occurs enabling or
           disabling the {@code SO_RESUEADDR} socket option,
           or the socket is closed.
@since 1.4
@see #getReuseAddress()
@see #bind(SocketAddress)
@see #isBound()
@see #isClosed()
"
      end

      operation 7453570 "getReuseAddress"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if SO_REUSEADDR is enabled.

@return a {@code boolean} indicating whether or not SO_REUSEADDR is enabled.
@exception SocketException if there is an error
in the underlying protocol, such as an UDP error.
@since   1.4
@see #setReuseAddress(boolean)
"
      end

      operation 7453698 "setBroadcast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable SO_BROADCAST.

<p> Some operating systems may require that the Java virtual machine be
started with implementation specific privileges to enable this option or
send broadcast datagrams.

@param  on
        whether or not to have broadcast turned on.

@throws  SocketException
         if there is an error in the underlying protocol, such as an UDP
         error.

@since 1.4
@see #getBroadcast()
"
      end

      operation 7453826 "getBroadcast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if SO_BROADCAST is enabled.
@return a {@code boolean} indicating whether or not SO_BROADCAST is enabled.
@exception SocketException if there is an error
in the underlying protocol, such as an UDP error.
@since 1.4
@see #setBroadcast(boolean)
"
      end

      operation 7453954 "setTrafficClass"
	public explicit_return_type "void"
	nparams 1
	  param in name "tc" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets traffic class or type-of-service octet in the IP
datagram header for datagrams sent from this DatagramSocket.
As the underlying network implementation may ignore this
value applications should consider it a hint.

<P> The tc <B>must</B> be in the range {@code 0 <= tc <=
255} or an IllegalArgumentException will be thrown.
<p>Notes:
<p>For Internet Protocol v4 the value consists of an
{@code integer}, the least significant 8 bits of which
represent the value of the TOS octet in IP packets sent by
the socket.
RFC 1349 defines the TOS values as follows:

<UL>
<LI><CODE>IPTOS_LOWCOST (0x02)</CODE></LI>
<LI><CODE>IPTOS_RELIABILITY (0x04)</CODE></LI>
<LI><CODE>IPTOS_THROUGHPUT (0x08)</CODE></LI>
<LI><CODE>IPTOS_LOWDELAY (0x10)</CODE></LI>
</UL>
The last low order bit is always ignored as this
corresponds to the MBZ (must be zero) bit.
<p>
Setting bits in the precedence field may result in a
SocketException indicating that the operation is not
permitted.
<p>
for Internet Protocol v6 {@code tc} is the value that
would be placed into the sin6_flowinfo field of the IP header.

@param tc        an {@code int} value for the bitset.
@throws SocketException if there is an error setting the
traffic class or type-of-service
@since 1.4
@see #getTrafficClass
"
      end

      operation 7454082 "getTrafficClass"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets traffic class or type-of-service in the IP datagram
header for packets sent from this DatagramSocket.
<p>
As the underlying network implementation may ignore the
traffic class or type-of-service set using {@link #setTrafficClass(int)}
this method may return a different value than was previously
set using the {@link #setTrafficClass(int)} method on this
DatagramSocket.

@return the traffic class or type-of-service already set
@throws SocketException if there is an error obtaining the
traffic class or type-of-service value.
@since 1.4
@see #setTrafficClass(int)
"
      end

      operation 7454210 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this datagram socket.
<p>
Any thread currently blocked in {@link #receive} upon this socket
will throw a {@link SocketException}.

<p> If this socket has an associated channel then the channel is closed
as well.

@revised 1.4
@spec JSR-51
"
      end

      operation 7454338 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the socket is closed or not.

@return true if the socket has been closed
@since 1.4
"
      end

      operation 7454466 "getChannel"
	public return_type class_ref 964994 // DatagramChannel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.DatagramChannel} object
associated with this datagram socket, if any.

<p> A datagram socket will have a channel if, and only if, the channel
itself was created via the {@link java.nio.channels.DatagramChannel#open
DatagramChannel.open} method.

@return  the datagram channel associated with this datagram socket,
         or {@code null} if this socket was not created for a channel

@since 1.4
@spec JSR-51
"
      end

      classrelation 3240578 // factory (<unidirectional association>)
	relation 3240578 --->
	  a role_name "factory" class_relation package
	    comment "
User defined factory for all datagram sockets.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3240578 // factory (<unidirectional association>)
	  b parent class_ref 965122 // DatagramSocketImplFactory
      end

      operation 7454594 "setDatagramSocketImplFactory"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fac" type class_ref 965122 // DatagramSocketImplFactory
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the datagram socket implementation factory for the
application. The factory can be specified only once.
<p>
When an application creates a new datagram socket, the socket
implementation factory's {@code createDatagramSocketImpl} method is
called to create the actual datagram socket implementation.
<p>
Passing {@code null} to the method is a no-op unless the factory
was already set.

<p>If there is a security manager, this method first calls
the security manager's {@code checkSetFactory} method
to ensure the operation is allowed.
This could result in a SecurityException.

@param      fac   the desired factory.
@exception  IOException  if an I/O error occurs when setting the
             datagram socket factory.
@exception  SocketException  if the factory is already defined.
@exception  SecurityException  if a security manager exists and its
            {@code checkSetFactory} method doesn't allow the
operation.
@see
java.net.DatagramSocketImplFactory#createDatagramSocketImpl()
@see       SecurityManager#checkSetFactory
@since 1.3
"
      end
    end

    class 527490 "DatagramPacket"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a datagram packet.
<p>
Datagram packets are used to implement a connectionless packet
delivery service. Each message is routed from one machine to
another based solely on information contained within that packet.
Multiple packets sent from one machine to another might be routed
differently, and might arrive in any order. Packet delivery is
not guaranteed.

@author  Pavani Diwanji
@author  Benjamin Renaud
@since   JDK1.0
"
      extra_member 163458 "initialization"
	
	cpp "" ""
	java "  static {
        java.security.AccessController.doPrivileged(
            new java.security.PrivilegedAction<Void>() {
                public Void run() {
                    System.loadLibrary(\"net\");
                    return null;
                }
            });
        init();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1759490 "buf"
	package explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The fields of this class are package-private since DatagramSocketImpl
classes needs to access them.

"
      end

      attribute 1759618 "offset"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1759746 "length"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1759874 "bufLength"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3239810 // address (<unidirectional association>)
	relation 3239810 --->
	  a role_name "address" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3239810 // address (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1760002 "port"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7447042 "DatagramPacket"
	public explicit_return_type ""
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code DatagramPacket} for receiving packets of
length {@code length}, specifying an offset into the buffer.
<p>
The {@code length} argument must be less than or equal to
{@code buf.length}.

@param   buf      buffer for holding the incoming datagram.
@param   offset   the offset for the buffer
@param   length   the number of bytes to read.

@since 1.2
"
      end

      operation 7447170 "DatagramPacket"
	public explicit_return_type ""
	nparams 2
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code DatagramPacket} for receiving packets of
length {@code length}.
<p>
The {@code length} argument must be less than or equal to
{@code buf.length}.

@param   buf      buffer for holding the incoming datagram.
@param   length   the number of bytes to read.
"
      end

      operation 7447298 "DatagramPacket"
	public explicit_return_type ""
	nparams 5
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a datagram packet for sending packets of length
{@code length} with offset {@code ioffset}to the
specified port number on the specified host. The
{@code length} argument must be less than or equal to
{@code buf.length}.

@param   buf      the packet data.
@param   offset   the packet data offset.
@param   length   the packet data length.
@param   address  the destination address.
@param   port     the destination port number.
@see java.net.InetAddress

@since 1.2
"
      end

      operation 7447426 "DatagramPacket"
	public explicit_return_type ""
	nparams 4
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "address" type class_ref 962178 // SocketAddress
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a datagram packet for sending packets of length
{@code length} with offset {@code ioffset}to the
specified port number on the specified host. The
{@code length} argument must be less than or equal to
{@code buf.length}.

@param   buf      the packet data.
@param   offset   the packet data offset.
@param   length   the packet data length.
@param   address  the destination socket address.
@throws  IllegalArgumentException if address type is not supported
@see java.net.InetAddress

@since 1.4
"
      end

      operation 7447554 "DatagramPacket"
	public explicit_return_type ""
	nparams 4
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "length" explicit_type "int"
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a datagram packet for sending packets of length
{@code length} to the specified port number on the specified
host. The {@code length} argument must be less than or equal
to {@code buf.length}.

@param   buf      the packet data.
@param   length   the packet length.
@param   address  the destination address.
@param   port     the destination port number.
@see     java.net.InetAddress
"
      end

      operation 7447682 "DatagramPacket"
	public explicit_return_type ""
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "length" explicit_type "int"
	  param inout name "address" type class_ref 962178 // SocketAddress
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a datagram packet for sending packets of length
{@code length} to the specified port number on the specified
host. The {@code length} argument must be less than or equal
to {@code buf.length}.

@param   buf      the packet data.
@param   length   the packet length.
@param   address  the destination address.
@throws  IllegalArgumentException if address type is not supported
@since 1.4
@see     java.net.InetAddress
"
      end

      operation 7447810 "getAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the IP address of the machine to which this datagram is being
sent or from which the datagram was received.

@return  the IP address of the machine to which this datagram is being
         sent or from which the datagram was received.
@see     java.net.InetAddress
@see #setAddress(java.net.InetAddress)
"
      end

      operation 7447938 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port number on the remote host to which this datagram is
being sent or from which the datagram was received.

@return  the port number on the remote host to which this datagram is
         being sent or from which the datagram was received.
@see #setPort(int)
"
      end

      operation 7448066 "getData"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data buffer. The data received or the data to be sent
starts from the {@code offset} in the buffer,
and runs for {@code length} long.

@return  the buffer used to receive or  send data
@see #setData(byte[], int, int)
"
      end

      operation 7448194 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offset of the data to be sent or the offset of the
data received.

@return  the offset of the data to be sent or the offset of the
         data received.

@since 1.2
"
      end

      operation 7448322 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the data to be sent or the length of the
data received.

@return  the length of the data to be sent or the length of the
         data received.
@see #setLength(int)
"
      end

      operation 7448450 "setData"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the data buffer for this packet. This sets the
data, length and offset of the packet.

@param buf the buffer to set for this packet

@param offset the offset into the data

@param length the length of the data
      and/or the length of the buffer used to receive data

@exception NullPointerException if the argument is null

@see #getData
@see #getOffset
@see #getLength

@since 1.2
"
      end

      operation 7448578 "setAddress"
	public explicit_return_type "void"
	nparams 1
	  param inout name "iaddr" type class_ref 513154 // InetAddress
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the IP address of the machine to which this datagram
is being sent.
@param iaddr the {@code InetAddress}
@since   JDK1.1
@see #getAddress()
"
      end

      operation 7448706 "setPort"
	public explicit_return_type "void"
	nparams 1
	  param in name "iport" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the port number on the remote host to which this datagram
is being sent.
@param iport the port number
@since   JDK1.1
@see #getPort()
"
      end

      operation 7448834 "setSocketAddress"
	public explicit_return_type "void"
	nparams 1
	  param inout name "address" type class_ref 962178 // SocketAddress
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SocketAddress (usually IP address + port number) of the remote
host to which this datagram is being sent.

@param address the {@code SocketAddress}
@throws  IllegalArgumentException if address is null or is a
         SocketAddress subclass not supported by this socket

@since 1.4
@see #getSocketAddress
"
      end

      operation 7448962 "getSocketAddress"
	public return_type class_ref 962178 // SocketAddress
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SocketAddress (usually IP address + port number) of the remote
host that this packet is being sent to or is coming from.

@return the {@code SocketAddress}
@since 1.4
@see #setSocketAddress
"
      end

      operation 7449090 "setData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the data buffer for this packet. With the offset of
this DatagramPacket set to 0, and the length set to
the length of {@code buf}.

@param buf the buffer to set for this packet.

@exception NullPointerException if the argument is null.

@see #getLength
@see #getData

@since JDK1.1
"
      end

      operation 7449218 "setLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the length for this packet. The length of the packet is
the number of bytes from the packet's data buffer that will be
sent, or the number of bytes of the packet's data buffer that
will be used for receiving data. The length must be lesser or
equal to the offset plus the length of the packet's buffer.

@param length the length to set for this packet.

@exception IllegalArgumentException if the length is negative
of if the length is greater than the packet's data buffer
length.

@see #getLength
@see #setData

@since JDK1.1
"
      end

      operation 7449346 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Perform class load-time initializations.
"
      end
    end

    class 672514 "HttpURLConnection"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A URLConnection with support for HTTP-specific features. See
<A HREF=\"http://www.w3.org/pub/WWW/Protocols/\"> the spec </A> for
details.
<p>

Each HttpURLConnection instance is used to make a single request
but the underlying network connection to the HTTP server may be
transparently shared by other instances. Calling the close() methods
on the InputStream or OutputStream of an HttpURLConnection
after a request may free network resources associated with this
instance but has no effect on any shared persistent connection.
Calling the disconnect() method may close the underlying socket
if a persistent connection is otherwise idle at that time.

<P>The HTTP protocol handler has a few settings that can be accessed through
System Properties. This covers
<a href=\"doc-files/net-properties.html#Proxies\">Proxy settings</a> as well as
<a href=\"doc-files/net-properties.html#MiscHTTP\"> various other settings</a>.
</P>
<p>
<b>Security permissions</b>
<p>
If a security manager is installed, and if a method is called which results in an
attempt to open a connection, the caller must possess either:-
<ul><li>a \"connect\" {@link SocketPermission} to the host/port combination of the
destination URL or</li>
<li>a {@link URLPermission} that permits this request.</li>
</ul><p>
If automatic redirection is enabled, and this request is redirected to another
destination, then the caller must also have permission to connect to the
redirected host/URL.

@see     java.net.HttpURLConnection#disconnect()
@since JDK1.1
"
      classrelation 3245698 // <generalisation>
	relation 3245698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3245698 // <generalisation>
	  b parent class_ref 783746 // URLConnection
      end

      classrelation 3245826 // method (<unidirectional association>)
	relation 3245826 --->
	  a role_name "method" init_value " \"GET\"" protected
	    comment " instance variables 

The HTTP method (GET,POST,PUT,etc.).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3245826 // method (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1765634 "chunkLength"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The chunk-length when using chunked encoding streaming mode for output.
A value of {@code -1} means chunked encoding is disabled for output.
@since 1.5

"
      end

      attribute 1765762 "fixedContentLength"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The fixed content-length when using fixed-length streaming mode.
A value of {@code -1} means fixed-length streaming mode is disabled
for output.

<P> <B>NOTE:</B> {@link #fixedContentLengthLong} is recommended instead
of this field, as it allows larger content lengths to be set.

@since 1.5

"
      end

      attribute 1765890 "fixedContentLengthLong"
	protected explicit_type "long"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The fixed content-length when using fixed-length streaming mode.
A value of {@code -1} means fixed-length streaming mode is disabled
for output.

@since 1.7

"
      end

      operation 7474562 "getHeaderFieldKey"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key for the {@code n}<sup>th</sup> header field.
Some implementations may treat the {@code 0}<sup>th</sup>
header field as special, i.e. as the status line returned by the HTTP
server. In this case, {@link #getHeaderField(int) getHeaderField(0)} returns the status
line, but {@code getHeaderFieldKey(0)} returns null.

@param   n   an index, where {@code n >=0}.
@return  the key for the {@code n}<sup>th</sup> header field,
         or {@code null} if the key does not exist.
"
      end

      operation 7474690 "setFixedLengthStreamingMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "contentLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used to enable streaming of a HTTP request body
without internal buffering, when the content length is known in
advance.
<p>
An exception will be thrown if the application
attempts to write more data than the indicated
content-length, or if the application closes the OutputStream
before writing the indicated amount.
<p>
When output streaming is enabled, authentication
and redirection cannot be handled automatically.
A HttpRetryException will be thrown when reading
the response if authentication or redirection are required.
This exception can be queried for the details of the error.
<p>
This method must be called before the URLConnection is connected.
<p>
<B>NOTE:</B> {@link #setFixedLengthStreamingMode(long)} is recommended
instead of this method as it allows larger content lengths to be set.

@param   contentLength The number of bytes which will be written
         to the OutputStream.

@throws  IllegalStateException if URLConnection is already connected
         or if a different streaming mode is already enabled.

@throws  IllegalArgumentException if a content length less than
         zero is specified.

@see     #setChunkedStreamingMode(int)
@since 1.5
"
      end

      operation 7474818 "setFixedLengthStreamingMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "contentLength" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used to enable streaming of a HTTP request body
without internal buffering, when the content length is known in
advance.

<P> An exception will be thrown if the application attempts to write
more data than the indicated content-length, or if the application
closes the OutputStream before writing the indicated amount.

<P> When output streaming is enabled, authentication and redirection
cannot be handled automatically. A {@linkplain HttpRetryException} will
be thrown when reading the response if authentication or redirection
are required. This exception can be queried for the details of the
error.

<P> This method must be called before the URLConnection is connected.

<P> The content length set by invoking this method takes precedence
over any value set by {@link #setFixedLengthStreamingMode(int)}.

@param  contentLength
        The number of bytes which will be written to the OutputStream.

@throws  IllegalStateException
         if URLConnection is already connected or if a different
         streaming mode is already enabled.

@throws  IllegalArgumentException
         if a content length less than zero is specified.

@since 1.7
"
      end

      attribute 1766018 "DEFAULT_CHUNK_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4096"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Default chunk size (including chunk header) if not specified;
we want to keep this in sync with the one defined in
sun.net.www.http.ChunkedOutputStream

"
      end

      operation 7474946 "setChunkedStreamingMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "chunklen" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is used to enable streaming of a HTTP request body
without internal buffering, when the content length is <b>not</b>
known in advance. In this mode, chunked transfer encoding
is used to send the request body. Note, not all HTTP servers
support this mode.
<p>
When output streaming is enabled, authentication
and redirection cannot be handled automatically.
A HttpRetryException will be thrown when reading
the response if authentication or redirection are required.
This exception can be queried for the details of the error.
<p>
This method must be called before the URLConnection is connected.

@param   chunklen The number of bytes to write in each chunk.
         If chunklen is less than or equal to zero, a default
         value will be used.

@throws  IllegalStateException if URLConnection is already connected
         or if a different streaming mode is already enabled.

@see     #setFixedLengthStreamingMode(int)
@since 1.5
"
      end

      operation 7475074 "getHeaderField"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value for the {@code n}<sup>th</sup> header field.
Some implementations may treat the {@code 0}<sup>th</sup>
header field as special, i.e. as the status line returned by the HTTP
server.
<p>
This method can be used in conjunction with the
{@link #getHeaderFieldKey getHeaderFieldKey} method to iterate through all
the headers in the message.

@param   n   an index, where {@code n>=0}.
@return  the value of the {@code n}<sup>th</sup> header field,
         or {@code null} if the value does not exist.
@see     java.net.HttpURLConnection#getHeaderFieldKey(int)
"
      end

      attribute 1766146 "responseCode"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An {@code int} representing the three digit HTTP Status-Code.
<ul>
<li> 1xx: Informational
<li> 2xx: Success
<li> 3xx: Redirection
<li> 4xx: Client Error
<li> 5xx: Server Error
</ul>

"
      end

      classrelation 3245954 // responseMessage (<unidirectional association>)
	relation 3245954 --->
	  a role_name "responseMessage" init_value " null" protected
	    comment "
The HTTP response message.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3245954 // responseMessage (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1766274 "followRedirects"
	class_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " static variables 
 do we automatically follow redirects? The default is true. 
"
      end

      attribute 1766402 "instanceFollowRedirects"
	protected explicit_type "boolean"
	init_value " followRedirects"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If {@code true}, the protocol will automatically follow redirects.
If {@code false}, the protocol will not automatically follow
redirects.
<p>
This field is set by the {@code setInstanceFollowRedirects}
method. Its value is returned by the {@code getInstanceFollowRedirects}
method.
<p>
Its default value is based on the value of the static followRedirects
at HttpURLConnection construction time.

@see     java.net.HttpURLConnection#setInstanceFollowRedirects(boolean)
@see     java.net.HttpURLConnection#getInstanceFollowRedirects()
@see     java.net.HttpURLConnection#setFollowRedirects(boolean)

"
      end

      classrelation 3246082 // methods (<unidirectional association>)
	relation 3246082 --->
	  a role_name "methods" multiplicity "[]" init_value " {
        \"GET\", \"POST\", \"HEAD\", \"OPTIONS\", \"PUT\", \"DELETE\", \"TRACE\"
    }" class_relation const_relation private
	    comment " valid HTTP methods 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3246082 // methods (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7475202 "HttpURLConnection"
	protected explicit_return_type ""
	nparams 1
	  param inout name "u" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the HttpURLConnection.
@param u the URL
"
      end

      operation 7475330 "setFollowRedirects"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "set" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether HTTP redirects  (requests with response code 3xx) should
be automatically followed by this class.  True by default.  Applets
cannot change this variable.
<p>
If there is a security manager, this method first calls
the security manager's {@code checkSetFactory} method
to ensure the operation is allowed.
This could result in a SecurityException.

@param set a {@code boolean} indicating whether or not
to follow HTTP redirects.
@exception  SecurityException  if a security manager exists and its
            {@code checkSetFactory} method doesn't
            allow the operation.
@see        SecurityManager#checkSetFactory
@see #getFollowRedirects()
"
      end

      operation 7475458 "getFollowRedirects"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code boolean} indicating
whether or not HTTP redirects (3xx) should
be automatically followed.

@return {@code true} if HTTP redirects should
be automatically followed, {@code false} if not.
@see #setFollowRedirects(boolean)
"
      end

      operation 7475586 "setInstanceFollowRedirects"
	public explicit_return_type "void"
	nparams 1
	  param inout name "followRedirects" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether HTTP redirects (requests with response code 3xx) should
be automatically followed by this {@code HttpURLConnection}
instance.
<p>
The default value comes from followRedirects, which defaults to
true.

@param followRedirects a {@code boolean} indicating
whether or not to follow HTTP redirects.

@see    java.net.HttpURLConnection#instanceFollowRedirects
@see #getInstanceFollowRedirects
@since 1.3
"
      end

      operation 7475714 "getInstanceFollowRedirects"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code HttpURLConnection}'s
{@code instanceFollowRedirects} field.

@return  the value of this {@code HttpURLConnection}'s
         {@code instanceFollowRedirects} field.
@see     java.net.HttpURLConnection#instanceFollowRedirects
@see #setInstanceFollowRedirects(boolean)
@since 1.3
"
      end

      operation 7475842 "setRequestMethod"
	public explicit_return_type "void"
	nparams 1
	  param inout name "method" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 966658 // ProtocolException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the method for the URL request, one of:
<UL>
 <LI>GET
 <LI>POST
 <LI>HEAD
 <LI>OPTIONS
 <LI>PUT
 <LI>DELETE
 <LI>TRACE
</UL> are legal, subject to protocol restrictions.  The default
method is GET.

@param method the HTTP method
@exception ProtocolException if the method cannot be reset or if
             the requested method isn't valid for HTTP.
@exception SecurityException if a security manager is set and the
             method is \"TRACE\", but the \"allowHttpTrace\"
             NetPermission is not granted.
@see #getRequestMethod()
"
      end

      operation 7475970 "getRequestMethod"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the request method.
@return the HTTP request method
@see #setRequestMethod(java.lang.String)
"
      end

      operation 7476098 "getResponseCode"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the status code from an HTTP response message.
For example, in the case of the following status lines:
<PRE>
HTTP/1.0 200 OK
HTTP/1.0 401 Unauthorized
</PRE>
It will return 200 and 401 respectively.
Returns -1 if no code can be discerned
from the response (i.e., the response is not valid HTTP).
@throws IOException if an error occurred connecting to the server.
@return the HTTP Status-Code, or -1
"
      end

      operation 7476226 "getResponseMessage"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the HTTP response message, if any, returned along with the
response code from a server.  From responses like:
<PRE>
HTTP/1.0 200 OK
HTTP/1.0 404 Not Found
</PRE>
Extracts the Strings \"OK\" and \"Not Found\" respectively.
Returns null if none could be discerned from the responses
(the result was not valid HTTP).
@throws IOException if an error occurred connecting to the server.
@return the HTTP response message, or {@code null}
"
      end

      operation 7476354 "getHeaderFieldDate"
	public explicit_return_type "long"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "Default" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
      end

      operation 7476482 "disconnect"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that other requests to the server
are unlikely in the near future. Calling disconnect()
should not imply that this HttpURLConnection
instance can be reused for other requests.
"
      end

      operation 7476610 "usingProxy"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if the connection is going through a proxy.
@return a boolean indicating if the connection is
using a proxy.
"
      end

      operation 7476738 "getPermission"
	public return_type class_ref 257538 // Permission
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link SocketPermission} object representing the
permission necessary to connect to the destination host and port.

@exception IOException if an error occurs while computing
           the permission.

@return a {@code SocketPermission} object representing the
        permission necessary to connect to the destination
        host and port.
"
      end

      operation 7476866 "getErrorStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the error stream if the connection failed
but the server sent useful data nonetheless. The
typical example is when an HTTP server responds
with a 404, which will cause a FileNotFoundException
to be thrown in connect, but the server sent an HTML
help page with suggestions as to what to do.

<p>This method will not cause a connection to be initiated.  If
the connection was not connected, or if the server did not have
an error while connecting or if the server had an error but
no error data was sent, this method will return null. This is
the default.

@return an error stream if any, null if there have been no
errors, the connection is not connected or the server sent no
useful data.
"
      end

      attribute 1766530 "HTTP_OK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The response codes for HTTP, as of version 1.1.

 REMIND: do we want all these??
 Others not here that we do want??
 2XX: generally \"OK\" 

HTTP Status-Code 200: OK.

"
      end

      attribute 1766658 "HTTP_CREATED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 201"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 201: Created.

"
      end

      attribute 1766786 "HTTP_ACCEPTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 202"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 202: Accepted.

"
      end

      attribute 1766914 "HTTP_NOT_AUTHORITATIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 203"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 203: Non-Authoritative Information.

"
      end

      attribute 1767042 "HTTP_NO_CONTENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 204"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 204: No Content.

"
      end

      attribute 1767170 "HTTP_RESET"
	class_attribute const_attribute public explicit_type "int"
	init_value " 205"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 205: Reset Content.

"
      end

      attribute 1767298 "HTTP_PARTIAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 206"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 206: Partial Content.

"
      end

      attribute 1767426 "HTTP_MULT_CHOICE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 300"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 3XX: relocation/redirect 

HTTP Status-Code 300: Multiple Choices.

"
      end

      attribute 1767554 "HTTP_MOVED_PERM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 301"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 301: Moved Permanently.

"
      end

      attribute 1767682 "HTTP_MOVED_TEMP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 302"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 302: Temporary Redirect.

"
      end

      attribute 1767810 "HTTP_SEE_OTHER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 303"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 303: See Other.

"
      end

      attribute 1767938 "HTTP_NOT_MODIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 304"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 304: Not Modified.

"
      end

      attribute 1768066 "HTTP_USE_PROXY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 305"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 305: Use Proxy.

"
      end

      attribute 1768194 "HTTP_BAD_REQUEST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 4XX: client error 

HTTP Status-Code 400: Bad Request.

"
      end

      attribute 1768322 "HTTP_UNAUTHORIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 401"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 401: Unauthorized.

"
      end

      attribute 1768450 "HTTP_PAYMENT_REQUIRED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 402"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 402: Payment Required.

"
      end

      attribute 1768578 "HTTP_FORBIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 403"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 403: Forbidden.

"
      end

      attribute 1768706 "HTTP_NOT_FOUND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 404"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 404: Not Found.

"
      end

      attribute 1768834 "HTTP_BAD_METHOD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 405"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 405: Method Not Allowed.

"
      end

      attribute 1768962 "HTTP_NOT_ACCEPTABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 406"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 406: Not Acceptable.

"
      end

      attribute 1769090 "HTTP_PROXY_AUTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 407"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 407: Proxy Authentication Required.

"
      end

      attribute 1769218 "HTTP_CLIENT_TIMEOUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 408"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 408: Request Time-Out.

"
      end

      attribute 1769346 "HTTP_CONFLICT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 409"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 409: Conflict.

"
      end

      attribute 1769474 "HTTP_GONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 410"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 410: Gone.

"
      end

      attribute 1769602 "HTTP_LENGTH_REQUIRED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 411"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 411: Length Required.

"
      end

      attribute 1769730 "HTTP_PRECON_FAILED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 412"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 412: Precondition Failed.

"
      end

      attribute 1769858 "HTTP_ENTITY_TOO_LARGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 413"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 413: Request Entity Too Large.

"
      end

      attribute 1769986 "HTTP_REQ_TOO_LONG"
	class_attribute const_attribute public explicit_type "int"
	init_value " 414"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 414: Request-URI Too Large.

"
      end

      attribute 1770114 "HTTP_UNSUPPORTED_TYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 415"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 415: Unsupported Media Type.

"
      end

      attribute 1770242 "HTTP_SERVER_ERROR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 500"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Deprecated
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 5XX: server error 

HTTP Status-Code 500: Internal Server Error.
@deprecated   it is misplaced and shouldn't have existed.

"
      end

      attribute 1770370 "HTTP_INTERNAL_ERROR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 500"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 500: Internal Server Error.

"
      end

      attribute 1770498 "HTTP_NOT_IMPLEMENTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 501"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 501: Not Implemented.

"
      end

      attribute 1770626 "HTTP_BAD_GATEWAY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 502"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 502: Bad Gateway.

"
      end

      attribute 1770754 "HTTP_UNAVAILABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 503"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 503: Service Unavailable.

"
      end

      attribute 1770882 "HTTP_GATEWAY_TIMEOUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 504"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 504: Gateway Timeout.

"
      end

      attribute 1771010 "HTTP_VERSION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 505"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "HTTP Status-Code 505: HTTP Version Not Supported.

"
      end
    end

    class 672642 "URISyntaxException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown to indicate that a string could not be parsed as a
URI reference.

@author Mark Reinhold
@see URI
@since 1.4
"
      classrelation 3264258 // <generalisation>
	relation 3264258 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3264258 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1793026 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2137979680897488891L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3264386 // input (<unidirectional association>)
	relation 3264386 --->
	  a role_name "input" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3264386 // input (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1793154 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7557762 "URISyntaxException"
	public explicit_return_type ""
	nparams 3
	  param inout name "input" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance from the given input string, reason, and error
index.

@param  input   The input string
@param  reason  A string explaining why the input could not be parsed
@param  index   The index at which the parse error occurred,
                or {@code -1} if the index is not known

@throws  NullPointerException
         If either the input or reason strings are {@code null}

@throws  IllegalArgumentException
         If the error index is less than {@code -1}
"
      end

      operation 7557890 "URISyntaxException"
	public explicit_return_type ""
	nparams 2
	  param inout name "input" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance from the given input string and reason.  The
resulting object will have an error index of {@code -1}.

@param  input   The input string
@param  reason  A string explaining why the input could not be parsed

@throws  NullPointerException
         If either the input or reason strings are {@code null}
"
      end

      operation 7558018 "getInput"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the input string.

@return  The input string
"
      end

      operation 7558146 "getReason"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string explaining why the input string could not be parsed.

@return  The reason string
"
      end

      operation 7558274 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an index into the input string of the position at which the
parse error occurred, or {@code -1} if this position is not known.

@return  The error index
"
      end

      operation 7558402 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing the parse error.  The resulting string
consists of the reason string followed by a colon character
({@code ':'}), a space, and the input string.  If the error index is
defined then the string {@code \" at index \"} followed by the index, in
decimal, is inserted after the reason string and before the colon
character.

@return  A string describing the parse error
"
      end
    end

    class 783746 "URLConnection"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The abstract class {@code URLConnection} is the superclass
of all classes that represent a communications link between the
application and a URL. Instances of this class can be used both to
read from and to write to the resource referenced by the URL. In
general, creating a connection to a URL is a multistep process:

<center><table border=2 summary=\"Describes the process of creating a connection to a URL: openConnection() and connect() over time.\">
<tr><th>{@code openConnection()}</th>
    <th>{@code connect()}</th></tr>
<tr><td>Manipulate parameters that affect the connection to the remote
        resource.</td>
    <td>Interact with the resource; query header fields and
        contents.</td></tr>
</table>
----------------------------&gt;
<br>time</center>

<ol>
<li>The connection object is created by invoking the
    {@code openConnection} method on a URL.
<li>The setup parameters and general request properties are manipulated.
<li>The actual connection to the remote object is made, using the
   {@code connect} method.
<li>The remote object becomes available. The header fields and the contents
    of the remote object can be accessed.
</ol>
<p>
The setup parameters are modified using the following methods:
<ul>
  <li>{@code setAllowUserInteraction}
  <li>{@code setDoInput}
  <li>{@code setDoOutput}
  <li>{@code setIfModifiedSince}
  <li>{@code setUseCaches}
</ul>
<p>
and the general request properties are modified using the method:
<ul>
  <li>{@code setRequestProperty}
</ul>
<p>
Default values for the {@code AllowUserInteraction} and
{@code UseCaches} parameters can be set using the methods
{@code setDefaultAllowUserInteraction} and
{@code setDefaultUseCaches}.
<p>
Each of the above {@code set} methods has a corresponding
{@code get} method to retrieve the value of the parameter or
general request property. The specific parameters and general
request properties that are applicable are protocol specific.
<p>
The following methods are used to access the header fields and
the contents after the connection is made to the remote object:
<ul>
  <li>{@code getContent}
  <li>{@code getHeaderField}
  <li>{@code getInputStream}
  <li>{@code getOutputStream}
</ul>
<p>
Certain header fields are accessed frequently. The methods:
<ul>
  <li>{@code getContentEncoding}
  <li>{@code getContentLength}
  <li>{@code getContentType}
  <li>{@code getDate}
  <li>{@code getExpiration}
  <li>{@code getLastModifed}
</ul>
<p>
provide convenient access to these fields. The
{@code getContentType} method is used by the
{@code getContent} method to determine the type of the remote
object; subclasses may find it convenient to override the
{@code getContentType} method.
<p>
In the common case, all of the pre-connection parameters and
general request properties can be ignored: the pre-connection
parameters and request properties default to sensible values. For
most clients of this interface, there are only two interesting
methods: {@code getInputStream} and {@code getContent},
which are mirrored in the {@code URL} class by convenience methods.
<p>
More information on the request properties and header fields of
an {@code http} connection can be found at:
<blockquote><pre>
<a href=\"http://www.ietf.org/rfc/rfc2616.txt\">http://www.ietf.org/rfc/rfc2616.txt</a>
</pre></blockquote>

Invoking the {@code close()} methods on the {@code InputStream} or {@code OutputStream} of an
{@code URLConnection} after a request may free network resources associated with this
instance, unless particular protocol specifications specify different behaviours
for it.

@author  James Gosling
@see     java.net.URL#openConnection()
@see     java.net.URLConnection#connect()
@see     java.net.URLConnection#getContent()
@see     java.net.URLConnection#getContentEncoding()
@see     java.net.URLConnection#getContentLength()
@see     java.net.URLConnection#getContentType()
@see     java.net.URLConnection#getDate()
@see     java.net.URLConnection#getExpiration()
@see     java.net.URLConnection#getHeaderField(int)
@see     java.net.URLConnection#getHeaderField(java.lang.String)
@see     java.net.URLConnection#getInputStream()
@see     java.net.URLConnection#getLastModified()
@see     java.net.URLConnection#getOutputStream()
@see     java.net.URLConnection#setAllowUserInteraction(boolean)
@see     java.net.URLConnection#setDefaultUseCaches(boolean)
@see     java.net.URLConnection#setDoInput(boolean)
@see     java.net.URLConnection#setDoOutput(boolean)
@see     java.net.URLConnection#setIfModifiedSince(long)
@see     java.net.URLConnection#setRequestProperty(java.lang.String, java.lang.String)
@see     java.net.URLConnection#setUseCaches(boolean)
@since   JDK1.0
"
      classrelation 3244674 // url (<unidirectional association>)
	relation 3244674 --->
	  a role_name "url" protected
	    comment "
The URL represents the remote object on the World Wide Web to
which this connection is opened.
<p>
The value of this field can be accessed by the
{@code getURL} method.
<p>
The default value of this variable is the value of the URL
argument in the {@code URLConnection} constructor.

@see     java.net.URLConnection#getURL()
@see     java.net.URLConnection#url

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3244674 // url (<unidirectional association>)
	  b parent class_ref 243458 // URL
      end

      attribute 1764098 "doInput"
	protected explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This variable is set by the {@code setDoInput} method. Its
value is returned by the {@code getDoInput} method.
<p>
A URL connection can be used for input and/or output. Setting the
{@code doInput} flag to {@code true} indicates that
the application intends to read data from the URL connection.
<p>
The default value of this field is {@code true}.

@see     java.net.URLConnection#getDoInput()
@see     java.net.URLConnection#setDoInput(boolean)

"
      end

      attribute 1764226 "doOutput"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This variable is set by the {@code setDoOutput} method. Its
value is returned by the {@code getDoOutput} method.
<p>
A URL connection can be used for input and/or output. Setting the
{@code doOutput} flag to {@code true} indicates
that the application intends to write data to the URL connection.
<p>
The default value of this field is {@code false}.

@see     java.net.URLConnection#getDoOutput()
@see     java.net.URLConnection#setDoOutput(boolean)

"
      end

      attribute 1764354 "defaultAllowUserInteraction"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1764482 "allowUserInteraction"
	protected explicit_type "boolean"
	init_value " defaultAllowUserInteraction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If {@code true}, this {@code URL} is being examined in
a context in which it makes sense to allow user interactions such
as popping up an authentication dialog. If {@code false},
then no user interaction is allowed.
<p>
The value of this field can be set by the
{@code setAllowUserInteraction} method.
Its value is returned by the
{@code getAllowUserInteraction} method.
Its default value is the value of the argument in the last invocation
of the {@code setDefaultAllowUserInteraction} method.

@see     java.net.URLConnection#getAllowUserInteraction()
@see     java.net.URLConnection#setAllowUserInteraction(boolean)
@see     java.net.URLConnection#setDefaultAllowUserInteraction(boolean)

"
      end

      attribute 1764610 "defaultUseCaches"
	class_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1764738 "useCaches"
	protected explicit_type "boolean"
	init_value " defaultUseCaches"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If {@code true}, the protocol is allowed to use caching
whenever it can. If {@code false}, the protocol must always
try to get a fresh copy of the object.
<p>
This field is set by the {@code setUseCaches} method. Its
value is returned by the {@code getUseCaches} method.
<p>
Its default value is the value given in the last invocation of the
{@code setDefaultUseCaches} method.

@see     java.net.URLConnection#setUseCaches(boolean)
@see     java.net.URLConnection#getUseCaches()
@see     java.net.URLConnection#setDefaultUseCaches(boolean)

"
      end

      attribute 1764866 "ifModifiedSince"
	protected explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Some protocols support skipping the fetching of the object unless
the object has been modified more recently than a certain time.
<p>
A nonzero value gives a time as the number of milliseconds since
January 1, 1970, GMT. The object is fetched only if it has been
modified more recently than that time.
<p>
This variable is set by the {@code setIfModifiedSince}
method. Its value is returned by the
{@code getIfModifiedSince} method.
<p>
The default value of this field is {@code 0}, indicating
that the fetching must always occur.

@see     java.net.URLConnection#getIfModifiedSince()
@see     java.net.URLConnection#setIfModifiedSince(long)

"
      end

      attribute 1764994 "connected"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If {@code false}, this connection object has not created a
communications link to the specified URL. If {@code true},
the communications link has been established.

"
      end

      attribute 1765122 "connectTimeout"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@since 1.5

"
      end

      attribute 1765250 "readTimeout"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1765378 "requests"
	private explicit_type "MessageHeader"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@since 1.6

"
      end

      classrelation 3244802 // fileNameMap (<unidirectional association>)
	relation 3244802 --->
	  a role_name "fileNameMap" class_relation private
	    comment "
@since   JDK1.1

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3244802 // fileNameMap (<unidirectional association>)
	  b parent class_ref 965506 // FileNameMap
      end

      attribute 1765506 "fileNameMapLoaded"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@since 1.2.2

"
      end

      operation 7466754 "getFileNameMap"
	class_operation public return_type class_ref 965506 // FileNameMap
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads filename map (a mimetable) from a data file. It will
first try to load the user-specific table, defined
by &quot;content.types.user.table&quot; property. If that fails,
it tries to load the default built-in table.

@return the FileNameMap
@since 1.2
@see #setFileNameMap(java.net.FileNameMap)
"
      end

      operation 7466882 "setFileNameMap"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 965506 // FileNameMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the FileNameMap.
<p>
If there is a security manager, this method first calls
the security manager's {@code checkSetFactory} method
to ensure the operation is allowed.
This could result in a SecurityException.

@param map the FileNameMap to be set
@exception  SecurityException  if a security manager exists and its
            {@code checkSetFactory} method doesn't allow the operation.
@see        SecurityManager#checkSetFactory
@see #getFileNameMap()
@since 1.2
"
      end

      operation 7467010 "connect"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a communications link to the resource referenced by this
URL, if such a connection has not already been established.
<p>
If the {@code connect} method is called when the connection
has already been opened (indicated by the {@code connected}
field having the value {@code true}), the call is ignored.
<p>
URLConnection objects go through two phases: first they are
created, then they are connected.  After being created, and
before being connected, various options can be specified
(e.g., doInput and UseCaches).  After connecting, it is an
error to try to set them.  Operations that depend on being
connected, like getContentLength, will implicitly perform the
connection, if necessary.

@throws SocketTimeoutException if the timeout expires before
              the connection can be established
@exception  IOException  if an I/O error occurs while opening the
              connection.
@see java.net.URLConnection#connected
@see #getConnectTimeout()
@see #setConnectTimeout(int)
"
      end

      operation 7467138 "setConnectTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a specified timeout value, in milliseconds, to be used
when opening a communications link to the resource referenced
by this URLConnection.  If the timeout expires before the
connection can be established, a
java.net.SocketTimeoutException is raised. A timeout of zero is
interpreted as an infinite timeout.

<p> Some non-standard implementation of this method may ignore
the specified timeout. To see the connect timeout set, please
call getConnectTimeout().

@param timeout an {@code int} that specifies the connect
              timeout value in milliseconds
@throws IllegalArgumentException if the timeout parameter is negative

@see #getConnectTimeout()
@see #connect()
@since 1.5
"
      end

      operation 7467266 "getConnectTimeout"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns setting for connect timeout.
<p>
0 return implies that the option is disabled
(i.e., timeout of infinity).

@return an {@code int} that indicates the connect timeout
        value in milliseconds
@see #setConnectTimeout(int)
@see #connect()
@since 1.5
"
      end

      operation 7467394 "setReadTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the read timeout to a specified timeout, in
milliseconds. A non-zero value specifies the timeout when
reading from Input stream when a connection is established to a
resource. If the timeout expires before there is data available
for read, a java.net.SocketTimeoutException is raised. A
timeout of zero is interpreted as an infinite timeout.

<p> Some non-standard implementation of this method ignores the
specified timeout. To see the read timeout set, please call
getReadTimeout().

@param timeout an {@code int} that specifies the timeout
value to be used in milliseconds
@throws IllegalArgumentException if the timeout parameter is negative

@see #getReadTimeout()
@see InputStream#read()
@since 1.5
"
      end

      operation 7467522 "getReadTimeout"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns setting for read timeout. 0 return implies that the
option is disabled (i.e., timeout of infinity).

@return an {@code int} that indicates the read timeout
        value in milliseconds

@see #setReadTimeout(int)
@see InputStream#read()
@since 1.5
"
      end

      operation 7467650 "URLConnection"
	protected explicit_return_type ""
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a URL connection to the specified URL. A connection to
the object referenced by the URL is not created.

@param   url   the specified URL.
"
      end

      operation 7467778 "getURL"
	public return_type class_ref 243458 // URL
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code URLConnection}'s {@code URL}
field.

@return  the value of this {@code URLConnection}'s {@code URL}
         field.
@see     java.net.URLConnection#url
"
      end

      operation 7467906 "getContentLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code content-length} header field.
<P>
<B>Note</B>: {@link #getContentLengthLong() getContentLengthLong()}
should be preferred over this method, since it returns a {@code long}
instead and is therefore more portable.</P>

@return  the content length of the resource that this connection's URL
         references, {@code -1} if the content length is not known,
         or if the content length is greater than Integer.MAX_VALUE.
"
      end

      operation 7468034 "getContentLengthLong"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code content-length} header field as a
long.

@return  the content length of the resource that this connection's URL
         references, or {@code -1} if the content length is
         not known.
@since 7.0
"
      end

      operation 7468162 "getContentType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code content-type} header field.

@return  the content type of the resource that the URL references,
         or {@code null} if not known.
@see     java.net.URLConnection#getHeaderField(java.lang.String)
"
      end

      operation 7468290 "getContentEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code content-encoding} header field.

@return  the content encoding of the resource that the URL references,
         or {@code null} if not known.
@see     java.net.URLConnection#getHeaderField(java.lang.String)
"
      end

      operation 7468418 "getExpiration"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code expires} header field.

@return  the expiration date of the resource that this URL references,
         or 0 if not known. The value is the number of milliseconds since
         January 1, 1970 GMT.
@see     java.net.URLConnection#getHeaderField(java.lang.String)
"
      end

      operation 7468546 "getDate"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code date} header field.

@return  the sending date of the resource that the URL references,
         or {@code 0} if not known. The value returned is the
         number of milliseconds since January 1, 1970 GMT.
@see     java.net.URLConnection#getHeaderField(java.lang.String)
"
      end

      operation 7468674 "getLastModified"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code last-modified} header field.
The result is the number of milliseconds since January 1, 1970 GMT.

@return  the date the resource referenced by this
         {@code URLConnection} was last modified, or 0 if not known.
@see     java.net.URLConnection#getHeaderField(java.lang.String)
"
      end

      operation 7468802 "getHeaderField"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the named header field.
<p>
If called on a connection that sets the same header multiple times
with possibly different values, only the last value is returned.


@param   name   the name of a header field.
@return  the value of the named header field, or {@code null}
         if there is no such field in the header.
"
      end

      operation 7468930 "getHeaderFields"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,List<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable Map of the header fields.
The Map keys are Strings that represent the
response-header field names. Each Map value is an
unmodifiable List of Strings that represents
the corresponding field values.

@return a Map of header fields
@since 1.4
"
      end

      operation 7469058 "getHeaderFieldInt"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "Default" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the named field parsed as a number.
<p>
This form of {@code getHeaderField} exists because some
connection types (e.g., {@code http-ng}) have pre-parsed
headers. Classes for that connection type can override this method
and short-circuit the parsing.

@param   name      the name of the header field.
@param   Default   the default value.
@return  the value of the named field, parsed as an integer. The
         {@code Default} value is returned if the field is
         missing or malformed.
"
      end

      operation 7469186 "getHeaderFieldLong"
	public explicit_return_type "long"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "Default" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the named field parsed as a number.
<p>
This form of {@code getHeaderField} exists because some
connection types (e.g., {@code http-ng}) have pre-parsed
headers. Classes for that connection type can override this method
and short-circuit the parsing.

@param   name      the name of the header field.
@param   Default   the default value.
@return  the value of the named field, parsed as a long. The
         {@code Default} value is returned if the field is
         missing or malformed.
@since 7.0
"
      end

      operation 7469314 "getHeaderFieldDate"
	public explicit_return_type "long"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "Default" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Returns the value of the named field parsed as date.
The result is the number of milliseconds since January 1, 1970 GMT
represented by the named field.
<p>
This form of {@code getHeaderField} exists because some
connection types (e.g., {@code http-ng}) have pre-parsed
headers. Classes for that connection type can override this method
and short-circuit the parsing.

@param   name     the name of the header field.
@param   Default   a default value.
@return  the value of the field, parsed as a date. The value of the
         {@code Default} argument is returned if the field is
         missing or malformed.
"
      end

      operation 7469442 "getHeaderFieldKey"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key for the {@code n}<sup>th</sup> header field.
It returns {@code null} if there are fewer than {@code n+1} fields.

@param   n   an index, where {@code n>=0}
@return  the key for the {@code n}<sup>th</sup> header field,
         or {@code null} if there are fewer than {@code n+1}
         fields.
"
      end

      operation 7469570 "getHeaderField"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value for the {@code n}<sup>th</sup> header field.
It returns {@code null} if there are fewer than
{@code n+1}fields.
<p>
This method can be used in conjunction with the
{@link #getHeaderFieldKey(int) getHeaderFieldKey} method to iterate through all
the headers in the message.

@param   n   an index, where {@code n>=0}
@return  the value of the {@code n}<sup>th</sup> header field
         or {@code null} if there are fewer than {@code n+1} fields
@see     java.net.URLConnection#getHeaderFieldKey(int)
"
      end

      operation 7469698 "getContent"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of this URL connection.
<p>
This method first determines the content type of the object by
calling the {@code getContentType} method. If this is
the first time that the application has seen that specific content
type, a content handler for that content type is created:
<ol>
<li>If the application has set up a content handler factory instance
    using the {@code setContentHandlerFactory} method, the
    {@code createContentHandler} method of that instance is called
    with the content type as an argument; the result is a content
    handler for that content type.
<li>If no content handler factory has yet been set up, or if the
    factory's {@code createContentHandler} method returns
    {@code null}, then the application loads the class named:
    <blockquote><pre>
        sun.net.www.content.&lt;<i>contentType</i>&gt;
    </pre></blockquote>
    where &lt;<i>contentType</i>&gt; is formed by taking the
    content-type string, replacing all slash characters with a
    {@code period} ('.'), and all other non-alphanumeric characters
    with the underscore character '{@code _}'. The alphanumeric
    characters are specifically the 26 uppercase ASCII letters
    '{@code A}' through '{@code Z}', the 26 lowercase ASCII
    letters '{@code a}' through '{@code z}', and the 10 ASCII
    digits '{@code 0}' through '{@code 9}'. If the specified
    class does not exist, or is not a subclass of
    {@code ContentHandler}, then an
    {@code UnknownServiceException} is thrown.
</ol>

@return     the object fetched. The {@code instanceof} operator
              should be used to determine the specific kind of object
              returned.
@exception  IOException              if an I/O error occurs while
              getting the content.
@exception  UnknownServiceException  if the protocol does not support
              the content type.
@see        java.net.ContentHandlerFactory#createContentHandler(java.lang.String)
@see        java.net.URLConnection#getContentType()
@see        java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)
"
      end

      operation 7469826 "getContent"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "classes" type class_ref 130818 // Class
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of this URL connection.

@param classes the {@code Class} array
indicating the requested types
@return     the object fetched that is the first match of the type
              specified in the classes array. null if none of
              the requested types are supported.
              The {@code instanceof} operator should be used to
              determine the specific kind of object returned.
@exception  IOException              if an I/O error occurs while
              getting the content.
@exception  UnknownServiceException  if the protocol does not support
              the content type.
@see        java.net.URLConnection#getContent()
@see        java.net.ContentHandlerFactory#createContentHandler(java.lang.String)
@see        java.net.URLConnection#getContent(java.lang.Class[])
@see        java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)
@since 1.3
"
      end

      operation 7469954 "getPermission"
	public return_type class_ref 257538 // Permission
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a permission object representing the permission
necessary to make the connection represented by this
object. This method returns null if no permission is
required to make the connection. By default, this method
returns {@code java.security.AllPermission}. Subclasses
should override this method and return the permission
that best represents the permission required to make a
a connection to the URL. For example, a {@code URLConnection}
representing a {@code file:} URL would return a
{@code java.io.FilePermission} object.

<p>The permission returned may dependent upon the state of the
connection. For example, the permission before connecting may be
different from that after connecting. For example, an HTTP
sever, say foo.com, may redirect the connection to a different
host, say bar.com. Before connecting the permission returned by
the connection will represent the permission needed to connect
to foo.com, while the permission returned after connecting will
be to bar.com.

<p>Permissions are generally used for two purposes: to protect
caches of objects obtained through URLConnections, and to check
the right of a recipient to learn about a particular URL. In
the first case, the permission should be obtained
<em>after</em> the object has been obtained. For example, in an
HTTP connection, this will represent the permission to connect
to the host from which the data was ultimately fetched. In the
second case, the permission should be obtained and tested
<em>before</em> connecting.

@return the permission object representing the permission
necessary to make the connection represented by this
URLConnection.

@exception IOException if the computation of the permission
requires network or file I/O and an exception occurs while
computing it.
"
      end

      operation 7470082 "getInputStream"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an input stream that reads from this open connection.

A SocketTimeoutException can be thrown when reading from the
returned input stream if the read timeout expires before data
is available for read.

@return     an input stream that reads from this open connection.
@exception  IOException              if an I/O error occurs while
              creating the input stream.
@exception  UnknownServiceException  if the protocol does not support
              input.
@see #setReadTimeout(int)
@see #getReadTimeout()
"
      end

      operation 7470210 "getOutputStream"
	public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an output stream that writes to this connection.

@return     an output stream that writes to this connection.
@exception  IOException              if an I/O error occurs while
              creating the output stream.
@exception  UnknownServiceException  if the protocol does not support
              output.
"
      end

      operation 7470338 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code String} representation of this URL connection.

@return  a string representation of this {@code URLConnection}.
"
      end

      operation 7470466 "setDoInput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "doinput" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the {@code doInput} field for this
{@code URLConnection} to the specified value.
<p>
A URL connection can be used for input and/or output.  Set the DoInput
flag to true if you intend to use the URL connection for input,
false if not.  The default is true.

@param   doinput   the new value.
@throws IllegalStateException if already connected
@see     java.net.URLConnection#doInput
@see #getDoInput()
"
      end

      operation 7470594 "getDoInput"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code URLConnection}'s
{@code doInput} flag.

@return  the value of this {@code URLConnection}'s
         {@code doInput} flag.
@see     #setDoInput(boolean)
"
      end

      operation 7470722 "setDoOutput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dooutput" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the {@code doOutput} field for this
{@code URLConnection} to the specified value.
<p>
A URL connection can be used for input and/or output.  Set the DoOutput
flag to true if you intend to use the URL connection for output,
false if not.  The default is false.

@param   dooutput   the new value.
@throws IllegalStateException if already connected
@see #getDoOutput()
"
      end

      operation 7470850 "getDoOutput"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code URLConnection}'s
{@code doOutput} flag.

@return  the value of this {@code URLConnection}'s
         {@code doOutput} flag.
@see     #setDoOutput(boolean)
"
      end

      operation 7470978 "setAllowUserInteraction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "allowuserinteraction" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the value of the {@code allowUserInteraction} field of
this {@code URLConnection}.

@param   allowuserinteraction   the new value.
@throws IllegalStateException if already connected
@see     #getAllowUserInteraction()
"
      end

      operation 7471106 "getAllowUserInteraction"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the {@code allowUserInteraction} field for
this object.

@return  the value of the {@code allowUserInteraction} field for
         this object.
@see     #setAllowUserInteraction(boolean)
"
      end

      operation 7471234 "setDefaultAllowUserInteraction"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "defaultallowuserinteraction" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the default value of the
{@code allowUserInteraction} field for all future
{@code URLConnection} objects to the specified value.

@param   defaultallowuserinteraction   the new value.
@see     #getDefaultAllowUserInteraction()
"
      end

      operation 7471362 "getDefaultAllowUserInteraction"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value of the {@code allowUserInteraction}
field.
<p>
Ths default is \"sticky\", being a part of the static state of all
URLConnections.  This flag applies to the next, and all following
URLConnections that are created.

@return  the default value of the {@code allowUserInteraction}
         field.
@see     #setDefaultAllowUserInteraction(boolean)
"
      end

      operation 7471490 "setUseCaches"
	public explicit_return_type "void"
	nparams 1
	  param inout name "usecaches" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the {@code useCaches} field of this
{@code URLConnection} to the specified value.
<p>
Some protocols do caching of documents.  Occasionally, it is important
to be able to \"tunnel through\" and ignore the caches (e.g., the
\"reload\" button in a browser).  If the UseCaches flag on a connection
is true, the connection is allowed to use whatever caches it can.
 If false, caches are to be ignored.
 The default value comes from DefaultUseCaches, which defaults to
true.

@param usecaches a {@code boolean} indicating whether
or not to allow caching
@throws IllegalStateException if already connected
@see #getUseCaches()
"
      end

      operation 7471618 "getUseCaches"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code URLConnection}'s
{@code useCaches} field.

@return  the value of this {@code URLConnection}'s
         {@code useCaches} field.
@see #setUseCaches(boolean)
"
      end

      operation 7471746 "setIfModifiedSince"
	public explicit_return_type "void"
	nparams 1
	  param in name "ifmodifiedsince" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the {@code ifModifiedSince} field of
this {@code URLConnection} to the specified value.

@param   ifmodifiedsince   the new value.
@throws IllegalStateException if already connected
@see     #getIfModifiedSince()
"
      end

      operation 7471874 "getIfModifiedSince"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this object's {@code ifModifiedSince} field.

@return  the value of this object's {@code ifModifiedSince} field.
@see #setIfModifiedSince(long)
"
      end

      operation 7472002 "getDefaultUseCaches"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value of a {@code URLConnection}'s
{@code useCaches} flag.
<p>
Ths default is \"sticky\", being a part of the static state of all
URLConnections.  This flag applies to the next, and all following
URLConnections that are created.

@return  the default value of a {@code URLConnection}'s
         {@code useCaches} flag.
@see     #setDefaultUseCaches(boolean)
"
      end

      operation 7472130 "setDefaultUseCaches"
	public explicit_return_type "void"
	nparams 1
	  param inout name "defaultusecaches" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the default value of the {@code useCaches} field to the
specified value.

@param   defaultusecaches   the new value.
@see     #getDefaultUseCaches()
"
      end

      operation 7472258 "setRequestProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the general request property. If a property with the key already
exists, overwrite its value with the new value.

<p> NOTE: HTTP requires all request properties which can
legally have multiple instances with the same key
to use a comma-separated list syntax which enables multiple
properties to be appended into a single property.

@param   key     the keyword by which the request is known
                 (e.g., \"{@code Accept}\").
@param   value   the value associated with it.
@throws IllegalStateException if already connected
@throws NullPointerException if key is <CODE>null</CODE>
@see #getRequestProperty(java.lang.String)
"
      end

      operation 7472386 "addRequestProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a general request property specified by a
key-value pair.  This method will not overwrite
existing values associated with the same key.

@param   key     the keyword by which the request is known
                 (e.g., \"{@code Accept}\").
@param   value  the value associated with it.
@throws IllegalStateException if already connected
@throws NullPointerException if key is null
@see #getRequestProperties()
@since 1.4
"
      end

      operation 7472514 "getRequestProperty"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the named general request property for this
connection.

@param key the keyword by which the request is known (e.g., \"Accept\").
@return  the value of the named general request property for this
          connection. If key is null, then null is returned.
@throws IllegalStateException if already connected
@see #setRequestProperty(java.lang.String, java.lang.String)
"
      end

      operation 7472642 "getRequestProperties"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,List<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable Map of general request
properties for this connection. The Map keys
are Strings that represent the request-header
field names. Each Map value is a unmodifiable List
of Strings that represents the corresponding
field values.

@return  a Map of the general request properties for this connection.
@throws IllegalStateException if already connected
@since 1.4
"
      end

      operation 7472770 "setDefaultRequestProperty"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the default value of a general request property. When a
{@code URLConnection} is created, it is initialized with
these properties.

@param   key     the keyword by which the request is known
                 (e.g., \"{@code Accept}\").
@param   value   the value associated with the key.

@see java.net.URLConnection#setRequestProperty(java.lang.String,java.lang.String)

@deprecated The instance specific setRequestProperty method
should be used after an appropriate instance of URLConnection
is obtained. Invoking this method will have no effect.

@see #getDefaultRequestProperty(java.lang.String)
"
      end

      operation 7472898 "getDefaultRequestProperty"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the value of the default request property. Default request
properties are set for every connection.

@param key the keyword by which the request is known (e.g., \"Accept\").
@return  the value of the default request property
for the specified key.

@see java.net.URLConnection#getRequestProperty(java.lang.String)

@deprecated The instance specific getRequestProperty method
should be used after an appropriate instance of URLConnection
is obtained.

@see #setDefaultRequestProperty(java.lang.String, java.lang.String)
"
      end

      classrelation 3244930 // factory (<unidirectional association>)
	relation 3244930 --->
	  a role_name "factory" class_relation package
	    comment "
The ContentHandler factory.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3244930 // factory (<unidirectional association>)
	  b parent class_ref 964098 // ContentHandlerFactory
      end

      operation 7473026 "setContentHandlerFactory"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fac" type class_ref 964098 // ContentHandlerFactory
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code ContentHandlerFactory} of an
application. It can be called at most once by an application.
<p>
The {@code ContentHandlerFactory} instance is used to
construct a content handler from a content type
<p>
If there is a security manager, this method first calls
the security manager's {@code checkSetFactory} method
to ensure the operation is allowed.
This could result in a SecurityException.

@param      fac   the desired factory.
@exception  Error  if the factory has already been defined.
@exception  SecurityException  if a security manager exists and its
            {@code checkSetFactory} method doesn't allow the operation.
@see        java.net.ContentHandlerFactory
@see        java.net.URLConnection#getContent()
@see        SecurityManager#checkSetFactory
"
      end

      classrelation 3245058 // handlers (<unidirectional association>)
	relation 3245058 --->
	  a role_name "handlers" init_value " new Hashtable<>()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ContentHandler> ${name}${value};
"
	    classrelation_ref 3245058 // handlers (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      operation 7473154 "getContentHandler"
	package return_type class_ref 963970 // ContentHandler
	nparams 0
	nexceptions 1
	  exception class_ref 966402 // UnknownServiceException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Content Handler appropriate for this connection.
"
      end

      operation 7473282 "stripOffParameters"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "contentType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Media types are in the format: type/subtype*(; parameter).
For looking up the content handler, we should ignore those
parameters.
"
      end

      classrelation 3245186 // contentClassPrefix (<unidirectional association>)
	relation 3245186 --->
	  a role_name "contentClassPrefix" init_value " \"sun.net.www.content\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3245186 // contentClassPrefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3245314 // contentPathProp (<unidirectional association>)
	relation 3245314 --->
	  a role_name "contentPathProp" init_value " \"java.content.handler.pkgs\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3245314 // contentPathProp (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7473410 "lookupContentHandlerClassFor"
	private return_type class_ref 963970 // ContentHandler
	nparams 1
	  param inout name "contentType" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 193282 // InstantiationException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks for a content handler in a user-defineable set of places.
By default it looks in sun.net.www.content, but users can define a
vertical-bar delimited set of class prefixes to search through in
addition by defining the java.content.handler.pkgs property.
The class name must be of the form:
<pre>
    {package-prefix}.{major}.{minor}
e.g.
    YoyoDyne.experimental.text.plain
</pre>
"
      end

      operation 7473538 "typeToPackageName"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "contentType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to map a MIME content type into an equivalent
pair of class name components.  For example: \"text/html\" would
be returned as \"text.html\"
"
      end

      operation 7473666 "getContentHandlerPkgPrefixes"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a vertical bar separated list of package prefixes for potential
content handlers.  Tries to get the java.content.handler.pkgs property
to use as a set of package prefixes to search.  Whether or not
that property has been defined, the sun.net.www.content is always
the last one on the returned package list.
"
      end

      operation 7473794 "guessContentTypeFromName"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "fname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to determine the content type of an object, based
on the specified \"file\" component of a URL.
This is a convenience method that can be used by
subclasses that override the {@code getContentType} method.

@param   fname   a filename.
@return  a guess as to what the content type of the object is,
         based upon its file name.
@see     java.net.URLConnection#getContentType()
"
      end

      operation 7473922 "guessContentTypeFromStream"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to determine the type of an input stream based on the
characters at the beginning of the input stream. This method can
be used by subclasses that override the
{@code getContentType} method.
<p>
Ideally, this routine would not be needed. But many
{@code http} servers return the incorrect content type; in
addition, there are many nonstandard extensions. Direct inspection
of the bytes to determine the content type is often more accurate
than believing the content type claimed by the {@code http} server.

@param      is   an input stream that supports marks.
@return     a guess at the content type, or {@code null} if none
            can be determined.
@exception  IOException  if an I/O error occurs while reading the
              input stream.
@see        java.io.InputStream#mark(int)
@see        java.io.InputStream#markSupported()
@see        java.net.URLConnection#getContentType()
"
      end

      operation 7474050 "checkfpx"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check for FlashPix image data in InputStream is.  Return true if
the stream has FlashPix data, false otherwise.  Before calling this
method, the stream should have already been checked to be sure it
contains Microsoft Structured Storage data.
"
      end

      operation 7474178 "readBytes"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "c" explicit_type "int"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to read the specified number of bytes from the stream
Returns -1, If EOF is reached before len bytes are read, returns 0
otherwise
"
      end

      operation 7474306 "skipForward"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "is" type class_ref 146434 // InputStream
	  param in name "toSkip" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips through the specified number of bytes from the stream
until either EOF is reached, or the specified
number of bytes have been skipped
"
      end
    end

    class 783874 "URI"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a Uniform Resource Identifier (URI) reference.

<p> Aside from some minor deviations noted below, an instance of this
class represents a URI reference as defined by
<a href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform
Resource Identifiers (URI): Generic Syntax</i></a>, amended by <a
href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for
Literal IPv6 Addresses in URLs</i></a>. The Literal IPv6 address format
also supports scope_ids. The syntax and usage of scope_ids is described
<a href=\"Inet6Address.html#scoped\">here</a>.
This class provides constructors for creating URI instances from
their components or by parsing their string forms, methods for accessing the
various components of an instance, and methods for normalizing, resolving,
and relativizing URI instances.  Instances of this class are immutable.


<h3> URI syntax and components </h3>

At the highest level a URI reference (hereinafter simply \"URI\") in string
form has the syntax

<blockquote>
[<i>scheme</i><b>{@code :}</b>]<i>scheme-specific-part</i>[<b>{@code #}</b><i>fragment</i>]
</blockquote>

where square brackets [...] delineate optional components and the characters
<b>{@code :}</b> and <b>{@code #}</b> stand for themselves.

<p> An <i>absolute</i> URI specifies a scheme; a URI that is not absolute is
said to be <i>relative</i>.  URIs are also classified according to whether
they are <i>opaque</i> or <i>hierarchical</i>.

<p> An <i>opaque</i> URI is an absolute URI whose scheme-specific part does
not begin with a slash character ({@code '/'}).  Opaque URIs are not
subject to further parsing.  Some examples of opaque URIs are:

<blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
<tr><td>{@code mailto:java-net@java.sun.com}<td></tr>
<tr><td>{@code news:comp.lang.java}<td></tr>
<tr><td>{@code urn:isbn:096139210x}</td></tr>
</table></blockquote>

<p> A <i>hierarchical</i> URI is either an absolute URI whose
scheme-specific part begins with a slash character, or a relative URI, that
is, a URI that does not specify a scheme.  Some examples of hierarchical
URIs are:

<blockquote>
{@code http://java.sun.com/j2se/1.3/}<br>
{@code docs/guide/collections/designfaq.html#28}<br>
{@code ../../../demo/jfc/SwingSet2/src/SwingSet2.java}<br>
{@code file:///~/calendar}
</blockquote>

<p> A hierarchical URI is subject to further parsing according to the syntax

<blockquote>
[<i>scheme</i><b>{@code :}</b>][<b>{@code //}</b><i>authority</i>][<i>path</i>][<b>{@code ?}</b><i>query</i>][<b>{@code #}</b><i>fragment</i>]
</blockquote>

where the characters <b>{@code :}</b>, <b>{@code /}</b>,
<b>{@code ?}</b>, and <b>{@code #}</b> stand for themselves.  The
scheme-specific part of a hierarchical URI consists of the characters
between the scheme and fragment components.

<p> The authority component of a hierarchical URI is, if specified, either
<i>server-based</i> or <i>registry-based</i>.  A server-based authority
parses according to the familiar syntax

<blockquote>
[<i>user-info</i><b>{@code @}</b>]<i>host</i>[<b>{@code :}</b><i>port</i>]
</blockquote>

where the characters <b>{@code @}</b> and <b>{@code :}</b> stand for
themselves.  Nearly all URI schemes currently in use are server-based.  An
authority component that does not parse in this way is considered to be
registry-based.

<p> The path component of a hierarchical URI is itself said to be absolute
if it begins with a slash character ({@code '/'}); otherwise it is
relative.  The path of a hierarchical URI that is either absolute or
specifies an authority is always absolute.

<p> All told, then, a URI instance has the following nine components:

<blockquote><table summary=\"Describes the components of a URI:scheme,scheme-specific-part,authority,user-info,host,port,path,query,fragment\">
<tr><th><i>Component</i></th><th><i>Type</i></th></tr>
<tr><td>scheme</td><td>{@code String}</td></tr>
<tr><td>scheme-specific-part&nbsp;&nbsp;&nbsp;&nbsp;</td><td>{@code String}</td></tr>
<tr><td>authority</td><td>{@code String}</td></tr>
<tr><td>user-info</td><td>{@code String}</td></tr>
<tr><td>host</td><td>{@code String}</td></tr>
<tr><td>port</td><td>{@code int}</td></tr>
<tr><td>path</td><td>{@code String}</td></tr>
<tr><td>query</td><td>{@code String}</td></tr>
<tr><td>fragment</td><td>{@code String}</td></tr>
</table></blockquote>

In a given instance any particular component is either <i>undefined</i> or
<i>defined</i> with a distinct value.  Undefined string components are
represented by {@code null}, while undefined integer components are
represented by {@code -1}.  A string component may be defined to have the
empty string as its value; this is not equivalent to that component being
undefined.

<p> Whether a particular component is or is not defined in an instance
depends upon the type of the URI being represented.  An absolute URI has a
scheme component.  An opaque URI has a scheme, a scheme-specific part, and
possibly a fragment, but has no other components.  A hierarchical URI always
has a path (though it may be empty) and a scheme-specific-part (which at
least contains the path), and may have any of the other components.  If the
authority component is present and is server-based then the host component
will be defined and the user-information and port components may be defined.


<h4> Operations on URI instances </h4>

The key operations supported by this class are those of
<i>normalization</i>, <i>resolution</i>, and <i>relativization</i>.

<p> <i>Normalization</i> is the process of removing unnecessary {@code \".\"}
and {@code \"..\"} segments from the path component of a hierarchical URI.
Each {@code \".\"} segment is simply removed.  A {@code \"..\"} segment is
removed only if it is preceded by a non-{@code \"..\"} segment.
Normalization has no effect upon opaque URIs.

<p> <i>Resolution</i> is the process of resolving one URI against another,
<i>base</i> URI.  The resulting URI is constructed from components of both
URIs in the manner specified by RFC&nbsp;2396, taking components from the
base URI for those not specified in the original.  For hierarchical URIs,
the path of the original is resolved against the path of the base and then
normalized.  The result, for example, of resolving

<blockquote>
{@code docs/guide/collections/designfaq.html#28}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;(1)
</blockquote>

against the base URI {@code http://java.sun.com/j2se/1.3/} is the result
URI

<blockquote>
{@code https://docs.oracle.com/javase/1.3/docs/guide/collections/designfaq.html#28}
</blockquote>

Resolving the relative URI

<blockquote>
{@code ../../../demo/jfc/SwingSet2/src/SwingSet2.java}&nbsp;&nbsp;&nbsp;&nbsp;(2)
</blockquote>

against this result yields, in turn,

<blockquote>
{@code http://java.sun.com/j2se/1.3/demo/jfc/SwingSet2/src/SwingSet2.java}
</blockquote>

Resolution of both absolute and relative URIs, and of both absolute and
relative paths in the case of hierarchical URIs, is supported.  Resolving
the URI {@code file:///~calendar} against any other URI simply yields the
original URI, since it is absolute.  Resolving the relative URI (2) above
against the relative base URI (1) yields the normalized, but still relative,
URI

<blockquote>
{@code demo/jfc/SwingSet2/src/SwingSet2.java}
</blockquote>

<p> <i>Relativization</i>, finally, is the inverse of resolution: For any
two normalized URIs <i>u</i> and&nbsp;<i>v</i>,

<blockquote>
  <i>u</i>{@code .relativize(}<i>u</i>{@code .resolve(}<i>v</i>{@code )).equals(}<i>v</i>{@code )}&nbsp;&nbsp;and<br>
  <i>u</i>{@code .resolve(}<i>u</i>{@code .relativize(}<i>v</i>{@code )).equals(}<i>v</i>{@code )}&nbsp;&nbsp;.<br>
</blockquote>

This operation is often useful when constructing a document containing URIs
that must be made relative to the base URI of the document wherever
possible.  For example, relativizing the URI

<blockquote>
{@code https://docs.oracle.com/javase/1.3/docs/guide/index.html}
</blockquote>

against the base URI

<blockquote>
{@code http://java.sun.com/j2se/1.3}
</blockquote>

yields the relative URI {@code docs/guide/index.html}.


<h4> Character categories </h4>

RFC&nbsp;2396 specifies precisely which characters are permitted in the
various components of a URI reference.  The following categories, most of
which are taken from that specification, are used below to describe these
constraints:

<blockquote><table cellspacing=2 summary=\"Describes categories alpha,digit,alphanum,unreserved,punct,reserved,escaped,and other\">
  <tr><th valign=top><i>alpha</i></th>
      <td>The US-ASCII alphabetic characters,
       {@code 'A'}&nbsp;through&nbsp;{@code 'Z'}
       and {@code 'a'}&nbsp;through&nbsp;{@code 'z'}</td></tr>
  <tr><th valign=top><i>digit</i></th>
      <td>The US-ASCII decimal digit characters,
      {@code '0'}&nbsp;through&nbsp;{@code '9'}</td></tr>
  <tr><th valign=top><i>alphanum</i></th>
      <td>All <i>alpha</i> and <i>digit</i> characters</td></tr>
  <tr><th valign=top><i>unreserved</i>&nbsp;&nbsp;&nbsp;&nbsp;</th>
      <td>All <i>alphanum</i> characters together with those in the string
       {@code \"_-!.~'()*\"}</td></tr>
  <tr><th valign=top><i>punct</i></th>
      <td>The characters in the string {@code \",;:$&+=\"}</td></tr>
  <tr><th valign=top><i>reserved</i></th>
      <td>All <i>punct</i> characters together with those in the string
       {@code \"?/[]@\"}</td></tr>
  <tr><th valign=top><i>escaped</i></th>
      <td>Escaped octets, that is, triplets consisting of the percent
          character ({@code '%'}) followed by two hexadecimal digits
          ({@code '0'}-{@code '9'}, {@code 'A'}-{@code 'F'}, and
          {@code 'a'}-{@code 'f'})</td></tr>
  <tr><th valign=top><i>other</i></th>
      <td>The Unicode characters that are not in the US-ASCII character set,
          are not control characters (according to the {@link
          java.lang.Character#isISOControl(char) Character.isISOControl}
          method), and are not space characters (according to the {@link
          java.lang.Character#isSpaceChar(char) Character.isSpaceChar}
          method)&nbsp;&nbsp;<i>(<b>Deviation from RFC 2396</b>, which is
          limited to US-ASCII)</i></td></tr>
</table></blockquote>

<p><a name=\"legal-chars\"></a> The set of all legal URI characters consists of
the <i>unreserved</i>, <i>reserved</i>, <i>escaped</i>, and <i>other</i>
characters.


<h4> Escaped octets, quotation, encoding, and decoding </h4>

RFC 2396 allows escaped octets to appear in the user-info, path, query, and
fragment components.  Escaping serves two purposes in URIs:

<ul>

  <li><p> To <i>encode</i> non-US-ASCII characters when a URI is required to
  conform strictly to RFC&nbsp;2396 by not containing any <i>other</i>
  characters.  </p></li>

  <li><p> To <i>quote</i> characters that are otherwise illegal in a
  component.  The user-info, path, query, and fragment components differ
  slightly in terms of which characters are considered legal and illegal.
  </p></li>

</ul>

These purposes are served in this class by three related operations:

<ul>

  <li><p><a name=\"encode\"></a> A character is <i>encoded</i> by replacing it
  with the sequence of escaped octets that represent that character in the
  UTF-8 character set.  The Euro currency symbol ({@code '\\u005Cu20AC'}),
  for example, is encoded as {@code \"%E2%82%AC\"}.  <i>(<b>Deviation from
  RFC&nbsp;2396</b>, which does not specify any particular character
  set.)</i> </p></li>

  <li><p><a name=\"quote\"></a> An illegal character is <i>quoted</i> simply by
  encoding it.  The space character, for example, is quoted by replacing it
  with {@code \"%20\"}.  UTF-8 contains US-ASCII, hence for US-ASCII
  characters this transformation has exactly the effect required by
  RFC&nbsp;2396. </p></li>

  <li><p><a name=\"decode\"></a>
  A sequence of escaped octets is <i>decoded</i> by
  replacing it with the sequence of characters that it represents in the
  UTF-8 character set.  UTF-8 contains US-ASCII, hence decoding has the
  effect of de-quoting any quoted US-ASCII characters as well as that of
  decoding any encoded non-US-ASCII characters.  If a <a
  href=\"../nio/charset/CharsetDecoder.html#ce\">decoding error</a> occurs
  when decoding the escaped octets then the erroneous octets are replaced by
  {@code '\\u005CuFFFD'}, the Unicode replacement character.  </p></li>

</ul>

These operations are exposed in the constructors and methods of this class
as follows:

<ul>

  <li><p> The {@linkplain #URI(java.lang.String) single-argument
  constructor} requires any illegal characters in its argument to be
  quoted and preserves any escaped octets and <i>other</i> characters that
  are present.  </p></li>

  <li><p> The {@linkplain
  #URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)
  multi-argument constructors} quote illegal characters as
  required by the components in which they appear.  The percent character
  ({@code '%'}) is always quoted by these constructors.  Any <i>other</i>
  characters are preserved.  </p></li>

  <li><p> The {@link #getRawUserInfo() getRawUserInfo}, {@link #getRawPath()
  getRawPath}, {@link #getRawQuery() getRawQuery}, {@link #getRawFragment()
  getRawFragment}, {@link #getRawAuthority() getRawAuthority}, and {@link
  #getRawSchemeSpecificPart() getRawSchemeSpecificPart} methods return the
  values of their corresponding components in raw form, without interpreting
  any escaped octets.  The strings returned by these methods may contain
  both escaped octets and <i>other</i> characters, and will not contain any
  illegal characters.  </p></li>

  <li><p> The {@link #getUserInfo() getUserInfo}, {@link #getPath()
  getPath}, {@link #getQuery() getQuery}, {@link #getFragment()
  getFragment}, {@link #getAuthority() getAuthority}, and {@link
  #getSchemeSpecificPart() getSchemeSpecificPart} methods decode any escaped
  octets in their corresponding components.  The strings returned by these
  methods may contain both <i>other</i> characters and illegal characters,
  and will not contain any escaped octets.  </p></li>

  <li><p> The {@link #toString() toString} method returns a URI string with
  all necessary quotation but which may contain <i>other</i> characters.
  </p></li>

  <li><p> The {@link #toASCIIString() toASCIIString} method returns a fully
  quoted and encoded URI string that does not contain any <i>other</i>
  characters.  </p></li>

</ul>


<h4> Identities </h4>

For any URI <i>u</i>, it is always the case that

<blockquote>
{@code new URI(}<i>u</i>{@code .toString()).equals(}<i>u</i>{@code )}&nbsp;.
</blockquote>

For any URI <i>u</i> that does not contain redundant syntax such as two
slashes before an empty authority (as in {@code file:///tmp/}&nbsp;) or a
colon following a host name but no port (as in
{@code http://java.sun.com:}&nbsp;), and that does not encode characters
except those that must be quoted, the following identities also hold:
<pre>
    new URI(<i>u</i>.getScheme(),
            <i>u</i>.getSchemeSpecificPart(),
            <i>u</i>.getFragment())
    .equals(<i>u</i>)</pre>
in all cases,
<pre>
    new URI(<i>u</i>.getScheme(),
            <i>u</i>.getUserInfo(), <i>u</i>.getAuthority(),
            <i>u</i>.getPath(), <i>u</i>.getQuery(),
            <i>u</i>.getFragment())
    .equals(<i>u</i>)</pre>
if <i>u</i> is hierarchical, and
<pre>
    new URI(<i>u</i>.getScheme(),
            <i>u</i>.getUserInfo(), <i>u</i>.getHost(), <i>u</i>.getPort(),
            <i>u</i>.getPath(), <i>u</i>.getQuery(),
            <i>u</i>.getFragment())
    .equals(<i>u</i>)</pre>
if <i>u</i> is hierarchical and has either no authority or a server-based
authority.


<h4> URIs, URLs, and URNs </h4>

A URI is a uniform resource <i>identifier</i> while a URL is a uniform
resource <i>locator</i>.  Hence every URL is a URI, abstractly speaking, but
not every URI is a URL.  This is because there is another subcategory of
URIs, uniform resource <i>names</i> (URNs), which name resources but do not
specify how to locate them.  The {@code mailto}, {@code news}, and
{@code isbn} URIs shown above are examples of URNs.

<p> The conceptual distinction between URIs and URLs is reflected in the
differences between this class and the {@link URL} class.

<p> An instance of this class represents a URI reference in the syntactic
sense defined by RFC&nbsp;2396.  A URI may be either absolute or relative.
A URI string is parsed according to the generic syntax without regard to the
scheme, if any, that it specifies.  No lookup of the host, if any, is
performed, and no scheme-dependent stream handler is constructed.  Equality,
hashing, and comparison are defined strictly in terms of the character
content of the instance.  In other words, a URI instance is little more than
a structured string that supports the syntactic, scheme-independent
operations of comparison, normalization, resolution, and relativization.

<p> An instance of the {@link URL} class, by contrast, represents the
syntactic components of a URL together with some of the information required
to access the resource that it describes.  A URL must be absolute, that is,
it must always specify a scheme.  A URL string is parsed according to its
scheme.  A stream handler is always established for a URL, and in fact it is
impossible to create a URL instance for a scheme for which no handler is
available.  Equality and hashing depend upon both the scheme and the
Internet address of the host, if any; comparison is not defined.  In other
words, a URL is a structured string that supports the syntactic operation of
resolution as well as the network I/O operations of looking up the host and
opening a connection to the specified resource.


@author Mark Reinhold
@since 1.4

@see <a href=\"http://www.ietf.org/rfc/rfc2279.txt\"><i>RFC&nbsp;2279: UTF-8, a
transformation format of ISO 10646</i></a>, <br><a
href=\"http://www.ietf.org/rfc/rfc2373.txt\"><i>RFC&nbsp;2373: IPv6 Addressing
Architecture</i></a>, <br><a
href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform
Resource Identifiers (URI): Generic Syntax</i></a>, <br><a
href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for
Literal IPv6 Addresses in URLs</i></a>, <br><a
href=\"URISyntaxException.html\">URISyntaxException</a>
"
      classrelation 3261954 // <realization>
	relation 3261954 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3261954 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3262082 // <realization>
	relation 3262082 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3262082 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1786626 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -6052424284110960213L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Note: Comments containing the word \"ASSERT\" indicate places where a
 throw of an InternalError should be replaced by an appropriate assertion
 statement once asserts are enabled in the build.
"
      end

      classrelation 3262210 // scheme (<unidirectional association>)
	relation 3262210 --->
	  a role_name "scheme" private
	    comment " -- Properties and components of this instance --
 Components of all URIs: [<scheme>:]<scheme-specific-part>[#<fragment>]
 null ==> relative URI"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3262210 // scheme (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3262338 // fragment (<unidirectional association>)
	relation 3262338 --->
	  a role_name "fragment" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3262338 // fragment (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3262466 // authority (<unidirectional association>)
	relation 3262466 --->
	  a role_name "authority" private
	    comment " Hierarchical URI components: [//<authority>]<path>[?<query>]
 Registry or server"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3262466 // authority (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3262594 // userInfo (<unidirectional association>)
	relation 3262594 --->
	  a role_name "userInfo" private
	    comment " Server-based authority: [<userInfo>@]<host>[:<port>]
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3262594 // userInfo (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3262722 // host (<unidirectional association>)
	relation 3262722 --->
	  a role_name "host" private
	    comment " null ==> registry-based"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3262722 // host (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1786754 "port"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -1 ==> undefined"
      end

      classrelation 3262850 // path (<unidirectional association>)
	relation 3262850 --->
	  a role_name "path" private
	    comment " Remaining components of hierarchical URIs
 null ==> opaque"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3262850 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3262978 // query (<unidirectional association>)
	relation 3262978 --->
	  a role_name "query" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3262978 // query (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3263106 // schemeSpecificPart (<unidirectional association>)
	relation 3263106 --->
	  a role_name "schemeSpecificPart" volatile private
	    comment " The remaining fields may be computed on demand
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3263106 // schemeSpecificPart (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1786882 "hash"
	volatile private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Zero ==> undefined"
      end

      classrelation 3263234 // decodedUserInfo (<unidirectional association>)
	relation 3263234 --->
	  a role_name "decodedUserInfo" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3263234 // decodedUserInfo (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3263362 // decodedAuthority (<unidirectional association>)
	relation 3263362 --->
	  a role_name "decodedAuthority" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3263362 // decodedAuthority (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3263490 // decodedPath (<unidirectional association>)
	relation 3263490 --->
	  a role_name "decodedPath" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3263490 // decodedPath (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3263618 // decodedQuery (<unidirectional association>)
	relation 3263618 --->
	  a role_name "decodedQuery" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3263618 // decodedQuery (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3263746 // decodedFragment (<unidirectional association>)
	relation 3263746 --->
	  a role_name "decodedFragment" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3263746 // decodedFragment (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3263874 // decodedSchemeSpecificPart (<unidirectional association>)
	relation 3263874 --->
	  a role_name "decodedSchemeSpecificPart" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3263874 // decodedSchemeSpecificPart (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3264002 // string (<unidirectional association>)
	relation 3264002 --->
	  a role_name "string" volatile private
	    comment "
The string form of this URI.

@serial

 The only serializable field"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3264002 // string (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7544706 "URI"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Constructors and factories --"
      end

      operation 7544834 "URI"
	public explicit_return_type ""
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Used internally

Constructs a URI by parsing the given string.

<p> This constructor parses the given string exactly as specified by the
grammar in <a
href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,
Appendix&nbsp;A, <b><i>except for the following deviations:</i></b> </p>

<ul>

  <li><p> An empty authority component is permitted as long as it is
  followed by a non-empty path, a query component, or a fragment
  component.  This allows the parsing of URIs such as
  {@code \"file:///foo/bar\"}, which seems to be the intent of
  RFC&nbsp;2396 although the grammar does not permit it.  If the
  authority component is empty then the user-information, host, and port
  components are undefined. </p></li>

  <li><p> Empty relative paths are permitted; this seems to be the
  intent of RFC&nbsp;2396 although the grammar does not permit it.  The
  primary consequence of this deviation is that a standalone fragment
  such as {@code \"#foo\"} parses as a relative URI with an empty path
  and the given fragment, and can be usefully <a
  href=\"#resolve-frag\">resolved</a> against a base URI.

  <li><p> IPv4 addresses in host components are parsed rigorously, as
  specified by <a
  href=\"http://www.ietf.org/rfc/rfc2732.txt\">RFC&nbsp;2732</a>: Each
  element of a dotted-quad address must contain no more than three
  decimal digits.  Each element is further constrained to have a value
  no greater than 255. </p></li>

  <li> <p> Hostnames in host components that comprise only a single
  domain label are permitted to start with an <i>alphanum</i>
  character. This seems to be the intent of <a
  href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>
  section&nbsp;3.2.2 although the grammar does not permit it. The
  consequence of this deviation is that the authority component of a
  hierarchical URI such as {@code s://123}, will parse as a server-based
  authority. </p></li>

  <li><p> IPv6 addresses are permitted for the host component.  An IPv6
  address must be enclosed in square brackets ({@code '['} and
  {@code ']'}) as specified by <a
  href=\"http://www.ietf.org/rfc/rfc2732.txt\">RFC&nbsp;2732</a>.  The
  IPv6 address itself must parse according to <a
  href=\"http://www.ietf.org/rfc/rfc2373.txt\">RFC&nbsp;2373</a>.  IPv6
  addresses are further constrained to describe no more than sixteen
  bytes of address information, a constraint implicit in RFC&nbsp;2373
  but not expressible in the grammar. </p></li>

  <li><p> Characters in the <i>other</i> category are permitted wherever
  RFC&nbsp;2396 permits <i>escaped</i> octets, that is, in the
  user-information, path, query, and fragment components, as well as in
  the authority component if the authority is registry-based.  This
  allows URIs to contain Unicode characters beyond those in the US-ASCII
  character set. </p></li>

</ul>

@param  str   The string to be parsed into a URI

@throws  NullPointerException
         If {@code str} is {@code null}

@throws  URISyntaxException
         If the given string violates RFC&nbsp;2396, as augmented
         by the above deviations
"
      end

      operation 7544962 "URI"
	public explicit_return_type ""
	nparams 7
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "userInfo" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "path" type class_ref 128130 // String
	  param inout name "query" type class_ref 128130 // String
	  param inout name "fragment" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a hierarchical URI from the given components.

<p> If a scheme is given then the path, if also given, must either be
empty or begin with a slash character ({@code '/'}).  Otherwise a
component of the new URI may be left undefined by passing {@code null}
for the corresponding parameter or, in the case of the {@code port}
parameter, by passing {@code -1}.

<p> This constructor first builds a URI string from the given components
according to the rules specified in <a
href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,
section&nbsp;5.2, step&nbsp;7: </p>

<ol>

  <li><p> Initially, the result string is empty. </p></li>

  <li><p> If a scheme is given then it is appended to the result,
  followed by a colon character ({@code ':'}).  </p></li>

  <li><p> If user information, a host, or a port are given then the
  string {@code \"//\"} is appended.  </p></li>

  <li><p> If user information is given then it is appended, followed by
  a commercial-at character ({@code '@'}).  Any character not in the
  <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
  categories is <a href=\"#quote\">quoted</a>.  </p></li>

  <li><p> If a host is given then it is appended.  If the host is a
  literal IPv6 address but is not enclosed in square brackets
  ({@code '['} and {@code ']'}) then the square brackets are added.
  </p></li>

  <li><p> If a port number is given then a colon character
  ({@code ':'}) is appended, followed by the port number in decimal.
  </p></li>

  <li><p> If a path is given then it is appended.  Any character not in
  the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
  categories, and not equal to the slash character ({@code '/'}) or the
  commercial-at character ({@code '@'}), is quoted.  </p></li>

  <li><p> If a query is given then a question-mark character
  ({@code '?'}) is appended, followed by the query.  Any character that
  is not a <a href=\"#legal-chars\">legal URI character</a> is quoted.
  </p></li>

  <li><p> Finally, if a fragment is given then a hash character
  ({@code '#'}) is appended, followed by the fragment.  Any character
  that is not a legal URI character is quoted.  </p></li>

</ol>

<p> The resulting URI string is then parsed as if by invoking the {@link
#URI(String)} constructor and then invoking the {@link
#parseServerAuthority()} method upon the result; this may cause a {@link
URISyntaxException} to be thrown.  </p>

@param   scheme    Scheme name
@param   userInfo  User name and authorization information
@param   host      Host name
@param   port      Port number
@param   path      Path
@param   query     Query
@param   fragment  Fragment

@throws URISyntaxException
        If both a scheme and a path are given but the path is relative,
        if the URI string constructed from the given components violates
        RFC&nbsp;2396, or if the authority component of the string is
        present but cannot be parsed as a server-based authority
"
      end

      operation 7545090 "URI"
	public explicit_return_type ""
	nparams 5
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "authority" type class_ref 128130 // String
	  param inout name "path" type class_ref 128130 // String
	  param inout name "query" type class_ref 128130 // String
	  param inout name "fragment" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a hierarchical URI from the given components.

<p> If a scheme is given then the path, if also given, must either be
empty or begin with a slash character ({@code '/'}).  Otherwise a
component of the new URI may be left undefined by passing {@code null}
for the corresponding parameter.

<p> This constructor first builds a URI string from the given components
according to the rules specified in <a
href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,
section&nbsp;5.2, step&nbsp;7: </p>

<ol>

  <li><p> Initially, the result string is empty.  </p></li>

  <li><p> If a scheme is given then it is appended to the result,
  followed by a colon character ({@code ':'}).  </p></li>

  <li><p> If an authority is given then the string {@code \"//\"} is
  appended, followed by the authority.  If the authority contains a
  literal IPv6 address then the address must be enclosed in square
  brackets ({@code '['} and {@code ']'}).  Any character not in the
  <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
  categories, and not equal to the commercial-at character
  ({@code '@'}), is <a href=\"#quote\">quoted</a>.  </p></li>

  <li><p> If a path is given then it is appended.  Any character not in
  the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>
  categories, and not equal to the slash character ({@code '/'}) or the
  commercial-at character ({@code '@'}), is quoted.  </p></li>

  <li><p> If a query is given then a question-mark character
  ({@code '?'}) is appended, followed by the query.  Any character that
  is not a <a href=\"#legal-chars\">legal URI character</a> is quoted.
  </p></li>

  <li><p> Finally, if a fragment is given then a hash character
  ({@code '#'}) is appended, followed by the fragment.  Any character
  that is not a legal URI character is quoted.  </p></li>

</ol>

<p> The resulting URI string is then parsed as if by invoking the {@link
#URI(String)} constructor and then invoking the {@link
#parseServerAuthority()} method upon the result; this may cause a {@link
URISyntaxException} to be thrown.  </p>

@param   scheme     Scheme name
@param   authority  Authority
@param   path       Path
@param   query      Query
@param   fragment   Fragment

@throws URISyntaxException
        If both a scheme and a path are given but the path is relative,
        if the URI string constructed from the given components violates
        RFC&nbsp;2396, or if the authority component of the string is
        present but cannot be parsed as a server-based authority
"
      end

      operation 7545218 "URI"
	public explicit_return_type ""
	nparams 4
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param inout name "path" type class_ref 128130 // String
	  param inout name "fragment" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a hierarchical URI from the given components.

<p> A component may be left undefined by passing {@code null}.

<p> This convenience constructor works as if by invoking the
seven-argument constructor as follows:

<blockquote>
{@code new} {@link #URI(String, String, String, int, String, String, String)
URI}{@code (scheme, null, host, -1, path, null, fragment);}
</blockquote>

@param   scheme    Scheme name
@param   host      Host name
@param   path      Path
@param   fragment  Fragment

@throws  URISyntaxException
         If the URI string constructed from the given components
         violates RFC&nbsp;2396
"
      end

      operation 7545346 "URI"
	public explicit_return_type ""
	nparams 3
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "ssp" type class_ref 128130 // String
	  param inout name "fragment" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a URI from the given components.

<p> A component may be left undefined by passing {@code null}.

<p> This constructor first builds a URI in string form using the given
components as follows:  </p>

<ol>

  <li><p> Initially, the result string is empty.  </p></li>

  <li><p> If a scheme is given then it is appended to the result,
  followed by a colon character ({@code ':'}).  </p></li>

  <li><p> If a scheme-specific part is given then it is appended.  Any
  character that is not a <a href=\"#legal-chars\">legal URI character</a>
  is <a href=\"#quote\">quoted</a>.  </p></li>

  <li><p> Finally, if a fragment is given then a hash character
  ({@code '#'}) is appended to the string, followed by the fragment.
  Any character that is not a legal URI character is quoted.  </p></li>

</ol>

<p> The resulting URI string is then parsed in order to create the new
URI instance as if by invoking the {@link #URI(String)} constructor;
this may cause a {@link URISyntaxException} to be thrown.  </p>

@param   scheme    Scheme name
@param   ssp       Scheme-specific part
@param   fragment  Fragment

@throws  URISyntaxException
         If the URI string constructed from the given components
         violates RFC&nbsp;2396
"
      end

      operation 7545474 "create"
	class_operation public return_type class_ref 783874 // URI
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a URI by parsing the given string.

<p> This convenience factory method works as if by invoking the {@link
#URI(String)} constructor; any {@link URISyntaxException} thrown by the
constructor is caught and wrapped in a new {@link
IllegalArgumentException} object, which is then thrown.

<p> This method is provided for use in situations where it is known that
the given string is a legal URI, for example for URI constants declared
within in a program, and so it would be considered a programming error
for the string not to parse as such.  The constructors, which throw
{@link URISyntaxException} directly, should be used situations where a
URI is being constructed from user input or from some other source that
may be prone to errors.  </p>

@param  str   The string to be parsed into a URI
@return The new URI

@throws  NullPointerException
         If {@code str} is {@code null}

@throws  IllegalArgumentException
         If the given string violates RFC&nbsp;2396
"
      end

      operation 7545602 "parseServerAuthority"
	public return_type class_ref 783874 // URI
	nparams 0
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Operations --

Attempts to parse this URI's authority component, if defined, into
user-information, host, and port components.

<p> If this URI's authority component has already been recognized as
being server-based then it will already have been parsed into
user-information, host, and port components.  In this case, or if this
URI has no authority component, this method simply returns this URI.

<p> Otherwise this method attempts once more to parse the authority
component into user-information, host, and port components, and throws
an exception describing why the authority component could not be parsed
in that way.

<p> This method is provided because the generic URI syntax specified in
<a href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>
cannot always distinguish a malformed server-based authority from a
legitimate registry-based authority.  It must therefore treat some
instances of the former as instances of the latter.  The authority
component in the URI string {@code \"//foo:bar\"}, for example, is not a
legal server-based authority but it is legal as a registry-based
authority.

<p> In many common situations, for example when working URIs that are
known to be either URNs or URLs, the hierarchical URIs being used will
always be server-based.  They therefore must either be parsed as such or
treated as an error.  In these cases a statement such as

<blockquote>
{@code URI }<i>u</i>{@code  = new URI(str).parseServerAuthority();}
</blockquote>

<p> can be used to ensure that <i>u</i> always refers to a URI that, if
it has an authority component, has a server-based authority with proper
user-information, host, and port components.  Invoking this method also
ensures that if the authority could not be parsed in that way then an
appropriate diagnostic message can be issued based upon the exception
that is thrown. </p>

@return  A URI whose authority field has been parsed
         as a server-based authority

@throws  URISyntaxException
         If the authority component of this URI is defined
         but cannot be parsed as a server-based authority
         according to RFC&nbsp;2396
"
      end

      operation 7545730 "normalize"
	public return_type class_ref 783874 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Normalizes this URI's path.

<p> If this URI is opaque, or if its path is already in normal form,
then this URI is returned.  Otherwise a new URI is constructed that is
identical to this URI except that its path is computed by normalizing
this URI's path in a manner consistent with <a
href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,
section&nbsp;5.2, step&nbsp;6, sub-steps&nbsp;c through&nbsp;f; that is:
</p>

<ol>

  <li><p> All {@code \".\"} segments are removed. </p></li>

  <li><p> If a {@code \"..\"} segment is preceded by a non-{@code \"..\"}
  segment then both of these segments are removed.  This step is
  repeated until it is no longer applicable. </p></li>

  <li><p> If the path is relative, and if its first segment contains a
  colon character ({@code ':'}), then a {@code \".\"} segment is
  prepended.  This prevents a relative URI with a path such as
  {@code \"a:b/c/d\"} from later being re-parsed as an opaque URI with a
  scheme of {@code \"a\"} and a scheme-specific part of {@code \"b/c/d\"}.
  <b><i>(Deviation from RFC&nbsp;2396)</i></b> </p></li>

</ol>

<p> A normalized path will begin with one or more {@code \"..\"} segments
if there were insufficient non-{@code \"..\"} segments preceding them to
allow their removal.  A normalized path will begin with a {@code \".\"}
segment if one was inserted by step 3 above.  Otherwise, a normalized
path will not contain any {@code \".\"} or {@code \"..\"} segments. </p>

@return  A URI equivalent to this URI,
         but whose path is in normal form
"
      end

      operation 7545858 "resolve"
	public return_type class_ref 783874 // URI
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves the given URI against this URI.

<p> If the given URI is already absolute, or if this URI is opaque, then
the given URI is returned.

<p><a name=\"resolve-frag\"></a> If the given URI's fragment component is
defined, its path component is empty, and its scheme, authority, and
query components are undefined, then a URI with the given fragment but
with all other components equal to those of this URI is returned.  This
allows a URI representing a standalone fragment reference, such as
{@code \"#foo\"}, to be usefully resolved against a base URI.

<p> Otherwise this method constructs a new hierarchical URI in a manner
consistent with <a
href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,
section&nbsp;5.2; that is: </p>

<ol>

  <li><p> A new URI is constructed with this URI's scheme and the given
  URI's query and fragment components. </p></li>

  <li><p> If the given URI has an authority component then the new URI's
  authority and path are taken from the given URI. </p></li>

  <li><p> Otherwise the new URI's authority component is copied from
  this URI, and its path is computed as follows: </p>

  <ol>

    <li><p> If the given URI's path is absolute then the new URI's path
    is taken from the given URI. </p></li>

    <li><p> Otherwise the given URI's path is relative, and so the new
    URI's path is computed by resolving the path of the given URI
    against the path of this URI.  This is done by concatenating all but
    the last segment of this URI's path, if any, with the given URI's
    path and then normalizing the result as if by invoking the {@link
    #normalize() normalize} method. </p></li>

  </ol></li>

</ol>

<p> The result of this method is absolute if, and only if, either this
URI is absolute or the given URI is absolute.  </p>

@param  uri  The URI to be resolved against this URI
@return The resulting URI

@throws  NullPointerException
         If {@code uri} is {@code null}
"
      end

      operation 7545986 "resolve"
	public return_type class_ref 783874 // URI
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new URI by parsing the given string and then resolving it
against this URI.

<p> This convenience method works as if invoking it were equivalent to
evaluating the expression {@link #resolve(java.net.URI)
resolve}{@code (URI.}{@link #create(String) create}{@code (str))}. </p>

@param  str   The string to be parsed into a URI
@return The resulting URI

@throws  NullPointerException
         If {@code str} is {@code null}

@throws  IllegalArgumentException
         If the given string violates RFC&nbsp;2396
"
      end

      operation 7546114 "relativize"
	public return_type class_ref 783874 // URI
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Relativizes the given URI against this URI.

<p> The relativization of the given URI against this URI is computed as
follows: </p>

<ol>

  <li><p> If either this URI or the given URI are opaque, or if the
  scheme and authority components of the two URIs are not identical, or
  if the path of this URI is not a prefix of the path of the given URI,
  then the given URI is returned. </p></li>

  <li><p> Otherwise a new relative hierarchical URI is constructed with
  query and fragment components taken from the given URI and with a path
  component computed by removing this URI's path from the beginning of
  the given URI's path. </p></li>

</ol>

@param  uri  The URI to be relativized against this URI
@return The resulting URI

@throws  NullPointerException
         If {@code uri} is {@code null}
"
      end

      operation 7546242 "toURL"
	public return_type class_ref 243458 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a URL from this URI.

<p> This convenience method works as if invoking it were equivalent to
evaluating the expression {@code new URL(this.toString())} after
first checking that this URI is absolute. </p>

@return  A URL constructed from this URI

@throws  IllegalArgumentException
         If this URL is not absolute

@throws  MalformedURLException
         If a protocol handler for the URL could not be found,
         or if some other error occurred while constructing the URL
"
      end

      operation 7546370 "getScheme"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Component access methods --

Returns the scheme component of this URI.

<p> The scheme component of a URI, if defined, only contains characters
in the <i>alphanum</i> category and in the string {@code \"-.+\"}.  A
scheme always starts with an <i>alpha</i> character. <p>

The scheme component of a URI cannot contain escaped octets, hence this
method does not perform any decoding.

@return  The scheme component of this URI,
         or {@code null} if the scheme is undefined
"
      end

      operation 7546498 "isAbsolute"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this URI is absolute.

<p> A URI is absolute if, and only if, it has a scheme component. </p>

@return  {@code true} if, and only if, this URI is absolute
"
      end

      operation 7546626 "isOpaque"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this URI is opaque.

<p> A URI is opaque if, and only if, it is absolute and its
scheme-specific part does not begin with a slash character ('/').
An opaque URI has a scheme, a scheme-specific part, and possibly
a fragment; all other components are undefined. </p>

@return  {@code true} if, and only if, this URI is opaque
"
      end

      operation 7546754 "getRawSchemeSpecificPart"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw scheme-specific part of this URI.  The scheme-specific
part is never undefined, though it may be empty.

<p> The scheme-specific part of a URI only contains legal URI
characters. </p>

@return  The raw scheme-specific part of this URI
         (never {@code null})
"
      end

      operation 7546882 "getSchemeSpecificPart"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decoded scheme-specific part of this URI.

<p> The string returned by this method is equal to that returned by the
{@link #getRawSchemeSpecificPart() getRawSchemeSpecificPart} method
except that all sequences of escaped octets are <a
href=\"#decode\">decoded</a>.  </p>

@return  The decoded scheme-specific part of this URI
         (never {@code null})
"
      end

      operation 7547010 "getRawAuthority"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw authority component of this URI.

<p> The authority component of a URI, if defined, only contains the
commercial-at character ({@code '@'}) and characters in the
<i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and <i>other</i>
categories.  If the authority is server-based then it is further
constrained to have valid user-information, host, and port
components. </p>

@return  The raw authority component of this URI,
         or {@code null} if the authority is undefined
"
      end

      operation 7547138 "getAuthority"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decoded authority component of this URI.

<p> The string returned by this method is equal to that returned by the
{@link #getRawAuthority() getRawAuthority} method except that all
sequences of escaped octets are <a href=\"#decode\">decoded</a>.  </p>

@return  The decoded authority component of this URI,
         or {@code null} if the authority is undefined
"
      end

      operation 7547266 "getRawUserInfo"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw user-information component of this URI.

<p> The user-information component of a URI, if defined, only contains
characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and
<i>other</i> categories. </p>

@return  The raw user-information component of this URI,
         or {@code null} if the user information is undefined
"
      end

      operation 7547394 "getUserInfo"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decoded user-information component of this URI.

<p> The string returned by this method is equal to that returned by the
{@link #getRawUserInfo() getRawUserInfo} method except that all
sequences of escaped octets are <a href=\"#decode\">decoded</a>.  </p>

@return  The decoded user-information component of this URI,
         or {@code null} if the user information is undefined
"
      end

      operation 7547522 "getHost"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the host component of this URI.

<p> The host component of a URI, if defined, will have one of the
following forms: </p>

<ul>

  <li><p> A domain name consisting of one or more <i>labels</i>
  separated by period characters ({@code '.'}), optionally followed by
  a period character.  Each label consists of <i>alphanum</i> characters
  as well as hyphen characters ({@code '-'}), though hyphens never
  occur as the first or last characters in a label. The rightmost
  label of a domain name consisting of two or more labels, begins
  with an <i>alpha</i> character. </li>

  <li><p> A dotted-quad IPv4 address of the form
  <i>digit</i>{@code +.}<i>digit</i>{@code +.}<i>digit</i>{@code +.}<i>digit</i>{@code +},
  where no <i>digit</i> sequence is longer than three characters and no
  sequence has a value larger than 255. </p></li>

  <li><p> An IPv6 address enclosed in square brackets ({@code '['} and
  {@code ']'}) and consisting of hexadecimal digits, colon characters
  ({@code ':'}), and possibly an embedded IPv4 address.  The full
  syntax of IPv6 addresses is specified in <a
  href=\"http://www.ietf.org/rfc/rfc2373.txt\"><i>RFC&nbsp;2373: IPv6
  Addressing Architecture</i></a>.  </p></li>

</ul>

The host component of a URI cannot contain escaped octets, hence this
method does not perform any decoding.

@return  The host component of this URI,
         or {@code null} if the host is undefined
"
      end

      operation 7547650 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port number of this URI.

<p> The port component of a URI, if defined, is a non-negative
integer. </p>

@return  The port component of this URI,
         or {@code -1} if the port is undefined
"
      end

      operation 7547778 "getRawPath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw path component of this URI.

<p> The path component of a URI, if defined, only contains the slash
character ({@code '/'}), the commercial-at character ({@code '@'}),
and characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>,
and <i>other</i> categories. </p>

@return  The path component of this URI,
         or {@code null} if the path is undefined
"
      end

      operation 7547906 "getPath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decoded path component of this URI.

<p> The string returned by this method is equal to that returned by the
{@link #getRawPath() getRawPath} method except that all sequences of
escaped octets are <a href=\"#decode\">decoded</a>.  </p>

@return  The decoded path component of this URI,
         or {@code null} if the path is undefined
"
      end

      operation 7548034 "getRawQuery"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw query component of this URI.

<p> The query component of a URI, if defined, only contains legal URI
characters. </p>

@return  The raw query component of this URI,
         or {@code null} if the query is undefined
"
      end

      operation 7548162 "getQuery"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decoded query component of this URI.

<p> The string returned by this method is equal to that returned by the
{@link #getRawQuery() getRawQuery} method except that all sequences of
escaped octets are <a href=\"#decode\">decoded</a>.  </p>

@return  The decoded query component of this URI,
         or {@code null} if the query is undefined
"
      end

      operation 7548290 "getRawFragment"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw fragment component of this URI.

<p> The fragment component of a URI, if defined, only contains legal URI
characters. </p>

@return  The raw fragment component of this URI,
         or {@code null} if the fragment is undefined
"
      end

      operation 7548418 "getFragment"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decoded fragment component of this URI.

<p> The string returned by this method is equal to that returned by the
{@link #getRawFragment() getRawFragment} method except that all
sequences of escaped octets are <a href=\"#decode\">decoded</a>.  </p>

@return  The decoded fragment component of this URI,
         or {@code null} if the fragment is undefined
"
      end

      operation 7548546 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ob" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Equality, comparison, hash code, toString, and serialization --

Tests this URI for equality with another object.

<p> If the given object is not a URI then this method immediately
returns {@code false}.

<p> For two URIs to be considered equal requires that either both are
opaque or both are hierarchical.  Their schemes must either both be
undefined or else be equal without regard to case. Their fragments
must either both be undefined or else be equal.

<p> For two opaque URIs to be considered equal, their scheme-specific
parts must be equal.

<p> For two hierarchical URIs to be considered equal, their paths must
be equal and their queries must either both be undefined or else be
equal.  Their authorities must either both be undefined, or both be
registry-based, or both be server-based.  If their authorities are
defined and are registry-based, then they must be equal.  If their
authorities are defined and are server-based, then their hosts must be
equal without regard to case, their port numbers must be equal, and
their user-information components must be equal.

<p> When testing the user-information, path, query, fragment, authority,
or scheme-specific parts of two URIs for equality, the raw forms rather
than the encoded forms of these components are compared and the
hexadecimal digits of escaped octets are compared without regard to
case.

<p> This method satisfies the general contract of the {@link
java.lang.Object#equals(Object) Object.equals} method. </p>

@param   ob   The object to which this object is to be compared

@return  {@code true} if, and only if, the given object is a URI that
         is identical to this URI
"
      end

      operation 7548674 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash-code value for this URI.  The hash code is based upon all
of the URI's components, and satisfies the general contract of the
{@link java.lang.Object#hashCode() Object.hashCode} method.

@return  A hash-code value for this URI
"
      end

      operation 7548802 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "that" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this URI to another object, which must be a URI.

<p> When comparing corresponding components of two URIs, if one
component is undefined but the other is defined then the first is
considered to be less than the second.  Unless otherwise noted, string
components are ordered according to their natural, case-sensitive
ordering as defined by the {@link java.lang.String#compareTo(Object)
String.compareTo} method.  String components that are subject to
encoding are compared by comparing their raw forms rather than their
encoded forms.

<p> The ordering of URIs is defined as follows: </p>

<ul>

  <li><p> Two URIs with different schemes are ordered according the
  ordering of their schemes, without regard to case. </p></li>

  <li><p> A hierarchical URI is considered to be less than an opaque URI
  with an identical scheme. </p></li>

  <li><p> Two opaque URIs with identical schemes are ordered according
  to the ordering of their scheme-specific parts. </p></li>

  <li><p> Two opaque URIs with identical schemes and scheme-specific
  parts are ordered according to the ordering of their
  fragments. </p></li>

  <li><p> Two hierarchical URIs with identical schemes are ordered
  according to the ordering of their authority components: </p>

  <ul>

    <li><p> If both authority components are server-based then the URIs
    are ordered according to their user-information components; if these
    components are identical then the URIs are ordered according to the
    ordering of their hosts, without regard to case; if the hosts are
    identical then the URIs are ordered according to the ordering of
    their ports. </p></li>

    <li><p> If one or both authority components are registry-based then
    the URIs are ordered according to the ordering of their authority
    components. </p></li>

  </ul></li>

  <li><p> Finally, two hierarchical URIs with identical schemes and
  authority components are ordered according to the ordering of their
  paths; if their paths are identical then they are ordered according to
  the ordering of their queries; if the queries are identical then they
  are ordered according to the order of their fragments. </p></li>

</ul>

<p> This method satisfies the general contract of the {@link
java.lang.Comparable#compareTo(Object) Comparable.compareTo}
method. </p>

@param   that
         The object to which this URI is to be compared

@return  A negative integer, zero, or a positive integer as this URI is
         less than, equal to, or greater than the given URI

@throws  ClassCastException
         If the given object is not a URI
"
      end

      operation 7548930 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the content of this URI as a string.

<p> If this URI was created by invoking one of the constructors in this
class then a string equivalent to the original input string, or to the
string computed from the originally-given components, as appropriate, is
returned.  Otherwise this URI was created by normalization, resolution,
or relativization, and so a string is constructed from this URI's
components according to the rules specified in <a
href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,
section&nbsp;5.2, step&nbsp;7. </p>

@return  The string form of this URI
"
      end

      operation 7549058 "toASCIIString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the content of this URI as a US-ASCII string.

<p> If this URI does not contain any characters in the <i>other</i>
category then an invocation of this method will return the same value as
an invocation of the {@link #toString() toString} method.  Otherwise
this method works as if by invoking that method and then <a
href=\"#encode\">encoding</a> the result.  </p>

@return  The string form of this URI, encoded as needed
         so that it only contains characters in the US-ASCII
         charset
"
      end

      operation 7549186 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Serialization support --

Saves the content of this URI to the given serial stream.

<p> The only serializable field of a URI instance is its {@code string}
field.  That field is given a value, if it does not have one already,
and then the {@link java.io.ObjectOutputStream#defaultWriteObject()}
method of the given object-output stream is invoked. </p>

@param  os  The object-output stream to which this object
            is to be written
"
      end

      operation 7549314 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "is" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes a URI from the given serial stream.

<p> The {@link java.io.ObjectInputStream#defaultReadObject()} method is
invoked to read the value of the {@code string} field.  The result is
then parsed in the usual way.

@param  is  The object-input stream from which this object
            is being read
"
      end

      operation 7549442 "toLower"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- End of public methods --
 -- Utility methods for string-field comparison and hashing --
 These methods return appropriate values for null string arguments,
 thereby simplifying the equals, hashCode, and compareTo methods.

 The case-ignoring methods should only be applied to strings whose
 characters are all known to be US-ASCII.  Because of this restriction,
 these methods are faster than the similar methods in the String class.
 US-ASCII only"
      end

      operation 7549570 "toUpper"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " US-ASCII only"
      end

      operation 7549698 "equal"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "t" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7549826 "equalIgnoringCase"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "t" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " US-ASCII only"
      end

      operation 7549954 "hash"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "hash" explicit_type "int"
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7550082 "normalizedHash"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "hash" explicit_type "int"
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7550210 "hashIgnoringCase"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "hash" explicit_type "int"
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " US-ASCII only"
      end

      operation 7550338 "compare"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "t" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7550466 "compareIgnoringCase"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "t" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " US-ASCII only"
      end

      operation 7550594 "checkPath"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "s" type class_ref 128130 // String
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "path" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 672642 // URISyntaxException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- String construction --
 If a scheme is given then the path, if given, must be absolute
"
      end

      operation 7550722 "appendAuthority"
	private explicit_return_type "void"
	nparams 5
	  param inout name "sb" type class_ref 166018 // StringBuffer
	  param inout name "authority" type class_ref 128130 // String
	  param inout name "userInfo" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7550850 "appendSchemeSpecificPart"
	private explicit_return_type "void"
	nparams 8
	  param inout name "sb" type class_ref 166018 // StringBuffer
	  param inout name "opaquePart" type class_ref 128130 // String
	  param inout name "authority" type class_ref 128130 // String
	  param inout name "userInfo" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "path" type class_ref 128130 // String
	  param inout name "query" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7550978 "appendFragment"
	private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 166018 // StringBuffer
	  param inout name "fragment" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7551106 "toString"
	private return_type class_ref 128130 // String
	nparams 9
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "opaquePart" type class_ref 128130 // String
	  param inout name "authority" type class_ref 128130 // String
	  param inout name "userInfo" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "path" type class_ref 128130 // String
	  param inout name "query" type class_ref 128130 // String
	  param inout name "fragment" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7551234 "defineSchemeSpecificPart"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7551362 "defineString"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7551490 "resolvePath"
	class_operation private return_type class_ref 128130 // String
	nparams 3
	  param inout name "base" type class_ref 128130 // String
	  param inout name "child" type class_ref 128130 // String
	  param inout name "absolute" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Normalization, resolution, and relativization --
 RFC2396 5.2 (6)"
      end

      operation 7551618 "resolve"
	class_operation private return_type class_ref 783874 // URI
	nparams 2
	  param inout name "base" type class_ref 783874 // URI
	  param inout name "child" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " RFC2396 5.2"
      end

      operation 7551746 "normalize"
	class_operation private return_type class_ref 783874 // URI
	nparams 1
	  param inout name "u" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If the given URI's path is normal then return the URI;
 o.w., return a new URI containing the normalized path.
"
      end

      operation 7551874 "relativize"
	class_operation private return_type class_ref 783874 // URI
	nparams 2
	  param inout name "base" type class_ref 783874 // URI
	  param inout name "child" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If both URIs are hierarchical, their scheme and authority components are
 identical, and the base path is a prefix of the child's path, then
 return a relative URI that, when resolved against the base, yields the
 child; otherwise, return the child.
"
      end

      operation 7552002 "needsNormalization"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path normalization --
 The following algorithm for path normalization avoids the creation of a
 string object for each segment, as well as the use of a string buffer to
 compute the final result, by using a single char array and editing it in
 place.  The array is first split into segments, replacing each slash
 with '\\0' and creating a segment-index array, each element of which is
 the index of the first char in the corresponding segment.  We then walk
 through both arrays, removing \".\", \"..\", and other segments as necessary
 by setting their entries in the index array to -1.  Finally, the two
 arrays are used to rejoin the segments and compute the final result.

 This code is based upon src/solaris/native/java/io/canonicalize_md.c
 Check the given path to see if it might need normalization.  A path
 might need normalization if it contains duplicate slashes, a \".\"
 segment, or a \"..\" segment.  Return -1 if no further normalization is
 possible, otherwise return the number of segments found.

 This method takes a string argument rather than a char array so that
 this test can be performed without invoking path.toCharArray().
"
      end

      operation 7552130 "split"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "path" explicit_type "char"
	multiplicity "[]"
	  param inout name "segs" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Split the given path into segments, replacing slashes with nulls and
 filling in the given segment-index array.

 Preconditions:
   segs.length == Number of segments in path

 Postconditions:
   All slashes in path replaced by '\\0'
   segs[i] == Index of first char in segment i (0 <= i < segs.length)
"
      end

      operation 7552258 "join"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "path" explicit_type "char"
	multiplicity "[]"
	  param inout name "segs" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Join the segments in the given path according to the given segment-index
 array, ignoring those segments whose index entries have been set to -1,
 and inserting slashes as needed.  Return the length of the resulting
 path.

 Preconditions:
   segs[i] == -1 implies segment i is to be ignored
   path computed by split, as above, with '\\0' having replaced '/'

 Postconditions:
   path[0] .. path[return value] == Resulting path
"
      end

      operation 7552386 "removeDots"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "path" explicit_type "char"
	multiplicity "[]"
	  param inout name "segs" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove \".\" segments from the given path, and remove segment pairs
 consisting of a non-\"..\" segment followed by a \"..\" segment.
"
      end

      operation 7552514 "maybeAddLeadingDot"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "path" explicit_type "char"
	multiplicity "[]"
	  param inout name "segs" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DEVIATION: If the normalized path is relative, and if the first
 segment could be parsed as a scheme name, then prepend a \".\" segment
"
      end

      operation 7552642 "normalize"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "ps" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Normalize the given path string.  A normal path string has no empty
 segments (i.e., occurrences of \"//\"), no segments equal to \".\", and no
 segments equal to \"..\" that are preceded by a segment not equal to \"..\".
 In contrast to Unix-style pathname normalization, for URI paths we
 always retain trailing slashes.
"
      end

      operation 7552770 "lowMask"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "chars" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Character classes for parsing --
 RFC2396 precisely specifies which characters in the US-ASCII charset are
 permissible in the various components of a URI reference.  We here
 define a set of mask pairs to aid in enforcing these restrictions.  Each
 mask pair consists of two longs, a low mask and a high mask.  Taken
 together they represent a 128-bit mask, where bit i is set iff the
 character with value i is permitted.

 This approach is more efficient than sequentially searching arrays of
 permitted characters.  It could be made still more efficient by
 precompiling the mask information so that a character's presence in a
 given mask could be determined by a single table lookup.
 Compute the low-order mask for the characters in the given string"
      end

      operation 7552898 "highMask"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "chars" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compute the high-order mask for the characters in the given string"
      end

      operation 7553026 "lowMask"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "first" explicit_type "char"
	  param in name "last" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compute a low-order mask for the characters
 between first and last, inclusive"
      end

      operation 7553154 "highMask"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "first" explicit_type "char"
	  param in name "last" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compute a high-order mask for the characters
 between first and last, inclusive"
      end

      operation 7553282 "match"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "c" explicit_type "char"
	  param in name "lowMask" explicit_type "long"
	  param in name "highMask" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Tell whether the given character is permitted by the given mask pair"
      end

      attribute 1787010 "L_DIGIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " lowMask('0', '9')"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Character-class masks, in reverse order from RFC2396 because
 initializers for static fields cannot make forward references.
 digit    = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" |
            \"8\" | \"9\"
"
      end

      attribute 1787138 "H_DIGIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1787266 "L_UPALPHA"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " upalpha  = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" |
            \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" |
            \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\"
"
      end

      attribute 1787394 "H_UPALPHA"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask('A', 'Z')"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1787522 "L_LOWALPHA"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " lowalpha = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" |
            \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" |
            \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\"
"
      end

      attribute 1787650 "H_LOWALPHA"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask('a', 'z')"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1787778 "L_ALPHA"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_LOWALPHA | L_UPALPHA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " alpha         = lowalpha | upalpha
"
      end

      attribute 1787906 "H_ALPHA"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_LOWALPHA | H_UPALPHA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1788034 "L_ALPHANUM"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_DIGIT | L_ALPHA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " alphanum      = alpha | digit
"
      end

      attribute 1788162 "H_ALPHANUM"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_DIGIT | H_ALPHA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1788290 "L_HEX"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_DIGIT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " hex           = digit | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" |
                         \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"
"
      end

      attribute 1788418 "H_HEX"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask('A', 'F') | highMask('a', 'f')"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1788546 "L_MARK"
	class_attribute const_attribute private explicit_type "long"
	init_value " lowMask(\"-_.!~*'()\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " mark          = \"-\" | \"_\" | \".\" | \"!\" | \"~\" | \"*\" | \"'\" |
                 \"(\" | \")\"
"
      end

      attribute 1788674 "H_MARK"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask(\"-_.!~*'()\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1788802 "L_UNRESERVED"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_ALPHANUM | L_MARK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " unreserved    = alphanum | mark
"
      end

      attribute 1788930 "H_UNRESERVED"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_ALPHANUM | H_MARK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1789058 "L_RESERVED"
	class_attribute const_attribute private explicit_type "long"
	init_value " lowMask(\";/?:@&=+$,[]\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reserved      = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                 \"$\" | \",\" | \"[\" | \"]\"
 Added per RFC2732: \"[\", \"]\"
"
      end

      attribute 1789186 "H_RESERVED"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask(\";/?:@&=+$,[]\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1789314 "L_ESCAPED"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The zero'th bit is used to indicate that escape pairs and non-US-ASCII
 characters are allowed; this is handled by the scanEscape method below.
"
      end

      attribute 1789442 "H_ESCAPED"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1789570 "L_URIC"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_RESERVED | L_UNRESERVED | L_ESCAPED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " uric          = reserved | unreserved | escaped
"
      end

      attribute 1789698 "H_URIC"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_RESERVED | H_UNRESERVED | H_ESCAPED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1789826 "L_PCHAR"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_UNRESERVED | L_ESCAPED | lowMask(\":@&=+$,\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " pchar         = unreserved | escaped |
                 \":\" | \"@\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\"
"
      end

      attribute 1789954 "H_PCHAR"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_UNRESERVED | H_ESCAPED | highMask(\":@&=+$,\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1790082 "L_PATH"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_PCHAR | lowMask(\";/\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All valid path characters
"
      end

      attribute 1790210 "H_PATH"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_PCHAR | highMask(\";/\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1790338 "L_DASH"
	class_attribute const_attribute private explicit_type "long"
	init_value " lowMask(\"-\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Dash, for use in domainlabel and toplabel
"
      end

      attribute 1790466 "H_DASH"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask(\"-\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1790594 "L_DOT"
	class_attribute const_attribute private explicit_type "long"
	init_value " lowMask(\".\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Dot, for use in hostnames
"
      end

      attribute 1790722 "H_DOT"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask(\".\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1790850 "L_USERINFO"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_UNRESERVED | L_ESCAPED | lowMask(\";:&=+$,\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " userinfo      = *( unreserved | escaped |
                    \";\" | \":\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\" )
"
      end

      attribute 1790978 "H_USERINFO"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_UNRESERVED | H_ESCAPED | highMask(\";:&=+$,\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1791106 "L_REG_NAME"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_UNRESERVED | L_ESCAPED | lowMask(\"$,;:@&=+\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reg_name      = 1*( unreserved | escaped | \"$\" | \",\" |
                     \";\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" )
"
      end

      attribute 1791234 "H_REG_NAME"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_UNRESERVED | H_ESCAPED | highMask(\"$,;:@&=+\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1791362 "L_SERVER"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_USERINFO | L_ALPHANUM | L_DASH | lowMask(\".:@[]\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All valid characters for server-based authorities
"
      end

      attribute 1791490 "H_SERVER"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_USERINFO | H_ALPHANUM | H_DASH | highMask(\".:@[]\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1791618 "L_SERVER_PERCENT"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_SERVER | lowMask(\"%\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Special case of server authority that represents an IPv6 address
 In this case, a % does not signify an escape sequence
"
      end

      attribute 1791746 "H_SERVER_PERCENT"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_SERVER | highMask(\"%\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1791874 "L_LEFT_BRACKET"
	class_attribute const_attribute private explicit_type "long"
	init_value " lowMask(\"[\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1792002 "H_LEFT_BRACKET"
	class_attribute const_attribute private explicit_type "long"
	init_value " highMask(\"[\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1792130 "L_SCHEME"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_ALPHA | L_DIGIT | lowMask(\"+-.\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " scheme        = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )
"
      end

      attribute 1792258 "H_SCHEME"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_ALPHA | H_DIGIT | highMask(\"+-.\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1792386 "L_URIC_NO_SLASH"
	class_attribute const_attribute private explicit_type "long"
	init_value " L_UNRESERVED | L_ESCAPED | lowMask(\";?:@&=+$,\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " uric_no_slash = unreserved | escaped | \";\" | \"?\" | \":\" | \"@\" |
                 \"&\" | \"=\" | \"+\" | \"$\" | \",\"
"
      end

      attribute 1792514 "H_URIC_NO_SLASH"
	class_attribute const_attribute private explicit_type "long"
	init_value " H_UNRESERVED | H_ESCAPED | highMask(\";?:@&=+$,\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1792642 "hexDigits"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -- Escaping and encoding --
"
      end

      operation 7553410 "appendEscape"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 166018 // StringBuffer
	  param in name "b" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7553538 "appendEncoded"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 166018 // StringBuffer
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7553666 "quote"
	class_operation private return_type class_ref 128130 // String
	nparams 3
	  param inout name "s" type class_ref 128130 // String
	  param in name "lowMask" explicit_type "long"
	  param in name "highMask" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Quote any characters in s that are not permitted
 by the given mask pair
"
      end

      operation 7553794 "encode"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Encodes all characters >= \\u0080 into escaped, normalized UTF-8 octets,
 assuming that s is otherwise legal
"
      end

      operation 7553922 "decode"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7554050 "decode"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param in name "c1" explicit_type "char"
	  param in name "c2" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7554178 "decode"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Evaluates all escapes in s, applying UTF-8 decoding if needed.  Assumes
 that escapes are well-formed syntactically, i.e., of the form %XX.  If a
 sequence of escaped octets is not valid UTF-8 then the erroneous octets
 are replaced with '\\uFFFD'.
 Exception: any \"%\" found between \"[]\" is left alone. It is an IPv6 literal
            with a scope_id
"
      end

      class 972162 "Parser"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3264130 // input (<unidirectional association>)
	  relation 3264130 --->
	    a role_name "input" private
	      comment " URI input string"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3264130 // input (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1792770 "requireServerAuthority"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7554306 "Parser"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7554434 "fail"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "reason" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -- Methods for throwing URISyntaxException in various ways --"
	end

	operation 7554562 "fail"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "reason" type class_ref 128130 // String
	    param in name "p" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7554690 "failExpecting"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "expected" type class_ref 128130 // String
	    param in name "p" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7554818 "failExpecting"
	  private explicit_return_type "void"
	  nparams 3
	    param inout name "expected" type class_ref 128130 // String
	    param inout name "prior" type class_ref 128130 // String
	    param in name "p" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7554946 "substring"
	  private return_type class_ref 128130 // String
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -- Simple access to the input string --
 Return a substring of the input string
"
	end

	operation 7555074 "charAt"
	  private explicit_return_type "char"
	  nparams 1
	    param in name "p" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return the char at position p,
 assuming that p < input.length()
"
	end

	operation 7555202 "at"
	  private explicit_return_type "boolean"
	  nparams 3
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Tells whether start < end and, if so, whether charAt(start) == c
"
	end

	operation 7555330 "at"
	  private explicit_return_type "boolean"
	  nparams 3
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "s" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Tells whether start + s.length() < end and, if so,
 whether the chars at the start position match s exactly
"
	end

	operation 7555458 "scan"
	  private explicit_return_type "int"
	  nparams 3
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -- Scanning --
 The various scan and parse methods that follow use a uniform
 convention of taking the current start position and end index as
 their first two arguments.  The start is inclusive while the end is
 exclusive, just as in the String class, i.e., a start/end pair
 denotes the left-open interval [start, end) of the input string.

 These methods never proceed past the end position.  They may return
 -1 to indicate outright failure, but more often they simply return
 the position of the first char after the last char scanned.  Thus
 a typical idiom is

     int p = start;
     int q = scan(p, end, ...);
     if (q > p)
         // We scanned something
         ...;
     else if (q == p)
         // We scanned nothing
         ...;
     else if (q == -1)
         // Something went wrong
         ...;
 Scan a specific char: If the char at the given start position is
 equal to c, return the index of the next char; otherwise, return the
 start position.
"
	end

	operation 7555586 "scan"
	  private explicit_return_type "int"
	  nparams 4
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "err" type class_ref 128130 // String
	    param inout name "stop" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Scan forward from the given start position.  Stop at the first char
 in the err string (in which case -1 is returned), or the first char
 in the stop string (in which case the index of the preceding char is
 returned), or the end of the input string (in which case the length
 of the input string is returned).  May return the start position if
 nothing matches.
"
	end

	operation 7555714 "scanEscape"
	  private explicit_return_type "int"
	  nparams 3
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	    param in name "first" explicit_type "char"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Scan a potential escape sequence, starting at the given position,
 with the given first char (i.e., charAt(start) == c).

 This method assumes that if escapes are allowed then visible
 non-US-ASCII chars are also allowed.
"
	end

	operation 7555842 "scan"
	  private explicit_return_type "int"
	  nparams 4
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	    param in name "lowMask" explicit_type "long"
	    param in name "highMask" explicit_type "long"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Scan chars that match the given mask pair
"
	end

	operation 7555970 "checkChars"
	  private explicit_return_type "void"
	  nparams 5
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param in name "lowMask" explicit_type "long"
	    param in name "highMask" explicit_type "long"
	    param inout name "what" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check that each of the chars in [start, end) matches the given mask
"
	end

	operation 7556098 "checkChar"
	  private explicit_return_type "void"
	  nparams 4
	    param in name "p" explicit_type "int"
	    param in name "lowMask" explicit_type "long"
	    param in name "highMask" explicit_type "long"
	    param inout name "what" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check that the char at position p matches the given mask
"
	end

	operation 7556226 "parse"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "rsa" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -- Parsing --
 [<scheme>:]<scheme-specific-part>[#<fragment>]
"
	end

	operation 7556354 "parseHierarchical"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " [//authority]<path>[?<query>]

 DEVIATION from RFC2396: We allow an empty authority component as
 long as it's followed by a non-empty path, query component, or
 fragment component.  This is so that URIs such as \"file:///foo/bar\"
 will parse.  This seems to be the intent of RFC2396, though the
 grammar does not permit it.  If the authority is empty then the
 userInfo, host, and port components are undefined.

 DEVIATION from RFC2396: We allow empty relative paths.  This seems
 to be the intent of RFC2396, but the grammar does not permit it.
 The primary consequence of this deviation is that \"#f\" parses as a
 relative URI with an empty path.
"
	end

	operation 7556482 "parseAuthority"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " authority     = server | reg_name

 Ambiguity: An authority that is a registry name rather than a server
 might have a prefix that parses as a server.  We use the fact that
 the authority component is always followed by '/' or the end of the
 input string to resolve this: If the complete authority did not
 parse as a server then we try to parse it as a registry name.
"
	end

	operation 7556610 "parseServer"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " [<userinfo>@]<host>[:<port>]
"
	end

	operation 7556738 "scanByte"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Scan a string of decimal digits whose value fits in a byte
"
	end

	operation 7556866 "scanIPv4Address"
	  private explicit_return_type "int"
	  nparams 3
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	    param inout name "strict" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Scan an IPv4 address.

 If the strict argument is true then we require that the given
 interval contain nothing besides an IPv4 address; if it is false
 then we only require that it start with an IPv4 address.

 If the interval does not contain or start with (depending upon the
 strict argument) a legal IPv4 address characters then we return -1
 immediately; otherwise we insist that these characters parse as a
 legal IPv4 address and throw an exception on failure.

 We assume that any string of decimal digits and dots must be an IPv4
 address.  It won't parse as a hostname anyway, so making that
 assumption here allows more meaningful exceptions to be thrown.
"
	end

	operation 7556994 "takeIPv4Address"
	  private explicit_return_type "int"
	  nparams 3
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	    param inout name "expected" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Take an IPv4 address: Throw an exception if the given interval
 contains anything except an IPv4 address
"
	end

	operation 7557122 "parseIPv4Address"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Attempt to parse an IPv4 address, returning -1 on failure but
 allowing the given interval to contain [:<characters>] after
 the IPv4 address.
"
	end

	operation 7557250 "parseHostname"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " hostname      = domainlabel [ \".\" ] | 1*( domainlabel \".\" ) toplabel [ \".\" ]
 domainlabel   = alphanum | alphanum *( alphanum | \"-\" ) alphanum
 toplabel      = alpha | alpha *( alphanum | \"-\" ) alphanum
"
	end

	attribute 1792898 "ipv6byteCount"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " IPv6 address parsing, from RFC2373: IPv6 Addressing Architecture

 Bug: The grammar in RFC2373 Appendix B does not allow addresses of
 the form ::12.34.56.78, which are clearly shown in the examples
 earlier in the document.  Here is the original grammar:

   IPv6address = hexpart [ \":\" IPv4address ]
   hexpart     = hexseq | hexseq \"::\" [ hexseq ] | \"::\" [ hexseq ]
   hexseq      = hex4 *( \":\" hex4)
   hex4        = 1*4HEXDIG

 We therefore use the following revised grammar:

   IPv6address = hexseq [ \":\" IPv4address ]
                 | hexseq [ \"::\" [ hexpost ] ]
                 | \"::\" [ hexpost ]
   hexpost     = hexseq | hexseq \":\" IPv4address | IPv4address
   hexseq      = hex4 *( \":\" hex4)
   hex4        = 1*4HEXDIG

 This covers all and only the following cases:

   hexseq
   hexseq : IPv4address
   hexseq ::
   hexseq :: hexseq
   hexseq :: hexseq : IPv4address
   hexseq :: IPv4address
   :: hexseq
   :: hexseq : IPv4address
   :: IPv4address
   ::

 Additionally we constrain the IPv6 address as follows :-

  i.  IPv6 addresses without compressed zeros should contain
      exactly 16 bytes.

  ii. IPv6 addresses with compressed zeros should contain
      less than 16 bytes.
"
	end

	operation 7557378 "parseIPv6Reference"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7557506 "scanHexPost"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7557634 "scanHexSeq"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "start" explicit_type "int"
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 672642 // URISyntaxException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Scan a hex sequence; return -1 if one could not be scanned
"
	end
      end
    end

    class 961794 "AbstractPlainDatagramSocketImpl"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract datagram and multicast socket implementation base class.
Note: This is not a public class, so that applets cannot call
into the implementation directly and hence cannot bypass the
security checks present in the DatagramSocket and MulticastSocket
classes.

@author Pavani Diwanji
"
      classrelation 3235714 // <generalisation>
	relation 3235714 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3235714 // <generalisation>
	  b parent class_ref 961922 // DatagramSocketImpl
      end

      attribute 1756162 "timeout"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " timeout value for receive() 
"
      end

      attribute 1756290 "connected"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1756418 "trafficClass"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3235842 // connectedAddress (<unidirectional association>)
	relation 3235842 --->
	  a role_name "connectedAddress" init_value " null" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3235842 // connectedAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1756546 "connectedPort"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3235970 // os (<unidirectional association>)
	relation 3235970 --->
	  a role_name "os" init_value " AccessController.doPrivileged(
        new sun.security.action.GetPropertyAction(\"os.name\")
    )" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3235970 // os (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1756674 "connectDisabled"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " os.contains(\"OS X\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "flag set if the native connect() call not to be used

"
      end

      extra_member 163202 "initialization"
	
	cpp "" ""
	java "  static {
        java.security.AccessController.doPrivileged(
            new java.security.PrivilegedAction<Void>() {
                public Void run() {
                    System.loadLibrary(\"net\");
                    return null;
                }
            });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7426946 "create"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a datagram socket
"
      end

      operation 7427074 "bind"
	protected explicit_return_type "void"
	nparams 2
	  param in name "lport" explicit_type "int"
	  param inout name "laddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a datagram socket to a local port.
"
      end

      operation 7427202 "bind0"
	abstract protected explicit_return_type "void"
	nparams 2
	  param in name "lport" explicit_type "int"
	  param inout name "laddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7427330 "send"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a datagram packet. The packet contains the data and the
destination address to send the packet to.
@param p the packet to be sent.
"
      end

      operation 7427458 "connect"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects a datagram socket to a remote destination. This associates the remote
address with the local socket so that datagrams may only be sent to this destination
and received from this destination.
@param address the remote InetAddress to connect to
@param port the remote port number
"
      end

      operation 7427586 "disconnect"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disconnects a previously connected socket. Does nothing if the socket was
not connected already.
"
      end

      operation 7427714 "peek"
	abstract protected explicit_return_type "int"
	nparams 1
	  param inout name "i" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Peek at the packet to see who it is from.
@param i the address to populate with the sender address
"
      end

      operation 7427842 "peekData"
	abstract protected explicit_return_type "int"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7427970 "receive"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive the datagram packet.
@param p the packet to receive into
"
      end

      operation 7428098 "receive0"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7428226 "setTimeToLive"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the TTL (time-to-live) option.
@param ttl TTL to be set.
"
      end

      operation 7428354 "getTimeToLive"
	abstract protected explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the TTL (time-to-live) option.
"
      end

      operation 7428482 "setTTL"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "byte"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set the TTL (time-to-live) option.
@param ttl TTL to be set.
"
      end

      operation 7428610 "getTTL"
	abstract protected explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Get the TTL (time-to-live) option.
"
      end

      operation 7428738 "join"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Join the multicast group.
@param inetaddr multicast address to join.
"
      end

      operation 7428866 "leave"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Leave the multicast group.
@param inetaddr multicast address to leave.
"
      end

      operation 7428994 "joinGroup"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "mcastaddr" type class_ref 962178 // SocketAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Join the multicast group.
@param mcastaddr multicast address to join.
@param netIf specifies the local interface to receive multicast
       datagram packets
@throws  IllegalArgumentException if mcastaddr is null or is a
         SocketAddress subclass not supported by this socket
@since 1.4
"
      end

      operation 7429122 "join"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7429250 "leaveGroup"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "mcastaddr" type class_ref 962178 // SocketAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Leave the multicast group.
@param mcastaddr  multicast address to leave.
@param netIf specified the local interface to leave the group at
@throws  IllegalArgumentException if mcastaddr is null or is a
         SocketAddress subclass not supported by this socket
@since 1.4
"
      end

      operation 7429378 "leave"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7429506 "close"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the socket.
"
      end

      operation 7429634 "isClosed"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7429762 "finalize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7429890 "setOption"
	public explicit_return_type "void"
	nparams 2
	  param in name "optID" explicit_type "int"
	  param inout name "o" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "set a value - since we only support (setting) binary options
here, o must be a Boolean
"
      end

      operation 7430018 "getOption"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "optID" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "get option's state - set or not
"
      end

      operation 7430146 "datagramSocketCreate"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7430274 "datagramSocketClose"
	abstract protected explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7430402 "socketSetOption"
	abstract protected explicit_return_type "void"
	nparams 2
	  param in name "opt" explicit_type "int"
	  param inout name "val" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7430530 "socketGetOption"
	abstract protected return_type class_ref 129538 // Object
	nparams 1
	  param in name "opt" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7430658 "connect0"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7430786 "disconnect0"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "family" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7430914 "nativeConnectDisabled"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7431042 "dataAvailable"
	abstract package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 961922 "DatagramSocketImpl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract datagram and multicast socket implementation base class.
@author Pavani Diwanji
@since  JDK1.1
"
      classrelation 3235330 // <realization>
	relation 3235330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3235330 // <realization>
	  b parent class_ref 962050 // SocketOptions
      end

      attribute 1756034 "localPort"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The local port number.

"
      end

      classrelation 3235458 // fd (<unidirectional association>)
	relation 3235458 --->
	  a role_name "fd" protected
	    comment "
The file descriptor object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3235458 // fd (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      operation 7423874 "dataAvailable"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3235586 // socket (<unidirectional association>)
	relation 3235586 --->
	  a role_name "socket" package
	    comment "
The DatagramSocket or MulticastSocket
that owns this impl

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3235586 // socket (<unidirectional association>)
	  b parent class_ref 527234 // DatagramSocket
      end

      operation 7424002 "setDatagramSocket"
	package explicit_return_type "void"
	nparams 1
	  param inout name "socket" type class_ref 527234 // DatagramSocket
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7424130 "getDatagramSocket"
	package return_type class_ref 527234 // DatagramSocket
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7424258 "create"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a datagram socket.
@exception SocketException if there is an error in the
underlying protocol, such as a TCP error.
"
      end

      operation 7424386 "bind"
	abstract protected explicit_return_type "void"
	nparams 2
	  param in name "lport" explicit_type "int"
	  param inout name "laddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a datagram socket to a local port and address.
@param lport the local port
@param laddr the local address
@exception SocketException if there is an error in the
underlying protocol, such as a TCP error.
"
      end

      operation 7424514 "send"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a datagram packet. The packet contains the data and the
destination address to send the packet to.
@param p the packet to be sent.
@exception IOException if an I/O exception occurs while sending the
datagram packet.
@exception  PortUnreachableException may be thrown if the socket is connected
to a currently unreachable destination. Note, there is no guarantee that
the exception will be thrown.
"
      end

      operation 7424642 "connect"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects a datagram socket to a remote destination. This associates the remote
address with the local socket so that datagrams may only be sent to this destination
and received from this destination. This may be overridden to call a native
system connect.

<p>If the remote destination to which the socket is connected does not
exist, or is otherwise unreachable, and if an ICMP destination unreachable
packet has been received for that address, then a subsequent call to
send or receive may throw a PortUnreachableException.
Note, there is no guarantee that the exception will be thrown.
@param address the remote InetAddress to connect to
@param port the remote port number
@exception   SocketException may be thrown if the socket cannot be
connected to the remote destination
@since 1.4
"
      end

      operation 7424770 "disconnect"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disconnects a datagram socket from its remote destination.
@since 1.4
"
      end

      operation 7424898 "peek"
	abstract protected explicit_return_type "int"
	nparams 1
	  param inout name "i" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Peek at the packet to see who it is from. Updates the specified {@code InetAddress}
to the address which the packet came from.
@param i an InetAddress object
@return the port number which the packet came from.
@exception IOException if an I/O exception occurs
@exception  PortUnreachableException may be thrown if the socket is connected
      to a currently unreachable destination. Note, there is no guarantee that the
      exception will be thrown.
"
      end

      operation 7425026 "peekData"
	abstract protected explicit_return_type "int"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Peek at the packet to see who it is from. The data is copied into the specified
{@code DatagramPacket}. The data is returned,
but not consumed, so that a subsequent peekData/receive operation
will see the same data.
@param p the Packet Received.
@return the port number which the packet came from.
@exception IOException if an I/O exception occurs
@exception  PortUnreachableException may be thrown if the socket is connected
      to a currently unreachable destination. Note, there is no guarantee that the
      exception will be thrown.
@since 1.4
"
      end

      operation 7425154 "receive"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive the datagram packet.
@param p the Packet Received.
@exception IOException if an I/O exception occurs
while receiving the datagram packet.
@exception  PortUnreachableException may be thrown if the socket is connected
      to a currently unreachable destination. Note, there is no guarantee that the
      exception will be thrown.
"
      end

      operation 7425282 "setTTL"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "byte"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set the TTL (time-to-live) option.
@param ttl a byte specifying the TTL value

@deprecated use setTimeToLive instead.
@exception IOException if an I/O exception occurs while setting
the time-to-live option.
@see #getTTL()
"
      end

      operation 7425410 "getTTL"
	abstract protected explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Retrieve the TTL (time-to-live) option.

@exception IOException if an I/O exception occurs
while retrieving the time-to-live option
@deprecated use getTimeToLive instead.
@return a byte representing the TTL value
@see #setTTL(byte)
"
      end

      operation 7425538 "setTimeToLive"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the TTL (time-to-live) option.
@param ttl an {@code int} specifying the time-to-live value
@exception IOException if an I/O exception occurs
while setting the time-to-live option.
@see #getTimeToLive()
"
      end

      operation 7425666 "getTimeToLive"
	abstract protected explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the TTL (time-to-live) option.
@exception IOException if an I/O exception occurs
while retrieving the time-to-live option
@return an {@code int} representing the time-to-live value
@see #setTimeToLive(int)
"
      end

      operation 7425794 "join"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Join the multicast group.
@param inetaddr multicast address to join.
@exception IOException if an I/O exception occurs
while joining the multicast group.
"
      end

      operation 7425922 "leave"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Leave the multicast group.
@param inetaddr multicast address to leave.
@exception IOException if an I/O exception occurs
while leaving the multicast group.
"
      end

      operation 7426050 "joinGroup"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "mcastaddr" type class_ref 962178 // SocketAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Join the multicast group.
@param mcastaddr address to join.
@param netIf specifies the local interface to receive multicast
       datagram packets
@throws IOException if an I/O exception occurs while joining
the multicast group
@since 1.4
"
      end

      operation 7426178 "leaveGroup"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "mcastaddr" type class_ref 962178 // SocketAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Leave the multicast group.
@param mcastaddr address to leave.
@param netIf specified the local interface to leave the group at
@throws IOException if an I/O exception occurs while leaving
the multicast group
@since 1.4
"
      end

      operation 7426306 "close"
	abstract protected explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the socket.
"
      end

      operation 7426434 "getLocalPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local port.
@return an {@code int} representing the local port value
"
      end

      operation 7426562 "setOption"
	package explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 962434 // SocketOption
	  param inout name "value" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7426690 "getOption"
	package explicit_return_type "T"
	nparams 1
	  param inout name "name" type class_ref 962434 // SocketOption
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7426818 "getFileDescriptor"
	protected return_type class_ref 923778 // FileDescriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the datagram socket file descriptor.
@return a {@code FileDescriptor} object representing the datagram socket
file descriptor
"
      end
    end

    class 962050 "SocketOptions"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface of methods to get/set socket options.  This interface is
implemented by: <B>SocketImpl</B> and  <B>DatagramSocketImpl</B>.
Subclasses of these should override the methods
of this interface in order to support their own options.
<P>
The methods and constants which specify options in this interface are
for implementation only.  If you're not subclassing SocketImpl or
DatagramSocketImpl, <B>you won't use these directly.</B> There are
type-safe methods to get/set each of these options in Socket, ServerSocket,
DatagramSocket and MulticastSocket.
<P>
@author David Brown
"
      operation 7423618 "setOption"
	public explicit_return_type "void"
	nparams 2
	  param in name "optID" explicit_type "int"
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/disable the option specified by <I>optID</I>.  If the option
is to be enabled, and it takes an option-specific \"value\",  this is
passed in <I>value</I>.  The actual type of value is option-specific,
and it is an error to pass something that isn't of the expected type:
<BR><PRE>
SocketImpl s;
...
s.setOption(SO_LINGER, new Integer(10));
   // OK - set SO_LINGER w/ timeout of 10 sec.
s.setOption(SO_LINGER, new Double(10));
   // ERROR - expects java.lang.Integer
</PRE>
If the requested option is binary, it can be set using this method by
a java.lang.Boolean:
<BR><PRE>
s.setOption(TCP_NODELAY, new Boolean(true));
   // OK - enables TCP_NODELAY, a binary option
</PRE>
<BR>
Any option can be disabled using this method with a Boolean(false):
<BR><PRE>
s.setOption(TCP_NODELAY, new Boolean(false));
   // OK - disables TCP_NODELAY
s.setOption(SO_LINGER, new Boolean(false));
   // OK - disables SO_LINGER
</PRE>
<BR>
For an option that has a notion of on and off, and requires
a non-boolean parameter, setting its value to anything other than
<I>Boolean(false)</I> implicitly enables it.
<BR>
Throws SocketException if the option is unrecognized,
the socket is closed, or some low-level error occurred
<BR>
@param optID identifies the option
@param value the parameter of the socket option
@throws SocketException if the option is unrecognized,
the socket is closed, or some low-level error occurred
@see #getOption(int)
"
      end

      operation 7423746 "getOption"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "optID" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetch the value of an option.
Binary options will return java.lang.Boolean(true)
if enabled, java.lang.Boolean(false) if disabled, e.g.:
<BR><PRE>
SocketImpl s;
...
Boolean noDelay = (Boolean)(s.getOption(TCP_NODELAY));
if (noDelay.booleanValue()) {
    // true if TCP_NODELAY is enabled...
...
}
</PRE>
<P>
For options that take a particular type as a parameter,
getOption(int) will return the parameter's value, else
it will return java.lang.Boolean(false):
<PRE>
Object o = s.getOption(SO_LINGER);
if (o instanceof Integer) {
    System.out.print(\"Linger time is \" + ((Integer)o).intValue());
} else {
  // the true type of o is java.lang.Boolean(false);
}
</PRE>

@param optID an {@code int} identifying the option to fetch
@return the value of the option
@throws SocketException if the socket is closed
@throws SocketException if <I>optID</I> is unknown along the
        protocol stack (including the SocketImpl)
@see #setOption(int, java.lang.Object)
"
      end

      attribute 1754242 "TCP_NODELAY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The java-supported BSD-style options.


Disable Nagle's algorithm for this connection.  Written data
to the network is not buffered pending acknowledgement of
previously written data.
<P>
Valid for TCP only: SocketImpl.

@see Socket#setTcpNoDelay
@see Socket#getTcpNoDelay

"
      end

      attribute 1754370 "SO_BINDADDR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x000F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Fetch the local address binding of a socket (this option cannot
be \"set\" only \"gotten\", since sockets are bound at creation time,
and so the locally bound address cannot be changed).  The default local
address of a socket is INADDR_ANY, meaning any local address on a
multi-homed host.  A multi-homed host can use this option to accept
connections to only one of its addresses (in the case of a
ServerSocket or DatagramSocket), or to specify its return address
to the peer (for a Socket or DatagramSocket).  The parameter of
this option is an InetAddress.
<P>
This option <B>must</B> be specified in the constructor.
<P>
Valid for: SocketImpl, DatagramSocketImpl

@see Socket#getLocalAddress
@see DatagramSocket#getLocalAddress

"
      end

      attribute 1754498 "SO_REUSEADDR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x04"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Sets SO_REUSEADDR for a socket.  This is used only for MulticastSockets
in java, and it is set by default for MulticastSockets.
<P>
Valid for: DatagramSocketImpl

"
      end

      attribute 1754626 "SO_BROADCAST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0020"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets SO_BROADCAST for a socket. This option enables and disables
the ability of the process to send broadcast messages. It is supported
for only datagram sockets and only on networks that support
the concept of a broadcast message (e.g. Ethernet, token ring, etc.),
and it is set by default for DatagramSockets.
@since 1.4

"
      end

      attribute 1754754 "IP_MULTICAST_IF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set which outgoing interface on which to send multicast packets.
Useful on hosts with multiple network interfaces, where applications
want to use other than the system default.  Takes/returns an InetAddress.
<P>
Valid for Multicast: DatagramSocketImpl

@see MulticastSocket#setInterface(InetAddress)
@see MulticastSocket#getInterface()

"
      end

      attribute 1754882 "IP_MULTICAST_IF2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Same as above. This option is introduced so that the behaviour
 with IP_MULTICAST_IF will be kept the same as before, while
 this new option can support setting outgoing interfaces with either
 IPv4 and IPv6 addresses.

 NOTE: make sure there is no conflict with this
@see MulticastSocket#setNetworkInterface(NetworkInterface)
@see MulticastSocket#getNetworkInterface()
@since 1.4

"
      end

      attribute 1755010 "IP_MULTICAST_LOOP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This option enables or disables local loopback of multicast datagrams.
This option is enabled by default for Multicast Sockets.
@since 1.4

"
      end

      attribute 1755138 "IP_TOS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This option sets the type-of-service or traffic class field
in the IP header for a TCP or UDP socket.
@since 1.4

"
      end

      attribute 1755266 "SO_LINGER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Specify a linger-on-close timeout.  This option disables/enables
immediate return from a <B>close()</B> of a TCP Socket.  Enabling
this option with a non-zero Integer <I>timeout</I> means that a
<B>close()</B> will block pending the transmission and acknowledgement
of all data written to the peer, at which point the socket is closed
<I>gracefully</I>.  Upon reaching the linger timeout, the socket is
closed <I>forcefully</I>, with a TCP RST. Enabling the option with a
timeout of zero does a forceful close immediately. If the specified
timeout value exceeds 65,535 it will be reduced to 65,535.
<P>
Valid only for TCP: SocketImpl

@see Socket#setSoLinger
@see Socket#getSoLinger

"
      end

      attribute 1755394 "SO_TIMEOUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1006"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set a timeout on blocking Socket operations:
<PRE>
ServerSocket.accept();
SocketInputStream.read();
DatagramSocket.receive();
</PRE>

<P> The option must be set prior to entering a blocking
operation to take effect.  If the timeout expires and the
operation would continue to block,
<B>java.io.InterruptedIOException</B> is raised.  The Socket is
not closed in this case.

<P> Valid for all sockets: SocketImpl, DatagramSocketImpl

@see Socket#setSoTimeout
@see ServerSocket#setSoTimeout
@see DatagramSocket#setSoTimeout

"
      end

      attribute 1755522 "SO_SNDBUF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set a hint the size of the underlying buffers used by the
platform for outgoing network I/O. When used in set, this is a
suggestion to the kernel from the application about the size of
buffers to use for the data to be sent over the socket. When
used in get, this must return the size of the buffer actually
used by the platform when sending out data on this socket.

Valid for all sockets: SocketImpl, DatagramSocketImpl

@see Socket#setSendBufferSize
@see Socket#getSendBufferSize
@see DatagramSocket#setSendBufferSize
@see DatagramSocket#getSendBufferSize

"
      end

      attribute 1755650 "SO_RCVBUF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set a hint the size of the underlying buffers used by the
platform for incoming network I/O. When used in set, this is a
suggestion to the kernel from the application about the size of
buffers to use for the data to be received over the
socket. When used in get, this must return the size of the
buffer actually used by the platform when receiving in data on
this socket.

Valid for all sockets: SocketImpl, DatagramSocketImpl

@see Socket#setReceiveBufferSize
@see Socket#getReceiveBufferSize
@see DatagramSocket#setReceiveBufferSize
@see DatagramSocket#getReceiveBufferSize

"
      end

      attribute 1755778 "SO_KEEPALIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When the keepalive option is set for a TCP socket and no data
has been exchanged across the socket in either direction for
2 hours (NOTE: the actual value is implementation dependent),
TCP automatically sends a keepalive probe to the peer. This probe is a
TCP segment to which the peer must respond.
One of three responses is expected:
1. The peer responds with the expected ACK. The application is not
   notified (since everything is OK). TCP will send another probe
   following another 2 hours of inactivity.
2. The peer responds with an RST, which tells the local TCP that
   the peer host has crashed and rebooted. The socket is closed.
3. There is no response from the peer. The socket is closed.

The purpose of this option is to detect if the peer host crashes.

Valid only for TCP socket: SocketImpl

@see Socket#setKeepAlive
@see Socket#getKeepAlive

"
      end

      attribute 1755906 "SO_OOBINLINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1003"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When the OOBINLINE option is set, any TCP urgent data received on
the socket will be received through the socket input stream.
When the option is disabled (which is the default) urgent data
is silently discarded.

@see Socket#setOOBInline
@see Socket#getOOBInline

"
      end
    end

    class 962178 "SocketAddress"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
This class represents a Socket Address with no protocol attachment.
As an abstract class, it is meant to be subclassed with a specific,
protocol dependent, implementation.
<p>
It provides an immutable object used by sockets for binding, connecting, or
as returned values.

@see java.net.Socket
@see java.net.ServerSocket
@since 1.4
"
      classrelation 3250050 // <realization>
	relation 3250050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3250050 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1775106 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 5215720748342549866L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 962306 "NetworkInterface"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a Network Interface made up of a name,
and a list of IP addresses assigned to this interface.
It is used to identify the local interface on which a multicast group
is joined.

Interfaces are normally known by names such as \"le0\".

@since 1.4
"
      classrelation 3252994 // name (<unidirectional association>)
	relation 3252994 --->
	  a role_name "name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3252994 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3253122 // displayName (<unidirectional association>)
	relation 3253122 --->
	  a role_name "displayName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3253122 // displayName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1776258 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3253250 // addrs (<unidirectional association>)
	relation 3253250 --->
	  a role_name "addrs" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3253250 // addrs (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      classrelation 3253378 // bindings (<unidirectional association>)
	relation 3253378 --->
	  a role_name "bindings" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3253378 // bindings (<unidirectional association>)
	  b parent class_ref 968834 // InterfaceAddress
      end

      classrelation 3253506 // childs (<unidirectional association>)
	relation 3253506 --->
	  a role_name "childs" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3253506 // childs (<unidirectional association>)
	  b parent class_ref 962306 // NetworkInterface
      end

      classrelation 3253634 // parent (<unidirectional association>)
	relation 3253634 --->
	  a role_name "parent" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3253634 // parent (<unidirectional association>)
	  b parent class_ref 962306 // NetworkInterface
      end

      attribute 1776386 "virtual"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3253762 // defaultInterface (<unidirectional association>)
	relation 3253762 --->
	  a role_name "defaultInterface" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3253762 // defaultInterface (<unidirectional association>)
	  b parent class_ref 962306 // NetworkInterface
      end

      attribute 1776514 "defaultIndex"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " index of defaultInterface "
      end

      extra_member 165250 "initialization"
	
	cpp "" ""
	java "  static {
        AccessController.doPrivileged(
            new java.security.PrivilegedAction<Void>() {
                public Void run() {
                    System.loadLibrary(\"net\");
                    return null;
                }
            });

        init();
        defaultInterface = DefaultInterface.getDefault();
        if (defaultInterface != null) {
            defaultIndex = defaultInterface.getIndex();
        } else {
            defaultIndex = 0;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7508994 "NetworkInterface"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an NetworkInterface object with index set to 0 and name to null.
Setting such an interface on a MulticastSocket will cause the
kernel to choose one interface for sending multicast packets.

"
      end

      operation 7509122 "NetworkInterface"
	package explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "index" explicit_type "int"
	  param inout name "addrs" type class_ref 513154 // InetAddress
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7509250 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of this network interface.

@return the name of this network interface
"
      end

      operation 7509378 "getInetAddresses"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<InetAddress> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to return an Enumeration with all or a
subset of the InetAddresses bound to this network interface.
<p>
If there is a security manager, its {@code checkConnect}
method is called for each InetAddress. Only InetAddresses where
the {@code checkConnect} doesn't throw a SecurityException
will be returned in the Enumeration. However, if the caller has the
{@link NetPermission}(\"getNetworkInformation\") permission, then all
InetAddresses are returned.
@return an Enumeration object with all or a subset of the InetAddresses
bound to this network interface
"
      end

      operation 7509506 "getInterfaceAddresses"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<InterfaceAddress> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a List of all or a subset of the {@code InterfaceAddresses}
of this network interface.
<p>
If there is a security manager, its {@code checkConnect}
method is called with the InetAddress for each InterfaceAddress.
Only InterfaceAddresses where the {@code checkConnect} doesn't throw
a SecurityException will be returned in the List.

@return a {@code List} object with all or a subset of the
        InterfaceAddresss of this network interface
@since 1.6
"
      end

      operation 7509634 "getSubInterfaces"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NetworkInterface> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an Enumeration with all the subinterfaces (also known as virtual
interfaces) attached to this network interface.
<p>
For instance eth0:1 will be a subinterface to eth0.

@return an Enumeration object with all of the subinterfaces
of this network interface
@since 1.6
"
      end

      operation 7509762 "getParent"
	public return_type class_ref 962306 // NetworkInterface
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent NetworkInterface of this interface if this is
a subinterface, or {@code null} if it is a physical
(non virtual) interface or has no parent.

@return The {@code NetworkInterface} this interface is attached to.
@since 1.6
"
      end

      operation 7509890 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of this network interface. The index is an integer greater
or equal to zero, or {@code -1} for unknown. This is a system specific value
and interfaces with the same name can have different indexes on different
machines.

@return the index of this network interface or {@code -1} if the index is
        unknown
@see #getByIndex(int)
@since 1.7
"
      end

      operation 7510018 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the display name of this network interface.
A display name is a human readable String describing the network
device.

@return a non-empty string representing the display name of this network
        interface, or null if no display name is available.
"
      end

      operation 7510146 "getByName"
	class_operation public return_type class_ref 962306 // NetworkInterface
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches for the network interface with the specified name.

@param   name
         The name of the network interface.

@return  A {@code NetworkInterface} with the specified name,
         or {@code null} if there is no network interface
         with the specified name.

@throws  SocketException
         If an I/O error occurs.

@throws  NullPointerException
         If the specified name is {@code null}.
"
      end

      operation 7510274 "getByIndex"
	class_operation public return_type class_ref 962306 // NetworkInterface
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a network interface given its index.

@param index an integer, the index of the interface
@return the NetworkInterface obtained from its index, or {@code null} if
        there is no interface with such an index on the system
@throws  SocketException  if an I/O error occurs.
@throws  IllegalArgumentException if index has a negative value
@see #getIndex()
@since 1.7
"
      end

      operation 7510402 "getByInetAddress"
	class_operation public return_type class_ref 962306 // NetworkInterface
	nparams 1
	  param inout name "addr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to search for a network interface that
has the specified Internet Protocol (IP) address bound to
it.
<p>
If the specified IP address is bound to multiple network
interfaces it is not defined which network interface is
returned.

@param   addr
         The {@code InetAddress} to search with.

@return  A {@code NetworkInterface}
         or {@code null} if there is no network interface
         with the specified IP address.

@throws  SocketException
         If an I/O error occurs.

@throws  NullPointerException
         If the specified address is {@code null}.
"
      end

      operation 7510530 "getNetworkInterfaces"
	class_operation public return_type class_ref 185986 // Enumeration
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NetworkInterface> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the interfaces on this machine. The {@code Enumeration}
contains at least one element, possibly representing a loopback
interface that only supports communication between entities on
this machine.

NOTE: can use getNetworkInterfaces()+getInetAddresses()
      to obtain all IP addresses for this node

@return an Enumeration of NetworkInterfaces found on this machine
@exception  SocketException  if an I/O error occurs.
"
      end

      operation 7510658 "getAll"
	class_operation private return_type class_ref 962306 // NetworkInterface
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7510786 "getByName0"
	class_operation private return_type class_ref 962306 // NetworkInterface
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7510914 "getByIndex0"
	class_operation private return_type class_ref 962306 // NetworkInterface
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7511042 "getByInetAddress0"
	class_operation private return_type class_ref 962306 // NetworkInterface
	nparams 1
	  param inout name "addr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7511170 "isUp"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a network interface is up and running.

@return  {@code true} if the interface is up and running.
@exception       SocketException if an I/O error occurs.
@since 1.6
"
      end

      operation 7511298 "isLoopback"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a network interface is a loopback interface.

@return  {@code true} if the interface is a loopback interface.
@exception       SocketException if an I/O error occurs.
@since 1.6
"
      end

      operation 7511426 "isPointToPoint"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a network interface is a point to point interface.
A typical point to point interface would be a PPP connection through
a modem.

@return  {@code true} if the interface is a point to point
         interface.
@exception       SocketException if an I/O error occurs.
@since 1.6
"
      end

      operation 7511554 "supportsMulticast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a network interface supports multicasting or not.

@return  {@code true} if the interface supports Multicasting.
@exception       SocketException if an I/O error occurs.
@since 1.6
"
      end

      operation 7511682 "getHardwareAddress"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hardware address (usually MAC) of the interface if it
has one and if it can be accessed given the current privileges.
If a security manager is set, then the caller must have
the permission {@link NetPermission}(\"getNetworkInformation\").

@return  a byte array containing the address, or {@code null} if
         the address doesn't exist, is not accessible or a security
         manager is set and the caller does not have the permission
         NetPermission(\"getNetworkInformation\")

@exception       SocketException if an I/O error occurs.
@since 1.6
"
      end

      operation 7511810 "getMTU"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Maximum Transmission Unit (MTU) of this interface.

@return the value of the MTU for that interface.
@exception       SocketException if an I/O error occurs.
@since 1.6
"
      end

      operation 7511938 "isVirtual"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this interface is a virtual interface (also called
subinterface).
Virtual interfaces are, on some systems, interfaces created as a child
of a physical interface and given different settings (like address or
MTU). Usually the name of the interface will the name of the parent
followed by a colon (:) and a number identifying the child since there
can be several virtual interfaces attached to a single physical
interface.

@return {@code true} if this interface is a virtual interface.
@since 1.6
"
      end

      operation 7512066 "isUp0"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "ind" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7512194 "isLoopback0"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "ind" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7512322 "supportsMulticast0"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "ind" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7512450 "isP2P0"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "ind" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7512578 "getMacAddr0"
	class_operation private explicit_return_type "byte"
	nparams 3
	  param inout name "inAddr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "name" type class_ref 128130 // String
	  param in name "ind" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 7512706 "getMTU0"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "ind" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7512834 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.
The result is {@code true} if and only if the argument is
not {@code null} and it represents the same NetworkInterface
as this object.
<p>
Two instances of {@code NetworkInterface} represent the same
NetworkInterface if both name and addrs are the same for both.

@param   obj   the object to compare against.
@return  {@code true} if the objects are the same;
         {@code false} otherwise.
@see     java.net.InetAddress#getAddress()
"
      end

      operation 7512962 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7513090 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7513218 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7513346 "getDefault"
	class_operation package return_type class_ref 962306 // NetworkInterface
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default network interface of this system

@return the default interface
"
      end
    end

    class 962434 "SocketOption"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A socket option associated with a socket.

<p> In the {@link java.nio.channels channels} package, the {@link
java.nio.channels.NetworkChannel} interface defines the {@link
java.nio.channels.NetworkChannel#setOption(SocketOption,Object) setOption}
and {@link java.nio.channels.NetworkChannel#getOption(SocketOption) getOption}
methods to set and query the channel's socket options.

@param   <T>     The type of the socket option value.

@since 1.7

@see StandardSocketOptions
"
      operation 7534082 "name"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the socket option.

@return the name of the socket option
"
      end

      operation 7534210 "type"
	cpp_inline public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of the socket option value.

@return the type of the socket option value
"
      end
    end

    class 962562 "AbstractPlainSocketImpl"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Default Socket Implementation. This implementation does
not implement any security checks.
Note this class should <b>NOT</b> be public.

@author  Steven B. Byrne
"
      classrelation 3236738 // <generalisation>
	relation 3236738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3236738 // <generalisation>
	  b parent class_ref 962690 // SocketImpl
      end

      attribute 1757058 "timeout"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " instance variable for SO_TIMEOUT 
 timeout in millisec"
      end

      attribute 1757186 "trafficClass"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " traffic class
"
      end

      attribute 1757314 "shut_rd"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1757442 "shut_wr"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3236866 // socketInputStream (<unidirectional association>)
	relation 3236866 --->
	  a role_name "socketInputStream" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3236866 // socketInputStream (<unidirectional association>)
	  b parent class_ref 962818 // SocketInputStream
      end

      classrelation 3236994 // socketOutputStream (<unidirectional association>)
	relation 3236994 --->
	  a role_name "socketOutputStream" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3236994 // socketOutputStream (<unidirectional association>)
	  b parent class_ref 962946 // SocketOutputStream
      end

      attribute 1757570 "fdUseCount"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of threads using the FileDescriptor 
"
      end

      classrelation 3237122 // fdLock (<unidirectional association>)
	relation 3237122 --->
	  a role_name "fdLock" init_value " new Object()" const_relation protected
	    comment " lock when increment/decrementing fdUseCount 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3237122 // fdLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1757698 "closePending"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicates a close is pending on the file descriptor 
"
      end

      attribute 1757826 "CONNECTION_NOT_RESET"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicates connection reset state 
"
      end

      attribute 1757954 "CONNECTION_RESET_PENDING"
	private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1758082 "CONNECTION_RESET"
	private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1758210 "resetState"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3237250 // resetLock (<unidirectional association>)
	relation 3237250 --->
	  a role_name "resetLock" init_value " new Object()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3237250 // resetLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1758338 "stream"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " whether this Socket is a stream (TCP) socket or not (UDP)

"
      end

      extra_member 163330 "initialization"
	
	cpp "" ""
	java "  static {
        java.security.AccessController.doPrivileged(
            new java.security.PrivilegedAction<Void>() {
                public Void run() {
                    System.loadLibrary(\"net\");
                    return null;
                }
            });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7434754 "create"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket with a boolean that specifies whether this
is a stream socket (true) or an unconnected UDP socket (false).
"
      end

      operation 7434882 "connect"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 2
	  exception class_ref 246786 // UnknownHostException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket and connects it to the specified port on
the specified host.
@param host the specified host
@param port the specified port
"
      end

      operation 7435010 "connect"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket and connects it to the specified address on
the specified port.
@param address the address
@param port the specified port
"
      end

      operation 7435138 "connect"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 962178 // SocketAddress
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket and connects it to the specified address on
the specified port.
@param address the address
@param timeout the timeout value in milliseconds, or zero for no timeout.
@throws IOException if connection fails
@throws  IllegalArgumentException if address is null or is a
         SocketAddress subclass not supported by this socket
@since 1.4
"
      end

      operation 7435266 "connectToAddress"
	private explicit_return_type "void"
	nparams 3
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7435394 "setOption"
	public explicit_return_type "void"
	nparams 2
	  param in name "opt" explicit_type "int"
	  param inout name "val" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7435522 "getOption"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "opt" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7435650 "doConnect"
	package explicit_return_type "void"
	nparams 3
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The workhorse of the connection operation.  Tries several times to
establish a connection to the given <host, port>.  If unsuccessful,
throws an IOException indicating what went wrong.
"
      end

      operation 7435778 "bind"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "lport" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds the socket to the specified address of the specified local port.
@param address the address
@param lport the port
"
      end

      operation 7435906 "listen"
	protected explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Listens, for a specified amount of time, for connections.
@param count the amount of time to listen for connections
"
      end

      operation 7436034 "accept"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 962690 // SocketImpl
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts connections.
@param s the connection
"
      end

      operation 7436162 "getInputStream"
	protected return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an InputStream for this socket.
"
      end

      operation 7436290 "setInputStream"
	package explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 962818 // SocketInputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7436418 "getOutputStream"
	protected return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an OutputStream for this socket.
"
      end

      operation 7436546 "setFileDescriptor"
	package explicit_return_type "void"
	nparams 1
	  param inout name "fd" type class_ref 923778 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7436674 "setAddress"
	package explicit_return_type "void"
	nparams 1
	  param inout name "address" type class_ref 513154 // InetAddress
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7436802 "setPort"
	package explicit_return_type "void"
	nparams 1
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7436930 "setLocalPort"
	package explicit_return_type "void"
	nparams 1
	  param in name "localport" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7437058 "available"
	protected explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read without blocking.
"
      end

      operation 7437186 "close"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the socket.
"
      end

      operation 7437314 "reset"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7437442 "shutdownInput"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shutdown read-half of the socket connection;
"
      end

      operation 7437570 "shutdownOutput"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shutdown write-half of the socket connection;
"
      end

      operation 7437698 "supportsUrgentData"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7437826 "sendUrgentData"
	protected explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7437954 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cleans up if the user forgets to close it.
"
      end

      operation 7438082 "acquireFD"
	package return_type class_ref 923778 // FileDescriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"Acquires\" and returns the FileDescriptor for this impl

A corresponding releaseFD is required to \"release\" the
FileDescriptor.
"
      end

      operation 7438210 "releaseFD"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"Release\" the FileDescriptor for this impl.

If the use count goes to -1 then the socket is closed.
"
      end

      operation 7438338 "isConnectionReset"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7438466 "isConnectionResetPending"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7438594 "setConnectionReset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7438722 "setConnectionResetPending"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7438850 "isClosedOrPending"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if already closed or close is pending
"
      end

      operation 7438978 "getTimeout"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current value of SO_TIMEOUT
"
      end

      operation 7439106 "socketPreClose"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"Pre-close\" a socket by dup'ing the file descriptor - this enables
the socket to be closed without releasing the file descriptor.
"
      end

      operation 7439234 "socketClose"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the socket (and release the file descriptor).
"
      end

      operation 7439362 "socketCreate"
	abstract package explicit_return_type "void"
	nparams 1
	  param inout name "isServer" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7439490 "socketConnect"
	abstract package explicit_return_type "void"
	nparams 3
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7439618 "socketBind"
	abstract package explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7439746 "socketListen"
	abstract package explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7439874 "socketAccept"
	abstract package explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 962690 // SocketImpl
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7440002 "socketAvailable"
	abstract package explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7440130 "socketClose0"
	abstract package explicit_return_type "void"
	nparams 1
	  param inout name "useDeferredClose" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7440258 "socketShutdown"
	abstract package explicit_return_type "void"
	nparams 1
	  param in name "howto" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7440386 "socketSetOption"
	abstract package explicit_return_type "void"
	nparams 3
	  param in name "cmd" explicit_type "int"
	  param inout name "on" explicit_type "boolean"
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7440514 "socketGetOption"
	abstract package explicit_return_type "int"
	nparams 2
	  param in name "opt" explicit_type "int"
	  param inout name "iaContainerObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7440642 "socketSendUrgentData"
	abstract package explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1758466 "SHUT_RD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1758594 "SHUT_WR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 962690 "SocketImpl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The abstract class {@code SocketImpl} is a common superclass
of all classes that actually implement sockets. It is used to
create both client and server sockets.
<p>
A \"plain\" socket implements these methods exactly as
described, without attempting to go through a firewall or proxy.

@author  unascribed
@since   JDK1.0
"
      classrelation 3236098 // <realization>
	relation 3236098 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3236098 // <realization>
	  b parent class_ref 962050 // SocketOptions
      end

      classrelation 3236226 // socket (<unidirectional association>)
	relation 3236226 --->
	  a role_name "socket" init_value " null" package
	    comment "
The actual Socket object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3236226 // socket (<unidirectional association>)
	  b parent class_ref 209154 // Socket
      end

      classrelation 3236354 // serverSocket (<unidirectional association>)
	relation 3236354 --->
	  a role_name "serverSocket" init_value " null" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3236354 // serverSocket (<unidirectional association>)
	  b parent class_ref 208898 // ServerSocket
      end

      classrelation 3236482 // fd (<unidirectional association>)
	relation 3236482 --->
	  a role_name "fd" protected
	    comment "
The file descriptor object for this socket.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3236482 // fd (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      classrelation 3236610 // address (<unidirectional association>)
	relation 3236610 --->
	  a role_name "address" protected
	    comment "
The IP address of the remote end of this socket.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3236610 // address (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1756802 "port"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The port number on the remote host to which this socket is connected.

"
      end

      attribute 1756930 "localport"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The local port number to which this socket is connected.

"
      end

      operation 7431170 "create"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates either a stream or a datagram socket.

@param      stream   if {@code true}, create a stream socket;
                     otherwise, create a datagram socket.
@exception  IOException  if an I/O error occurs while creating the
              socket.
"
      end

      operation 7431298 "connect"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this socket to the specified port on the named host.

@param      host   the name of the remote host.
@param      port   the port number.
@exception  IOException  if an I/O error occurs when connecting to the
              remote host.
"
      end

      operation 7431426 "connect"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this socket to the specified port number on the specified host.

@param      address   the IP address of the remote host.
@param      port      the port number.
@exception  IOException  if an I/O error occurs when attempting a
              connection.
"
      end

      operation 7431554 "connect"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 962178 // SocketAddress
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this socket to the specified port number on the specified host.
A timeout of zero is interpreted as an infinite timeout. The connection
will then block until established or an error occurs.

@param      address   the Socket address of the remote host.
@param     timeout  the timeout value, in milliseconds, or zero for no timeout.
@exception  IOException  if an I/O error occurs when attempting a
              connection.
@since 1.4
"
      end

      operation 7431682 "bind"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "host" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds this socket to the specified local IP address and port number.

@param      host   an IP address that belongs to a local interface.
@param      port   the port number.
@exception  IOException  if an I/O error occurs when binding this socket.
"
      end

      operation 7431810 "listen"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "backlog" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum queue length for incoming connection indications
(a request to connect) to the {@code count} argument. If a
connection indication arrives when the queue is full, the
connection is refused.

@param      backlog   the maximum length of the queue.
@exception  IOException  if an I/O error occurs when creating the queue.
"
      end

      operation 7431938 "accept"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 962690 // SocketImpl
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a connection.

@param      s   the accepted connection.
@exception  IOException  if an I/O error occurs when accepting the
              connection.
"
      end

      operation 7432066 "getInputStream"
	abstract protected return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an input stream for this socket.

@return     a stream for reading from this socket.
@exception  IOException  if an I/O error occurs when creating the
              input stream.
"
      end

      operation 7432194 "getOutputStream"
	abstract protected return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an output stream for this socket.

@return     an output stream for writing to this socket.
@exception  IOException  if an I/O error occurs when creating the
              output stream.
"
      end

      operation 7432322 "available"
	abstract protected explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this socket
without blocking.

@return     the number of bytes that can be read from this socket
            without blocking.
@exception  IOException  if an I/O error occurs when determining the
              number of bytes available.
"
      end

      operation 7432450 "close"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this socket.

@exception  IOException  if an I/O error occurs when closing this socket.
"
      end

      operation 7432578 "shutdownInput"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Places the input stream for this socket at \"end of stream\".
Any data sent to this socket is acknowledged and then
silently discarded.

If you read from a socket input stream after invoking this method on the
socket, the stream's {@code available} method will return 0, and its
{@code read} methods will return {@code -1} (end of stream).

@exception IOException if an I/O error occurs when shutting down this
socket.
@see java.net.Socket#shutdownOutput()
@see java.net.Socket#close()
@see java.net.Socket#setSoLinger(boolean, int)
@since 1.3
"
      end

      operation 7432706 "shutdownOutput"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables the output stream for this socket.
For a TCP socket, any previously written data will be sent
followed by TCP's normal connection termination sequence.

If you write to a socket output stream after invoking
shutdownOutput() on the socket, the stream will throw
an IOException.

@exception IOException if an I/O error occurs when shutting down this
socket.
@see java.net.Socket#shutdownInput()
@see java.net.Socket#close()
@see java.net.Socket#setSoLinger(boolean, int)
@since 1.3
"
      end

      operation 7432834 "getFileDescriptor"
	protected return_type class_ref 923778 // FileDescriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this socket's {@code fd} field.

@return  the value of this socket's {@code fd} field.
@see     java.net.SocketImpl#fd
"
      end

      operation 7432962 "getInetAddress"
	protected return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this socket's {@code address} field.

@return  the value of this socket's {@code address} field.
@see     java.net.SocketImpl#address
"
      end

      operation 7433090 "getPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this socket's {@code port} field.

@return  the value of this socket's {@code port} field.
@see     java.net.SocketImpl#port
"
      end

      operation 7433218 "supportsUrgentData"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not this SocketImpl supports sending
urgent data. By default, false is returned
unless the method is overridden in a sub-class

@return  true if urgent data supported
@see     java.net.SocketImpl#address
@since 1.4
"
      end

      operation 7433346 "sendUrgentData"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Send one byte of urgent data on the socket.
The byte to be sent is the low eight bits of the parameter
@param data The byte of data to send
@exception IOException if there is an error
 sending the data.
@since 1.4
"
      end

      operation 7433474 "getLocalPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this socket's {@code localport} field.

@return  the value of this socket's {@code localport} field.
@see     java.net.SocketImpl#localport
"
      end

      operation 7433602 "setSocket"
	package explicit_return_type "void"
	nparams 1
	  param inout name "soc" type class_ref 209154 // Socket
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7433730 "getSocket"
	package return_type class_ref 209154 // Socket
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7433858 "setServerSocket"
	package explicit_return_type "void"
	nparams 1
	  param inout name "soc" type class_ref 208898 // ServerSocket
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7433986 "getServerSocket"
	package return_type class_ref 208898 // ServerSocket
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7434114 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the address and port of this socket as a {@code String}.

@return  a string representation of this socket.
"
      end

      operation 7434242 "reset"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7434370 "setPerformancePreferences"
	protected explicit_return_type "void"
	nparams 3
	  param in name "connectionTime" explicit_type "int"
	  param in name "latency" explicit_type "int"
	  param in name "bandwidth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets performance preferences for this socket.

<p> Sockets use the TCP/IP protocol by default.  Some implementations
may offer alternative protocols which have different performance
characteristics than TCP/IP.  This method allows the application to
express its own preferences as to how these tradeoffs should be made
when the implementation chooses from the available protocols.

<p> Performance preferences are described by three integers
whose values indicate the relative importance of short connection time,
low latency, and high bandwidth.  The absolute values of the integers
are irrelevant; in order to choose a protocol the values are simply
compared, with larger values indicating stronger preferences. Negative
values represent a lower priority than positive values. If the
application prefers short connection time over both low latency and high
bandwidth, for example, then it could invoke this method with the values
{@code (1, 0, 0)}.  If the application prefers high bandwidth above low
latency, and low latency above short connection time, then it could
invoke this method with the values {@code (0, 1, 2)}.

By default, this method does nothing, unless it is overridden in a
a sub-class.

@param  connectionTime
        An {@code int} expressing the relative importance of a short
        connection time

@param  latency
        An {@code int} expressing the relative importance of low
        latency

@param  bandwidth
        An {@code int} expressing the relative importance of high
        bandwidth

@since 1.5
"
      end

      operation 7434498 "setOption"
	package explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 962434 // SocketOption
	  param inout name "value" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7434626 "getOption"
	package explicit_return_type "T"
	nparams 1
	  param inout name "name" type class_ref 962434 // SocketOption
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 962818 "SocketInputStream"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This stream extends FileInputStream to implement a
SocketInputStream. Note that this class should <b>NOT</b> be
public.

@author      Jonathan Payne
@author      Arthur van Hoff
"
      classrelation 3256450 // <generalisation>
	relation 3256450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3256450 // <generalisation>
	  b parent class_ref 580226 // FileInputStream
      end

      extra_member 165634 "initialization"
	
	cpp "" ""
	java "  static {
        init();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1778946 "eof"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3256578 // impl (<unidirectional association>)
	relation 3256578 --->
	  a role_name "impl" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3256578 // impl (<unidirectional association>)
	  b parent class_ref 962562 // AbstractPlainSocketImpl
      end

      attribute 1779074 "temp"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3256706 // socket (<unidirectional association>)
	relation 3256706 --->
	  a role_name "socket" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3256706 // socket (<unidirectional association>)
	  b parent class_ref 209154 // Socket
      end

      operation 7532290 "SocketInputStream"
	package explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 962562 // AbstractPlainSocketImpl
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SocketInputStream. Can only be called
by a Socket. This method needs to hang on to the owner Socket so
that the fd will not be closed.
@param impl the implemented socket input stream
"
      end

      operation 7532418 "getChannel"
	public return_type class_ref 924034 // FileChannel
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file input stream.</p>

The {@code getChannel} method of {@code SocketInputStream}
returns {@code null} since it is a socket based stream.</p>

@return  the file channel associated with this file input stream

@since 1.4
@spec JSR-51
"
      end

      operation 7532546 "socketRead0"
	private explicit_return_type "int"
	nparams 5
	  param inout name "fd" type class_ref 923778 // FileDescriptor
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
s"
	
	
	
	comment "Reads into an array of bytes at the specified offset using
the received socket primitive.
@param fd the FileDescriptor
@param b the buffer into which the data is read
@param off the start offset of the data
@param len the maximum number of bytes read
@param timeout the read timeout in ms
@return the actual number of bytes read, -1 is
         returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred.
"
      end

      operation 7532674 "socketRead"
	private explicit_return_type "int"
	nparams 5
	  param inout name "fd" type class_ref 923778 // FileDescriptor
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " wrap native call to allow instrumentation

Reads into an array of bytes at the specified offset using
the received socket primitive.
@param fd the FileDescriptor
@param b the buffer into which the data is read
@param off the start offset of the data
@param len the maximum number of bytes read
@param timeout the read timeout in ms
@return the actual number of bytes read, -1 is
         returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred.
"
      end

      operation 7532802 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into a byte array data from the socket.
@param b the buffer into which the data is read
@return the actual number of bytes read, -1 is
         returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred.
"
      end

      operation 7532930 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into a byte array <i>b</i> at offset <i>off</i>,
<i>length</i> bytes of data.
@param b the buffer into which the data is read
@param off the start offset of the data
@param length the maximum number of bytes read
@return the actual number of bytes read, -1 is
         returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred.
"
      end

      operation 7533058 "read"
	package explicit_return_type "int"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7533186 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single byte from the socket.
"
      end

      operation 7533314 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "numbytes" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips n bytes of input.
@param numbytes the number of bytes to skip
@return  the actual number of bytes skipped.
@exception IOException If an I/O error has occurred.
"
      end

      operation 7533442 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read without blocking.
@return the number of immediately available bytes
"
      end

      attribute 1779202 "closing"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Closes the stream.

"
      end

      operation 7533570 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7533698 "setEOF"
	package explicit_return_type "void"
	nparams 1
	  param inout name "eof" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7533826 "finalize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides finalize, the fd is closed by the Socket.
"
      end

      operation 7533954 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Perform class load-time initializations.
"
      end
    end

    class 962946 "SocketOutputStream"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This stream extends FileOutputStream to implement a
SocketOutputStream. Note that this class should <b>NOT</b> be
public.

@author      Jonathan Payne
@author      Arthur van Hoff
"
      classrelation 3256834 // <generalisation>
	relation 3256834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3256834 // <generalisation>
	  b parent class_ref 924162 // FileOutputStream
      end

      extra_member 165762 "initialization"
	
	cpp "" ""
	java "  static {
        init();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3256962 // impl (<unidirectional association>)
	relation 3256962 --->
	  a role_name "impl" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3256962 // impl (<unidirectional association>)
	  b parent class_ref 962562 // AbstractPlainSocketImpl
      end

      attribute 1779330 "temp"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[1]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3257090 // socket (<unidirectional association>)
	relation 3257090 --->
	  a role_name "socket" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3257090 // socket (<unidirectional association>)
	  b parent class_ref 209154 // Socket
      end

      operation 7534338 "SocketOutputStream"
	package explicit_return_type ""
	nparams 1
	  param inout name "impl" type class_ref 962562 // AbstractPlainSocketImpl
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SocketOutputStream. Can only be called
by a Socket. This method needs to hang on to the owner Socket so
that the fd will not be closed.
@param impl the socket output stream inplemented
"
      end

      operation 7534466 "getChannel"
	public return_type class_ref 924034 // FileChannel
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file output stream. </p>

The {@code getChannel} method of {@code SocketOutputStream}
returns {@code null} since it is a socket based stream.</p>

@return  the file channel associated with this file output stream

@since 1.4
@spec JSR-51
"
      end

      operation 7534594 "socketWrite0"
	private explicit_return_type "void"
	nparams 4
	  param inout name "fd" type class_ref 923778 // FileDescriptor
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
	comment "Writes to the socket.
@param fd the FileDescriptor
@param b the data to be written
@param off the start offset in the data
@param len the number of bytes that are written
@exception IOException If an I/O error has occurred.
"
      end

      operation 7534722 "socketWrite"
	private explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes to the socket with appropriate locking of the
FileDescriptor.
@param b the data to be written
@param off the start offset in the data
@param len the number of bytes that are written
@exception IOException If an I/O error has occurred.
"
      end

      operation 7534850 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a byte to the socket.
@param b the data to be written
@exception IOException If an I/O error has occurred.
"
      end

      operation 7534978 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the contents of the buffer <i>b</i> to the socket.
@param b the data to be written
@exception SocketException If an I/O error has occurred.
"
      end

      operation 7535106 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <i>length</i> bytes from buffer <i>b</i> starting at
offset <i>len</i>.
@param b the data to be written
@param off the start offset in the data
@param len the number of bytes that are written
@exception SocketException If an I/O error has occurred.
"
      end

      attribute 1779458 "closing"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Closes the stream.

"
      end

      operation 7535234 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7535362 "finalize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides finalize, the fd is closed by the Socket.
"
      end

      operation 7535490 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Perform class load-time initializations.
"
      end
    end

    class 963074 "Authenticator"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The class Authenticator represents an object that knows how to obtain
authentication for a network connection.  Usually, it will do this
by prompting the user for information.
<p>
Applications use this class by overriding {@link
#getPasswordAuthentication()} in a sub-class. This method will
typically use the various getXXX() accessor methods to get information
about the entity requesting authentication. It must then acquire a
username and password either by interacting with the user or through
some other non-interactive means. The credentials are then returned
as a {@link PasswordAuthentication} return value.
<p>
An instance of this concrete sub-class is then registered
with the system by calling {@link #setDefault(Authenticator)}.
When authentication is required, the system will invoke one of the
requestPasswordAuthentication() methods which in turn will call the
getPasswordAuthentication() method of the registered object.
<p>
All methods that request authentication have a default implementation
that fails.

@see java.net.Authenticator#setDefault(java.net.Authenticator)
@see java.net.Authenticator#getPasswordAuthentication()

@author  Bill Foote
@since   1.2

 There are no abstract methods, but to be useful the user must
 subclass."
      classrelation 3237378 // theAuthenticator (<unidirectional association>)
	relation 3237378 --->
	  a role_name "theAuthenticator" class_relation private
	    comment " The system-wide authenticator object.  See setDefault().
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3237378 // theAuthenticator (<unidirectional association>)
	  b parent class_ref 963074 // Authenticator
      end

      classrelation 3237506 // requestingHost (<unidirectional association>)
	relation 3237506 --->
	  a role_name "requestingHost" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3237506 // requestingHost (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3237634 // requestingSite (<unidirectional association>)
	relation 3237634 --->
	  a role_name "requestingSite" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3237634 // requestingSite (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1758722 "requestingPort"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3237762 // requestingProtocol (<unidirectional association>)
	relation 3237762 --->
	  a role_name "requestingProtocol" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3237762 // requestingProtocol (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3237890 // requestingPrompt (<unidirectional association>)
	relation 3237890 --->
	  a role_name "requestingPrompt" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3237890 // requestingPrompt (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3238018 // requestingScheme (<unidirectional association>)
	relation 3238018 --->
	  a role_name "requestingScheme" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3238018 // requestingScheme (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3238146 // requestingURL (<unidirectional association>)
	relation 3238146 --->
	  a role_name "requestingURL" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3238146 // requestingURL (<unidirectional association>)
	  b parent class_ref 243458 // URL
      end

      class 963202 "RequestorType"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1758850 "PROXY"
	  public type class_ref 963202 // RequestorType
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Entity requesting authentication is a HTTP proxy server.

"
	end

	attribute 1758978 "SERVER"
	  public type class_ref 963202 // RequestorType
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Entity requesting authentication is a HTTP origin server.
"
	end
      end

      classrelation 3238274 // requestingAuthType (<unidirectional association>)
	relation 3238274 --->
	  a role_name "requestingAuthType" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3238274 // requestingAuthType (<unidirectional association>)
	  b parent class_ref 963202 // RequestorType
      end

      operation 7440770 "reset"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7440898 "setDefault"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 963074 // Authenticator
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the authenticator that will be used by the networking code
when a proxy or an HTTP server asks for authentication.
<p>
First, if there is a security manager, its {@code checkPermission}
method is called with a
{@code NetPermission(\"setDefaultAuthenticator\")} permission.
This may result in a java.lang.SecurityException.

@param   a       The authenticator to be set. If a is {@code null} then
                 any previously set authenticator is removed.

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       setting the default authenticator.

@see SecurityManager#checkPermission
@see java.net.NetPermission
"
      end

      operation 7441026 "requestPasswordAuthentication"
	class_operation public return_type class_ref 963330 // PasswordAuthentication
	nparams 5
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "prompt" type class_ref 128130 // String
	  param inout name "scheme" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ask the authenticator that has been registered with the system
for a password.
<p>
First, if there is a security manager, its {@code checkPermission}
method is called with a
{@code NetPermission(\"requestPasswordAuthentication\")} permission.
This may result in a java.lang.SecurityException.

@param addr The InetAddress of the site requesting authorization,
            or null if not known.
@param port the port for the requested connection
@param protocol The protocol that's requesting the connection
         ({@link java.net.Authenticator#getRequestingProtocol()})
@param prompt A prompt string for the user
@param scheme The authentication scheme

@return The username/password, or null if one can't be gotten.

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       the password authentication request.

@see SecurityManager#checkPermission
@see java.net.NetPermission
"
      end

      operation 7441154 "requestPasswordAuthentication"
	class_operation public return_type class_ref 963330 // PasswordAuthentication
	nparams 6
	  param inout name "host" type class_ref 128130 // String
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "prompt" type class_ref 128130 // String
	  param inout name "scheme" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ask the authenticator that has been registered with the system
for a password. This is the preferred method for requesting a password
because the hostname can be provided in cases where the InetAddress
is not available.
<p>
First, if there is a security manager, its {@code checkPermission}
method is called with a
{@code NetPermission(\"requestPasswordAuthentication\")} permission.
This may result in a java.lang.SecurityException.

@param host The hostname of the site requesting authentication.
@param addr The InetAddress of the site requesting authentication,
            or null if not known.
@param port the port for the requested connection.
@param protocol The protocol that's requesting the connection
         ({@link java.net.Authenticator#getRequestingProtocol()})
@param prompt A prompt string for the user which identifies the authentication realm.
@param scheme The authentication scheme

@return The username/password, or null if one can't be gotten.

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       the password authentication request.

@see SecurityManager#checkPermission
@see java.net.NetPermission
@since 1.4
"
      end

      operation 7441282 "requestPasswordAuthentication"
	class_operation public return_type class_ref 963330 // PasswordAuthentication
	nparams 8
	  param inout name "host" type class_ref 128130 // String
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "prompt" type class_ref 128130 // String
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "url" type class_ref 243458 // URL
	  param inout name "reqType" type class_ref 963202 // RequestorType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ask the authenticator that has been registered with the system
for a password.
<p>
First, if there is a security manager, its {@code checkPermission}
method is called with a
{@code NetPermission(\"requestPasswordAuthentication\")} permission.
This may result in a java.lang.SecurityException.

@param host The hostname of the site requesting authentication.
@param addr The InetAddress of the site requesting authorization,
            or null if not known.
@param port the port for the requested connection
@param protocol The protocol that's requesting the connection
         ({@link java.net.Authenticator#getRequestingProtocol()})
@param prompt A prompt string for the user
@param scheme The authentication scheme
@param url The requesting URL that caused the authentication
@param reqType The type (server or proxy) of the entity requesting
             authentication.

@return The username/password, or null if one can't be gotten.

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       the password authentication request.

@see SecurityManager#checkPermission
@see java.net.NetPermission

@since 1.5
"
      end

      operation 7441410 "getRequestingHost"
	protected return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code hostname} of the
site or proxy requesting authentication, or {@code null}
if not available.

@return the hostname of the connection requiring authentication, or null
         if it's not available.
@since 1.4
"
      end

      operation 7441538 "getRequestingSite"
	protected return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code InetAddress} of the
site requesting authorization, or {@code null}
if not available.

@return the InetAddress of the site requesting authorization, or null
         if it's not available.
"
      end

      operation 7441666 "getRequestingPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the port number for the requested connection.
@return an {@code int} indicating the
port for the requested connection.
"
      end

      operation 7441794 "getRequestingProtocol"
	protected return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Give the protocol that's requesting the connection.  Often this
will be based on a URL, but in a future JDK it could be, for
example, \"SOCKS\" for a password-protected SOCKS5 firewall.

@return the protocol, optionally followed by \"/version\", where
         version is a version number.

@see java.net.URL#getProtocol()
"
      end

      operation 7441922 "getRequestingPrompt"
	protected return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the prompt string given by the requestor.

@return the prompt string given by the requestor (realm for
         http requests)
"
      end

      operation 7442050 "getRequestingScheme"
	protected return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the scheme of the requestor (the HTTP scheme
for an HTTP firewall, for example).

@return the scheme of the requestor

"
      end

      operation 7442178 "getPasswordAuthentication"
	protected return_type class_ref 963330 // PasswordAuthentication
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when password authorization is needed.  Subclasses should
override the default implementation, which returns null.
@return The PasswordAuthentication collected from the
         user, or null if none is provided.
"
      end

      operation 7442306 "getRequestingURL"
	protected return_type class_ref 243458 // URL
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the URL that resulted in this
request for authentication.

@since 1.5

@return the requesting URL

"
      end

      operation 7442434 "getRequestorType"
	protected return_type class_ref 963202 // RequestorType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the requestor is a Proxy or a Server.

@since 1.5

@return the authentication type of the requestor

"
      end
    end

    class 963330 "PasswordAuthentication"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The class PasswordAuthentication is a data holder that is used by
Authenticator.  It is simply a repository for a user name and a password.

@see java.net.Authenticator
@see java.net.Authenticator#getPasswordAuthentication()

@author  Bill Foote
@since   1.2
"
      classrelation 3254018 // userName (<unidirectional association>)
	relation 3254018 --->
	  a role_name "userName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3254018 // userName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1776770 "password"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7513730 "PasswordAuthentication"
	public explicit_return_type ""
	nparams 2
	  param inout name "userName" type class_ref 128130 // String
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code PasswordAuthentication} object from the given
user name and password.

<p> Note that the given user password is cloned before it is stored in
the new {@code PasswordAuthentication} object.

@param userName the user name
@param password the user's password
"
      end

      operation 7513858 "getUserName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user name.

@return the user name
"
      end

      operation 7513986 "getPassword"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user password.

<p> Note that this method returns a reference to the password. It is
the caller's responsibility to zero out the password information after
it is no longer needed.

@return the password
"
      end
    end

    class 963458 "BindException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an error occurred while attempting to bind a
socket to a local address and port.  Typically, the port is
in use, or the requested local address could not be assigned.

@since   JDK1.1
"
      classrelation 3238530 // <generalisation>
	relation 3238530 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3238530 // <generalisation>
	  b parent class_ref 248066 // SocketException
      end

      attribute 1759234 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5945005768251722951L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7442818 "BindException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new BindException with the specified detail
message as to why the bind error occurred.
A detail message is a String that gives a specific
description of this error.
@param msg the detail message
"
      end

      operation 7442946 "BindException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new BindException with no detailed message.
"
      end
    end

    class 963586 "CacheRequest"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents channels for storing resources in the
ResponseCache. Instances of such a class provide an
OutputStream object which is called by protocol handlers to
store the resource data into the cache, and also an abort() method
which allows a cache store operation to be interrupted and
abandoned. If an IOException is encountered while reading the
response or writing to the cache, the current cache store operation
will be aborted.

@author Yingxian Wang
@since 1.5
"
      operation 7443074 "getBody"
	abstract public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an OutputStream to which the response body can be
written.

@return an OutputStream to which the response body can
        be written
@throws IOException if an I/O error occurs while
        writing the response body
"
      end

      operation 7443202 "abort"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Aborts the attempt to cache the response. If an IOException is
encountered while reading the response or writing to the cache,
the current cache store operation will be abandoned.
"
      end
    end

    class 963714 "CacheResponse"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represent channels for retrieving resources from the
ResponseCache. Instances of such a class provide an
InputStream that returns the entity body, and also a
getHeaders() method which returns the associated response headers.

@author Yingxian Wang
@since 1.5
"
      operation 7443330 "getHeaders"
	abstract public return_type class_ref 130178 // Map
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, List<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the response headers as a Map.

@return An immutable Map from response header field names to
        lists of field values. The status line has null as its
        field name.
@throws IOException if an I/O error occurs
           while getting the response headers
"
      end

      operation 7443458 "getBody"
	abstract public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the response body as an InputStream.

@return an InputStream from which the response body can
        be accessed
@throws IOException if an I/O error occurs while
        getting the response body
"
      end
    end

    class 963842 "ConnectException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an error occurred while attempting to connect a
socket to a remote address and port.  Typically, the connection
was refused remotely (e.g., no process is listening on the
remote address/port).

@since   JDK1.1
"
      classrelation 3238658 // <generalisation>
	relation 3238658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3238658 // <generalisation>
	  b parent class_ref 248066 // SocketException
      end

      attribute 1759362 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3831404271622369215L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7443586 "ConnectException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ConnectException with the specified detail
message as to why the connect error occurred.
A detail message is a String that gives a specific
description of this error.
@param msg the detail message
"
      end

      operation 7443714 "ConnectException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new ConnectException with no detailed message.
"
      end
    end

    class 963970 "ContentHandler"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The abstract class {@code ContentHandler} is the superclass
of all classes that read an {@code Object} from a
{@code URLConnection}.
<p>
An application does not generally call the
{@code getContent} method in this class directly. Instead, an
application calls the {@code getContent} method in class
{@code URL} or in {@code URLConnection}.
The application's content handler factory (an instance of a class that
implements the interface {@code ContentHandlerFactory} set
up by a call to {@code setContentHandler}) is
called with a {@code String} giving the MIME type of the
object being received on the socket. The factory returns an
instance of a subclass of {@code ContentHandler}, and its
{@code getContent} method is called to create the object.
<p>
If no content handler could be found, URLConnection will
look for a content handler in a user-defineable set of places.
By default it looks in sun.net.www.content, but users can define a
vertical-bar delimited set of class prefixes to search through in
addition by defining the java.content.handler.pkgs property.
The class name must be of the form:
<pre>
    {package-prefix}.{major}.{minor}
e.g.
    YoyoDyne.experimental.text.plain
</pre>
If the loading of the content handler class would be performed by
a classloader that is outside of the delegation chain of the caller,
the JVM will need the RuntimePermission \"getClassLoader\".

@author  James Gosling
@see     java.net.ContentHandler#getContent(java.net.URLConnection)
@see     java.net.ContentHandlerFactory
@see     java.net.URL#getContent()
@see     java.net.URLConnection
@see     java.net.URLConnection#getContent()
@see     java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)
@since   JDK1.0
"
      operation 7443842 "getContent"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "urlc" type class_ref 783746 // URLConnection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a URL connect stream positioned at the beginning of the
representation of an object, this method reads that stream and
creates an object from it.

@param      urlc   a URL connection.
@return     the object read by the {@code ContentHandler}.
@exception  IOException  if an I/O error occurs while reading the object.
"
      end

      operation 7443970 "getContent"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "urlc" type class_ref 783746 // URLConnection
	  param inout name "classes" type class_ref 130818 // Class
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"rawtypes\")
"
	
	
	
	comment "Given a URL connect stream positioned at the beginning of the
representation of an object, this method reads that stream and
creates an object that matches one of the types specified.

The default implementation of this method should call getContent()
and screen the return type for a match of the suggested types.

@param      urlc   a URL connection.
@param      classes      an array of types requested
@return     the object read by the {@code ContentHandler} that is
                the first match of the suggested types.
                null if none of the requested  are supported.
@exception  IOException  if an I/O error occurs while reading the object.
@since 1.3
"
      end
    end

    class 964098 "ContentHandlerFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a factory for content handlers. An
implementation of this interface should map a MIME type into an
instance of {@code ContentHandler}.
<p>
This interface is used by the {@code URLStreamHandler} class
to create a {@code ContentHandler} for a MIME type.

@author  James Gosling
@see     java.net.ContentHandler
@see     java.net.URLStreamHandler
@since   JDK1.0
"
      operation 7444098 "createContentHandler"
	public return_type class_ref 963970 // ContentHandler
	nparams 1
	  param inout name "mimetype" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ContentHandler} to read an object from
a {@code URLStreamHandler}.

@param   mimetype   the MIME type for which a content handler is desired.

@return  a new {@code ContentHandler} to read an object from a
         {@code URLStreamHandler}.
@see     java.net.ContentHandler
@see     java.net.URLStreamHandler
"
      end
    end

    class 964226 "CookieHandler"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A CookieHandler object provides a callback mechanism to hook up a
HTTP state management policy implementation into the HTTP protocol
handler. The HTTP state management mechanism specifies a way to
create a stateful session with HTTP requests and responses.

<p>A system-wide CookieHandler that to used by the HTTP protocol
handler can be registered by doing a
CookieHandler.setDefault(CookieHandler). The currently registered
CookieHandler can be retrieved by calling
CookieHandler.getDefault().

For more information on HTTP state management, see <a
href=\"http://www.ietf.org/rfc/rfc2965.txt\"><i>RFC&nbsp;2965: HTTP
State Management Mechanism</i></a>

@author Yingxian Wang
@since 1.5
"
      classrelation 3238786 // cookieHandler (<unidirectional association>)
	relation 3238786 --->
	  a role_name "cookieHandler" class_relation private
	    comment "
The system-wide cookie handler that will apply cookies to the
request headers and manage cookies from the response headers.

@see setDefault(CookieHandler)
@see getDefault()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3238786 // cookieHandler (<unidirectional association>)
	  b parent class_ref 964226 // CookieHandler
      end

      operation 7444226 "getDefault"
	class_operation public return_type class_ref 964226 // CookieHandler
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the system-wide cookie handler.

@return the system-wide cookie handler; A null return means
       there is no system-wide cookie handler currently set.
@throws SecurityException
      If a security manager has been installed and it denies
{@link NetPermission}{@code (\"getCookieHandler\")}
@see #setDefault(CookieHandler)
"
      end

      operation 7444354 "setDefault"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "cHandler" type class_ref 964226 // CookieHandler
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets (or unsets) the system-wide cookie handler.

Note: non-standard http protocol handlers may ignore this setting.

@param cHandler The HTTP cookie handler, or
      {@code null} to unset.
@throws SecurityException
      If a security manager has been installed and it denies
{@link NetPermission}{@code (\"setCookieHandler\")}
@see #getDefault()
"
      end

      operation 7444482 "get"
	abstract public return_type class_ref 130178 // Map
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "requestHeaders" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, List<String>> ${name}${(}${t0} ${p0}, ${t1}<String, List<String>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the applicable cookies from a cookie cache for the
specified uri in the request header.

<P>The {@code URI} passed as an argument specifies the intended use for
the cookies. In particular the scheme should reflect whether the cookies
will be sent over http, https or used in another context like javascript.
The host part should reflect either the destination of the cookies or
their origin in the case of javascript.</P>
<P>It is up to the implementation to take into account the {@code URI} and
the cookies attributes and security settings to determine which ones
should be returned.</P>

<P>HTTP protocol implementers should make sure that this method is
called after all request headers related to choosing cookies
are added, and before the request is sent.</P>

@param uri a {@code URI} representing the intended use for the
           cookies
@param requestHeaders - a Map from request header
           field names to lists of field values representing
           the current request headers
@return an immutable map from state management headers, with
           field names \"Cookie\" or \"Cookie2\" to a list of
           cookies containing state information

@throws IOException if an I/O error occurs
@throws IllegalArgumentException if either argument is null
@see #put(URI, Map)
"
      end

      operation 7444610 "put"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "responseHeaders" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, List<String>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all the applicable cookies, examples are response header
fields that are named Set-Cookie2, present in the response
headers into a cookie cache.

@param uri a {@code URI} where the cookies come from
@param responseHeaders an immutable map from field names to
           lists of field values representing the response
           header fields returned
@throws  IOException if an I/O error occurs
@throws  IllegalArgumentException if either argument is null
@see #get(URI, Map)
"
      end
    end

    class 964354 "CookieManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CookieManager provides a concrete implementation of {@link CookieHandler},
which separates the storage of cookies from the policy surrounding accepting
and rejecting cookies. A CookieManager is initialized with a {@link CookieStore}
which manages storage, and a {@link CookiePolicy} object, which makes
policy decisions on cookie acceptance/rejection.

<p> The HTTP cookie management in java.net package looks like:
<blockquote>
<pre>{@code
                 use
CookieHandler <------- HttpURLConnection
      ^
      | impl
      |         use
CookieManager -------> CookiePolicy
            |   use
            |--------> HttpCookie
            |              ^
            |              | use
            |   use        |
            |--------> CookieStore
                           ^
                           | impl
                           |
                 Internal in-memory implementation
}</pre>
<ul>
  <li>
    CookieHandler is at the core of cookie management. User can call
    CookieHandler.setDefault to set a concrete CookieHanlder implementation
    to be used.
  </li>
  <li>
    CookiePolicy.shouldAccept will be called by CookieManager.put to see whether
    or not one cookie should be accepted and put into cookie store. User can use
    any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and
    ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation
    and tell CookieManager to use it.
  </li>
  <li>
    CookieStore is the place where any accepted HTTP cookie is stored in.
    If not specified when created, a CookieManager instance will use an internal
    in-memory implementation. Or user can implements one and tell CookieManager
    to use it.
  </li>
  <li>
    Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI)
    are used by CookieManager. Others are for completeness and might be needed
    by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieSotre.
  </li>
</ul>
</blockquote>

<p>There're various ways user can hook up his own HTTP cookie management behavior, e.g.
<blockquote>
<ul>
  <li>Use CookieHandler.setDefault to set a brand new {@link CookieHandler} implementation
  <li>Let CookieManager be the default {@link CookieHandler} implementation,
      but implement user's own {@link CookieStore} and {@link CookiePolicy}
      and tell default CookieManager to use them:
    <blockquote><pre>
      // this should be done at the beginning of an HTTP session
      CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy()));
    </pre></blockquote>
  <li>Let CookieManager be the default {@link CookieHandler} implementation, but
      use customized {@link CookiePolicy}:
    <blockquote><pre>
      // this should be done at the beginning of an HTTP session
      CookieHandler.setDefault(new CookieManager());
      // this can be done at any point of an HTTP session
      ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy());
    </pre></blockquote>
</ul>
</blockquote>

<p>The implementation conforms to <a href=\"http://www.ietf.org/rfc/rfc2965.txt\">RFC 2965</a>, section 3.3.

@see CookiePolicy
@author Edward Wang
@since 1.6
"
      classrelation 3238914 // <generalisation>
	relation 3238914 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3238914 // <generalisation>
	  b parent class_ref 964226 // CookieHandler
      end

      classrelation 3239042 // policyCallback (<unidirectional association>)
	relation 3239042 --->
	  a role_name "policyCallback" private
	    comment " ---------------- Fields -------------- 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3239042 // policyCallback (<unidirectional association>)
	  b parent class_ref 964482 // CookiePolicy
      end

      classrelation 3239170 // cookieJar (<unidirectional association>)
	relation 3239170 --->
	  a role_name "cookieJar" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3239170 // cookieJar (<unidirectional association>)
	  b parent class_ref 964610 // CookieStore
      end

      operation 7444738 "CookieManager"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Ctors -------------- 

Create a new cookie manager.

<p>This constructor will create new cookie manager with default
cookie store and accept policy. The effect is same as
{@code CookieManager(null, null)}.
"
      end

      operation 7444866 "CookieManager"
	public explicit_return_type ""
	nparams 2
	  param inout name "store" type class_ref 964610 // CookieStore
	  param inout name "cookiePolicy" type class_ref 964482 // CookiePolicy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new cookie manager with specified cookie store and cookie policy.

@param store     a {@code CookieStore} to be used by cookie manager.
                 if {@code null}, cookie manager will use a default one,
                 which is an in-memory CookieStore implementation.
@param cookiePolicy      a {@code CookiePolicy} instance
                         to be used by cookie manager as policy callback.
                         if {@code null}, ACCEPT_ORIGINAL_SERVER will
                         be used.
"
      end

      operation 7444994 "setCookiePolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cookiePolicy" type class_ref 964482 // CookiePolicy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Public operations -------------- 

To set the cookie policy of this cookie manager.

<p> A instance of {@code CookieManager} will have
cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always
can call this method to set another cookie policy.

@param cookiePolicy      the cookie policy. Can be {@code null}, which
                         has no effects on current cookie policy.
"
      end

      operation 7445122 "getCookieStore"
	public return_type class_ref 964610 // CookieStore
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "To retrieve current cookie store.

@return  the cookie store currently used by cookie manager.
"
      end

      operation 7445250 "get"
	public return_type class_ref 130178 // Map
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "requestHeaders" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, List<String>> ${name}${(}${t0} ${p0}, ${t1}<String, List<String>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7445378 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "responseHeaders" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, List<String>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7445506 "shouldAcceptInternal"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "cookie" type class_ref 964738 // HttpCookie
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Private operations -------------- 
 to determine whether or not accept this cookie"
      end

      operation 7445634 "isInPortList"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "lst" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7445762 "pathMatches"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 128130 // String
	  param inout name "pathToMatchWith" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "path-matches algorithm, as defined by RFC 2965
"
      end

      operation 7445890 "sortByPath"
	private return_type class_ref 175362 // List
	nparams 1
	  param inout name "cookies" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0}<HttpCookie> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "sort cookies with respect to their path: those with more specific Path attributes
precede those with less specific, as defined in RFC 2965 sec. 3.3.4
"
      end

      class 964866 "CookiePathComparator"
	visibility package 
	nactuals 1
	actual class class_ref 184962 // Comparator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3239298 // <realization>
	  relation 3239298 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3239298 // <realization>
	    b parent class_ref 184962 // Comparator
	end

	operation 7446018 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "c1" type class_ref 964738 // HttpCookie
	    param inout name "c2" type class_ref 964738 // HttpCookie
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 964482 "CookiePolicy"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CookiePolicy implementations decide which cookies should be accepted
and which should be rejected. Three pre-defined policy implementations
are provided, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER.

<p>See RFC 2965 sec. 3.3 and 7 for more detail.

@author Edward Wang
@since 1.6
"
      classrelation 3239426 // ACCEPT_ALL (<unidirectional association>)
	relation 3239426 --->
	  a role_name "ACCEPT_ALL" init_value " new CookiePolicy(){
        public boolean shouldAccept(URI uri, HttpCookie cookie) {
            return true;
        }
    }" class_relation const_relation public
	    comment "
One pre-defined policy which accepts all cookies.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3239426 // ACCEPT_ALL (<unidirectional association>)
	  b parent class_ref 964482 // CookiePolicy
      end

      classrelation 3239554 // ACCEPT_NONE (<unidirectional association>)
	relation 3239554 --->
	  a role_name "ACCEPT_NONE" init_value " new CookiePolicy(){
        public boolean shouldAccept(URI uri, HttpCookie cookie) {
            return false;
        }
    }" class_relation const_relation public
	    comment "
One pre-defined policy which accepts no cookies.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3239554 // ACCEPT_NONE (<unidirectional association>)
	  b parent class_ref 964482 // CookiePolicy
      end

      classrelation 3239682 // ACCEPT_ORIGINAL_SERVER (<unidirectional association>)
	relation 3239682 --->
	  a role_name "ACCEPT_ORIGINAL_SERVER" init_value " new CookiePolicy(){
        public boolean shouldAccept(URI uri, HttpCookie cookie) {
            if (uri == null || cookie == null)
                return false;
            return HttpCookie.domainMatches(cookie.getDomain(), uri.getHost());
        }
    }" class_relation const_relation public
	    comment "
One pre-defined policy which only accepts cookies from original server.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3239682 // ACCEPT_ORIGINAL_SERVER (<unidirectional association>)
	  b parent class_ref 964482 // CookiePolicy
      end

      operation 7446146 "shouldAccept"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "cookie" type class_ref 964738 // HttpCookie
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Will be called to see whether or not this cookie should be accepted.

@param uri       the URI to consult accept policy with
@param cookie    the HttpCookie object in question
@return          {@code true} if this cookie should be accepted;
                 otherwise, {@code false}
"
      end
    end

    class 964610 "CookieStore"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A CookieStore object represents a storage for cookie. Can store and retrieve
cookies.

<p>{@link CookieManager} will call {@code CookieStore.add} to save cookies
for every incoming HTTP response, and call {@code CookieStore.get} to
retrieve cookie for every outgoing HTTP request. A CookieStore
is responsible for removing HttpCookie instances which have expired.

@author Edward Wang
@since 1.6
"
      operation 7446274 "add"
	public explicit_return_type "void"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "cookie" type class_ref 964738 // HttpCookie
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds one HTTP cookie to the store. This is called for every
incoming HTTP response.

<p>A cookie to store may or may not be associated with an URI. If it
is not associated with an URI, the cookie's domain and path attribute
will indicate where it comes from. If it is associated with an URI and
its domain and path attribute are not specified, given URI will indicate
where this cookie comes from.

<p>If a cookie corresponding to the given URI already exists,
then it is replaced with the new one.

@param uri       the uri this cookie associated with.
                 if {@code null}, this cookie will not be associated
                 with an URI
@param cookie    the cookie to store

@throws NullPointerException if {@code cookie} is {@code null}

@see #get

"
      end

      operation 7446402 "get"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HttpCookie> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve cookies associated with given URI, or whose domain matches the
given URI. Only cookies that have not expired are returned.
This is called for every outgoing HTTP request.

@return          an immutable list of HttpCookie,
                 return empty list if no cookies match the given URI

@param uri       the uri associated with the cookies to be returned

@throws NullPointerException if {@code uri} is {@code null}

@see #add

"
      end

      operation 7446530 "getCookies"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HttpCookie> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get all not-expired cookies in cookie store.

@return          an immutable list of http cookies;
                 return empty list if there's no http cookie in store
"
      end

      operation 7446658 "getURIs"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<URI> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get all URIs which identify the cookies in this cookie store.

@return          an immutable list of URIs;
                 return empty list if no cookie in this cookie store
                 is associated with an URI
"
      end

      operation 7446786 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "cookie" type class_ref 964738 // HttpCookie
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a cookie from store.

@param uri       the uri this cookie associated with.
                 if {@code null}, the cookie to be removed is not associated
                 with an URI when added; if not {@code null}, the cookie
                 to be removed is associated with the given URI when added.
@param cookie    the cookie to remove

@return          {@code true} if this store contained the specified cookie

@throws NullPointerException if {@code cookie} is {@code null}
"
      end

      operation 7446914 "removeAll"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all cookies in this cookie store.

@return          {@code true} if this store changed as a result of the call
"
      end
    end

    class 964738 "HttpCookie"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An HttpCookie object represents an HTTP cookie, which carries state
information between server and user agent. Cookie is widely adopted
to create stateful sessions.

<p> There are 3 HTTP cookie specifications:
<blockquote>
  Netscape draft<br>
  RFC 2109 - <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">
<i>http://www.ietf.org/rfc/rfc2109.txt</i></a><br>
  RFC 2965 - <a href=\"http://www.ietf.org/rfc/rfc2965.txt\">
<i>http://www.ietf.org/rfc/rfc2965.txt</i></a>
</blockquote>

<p> HttpCookie class can accept all these 3 forms of syntax.

@author Edward Wang
@since 1.6
"
      classrelation 3242498 // <realization>
	relation 3242498 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3242498 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3242626 // name (<unidirectional association>)
	relation 3242626 --->
	  a role_name "name" const_relation private
	    comment " ---------------- Fields --------------
 The value of the cookie itself.
 NAME= ... \"$Name\" style is reserved"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3242626 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3242754 // value (<unidirectional association>)
	relation 3242754 --->
	  a role_name "value" private
	    comment " value of NAME"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3242754 // value (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3242882 // comment (<unidirectional association>)
	relation 3242882 --->
	  a role_name "comment" private
	    comment " Attributes encoded in the header's cookie fields.
 Comment=VALUE ... describes cookie's use"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3242882 // comment (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3243010 // commentURL (<unidirectional association>)
	relation 3243010 --->
	  a role_name "commentURL" private
	    comment " CommentURL=\"http URL\" ... describes cookie's use"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3243010 // commentURL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1762946 "toDiscard"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Discard ... discard cookie unconditionally"
      end

      classrelation 3243138 // domain (<unidirectional association>)
	relation 3243138 --->
	  a role_name "domain" private
	    comment " Domain=VALUE ... domain that sees cookie"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3243138 // domain (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1763074 "maxAge"
	private explicit_type "long"
	init_value " MAX_AGE_UNSPECIFIED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Max-Age=VALUE ... cookies auto-expire"
      end

      classrelation 3243266 // path (<unidirectional association>)
	relation 3243266 --->
	  a role_name "path" private
	    comment " Path=VALUE ... URLs that see the cookie"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3243266 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3243394 // portlist (<unidirectional association>)
	relation 3243394 --->
	  a role_name "portlist" private
	    comment " Port[=\"portlist\"] ... the port cookie may be returned to"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3243394 // portlist (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1763202 "secure"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Secure ... e.g. use SSL"
      end

      attribute 1763330 "httpOnly"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " HttpOnly ... i.e. not accessible to scripts"
      end

      attribute 1763458 "version"
	private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Version=1 ... RFC 2965 style"
      end

      classrelation 3243522 // header (<unidirectional association>)
	relation 3243522 --->
	  a role_name "header" const_relation private
	    comment " The original header this cookie was consructed from, if it was
 constructed by parsing a header, otherwise null.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3243522 // header (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1763586 "whenCreated"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Hold the creation time (in seconds) of the http cookie for later
 expiration calculation
"
      end

      attribute 1763714 "MAX_AGE_UNSPECIFIED"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Since the positive and zero max-age have their meanings,
 this value serves as a hint as 'not specify max-age'
"
      end

      classrelation 3243650 // COOKIE_DATE_FORMATS (<unidirectional association>)
	relation 3243650 --->
	  a role_name "COOKIE_DATE_FORMATS" multiplicity "[]" init_value " {
        \"EEE',' dd-MMM-yyyy HH:mm:ss 'GMT'\",
        \"EEE',' dd MMM yyyy HH:mm:ss 'GMT'\",
        \"EEE MMM dd yyyy HH:mm:ss 'GMT'Z\",
        \"EEE',' dd-MMM-yy HH:mm:ss 'GMT'\",
        \"EEE',' dd MMM yy HH:mm:ss 'GMT'\",
        \"EEE MMM dd yy HH:mm:ss 'GMT'Z\"
    }" class_relation const_relation private
	    comment " date formats used by Netscape's cookie draft
 as well as formats seen on various sites
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3243650 // COOKIE_DATE_FORMATS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3243778 // SET_COOKIE (<unidirectional association>)
	relation 3243778 --->
	  a role_name "SET_COOKIE" init_value " \"set-cookie:\"" class_relation const_relation private
	    comment " constant strings represent set-cookie header token
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3243778 // SET_COOKIE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3243906 // SET_COOKIE2 (<unidirectional association>)
	relation 3243906 --->
	  a role_name "SET_COOKIE2" init_value " \"set-cookie2:\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3243906 // SET_COOKIE2 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7460226 "HttpCookie"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Ctors --------------

Constructs a cookie with a specified name and value.

<p> The name must conform to RFC 2965. That means it can contain
only ASCII alphanumeric characters and cannot contain commas,
semicolons, or white space or begin with a $ character. The cookie's
name cannot be changed after creation.

<p> The value can be anything the server chooses to send. Its
value is probably of interest only to the server. The cookie's
value can be changed after creation with the
{@code setValue} method.

<p> By default, cookies are created according to the RFC 2965
cookie specification. The version can be changed with the
{@code setVersion} method.


@param  name
        a {@code String} specifying the name of the cookie

@param  value
        a {@code String} specifying the value of the cookie

@throws  IllegalArgumentException
         if the cookie name contains illegal characters
@throws  NullPointerException
         if {@code name} is {@code null}

@see #setValue
@see #setVersion
"
      end

      operation 7460354 "HttpCookie"
	private explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	  param inout name "header" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7460482 "parse"
	class_operation public return_type class_ref 175362 // List
	nparams 1
	  param inout name "header" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HttpCookie> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs cookies from set-cookie or set-cookie2 header string.
RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line
may contain more than one cookie definitions, so this is a static
utility method instead of another constructor.

@param  header
        a {@code String} specifying the set-cookie header. The header
        should start with \"set-cookie\", or \"set-cookie2\" token; or it
        should have no leading token at all.

@return  a List of cookie parsed from header line string

@throws  IllegalArgumentException
         if header string violates the cookie specification's syntax or
         the cookie name contains illegal characters.
@throws  NullPointerException
         if the header string is {@code null}
"
      end

      operation 7460610 "parse"
	class_operation private return_type class_ref 175362 // List
	nparams 2
	  param inout name "header" type class_ref 128130 // String
	  param inout name "retainHeader" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HttpCookie> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private version of parse() that will store the original header used to
 create the cookie, in the cookie itself. This can be useful for filtering
 Set-Cookie[2] headers, using the internal parsing logic defined in this
 class."
      end

      operation 7460738 "hasExpired"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Public operations --------------

Reports whether this HTTP cookie has expired or not.

@return  {@code true} to indicate this HTTP cookie has expired;
         otherwise, {@code false}
"
      end

      operation 7460866 "setComment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "purpose" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies a comment that describes a cookie's purpose.
The comment is useful if the browser presents the cookie
to the user. Comments are not supported by Netscape Version 0 cookies.

@param  purpose
        a {@code String} specifying the comment to display to the user

@see  #getComment
"
      end

      operation 7460994 "getComment"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comment describing the purpose of this cookie, or
{@code null} if the cookie has no comment.

@return  a {@code String} containing the comment, or {@code null} if none

@see  #setComment
"
      end

      operation 7461122 "setCommentURL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "purpose" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies a comment URL that describes a cookie's purpose.
The comment URL is useful if the browser presents the cookie
to the user. Comment URL is RFC 2965 only.

@param  purpose
        a {@code String} specifying the comment URL to display to the user

@see  #getCommentURL
"
      end

      operation 7461250 "getCommentURL"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comment URL describing the purpose of this cookie, or
{@code null} if the cookie has no comment URL.

@return  a {@code String} containing the comment URL, or {@code null}
         if none

@see  #setCommentURL
"
      end

      operation 7461378 "setDiscard"
	public explicit_return_type "void"
	nparams 1
	  param inout name "discard" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify whether user agent should discard the cookie unconditionally.
This is RFC 2965 only attribute.

@param  discard
        {@code true} indicates to discard cookie unconditionally

@see  #getDiscard
"
      end

      operation 7461506 "getDiscard"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the discard attribute of the cookie

@return  a {@code boolean} to represent this cookie's discard attribute

@see  #setDiscard
"
      end

      operation 7461634 "setPortlist"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ports" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify the portlist of the cookie, which restricts the port(s)
to which a cookie may be sent back in a Cookie header.

@param  ports
        a {@code String} specify the port list, which is comma separated
        series of digits

@see  #getPortlist
"
      end

      operation 7461762 "getPortlist"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port list attribute of the cookie

@return  a {@code String} contains the port list or {@code null} if none

@see  #setPortlist
"
      end

      operation 7461890 "setDomain"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies the domain within which this cookie should be presented.

<p> The form of the domain name is specified by RFC 2965. A domain
name begins with a dot ({@code .foo.com}) and means that
the cookie is visible to servers in a specified Domain Name System
(DNS) zone (for example, {@code www.foo.com}, but not
{@code a.b.foo.com}). By default, cookies are only returned
to the server that sent them.

@param  pattern
        a {@code String} containing the domain name within which this
        cookie is visible; form is according to RFC 2965

@see  #getDomain
"
      end

      operation 7462018 "getDomain"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the domain name set for this cookie. The form of the domain name
is set by RFC 2965.

@return  a {@code String} containing the domain name

@see  #setDomain
"
      end

      operation 7462146 "setMaxAge"
	public explicit_return_type "void"
	nparams 1
	  param in name "expiry" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum age of the cookie in seconds.

<p> A positive value indicates that the cookie will expire
after that many seconds have passed. Note that the value is
the <i>maximum</i> age when the cookie will expire, not the cookie's
current age.

<p> A negative value means that the cookie is not stored persistently
and will be deleted when the Web browser exits. A zero value causes the
cookie to be deleted.

@param  expiry
        an integer specifying the maximum age of the cookie in seconds;
        if zero, the cookie should be discarded immediately; otherwise,
        the cookie's max age is unspecified.

@see  #getMaxAge
"
      end

      operation 7462274 "getMaxAge"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum age of the cookie, specified in seconds. By default,
{@code -1} indicating the cookie will persist until browser shutdown.

@return  an integer specifying the maximum age of the cookie in seconds

@see  #setMaxAge
"
      end

      operation 7462402 "setPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies a path for the cookie to which the client should return
the cookie.

<p> The cookie is visible to all the pages in the directory
you specify, and all the pages in that directory's subdirectories.
A cookie's path must include the servlet that set the cookie,
for example, <i>/catalog</i>, which makes the cookie
visible to all directories on the server under <i>/catalog</i>.

<p> Consult RFC 2965 (available on the Internet) for more
information on setting path names for cookies.

@param  uri
        a {@code String} specifying a path

@see  #getPath
"
      end

      operation 7462530 "getPath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path on the server to which the browser returns this cookie.
The cookie is visible to all subpaths on the server.

@return  a {@code String} specifying a path that contains a servlet name,
         for example, <i>/catalog</i>

@see  #setPath
"
      end

      operation 7462658 "setSecure"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the cookie should only be sent using a secure protocol,
such as HTTPS or SSL.

<p> The default value is {@code false}.

@param  flag
        If {@code true}, the cookie can only be sent over a secure
        protocol like HTTPS. If {@code false}, it can be sent over
        any protocol.

@see  #getSecure
"
      end

      operation 7462786 "getSecure"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if sending this cookie should be restricted to a
secure protocol, or {@code false} if the it can be sent using any
protocol.

@return  {@code false} if the cookie can be sent over any standard
         protocol; otherwise, {@code true}

@see  #setSecure
"
      end

      operation 7462914 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the cookie. The name cannot be changed after
creation.

@return  a {@code String} specifying the cookie's name
"
      end

      operation 7463042 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns a new value to a cookie after the cookie is created.
If you use a binary value, you may want to use BASE64 encoding.

<p> With Version 0 cookies, values should not contain white space,
brackets, parentheses, equals signs, commas, double quotes, slashes,
question marks, at signs, colons, and semicolons. Empty values may not
behave the same way on all browsers.

@param  newValue
        a {@code String} specifying the new value

@see  #getValue
"
      end

      operation 7463170 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the cookie.

@return  a {@code String} containing the cookie's present value

@see  #setValue
"
      end

      operation 7463298 "getVersion"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of the protocol this cookie complies with. Version 1
complies with RFC 2965/2109, and version 0 complies with the original
cookie specification drafted by Netscape. Cookies provided by a browser
use and identify the browser's cookie version.

@return  0 if the cookie complies with the original Netscape
         specification; 1 if the cookie complies with RFC 2965/2109

@see  #setVersion
"
      end

      operation 7463426 "setVersion"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the version of the cookie protocol this cookie complies
with. Version 0 complies with the original Netscape cookie
specification. Version 1 complies with RFC 2965/2109.

@param  v
        0 if the cookie should comply with the original Netscape
        specification; 1 if the cookie should comply with RFC 2965/2109

@throws  IllegalArgumentException
         if {@code v} is neither 0 nor 1

@see  #getVersion
"
      end

      operation 7463554 "isHttpOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this cookie contains the <i>HttpOnly</i>
attribute. This means that the cookie should not be accessible to
scripting engines, like javascript.

@return  {@code true} if this cookie should be considered HTTPOnly

@see  #setHttpOnly(boolean)
"
      end

      operation 7463682 "setHttpOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "httpOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the cookie should be considered HTTP Only. If set to
{@code true} it means the cookie should not be accessible to scripting
engines like javascript.

@param  httpOnly
        if {@code true} make the cookie HTTP only, i.e. only visible as
        part of an HTTP request.

@see  #isHttpOnly()
"
      end

      operation 7463810 "domainMatches"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The utility method to check whether a host name is in a domain or not.

<p> This concept is described in the cookie specification.
To understand the concept, some terminologies need to be defined first:
<blockquote>
effective host name = hostname if host name contains dot<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or = hostname.local if not
</blockquote>
<p>Host A's name domain-matches host B's if:
<blockquote><ul>
  <li>their host name strings string-compare equal; or</li>
  <li>A is a HDN string and has the form NB, where N is a non-empty
  name string, B has the form .B', and B' is a HDN string.  (So,
  x.y.com domain-matches .Y.com but not Y.com.)</li>
</ul></blockquote>

<p>A host isn't in a domain (RFC 2965 sec. 3.3.2) if:
<blockquote><ul>
  <li>The value for the Domain attribute contains no embedded dots,
  and the value is not .local.</li>
  <li>The effective host name that derives from the request-host does
  not domain-match the Domain attribute.</li>
  <li>The request-host is a HDN (not IP address) and has the form HD,
  where D is the value of the Domain attribute, and H is a string
  that contains one or more dots.</li>
</ul></blockquote>

<p>Examples:
<blockquote><ul>
  <li>A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com
  would be rejected, because H is y.x and contains a dot.</li>
  <li>A Set-Cookie2 from request-host x.foo.com for Domain=.foo.com
  would be accepted.</li>
  <li>A Set-Cookie2 with Domain=.com or Domain=.com., will always be
  rejected, because there is no embedded dot.</li>
  <li>A Set-Cookie2 from request-host example for Domain=.local will
  be accepted, because the effective host name for the request-
  host is example.local, and example.local domain-matches .local.</li>
</ul></blockquote>

@param  domain
        the domain name to check host name with

@param  host
        the host name in question

@return  {@code true} if they domain-matches; {@code false} if not
"
      end

      operation 7463938 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Constructs a cookie header string representation of this cookie,
which is in the format defined by corresponding cookie specification,
but without the leading \"Cookie:\" token.

@return  a string form of the cookie. The string has the defined format
"
      end

      operation 7464066 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Test the equality of two HTTP cookies.

<p> The result is {@code true} only if two cookies come from same domain
(case-insensitive), have same name (case-insensitive), and have same path
(case-sensitive).

@return  {@code true} if two HTTP cookies equal to each other;
         otherwise, {@code false}
"
      end

      operation 7464194 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash code of this HTTP cookie. The result is the sum of
hash code value of three significant components of this cookie: name,
domain, and path. That is, the hash code is the value of the expression:
<blockquote>
getName().toLowerCase().hashCode()<br>
+ getDomain().toLowerCase().hashCode()<br>
+ getPath().hashCode()
</blockquote>

@return  this HTTP cookie's hash code
"
      end

      operation 7464322 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Create and return a copy of this object.

@return  a clone of this HTTP cookie
"
      end

      classrelation 3244034 // tspecials (<unidirectional association>)
	relation 3244034 --->
	  a role_name "tspecials" init_value " \",; \"" class_relation const_relation private
	    comment " ---------------- Private operations --------------
 Note -- disabled for now to allow full Netscape compatibility
 from RFC 2068, token special case characters

 private static final String tspecials = \"()<>@,;:\\\\\\\"/[]?={} \\t\";
 deliberately includes space"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3244034 // tspecials (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7464450 "isToken"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests a string and returns true if the string counts as a token.

@param  value
        the {@code String} to be tested

@return  {@code true} if the {@code String} is a token;
         {@code false} if it is not
"
      end

      operation 7464578 "parseInternal"
	class_operation private return_type class_ref 964738 // HttpCookie
	nparams 2
	  param inout name "header" type class_ref 128130 // String
	  param inout name "retainHeader" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse header string to cookie object.

@param  header
        header string; should contain only one NAME=VALUE pair

@return  an HttpCookie being extracted

@throws  IllegalArgumentException
         if header string violates the cookie specification
"
      end

      class 966146 "CookieAttributeAssignor"
	visibility package stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7464706 "assign"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "cookie" type class_ref 964738 // HttpCookie
	    param inout name "attrName" type class_ref 128130 // String
	    param inout name "attrValue" type class_ref 128130 // String
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3244162 // assignors (<unidirectional association>)
	relation 3244162 --->
	  a role_name "assignors" init_value "
            new java.util.HashMap<>()" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, CookieAttributeAssignor> ${name}${value};
"
	    classrelation_ref 3244162 // assignors (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 163970 "initialization"
	
	cpp "" ""
	java "  static {
        assignors.put(\"comment\", new CookieAttributeAssignor() {
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    if (cookie.getComment() == null)
                        cookie.setComment(attrValue);
                }
            });
        assignors.put(\"commenturl\", new CookieAttributeAssignor() {
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    if (cookie.getCommentURL() == null)
                        cookie.setCommentURL(attrValue);
                }
            });
        assignors.put(\"discard\", new CookieAttributeAssignor() {
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    cookie.setDiscard(true);
                }
            });
        assignors.put(\"domain\", new CookieAttributeAssignor(){
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    if (cookie.getDomain() == null)
                        cookie.setDomain(attrValue);
                }
            });
        assignors.put(\"max-age\", new CookieAttributeAssignor(){
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    try {
                        long maxage = Long.parseLong(attrValue);
                        if (cookie.getMaxAge() == MAX_AGE_UNSPECIFIED)
                            cookie.setMaxAge(maxage);
                    } catch (NumberFormatException ignored) {
                        throw new IllegalArgumentException(
                                \"Illegal cookie max-age attribute\");
                    }
                }
            });
        assignors.put(\"path\", new CookieAttributeAssignor(){
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    if (cookie.getPath() == null)
                        cookie.setPath(attrValue);
                }
            });
        assignors.put(\"port\", new CookieAttributeAssignor(){
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    if (cookie.getPortlist() == null)
                        cookie.setPortlist(attrValue == null ? \"\" : attrValue);
                }
            });
        assignors.put(\"secure\", new CookieAttributeAssignor(){
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    cookie.setSecure(true);
                }
            });
        assignors.put(\"httponly\", new CookieAttributeAssignor(){
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    cookie.setHttpOnly(true);
                }
            });
        assignors.put(\"version\", new CookieAttributeAssignor(){
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    try {
                        int version = Integer.parseInt(attrValue);
                        cookie.setVersion(version);
                    } catch (NumberFormatException ignored) {
                        // Just ignore bogus version, it will default to 0 or 1
                    }
                }
            });
        assignors.put(\"expires\", new CookieAttributeAssignor(){ // Netscape only
                public void assign(HttpCookie cookie,
                                   String attrName,
                                   String attrValue) {
                    if (cookie.getMaxAge() == MAX_AGE_UNSPECIFIED) {
                        cookie.setMaxAge(cookie.expiryDate2DeltaSeconds(attrValue));
                    }
                }
            });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7464834 "assignAttribute"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "cookie" type class_ref 964738 // HttpCookie
	  param inout name "attrName" type class_ref 128130 // String
	  param inout name "attrValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 164098 "initialization"
	
	cpp "" ""
	java "  static {
        sun.misc.SharedSecrets.setJavaNetHttpCookieAccess(
            new sun.misc.JavaNetHttpCookieAccess() {
                public List<HttpCookie> parse(String header) {
                    return HttpCookie.parse(header, true);
                }

                public String header(HttpCookie cookie) {
                    return cookie.header;
                }
            }
        );
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7464962 "header"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the original header this cookie was consructed from, if it was
constructed by parsing a header, otherwise null.
"
      end

      operation 7465090 "toNetscapeHeaderString"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string representation of this cookie. The string format is
as Netscape spec, but without leading \"Cookie:\" token.
"
      end

      operation 7465218 "toRFC2965HeaderString"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string representation of this cookie. The string format is
as RFC 2965/2109, but without leading \"Cookie:\" token.
"
      end

      classrelation 3244290 // GMT (<unidirectional association>)
	relation 3244290 --->
	  a role_name "GMT" init_value " TimeZone.getTimeZone(\"GMT\")" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3244290 // GMT (<unidirectional association>)
	  b parent class_ref 723970 // TimeZone
      end

      operation 7465346 "expiryDate2DeltaSeconds"
	private explicit_return_type "long"
	nparams 1
	  param inout name "dateString" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param  dateString
        a date string in one of the formats defined in Netscape cookie spec

@return  delta seconds between this cookie's creation time and the time
         specified by dateString
"
      end

      operation 7465474 "guessCookieVersion"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "header" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "try to guess the cookie version through set-cookie header string
"
      end

      operation 7465602 "stripOffSurroundingQuote"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7465730 "equalsIgnoreCase"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "t" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7465858 "startsWithIgnoreCase"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "start" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7465986 "splitMultiCookies"
	class_operation private return_type class_ref 175362 // List
	nparams 1
	  param inout name "header" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Split cookie header string according to rfc 2965:
  1) split where it is a comma;
  2) but not the comma surrounding by double-quotes, which is the comma
     inside port list or embeded URIs.

@param  header
        the cookie header string to split

@return  list of strings; never null
"
      end
    end

    class 965122 "DatagramSocketImplFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a factory for datagram socket implementations. It
is used by the classes {@code DatagramSocket} to create actual socket
implementations.

@author  Yingxian Wang
@see     java.net.DatagramSocket
@since   1.3
"
      operation 7454722 "createDatagramSocketImpl"
	public return_type class_ref 961922 // DatagramSocketImpl
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code DatagramSocketImpl} instance.

@return  a new instance of {@code DatagramSocketImpl}.
@see     java.net.DatagramSocketImpl
"
      end
    end

    class 965250 "DefaultDatagramSocketImplFactory"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines a factory for creating DatagramSocketImpls. It defaults
to creating plain DatagramSocketImpls, but may create other DatagramSocketImpls
by setting the impl.prefix system property.

@author Chris Hegarty
"
      classrelation 3240706 // prefixImplClass (<unidirectional association>)
	relation 3240706 --->
	  a role_name "prefixImplClass" init_value " null" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3240706 // prefixImplClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      extra_member 163586 "initialization"
	
	cpp "" ""
	java "  static {
        String prefix = null;
        try {
            prefix = AccessController.doPrivileged(
                new sun.security.action.GetPropertyAction(\"impl.prefix\", null));
            if (prefix != null)
                prefixImplClass = Class.forName(\"java.net.\"+prefix+\"DatagramSocketImpl\");
        } catch (Exception e) {
            System.err.println(\"Can't find class: java.net.\" +
                                prefix +
                                \"DatagramSocketImpl: check impl.prefix property\");
            //prefixImplClass = null;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7454850 "createDatagramSocketImpl"
	class_operation package return_type class_ref 961922 // DatagramSocketImpl
	nparams 1
	  param inout name "isMulticast" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>DatagramSocketImpl</code> instance.

@param   isMulticast     true if this impl if for a MutlicastSocket
@return  a new instance of a <code>DatagramSocketImpl</code>.
"
      end
    end

    class 965378 "DefaultInterface"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Choose a network interface to be the default for
outgoing IPv6 traffic that does not specify a scope_id (and which needs one).

Platforms that do not require a default interface may return null
which is what this implementation does.
"
      operation 7454978 "getDefault"
	class_operation package return_type class_ref 962306 // NetworkInterface
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 965506 "FileNameMap"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple interface which provides a mechanism to map
between a file name and a MIME type string.

@author  Steven B. Byrne
@since   JDK1.1
"
      operation 7455106 "getContentTypeFor"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "fileName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the MIME type for the specified file name.
@param fileName the specified file name
@return a {@code String} indicating the MIME
type for the specified file name.
"
      end
    end

    class 965634 "HostPortrange"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parses a string containing a host/domain name and port range
"
      classrelation 3240834 // hostname (<unidirectional association>)
	relation 3240834 --->
	  a role_name "hostname" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3240834 // hostname (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3240962 // scheme (<unidirectional association>)
	relation 3240962 --->
	  a role_name "scheme" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3240962 // scheme (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1761538 "portrange"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1761666 "wildcard"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1761794 "literal"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1761922 "ipv6"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1762050 "ipv4"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1762178 "PORT_MIN"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1762306 "PORT_MAX"
	class_attribute const_attribute package explicit_type "int"
	init_value " (1 << 16) -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7455234 "equals"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 965634 // HostPortrange
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7455362 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7455490 "HostPortrange"
	package explicit_return_type ""
	nparams 2
	  param inout name "scheme" type class_ref 128130 // String
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1762434 "CASE_DIFF"
	class_attribute const_attribute package explicit_type "int"
	init_value " 'A' - 'a'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7455618 "toLowerCase"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert to lower case, and check that all chars are ascii
alphanumeric, '-' or '.' only.
"
      end

      operation 7455746 "literal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7455874 "ipv4Literal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7456002 "ipv6Literal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7456130 "hostname"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7456258 "portrange"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7456386 "wildcard"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns true if the hostname part started with *
hostname returns the remaining part of the host component
eg \"*.foo.com\" -> \".foo.com\" or \"*\" -> \"\"

@return
"
      end

      attribute 1762562 "HTTP_PORT"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " {80, 80}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " these shouldn't leak outside the implementation
"
      end

      attribute 1762690 "HTTPS_PORT"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " {443, 443}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1762818 "NO_PORT"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " {-1, -1}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7456514 "defaultPort"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7456642 "parsePort"
	package explicit_return_type "int"
	nparams 1
	  param inout name "port" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 965762 "HttpConnectSocketImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Basic SocketImpl that relies on the internal HTTP protocol handler
implementation to perform the HTTP tunneling and authentication. The
sockets impl is swapped out and replaced with the socket from the HTTP
handler after the tunnel is successfully setup.

@since 1.8

package"
      classrelation 3241218 // <generalisation>
	relation 3241218 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3241218 // <generalisation>
	  b parent class_ref 965890 // PlainSocketImpl
      end

      classrelation 3241346 // httpURLClazzStr (<unidirectional association>)
	relation 3241346 --->
	  a role_name "httpURLClazzStr" init_value "
                                  \"sun.net.www.protocol.http.HttpURLConnection\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3241346 // httpURLClazzStr (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3241474 // netClientClazzStr (<unidirectional association>)
	relation 3241474 --->
	  a role_name "netClientClazzStr" init_value " \"sun.net.NetworkClient\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3241474 // netClientClazzStr (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3241602 // doTunnelingStr (<unidirectional association>)
	relation 3241602 --->
	  a role_name "doTunnelingStr" init_value " \"doTunneling\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3241602 // doTunnelingStr (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3241730 // httpField (<unidirectional association>)
	relation 3241730 --->
	  a role_name "httpField" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3241730 // httpField (<unidirectional association>)
	  b parent class_ref 189698 // Field
      end

      classrelation 3241858 // serverSocketField (<unidirectional association>)
	relation 3241858 --->
	  a role_name "serverSocketField" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3241858 // serverSocketField (<unidirectional association>)
	  b parent class_ref 189698 // Field
      end

      classrelation 3241986 // doTunneling (<unidirectional association>)
	relation 3241986 --->
	  a role_name "doTunneling" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3241986 // doTunneling (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3242114 // server (<unidirectional association>)
	relation 3242114 --->
	  a role_name "server" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3242114 // server (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3242242 // external_address (<unidirectional association>)
	relation 3242242 --->
	  a role_name "external_address" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3242242 // external_address (<unidirectional association>)
	  b parent class_ref 247938 // InetSocketAddress
      end

      classrelation 3242370 // optionsMap (<unidirectional association>)
	relation 3242370 --->
	  a role_name "optionsMap" init_value " new HashMap<>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, Object> ${name}${value};
"
	    classrelation_ref 3242370 // optionsMap (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      extra_member 163842 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            Class<?> httpClazz = Class.forName(httpURLClazzStr, true, null);
            httpField = httpClazz.getDeclaredField(\"http\");
            doTunneling = httpClazz.getDeclaredMethod(doTunnelingStr);
            Class<?> netClientClazz = Class.forName(netClientClazzStr, true, null);
            serverSocketField = netClientClazz.getDeclaredField(\"serverSocket\");

            java.security.AccessController.doPrivileged(
                new java.security.PrivilegedAction<Void>() {
                    public Void run() {
                        httpField.setAccessible(true);
                        serverSocketField.setAccessible(true);
                        return null;
                }
            });
        } catch (ReflectiveOperationException x) {
            throw new InternalError(\"Should not reach here\", x);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7458946 "HttpConnectSocketImpl"
	package explicit_return_type ""
	nparams 2
	  param inout name "server" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7459074 "HttpConnectSocketImpl"
	package explicit_return_type ""
	nparams 1
	  param inout name "proxy" type class_ref 966018 // Proxy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7459202 "connect"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "endpoint" type class_ref 962178 // SocketAddress
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7459330 "setOption"
	public explicit_return_type "void"
	nparams 2
	  param in name "opt" explicit_type "int"
	  param inout name "val" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7459458 "privilegedDoTunnel"
	private return_type class_ref 209154 // Socket
	nparams 2
	  param in name "urlString" type class_ref 128130 // String
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7459586 "doTunnel"
	private return_type class_ref 209154 // Socket
	nparams 2
	  param inout name "urlString" type class_ref 128130 // String
	  param in name "connectTimeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7459714 "doTunneling"
	private explicit_return_type "void"
	nparams 1
	  param inout name "conn" type class_ref 672514 // HttpURLConnection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7459842 "getInetAddress"
	protected return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7459970 "getPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7460098 "getLocalPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 965890 "PlainSocketImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "On Unix systems we simply delegate to native methods.

@author Chris Hegarty
"
      classrelation 3241090 // <generalisation>
	relation 3241090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3241090 // <generalisation>
	  b parent class_ref 962562 // AbstractPlainSocketImpl
      end

      extra_member 163714 "initialization"
	
	cpp "" ""
	java "  static {
        initProto();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7456770 "PlainSocketImpl"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty instance.
"
      end

      operation 7456898 "PlainSocketImpl"
	package explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 923778 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance with the given file descriptor.
"
      end

      operation 7457026 "setOption"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 962434 // SocketOption
	  param inout name "value" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7457154 "getOption"
	protected explicit_return_type "T"
	nparams 1
	  param inout name "name" type class_ref 962434 // SocketOption
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7457282 "socketSetOption"
	protected explicit_return_type "void"
	nparams 3
	  param in name "opt" explicit_type "int"
	  param inout name "b" explicit_type "boolean"
	  param inout name "val" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7457410 "socketCreate"
	package explicit_return_type "void"
	nparams 1
	  param inout name "isServer" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7457538 "socketConnect"
	package explicit_return_type "void"
	nparams 3
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 7457666 "socketBind"
	package explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7457794 "socketListen"
	package explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7457922 "socketAccept"
	package explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 962690 // SocketImpl
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7458050 "socketAvailable"
	package explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7458178 "socketClose0"
	package explicit_return_type "void"
	nparams 1
	  param inout name "useDeferredClose" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7458306 "socketShutdown"
	package explicit_return_type "void"
	nparams 1
	  param in name "howto" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7458434 "initProto"
	class_operation package explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7458562 "socketSetOption0"
	package explicit_return_type "void"
	nparams 3
	  param in name "cmd" explicit_type "int"
	  param inout name "on" explicit_type "boolean"
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 7458690 "socketGetOption"
	package explicit_return_type "int"
	nparams 2
	  param in name "opt" explicit_type "int"
	  param inout name "iaContainerObj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7458818 "socketSendUrgentData"
	package explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end
    end

    class 966018 "Proxy"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a proxy setting, typically a type (http, socks) and
a socket address.
A {@code Proxy} is an immutable object.

@see     java.net.ProxySelector
@author Yingxian Wang
@author Jean-Christophe Collet
@since   1.5
"
      class 970114 "Type"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1777154 "DIRECT"
	  public type class_ref 970114 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Represents a direct connection, or the absence of a proxy.

"
	end

	attribute 1777282 "HTTP"
	  public type class_ref 970114 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Represents proxy for high level protocols such as HTTP or FTP.

"
	end

	attribute 1777410 "SOCKS"
	  public type class_ref 970114 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Represents a SOCKS (V4 or V5) proxy.
"
	end
      end

      classrelation 3254530 // type (<unidirectional association>)
	relation 3254530 --->
	  a role_name "type" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3254530 // type (<unidirectional association>)
	  b parent class_ref 970114 // Type
      end

      classrelation 3254658 // sa (<unidirectional association>)
	relation 3254658 --->
	  a role_name "sa" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3254658 // sa (<unidirectional association>)
	  b parent class_ref 962178 // SocketAddress
      end

      classrelation 3254786 // NO_PROXY (<unidirectional association>)
	relation 3254786 --->
	  a role_name "NO_PROXY" init_value " new Proxy()" class_relation const_relation public
	    comment "
A proxy setting that represents a {@code DIRECT} connection,
basically telling the protocol handler not to use any proxying.
Used, for instance, to create sockets bypassing any other global
proxy settings (like SOCKS):
<P>
{@code Socket s = new Socket(Proxy.NO_PROXY);}


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3254786 // NO_PROXY (<unidirectional association>)
	  b parent class_ref 966018 // Proxy
      end

      operation 7517570 "Proxy"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates the proxy that represents a {@code DIRECT} connection."
      end

      operation 7517698 "Proxy"
	public explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 970114 // Type
	  param inout name "sa" type class_ref 962178 // SocketAddress
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an entry representing a PROXY connection.
Certain combinations are illegal. For instance, for types Http, and
Socks, a SocketAddress <b>must</b> be provided.
<P>
Use the {@code Proxy.NO_PROXY} constant
for representing a direct connection.

@param type the {@code Type} of the proxy
@param sa the {@code SocketAddress} for that proxy
@throws IllegalArgumentException when the type and the address are
incompatible
"
      end

      operation 7517826 "type"
	public return_type class_ref 970114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the proxy type.

@return a Type representing the proxy type
"
      end

      operation 7517954 "address"
	public return_type class_ref 962178 // SocketAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the socket address of the proxy, or
{@code null} if its a direct connection.

@return a {@code SocketAddress} representing the socket end
        point of the proxy
"
      end

      operation 7518082 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string representation of this Proxy.
This String is constructed by calling toString() on its type
and concatenating \" @ \" and the toString() result from its address
if its type is not {@code DIRECT}.

@return  a string representation of this object.
"
      end

      operation 7518210 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.
The result is {@code true} if and only if the argument is
not {@code null} and it represents the same proxy as
this object.
<p>
Two instances of {@code Proxy} represent the same
address if both the SocketAddresses and type are equal.

@param   obj   the object to compare against.
@return  {@code true} if the objects are the same;
         {@code false} otherwise.
@see java.net.InetSocketAddress#equals(java.lang.Object)
"
      end

      operation 7518338 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this Proxy.

@return  a hash code value for this Proxy.
"
      end
    end

    class 966274 "HttpRetryException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that a HTTP request needs to be retried
but cannot be retried automatically, due to streaming mode
being enabled.

@author  Michael McMahon
@since   1.5
"
      classrelation 3244418 // <generalisation>
	relation 3244418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3244418 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1763842 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9186022286469111381L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1763970 "responseCode"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3244546 // location (<unidirectional association>)
	relation 3244546 --->
	  a role_name "location" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3244546 // location (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7466114 "HttpRetryException"
	public explicit_return_type ""
	nparams 2
	  param inout name "detail" type class_ref 128130 // String
	  param in name "code" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code HttpRetryException} from the
specified response code and exception detail message

@param   detail   the detail message.
@param   code   the HTTP response code from server.
"
      end

      operation 7466242 "HttpRetryException"
	public explicit_return_type ""
	nparams 3
	  param inout name "detail" type class_ref 128130 // String
	  param in name "code" explicit_type "int"
	  param inout name "location" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code HttpRetryException} with detail message
responseCode and the contents of the Location response header field.

@param   detail   the detail message.
@param   code   the HTTP response code from server.
@param   location   the URL to be redirected to
"
      end

      operation 7466370 "responseCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the http response code

@return  The http response code.
"
      end

      operation 7466498 "getReason"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string explaining why the http request could
not be retried.

@return  The reason string
"
      end

      operation 7466626 "getLocation"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the Location header field if the
error resulted from redirection.

@return The location string
"
      end
    end

    class 966402 "UnknownServiceException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that an unknown service exception has
occurred. Either the MIME type returned by a URL connection does
not make sense, or the application is attempting to write to a
read-only URL connection.

@author  unascribed
@since   JDK1.0
"
      classrelation 3261826 // <generalisation>
	relation 3261826 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3261826 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1786498 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4169033248853639508L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7544450 "UnknownServiceException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnknownServiceException} with no
detail message.
"
      end

      operation 7544578 "UnknownServiceException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnknownServiceException} with the
specified detail message.

@param   msg   the detail message.
"
      end
    end

    class 966530 "UnknownContentHandler"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3245442 // <generalisation>
	relation 3245442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3245442 // <generalisation>
	  b parent class_ref 963970 // ContentHandler
      end

      classrelation 3245570 // INSTANCE (<unidirectional association>)
	relation 3245570 --->
	  a role_name "INSTANCE" init_value " new UnknownContentHandler()" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3245570 // INSTANCE (<unidirectional association>)
	  b parent class_ref 963970 // ContentHandler
      end

      operation 7474434 "getContent"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "uc" type class_ref 783746 // URLConnection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 966658 "ProtocolException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that there is an error in the underlying
protocol, such as a TCP error.

@author  Chris Warth
@since   JDK1.0
"
      classrelation 3254402 // <generalisation>
	relation 3254402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3254402 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1777026 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6098449442062388080L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7517186 "ProtocolException"
	public explicit_return_type ""
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ProtocolException} with the
specified detail message.

@param   host   the detail message.
"
      end

      operation 7517314 "ProtocolException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ProtocolException} with no detail message.
"
      end
    end

    class 966786 "IDN"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides methods to convert internationalized domain names (IDNs) between
a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.
Internationalized domain names can use characters from the entire range of
Unicode, while traditional domain names are restricted to ASCII characters.
ACE is an encoding of Unicode strings that uses only ASCII characters and
can be used with software (such as the Domain Name System) that only
understands traditional domain names.

<p>Internationalized domain names are defined in <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>.
RFC 3490 defines two operations: ToASCII and ToUnicode. These 2 operations employ
<a href=\"http://www.ietf.org/rfc/rfc3491.txt\">Nameprep</a> algorithm, which is a
profile of <a href=\"http://www.ietf.org/rfc/rfc3454.txt\">Stringprep</a>, and
<a href=\"http://www.ietf.org/rfc/rfc3492.txt\">Punycode</a> algorithm to convert
domain name string back and forth.

<p>The behavior of aforementioned conversion process can be adjusted by various flags:
  <ul>
    <li>If the ALLOW_UNASSIGNED flag is used, the domain name string to be converted
        can contain code points that are unassigned in Unicode 3.2, which is the
        Unicode version on which IDN conversion is based. If the flag is not used,
        the presence of such unassigned code points is treated as an error.
    <li>If the USE_STD3_ASCII_RULES flag is used, ASCII strings are checked against <a href=\"http://www.ietf.org/rfc/rfc1122.txt\">RFC 1122</a> and <a href=\"http://www.ietf.org/rfc/rfc1123.txt\">RFC 1123</a>.
        It is an error if they don't meet the requirements.
  </ul>
These flags can be logically OR'ed together.

<p>The security consideration is important with respect to internationalization
domain name support. For example, English domain names may be <i>homographed</i>
- maliciously misspelled by substitution of non-Latin letters.
<a href=\"http://www.unicode.org/reports/tr36/\">Unicode Technical Report #36</a>
discusses security issues of IDN support as well as possible solutions.
Applications are responsible for taking adequate security measures when using
international domain names.

@author Edward Wang
@since 1.6

"
      attribute 1771138 "ALLOW_UNASSIGNED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x01"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag to allow processing of unassigned code points

"
      end

      attribute 1771266 "USE_STD3_ASCII_RULES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x02"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag to turn on the check against STD-3 ASCII rules

"
      end

      operation 7476994 "toASCII"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "input" type class_ref 128130 // String
	  param in name "flag" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a string from Unicode to ASCII Compatible Encoding (ACE),
as defined by the ToASCII operation of <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>.

<p>ToASCII operation can fail. ToASCII fails if any step of it fails.
If ToASCII operation fails, an IllegalArgumentException will be thrown.
In this case, the input string should not be used in an internationalized domain name.

<p> A label is an individual part of a domain name. The original ToASCII operation,
as defined in RFC 3490, only operates on a single label. This method can handle
both label and entire domain name, by assuming that labels in a domain name are
always separated by dots. The following characters are recognized as dots:
&#0092;u002E (full stop), &#0092;u3002 (ideographic full stop), &#0092;uFF0E (fullwidth full stop),
and &#0092;uFF61 (halfwidth ideographic full stop). if dots are
used as label separators, this method also changes all of them to &#0092;u002E (full stop)
in output translated string.

@param input     the string to be processed
@param flag      process flag; can be 0 or any logical OR of possible flags

@return          the translated {@code String}

@throws IllegalArgumentException   if the input string doesn't conform to RFC 3490 specification
"
      end

      operation 7477122 "toASCII"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "input" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a string from Unicode to ASCII Compatible Encoding (ACE),
as defined by the ToASCII operation of <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>.

<p> This convenience method works as if by invoking the
two-argument counterpart as follows:
<blockquote>
{@link #toASCII(String, int) toASCII}(input,&nbsp;0);
</blockquote>

@param input     the string to be processed

@return          the translated {@code String}

@throws IllegalArgumentException   if the input string doesn't conform to RFC 3490 specification
"
      end

      operation 7477250 "toUnicode"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "input" type class_ref 128130 // String
	  param in name "flag" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
as defined by the ToUnicode operation of <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>.

<p>ToUnicode never fails. In case of any error, the input string is returned unmodified.

<p> A label is an individual part of a domain name. The original ToUnicode operation,
as defined in RFC 3490, only operates on a single label. This method can handle
both label and entire domain name, by assuming that labels in a domain name are
always separated by dots. The following characters are recognized as dots:
&#0092;u002E (full stop), &#0092;u3002 (ideographic full stop), &#0092;uFF0E (fullwidth full stop),
and &#0092;uFF61 (halfwidth ideographic full stop).

@param input     the string to be processed
@param flag      process flag; can be 0 or any logical OR of possible flags

@return          the translated {@code String}
"
      end

      operation 7477378 "toUnicode"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "input" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
as defined by the ToUnicode operation of <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>.

<p> This convenience method works as if by invoking the
two-argument counterpart as follows:
<blockquote>
{@link #toUnicode(String, int) toUnicode}(input,&nbsp;0);
</blockquote>

@param input     the string to be processed

@return          the translated {@code String}
"
      end

      classrelation 3246210 // ACE_PREFIX (<unidirectional association>)
	relation 3246210 --->
	  a role_name "ACE_PREFIX" init_value " \"xn--\"" class_relation const_relation private
	    comment " ---------------- Private members -------------- 
 ACE Prefix is \"xn--\"
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3246210 // ACE_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1771394 "ACE_PREFIX_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " ACE_PREFIX.length()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1771522 "MAX_LABEL_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 63"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1771650 "namePrep"
	class_attribute private explicit_type "StringPrep"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " single instance of nameprep
"
      end

      extra_member 164226 "initialization"
	
	cpp "" ""
	java "  static {
        InputStream stream = null;

        try {
            final String IDN_PROFILE = \"uidna.spp\";
            if (System.getSecurityManager() != null) {
                stream = AccessController.doPrivileged(new PrivilegedAction<InputStream>() {
                    public InputStream run() {
                        return StringPrep.class.getResourceAsStream(IDN_PROFILE);
                    }
                });
            } else {
                stream = StringPrep.class.getResourceAsStream(IDN_PROFILE);
            }

            namePrep = new StringPrep(stream);
            stream.close();
        } catch (IOException e) {
            // should never reach here
            assert false;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7477506 "IDN"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Private operations -------------- 

 to suppress the default zero-argument constructor
"
      end

      operation 7477634 "toASCIIInternal"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "label" type class_ref 128130 // String
	  param in name "flag" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " toASCII operation; should only apply to a single label
"
      end

      operation 7477762 "toUnicodeInternal"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "label" type class_ref 128130 // String
	  param in name "flag" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " toUnicode operation; should only apply to a single label
"
      end

      operation 7477890 "isNonLDHAsciiCodePoint"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " LDH stands for \"letter/digit/hyphen\", with characters restricted to the
 26-letter Latin alphabet <A-Z a-z>, the digits <0-9>, and the hyphen
 <->.
 Non LDH refers to characters in the ASCII range, but which are not
 letters, digits or the hypen.

 non-LDH = 0..0x2C, 0x2E..0x2F, 0x3A..0x40, 0x5B..0x60, 0x7B..0x7F
"
      end

      operation 7478018 "searchDots"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " search dots in a string and return the index of that character;
 or if there is no dots, return the length of input string
 dots might be: \\u002E (full stop), \\u3002 (ideographic full stop), \\uFF0E (fullwidth full stop),
 and \\uFF61 (halfwidth ideographic full stop).
"
      end

      operation 7478146 "isRootLabel"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " to check if a string is a root label, \".\".
"
      end

      operation 7478274 "isLabelSeparator"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " to check if a character is a label separator, i.e. a dot character.
"
      end

      operation 7478402 "isAllASCII"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "input" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " to check if a string only contains US-ASCII code point
"
      end

      operation 7478530 "startsWithACEPrefix"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "input" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " to check if a string starts with ACE-prefix
"
      end

      operation 7478658 "toASCIILower"
	class_operation private explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7478786 "toASCIILower"
	class_operation private return_type class_ref 166018 // StringBuffer
	nparams 1
	  param inout name "input" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 966914 "Inet4Address"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents an Internet Protocol version 4 (IPv4) address.
Defined by <a href=\"http://www.ietf.org/rfc/rfc790.txt\">
<i>RFC&nbsp;790: Assigned Numbers</i></a>,
<a href=\"http://www.ietf.org/rfc/rfc1918.txt\">
<i>RFC&nbsp;1918: Address Allocation for Private Internets</i></a>,
and <a href=\"http://www.ietf.org/rfc/rfc2365.txt\"><i>RFC&nbsp;2365:
Administratively Scoped IP Multicast</i></a>

<h3> <A NAME=\"format\">Textual representation of IP addresses</a> </h3>

Textual representation of IPv4 address used as input to methods
takes one of the following forms:

<blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
<tr><td>{@code d.d.d.d}</td></tr>
<tr><td>{@code d.d.d}</td></tr>
<tr><td>{@code d.d}</td></tr>
<tr><td>{@code d}</td></tr>
</table></blockquote>

<p> When four parts are specified, each is interpreted as a byte of
data and assigned, from left to right, to the four bytes of an IPv4
address.

<p> When a three part address is specified, the last part is
interpreted as a 16-bit quantity and placed in the right most two
bytes of the network address. This makes the three part address
format convenient for specifying Class B net- work addresses as
128.net.host.

<p> When a two part address is supplied, the last part is
interpreted as a 24-bit quantity and placed in the right most three
bytes of the network address. This makes the two part address
format convenient for specifying Class A network addresses as
net.host.

<p> When only one part is given, the value is stored directly in
the network address without any byte rearrangement.

<p> For methods that return a textual representation as output
value, the first form, i.e. a dotted-quad string, is used.

<h4> The Scope of a Multicast Address </h4>

Historically the IPv4 TTL field in the IP header has doubled as a
multicast scope field: a TTL of 0 means node-local, 1 means
link-local, up through 32 means site-local, up through 64 means
region-local, up through 128 means continent-local, and up through
255 are global. However, the administrative scoping is preferred.
Please refer to <a href=\"http://www.ietf.org/rfc/rfc2365.txt\">
<i>RFC&nbsp;2365: Administratively Scoped IP Multicast</i></a>
@since 1.4
"
      classrelation 3248514 // <generalisation>
	relation 3248514 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3248514 // <generalisation>
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1773570 "INADDRSZ"
	class_attribute const_attribute package explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1773698 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3286316764910316507L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from InetAddress, but Inet4Address instance
 is always replaced by an InetAddress instance before being
 serialized 
"
      end

      extra_member 164738 "initialization"
	
	cpp "" ""
	java "  static {
        init();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7486978 "Inet4Address"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7487106 "Inet4Address"
	package explicit_return_type ""
	nparams 2
	  param inout name "hostName" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7487234 "Inet4Address"
	package explicit_return_type ""
	nparams 2
	  param inout name "hostName" type class_ref 128130 // String
	  param in name "address" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7487362 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the object to be serialized with an InetAddress object.

@return the alternate object to be serialized.

@throws ObjectStreamException if a new object replacing this
object could not be created
"
      end

      operation 7487490 "isMulticastAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is an
IP multicast address. IP multicast address is a Class D
address i.e first four bits of the address are 1110.
@return a {@code boolean} indicating if the InetAddress is
an IP multicast address
@since   JDK1.1
"
      end

      operation 7487618 "isAnyLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress in a wildcard address.
@return a {@code boolean} indicating if the Inetaddress is
        a wildcard address.
@since 1.4
"
      end

      operation 7487746 "isLoopbackAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is a loopback address.

@return a {@code boolean} indicating if the InetAddress is
a loopback address; or false otherwise.
@since 1.4
"
      end

      operation 7487874 "isLinkLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is an link local address.

@return a {@code boolean} indicating if the InetAddress is
a link local address; or false if address is not a link local unicast address.
@since 1.4
"
      end

      operation 7488002 "isSiteLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is a site local address.

@return a {@code boolean} indicating if the InetAddress is
a site local address; or false if address is not a site local unicast address.
@since 1.4
"
      end

      operation 7488130 "isMCGlobal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has global scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of global scope, false if it is not
        of global scope or it is not a multicast address
@since 1.4
"
      end

      operation 7488258 "isMCNodeLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has node scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of node-local scope, false if it is not
        of node-local scope or it is not a multicast address
@since 1.4
"
      end

      operation 7488386 "isMCLinkLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has link scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of link-local scope, false if it is not
        of link-local scope or it is not a multicast address
@since 1.4
"
      end

      operation 7488514 "isMCSiteLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has site scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of site-local scope, false if it is not
        of site-local scope or it is not a multicast address
@since 1.4
"
      end

      operation 7488642 "isMCOrgLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the multicast address has organization scope.

@return a {@code boolean} indicating if the address has
        is a multicast address of organization-local scope,
        false if it is not of organization-local scope
        or it is not a multicast address
@since 1.4
"
      end

      operation 7488770 "getAddress"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the raw IP address of this {@code InetAddress}
object. The result is in network byte order: the highest order
byte of the address is in {@code getAddress()[0]}.

@return  the raw IP address of this object.
"
      end

      operation 7488898 "getHostAddress"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the IP address string in textual presentation form.

@return  the raw IP address in a string format.
@since   JDK1.0.2
"
      end

      operation 7489026 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this IP address.

@return  a hash code value for this IP address.
"
      end

      operation 7489154 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.
The result is {@code true} if and only if the argument is
not {@code null} and it represents the same IP address as
this object.
<p>
Two instances of {@code InetAddress} represent the same IP
address if the length of the byte arrays returned by
{@code getAddress} is the same for both, and each of the
array components is the same for the byte arrays.

@param   obj   the object to compare against.
@return  {@code true} if the objects are the same;
         {@code false} otherwise.
@see     java.net.InetAddress#getAddress()
"
      end

      operation 7489282 "numericToTextFormat"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "src" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utilities

Converts IPv4 binary address into a string suitable for presentation.

@param src a byte array representing an IPv4 numeric address
@return a String representing the IPv4 address in
        textual representation format
@since 1.4
"
      end

      operation 7489410 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Perform class load-time initializations.
"
      end
    end

    class 967298 "InetAddressImpl"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Package private interface to \"implementation\" used by
{@link InetAddress}.
<p>
See {@link java.net.Inet4AddressImp} and
{@link java.net.Inet6AddressImp}.

@since 1.4
"
      operation 7489538 "getLocalHostName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7489666 "lookupAllHostAddr"
	public return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "hostname" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7489794 "getHostByAddr"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7489922 "anyLocalAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7490050 "loopbackAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7490178 "isReachable"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param in name "timeout" explicit_type "int"
	  param inout name "netif" type class_ref 962306 // NetworkInterface
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 967682 "InetAddressImplFactory"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple factory to create the impl
"
      operation 7486722 "create"
	class_operation package return_type class_ref 967298 // InetAddressImpl
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7486850 "isIPv6Supported"
	class_operation package explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end
    end

    class 967810 "Inet4AddressImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Package private implementation of InetAddressImpl for IPv4.

@since 1.4
"
      classrelation 3248642 // <realization>
	relation 3248642 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3248642 // <realization>
	  b parent class_ref 967298 // InetAddressImpl
      end

      operation 7490306 "getLocalHostName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7490434 "lookupAllHostAddr"
	public return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "hostname" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7490562 "getHostByAddr"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7490690 "isReachable0"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param in name "timeout" explicit_type "int"
	  param inout name "ifaddr" explicit_type "byte"
	multiplicity "[]"
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
      end

      operation 7490818 "anyLocalAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7490946 "loopbackAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7491074 "isReachable"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param in name "timeout" explicit_type "int"
	  param inout name "netif" type class_ref 962306 // NetworkInterface
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3248770 // anyLocalAddress (<unidirectional association>)
	relation 3248770 --->
	  a role_name "anyLocalAddress" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3248770 // anyLocalAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      classrelation 3248898 // loopbackAddress (<unidirectional association>)
	relation 3248898 --->
	  a role_name "loopbackAddress" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3248898 // loopbackAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end
    end

    class 967938 "Inet6Address"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents an Internet Protocol version 6 (IPv6) address.
Defined by <a href=\"http://www.ietf.org/rfc/rfc2373.txt\">
<i>RFC&nbsp;2373: IP Version 6 Addressing Architecture</i></a>.

<h3> <A NAME=\"format\">Textual representation of IP addresses</a> </h3>

Textual representation of IPv6 address used as input to methods
takes one of the following forms:

<ol>
  <li><p> <A NAME=\"lform\">The preferred form</a> is x:x:x:x:x:x:x:x,
  where the 'x's are
  the hexadecimal values of the eight 16-bit pieces of the
  address. This is the full form.  For example,

  <blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
  <tr><td>{@code 1080:0:0:0:8:800:200C:417A}<td></tr>
  </table></blockquote>

  <p> Note that it is not necessary to write the leading zeros in
  an individual field. However, there must be at least one numeral
  in every field, except as described below.</li>

  <li><p> Due to some methods of allocating certain styles of IPv6
  addresses, it will be common for addresses to contain long
  strings of zero bits. In order to make writing addresses
  containing zero bits easier, a special syntax is available to
  compress the zeros. The use of \"::\" indicates multiple groups
  of 16-bits of zeros. The \"::\" can only appear once in an address.
  The \"::\" can also be used to compress the leading and/or trailing
  zeros in an address. For example,

  <blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
  <tr><td>{@code 1080::8:800:200C:417A}<td></tr>
  </table></blockquote>

  <li><p> An alternative form that is sometimes more convenient
  when dealing with a mixed environment of IPv4 and IPv6 nodes is
  x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values
  of the six high-order 16-bit pieces of the address, and the 'd's
  are the decimal values of the four low-order 8-bit pieces of the
  standard IPv4 representation address, for example,

  <blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
  <tr><td>{@code ::FFFF:129.144.52.38}<td></tr>
  <tr><td>{@code ::129.144.52.38}<td></tr>
  </table></blockquote>

  <p> where \"::FFFF:d.d.d.d\" and \"::d.d.d.d\" are, respectively, the
  general forms of an IPv4-mapped IPv6 address and an
  IPv4-compatible IPv6 address. Note that the IPv4 portion must be
  in the \"d.d.d.d\" form. The following forms are invalid:

  <blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
  <tr><td>{@code ::FFFF:d.d.d}<td></tr>
  <tr><td>{@code ::FFFF:d.d}<td></tr>
  <tr><td>{@code ::d.d.d}<td></tr>
  <tr><td>{@code ::d.d}<td></tr>
  </table></blockquote>

  <p> The following form:

  <blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
  <tr><td>{@code ::FFFF:d}<td></tr>
  </table></blockquote>

  <p> is valid, however it is an unconventional representation of
  the IPv4-compatible IPv6 address,

  <blockquote><table cellpadding=0 cellspacing=0 summary=\"layout\">
  <tr><td>{@code ::255.255.0.d}<td></tr>
  </table></blockquote>

  <p> while \"::d\" corresponds to the general IPv6 address
  \"0:0:0:0:0:0:0:d\".</li>
</ol>

<p> For methods that return a textual representation as output
value, the full form is used. Inet6Address will return the full
form because it is unambiguous when used in combination with other
textual data.

<h4> Special IPv6 address </h4>

<blockquote>
<table cellspacing=2 summary=\"Description of IPv4-mapped address\">
<tr><th valign=top><i>IPv4-mapped address</i></th>
        <td>Of the form::ffff:w.x.y.z, this IPv6 address is used to
        represent an IPv4 address. It allows the native program to
        use the same address data structure and also the same
        socket when communicating with both IPv4 and IPv6 nodes.

        <p>In InetAddress and Inet6Address, it is used for internal
        representation; it has no functional role. Java will never
        return an IPv4-mapped address.  These classes can take an
        IPv4-mapped address as input, both in byte array and text
        representation. However, it will be converted into an IPv4
        address.</td></tr>
</table></blockquote>

<h4><A NAME=\"scoped\">Textual representation of IPv6 scoped addresses</a></h4>

<p> The textual representation of IPv6 addresses as described above can be
extended to specify IPv6 scoped addresses. This extension to the basic
addressing architecture is described in [draft-ietf-ipngwg-scoping-arch-04.txt].

<p> Because link-local and site-local addresses are non-global, it is possible
that different hosts may have the same destination address and may be
reachable through different interfaces on the same originating system. In
this case, the originating system is said to be connected to multiple zones
of the same scope. In order to disambiguate which is the intended destination
zone, it is possible to append a zone identifier (or <i>scope_id</i>) to an
IPv6 address.

<p> The general format for specifying the <i>scope_id</i> is the following:

<blockquote><i>IPv6-address</i>%<i>scope_id</i></blockquote>
<p> The IPv6-address is a literal IPv6 address as described above.
The <i>scope_id</i> refers to an interface on the local system, and it can be
specified in two ways.
<ol><li><i>As a numeric identifier.</i> This must be a positive integer
that identifies the particular interface and scope as understood by the
system. Usually, the numeric values can be determined through administration
tools on the system. Each interface may have multiple values, one for each
scope. If the scope is unspecified, then the default value used is zero.</li>
<li><i>As a string.</i> This must be the exact string that is returned by
{@link java.net.NetworkInterface#getName()} for the particular interface in
question. When an Inet6Address is created in this way, the numeric scope-id
is determined at the time the object is created by querying the relevant
NetworkInterface.</li></ol>

<p> Note also, that the numeric <i>scope_id</i> can be retrieved from
Inet6Address instances returned from the NetworkInterface class. This can be
used to find out the current scope ids configured on the system.
@since 1.4
"
      classrelation 3249026 // <generalisation>
	relation 3249026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3249026 // <generalisation>
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1773826 "INADDRSZ"
	class_attribute const_attribute package explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1773954 "cached_scope_id"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "cached scope_id - for link-local address use only.

 0"
      end

      class 968066 "Inet6AddressHolder"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7491202 "Inet6AddressHolder"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7491330 "Inet6AddressHolder"
	  private explicit_return_type ""
	  nparams 5
	    param inout name "ipaddress" explicit_type "byte"
	  multiplicity "[]"
	    param in name "scope_id" explicit_type "int"
	    param inout name "scope_id_set" explicit_type "boolean"
	    param inout name "ifname" type class_ref 962306 // NetworkInterface
	    param inout name "scope_ifname_set" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1774082 "ipaddress"
	  package explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Holds a 128-bit (16 bytes) IPv6 address.

"
	end

	attribute 1774210 "scope_id"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "scope_id. The scope specified when the object is created. If the object
is created with an interface name, then the scope_id is not determined
until the time it is needed.

 0"
	end

	attribute 1774338 "scope_id_set"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "This will be set to true when the scope_id field contains a valid
integer scope_id.

 false"
	end

	classrelation 3249154 // scope_ifname (<unidirectional association>)
	  relation 3249154 --->
	    a role_name "scope_ifname" package
	      comment "
scoped interface. scope_id is derived from this as the scope_id of the first
address whose scope is the same as this address for the named interface.

 null"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3249154 // scope_ifname (<unidirectional association>)
	    b parent class_ref 962306 // NetworkInterface
	end

	attribute 1774466 "scope_ifname_set"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "set if the object is constructed with a scoped
interface instead of a numeric scope id.

 false;"
	end

	operation 7491458 "setAddr"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "addr" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7491586 "init"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "addr" explicit_type "byte"
	  multiplicity "[]"
	    param in name "scope_id" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7491714 "init"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "addr" explicit_type "byte"
	  multiplicity "[]"
	    param inout name "nif" type class_ref 962306 // NetworkInterface
	  nexceptions 1
	    exception class_ref 246786 // UnknownHostException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7491842 "getHostAddress"
	  package return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7491970 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492098 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492226 "isIPv4CompatibleAddress"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492354 "isMulticastAddress"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492482 "isAnyLocalAddress"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492610 "isLoopbackAddress"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492738 "isLinkLocalAddress"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492866 "isSiteLocalAddress"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7492994 "isMCGlobal"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7493122 "isMCNodeLocal"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7493250 "isMCLinkLocal"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7493378 "isMCSiteLocal"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7493506 "isMCOrgLocal"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3249282 // holder6 (<unidirectional association>)
	relation 3249282 --->
	  a role_name "holder6" const_relation private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3249282 // holder6 (<unidirectional association>)
	  b parent class_ref 968066 // Inet6AddressHolder
      end

      attribute 1774594 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6880410070516793377L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 164866 "initialization"
	
	cpp "" ""
	java "  static { init(); }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7493634 "Inet6Address"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7493762 "Inet6Address"
	package explicit_return_type ""
	nparams 3
	  param inout name "hostName" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param in name "scope_id" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " checking of value for scope_id should be done by caller
scope_id must be >= 0, or -1 to indicate not being set
"
      end

      operation 7493890 "Inet6Address"
	package explicit_return_type ""
	nparams 2
	  param inout name "hostName" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7494018 "Inet6Address"
	package explicit_return_type ""
	nparams 3
	  param inout name "hostName" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "nif" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7494146 "Inet6Address"
	package explicit_return_type ""
	nparams 3
	  param inout name "hostName" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "ifname" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7494274 "getByAddress"
	class_operation public return_type class_ref 967938 // Inet6Address
	nparams 3
	  param inout name "host" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "nif" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an Inet6Address in the exact manner of {@link
InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is
set to the value corresponding to the given interface for the address
type specified in {@code addr}. The call will fail with an
UnknownHostException if the given interface does not have a numeric
scope_id assigned for the given address type (eg. link-local or site-local).
See <a href=\"Inet6Address.html#scoped\">here</a> for a description of IPv6
scoped addresses.

@param host the specified host
@param addr the raw IP address in network byte order
@param nif an interface this address must be associated with.
@return  an Inet6Address object created from the raw IP address.
@throws  UnknownHostException
         if IP address is of illegal length, or if the interface does not
         have a numeric scope_id assigned for the given address type.

@since 1.5
"
      end

      operation 7494402 "getByAddress"
	class_operation public return_type class_ref 967938 // Inet6Address
	nparams 3
	  param inout name "host" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param in name "scope_id" explicit_type "int"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an Inet6Address in the exact manner of {@link
InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is
set to the given numeric value. The scope_id is not checked to determine
if it corresponds to any interface on the system.
See <a href=\"Inet6Address.html#scoped\">here</a> for a description of IPv6
scoped addresses.

@param host the specified host
@param addr the raw IP address in network byte order
@param scope_id the numeric scope_id for the address.
@return  an Inet6Address object created from the raw IP address.
@throws  UnknownHostException  if IP address is of illegal length.

@since 1.5
"
      end

      operation 7494530 "initstr"
	private explicit_return_type "void"
	nparams 3
	  param inout name "hostName" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "ifname" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7494658 "initif"
	private explicit_return_type "void"
	nparams 3
	  param inout name "hostName" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "nif" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7494786 "isDifferentLocalAddressType"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "thisAddr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "otherAddr" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " check the two Ipv6 addresses and return false if they are both
non global address types, but not the same.
(ie. one is sitelocal and the other linklocal)
return true otherwise.
"
      end

      operation 7494914 "deriveNumericScope"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "thisAddr" explicit_type "byte"
	multiplicity "[]"
	  param inout name "ifc" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7495042 "deriveNumericScope"
	private explicit_return_type "int"
	nparams 1
	  param inout name "ifname" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3249410 // serialPersistentFields (<unidirectional association>)
	relation 3249410 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
         new ObjectStreamField(\"ipaddress\", byte[].class),
         new ObjectStreamField(\"scope_id\", int.class),
         new ObjectStreamField(\"scope_id_set\", boolean.class),
         new ObjectStreamField(\"scope_ifname_set\", boolean.class),
         new ObjectStreamField(\"ifname\", String.class)
    }" class_relation const_relation private
	    comment "
@serialField ipaddress byte[]
@serialField scope_id int
@serialField scope_id_set boolean
@serialField scope_ifname_set boolean
@serialField ifname String

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3249410 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 1774722 "FIELDS_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1774850 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 164994 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            sun.misc.Unsafe unsafe = sun.misc.Unsafe.getUnsafe();
            FIELDS_OFFSET = unsafe.objectFieldOffset(
                    Inet6Address.class.getDeclaredField(\"holder6\"));
            UNSAFE = unsafe;
        } catch (ReflectiveOperationException e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7495170 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "restore the state of this object from stream
including the scope information, only if the
scoped interface name is valid on this system
"
      end

      operation 7495298 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "default behavior is overridden in order to write the
scope_ifname field as a String, rather than a NetworkInterface
which is not serializable
"
      end

      operation 7495426 "isMulticastAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the InetAddress is an IP multicast
address. 11111111 at the start of the address identifies the
address as being a multicast address.

@return a {@code boolean} indicating if the InetAddress is an IP
        multicast address

@since JDK1.1
"
      end

      operation 7495554 "isAnyLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the InetAddress in a wildcard address.

@return a {@code boolean} indicating if the Inetaddress is
        a wildcard address.

@since 1.4
"
      end

      operation 7495682 "isLoopbackAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the InetAddress is a loopback address.

@return a {@code boolean} indicating if the InetAddress is a loopback
        address; or false otherwise.

@since 1.4
"
      end

      operation 7495810 "isLinkLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the InetAddress is an link local address.

@return a {@code boolean} indicating if the InetAddress is a link local
        address; or false if address is not a link local unicast address.

@since 1.4
"
      end

      operation 7495938 "isLinkLocalAddress"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "ipaddress" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " static version of above "
      end

      operation 7496066 "isSiteLocalAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the InetAddress is a site local address.

@return a {@code boolean} indicating if the InetAddress is a site local
        address; or false if address is not a site local unicast address.

@since 1.4
"
      end

      operation 7496194 "isSiteLocalAddress"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "ipaddress" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " static version of above "
      end

      operation 7496322 "isMCGlobal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the multicast address has global scope.

@return a {@code boolean} indicating if the address has is a multicast
        address of global scope, false if it is not of global scope or
        it is not a multicast address

@since 1.4
"
      end

      operation 7496450 "isMCNodeLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the multicast address has node scope.

@return a {@code boolean} indicating if the address has is a multicast
        address of node-local scope, false if it is not of node-local
        scope or it is not a multicast address

@since 1.4
"
      end

      operation 7496578 "isMCLinkLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the multicast address has link scope.

@return a {@code boolean} indicating if the address has is a multicast
        address of link-local scope, false if it is not of link-local
        scope or it is not a multicast address

@since 1.4
"
      end

      operation 7496706 "isMCSiteLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the multicast address has site scope.

@return a {@code boolean} indicating if the address has is a multicast
        address of site-local scope, false if it is not  of site-local
        scope or it is not a multicast address

@since 1.4
"
      end

      operation 7496834 "isMCOrgLocal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Utility routine to check if the multicast address has organization scope.

@return a {@code boolean} indicating if the address has is a multicast
        address of organization-local scope, false if it is not of
        organization-local scope or it is not a multicast address

@since 1.4
"
      end

      operation 7496962 "getAddress"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the raw IP address of this {@code InetAddress} object. The result
is in network byte order: the highest order byte of the address is in
{@code getAddress()[0]}.

@return  the raw IP address of this object.
"
      end

      operation 7497090 "getScopeId"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the numeric scopeId, if this instance is associated with
an interface. If no scoped_id is set, the returned value is zero.

@return the scopeId, or zero if not set.

@since 1.5
"
      end

      operation 7497218 "getScopedInterface"
	public return_type class_ref 962306 // NetworkInterface
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the scoped interface, if this instance was created with
with a scoped interface.

@return the scoped interface, or null if not set.
@since 1.5
"
      end

      operation 7497346 "getHostAddress"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the IP address string in textual presentation. If the instance
was created specifying a scope identifier then the scope id is appended
to the IP address preceded by a \"%\" (per-cent) character. This can be
either a numeric value or a string, depending on which was used to create
the instance.

@return  the raw IP address in a string format.
"
      end

      operation 7497474 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a hashcode for this IP address.

@return  a hash code value for this IP address.
"
      end

      operation 7497602 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this object against the specified object. The result is {@code
true} if and only if the argument is not {@code null} and it represents
the same IP address as this object.

<p> Two instances of {@code InetAddress} represent the same IP address
if the length of the byte arrays returned by {@code getAddress} is the
same for both, and each of the array components is the same for the byte
arrays.

@param   obj   the object to compare against.

@return  {@code true} if the objects are the same; {@code false} otherwise.

@see     java.net.InetAddress#getAddress()
"
      end

      operation 7497730 "isIPv4CompatibleAddress"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to check if the InetAddress is an
IPv4 compatible IPv6 address.

@return a {@code boolean} indicating if the InetAddress is an IPv4
        compatible IPv6 address; or false if address is IPv4 address.

@since 1.4
"
      end

      attribute 1774978 "INT16SZ"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Utilities
"
      end

      operation 7497858 "numericToTextFormat"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "src" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert IPv6 binary address into presentation (printable) format.

@param src a byte array representing the IPv6 numeric address
@return a String representing an IPv6 address in
        textual representation format
@since 1.4
"
      end

      operation 7497986 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Perform class load-time initializations.
"
      end
    end

    class 968194 "Inet6AddressImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Package private implementation of InetAddressImpl for dual
IPv4/IPv6 stack.
<p>
If InetAddress.preferIPv6Address is true then anyLocalAddress(),
loopbackAddress(), and localHost() will return IPv6 addresses,
otherwise IPv4 addresses.

@since 1.4
"
      classrelation 3249538 // <realization>
	relation 3249538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3249538 // <realization>
	  b parent class_ref 967298 // InetAddressImpl
      end

      operation 7498114 "getLocalHostName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7498242 "lookupAllHostAddr"
	public return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "hostname" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7498370 "getHostByAddr"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7498498 "isReachable0"
	private explicit_return_type "boolean"
	nparams 6
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	  param in name "scope" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	  param inout name "inf" explicit_type "byte"
	multiplicity "[]"
	  param in name "ttl" explicit_type "int"
	  param in name "if_scope" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
s"
	
	
	
      end

      operation 7498626 "isReachable"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "addr" type class_ref 513154 // InetAddress
	  param in name "timeout" explicit_type "int"
	  param inout name "netif" type class_ref 962306 // NetworkInterface
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7498754 "anyLocalAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7498882 "loopbackAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3249666 // anyLocalAddress (<unidirectional association>)
	relation 3249666 --->
	  a role_name "anyLocalAddress" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3249666 // anyLocalAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      classrelation 3249794 // loopbackAddress (<unidirectional association>)
	relation 3249794 --->
	  a role_name "loopbackAddress" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3249794 // loopbackAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end
    end

    class 968322 "InetAddressContainer"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3249922 // addr (<unidirectional association>)
	relation 3249922 --->
	  a role_name "addr" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3249922 // addr (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end
    end

    class 968578 "InMemoryCookieStore"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple in-memory java.net.CookieStore implementation

@author Edward Wang
@since 1.6
"
      classrelation 3250818 // <realization>
	relation 3250818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3250818 // <realization>
	  b parent class_ref 964610 // CookieStore
      end

      classrelation 3250946 // cookieJar (<unidirectional association>)
	relation 3250946 --->
	  a role_name "cookieJar" init_value " null" private
	    comment " the in-memory representation of cookies
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<HttpCookie> ${name}${value};
"
	    classrelation_ref 3250946 // cookieJar (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3251074 // domainIndex (<unidirectional association>)
	relation 3251074 --->
	  a role_name "domainIndex" init_value " null" private
	    comment " the cookies are indexed by its domain and associated uri (if present)
 CAUTION: when a cookie removed from main data structure (i.e. cookieJar),
          it won't be cleared in domainIndex & uriIndex. Double-check the
          presence of cookie when retrieve one form index store.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, List<HttpCookie>> ${name}${value};
"
	    classrelation_ref 3251074 // domainIndex (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3251202 // uriIndex (<unidirectional association>)
	relation 3251202 --->
	  a role_name "uriIndex" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<URI, List<HttpCookie>> ${name}${value};
"
	    classrelation_ref 3251202 // uriIndex (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3251330 // lock (<unidirectional association>)
	relation 3251330 --->
	  a role_name "lock" init_value " null" private
	    comment " use ReentrantLock instead of syncronized for scalability
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3251330 // lock (<unidirectional association>)
	  b parent class_ref 968706 // ReentrantLock
      end

      operation 7502466 "InMemoryCookieStore"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default ctor
"
      end

      operation 7502594 "add"
	public explicit_return_type "void"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "cookie" type class_ref 964738 // HttpCookie
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add one cookie into cookie store.
"
      end

      operation 7502722 "get"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HttpCookie> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get all cookies, which:
 1) given uri domain-matches with, or, associated with
    given uri when added to the cookie store.
 3) not expired.
See RFC 2965 sec. 3.3.4 for more detail.
"
      end

      operation 7502850 "getCookies"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HttpCookie> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get all cookies in cookie store, except those have expired
"
      end

      operation 7502978 "getURIs"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<URI> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get all URIs, which are associated with at least one cookie
of this cookie store.
"
      end

      operation 7503106 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "ck" type class_ref 964738 // HttpCookie
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a cookie from store
"
      end

      operation 7503234 "removeAll"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all cookies in this cookie store.
"
      end

      operation 7503362 "netscapeDomainMatches"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Private operations -------------- 

This is almost the same as HttpCookie.domainMatches except for
one difference: It won't reject cookies when the 'H' part of the
domain contains a dot ('.').
I.E.: RFC 2965 section 3.3.2 says that if host is x.y.domain.com
and the cookie domain is .domain.com, then it should be rejected.
However that's not how the real world works. Browsers don't reject and
some sites, like yahoo.com do actually expect these cookies to be
passed along.
And should be used for 'old' style cookies (aka Netscape type of cookies)
"
      end

      operation 7503490 "getInternal1"
	private explicit_return_type "void"
	nparams 4
	  param inout name "cookies" type class_ref 175362 // List
	  param inout name "cookieIndex" type class_ref 130178 // Map
	  param inout name "host" type class_ref 128130 // String
	  param inout name "secureLink" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<HttpCookie> ${p0}, ${t1}<String, List<HttpCookie>> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7503618 "getInternal2"
	private explicit_return_type "void"
	nparams 4
	  param inout name "cookies" type class_ref 175362 // List
	  param inout name "cookieIndex" type class_ref 130178 // Map
	  param inout name "comparator" type class_ref 194946 // Comparable
	  param inout name "secureLink" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<HttpCookie> ${p0}, ${t1}<T, List<HttpCookie>> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @param cookies           [OUT] contains the found cookies
 @param cookieIndex       the index
 @param comparator        the prediction to decide whether or not
                          a cookie in index should be returned"
      end

      operation 7503746 "addIndex"
	private explicit_return_type "void"
	nparams 3
	  param inout name "indexStore" type class_ref 130178 // Map
	  param inout name "index" explicit_type "T"
	  param inout name "cookie" type class_ref 964738 // HttpCookie
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T, List<HttpCookie>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " add 'cookie' indexed by 'index' into 'indexStore'"
      end

      operation 7503874 "getEffectiveURI"
	private return_type class_ref 783874 // URI
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " for cookie purpose, the effective uri should only be http://host
 the path will be taken into account when path-match algorithm applied
"
      end
    end

    class 968834 "InterfaceAddress"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a Network Interface address. In short it's an
IP address, a subnet mask and a broadcast address when the address is
an IPv4 one. An IP address and a network prefix length in the case
of IPv6 address.

@see java.net.NetworkInterface
@since 1.6
"
      classrelation 3251458 // address (<unidirectional association>)
	relation 3251458 --->
	  a role_name "address" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3251458 // address (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      classrelation 3251586 // broadcast (<unidirectional association>)
	relation 3251586 --->
	  a role_name "broadcast" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3251586 // broadcast (<unidirectional association>)
	  b parent class_ref 966914 // Inet4Address
      end

      attribute 1775746 "maskLength"
	private explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7504002 "InterfaceAddress"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package private constructor. Can't be built directly, instances are
obtained through the NetworkInterface class.
"
      end

      operation 7504130 "getAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code InetAddress} for this address.

@return the {@code InetAddress} for this address.
"
      end

      operation 7504258 "getBroadcast"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code InetAddress} for the broadcast address
for this InterfaceAddress.
<p>
Only IPv4 networks have broadcast address therefore, in the case
of an IPv6 network, {@code null} will be returned.

@return the {@code InetAddress} representing the broadcast
        address or {@code null} if there is no broadcast address.
"
      end

      operation 7504386 "getNetworkPrefixLength"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the network prefix length for this address. This is also known
as the subnet mask in the context of IPv4 addresses.
Typical IPv4 values would be 8 (255.0.0.0), 16 (255.255.0.0)
or 24 (255.255.255.0). <p>
Typical IPv6 values would be 128 (::1/128) or 10 (fe80::203:baff:fe27:1243/10)

@return a {@code short} representing the prefix length for the
        subnet of that address.
"
      end

      operation 7504514 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.
The result is {@code true} if and only if the argument is
not {@code null} and it represents the same interface address as
this object.
<p>
Two instances of {@code InterfaceAddress} represent the same
address if the InetAddress, the prefix length and the broadcast are
the same for both.

@param   obj   the object to compare against.
@return  {@code true} if the objects are the same;
         {@code false} otherwise.
@see     java.net.InterfaceAddress#hashCode()
"
      end

      operation 7504642 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this Interface address.

@return  a hash code value for this Interface address.
"
      end

      operation 7504770 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this Interface address to a {@code String}. The
string returned is of the form: InetAddress / prefix length [ broadcast address ].

@return  a string representation of this Interface address.
"
      end
    end

    class 968962 "JarURLConnection"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A URL Connection to a Java ARchive (JAR) file or an entry in a JAR
file.

<p>The syntax of a JAR URL is:

<pre>
jar:&lt;url&gt;!/{entry}
</pre>

<p>for example:

<p>{@code jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class}

<p>Jar URLs should be used to refer to a JAR file or entries in
a JAR file. The example above is a JAR URL which refers to a JAR
entry. If the entry name is omitted, the URL refers to the whole
JAR file:

{@code jar:http://www.foo.com/bar/baz.jar!/}

<p>Users should cast the generic URLConnection to a
JarURLConnection when they know that the URL they created is a JAR
URL, and they need JAR-specific functionality. For example:

<pre>
URL url = new URL(\"jar:file:/home/duke/duke.jar!/\");
JarURLConnection jarConnection = (JarURLConnection)url.openConnection();
Manifest manifest = jarConnection.getManifest();
</pre>

<p>JarURLConnection instances can only be used to read from JAR files.
It is not possible to get a {@link java.io.OutputStream} to modify or write
to the underlying JAR file using this class.
<p>Examples:

<dl>

<dt>A Jar entry
<dd>{@code jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class}

<dt>A Jar file
<dd>{@code jar:http://www.foo.com/bar/baz.jar!/}

<dt>A Jar directory
<dd>{@code jar:http://www.foo.com/bar/baz.jar!/COM/foo/}

</dl>

<p>{@code !/} is referred to as the <em>separator</em>.

<p>When constructing a JAR url via {@code new URL(context, spec)},
the following rules apply:

<ul>

<li>if there is no context URL and the specification passed to the
URL constructor doesn't contain a separator, the URL is considered
to refer to a JarFile.

<li>if there is a context URL, the context URL is assumed to refer
to a JAR file or a Jar directory.

<li>if the specification begins with a '/', the Jar directory is
ignored, and the spec is considered to be at the root of the Jar
file.

<p>Examples:

<dl>

<dt>context: <b>jar:http://www.foo.com/bar/jar.jar!/</b>,
spec:<b>baz/entry.txt</b>

<dd>url:<b>jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt</b>

<dt>context: <b>jar:http://www.foo.com/bar/jar.jar!/baz</b>,
spec:<b>entry.txt</b>

<dd>url:<b>jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt</b>

<dt>context: <b>jar:http://www.foo.com/bar/jar.jar!/baz</b>,
spec:<b>/entry.txt</b>

<dd>url:<b>jar:http://www.foo.com/bar/jar.jar!/entry.txt</b>

</dl>

</ul>

@see java.net.URL
@see java.net.URLConnection

@see java.util.jar.JarFile
@see java.util.jar.JarInputStream
@see java.util.jar.Manifest
@see java.util.zip.ZipEntry

@author Benjamin Renaud
@since 1.2
"
      classrelation 3251714 // <generalisation>
	relation 3251714 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3251714 // <generalisation>
	  b parent class_ref 783746 // URLConnection
      end

      classrelation 3251842 // jarFileURL (<unidirectional association>)
	relation 3251842 --->
	  a role_name "jarFileURL" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3251842 // jarFileURL (<unidirectional association>)
	  b parent class_ref 243458 // URL
      end

      classrelation 3251970 // entryName (<unidirectional association>)
	relation 3251970 --->
	  a role_name "entryName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3251970 // entryName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3252098 // jarFileURLConnection (<unidirectional association>)
	relation 3252098 --->
	  a role_name "jarFileURLConnection" protected
	    comment "
The connection to the JAR file URL, if the connection has been
initiated. This should be set by connect.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3252098 // jarFileURLConnection (<unidirectional association>)
	  b parent class_ref 783746 // URLConnection
      end

      operation 7504898 "JarURLConnection"
	protected explicit_return_type ""
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the new JarURLConnection to the specified URL.
@param url the URL
@throws MalformedURLException if no legal protocol
could be found in a specification string or the
string could not be parsed.
"
      end

      operation 7505026 "parseSpecs"
	private explicit_return_type "void"
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get the specs for a given url out of the cache, and compute and
cache them if they're not there.
"
      end

      operation 7505154 "getJarFileURL"
	public return_type class_ref 243458 // URL
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the URL for the Jar file for this connection.

@return the URL for the Jar file for this connection.
"
      end

      operation 7505282 "getEntryName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the entry name for this connection. This method
returns null if the JAR file URL corresponding to this
connection points to a JAR file and not a JAR file entry.

@return the entry name for this connection, if any.
"
      end

      operation 7505410 "getJarFile"
	abstract public return_type class_ref 944002 // JarFile
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the JAR file for this connection.

@return the JAR file for this connection. If the connection is
a connection to an entry of a JAR file, the JAR file object is
returned

@exception IOException if an IOException occurs while trying to
connect to the JAR file for this connection.

@see #connect
"
      end

      operation 7505538 "getManifest"
	public return_type class_ref 935810 // Manifest
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Manifest for this connection, or null if none.

@return the manifest object corresponding to the JAR file object
for this connection.

@exception IOException if getting the JAR file for this
connection causes an IOException to be thrown.

@see #getJarFile
"
      end

      operation 7505666 "getJarEntry"
	public return_type class_ref 969090 // JarEntry
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the JAR entry object for this connection, if any. This
method returns null if the JAR file URL corresponding to this
connection points to a JAR file and not a JAR file entry.

@return the JAR entry object for this connection, or null if
the JAR URL for this connection points to a JAR file.

@exception IOException if getting the JAR file for this
connection causes an IOException to be thrown.

@see #getJarFile
@see #getJarEntry
"
      end

      operation 7505794 "getAttributes"
	public return_type class_ref 969218 // Attributes
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Attributes object for this connection if the URL
for it points to a JAR file entry, null otherwise.

@return the Attributes object for this connection if the URL
for it points to a JAR file entry, null otherwise.

@exception IOException if getting the JAR entry causes an
IOException to be thrown.

@see #getJarEntry
"
      end

      operation 7505922 "getMainAttributes"
	public return_type class_ref 969218 // Attributes
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the main Attributes for the JAR file for this
connection.

@return the main Attributes for the JAR file for this
connection.

@exception IOException if getting the manifest causes an
IOException to be thrown.

@see #getJarFile
@see #getManifest
"
      end

      operation 7506050 "getCertificates"
	public return_type class_ref 319490 // Certificate
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Certificate object for this connection if the URL
for it points to a JAR file entry, null otherwise. This method
can only be called once
the connection has been completely verified by reading
from the input stream until the end of the stream has been
reached. Otherwise, this method will return {@code null}

@return the Certificate object for this connection if the URL
for it points to a JAR file entry, null otherwise.

@exception IOException if getting the JAR entry causes an
IOException to be thrown.

@see #getJarEntry
"
      end
    end

    class 969346 "MulticastSocket"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The multicast datagram socket class is useful for sending
and receiving IP multicast packets.  A MulticastSocket is
a (UDP) DatagramSocket, with additional capabilities for
joining \"groups\" of other multicast hosts on the internet.
<P>
A multicast group is specified by a class D IP address
and by a standard UDP port number. Class D IP addresses
are in the range <CODE>224.0.0.0</CODE> to <CODE>239.255.255.255</CODE>,
inclusive. The address 224.0.0.0 is reserved and should not be used.
<P>
One would join a multicast group by first creating a MulticastSocket
with the desired port, then invoking the
<CODE>joinGroup(InetAddress groupAddr)</CODE>
method:
<PRE>
// join a Multicast group and send the group salutations
...
String msg = \"Hello\";
InetAddress group = InetAddress.getByName(\"228.5.6.7\");
MulticastSocket s = new MulticastSocket(6789);
s.joinGroup(group);
DatagramPacket hi = new DatagramPacket(msg.getBytes(), msg.length(),
                            group, 6789);
s.send(hi);
// get their responses!
byte[] buf = new byte[1000];
DatagramPacket recv = new DatagramPacket(buf, buf.length);
s.receive(recv);
...
// OK, I'm done talking - leave the group...
s.leaveGroup(group);
</PRE>

When one sends a message to a multicast group, <B>all</B> subscribing
recipients to that host and port receive the message (within the
time-to-live range of the packet, see below).  The socket needn't
be a member of the multicast group to send messages to it.
<P>
When a socket subscribes to a multicast group/port, it receives
datagrams sent by other hosts to the group/port, as do all other
members of the group and port.  A socket relinquishes membership
in a group by the leaveGroup(InetAddress addr) method.  <B>
Multiple MulticastSocket's</B> may subscribe to a multicast group
and port concurrently, and they will all receive group datagrams.
<P>
Currently applets are not allowed to use multicast sockets.

@author Pavani Diwanji
@since  JDK1.1
"
      classrelation 3252354 // <generalisation>
	relation 3252354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3252354 // <generalisation>
	  b parent class_ref 527234 // DatagramSocket
      end

      attribute 1776002 "interfaceSet"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Used on some platforms to record if an outgoing interface
has been set for this socket.

"
      end

      operation 7506434 "MulticastSocket"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a multicast socket.

<p>If there is a security manager,
its {@code checkListen} method is first called
with 0 as its argument to ensure the operation is allowed.
This could result in a SecurityException.
<p>
When the socket is created the
{@link DatagramSocket#setReuseAddress(boolean)} method is
called to enable the SO_REUSEADDR socket option.

@exception IOException if an I/O exception occurs
while creating the MulticastSocket
@exception  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.
@see SecurityManager#checkListen
@see java.net.DatagramSocket#setReuseAddress(boolean)
"
      end

      operation 7506562 "MulticastSocket"
	public explicit_return_type ""
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a multicast socket and bind it to a specific port.

<p>If there is a security manager,
its {@code checkListen} method is first called
with the {@code port} argument
as its argument to ensure the operation is allowed.
This could result in a SecurityException.
<p>
When the socket is created the
{@link DatagramSocket#setReuseAddress(boolean)} method is
called to enable the SO_REUSEADDR socket option.

@param port port to use
@exception IOException if an I/O exception occurs
while creating the MulticastSocket
@exception  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.
@see SecurityManager#checkListen
@see java.net.DatagramSocket#setReuseAddress(boolean)
"
      end

      operation 7506690 "MulticastSocket"
	public explicit_return_type ""
	nparams 1
	  param inout name "bindaddr" type class_ref 962178 // SocketAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a MulticastSocket bound to the specified socket address.
<p>
Or, if the address is {@code null}, create an unbound socket.

<p>If there is a security manager,
its {@code checkListen} method is first called
with the SocketAddress port as its argument to ensure the operation is allowed.
This could result in a SecurityException.
<p>
When the socket is created the
{@link DatagramSocket#setReuseAddress(boolean)} method is
called to enable the SO_REUSEADDR socket option.

@param bindaddr Socket address to bind to, or {@code null} for
                an unbound socket.
@exception IOException if an I/O exception occurs
while creating the MulticastSocket
@exception  SecurityException  if a security manager exists and its
            {@code checkListen} method doesn't allow the operation.
@see SecurityManager#checkListen
@see java.net.DatagramSocket#setReuseAddress(boolean)

@since 1.4
"
      end

      classrelation 3252482 // ttlLock (<unidirectional association>)
	relation 3252482 --->
	  a role_name "ttlLock" init_value " new Object()" private
	    comment "
The lock on the socket's TTL. This is for set/getTTL and
send(packet,ttl).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3252482 // ttlLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3252610 // infLock (<unidirectional association>)
	relation 3252610 --->
	  a role_name "infLock" init_value " new Object()" private
	    comment "
The lock on the socket's interface - used by setInterface
and getInterface

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3252610 // infLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3252738 // infAddress (<unidirectional association>)
	relation 3252738 --->
	  a role_name "infAddress" init_value " null" private
	    comment "
The \"last\" interface set by setInterface on this MulticastSocket

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3252738 // infAddress (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      operation 7506818 "setTTL"
	public explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "byte"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set the default time-to-live for multicast packets sent out
on this {@code MulticastSocket} in order to control the
scope of the multicasts.

<p>The ttl is an <b>unsigned</b> 8-bit quantity, and so <B>must</B> be
in the range {@code 0 <= ttl <= 0xFF }.

@param ttl the time-to-live
@exception IOException if an I/O exception occurs
while setting the default time-to-live value
@deprecated use the setTimeToLive method instead, which uses
<b>int</b> instead of <b>byte</b> as the type for ttl.
@see #getTTL()
"
      end

      operation 7506946 "setTimeToLive"
	public explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the default time-to-live for multicast packets sent out
on this {@code MulticastSocket} in order to control the
scope of the multicasts.

<P> The ttl <B>must</B> be in the range {@code  0 <= ttl <=
255} or an {@code IllegalArgumentException} will be thrown.
Multicast packets sent with a TTL of {@code 0} are not transmitted
on the network but may be delivered locally.

@param  ttl
        the time-to-live

@throws  IOException
         if an I/O exception occurs while setting the
         default time-to-live value

@see #getTimeToLive()
"
      end

      operation 7507074 "getTTL"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Get the default time-to-live for multicast packets sent out on
the socket.

@exception IOException if an I/O exception occurs
while getting the default time-to-live value
@return the default time-to-live value
@deprecated use the getTimeToLive method instead, which returns
an <b>int</b> instead of a <b>byte</b>.
@see #setTTL(byte)
"
      end

      operation 7507202 "getTimeToLive"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the default time-to-live for multicast packets sent out on
the socket.
@exception IOException if an I/O exception occurs while
getting the default time-to-live value
@return the default time-to-live value
@see #setTimeToLive(int)
"
      end

      operation 7507330 "joinGroup"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mcastaddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Joins a multicast group. Its behavior may be affected by
{@code setInterface} or {@code setNetworkInterface}.

<p>If there is a security manager, this method first
calls its {@code checkMulticast} method
with the {@code mcastaddr} argument
as its argument.

@param mcastaddr is the multicast address to join

@exception IOException if there is an error joining
or when the address is not a multicast address.
@exception  SecurityException  if a security manager exists and its
{@code checkMulticast} method doesn't allow the join.

@see SecurityManager#checkMulticast(InetAddress)
"
      end

      operation 7507458 "leaveGroup"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mcastaddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Leave a multicast group. Its behavior may be affected by
{@code setInterface} or {@code setNetworkInterface}.

<p>If there is a security manager, this method first
calls its {@code checkMulticast} method
with the {@code mcastaddr} argument
as its argument.

@param mcastaddr is the multicast address to leave
@exception IOException if there is an error leaving
or when the address is not a multicast address.
@exception  SecurityException  if a security manager exists and its
{@code checkMulticast} method doesn't allow the operation.

@see SecurityManager#checkMulticast(InetAddress)
"
      end

      operation 7507586 "joinGroup"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mcastaddr" type class_ref 962178 // SocketAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Joins the specified multicast group at the specified interface.

<p>If there is a security manager, this method first
calls its {@code checkMulticast} method
with the {@code mcastaddr} argument
as its argument.

@param mcastaddr is the multicast address to join
@param netIf specifies the local interface to receive multicast
       datagram packets, or <i>null</i> to defer to the interface set by
      {@link MulticastSocket#setInterface(InetAddress)} or
      {@link MulticastSocket#setNetworkInterface(NetworkInterface)}

@exception IOException if there is an error joining
or when the address is not a multicast address.
@exception  SecurityException  if a security manager exists and its
{@code checkMulticast} method doesn't allow the join.
@throws  IllegalArgumentException if mcastaddr is null or is a
         SocketAddress subclass not supported by this socket

@see SecurityManager#checkMulticast(InetAddress)
@since 1.4
"
      end

      operation 7507714 "leaveGroup"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mcastaddr" type class_ref 962178 // SocketAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Leave a multicast group on a specified local interface.

<p>If there is a security manager, this method first
calls its {@code checkMulticast} method
with the {@code mcastaddr} argument
as its argument.

@param mcastaddr is the multicast address to leave
@param netIf specifies the local interface or <i>null</i> to defer
            to the interface set by
            {@link MulticastSocket#setInterface(InetAddress)} or
            {@link MulticastSocket#setNetworkInterface(NetworkInterface)}
@exception IOException if there is an error leaving
or when the address is not a multicast address.
@exception  SecurityException  if a security manager exists and its
{@code checkMulticast} method doesn't allow the operation.
@throws  IllegalArgumentException if mcastaddr is null or is a
         SocketAddress subclass not supported by this socket

@see SecurityManager#checkMulticast(InetAddress)
@since 1.4
"
      end

      operation 7507842 "setInterface"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inf" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the multicast network interface used by methods
whose behavior would be affected by the value of the
network interface. Useful for multihomed hosts.
@param inf the InetAddress
@exception SocketException if there is an error in
the underlying protocol, such as a TCP error.
@see #getInterface()
"
      end

      operation 7507970 "getInterface"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the address of the network interface used for
multicast packets.

@return An {@code InetAddress} representing
 the address of the network interface used for
 multicast packets.

@exception SocketException if there is an error in
the underlying protocol, such as a TCP error.

@see #setInterface(java.net.InetAddress)
"
      end

      operation 7508098 "setNetworkInterface"
	public explicit_return_type "void"
	nparams 1
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify the network interface for outgoing multicast datagrams
sent on this socket.

@param netIf the interface
@exception SocketException if there is an error in
the underlying protocol, such as a TCP error.
@see #getNetworkInterface()
@since 1.4
"
      end

      operation 7508226 "getNetworkInterface"
	public return_type class_ref 962306 // NetworkInterface
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the multicast network interface set.

@exception SocketException if there is an error in
the underlying protocol, such as a TCP error.
@return the multicast {@code NetworkInterface} currently set
@see #setNetworkInterface(NetworkInterface)
@since 1.4
"
      end

      operation 7508354 "setLoopbackMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "disable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disable/Enable local loopback of multicast datagrams
The option is used by the platform's networking code as a hint
for setting whether multicast data will be looped back to
the local socket.

<p>Because this option is a hint, applications that want to
verify what loopback mode is set to should call
{@link #getLoopbackMode()}
@param disable {@code true} to disable the LoopbackMode
@throws SocketException if an error occurs while setting the value
@since 1.4
@see #getLoopbackMode
"
      end

      operation 7508482 "getLoopbackMode"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the setting for local loopback of multicast datagrams.

@throws SocketException  if an error occurs while getting the value
@return true if the LoopbackMode has been disabled
@since 1.4
@see #setLoopbackMode
"
      end

      operation 7508610 "send"
	public explicit_return_type "void"
	nparams 2
	  param inout name "p" type class_ref 527490 // DatagramPacket
	  param in name "ttl" explicit_type "byte"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sends a datagram packet to the destination, with a TTL (time-
to-live) other than the default for the socket.  This method
need only be used in instances where a particular TTL is desired;
otherwise it is preferable to set a TTL once on the socket, and
use that default TTL for all packets.  This method does <B>not
</B> alter the default TTL for the socket. Its behavior may be
affected by {@code setInterface}.

<p>If there is a security manager, this method first performs some
security checks. First, if {@code p.getAddress().isMulticastAddress()}
is true, this method calls the
security manager's {@code checkMulticast} method
with {@code p.getAddress()} and {@code ttl} as its arguments.
If the evaluation of that expression is false,
this method instead calls the security manager's
{@code checkConnect} method with arguments
{@code p.getAddress().getHostAddress()} and
{@code p.getPort()}. Each call to a security manager method
could result in a SecurityException if the operation is not allowed.

@param p is the packet to be sent. The packet should contain
the destination multicast ip address and the data to be sent.
One does not need to be the member of the group to send
packets to a destination multicast address.
@param ttl optional time to live for multicast packet.
default ttl is 1.

@exception IOException is raised if an error occurs i.e
error while setting ttl.
@exception  SecurityException  if a security manager exists and its
            {@code checkMulticast} or {@code checkConnect}
            method doesn't allow the send.

@deprecated Use the following code or its equivalent instead:
 ......
 int ttl = mcastSocket.getTimeToLive();
 mcastSocket.setTimeToLive(newttl);
 mcastSocket.send(p);
 mcastSocket.setTimeToLive(ttl);
 ......

@see DatagramSocket#send
@see DatagramSocket#receive
@see SecurityManager#checkMulticast(java.net.InetAddress, byte)
@see SecurityManager#checkConnect
"
      end
    end

    class 969474 "NetPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is for various network permissions.
A NetPermission contains a name (also referred to as a \"target name\") but
no actions list; you either have the named permission
or you don't.
<P>
The target name is the name of the network permission (see below). The naming
convention follows the  hierarchical property naming convention.
Also, an asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match. For example: \"foo.*\" and \"*\" signify a wildcard
match, while \"*foo\" and \"a*b\" do not.
<P>
The following table lists all the possible NetPermission target names,
and for each provides a description of what the permission allows
and a discussion of the risks of granting code the permission.

<table border=1 cellpadding=5 summary=\"Permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>
<tr>
  <td>allowHttpTrace</td>
  <td>The ability to use the HTTP TRACE method in HttpURLConnection.</td>
  <td>Malicious code using HTTP TRACE could get access to security sensitive
  information in the HTTP headers (such as cookies) that it might not
  otherwise have access to.</td>
  </tr>

<tr>
  <td>getCookieHandler</td>
  <td>The ability to get the cookie handler that processes highly
  security sensitive cookie information for an Http session.</td>
  <td>Malicious code can get a cookie handler to obtain access to
  highly security sensitive cookie information. Some web servers
  use cookies to save user private information such as access
  control information, or to track user browsing habit.</td>
  </tr>

<tr>
 <td>getNetworkInformation</td>
 <td>The ability to retrieve all information about local network interfaces.</td>
 <td>Malicious code can read information about network hardware such as
 MAC addresses, which could be used to construct local IPv6 addresses.</td>
</tr>

<tr>
  <td>getProxySelector</td>
  <td>The ability to get the proxy selector used to make decisions
  on which proxies to use when making network connections.</td>
  <td>Malicious code can get a ProxySelector to discover proxy
  hosts and ports on internal networks, which could then become
  targets for attack.</td>
</tr>

<tr>
  <td>getResponseCache</td>
  <td>The ability to get the response cache that provides
  access to a local response cache.</td>
  <td>Malicious code getting access to the local response cache
  could access security sensitive information.</td>
  </tr>

<tr>
  <td>requestPasswordAuthentication</td>
  <td>The ability
to ask the authenticator registered with the system for
a password</td>
  <td>Malicious code may steal this password.</td>
</tr>

<tr>
  <td>setCookieHandler</td>
  <td>The ability to set the cookie handler that processes highly
  security sensitive cookie information for an Http session.</td>
  <td>Malicious code can set a cookie handler to obtain access to
  highly security sensitive cookie information. Some web servers
  use cookies to save user private information such as access
  control information, or to track user browsing habit.</td>
  </tr>

<tr>
  <td>setDefaultAuthenticator</td>
  <td>The ability to set the
way authentication information is retrieved when
a proxy or HTTP server asks for authentication</td>
  <td>Malicious
code can set an authenticator that monitors and steals user
authentication input as it retrieves the input from the user.</td>
</tr>

<tr>
  <td>setProxySelector</td>
  <td>The ability to set the proxy selector used to make decisions
  on which proxies to use when making network connections.</td>
  <td>Malicious code can set a ProxySelector that directs network
  traffic to an arbitrary network host.</td>
</tr>

<tr>
  <td>setResponseCache</td>
  <td>The ability to set the response cache that provides access to
  a local response cache.</td>
  <td>Malicious code getting access to the local response cache
  could access security sensitive information, or create false
  entries in the response cache.</td>
  </tr>

<tr>
  <td>specifyStreamHandler</td>
  <td>The ability
to specify a stream handler when constructing a URL</td>
  <td>Malicious code may create a URL with resources that it would
normally not have access to (like file:/foo/fum/), specifying a
stream handler that gets the actual bytes from someplace it does
have access to. Thus it might be able to trick the system into
creating a ProtectionDomain/CodeSource for a class even though
that class really didn't come from that location.</td>
</tr>
</table>

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager


@author Marianne Mueller
@author Roland Schemers
"
      classrelation 3252866 // <generalisation>
	relation 3252866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3252866 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 1776130 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8343910153355041693L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7508738 "NetPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new NetPermission with the specified name.
The name is the symbolic name of the NetPermission, such as
\"setDefaultAuthenticator\", etc. An asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match.

@param name the name of the NetPermission.

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end

      operation 7508866 "NetPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new NetPermission object with the specified name.
The name is the symbolic name of the NetPermission, and the
actions String is currently unused and should be null.

@param name the name of the NetPermission.
@param actions should be null.

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end
    end

    class 969602 "NoRouteToHostException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an error occurred while attempting to connect a
socket to a remote address and port.  Typically, the remote
host cannot be reached because of an intervening firewall, or
if an intermediate router is down.

@since   JDK1.1
"
      classrelation 3253890 // <generalisation>
	relation 3253890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3253890 // <generalisation>
	  b parent class_ref 248066 // SocketException
      end

      attribute 1776642 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1897550894873493790L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7513474 "NoRouteToHostException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new NoRouteToHostException with the specified detail
message as to why the remote host cannot be reached.
A detail message is a String that gives a specific
description of this error.
@param msg the detail message
"
      end

      operation 7513602 "NoRouteToHostException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new NoRouteToHostException with no detailed message.
"
      end
    end

    class 969730 "PlainDatagramSocketImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "On Unix systems we simply delegate to native methods.

@author Chris Hegarty
"
      classrelation 3254146 // <generalisation>
	relation 3254146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3254146 // <generalisation>
	  b parent class_ref 961794 // AbstractPlainDatagramSocketImpl
      end

      extra_member 165378 "initialization"
	
	cpp "" ""
	java "  static {
        init();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7514114 "setOption"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 962434 // SocketOption
	  param inout name "value" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7514242 "getOption"
	protected explicit_return_type "T"
	nparams 1
	  param inout name "name" type class_ref 962434 // SocketOption
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7514370 "socketSetOption"
	protected explicit_return_type "void"
	nparams 2
	  param in name "opt" explicit_type "int"
	  param inout name "val" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7514498 "bind0"
	protected explicit_return_type "void"
	nparams 2
	  param in name "lport" explicit_type "int"
	  param inout name "laddr" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7514626 "send"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7514754 "peek"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "i" type class_ref 513154 // InetAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7514882 "peekData"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7515010 "receive0"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 527490 // DatagramPacket
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7515138 "setTimeToLive"
	protected explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7515266 "getTimeToLive"
	protected explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7515394 "setTTL"
	protected explicit_return_type "void"
	nparams 1
	  param in name "ttl" explicit_type "byte"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@Deprecated
"
	
	
	
      end

      operation 7515522 "getTTL"
	protected explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	java_annotation "@Deprecated
"
	
	
	
      end

      operation 7515650 "join"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7515778 "leave"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "inetaddr" type class_ref 513154 // InetAddress
	  param inout name "netIf" type class_ref 962306 // NetworkInterface
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7515906 "datagramSocketCreate"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7516034 "datagramSocketClose"
	protected explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7516162 "socketSetOption0"
	protected explicit_return_type "void"
	nparams 2
	  param in name "opt" explicit_type "int"
	  param inout name "val" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7516290 "socketGetOption"
	protected return_type class_ref 129538 // Object
	nparams 1
	  param in name "opt" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7516418 "connect0"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 248066 // SocketException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7516546 "disconnect0"
	protected explicit_return_type "void"
	nparams 1
	  param in name "family" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7516674 "dataAvailable"
	package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7516802 "init"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Perform class load-time initializations.
"
      end
    end

    class 969858 "PortUnreachableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an ICMP Port Unreachable message has been
received on a connected datagram.

@since   1.4
"
      classrelation 3254274 // <generalisation>
	relation 3254274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3254274 // <generalisation>
	  b parent class_ref 248066 // SocketException
      end

      attribute 1776898 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8462541992376507323L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7516930 "PortUnreachableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PortUnreachableException} with a
detail message.
@param msg the detail message
"
      end

      operation 7517058 "PortUnreachableException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new {@code PortUnreachableException} with no
detailed message.
"
      end
    end

    class 969986 "ProtocolFamily"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a family of communication protocols.

@since 1.7
"
      operation 7517442 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the protocol family.

@return the name of the protocol family
"
      end
    end

    class 970242 "ProxySelector"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Selects the proxy server to use, if any, when connecting to the
network resource referenced by a URL. A proxy selector is a
concrete sub-class of this class and is registered by invoking the
{@link java.net.ProxySelector#setDefault setDefault} method. The
currently registered proxy selector can be retrieved by calling
{@link java.net.ProxySelector#getDefault getDefault} method.

<p> When a proxy selector is registered, for instance, a subclass
of URLConnection class should call the {@link #select select}
method for each URL request so that the proxy selector can decide
if a direct, or proxied connection should be used. The {@link
#select select} method returns an iterator over a collection with
the preferred connection approach.

<p> If a connection cannot be established to a proxy (PROXY or
SOCKS) servers then the caller should call the proxy selector's
{@link #connectFailed connectFailed} method to notify the proxy
selector that the proxy server is unavailable. </p>

<P>The default proxy selector does enforce a
<a href=\"doc-files/net-properties.html#Proxies\">set of System Properties</a>
related to proxy settings.</P>

@author Yingxian Wang
@author Jean-Christophe Collet
@since 1.5
"
      classrelation 3254914 // theProxySelector (<unidirectional association>)
	relation 3254914 --->
	  a role_name "theProxySelector" class_relation private
	    comment "
The system wide proxy selector that selects the proxy server to
use, if any, when connecting to a remote object referenced by
an URL.

@see #setDefault(ProxySelector)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3254914 // theProxySelector (<unidirectional association>)
	  b parent class_ref 970242 // ProxySelector
      end

      extra_member 165506 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            Class<?> c = Class.forName(\"sun.net.spi.DefaultProxySelector\");
            if (c != null && ProxySelector.class.isAssignableFrom(c)) {
                theProxySelector = (ProxySelector) c.newInstance();
            }
        } catch (Exception e) {
            theProxySelector = null;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7518466 "getDefault"
	class_operation public return_type class_ref 970242 // ProxySelector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the system-wide proxy selector.

@throws  SecurityException
         If a security manager has been installed and it denies
{@link NetPermission}{@code (\"getProxySelector\")}
@see #setDefault(ProxySelector)
@return the system-wide {@code ProxySelector}
@since 1.5
"
      end

      operation 7518594 "setDefault"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "ps" type class_ref 970242 // ProxySelector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets (or unsets) the system-wide proxy selector.

Note: non-standard protocol handlers may ignore this setting.

@param ps The HTTP proxy selector, or
         {@code null} to unset the proxy selector.

@throws  SecurityException
         If a security manager has been installed and it denies
{@link NetPermission}{@code (\"setProxySelector\")}

@see #getDefault()
@since 1.5
"
      end

      operation 7518722 "select"
	abstract public return_type class_ref 175362 // List
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Proxy> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Selects all the applicable proxies based on the protocol to
access the resource with and a destination address to access
the resource at.
The format of the URI is defined as follow:
<UL>
<LI>http URI for http connections</LI>
<LI>https URI for https connections
<LI>{@code socket://host:port}<br>
    for tcp client sockets connections</LI>
</UL>

@param   uri
         The URI that a connection is required to

@return  a List of Proxies. Each element in the
         the List is of type
         {@link java.net.Proxy Proxy};
         when no proxy is available, the list will
         contain one element of type
         {@link java.net.Proxy Proxy}
         that represents a direct connection.
@throws IllegalArgumentException if the argument is null
"
      end

      operation 7518850 "connectFailed"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "sa" type class_ref 962178 // SocketAddress
	  param inout name "ioe" type class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called to indicate that a connection could not be established
to a proxy/socks server. An implementation of this method can
temporarily remove the proxies or reorder the sequence of
proxies returned by {@link #select(URI)}, using the address
and the IOException caught when trying to connect.

@param   uri
         The URI that the proxy at sa failed to serve.
@param   sa
         The socket address of the proxy/SOCKS server

@param   ioe
         The I/O exception thrown when the connect failed.
@throws IllegalArgumentException if either argument is null
"
      end
    end

    class 970370 "ResponseCache"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents implementations of URLConnection caches. An instance of
such a class can be registered with the system by doing
ResponseCache.setDefault(ResponseCache), and the system will call
this object in order to:

   <ul><li>store resource data which has been retrieved from an
           external source into the cache</li>
        <li>try to fetch a requested resource that may have been
           stored in the cache</li>
   </ul>

The ResponseCache implementation decides which resources
should be cached, and for how long they should be cached. If a
request resource cannot be retrieved from the cache, then the
protocol handlers will fetch the resource from its original
location.

The settings for URLConnection#useCaches controls whether the
protocol is allowed to use a cached response.

For more information on HTTP caching, see <a
href=\"http://www.ietf.org/rfc/rfc2616.txt\"><i>RFC&nbsp;2616: Hypertext
Transfer Protocol -- HTTP/1.1</i></a>

@author Yingxian Wang
@since 1.5
"
      classrelation 3255042 // theResponseCache (<unidirectional association>)
	relation 3255042 --->
	  a role_name "theResponseCache" class_relation private
	    comment "
The system wide cache that provides access to a url
caching mechanism.

@see #setDefault(ResponseCache)
@see #getDefault()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3255042 // theResponseCache (<unidirectional association>)
	  b parent class_ref 970370 // ResponseCache
      end

      operation 7518978 "getDefault"
	class_operation public return_type class_ref 970370 // ResponseCache
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the system-wide response cache.

@throws  SecurityException
         If a security manager has been installed and it denies
{@link NetPermission}{@code (\"getResponseCache\")}

@see #setDefault(ResponseCache)
@return the system-wide {@code ResponseCache}
@since 1.5
"
      end

      operation 7519106 "setDefault"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "responseCache" type class_ref 970370 // ResponseCache
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets (or unsets) the system-wide cache.

Note: non-standard procotol handlers may ignore this setting.

@param responseCache The response cache, or
         {@code null} to unset the cache.

@throws  SecurityException
         If a security manager has been installed and it denies
{@link NetPermission}{@code (\"setResponseCache\")}

@see #getDefault()
@since 1.5
"
      end

      operation 7519234 "get"
	abstract public return_type class_ref 963714 // CacheResponse
	nparams 3
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "rqstMethod" type class_ref 128130 // String
	  param inout name "rqstHeaders" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, List<String>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the cached response based on the requesting uri,
request method and request headers. Typically this method is
called by the protocol handler before it sends out the request
to get the network resource. If a cached response is returned,
that resource is used instead.

@param uri a {@code URI} used to reference the requested
           network resource
@param rqstMethod a {@code String} representing the request
           method
@param rqstHeaders - a Map from request header
           field names to lists of field values representing
           the current request headers
@return a {@code CacheResponse} instance if available
         from cache, or null otherwise
@throws  IOException if an I/O error occurs
@throws  IllegalArgumentException if any one of the arguments is null

@see     java.net.URLConnection#setUseCaches(boolean)
@see     java.net.URLConnection#getUseCaches()
@see     java.net.URLConnection#setDefaultUseCaches(boolean)
@see     java.net.URLConnection#getDefaultUseCaches()
"
      end

      operation 7519362 "put"
	abstract public return_type class_ref 963586 // CacheRequest
	nparams 2
	  param inout name "uri" type class_ref 783874 // URI
	  param inout name "conn" type class_ref 783746 // URLConnection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The protocol handler calls this method after a resource has
been retrieved, and the ResponseCache must decide whether or
not to store the resource in its cache. If the resource is to
be cached, then put() must return a CacheRequest object which
contains an OutputStream that the protocol handler will
use to write the resource into the cache. If the resource is
not to be cached, then put must return null.

@param uri a {@code URI} used to reference the requested
           network resource
@param conn - a URLConnection instance that is used to fetch
           the response to be cached
@return a {@code CacheRequest} for recording the
           response to be cached. Null return indicates that
           the caller does not intend to cache the response.
@throws IOException if an I/O error occurs
@throws IllegalArgumentException if any one of the arguments is
           null
"
      end
    end

    class 970498 "SdpSocketImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SocketImpl that supports the SDP protocol
"
      classrelation 3255170 // <generalisation>
	relation 3255170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3255170 // <generalisation>
	  b parent class_ref 965890 // PlainSocketImpl
      end

      operation 7519490 "SdpSocketImpl"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7519618 "create"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "stream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 970626 "SecureCacheResponse"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a cache response originally retrieved through secure
means, such as TLS.

@since 1.5
"
      classrelation 3255298 // <generalisation>
	relation 3255298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3255298 // <generalisation>
	  b parent class_ref 963714 // CacheResponse
      end

      operation 7519746 "getCipherSuite"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cipher suite in use on the original connection that
retrieved the network resource.

@return a string representing the cipher suite
"
      end

      operation 7519874 "getLocalCertificateChain"
	abstract public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Certificate> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate chain that were sent to the server during
handshaking of the original connection that retrieved the
network resource.  Note: This method is useful only
when using certificate-based cipher suites.

@return an immutable List of Certificate representing the
          certificate chain that was sent to the server. If no
          certificate chain was sent, null will be returned.
@see #getLocalPrincipal()
"
      end

      operation 7520002 "getServerCertificateChain"
	abstract public return_type class_ref 175362 // List
	nparams 0
	nexceptions 1
	  explicit_exception "SSLPeerUnverifiedException"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Certificate> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the server's certificate chain, which was established as
part of defining the session in the original connection that
retrieved the network resource, from cache.  Note: This method
can be used only when using certificate-based cipher suites;
using it with non-certificate-based cipher suites, such as
Kerberos, will throw an SSLPeerUnverifiedException.

@return an immutable List of Certificate representing the server's
        certificate chain.
@throws SSLPeerUnverifiedException if the peer is not verified.
@see #getPeerPrincipal()
"
      end

      operation 7520130 "getPeerPrincipal"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	nexceptions 1
	  explicit_exception "SSLPeerUnverifiedException"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the server's principal which was established as part of
defining the session during the original connection that
retrieved the network resource.

@return the server's principal. Returns an X500Principal of the
end-entity certiticate for X509-based cipher suites, and
KerberosPrincipal for Kerberos cipher suites.

@throws SSLPeerUnverifiedException if the peer was not verified.

@see #getServerCertificateChain()
@see #getLocalPrincipal()
"
      end

      operation 7520258 "getLocalPrincipal"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the principal that was sent to the server during
handshaking in the original connection that retrieved the
network resource.

@return the principal sent to the server. Returns an X500Principal
of the end-entity certificate for X509-based cipher suites, and
KerberosPrincipal for Kerberos cipher suites. If no principal was
sent, then null is returned.

@see #getLocalCertificateChain()
@see #getPeerPrincipal()
"
      end
    end

    class 970754 "SocketImplFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a factory for socket implementations. It
is used by the classes {@code Socket} and
{@code ServerSocket} to create actual socket
implementations.

@author  Arthur van Hoff
@see     java.net.Socket
@see     java.net.ServerSocket
@since   JDK1.0
"
      operation 7532162 "createSocketImpl"
	public return_type class_ref 962690 // SocketImpl
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SocketImpl} instance.

@return  a new instance of {@code SocketImpl}.
@see     java.net.SocketImpl
"
      end
    end

    class 970882 "SocketPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents access to a network via sockets.
A SocketPermission consists of a
host specification and a set of \"actions\" specifying ways to
connect to that host. The host is specified as
<pre>
   host = (hostname | IPv4address | iPv6reference) [:portrange]
   portrange = portnumber | -portnumber | portnumber-[portnumber]
</pre>
The host is expressed as a DNS name, as a numerical IP address,
or as \"localhost\" (for the local machine).
The wildcard \"*\" may be included once in a DNS name host
specification. If it is included, it must be in the leftmost
position, as in \"*.sun.com\".
<p>
The format of the IPv6reference should follow that specified in <a
href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format
for Literal IPv6 Addresses in URLs</i></a>:
<pre>
   ipv6reference = \"[\" IPv6address \"]\"
</pre>
For example, you can construct a SocketPermission instance
as the following:
<pre>
   String hostAddress = inetaddress.getHostAddress();
   if (inetaddress instanceof Inet6Address) {
       sp = new SocketPermission(\"[\" + hostAddress + \"]:\" + port, action);
   } else {
       sp = new SocketPermission(hostAddress + \":\" + port, action);
   }
</pre>
or
<pre>
   String host = url.getHost();
   sp = new SocketPermission(host + \":\" + port, action);
</pre>
<p>
The <A HREF=\"Inet6Address.html#lform\">full uncompressed form</A> of
an IPv6 literal address is also valid.
<p>
The port or portrange is optional. A port specification of the
form \"N-\", where <i>N</i> is a port number, signifies all ports
numbered <i>N</i> and above, while a specification of the
form \"-N\" indicates all ports numbered <i>N</i> and below.
The special port value {@code 0} refers to the entire <i>ephemeral</i>
port range. This is a fixed range of ports a system may use to
allocate dynamic ports from. The actual range may be system dependent.
<p>
The possible ways to connect to the host are
<pre>
accept
connect
listen
resolve
</pre>
The \"listen\" action is only meaningful when used with \"localhost\" and
means the ability to bind to a specified port.
The \"resolve\" action is implied when any of the other actions are present.
The action \"resolve\" refers to host/ip name service lookups.
<P>
The actions string is converted to lowercase before processing.
<p>As an example of the creation and meaning of SocketPermissions,
note that if the following permission:

<pre>
  p1 = new SocketPermission(\"puffin.eng.sun.com:7777\", \"connect,accept\");
</pre>

is granted to some code, it allows that code to connect to port 7777 on
{@code puffin.eng.sun.com}, and to accept connections on that port.

<p>Similarly, if the following permission:

<pre>
  p2 = new SocketPermission(\"localhost:1024-\", \"accept,connect,listen\");
</pre>

is granted to some code, it allows that code to
accept connections on, connect to, or listen on any port between
1024 and 65535 on the local host.

<p>Note: Granting code permission to accept or make connections to remote
hosts may be dangerous because malevolent code can then more easily
transfer and share confidential data among parties who may not
otherwise have access to the data.

@see java.security.Permissions
@see SocketPermission


@author Marianne Mueller
@author Roland Schemers

@serial exclude
"
      classrelation 3257218 // <generalisation>
	relation 3257218 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3257218 // <generalisation>
	  b parent class_ref 257538 // Permission
      end

      classrelation 3257346 // <realization>
	relation 3257346 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3257346 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1779586 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7204263841984476862L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1779714 "CONNECT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Connect to host:port

"
      end

      attribute 1779842 "LISTEN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Listen on host:port

"
      end

      attribute 1779970 "ACCEPT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Accept a connection from host:port

"
      end

      attribute 1780098 "RESOLVE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Resolve DNS queries

"
      end

      attribute 1780226 "NONE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "No actions

"
      end

      attribute 1780354 "ALL"
	class_attribute const_attribute private explicit_type "int"
	init_value " CONNECT|LISTEN|ACCEPT|RESOLVE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "All actions

"
      end

      attribute 1780482 "PORT_MIN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " various port constants
"
      end

      attribute 1780610 "PORT_MAX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 65535"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1780738 "PRIV_PORT_MAX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1023"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1780866 "DEF_EPH_LOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 49152"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1780994 "mask"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the actions mask
"
      end

      classrelation 3257474 // actions (<unidirectional association>)
	relation 3257474 --->
	  a role_name "actions" private
	    comment "
the actions string.

@serial

 Left null as long as possible, then"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3257474 // actions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3257602 // hostname (<unidirectional association>)
	relation 3257602 --->
	  a role_name "hostname" private
	    comment " created and re-used in the getAction function.
 hostname part as it is passed
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3257602 // hostname (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3257730 // cname (<unidirectional association>)
	relation 3257730 --->
	  a role_name "cname" private
	    comment " the canonical name of the host
 in the case of \"*.foo.com\", cname is \".foo.com\".
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3257730 // cname (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3257858 // addresses (<unidirectional association>)
	relation 3257858 --->
	  a role_name "addresses" multiplicity "[]" private
	    comment " all the IP addresses of the host
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3257858 // addresses (<unidirectional association>)
	  b parent class_ref 513154 // InetAddress
      end

      attribute 1781122 "wildcard"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if the hostname is a wildcard (e.g. \"*.sun.com\")
"
      end

      attribute 1781250 "init_with_ip"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if we were initialized with a single numeric IP address
"
      end

      attribute 1781378 "invalid"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if this SocketPermission represents an invalid/unknown host
 used for implies when the delayed lookup has already failed
"
      end

      attribute 1781506 "portrange"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " port range on host
"
      end

      attribute 1781634 "defaultDeny"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1781762 "untrusted"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if this SocketPermission represents a hostname
 that failed our reverse mapping heuristic test
"
      end

      attribute 1781890 "trusted"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1782018 "trustNameService"
	class_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if the sun.net.trustNameService system property is set
"
      end

      attribute 1782146 "debug"
	class_attribute private explicit_type "Debug"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1782274 "debugInit"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 971010 "EphemeralRange"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1782402 "low"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " initEphemeralPorts(\"low\", DEF_EPH_LOW)"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1782530 "high"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " initEphemeralPorts(\"high\", PORT_MAX)"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      extra_member 165890 "initialization"
	
	cpp "" ""
	java "  static {
        Boolean tmp = java.security.AccessController.doPrivileged(
                new sun.security.action.GetBooleanAction(\"sun.net.trustNameService\"));
        trustNameService = tmp.booleanValue();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7535618 "getDebug"
	class_operation private explicit_return_type "Debug"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7535746 "SocketPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param inout name "action" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SocketPermission object with the specified actions.
The host is expressed as a DNS name, or as a numerical IP address.
Optionally, a port or a portrange may be supplied (separated
from the DNS name or IP address by a colon).
<p>
To specify the local machine, use \"localhost\" as the <i>host</i>.
Also note: An empty <i>host</i> String (\"\") is equivalent to \"localhost\".
<p>
The <i>actions</i> parameter contains a comma-separated list of the
actions granted for the specified host (and port(s)). Possible actions are
\"connect\", \"listen\", \"accept\", \"resolve\", or
any combination of those. \"resolve\" is automatically added
when any of the other three are specified.
<p>
Examples of SocketPermission instantiation are the following:
<pre>
   nr = new SocketPermission(\"www.catalog.com\", \"connect\");
   nr = new SocketPermission(\"www.sun.com:80\", \"connect\");
   nr = new SocketPermission(\"*.sun.com\", \"connect\");
   nr = new SocketPermission(\"*.edu\", \"resolve\");
   nr = new SocketPermission(\"204.160.241.0\", \"connect\");
   nr = new SocketPermission(\"localhost:1024-65535\", \"listen\");
   nr = new SocketPermission(\"204.160.241.0:1024-65535\", \"connect\");
</pre>

@param host the hostname or IPaddress of the computer, optionally
including a colon followed by a port or port range.
@param action the action string.
"
      end

      operation 7535874 "SocketPermission"
	package explicit_return_type ""
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7536002 "setDeny"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7536130 "getHost"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7536258 "parsePort"
	private explicit_return_type "int"
	nparams 1
	  param inout name "port" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7536386 "includesEphemerals"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the permission has specified zero
as its value (or lower bound) signifying the ephemeral range
"
      end

      operation 7536514 "init"
	private explicit_return_type "void"
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the SocketPermission object. We don't do any DNS lookups
as this point, instead we hold off until the implies method is
called.
"
      end

      operation 7536642 "getMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "action" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert an action string to an integer actions mask.

@param action the action string
@return the action mask
"
      end

      operation 7536770 "isUntrusted"
	private explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7536898 "getCanonName"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "attempt to get the fully qualified domain name

"
      end

      classrelation 3257986 // cdomain (<unidirectional association>)
	relation 3257986 --->
	  a role_name "cdomain" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3257986 // cdomain (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3258114 // hdomain (<unidirectional association>)
	relation 3258114 --->
	  a role_name "hdomain" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3258114 // hdomain (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7537026 "match"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cname" type class_ref 128130 // String
	  param inout name "hname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7537154 "authorized"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cname" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7537282 "authorizedIPv4"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cname" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7537410 "authorizedIPv6"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cname" type class_ref 128130 // String
	  param inout name "addr" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7537538 "getIP"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "get IP addresses. Sets invalid to true if we can't get them.

"
      end

      operation 7537666 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this socket permission object \"implies\" the
specified permission.
<P>
More specifically, this method first ensures that all of the following
are true (and returns false if any of them are not):
<ul>
<li> <i>p</i> is an instanceof SocketPermission,
<li> <i>p</i>'s actions are a proper subset of this
object's actions, and
<li> <i>p</i>'s port range is included in this port range. Note:
port range is ignored when p only contains the action, 'resolve'.
</ul>

Then {@code implies} checks each of the following, in order,
and for each returns true if the stated condition is true:
<ul>
<li> If this object was initialized with a single IP address and one of <i>p</i>'s
IP addresses is equal to this object's IP address.
<li>If this object is a wildcard domain (such as *.sun.com), and
<i>p</i>'s canonical name (the name without any preceding *)
ends with this object's canonical host name. For example, *.sun.com
implies *.eng.sun.com.
<li>If this object was not initialized with a single IP address, and one of this
object's IP addresses equals one of <i>p</i>'s IP addresses.
<li>If this canonical name equals <i>p</i>'s canonical name.
</ul>

If none of the above are true, {@code implies} returns false.
@param p the permission to check against.

@return true if the specified permission is implied by this object,
false if not.
"
      end

      operation 7537794 "impliesIgnoreMask"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 970882 // SocketPermission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the incoming Permission's action are a proper subset of
the this object's actions.
<P>
Check, in the following order:
<ul>
<li> Checks that \"p\" is an instanceof a SocketPermission
<li> Checks that \"p\"'s actions are a proper subset of the
current object's actions.
<li> Checks that \"p\"'s port range is included in this port range
<li> If this object was initialized with an IP address, checks that
     one of \"p\"'s IP addresses is equal to this object's IP address.
<li> If either object is a wildcard domain (i.e., \"*.sun.com\"),
     attempt to match based on the wildcard.
<li> If this object was not initialized with an IP address, attempt
     to find a match based on the IP addresses in both objects.
<li> Attempt to match on the canonical hostnames of both objects.
</ul>
@param that the incoming permission request

@return true if \"permission\" is a proper subset of the current object,
false if not.
"
      end

      operation 7537922 "compareHostnames"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 970882 // SocketPermission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7538050 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two SocketPermission objects for equality.
<P>
@param obj the object to test for equality with this object.

@return true if <i>obj</i> is a SocketPermission, and has the
 same hostname, port range, and actions as this
 SocketPermission object. However, port range will be ignored
 in the comparison if <i>obj</i> only contains the action, 'resolve'.
"
      end

      operation 7538178 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.

@return a hash code value for this object.
"
      end

      operation 7538306 "getMask"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current action mask.

@return the actions mask.
"
      end

      operation 7538434 "getActions"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"canonical string representation\" of the actions in the
specified mask.
Always returns present actions in the following order:
connect, listen, accept, resolve.

@param mask a specific integer action mask to translate into a string
@return the canonical string representation of the actions
"
      end

      operation 7538562 "getActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical string representation of the actions.
Always returns present actions in the following order:
connect, listen, accept, resolve.

@return the canonical string representation of the actions.
"
      end

      operation 7538690 "newPermissionCollection"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new PermissionCollection object for storing SocketPermission
objects.
<p>
SocketPermission objects must be stored in a manner that allows them
to be inserted into the collection in any order, but that also enables the
PermissionCollection {@code implies}
method to be implemented in an efficient (and consistent) manner.

@return a new PermissionCollection object suitable for storing SocketPermissions.
"
      end

      operation 7538818 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WriteObject is called to save the state of the SocketPermission
to a stream. The actions are serialized, and the superclass
takes care of the name.
"
      end

      operation 7538946 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the SocketPermission from
a stream.
"
      end

      operation 7539074 "initEphemeralPorts"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "suffix" type class_ref 128130 // String
	  param in name "defval" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check the system/security property for the ephemeral port range
for this system. The suffix is either \"high\" or \"low\"
"
      end

      operation 7539202 "inRange"
	class_operation private explicit_return_type "boolean"
	nparams 4
	  param in name "policyLow" explicit_type "int"
	  param in name "policyHigh" explicit_type "int"
	  param in name "targetLow" explicit_type "int"
	  param in name "targetHigh" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the target range is within the policy range
together with the ephemeral range for this platform
(if policy includes ephemeral range)
"
      end
    end

    class 971138 "SocketPermissionCollection"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "public String toString()
{
StringBuffer s = new StringBuffer(super.toString() + \"\\n\" +
\"cname = \" + cname + \"\\n\" +
\"wildcard = \" + wildcard + \"\\n\" +
\"invalid = \" + invalid + \"\\n\" +
\"portrange = \" + portrange[0] + \",\" + portrange[1] + \"\\n\");
if (addresses != null) for (int i=0; i<addresses.length; i++) {
s.append( addresses[i].getHostAddress());
s.append(\"\\n\");
} else {
s.append(\"(no addresses)\\n\");
}

return s.toString();
}

public static void main(String args[]) throws Exception {
SocketPermission this_ = new SocketPermission(args[0], \"connect\");
SocketPermission that_ = new SocketPermission(args[1], \"connect\");
System.out.println(\"-----\\n\");
System.out.println(\"this.implies(that) = \" + this_.implies(that_));
System.out.println(\"-----\\n\");
System.out.println(\"this = \"+this_);
System.out.println(\"-----\\n\");
System.out.println(\"that = \"+that_);
System.out.println(\"-----\\n\");

SocketPermissionCollection nps = new SocketPermissionCollection();
nps.add(this_);
nps.add(new SocketPermission(\"www-leland.stanford.edu\",\"connect\"));
nps.add(new SocketPermission(\"www-sun.com\",\"connect\"));
System.out.println(\"nps.implies(that) = \" + nps.implies(that_));
System.out.println(\"-----\\n\");
}



if (init'd with IP, key is IP as string)
if wildcard, its the wild card
else its the cname?


@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection


@author Roland Schemers

@serial include
"
      classrelation 3258242 // <generalisation>
	relation 3258242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3258242 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 3258370 // <realization>
	relation 3258370 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3258370 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3258498 // perms (<unidirectional association>)
	relation 3258498 --->
	  a role_name "perms" private
	    comment " Not serialized; see serialization section at end of class
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SocketPermission> ${name}${value};
"
	    classrelation_ref 3258498 // perms (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 7539330 "SocketPermissionCollection"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty SocketPermissions object.

"
      end

      operation 7539458 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to the SocketPermissions. The key for the hash is
the name in the case of wildcards, or all the IP addresses.

@param permission the Permission object to add.

@exception IllegalArgumentException - if the permission is not a
                                      SocketPermission

@exception SecurityException - if this SocketPermissionCollection object
                               has been marked readonly
"
      end

      operation 7539586 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this collection of permissions implies the permissions
expressed in \"permission\".

@param permission the Permission object to compare

@return true if \"permission\" is a proper subset of a permission in
the collection, false if not.
"
      end

      operation 7539714 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an enumeration of all the SocketPermission objects in the
container.

@return an enumeration of all the SocketPermission objects.
"
      end

      attribute 1782658 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2787186408602843674L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3258626 // serialPersistentFields (<unidirectional association>)
	relation 3258626 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"permissions\", Vector.class),
    }" class_relation const_relation private
	    comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:

 The SocketPermissions for this set.
 @serial

 private Vector permissions;

@serialField permissions java.util.Vector
    A list of the SocketPermissions for this set.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3258626 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7539842 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData \"permissions\" field (a Vector containing the SocketPermissions).


Writes the contents of the perms field out as a Vector for
serialization compatibility with earlier releases.
"
      end

      operation 7539970 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Vector of SocketPermissions and saves them in the perms field.
"
      end
    end

    class 971266 "SocketSecrets"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 7540098 "setOption"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 962434 // SocketOption
	  param inout name "value" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " accessed by reflection from jdk.net.Sockets 
 obj must be a Socket or ServerSocket "
      end

      operation 7540226 "getOption"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "name" type class_ref 962434 // SocketOption
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7540354 "setOption"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "s" type class_ref 527234 // DatagramSocket
	  param inout name "name" type class_ref 962434 // SocketOption
	  param inout name "value" explicit_type "T"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7540482 "getOption"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "s" type class_ref 527234 // DatagramSocket
	  param inout name "name" type class_ref 962434 // SocketOption
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 971394 "SocketTimeoutException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that a timeout has occurred on a socket read or accept.

@since   1.4
"
      classrelation 3258754 // <generalisation>
	relation 3258754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3258754 // <generalisation>
	  b parent class_ref 924930 // InterruptedIOException
      end

      attribute 1782786 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8846654841826352300L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7540610 "SocketTimeoutException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new SocketTimeoutException with a detail
message.
@param msg the detail message
"
      end

      operation 7540738 "SocketTimeoutException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new SocketTimeoutException with no detailed message.
"
      end
    end

    class 971522 "SocksConsts"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Constants used by the SOCKS protocol implementation.
"
      attribute 1782914 "PROTO_VERS4"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783042 "PROTO_VERS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783170 "DEFAULT_PORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783298 "NO_AUTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783426 "GSSAPI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783554 "USER_PASSW"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783682 "NO_METHODS"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783810 "CONNECT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1783938 "BIND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784066 "UDP_ASSOC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784194 "IPV4"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784322 "DOMAIN_NAME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784450 "IPV6"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784578 "REQUEST_OK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784706 "GENERAL_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784834 "NOT_ALLOWED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1784962 "NET_UNREACHABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1785090 "HOST_UNREACHABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1785218 "CONN_REFUSED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1785346 "TTL_EXPIRED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1785474 "CMD_NOT_SUPPORTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1785602 "ADDR_TYPE_NOT_SUP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 971650 "SocksSocketImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " import org.ietf.jgss.*; 

SOCKS (V4 & V5) TCP socket implementation (RFC 1928).
This is a subclass of PlainSocketImpl.
Note this class should <b>NOT</b> be public.
"
      classrelation 3258882 // <generalisation>
	relation 3258882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3258882 // <generalisation>
	  b parent class_ref 965890 // PlainSocketImpl
      end

      classrelation 3259010 // <realization>
	relation 3259010 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3259010 // <realization>
	  b parent class_ref 971522 // SocksConsts
      end

      classrelation 3259138 // server (<unidirectional association>)
	relation 3259138 --->
	  a role_name "server" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3259138 // server (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1785730 "serverPort"
	private explicit_type "int"
	init_value " DEFAULT_PORT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3259266 // external_address (<unidirectional association>)
	relation 3259266 --->
	  a role_name "external_address" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3259266 // external_address (<unidirectional association>)
	  b parent class_ref 247938 // InetSocketAddress
      end

      attribute 1785858 "useV4"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3259394 // cmdsock (<unidirectional association>)
	relation 3259394 --->
	  a role_name "cmdsock" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3259394 // cmdsock (<unidirectional association>)
	  b parent class_ref 209154 // Socket
      end

      classrelation 3259522 // cmdIn (<unidirectional association>)
	relation 3259522 --->
	  a role_name "cmdIn" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3259522 // cmdIn (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 3259650 // cmdOut (<unidirectional association>)
	relation 3259650 --->
	  a role_name "cmdOut" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3259650 // cmdOut (<unidirectional association>)
	  b parent class_ref 151298 // OutputStream
      end

      attribute 1785986 "applicationSetProxy"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if the Proxy has been set programatically 
 false "
      end

      operation 7540866 "SocksSocketImpl"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7540994 "SocksSocketImpl"
	package explicit_return_type ""
	nparams 2
	  param inout name "server" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7541122 "SocksSocketImpl"
	package explicit_return_type ""
	nparams 1
	  param inout name "proxy" type class_ref 966018 // Proxy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7541250 "setV4"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7541378 "privilegedConnect"
	private explicit_return_type "void"
	nparams 3
	  param in name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7541506 "superConnectServer"
	private explicit_return_type "void"
	nparams 3
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7541634 "remainingMillis"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "deadlineMillis" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7541762 "readSocksReply"
	private explicit_return_type "int"
	nparams 2
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7541890 "readSocksReply"
	private explicit_return_type "int"
	nparams 3
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "deadlineMillis" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7542018 "authenticate"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "method" explicit_type "byte"
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "out" type class_ref 921602 // BufferedOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the authentication machanism required by the proxy.
"
      end

      operation 7542146 "authenticate"
	private explicit_return_type "boolean"
	nparams 4
	  param in name "method" explicit_type "byte"
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "out" type class_ref 921602 // BufferedOutputStream
	  param in name "deadlineMillis" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7542274 "connectV4"
	private explicit_return_type "void"
	nparams 4
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "endpoint" type class_ref 247938 // InetSocketAddress
	  param in name "deadlineMillis" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7542402 "connect"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "endpoint" type class_ref 962178 // SocketAddress
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Connects the Socks Socket to the specified endpoint. It will first
connect to the SOCKS proxy and negotiate the access. If the proxy
grants the connections, then the connect is successful and all
further traffic will go to the \"real\" endpoint.

@param   endpoint        the {@code SocketAddress} to connect to.
@param   timeout         the timeout value in milliseconds
@throws  IOException     if the connection can't be established.
@throws  SecurityException if there is a security manager and it
                         doesn't allow the connection
@throws  IllegalArgumentException if endpoint is null or a
         SocketAddress subclass not supported by this socket
"
      end

      operation 7542530 "bindV4"
	private explicit_return_type "void"
	nparams 4
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "baddr" type class_ref 513154 // InetAddress
	  param in name "lport" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7542658 "socksBind"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "saddr" type class_ref 247938 // InetSocketAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends the Bind request to the SOCKS proxy. In the SOCKS protocol, bind
means \"accept incoming connection from\", so the SocketAddress is the
the one of the host we do accept connection from.

@param      saddr   the Socket address of the remote host.
@exception  IOException  if an I/O error occurs when binding this socket.
"
      end

      operation 7542786 "acceptFrom"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "s" type class_ref 962690 // SocketImpl
	  param inout name "saddr" type class_ref 247938 // InetSocketAddress
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a connection from a specific host.

@param      s   the accepted connection.
@param      saddr the socket address of the host we do accept
              connection from
@exception  IOException  if an I/O error occurs when accepting the
              connection.
"
      end

      operation 7542914 "getInetAddress"
	protected return_type class_ref 513154 // InetAddress
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the value of this socket's {@code address} field.

@return  the value of this socket's {@code address} field.
@see     java.net.SocketImpl#address
"
      end

      operation 7543042 "getPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the value of this socket's {@code port} field.

@return  the value of this socket's {@code port} field.
@see     java.net.SocketImpl#port
"
      end

      operation 7543170 "getLocalPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7543298 "close"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7543426 "getUserName"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 971778 "StandardProtocolFamily"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the standard families of communication protocols.

@since 1.7
"
      classrelation 3259778 // <realization>
	relation 3259778 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3259778 // <realization>
	  b parent class_ref 969986 // ProtocolFamily
      end

      attribute 1786114 "INET"
	public type class_ref 971778 // StandardProtocolFamily
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internet Protocol Version 4 (IPv4)

"
      end

      attribute 1786242 "INET6"
	public type class_ref 971778 // StandardProtocolFamily
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internet Protocol Version 6 (IPv6)
"
      end
    end

    class 971906 "StandardSocketOptions"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the <em>standard</em> socket options.

<p> The {@link SocketOption#name name} of each socket option defined by this
class is its field name.

<p> In this release, the socket options defined here are used by {@link
java.nio.channels.NetworkChannel network} channels in the {@link
java.nio.channels channels} package.

@since 1.7
"
      operation 7543554 "StandardSocketOptions"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3259906 // SO_BROADCAST (<unidirectional association>)
	relation 3259906 --->
	  a role_name "SO_BROADCAST" init_value "
        new StdSocketOption<Boolean>(\"SO_BROADCAST\", Boolean.class)" class_relation const_relation public
	    comment " -- SOL_SOCKET --

Allow transmission of broadcast datagrams.

<p> The value of this socket option is a {@code Boolean} that represents
whether the option is enabled or disabled. The option is specific to
datagram-oriented sockets sending to {@link java.net.Inet4Address IPv4}
broadcast addresses. When the socket option is enabled then the socket
can be used to send <em>broadcast datagrams</em>.

<p> The initial value of this socket option is {@code FALSE}. The socket
option may be enabled or disabled at any time. Some operating systems may
require that the Java virtual machine be started with implementation
specific privileges to enable this option or send broadcast datagrams.

@see <a href=\"http://www.ietf.org/rfc/rfc919.txt\">RFC&nbsp;929:
Broadcasting Internet Datagrams</a>
@see DatagramSocket#setBroadcast

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 3259906 // SO_BROADCAST (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260034 // SO_KEEPALIVE (<unidirectional association>)
	relation 3260034 --->
	  a role_name "SO_KEEPALIVE" init_value "
        new StdSocketOption<Boolean>(\"SO_KEEPALIVE\", Boolean.class)" class_relation const_relation public
	    comment "
Keep connection alive.

<p> The value of this socket option is a {@code Boolean} that represents
whether the option is enabled or disabled. When the {@code SO_KEEPALIVE}
option is enabled the operating system may use a <em>keep-alive</em>
mechanism to periodically probe the other end of a connection when the
connection is otherwise idle. The exact semantics of the keep alive
mechanism is system dependent and therefore unspecified.

<p> The initial value of this socket option is {@code FALSE}. The socket
option may be enabled or disabled at any time.

@see <a href=\"http://www.ietf.org/rfc/rfc1122.txt\">RFC&nbsp;1122
Requirements for Internet Hosts -- Communication Layers</a>
@see Socket#setKeepAlive

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 3260034 // SO_KEEPALIVE (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260162 // SO_SNDBUF (<unidirectional association>)
	relation 3260162 --->
	  a role_name "SO_SNDBUF" init_value "
        new StdSocketOption<Integer>(\"SO_SNDBUF\", Integer.class)" class_relation const_relation public
	    comment "
The size of the socket send buffer.

<p> The value of this socket option is an {@code Integer} that is the
size of the socket send buffer in bytes. The socket send buffer is an
output buffer used by the networking implementation. It may need to be
increased for high-volume connections. The value of the socket option is
a <em>hint</em> to the implementation to size the buffer and the actual
size may differ. The socket option can be queried to retrieve the actual
size.

<p> For datagram-oriented sockets, the size of the send buffer may limit
the size of the datagrams that may be sent by the socket. Whether
datagrams larger than the buffer size are sent or discarded is system
dependent.

<p> The initial/default size of the socket send buffer and the range of
allowable values is system dependent although a negative size is not
allowed. An attempt to set the socket send buffer to larger than its
maximum size causes it to be set to its maximum size.

<p> An implementation allows this socket option to be set before the
socket is bound or connected. Whether an implementation allows the
socket send buffer to be changed after the socket is bound is system
dependent.

@see Socket#setSendBufferSize

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 3260162 // SO_SNDBUF (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260290 // SO_RCVBUF (<unidirectional association>)
	relation 3260290 --->
	  a role_name "SO_RCVBUF" init_value "
        new StdSocketOption<Integer>(\"SO_RCVBUF\", Integer.class)" class_relation const_relation public
	    comment "
The size of the socket receive buffer.

<p> The value of this socket option is an {@code Integer} that is the
size of the socket receive buffer in bytes. The socket receive buffer is
an input buffer used by the networking implementation. It may need to be
increased for high-volume connections or decreased to limit the possible
backlog of incoming data. The value of the socket option is a
<em>hint</em> to the implementation to size the buffer and the actual
size may differ.

<p> For datagram-oriented sockets, the size of the receive buffer may
limit the size of the datagrams that can be received. Whether datagrams
larger than the buffer size can be received is system dependent.
Increasing the socket receive buffer may be important for cases where
datagrams arrive in bursts faster than they can be processed.

<p> In the case of stream-oriented sockets and the TCP/IP protocol, the
size of the socket receive buffer may be used when advertising the size
of the TCP receive window to the remote peer.

<p> The initial/default size of the socket receive buffer and the range
of allowable values is system dependent although a negative size is not
allowed. An attempt to set the socket receive buffer to larger than its
maximum size causes it to be set to its maximum size.

<p> An implementation allows this socket option to be set before the
socket is bound or connected. Whether an implementation allows the
socket receive buffer to be changed after the socket is bound is system
dependent.

@see <a href=\"http://www.ietf.org/rfc/rfc1323.txt\">RFC&nbsp;1323: TCP
Extensions for High Performance</a>
@see Socket#setReceiveBufferSize
@see ServerSocket#setReceiveBufferSize

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 3260290 // SO_RCVBUF (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260418 // SO_REUSEADDR (<unidirectional association>)
	relation 3260418 --->
	  a role_name "SO_REUSEADDR" init_value "
        new StdSocketOption<Boolean>(\"SO_REUSEADDR\", Boolean.class)" class_relation const_relation public
	    comment "
Re-use address.

<p> The value of this socket option is a {@code Boolean} that represents
whether the option is enabled or disabled. The exact semantics of this
socket option are socket type and system dependent.

<p> In the case of stream-oriented sockets, this socket option will
usually determine whether the socket can be bound to a socket address
when a previous connection involving that socket address is in the
<em>TIME_WAIT</em> state. On implementations where the semantics differ,
and the socket option is not required to be enabled in order to bind the
socket when a previous connection is in this state, then the
implementation may choose to ignore this option.

<p> For datagram-oriented sockets the socket option is used to allow
multiple programs bind to the same address. This option should be enabled
when the socket is to be used for Internet Protocol (IP) multicasting.

<p> An implementation allows this socket option to be set before the
socket is bound or connected. Changing the value of this socket option
after the socket is bound has no effect. The default value of this
socket option is system dependent.

@see <a href=\"http://www.ietf.org/rfc/rfc793.txt\">RFC&nbsp;793: Transmission
Control Protocol</a>
@see ServerSocket#setReuseAddress

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 3260418 // SO_REUSEADDR (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260546 // SO_LINGER (<unidirectional association>)
	relation 3260546 --->
	  a role_name "SO_LINGER" init_value "
        new StdSocketOption<Integer>(\"SO_LINGER\", Integer.class)" class_relation const_relation public
	    comment "
Linger on close if data is present.

<p> The value of this socket option is an {@code Integer} that controls
the action taken when unsent data is queued on the socket and a method
to close the socket is invoked. If the value of the socket option is zero
or greater, then it represents a timeout value, in seconds, known as the
<em>linger interval</em>. The linger interval is the timeout for the
{@code close} method to block while the operating system attempts to
transmit the unsent data or it decides that it is unable to transmit the
data. If the value of the socket option is less than zero then the option
is disabled. In that case the {@code close} method does not wait until
unsent data is transmitted; if possible the operating system will transmit
any unsent data before the connection is closed.

<p> This socket option is intended for use with sockets that are configured
in {@link java.nio.channels.SelectableChannel#isBlocking() blocking} mode
only. The behavior of the {@code close} method when this option is
enabled on a non-blocking socket is not defined.

<p> The initial value of this socket option is a negative value, meaning
that the option is disabled. The option may be enabled, or the linger
interval changed, at any time. The maximum value of the linger interval
is system dependent. Setting the linger interval to a value that is
greater than its maximum value causes the linger interval to be set to
its maximum value.

@see Socket#setSoLinger

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 3260546 // SO_LINGER (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260674 // IP_TOS (<unidirectional association>)
	relation 3260674 --->
	  a role_name "IP_TOS" init_value "
        new StdSocketOption<Integer>(\"IP_TOS\", Integer.class)" class_relation const_relation public
	    comment " -- IPPROTO_IP --

The Type of Service (ToS) octet in the Internet Protocol (IP) header.

<p> The value of this socket option is an {@code Integer} representing
the value of the ToS octet in IP packets sent by sockets to an {@link
StandardProtocolFamily#INET IPv4} socket. The interpretation of the ToS
octet is network specific and is not defined by this class. Further
information on the ToS octet can be found in <a
href=\"http://www.ietf.org/rfc/rfc1349.txt\">RFC&nbsp;1349</a> and <a
href=\"http://www.ietf.org/rfc/rfc2474.txt\">RFC&nbsp;2474</a>. The value
of the socket option is a <em>hint</em>. An implementation may ignore the
value, or ignore specific values.

<p> The initial/default value of the TOS field in the ToS octet is
implementation specific but will typically be {@code 0}. For
datagram-oriented sockets the option may be configured at any time after
the socket has been bound. The new value of the octet is used when sending
subsequent datagrams. It is system dependent whether this option can be
queried or changed prior to binding the socket.

<p> The behavior of this socket option on a stream-oriented socket, or an
{@link StandardProtocolFamily#INET6 IPv6} socket, is not defined in this
release.

@see DatagramSocket#setTrafficClass

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 3260674 // IP_TOS (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260802 // IP_MULTICAST_IF (<unidirectional association>)
	relation 3260802 --->
	  a role_name "IP_MULTICAST_IF" init_value "
        new StdSocketOption<NetworkInterface>(\"IP_MULTICAST_IF\", NetworkInterface.class)" class_relation const_relation public
	    comment "
The network interface for Internet Protocol (IP) multicast datagrams.

<p> The value of this socket option is a {@link NetworkInterface} that
represents the outgoing interface for multicast datagrams sent by the
datagram-oriented socket. For {@link StandardProtocolFamily#INET6 IPv6}
sockets then it is system dependent whether setting this option also
sets the outgoing interface for multicast datagrams sent to IPv4
addresses.

<p> The initial/default value of this socket option may be {@code null}
to indicate that outgoing interface will be selected by the operating
system, typically based on the network routing tables. An implementation
allows this socket option to be set after the socket is bound. Whether
the socket option can be queried or changed prior to binding the socket
is system dependent.

@see java.nio.channels.MulticastChannel
@see MulticastSocket#setInterface

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<NetworkInterface> ${name}${value};
"
	    classrelation_ref 3260802 // IP_MULTICAST_IF (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3260930 // IP_MULTICAST_TTL (<unidirectional association>)
	relation 3260930 --->
	  a role_name "IP_MULTICAST_TTL" init_value "
        new StdSocketOption<Integer>(\"IP_MULTICAST_TTL\", Integer.class)" class_relation const_relation public
	    comment "
The <em>time-to-live</em> for Internet Protocol (IP) multicast datagrams.

<p> The value of this socket option is an {@code Integer} in the range
{@code 0 <= value <= 255}. It is used to control the scope of multicast
datagrams sent by the datagram-oriented socket.
In the case of an {@link StandardProtocolFamily#INET IPv4} socket
the option is the time-to-live (TTL) on multicast datagrams sent by the
socket. Datagrams with a TTL of zero are not transmitted on the network
but may be delivered locally. In the case of an {@link
StandardProtocolFamily#INET6 IPv6} socket the option is the
<em>hop limit</em> which is number of <em>hops</em> that the datagram can
pass through before expiring on the network. For IPv6 sockets it is
system dependent whether the option also sets the <em>time-to-live</em>
on multicast datagrams sent to IPv4 addresses.

<p> The initial/default value of the time-to-live setting is typically
{@code 1}. An implementation allows this socket option to be set after
the socket is bound. Whether the socket option can be queried or changed
prior to binding the socket is system dependent.

@see java.nio.channels.MulticastChannel
@see MulticastSocket#setTimeToLive

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 3260930 // IP_MULTICAST_TTL (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3261058 // IP_MULTICAST_LOOP (<unidirectional association>)
	relation 3261058 --->
	  a role_name "IP_MULTICAST_LOOP" init_value "
        new StdSocketOption<Boolean>(\"IP_MULTICAST_LOOP\", Boolean.class)" class_relation const_relation public
	    comment "
Loopback for Internet Protocol (IP) multicast datagrams.

<p> The value of this socket option is a {@code Boolean} that controls
the <em>loopback</em> of multicast datagrams. The value of the socket
option represents if the option is enabled or disabled.

<p> The exact semantics of this socket options are system dependent.
In particular, it is system dependent whether the loopback applies to
multicast datagrams sent from the socket or received by the socket.
For {@link StandardProtocolFamily#INET6 IPv6} sockets then it is
system dependent whether the option also applies to multicast datagrams
sent to IPv4 addresses.

<p> The initial/default value of this socket option is {@code TRUE}. An
implementation allows this socket option to be set after the socket is
bound. Whether the socket option can be queried or changed prior to
binding the socket is system dependent.

@see java.nio.channels.MulticastChannel
 @see MulticastSocket#setLoopbackMode

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 3261058 // IP_MULTICAST_LOOP (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      classrelation 3261186 // TCP_NODELAY (<unidirectional association>)
	relation 3261186 --->
	  a role_name "TCP_NODELAY" init_value "
        new StdSocketOption<Boolean>(\"TCP_NODELAY\", Boolean.class)" class_relation const_relation public
	    comment " -- IPPROTO_TCP --

Disable the Nagle algorithm.

<p> The value of this socket option is a {@code Boolean} that represents
whether the option is enabled or disabled. The socket option is specific to
stream-oriented sockets using the TCP/IP protocol. TCP/IP uses an algorithm
known as <em>The Nagle Algorithm</em> to coalesce short segments and
improve network efficiency.

<p> The default value of this socket option is {@code FALSE}. The
socket option should only be enabled in cases where it is known that the
coalescing impacts performance. The socket option may be enabled at any
time. In other words, the Nagle Algorithm can be disabled. Once the option
is enabled, it is system dependent whether it can be subsequently
disabled. If it cannot, then invoking the {@code setOption} method to
disable the option has no effect.

@see <a href=\"http://www.ietf.org/rfc/rfc1122.txt\">RFC&nbsp;1122:
Requirements for Internet Hosts -- Communication Layers</a>
@see Socket#setTcpNoDelay

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 3261186 // TCP_NODELAY (<unidirectional association>)
	  b parent class_ref 962434 // SocketOption
      end

      class 972034 "StdSocketOption"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 962434 // SocketOption
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3261314 // <realization>
	  relation 3261314 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3261314 // <realization>
	    b parent class_ref 962434 // SocketOption
	end

	classrelation 3261442 // name (<unidirectional association>)
	  relation 3261442 --->
	    a role_name "name" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3261442 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3261570 // type (<unidirectional association>)
	  relation 3261570 --->
	    a role_name "type" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3261570 // type (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 7543682 "StdSocketOption"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7543810 "name"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7543938 "type"
	  cpp_inline public return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7544066 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 972290 "URLStreamHandler"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The abstract class {@code URLStreamHandler} is the common
superclass for all stream protocol handlers. A stream protocol
handler knows how to make a connection for a particular protocol
type, such as {@code http} or {@code https}.
<p>
In most cases, an instance of a {@code URLStreamHandler}
subclass is not created directly by an application. Rather, the
first time a protocol name is encountered when constructing a
{@code URL}, the appropriate stream protocol handler is
automatically loaded.

@author  James Gosling
@see     java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)
@since   JDK1.0
"
      operation 7572226 "openConnection"
	abstract protected return_type class_ref 783746 // URLConnection
	nparams 1
	  param inout name "u" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a connection to the object referenced by the
{@code URL} argument.
This method should be overridden by a subclass.

<p>If for the handler's protocol (such as HTTP or JAR), there
exists a public, specialized URLConnection subclass belonging
to one of the following packages or one of their subpackages:
java.lang, java.io, java.util, java.net, the connection
returned will be of that subclass. For example, for HTTP an
HttpURLConnection will be returned, and for JAR a
JarURLConnection will be returned.

@param      u   the URL that this connects to.
@return     a {@code URLConnection} object for the {@code URL}.
@exception  IOException  if an I/O error occurs while opening the
              connection.
"
      end

      operation 7572354 "openConnection"
	protected return_type class_ref 783746 // URLConnection
	nparams 2
	  param inout name "u" type class_ref 243458 // URL
	  param inout name "p" type class_ref 966018 // Proxy
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as openConnection(URL), except that the connection will be
made through the specified proxy; Protocol handlers that do not
support proxying will ignore the proxy parameter and make a
normal connection.

Calling this method preempts the system's default ProxySelector
settings.

@param      u   the URL that this connects to.
@param      p   the proxy through which the connection will be made.
                If direct connection is desired, Proxy.NO_PROXY
                should be specified.
@return     a {@code URLConnection} object for the {@code URL}.
@exception  IOException  if an I/O error occurs while opening the
              connection.
@exception  IllegalArgumentException if either u or p is null,
              or p has the wrong type.
@exception  UnsupportedOperationException if the subclass that
              implements the protocol doesn't support this method.
@since      1.5
"
      end

      operation 7572482 "parseURL"
	protected explicit_return_type "void"
	nparams 4
	  param inout name "u" type class_ref 243458 // URL
	  param inout name "spec" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string representation of a {@code URL} into a
{@code URL} object.
<p>
If there is any inherited context, then it has already been
copied into the {@code URL} argument.
<p>
The {@code parseURL} method of {@code URLStreamHandler}
parses the string representation as if it were an
{@code http} specification. Most URL protocol families have a
similar parsing. A stream protocol handler for a protocol that has
a different syntax must override this routine.

@param   u       the {@code URL} to receive the result of parsing
                 the spec.
@param   spec    the {@code String} representing the URL that
                 must be parsed.
@param   start   the character index at which to begin parsing. This is
                 just past the '{@code :}' (if there is one) that
                 specifies the determination of the protocol name.
@param   limit   the character position to stop parsing at. This is the
                 end of the string or the position of the
                 \"{@code #}\" character, if present. All information
                 after the sharp sign indicates an anchor.
"
      end

      operation 7572610 "getDefaultPort"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default port for a URL parsed by this handler. This method
is meant to be overidden by handlers with default port numbers.
@return the default port for a {@code URL} parsed by this handler.
@since 1.3
"
      end

      operation 7572738 "equals"
	protected explicit_return_type "boolean"
	nparams 2
	  param inout name "u1" type class_ref 243458 // URL
	  param inout name "u2" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the default equals calculation. May be overidden by handlers
for other protocols that have different requirements for equals().
This method requires that none of its arguments is null. This is
guaranteed by the fact that it is only called by java.net.URL class.
@param u1 a URL object
@param u2 a URL object
@return {@code true} if the two urls are
considered equal, ie. they refer to the same
fragment in the same file.
@since 1.3
"
      end

      operation 7572866 "hashCode"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "u" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the default hash calculation. May be overidden by handlers for
other protocols that have different requirements for hashCode
calculation.
@param u a URL object
@return an {@code int} suitable for hash table indexing
@since 1.3
"
      end

      operation 7572994 "sameFile"
	protected explicit_return_type "boolean"
	nparams 2
	  param inout name "u1" type class_ref 243458 // URL
	  param inout name "u2" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare two urls to see whether they refer to the same file,
i.e., having the same protocol, host, port, and path.
This method requires that none of its arguments is null. This is
guaranteed by the fact that it is only called indirectly
by java.net.URL class.
@param u1 a URL object
@param u2 a URL object
@return true if u1 and u2 refer to the same file
@since 1.3
"
      end

      operation 7573122 "getHostAddress"
	protected return_type class_ref 513154 // InetAddress
	nparams 1
	  param inout name "u" type class_ref 243458 // URL
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the IP address of our host. An empty host field or a DNS failure
will result in a null return.

@param u a URL object
@return an {@code InetAddress} representing the host
IP address.
@since 1.3
"
      end

      operation 7573250 "hostsEqual"
	protected explicit_return_type "boolean"
	nparams 2
	  param inout name "u1" type class_ref 243458 // URL
	  param inout name "u2" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the host components of two URLs.
@param u1 the URL of the first host to compare
@param u2 the URL of the second host to compare
@return  {@code true} if and only if they
are equal, {@code false} otherwise.
@since 1.3
"
      end

      operation 7573378 "toExternalForm"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "u" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a {@code URL} of a specific protocol to a
{@code String}.

@param   u   the URL.
@return  a string representation of the {@code URL} argument.
"
      end

      operation 7573506 "setURL"
	protected explicit_return_type "void"
	nparams 9
	  param inout name "u" type class_ref 243458 // URL
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "authority" type class_ref 128130 // String
	  param inout name "userInfo" type class_ref 128130 // String
	  param inout name "path" type class_ref 128130 // String
	  param inout name "query" type class_ref 128130 // String
	  param inout name "ref" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the fields of the {@code URL} argument to the indicated values.
Only classes derived from URLStreamHandler are able
to use this method to set the values of the URL fields.

@param   u         the URL to modify.
@param   protocol  the protocol name.
@param   host      the remote host value for the URL.
@param   port      the port on the remote machine.
@param   authority the authority part for the URL.
@param   userInfo the userInfo part of the URL.
@param   path      the path component of the URL.
@param   query     the query part for the URL.
@param   ref       the reference.
@exception       SecurityException       if the protocol handler of the URL is
                                 different from this one
@see     java.net.URL#set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)
@since 1.3
"
      end

      operation 7573634 "setURL"
	protected explicit_return_type "void"
	nparams 6
	  param inout name "u" type class_ref 243458 // URL
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "file" type class_ref 128130 // String
	  param inout name "ref" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the fields of the {@code URL} argument to the indicated values.
Only classes derived from URLStreamHandler are able
to use this method to set the values of the URL fields.

@param   u         the URL to modify.
@param   protocol  the protocol name. This value is ignored since 1.2.
@param   host      the remote host value for the URL.
@param   port      the port on the remote machine.
@param   file      the file.
@param   ref       the reference.
@exception       SecurityException       if the protocol handler of the URL is
                                 different from this one
@deprecated Use setURL(URL, String, String, int, String, String, String,
            String);
"
      end
    end

    class 972418 "UrlDeserializedState"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3267202 // protocol (<unidirectional association>)
	relation 3267202 --->
	  a role_name "protocol" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3267202 // protocol (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3267330 // host (<unidirectional association>)
	relation 3267330 --->
	  a role_name "host" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3267330 // host (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1793666 "port"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3267458 // authority (<unidirectional association>)
	relation 3267458 --->
	  a role_name "authority" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3267458 // authority (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3267586 // file (<unidirectional association>)
	relation 3267586 --->
	  a role_name "file" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3267586 // file (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3267714 // ref (<unidirectional association>)
	relation 3267714 --->
	  a role_name "ref" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3267714 // ref (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1793794 "hashCode"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7564290 "UrlDeserializedState"
	public explicit_return_type ""
	nparams 7
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "authority" type class_ref 128130 // String
	  param inout name "file" type class_ref 128130 // String
	  param inout name "ref" type class_ref 128130 // String
	  param in name "hashCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7564418 "getProtocol"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7564546 "getHost"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7564674 "getAuthority"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7564802 "getPort"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7564930 "getFile"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7565058 "getRef"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7565186 "getHashCode"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7565314 "reconstituteUrlString"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 972546 "URLStreamHandlerFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a factory for {@code URL} stream
protocol handlers.
<p>
It is used by the {@code URL} class to create a
{@code URLStreamHandler} for a specific protocol.

@author  Arthur van Hoff
@see     java.net.URL
@see     java.net.URLStreamHandler
@since   JDK1.0
"
      operation 7573762 "createURLStreamHandler"
	public return_type class_ref 972290 // URLStreamHandler
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code URLStreamHandler} instance with the specified
protocol.

@param   protocol   the protocol (\"{@code ftp}\",
                    \"{@code http}\", \"{@code nntp}\", etc.).
@return  a {@code URLStreamHandler} for the specific protocol.
@see     java.net.URLStreamHandler
"
      end
    end

    class 972674 "Parts"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3266818 // path (<unidirectional association>)
	relation 3266818 --->
	  a role_name "path" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3266818 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3266946 // query (<unidirectional association>)
	relation 3266946 --->
	  a role_name "query" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3266946 // query (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3267074 // ref (<unidirectional association>)
	relation 3267074 --->
	  a role_name "ref" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3267074 // ref (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7563778 "Parts"
	package explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7563906 "getPath"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7564034 "getQuery"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7564162 "getRef"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 972802 "URLClassLoader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class loader is used to load classes and resources from a search
path of URLs referring to both JAR files and directories. Any URL that
ends with a '/' is assumed to refer to a directory. Otherwise, the URL
is assumed to refer to a JAR file which will be opened as needed.
<p>
The AccessControlContext of the thread that created the instance of
URLClassLoader will be used when subsequently loading classes and
resources.
<p>
The classes that are loaded are by default granted permission only to
access the URLs specified when the URLClassLoader was created.

@author  David Connelly
@since   1.2
"
      classrelation 3268098 // <generalisation>
	relation 3268098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3268098 // <generalisation>
	  b parent class_ref 972930 // SecureClassLoader
      end

      classrelation 3268226 // <realization>
	relation 3268226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3268226 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      attribute 1794178 "ucp"
	const_attribute private explicit_type "URLClassPath"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The search path for classes and resources 
"
      end

      classrelation 3268354 // acc (<unidirectional association>)
	relation 3268354 --->
	  a role_name "acc" const_relation private
	    comment " The context to be used when loading classes and resources 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3268354 // acc (<unidirectional association>)
	  b parent class_ref 129154 // AccessControlContext
      end

      operation 7566338 "URLClassLoader"
	public explicit_return_type ""
	nparams 2
	  param inout name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	  param inout name "parent" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new URLClassLoader for the given URLs. The URLs will be
searched in the order specified for classes and resources after first
searching in the specified parent class loader. Any URL that ends with
a '/' is assumed to refer to a directory. Otherwise, the URL is assumed
to refer to a JAR file which will be downloaded and opened as needed.

<p>If there is a security manager, this method first
calls the security manager's {@code checkCreateClassLoader} method
to ensure creation of a class loader is allowed.

@param urls the URLs from which to load classes and resources
@param parent the parent class loader for delegation
@exception  SecurityException  if a security manager exists and its
            {@code checkCreateClassLoader} method doesn't allow
            creation of a class loader.
@exception  NullPointerException if {@code urls} is {@code null}.
@see SecurityManager#checkCreateClassLoader
"
      end

      operation 7566466 "URLClassLoader"
	package explicit_return_type ""
	nparams 3
	  param inout name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	  param inout name "parent" type class_ref 129026 // ClassLoader
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7566594 "URLClassLoader"
	public explicit_return_type ""
	nparams 1
	  param inout name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new URLClassLoader for the specified URLs using the
default delegation parent {@code ClassLoader}. The URLs will
be searched in the order specified for classes and resources after
first searching in the parent class loader. Any URL that ends with
a '/' is assumed to refer to a directory. Otherwise, the URL is
assumed to refer to a JAR file which will be downloaded and opened
as needed.

<p>If there is a security manager, this method first
calls the security manager's {@code checkCreateClassLoader} method
to ensure creation of a class loader is allowed.

@param urls the URLs from which to load classes and resources

@exception  SecurityException  if a security manager exists and its
            {@code checkCreateClassLoader} method doesn't allow
            creation of a class loader.
@exception  NullPointerException if {@code urls} is {@code null}.
@see SecurityManager#checkCreateClassLoader
"
      end

      operation 7566722 "URLClassLoader"
	package explicit_return_type ""
	nparams 2
	  param inout name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7566850 "URLClassLoader"
	public explicit_return_type ""
	nparams 3
	  param inout name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	  param inout name "parent" type class_ref 129026 // ClassLoader
	  param inout name "factory" type class_ref 972546 // URLStreamHandlerFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new URLClassLoader for the specified URLs, parent
class loader, and URLStreamHandlerFactory. The parent argument
will be used as the parent class loader for delegation. The
factory argument will be used as the stream handler factory to
obtain protocol handlers when creating new jar URLs.

<p>If there is a security manager, this method first
calls the security manager's {@code checkCreateClassLoader} method
to ensure creation of a class loader is allowed.

@param urls the URLs from which to load classes and resources
@param parent the parent class loader for delegation
@param factory the URLStreamHandlerFactory to use when creating URLs

@exception  SecurityException  if a security manager exists and its
            {@code checkCreateClassLoader} method doesn't allow
            creation of a class loader.
@exception  NullPointerException if {@code urls} is {@code null}.
@see SecurityManager#checkCreateClassLoader
"
      end

      classrelation 3268482 // closeables (<unidirectional association>)
	relation 3268482 --->
	  a role_name "closeables" init_value " new WeakHashMap<>()" private
	    comment " A map (used as a set) to keep track of closeable local resources
(either JarFiles or FileInputStreams). We don't care about
Http resources since they don't need to be closed.

If the resource is coming from a jar file
we keep a (weak) reference to the JarFile object which can
be closed if URLClassLoader.close() called. Due to jar file
caching there will typically be only one JarFile object
per underlying jar file.

For file resources, which is probably a less common situation
we have to keep a weak reference to each stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Closeable,Void> ${name}${value};
"
	    classrelation_ref 3268482 // closeables (<unidirectional association>)
	  b parent class_ref 192002 // WeakHashMap
      end

      operation 7566978 "getResourceAsStream"
	public return_type class_ref 146434 // InputStream
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an input stream for reading the specified resource.
If this loader is closed, then any resources opened by this method
will be closed.

<p> The search order is described in the documentation for {@link
#getResource(String)}.  </p>

@param  name
        The resource name

@return  An input stream for reading the resource, or {@code null}
         if the resource could not be found

@since  1.7
"
      end

      operation 7567106 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this URLClassLoader, so that it can no longer be used to load
new classes or resources that are defined by this loader.
Classes and resources defined by any of this loader's parents in the
delegation hierarchy are still accessible. Also, any classes or resources
that are already loaded, are still accessible.
<p>
In the case of jar: and file: URLs, it also closes any files
that were opened by it. If another thread is loading a
class when the {@code close} method is invoked, then the result of
that load is undefined.
<p>
The method makes a best effort attempt to close all opened files,
by catching {@link IOException}s internally. Unchecked exceptions
and errors are not caught. Calling close on an already closed
loader has no effect.
<p>
@exception IOException if closing any file opened by this class loader
resulted in an IOException. Any such exceptions are caught internally.
If only one is caught, then it is re-thrown. If more than one exception
is caught, then the second and following exceptions are added
as suppressed exceptions of the first one caught, which is then re-thrown.

@exception SecurityException if a security manager is set, and it denies
  {@link RuntimePermission}{@code (\"closeClassLoader\")}

@since 1.7
"
      end

      operation 7567234 "addURL"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "url" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified URL to the list of URLs to search for
classes and resources.
<p>
If the URL specified is {@code null} or is already in the
list of URLs, or if this loader is closed, then invoking this
method has no effect.

@param url the URL to be added to the search path of URLs
"
      end

      operation 7567362 "getURLs"
	public return_type class_ref 243458 // URL
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the search path of URLs for loading classes and resources.
This includes the original list of URLs specified to the constructor,
along with any URLs subsequently appended by the addURL() method.
@return the search path of URLs for loading classes and resources.
"
      end

      operation 7567490 "findClass"
	protected return_type class_ref 130818 // Class
	nparams 1
	  param in name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and loads the class with the specified name from the URL search
path. Any URLs referring to JAR files are loaded and opened as needed
until the class is found.

@param name the name of the class
@return the resulting class
@exception ClassNotFoundException if the class could not be found,
           or if the loader is closed.
@exception NullPointerException if {@code name} is {@code null}.
"
      end

      operation 7567618 "getAndVerifyPackage"
	private return_type class_ref 320002 // Package
	nparams 3
	  param inout name "pkgname" type class_ref 128130 // String
	  param inout name "man" type class_ref 935810 // Manifest
	  param inout name "url" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the package using the specified package name.
If non-null, verify the package using the specified code
source and manifest.
"
      end

      operation 7567746 "definePackageInternal"
	private explicit_return_type "void"
	nparams 3
	  param inout name "pkgname" type class_ref 128130 // String
	  param inout name "man" type class_ref 935810 // Manifest
	  param inout name "url" type class_ref 243458 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Also called by VM to define Package for classes loaded from the CDS
 archive"
      end

      operation 7567874 "defineClass"
	private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "res" explicit_type "Resource"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines a Class using the class bytes obtained from the specified
Resource. The resulting Class must be resolved before it can be
used.
"
      end

      operation 7568002 "definePackage"
	protected return_type class_ref 320002 // Package
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "man" type class_ref 935810 // Manifest
	  param inout name "url" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines a new package by name in this ClassLoader. The attributes
contained in the specified Manifest will be used to obtain package
version and sealing information. For sealed packages, the additional
URL specifies the code source URL from which the package was loaded.

@param name  the package name
@param man   the Manifest containing package version and sealing
             information
@param url   the code source url for the package, or null if none
@exception   IllegalArgumentException if the package name duplicates
             an existing package either in this class loader or one
             of its ancestors
@return the newly defined Package object
"
      end

      operation 7568130 "isSealed"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "man" type class_ref 935810 // Manifest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified package name is sealed according to the
given manifest.
"
      end

      operation 7568258 "findResource"
	public return_type class_ref 243458 // URL
	nparams 1
	  param in name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the resource with the specified name on the URL search path.

@param name the name of the resource
@return a {@code URL} for the resource, or {@code null}
if the resource could not be found, or if the loader is closed.
"
      end

      operation 7568386 "findResources"
	public return_type class_ref 185986 // Enumeration
	nparams 1
	  param in name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<URL> ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Enumeration of URLs representing all of the resources
on the URL search path having the specified name.

@param name the resource name
@exception IOException if an I/O exception occurs
@return an {@code Enumeration} of {@code URL}s
        If the loader is closed, the Enumeration will be empty.
"
      end

      operation 7568514 "getPermissions"
	protected return_type class_ref 257794 // PermissionCollection
	nparams 1
	  param inout name "codesource" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the permissions for the given codesource object.
The implementation of this method first calls super.getPermissions
and then adds permissions based on the URL of the codesource.
<p>
If the protocol of this URL is \"jar\", then the permission granted
is based on the permission that is required by the URL of the Jar
file.
<p>
If the protocol is \"file\" and there is an authority component, then
permission to connect to and accept connections from that authority
may be granted. If the protocol is \"file\"
and the path specifies a file, then permission to read that
file is granted. If protocol is \"file\" and the path is
a directory, permission is granted to read all files
and (recursively) all files and subdirectories contained in
that directory.
<p>
If the protocol is not \"file\", then permission
to connect to and accept connections from the URL's host is granted.
@param codesource the codesource
@exception NullPointerException if {@code codesource} is {@code null}.
@return the permissions granted to the codesource
"
      end

      operation 7568642 "newInstance"
	class_operation public return_type class_ref 972802 // URLClassLoader
	nparams 2
	  param in name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	  param in name "parent" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of URLClassLoader for the specified
URLs and parent class loader. If a security manager is
installed, the {@code loadClass} method of the URLClassLoader
returned by this method will invoke the
{@code SecurityManager.checkPackageAccess} method before
loading the class.

@param urls the URLs to search for classes and resources
@param parent the parent class loader for delegation
@exception  NullPointerException if {@code urls} is {@code null}.
@return the resulting class loader
"
      end

      operation 7568770 "newInstance"
	class_operation public return_type class_ref 972802 // URLClassLoader
	nparams 1
	  param in name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of URLClassLoader for the specified
URLs and default parent class loader. If a security manager is
installed, the {@code loadClass} method of the URLClassLoader
returned by this method will invoke the
{@code SecurityManager.checkPackageAccess} before
loading the class.

@param urls the URLs to search for classes and resources
@exception  NullPointerException if {@code urls} is {@code null}.
@return the resulting class loader
"
      end

      extra_member 166146 "initialization"
	
	cpp "" ""
	java "  static {
        sun.misc.SharedSecrets.setJavaNetAccess (
            new sun.misc.JavaNetAccess() {
                public URLClassPath getURLClassPath (URLClassLoader u) {
                    return u.ucp;
                }

                public String getOriginalHostName(InetAddress ia) {
                    return ia.holder.getOriginalHostName();
                }
            }
        );
        ClassLoader.registerAsParallelCapable();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 973058 "FactoryURLClassLoader"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3268610 // <generalisation>
	relation 3268610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3268610 // <generalisation>
	  b parent class_ref 972802 // URLClassLoader
      end

      extra_member 166274 "initialization"
	
	cpp "" ""
	java "  static {
        ClassLoader.registerAsParallelCapable();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7568898 "FactoryURLClassLoader"
	package explicit_return_type ""
	nparams 3
	  param inout name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	  param inout name "parent" type class_ref 129026 // ClassLoader
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7569026 "FactoryURLClassLoader"
	package explicit_return_type ""
	nparams 2
	  param inout name "urls" type class_ref 243458 // URL
	multiplicity "[]"
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7569154 "loadClass"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "resolve" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 973186 "URLDecoder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class for HTML form decoding. This class contains static methods
for decoding a String from the <CODE>application/x-www-form-urlencoded</CODE>
MIME format.
<p>
The conversion process is the reverse of that used by the URLEncoder class. It is assumed
that all characters in the encoded string are one of the following:
&quot;{@code a}&quot; through &quot;{@code z}&quot;,
&quot;{@code A}&quot; through &quot;{@code Z}&quot;,
&quot;{@code 0}&quot; through &quot;{@code 9}&quot;, and
&quot;{@code -}&quot;, &quot;{@code _}&quot;,
&quot;{@code .}&quot;, and &quot;{@code *}&quot;. The
character &quot;{@code %}&quot; is allowed but is interpreted
as the start of a special escaped sequence.
<p>
The following rules are applied in the conversion:

<ul>
<li>The alphanumeric characters &quot;{@code a}&quot; through
    &quot;{@code z}&quot;, &quot;{@code A}&quot; through
    &quot;{@code Z}&quot; and &quot;{@code 0}&quot;
    through &quot;{@code 9}&quot; remain the same.
<li>The special characters &quot;{@code .}&quot;,
    &quot;{@code -}&quot;, &quot;{@code *}&quot;, and
    &quot;{@code _}&quot; remain the same.
<li>The plus sign &quot;{@code +}&quot; is converted into a
    space character &quot; &nbsp; &quot; .
<li>A sequence of the form \"<i>{@code %xy}</i>\" will be
    treated as representing a byte where <i>xy</i> is the two-digit
    hexadecimal representation of the 8 bits. Then, all substrings
    that contain one or more of these byte sequences consecutively
    will be replaced by the character(s) whose encoding would result
    in those consecutive bytes.
    The encoding scheme used to decode these characters may be specified,
    or if unspecified, the default encoding of the platform will be used.
</ul>
<p>
There are two possible ways in which this decoder could deal with
illegal strings.  It could either leave illegal characters alone or
it could throw an {@link java.lang.IllegalArgumentException}.
Which approach the decoder takes is left to the
implementation.

@author  Mark Chamness
@author  Michael McCloskey
@since   1.2
"
      classrelation 3268738 // dfltEncName (<unidirectional association>)
	relation 3268738 --->
	  a role_name "dfltEncName" init_value " URLEncoder.dfltEncName" class_relation package
	    comment " The platform default encoding
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3268738 // dfltEncName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7569282 "decode"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Decodes a {@code x-www-form-urlencoded} string.
The platform's default encoding is used to determine what characters
are represented by any consecutive sequences of the form
\"<i>{@code %xy}</i>\".
@param s the {@code String} to decode
@deprecated The resulting string may vary depending on the platform's
         default encoding. Instead, use the decode(String,String) method
         to specify the encoding.
@return the newly decoded {@code String}
"
      end

      operation 7569410 "decode"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "enc" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a {@code application/x-www-form-urlencoded} string using a specific
encoding scheme.
The supplied encoding is used to determine
what characters are represented by any consecutive sequences of the
form \"<i>{@code %xy}</i>\".
<p>
<em><strong>Note:</strong> The <a href=
\"http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\">
World Wide Web Consortium Recommendation</a> states that
UTF-8 should be used. Not doing so may introduce
incompatibilities.</em>

@param s the {@code String} to decode
@param enc   The name of a supported
   <a href=\"../lang/package-summary.html#charenc\">character
   encoding</a>.
@return the newly decoded {@code String}
@exception  UnsupportedEncodingException
            If character encoding needs to be consulted, but
            named character encoding is not supported
@see URLEncoder#encode(java.lang.String, java.lang.String)
@since 1.4
"
      end
    end

    class 973314 "URLEncoder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class for HTML form encoding. This class contains static methods
for converting a String to the <CODE>application/x-www-form-urlencoded</CODE> MIME
format. For more information about HTML form encoding, consult the HTML
<A HREF=\"http://www.w3.org/TR/html4/\">specification</A>.

<p>
When encoding a String, the following rules apply:

<ul>
<li>The alphanumeric characters &quot;{@code a}&quot; through
    &quot;{@code z}&quot;, &quot;{@code A}&quot; through
    &quot;{@code Z}&quot; and &quot;{@code 0}&quot;
    through &quot;{@code 9}&quot; remain the same.
<li>The special characters &quot;{@code .}&quot;,
    &quot;{@code -}&quot;, &quot;{@code *}&quot;, and
    &quot;{@code _}&quot; remain the same.
<li>The space character &quot; &nbsp; &quot; is
    converted into a plus sign &quot;{@code +}&quot;.
<li>All other characters are unsafe and are first converted into
    one or more bytes using some encoding scheme. Then each byte is
    represented by the 3-character string
    &quot;<i>{@code %xy}</i>&quot;, where <i>xy</i> is the
    two-digit hexadecimal representation of the byte.
    The recommended encoding scheme to use is UTF-8. However,
    for compatibility reasons, if an encoding is not specified,
    then the default encoding of the platform is used.
</ul>

<p>
For example using UTF-8 as the encoding scheme the string &quot;The
string &#252;@foo-bar&quot; would get converted to
&quot;The+string+%C3%BC%40foo-bar&quot; because in UTF-8 the character
&#252; is encoded as two bytes C3 (hex) and BC (hex), and the
character @ is encoded as one byte 40 (hex).

@author  Herb Jellinek
@since   JDK1.0
"
      classrelation 3268866 // dontNeedEncoding (<unidirectional association>)
	relation 3268866 --->
	  a role_name "dontNeedEncoding" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3268866 // dontNeedEncoding (<unidirectional association>)
	  b parent class_ref 238082 // BitSet
      end

      attribute 1794306 "caseDiff"
	class_attribute const_attribute package explicit_type "int"
	init_value " ('a' - 'A')"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3268994 // dfltEncName (<unidirectional association>)
	relation 3268994 --->
	  a role_name "dfltEncName" init_value " null" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3268994 // dfltEncName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 166402 "initialization"
	
	cpp "" ""
	java "  static {

        /* The list of characters that are not encoded has been
         * determined as follows:
         *
         * RFC 2396 states:
         * -----
         * Data characters that are allowed in a URI but do not have a
         * reserved purpose are called unreserved.  These include upper
         * and lower case letters, decimal digits, and a limited set of
         * punctuation marks and symbols.
         *
         * unreserved  = alphanum | mark
         *
         * mark        = \"-\" | \"_\" | \".\" | \"!\" | \"~\" | \"*\" | \"'\" | \"(\" | \")\"
         *
         * Unreserved characters can be escaped without changing the
         * semantics of the URI, but this should not be done unless the
         * URI is being used in a context that does not allow the
         * unescaped character to appear.
         * -----
         *
         * It appears that both Netscape and Internet Explorer escape
         * all special characters from this list with the exception
         * of \"-\", \"_\", \".\", \"*\". While it is not clear why they are
         * escaping the other characters, perhaps it is safest to
         * assume that there might be contexts in which the others
         * are unsafe if not escaped. Therefore, we will use the same
         * list. It is also noteworthy that this is consistent with
         * O'Reilly's \"HTML: The Definitive Guide\" (page 164).
         *
         * As a last note, Intenet Explorer does not encode the \"@\"
         * character which is clearly not unreserved according to the
         * RFC. We are being consistent with the RFC in this matter,
         * as is Netscape.
         *
         */

        dontNeedEncoding = new BitSet(256);
        int i;
        for (i = 'a'; i <= 'z'; i++) {
            dontNeedEncoding.set(i);
        }
        for (i = 'A'; i <= 'Z'; i++) {
            dontNeedEncoding.set(i);
        }
        for (i = '0'; i <= '9'; i++) {
            dontNeedEncoding.set(i);
        }
        dontNeedEncoding.set(' '); /* encoding a space to a + is done
                                    * in the encode() method */
        dontNeedEncoding.set('-');
        dontNeedEncoding.set('_');
        dontNeedEncoding.set('.');
        dontNeedEncoding.set('*');

        dfltEncName = AccessController.doPrivileged(
            new GetPropertyAction(\"file.encoding\")
        );
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7569538 "URLEncoder"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "You can't call the constructor.
"
      end

      operation 7569666 "encode"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Translates a string into {@code x-www-form-urlencoded}
format. This method uses the platform's default encoding
as the encoding scheme to obtain the bytes for unsafe characters.

@param   s   {@code String} to be translated.
@deprecated The resulting string may vary depending on the platform's
            default encoding. Instead, use the encode(String,String)
            method to specify the encoding.
@return  the translated {@code String}.
"
      end

      operation 7569794 "encode"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "enc" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a string into {@code application/x-www-form-urlencoded}
format using a specific encoding scheme. This method uses the
supplied encoding scheme to obtain the bytes for unsafe
characters.
<p>
<em><strong>Note:</strong> The <a href=
\"http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\">
World Wide Web Consortium Recommendation</a> states that
UTF-8 should be used. Not doing so may introduce
incompatibilities.</em>

@param   s   {@code String} to be translated.
@param   enc   The name of a supported
   <a href=\"../lang/package-summary.html#charenc\">character
   encoding</a>.
@return  the translated {@code String}.
@exception  UnsupportedEncodingException
            If the named encoding is not supported
@see URLDecoder#decode(java.lang.String, java.lang.String)
@since 1.4
"
      end
    end

    class 973442 "URLPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents permission to access a resource or set of resources defined by a
given url, and for a given set of user-settable request methods
and request headers. The <i>name</i> of the permission is the url string.
The <i>actions</i> string is a concatenation of the request methods and headers.
The range of method and header names is not restricted by this class.
<p><b>The url</b><p>
The url string has the following expected structure.
<pre>
    scheme : // authority [ / path ]
</pre>
<i>scheme</i> will typically be http or https, but is not restricted by this
class.
<i>authority</i> is specified as:
<pre>
    authority = [ userinfo @ ] hostrange [ : portrange ]
    portrange = portnumber | -portnumber | portnumber-[portnumber] | *
    hostrange = ([*.] dnsname) | IPv4address | IPv6address
</pre>
<i>dnsname</i> is a standard DNS host or domain name, ie. one or more labels
separated by \".\". <i>IPv4address</i> is a standard literal IPv4 address and
<i>IPv6address</i> is as defined in <a href=\"http://www.ietf.org/rfc/rfc2732.txt\">
RFC 2732</a>. Literal IPv6 addresses must however, be enclosed in '[]' characters.
The <i>dnsname</i> specification can be preceded by \"*.\" which means
the name will match any hostname whose right-most domain labels are the same as
this name. For example, \"*.oracle.com\" matches \"foo.bar.oracle.com\"
<p>
<i>portrange</i> is used to specify a port number, or a bounded or unbounded range of ports
that this permission applies to. If portrange is absent or invalid, then a default
port number is assumed if the scheme is {@code http} (default 80) or {@code https}
(default 443). No default is assumed for other schemes. A wildcard may be specified
which means all ports.
<p>
<i>userinfo</i> is optional. A userinfo component if present, is ignored when
creating a URLPermission, and has no effect on any other methods defined by this class.
<p>
The <i>path</i> component comprises a sequence of path segments,
separated by '/' characters. <i>path</i> may also be empty. The path is specified
in a similar way to the path in {@link java.io.FilePermission}. There are
three different ways as the following examples show:
<table border>
<caption>URL Examples</caption>
<tr><th>Example url</th><th>Description</th></tr>
<tr><td style=\"white-space:nowrap;\">http://www.oracle.com/a/b/c.html</td>
  <td>A url which identifies a specific (single) resource</td>
</tr>
<tr><td>http://www.oracle.com/a/b/*</td>
  <td>The '*' character refers to all resources in the same \"directory\" - in
      other words all resources with the same number of path components, and
      which only differ in the final path component, represented by the '*'.
  </td>
</tr>
<tr><td>http://www.oracle.com/a/b/-</td>
  <td>The '-' character refers to all resources recursively below the
      preceding path (eg. http://www.oracle.com/a/b/c/d/e.html matches this
      example).
  </td>
</tr>
</table>
<p>
The '*' and '-' may only be specified in the final segment of a path and must be
the only character in that segment. Any query or fragment components of the
url are ignored when constructing URLPermissions.
<p>
As a special case, urls of the form, \"scheme:*\" are accepted to
mean any url of the given scheme.
<p>
The <i>scheme</i> and <i>authority</i> components of the url string are handled
without regard to case. This means {@link #equals(Object)},
{@link #hashCode()} and {@link #implies(Permission)} are case insensitive with respect
to these components. If the <i>authority</i> contains a literal IP address,
then the address is normalized for comparison. The path component is case sensitive.
<p><b>The actions string</b><p>
The actions string of a URLPermission is a concatenation of the <i>method list</i>
and the <i>request headers list</i>. These are lists of the permitted request
methods and permitted request headers of the permission (respectively). The two lists
are separated by a colon ':' character and elements of each list are comma separated.
Some examples are:
<pre>
        \"POST,GET,DELETE\"
        \"GET:X-Foo-Request,X-Bar-Request\"
        \"POST,GET:Header1,Header2\"
</pre>
The first example specifies the methods: POST, GET and DELETE, but no request headers.
The second example specifies one request method and two headers. The third
example specifies two request methods, and two headers.
<p>
The colon separator need not be present if the request headers list is empty.
No white-space is permitted in the actions string. The action strings supplied to
the URLPermission constructors are case-insensitive and are normalized by converting
method names to upper-case and header names to the form defines in RFC2616 (lower case
with initial letter of each word capitalized). Either list can contain a wild-card '*'
character which signifies all request methods or headers respectively.
<p>
Note. Depending on the context of use, some request methods and headers may be permitted
at all times, and others may not be permitted at any time. For example, the
HTTP protocol handler might disallow certain headers such as Content-Length
from being set by application code, regardless of whether the security policy
in force, permits it.

@since 1.8
"
      classrelation 3269122 // <generalisation>
	relation 3269122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3269122 // <generalisation>
	  b parent class_ref 257538 // Permission
      end

      attribute 1794434 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2702463814894478682L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3269250 // scheme (<unidirectional association>)
	relation 3269250 --->
	  a role_name "scheme" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3269250 // scheme (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3269378 // ssp (<unidirectional association>)
	relation 3269378 --->
	  a role_name "ssp" private
	    comment " scheme specific part"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3269378 // ssp (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3269506 // path (<unidirectional association>)
	relation 3269506 --->
	  a role_name "path" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3269506 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3269634 // methods (<unidirectional association>)
	relation 3269634 --->
	  a role_name "methods" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3269634 // methods (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3269762 // requestHeaders (<unidirectional association>)
	relation 3269762 --->
	  a role_name "requestHeaders" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3269762 // requestHeaders (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      class 973570 "Authority"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3270146 // p (<unidirectional association>)
	  relation 3270146 --->
	    a role_name "p" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3270146 // p (<unidirectional association>)
	    b parent class_ref 965634 // HostPortrange
	end

	operation 7571458 "Authority"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "scheme" type class_ref 128130 // String
	    param inout name "authority" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7571586 "implies"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "other" type class_ref 973570 // Authority
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7571714 "impliesHostrange"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "that" type class_ref 973570 // Authority
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7571842 "impliesPortrange"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "that" type class_ref 973570 // Authority
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7571970 "equals"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "that" type class_ref 973570 // Authority
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7572098 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3269890 // authority (<unidirectional association>)
	relation 3269890 --->
	  a role_name "authority" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3269890 // authority (<unidirectional association>)
	  b parent class_ref 973570 // Authority
      end

      classrelation 3270018 // actions (<unidirectional association>)
	relation 3270018 --->
	  a role_name "actions" private
	    comment " serialized field
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3270018 // actions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7569922 "URLPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "url" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new URLPermission from a url string and which permits the given
request methods and user-settable request headers.
The name of the permission is the url string it was created with. Only the scheme,
authority and path components of the url are used internally. Any fragment or query
components are ignored. The permissions action string is as specified above.

@param url the url string

@param actions the actions string

@exception IllegalArgumentException if url is invalid or if actions contains white-space.
"
      end

      operation 7570050 "init"
	private explicit_return_type "void"
	nparams 1
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7570178 "URLPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "url" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a URLPermission with the given url string and unrestricted
methods and request headers by invoking the two argument
constructor as follows: URLPermission(url, \"*:*\")

@param url the url string

@throws    IllegalArgumentException if url does not result in a valid {@link URI}
"
      end

      operation 7570306 "getActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the normalized method list and request
header list, in the form:
<pre>
     \"method-names : header-names\"
</pre>
<p>
where method-names is the list of methods separated by commas
and header-names is the list of permitted headers separated by commas.
There is no white space in the returned String. If header-names is empty
then the colon separator will not be present.
"
      end

      operation 7570434 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this URLPermission implies the given permission.
Specifically, the following checks are done as if in the
following sequence:
<ul>
<li>if 'p' is not an instance of URLPermission return false</li>
<li>if any of p's methods are not in this's method list, and if
    this's method list is not equal to \"*\", then return false.</li>
<li>if any of p's headers are not in this's request header list, and if
    this's request header list is not equal to \"*\", then return false.</li>
<li>if this's url scheme is not equal to p's url scheme return false</li>
<li>if the scheme specific part of this's url is '*' return true</li>
<li>if the set of hosts defined by p's url hostrange is not a subset of
    this's url hostrange then return false. For example, \"*.foo.oracle.com\"
    is a subset of \"*.oracle.com\". \"foo.bar.oracle.com\" is not
    a subset of \"*.foo.oracle.com\"</li>
<li>if the portrange defined by p's url is not a subset of the
    portrange defined by this's url then return false.
<li>if the path or paths specified by p's url are contained in the
    set of paths specified by this's url, then return true
<li>otherwise, return false</li>
</ul>
<p>Some examples of how paths are matched are shown below:
<table border>
<caption>Examples of Path Matching</caption>
<tr><th>this's path</th><th>p's path</th><th>match</th></tr>
<tr><td>/a/b</td><td>/a/b</td><td>yes</td></tr>
<tr><td>/a/b/*</td><td>/a/b/c</td><td>yes</td></tr>
<tr><td>/a/b/*</td><td>/a/b/c/d</td><td>no</td></tr>
<tr><td>/a/b/-</td><td>/a/b/c/d</td><td>yes</td></tr>
<tr><td>/a/b/-</td><td>/a/b/c/d/e</td><td>yes</td></tr>
<tr><td>/a/b/-</td><td>/a/b/c/*</td><td>yes</td></tr>
<tr><td>/a/b/*</td><td>/a/b/c/-</td><td>no</td></tr>
</table>
"
      end

      operation 7570562 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if, this.getActions().equals(p.getActions())
and p's url equals this's url.  Returns false otherwise.
"
      end

      operation 7570690 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode calculated from the hashcode of the
actions String and the url string.
"
      end

      operation 7570818 "normalizeMethods"
	private return_type class_ref 175362 // List
	nparams 1
	  param inout name "methods" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7570946 "normalizeHeaders"
	private return_type class_ref 175362 // List
	nparams 1
	  param inout name "headers" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7571074 "parseURI"
	private explicit_return_type "void"
	nparams 1
	  param inout name "url" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7571202 "actions"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7571330 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "restore the state of this object from stream
"
      end
    end
  end

  deploymentview 167682 "net"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 701442 "SocketOptions"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 962050 // SocketOptions
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 701570 "DatagramSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InterruptedIOException;
${definition}"
      associated_elems
	class_ref 961922 // DatagramSocketImpl
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 701698 "AbstractPlainDatagramSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileDescriptor;
import java.io.IOException;
import java.security.AccessController;
import sun.net.ResourceManager;
${definition}"
      associated_elems
	class_ref 961794 // AbstractPlainDatagramSocketImpl
      end
      comment "Copyright (c) 1996, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 701826 "SocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.FileDescriptor;
${definition}"
      associated_elems
	class_ref 962690 // SocketImpl
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 701954 "AbstractPlainSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.FileDescriptor;
import sun.net.ConnectionResetException;
import sun.net.NetHooks;
import sun.net.ResourceManager;
${definition}"
      associated_elems
	class_ref 962562 // AbstractPlainSocketImpl
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702082 "Authenticator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 963074 // Authenticator
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702210 "SocketException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 248066 // SocketException
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702338 "BindException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 963458 // BindException
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702466 "CacheRequest"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.OutputStream;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 963586 // CacheRequest
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702594 "CacheResponse"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Map;
import java.util.List;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 963714 // CacheResponse
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702722 "ConnectException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 963842 // ConnectException
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702850 "ContentHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 963970 // ContentHandler
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 702978 "ContentHandlerFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 964098 // ContentHandlerFactory
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 703106 "CookieHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.util.List;
import java.io.IOException;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 964226 // CookieHandler
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 703234 "CookieManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
import java.io.IOException;
import sun.util.logging.PlatformLogger;
${definition}"
      associated_elems
	class_ref 964354 // CookieManager
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 703362 "CookiePolicy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 964482 // CookiePolicy
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 703490 "CookieStore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 964610 // CookieStore
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 703618 "DatagramPacket"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 527490 // DatagramPacket
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 703746 "DatagramSocket"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.DatagramChannel;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;
${definition}"
      associated_elems
	class_ref 527234 // DatagramSocket
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 703874 "DatagramSocketImplFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 965122 // DatagramSocketImplFactory
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704002 "DefaultDatagramSocketImplFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
${definition}"
      associated_elems
	class_ref 965250 // DefaultDatagramSocketImplFactory
      end
      comment "Copyright (c) 2007,2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704130 "DefaultInterface"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 965378 // DefaultInterface
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704258 "FileNameMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 965506 // FileNameMap
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704386 "HostPortrange"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.*;
import java.util.Formatter;
import java.util.Locale;
import sun.net.util.IPAddressUtil;
${definition}"
      associated_elems
	class_ref 965634 // HostPortrange
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704514 "PlainSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.FileDescriptor;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import jdk.net.*;
import static sun.net.ExtendedOptionsImpl.*;
${definition}"
      associated_elems
	class_ref 965890 // PlainSocketImpl
      end
      comment "Copyright (c) 2007, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704642 "HttpConnectSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import static sun.net.ExtendedOptionsImpl.*;
${definition}"
      associated_elems
	class_ref 965762 // HttpConnectSocketImpl
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704770 "HttpCookie"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.StringTokenizer;
import java.util.NoSuchElementException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Date;
import java.util.Locale;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 964738 // HttpCookie
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 704898 "HttpRetryException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 966274 // HttpRetryException
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705026 "URLConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Hashtable;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.Collections;
import java.util.Map;
import java.util.List;
import java.security.Permission;
import java.security.AccessController;
import sun.security.util.SecurityConstants;
import sun.net.www.MessageHeader;
${definition}"
      associated_elems
	class_ref 783746 // URLConnection
	class_ref 966530 // UnknownContentHandler
      end
      comment "Copyright (c) 1995, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705154 "HttpURLConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.security.Permission;
import java.util.Date;
${definition}"
      associated_elems
	class_ref 672514 // HttpURLConnection
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705282 "IDN"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.net.idn.StringPrep;
import sun.net.idn.Punycode;
import sun.text.normalizer.UCharacterIterator;
${definition}"
      associated_elems
	class_ref 966786 // IDN
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705410 "InetAddress"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Random;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.ServiceLoader;
import java.security.AccessController;
import java.io.ObjectStreamException;
import java.io.ObjectStreamField;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectInputStream.GetField;
import java.io.ObjectOutputStream;
import java.io.ObjectOutputStream.PutField;
import sun.security.action.*;
import sun.net.InetAddressCachePolicy;
import sun.net.util.IPAddressUtil;
import sun.net.spi.nameservice.*;
${definition}"
      associated_elems
	class_ref 513154 // InetAddress
	class_ref 967682 // InetAddressImplFactory
      end
      comment "Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705538 "Inet4Address"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamException;
${definition}"
      associated_elems
	class_ref 966914 // Inet4Address
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705666 "InetAddressImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 967298 // InetAddressImpl
      end
      comment "Copyright (c) 2002, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705794 "Inet4AddressImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 967810 // Inet4AddressImpl
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 705922 "Inet6Address"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.util.Enumeration;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 967938 // Inet6Address
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706050 "Inet6AddressImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 968194 // Inet6AddressImpl
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706178 "InetAddressContainer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 968322 // InetAddressContainer
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706306 "SocketAddress"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 962178 // SocketAddress
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706434 "InetSocketAddress"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamException;
import java.io.ObjectStreamField;
${definition}"
      associated_elems
	class_ref 247938 // InetSocketAddress
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706562 "InMemoryCookieStore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URI;
import java.net.CookieStore;
import java.net.HttpCookie;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;
import java.util.Iterator;
import java.util.concurrent.locks.ReentrantLock;
${definition}"
      associated_elems
	class_ref 968578 // InMemoryCookieStore
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706690 "InterfaceAddress"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 968834 // InterfaceAddress
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706818 "JarURLConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.jar.JarFile;
import java.util.jar.JarEntry;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import java.security.Permission;
import sun.net.www.ParseUtil;
${definition}"
      associated_elems
	class_ref 968962 // JarURLConnection
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 706946 "MalformedURLException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 253442 // MalformedURLException
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707074 "MulticastSocket"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Enumeration;
${definition}"
      associated_elems
	class_ref 969346 // MulticastSocket
      end
      comment "Copyright (c) 1995, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707202 "NetPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
${definition}"
      associated_elems
	class_ref 969474 // NetPermission
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707330 "NetworkInterface"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.NoSuchElementException;
import sun.security.action.*;
import java.security.AccessController;
${definition}"
      associated_elems
	class_ref 962306 // NetworkInterface
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707458 "NoRouteToHostException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 969602 // NoRouteToHostException
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707586 "PasswordAuthentication"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 963330 // PasswordAuthentication
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707714 "PlainDatagramSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import jdk.net.*;
import static sun.net.ExtendedOptionsImpl.*;
${definition}"
      associated_elems
	class_ref 969730 // PlainDatagramSocketImpl
      end
      comment "Copyright (c) 2007, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707842 "PortUnreachableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 969858 // PortUnreachableException
      end
      comment "Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 707970 "ProtocolException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 966658 // ProtocolException
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708098 "ProtocolFamily"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 969986 // ProtocolFamily
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708226 "Proxy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 966018 // Proxy
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708354 "ProxySelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.List;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 970242 // ProxySelector
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708482 "ResponseCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Map;
import java.util.List;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 970370 // ResponseCache
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708610 "SdpSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.FileDescriptor;
import sun.net.sdp.SdpSupport;
${definition}"
      associated_elems
	class_ref 970498 // SdpSocketImpl
      end
      comment "Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708738 "SecureCacheResponse"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.cert.Certificate;
import javax.net.ssl.SSLPeerUnverifiedException;
import java.security.Principal;
import java.util.List;
${definition}"
      associated_elems
	class_ref 970626 // SecureCacheResponse
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708866 "ServerSocket"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.channels.ServerSocketChannel;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;
${definition}"
      associated_elems
	class_ref 208898 // ServerSocket
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 708994 "Socket"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.nio.channels.SocketChannel;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;
import java.security.PrivilegedAction;
${definition}"
      associated_elems
	class_ref 209154 // Socket
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 709122 "SocketImplFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 970754 // SocketImplFactory
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 709250 "SocketInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import sun.net.ConnectionResetException;
${definition}"
      associated_elems
	class_ref 962818 // SocketInputStream
      end
      comment "Copyright (c) 1995, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 709378 "SocketOption"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 962434 // SocketOption
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 709506 "SocketOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
${definition}"
      associated_elems
	class_ref 962946 // SocketOutputStream
      end
      comment "Copyright (c) 1995, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 709634 "SocketPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.Vector;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;
import java.net.InetAddress;
import java.security.Permission;
import java.security.PermissionCollection;
import java.security.PrivilegedAction;
import java.security.AccessController;
import java.security.Security;
import java.io.Serializable;
import java.io.ObjectStreamField;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import sun.net.util.IPAddressUtil;
import sun.net.RegisteredDomain;
import sun.net.PortConfig;
import sun.security.util.SecurityConstants;
import sun.security.util.Debug;
${definition}"
      associated_elems
	class_ref 970882 // SocketPermission
	class_ref 971138 // SocketPermissionCollection
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 709762 "SocketSecrets"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 971266 // SocketSecrets
      end
      comment "Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 709890 "SocketTimeoutException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 971394 // SocketTimeoutException
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710018 "SocksConsts"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 971522 // SocksConsts
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710146 "SocksSocketImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.BufferedOutputStream;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import sun.net.SocksProxy;
import sun.net.www.ParseUtil;
${definition}"
      associated_elems
	class_ref 971650 // SocksSocketImpl
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710274 "StandardProtocolFamily"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 971778 // StandardProtocolFamily
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710402 "StandardSocketOptions"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 971906 // StandardSocketOptions
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710530 "UnknownHostException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 246786 // UnknownHostException
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710658 "UnknownServiceException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 966402 // UnknownServiceException
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710786 "URI"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.CharacterCodingException;
import java.text.Normalizer;
import sun.nio.cs.ThreadLocalCoders;
import java.lang.Character;
import java.lang.NullPointerException;
${definition}"
      associated_elems
	class_ref 783874 // URI
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 710914 "URISyntaxException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 672642 // URISyntaxException
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711042 "URL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.InvalidObjectException;
import java.io.ObjectStreamException;
import java.io.ObjectStreamField;
import java.io.ObjectInputStream.GetField;
import java.util.Hashtable;
import java.util.StringTokenizer;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 243458 // URL
	class_ref 972674 // Parts
	class_ref 972418 // UrlDeserializedState
      end
      comment "Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711298 "URLClassLoader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import java.io.File;
import java.io.FilePermission;
import java.io.IOException;
import java.io.InputStream;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.CodeSigner;
import java.security.CodeSource;
import java.security.Permission;
import java.security.PermissionCollection;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import java.security.SecureClassLoader;
import java.util.Enumeration;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.jar.Attributes;
import java.util.jar.Attributes.Name;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import sun.misc.Resource;
import sun.misc.URLClassPath;
import sun.net.www.ParseUtil;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 972802 // URLClassLoader
	class_ref 973058 // FactoryURLClassLoader
      end
      comment "Copyright (c) 1997, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711426 "URLDecoder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 973186 // URLDecoder
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711554 "URLEncoder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayOutputStream;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.io.CharArrayWriter;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.security.action.GetBooleanAction;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 973314 // URLEncoder
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711682 "URLPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.security.Permission;
${definition}"
      associated_elems
	class_ref 973442 // URLPermission
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711810 "URLStreamHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.File;
import java.io.OutputStream;
import java.util.Hashtable;
import sun.net.util.IPAddressUtil;
import sun.net.www.ParseUtil;
${definition}"
      associated_elems
	class_ref 972290 // URLStreamHandler
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711938 "URLStreamHandlerFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 972546 // URLStreamHandlerFactory
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
