format 222
"print" // jdk1.8::javax::print
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/print/"
  java_package "javax.print"
  classview 150146 "print"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 428418 "PrintService"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface PrintService is the factory for a DocPrintJob. A PrintService
describes the capabilities of a Printer and can be queried regarding
a printer's supported attributes.
<P>
Example:
  <PRE>{@code
  DocFlavor flavor = DocFlavor.INPUT_STREAM.POSTSCRIPT;
  PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
  aset.add(MediaSizeName.ISO_A4);
  PrintService[] pservices =
                PrintServiceLookup.lookupPrintServices(flavor, aset);
  if (pservices.length > 0) {
      DocPrintJob pj = pservices[0].createPrintJob();
      try {
          FileInputStream fis = new FileInputStream(\"test.ps\");
          Doc doc = new SimpleDoc(fis, flavor, null);
          pj.print(doc, aset);
       } catch (FileNotFoundException fe) {
       } catch (PrintException e) {
       }
  }
  }</PRE>
"
      operation 10106114 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a String name for this print service which may be used
by applications to request a particular print service.
In a suitable context, such as a name service, this name must be
unique.
In some environments this unique name may be the same as the user
friendly printer name defined as the
{@link javax.print.attribute.standard.PrinterName PrinterName}
attribute.
@return name of the service.
"
      end

      operation 10106242 "createPrintJob"
	public return_type class_ref 1220866 // DocPrintJob
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a PrintJob capable of handling data from
any of the supported document flavors.
@return a DocPrintJob object
"
      end

      operation 10106370 "addPrintServiceAttributeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1224066 // PrintServiceAttributeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a listener for events on this PrintService.
@param listener  a PrintServiceAttributeListener, which
       monitors the status of a print service
@see #removePrintServiceAttributeListener
"
      end

      operation 10106498 "removePrintServiceAttributeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1224066 // PrintServiceAttributeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the print-service listener from this print service.
This means the listener is no longer interested in
<code>PrintService</code> events.
@param listener  a PrintServiceAttributeListener object
@see #addPrintServiceAttributeListener
"
      end

      operation 10106626 "getAttributes"
	public return_type class_ref 1224194 // PrintServiceAttributeSet
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains this print service's set of printer description attributes
giving this Print Service's status. The returned attribute set object
is unmodifiable. The returned attribute set object is a \"snapshot\" of
this Print Service's attribute set at the time of the
<CODE>getAttributes()</CODE> method call: that is, the returned
attribute set's contents will <I>not</I> be updated if this print
service's attribute set's contents change in the future. To detect
changes in attribute values, call <CODE>getAttributes()</CODE> again
and compare the new attribute set to the previous attribute set;
alternatively, register a listener for print service events.

@return  Unmodifiable snapshot of this Print Service's attribute set.
         May be empty, but not null.
"
      end

      operation 10106754 "getAttribute"
	public explicit_return_type "T"
	nparams 1
	  param inout name "category" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends PrintServiceAttribute> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the single specified service attribute.
This may be useful to clients which only need the value of one
attribute and want to minimize overhead.
@param category the category of a PrintServiceAttribute supported
by this service - may not be null.
@return the value of the supported attribute or null if the
attribute is not supported by this service.
@exception NullPointerException if the category is null.
@exception  IllegalArgumentException
    (unchecked exception) if <CODE>category</CODE> is not a
    <code>Class</code> that implements interface
{@link javax.print.attribute.PrintServiceAttribute PrintServiceAttribute}.
"
      end

      operation 10106882 "getSupportedDocFlavors"
	public return_type class_ref 1221634 // DocFlavor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the print data formats a client can specify when setting
up a job for this <code>PrintService</code>. A print data format is
designated by a \"doc
flavor\" (class {@link javax.print.DocFlavor DocFlavor})
consisting of a MIME type plus a print data representation class.
<P>
Note that some doc flavors may not be supported in combination
with all attributes. Use <code>getUnsupportedAttributes(..)</code>
to validate specific combinations.

@return  Array of supported doc flavors, should have at least
         one element.

"
      end

      operation 10107010 "isDocFlavorSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this print service supports a specific
<code>DocFlavor</code>.  This is a convenience method to determine
if the <code>DocFlavor</code> would be a member of the result of
<code>getSupportedDocFlavors()</code>.
<p>
Note that some doc flavors may not be supported in combination
with all attributes. Use <code>getUnsupportedAttributes(..)</code>
to validate specific combinations.

@param flavor the <code>DocFlavor</code>to query for support.
@return  <code>true</code> if this print service supports the
specified <code>DocFlavor</code>; <code>false</code> otherwise.
@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>flavor</CODE> is null.
"
      end

      operation 10107138 "getSupportedAttributeCategories"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the printing attribute categories a client can specify
when setting up a job for this print service.
A printing attribute category is
designated by a <code>Class</code> that implements interface
{@link javax.print.attribute.Attribute Attribute}. This method returns
just the attribute <I>categories</I> that are supported; it does not
return the particular attribute <I>values</I> that are supported.
<P>
This method returns all the printing attribute
categories this print service supports for any possible job.
Some categories may not be supported in a particular context (ie
for a particular <code>DocFlavor</code>).
Use one of the methods that include a <code>DocFlavor</code> to
validate the request before submitting it, such as
<code>getSupportedAttributeValues(..)</code>.

@return  Array of printing attribute categories that the client can
         specify as a doc-level or job-level attribute in a Print
         Request. Each element in the array is a {@link java.lang.Class
         Class} that implements interface {@link
         javax.print.attribute.Attribute Attribute}.
         The array is empty if no categories are supported.
"
      end

      operation 10107266 "isAttributeCategorySupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "category" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a client can specify the given printing
attribute category when setting up a job for this print service. A
printing attribute category is designated by a <code>Class</code>
that implements interface {@link javax.print.attribute.Attribute
Attribute}. This method tells whether the attribute <I>category</I> is
supported; it does not tell whether a particular attribute <I>value</I>
is supported.
<p>
Some categories may not be supported in a particular context (ie
for a particular <code>DocFlavor</code>).
Use one of the methods which include a <code>DocFlavor</code> to
validate the request before submitting it, such as
<code>getSupportedAttributeValues(..)</code>.
<P>
This is a convenience method to determine if the category
would be a member of the result of
<code>getSupportedAttributeCategories()</code>.

@param  category    Printing attribute category to test. It must be a
                       <code>Class</code> that implements
                       interface
               {@link javax.print.attribute.Attribute Attribute}.

@return  <code>true</code> if this print service supports
         specifying a doc-level or
         job-level attribute in <CODE>category</CODE> in a Print
         Request; <code>false</code> if it doesn't.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>category</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>category</CODE> is not a
    <code>Class</code> that implements interface
    {@link javax.print.attribute.Attribute Attribute}.
"
      end

      operation 10107394 "getDefaultAttributeValue"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "category" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines this print service's default printing attribute value in
the given category. A printing attribute value is an instance of
a class that implements interface
{@link javax.print.attribute.Attribute Attribute}. If a client sets
up a print job and does not specify any attribute value in the
given category, this Print Service will use the
default attribute value instead.
<p>
Some attributes may not be supported in a particular context (ie
for a particular <code>DocFlavor</code>).
Use one of the methods that include a <code>DocFlavor</code> to
validate the request before submitting it, such as
<code>getSupportedAttributeValues(..)</code>.
<P>
Not all attributes have a default value. For example the
service will not have a defaultvalue for <code>RequestingUser</code>
i.e. a null return for a supported category means there is no
service default value for that category. Use the
<code>isAttributeCategorySupported(Class)</code> method to
distinguish these cases.

@param  category    Printing attribute category for which the default
                    attribute value is requested. It must be a {@link
                       java.lang.Class Class} that implements interface
                       {@link javax.print.attribute.Attribute
                       Attribute}.

@return  Default attribute value for <CODE>category</CODE>, or null
      if this Print Service does not support specifying a doc-level or
         job-level attribute in <CODE>category</CODE> in a Print
         Request, or the service does not have a default value
         for this attribute.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>category</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>category</CODE> is not a
    {@link java.lang.Class Class} that implements interface {@link
    javax.print.attribute.Attribute Attribute}.
"
      end

      operation 10107522 "getSupportedAttributeValues"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "category" type class_ref 130818 // Class
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the printing attribute values a client can specify in
the given category when setting up a job for this print service. A
printing
attribute value is an instance of a class that implements interface
{@link javax.print.attribute.Attribute Attribute}.
<P>
If <CODE>flavor</CODE> is null and <CODE>attributes</CODE> is null
or is an empty set, this method returns all the printing attribute
values this Print Service supports for any possible job. If
<CODE>flavor</CODE> is not null or <CODE>attributes</CODE> is not
an empty set, this method returns just the printing attribute values
that are compatible with the given doc flavor and/or set of attributes.
That is, a null return value may indicate that specifying this attribute
is incompatible with the specified DocFlavor.
Also if DocFlavor is not null it must be a flavor supported by this
PrintService, else IllegalArgumentException will be thrown.
<P>
If the <code>attributes</code> parameter contains an Attribute whose
category is the same as the <code>category</code> parameter, the service
must ignore this attribute in the AttributeSet.
<p>
<code>DocAttribute</code>s which are to be specified on the
<code>Doc</code> must be included in this set to accurately
represent the context.
<p>
This method returns an Object because different printing attribute
categories indicate the supported attribute values in different ways.
The documentation for each printing attribute in package {@link
javax.print.attribute.standard javax.print.attribute.standard}
describes how each attribute indicates its supported values. Possible
ways of indicating support include:
<UL>
<LI>
Return a single instance of the attribute category to indicate that any
value is legal -- used, for example, by an attribute whose value is an
arbitrary text string. (The value of the returned attribute object is
irrelevant.)
<LI>
Return an array of one or more instances of the attribute category,
containing the legal values -- used, for example, by an attribute with
a list of enumerated values. The type of the array is an array of the
specified attribute category type as returned by its
<code>getCategory(Class)</code>.
<LI>
Return a single object (of some class other than the attribute category)
that indicates bounds on the legal values -- used, for example, by an
integer-valued attribute that must lie within a certain range.
</UL>
<P>

@param  category    Printing attribute category to test. It must be a
                       {@link java.lang.Class Class} that implements
                       interface {@link
                       javax.print.attribute.Attribute Attribute}.
@param  flavor      Doc flavor for a supposed job, or null.
@param  attributes  Set of printing attributes for a supposed job
                       (both job-level attributes and document-level
                       attributes), or null.

@return  Object indicating supported values for <CODE>category</CODE>,
         or null if this Print Service does not support specifying a
         doc-level or job-level attribute in <CODE>category</CODE> in
         a Print Request.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>category</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>category</CODE> is not a
    {@link java.lang.Class Class} that implements interface {@link
    javax.print.attribute.Attribute Attribute}, or
    <code>DocFlavor</code> is not supported by this service.
"
      end

      operation 10107650 "isAttributeValueSupported"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "attrval" type class_ref 1220610 // Attribute
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a client can specify the given printing
attribute
value when setting up a job for this Print Service. A printing
attribute value is an instance of a class that implements interface
 {@link javax.print.attribute.Attribute Attribute}.
<P>
If <CODE>flavor</CODE> is null and <CODE>attributes</CODE> is null or
is an empty set, this method tells whether this Print Service supports
the given printing attribute value for some possible combination of doc
flavor and set of attributes. If <CODE>flavor</CODE> is not null or
<CODE>attributes</CODE> is not an empty set, this method tells whether
this Print Service supports the given printing attribute value in
combination with the given doc flavor and/or set of attributes.
<p>
Also if DocFlavor is not null it must be a flavor supported by this
PrintService, else IllegalArgumentException will be thrown.
<p>
<code>DocAttribute</code>s which are to be specified on the
<code>Doc</code> must be included in this set to accurately
represent the context.
<p>
This is a convenience method to determine if the value
would be a member of the result of
<code>getSupportedAttributeValues(...)</code>.

@param  attrval       Printing attribute value to test.
@param  flavor      Doc flavor for a supposed job, or null.
@param  attributes  Set of printing attributes for a supposed job
                       (both job-level attributes and document-level
                       attributes), or null.

@return  True if this Print Service supports specifying
       <CODE>attrval</CODE> as a doc-level or job-level attribute in a
         Print Request, false if it doesn't.

@exception  NullPointerException
    (unchecked exception)  if <CODE>attrval</CODE> is null.
@exception  IllegalArgumentException if flavor is not supported by
     this PrintService.
"
      end

      operation 10107778 "getUnsupportedAttributes"
	public return_type class_ref 1224322 // AttributeSet
	nparams 2
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Identifies the attributes that are unsupported for a print request
in the context of a particular DocFlavor.
This method is useful for validating a potential print job and
identifying the specific attributes which cannot be supported.
It is important to supply only a supported DocFlavor or an
IllegalArgumentException will be thrown. If the
return value from this method is null, all attributes are supported.
<p>
<code>DocAttribute</code>s which are to be specified on the
<code>Doc</code> must be included in this set to accurately
represent the context.
<p>
If the return value is non-null, all attributes in the returned
set are unsupported with this DocFlavor. The returned set does not
distinguish attribute categories that are unsupported from
unsupported attribute values.
<p>
A supported print request can then be created by removing
all unsupported attributes from the original attribute set,
except in the case that the DocFlavor is unsupported.
<p>
If any attributes are unsupported only because they are in conflict
with other attributes then it is at the discretion of the service
to select the attribute(s) to be identified as the cause of the
conflict.
<p>
Use <code>isDocFlavorSupported()</code> to verify that a DocFlavor
is supported before calling this method.

@param  flavor      Doc flavor to test, or null
@param  attributes  Set of printing attributes for a supposed job
                       (both job-level attributes and document-level
                       attributes), or null.

@return  null if this Print Service supports the print request
specification, else the unsupported attributes.

@exception IllegalArgumentException if<CODE>flavor</CODE> is
            not supported by this PrintService.
"
      end

      operation 10107906 "getServiceUIFactory"
	public return_type class_ref 1224450 // ServiceUIFactory
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a factory for UI components which allow users to interact
with the service in various roles.
Services which do not provide any UI should return null.
Print Services which do provide UI but want to be supported in
an environment with no UI support should ensure that the factory
is not initialised unless the application calls this method to
obtain the factory.
See <code>ServiceUIFactory</code> for more information.
@return null or a factory for UI components.
"
      end

      operation 10108034 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if two services are referring to the same underlying
service.  Objects encapsulating a print service may not exhibit
equality of reference even though they refer to the same underlying
service.
<p>
Clients should call this method to determine if two services are
referring to the same underlying service.
<p>
Services must implement this method and return true only if the
service objects being compared may be used interchangeably by the
client.
Services are free to return the same object reference to an underlying
service if that, but clients must not depend on equality of reference.
@param obj the reference object with which to compare.
@return true if this service is the same as the obj argument,
false otherwise.
"
      end

      operation 10108162 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method should be implemented consistently with
<code>equals(Object)</code>.
@return hash code of this object.
"
      end
    end

    class 902530 "StreamPrintServiceFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>StreamPrintServiceFactory</code> is the factory for
{@link StreamPrintService} instances,
which can print to an output stream in a particular
document format described as a mime type.
A typical output document format may be Postscript(TM).
<p>
This class is implemented by a service and located by the
implementation using the
<a href=\"../../../technotes/guides/jar/jar.html#Service Provider\">
SPI JAR File specification</a>.
<p>
Applications locate instances of this class by calling the
{@link #lookupStreamPrintServiceFactories(DocFlavor, String)} method.
<p>
Applications can use a <code>StreamPrintService</code> obtained from a
factory in place of a <code>PrintService</code> which represents a
physical printer device.
"
      class 1225218 "Services"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3920386 // listOfFactories (<unidirectional association>)
	  relation 3920386 --->
	    a role_name "listOfFactories" init_value " null" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3920386 // listOfFactories (<unidirectional association>)
	    b parent class_ref 186498 // ArrayList
	end
      end

      operation 10113154 "getServices"
	class_operation private return_type class_ref 1225218 // Services
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10113282 "getListOfFactories"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10113410 "initListOfFactories"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10113538 "lookupStreamPrintServiceFactories"
	class_operation public return_type class_ref 902530 // StreamPrintServiceFactory
	nparams 2
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "outputMimeType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locates factories for print services that can be used with
a print job to output a stream of data in the
format specified by {@code outputMimeType}.
<p>
The {@code outputMimeType} parameter describes the document type that
you want to create, whereas the {@code flavor} parameter describes the
format in which the input data will be provided by the application
to the {@code StreamPrintService}.
<p>
Although null is an acceptable value to use in the lookup of stream
printing services, it's typical to search for a particular
desired format, such as Postscript(TM).
<p>
@param flavor of the input document type - null means match all
types.
@param outputMimeType representing the required output format, used to
identify suitable stream printer factories. A value of null means
match all formats.
@return - matching factories for stream print service instance,
          empty if no suitable factories could be located.
"
      end

      operation 10113666 "getOutputFormat"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Queries the factory for the document format that is emitted
by printers obtained from this factory.

@return the output format described as a mime type.
"
      end

      operation 10113794 "getSupportedDocFlavors"
	abstract public return_type class_ref 1221634 // DocFlavor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries the factory for the document flavors that can be accepted
by printers obtained from this factory.
@return array of supported doc flavors.
"
      end

      operation 10113922 "getPrintService"
	abstract public return_type class_ref 1225090 // StreamPrintService
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>StreamPrintService</code> that can print to
the specified output stream.
The output stream is created and managed by the application.
It is the application's responsibility to close the stream and
to ensure that this Printer is not reused.
The application should not close this stream until any print job
created from the printer is complete. Doing so earlier may generate
a <code>PrinterException</code> and an event indicating that the
job failed.
<p>
Whereas a <code>PrintService</code> connected to a physical printer
can be reused,
a <code>StreamPrintService</code> connected to a stream cannot.
The underlying <code>StreamPrintService</code> may be disposed by
the print system with
the {@link StreamPrintService#dispose() dispose} method
before returning from the
{@link DocPrintJob#print(Doc, javax.print.attribute.PrintRequestAttributeSet) print}
method of <code>DocPrintJob</code> so that the print system knows
this printer is no longer usable.
This is equivalent to a physical printer going offline - permanently.
Applications may supply a null print stream to create a queryable
service. It is not valid to create a PrintJob for such a stream.
Implementations which allocate resources on construction should examine
the stream and may wish to only allocate resources if the stream is
non-null.
<p>
@param out destination stream for generated output.
@return a PrintService which will generate the format specified by the
DocFlavor supported by this Factory.
"
      end

      operation 10114050 "getAllFactories"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10114178 "isMember"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "flavors" type class_ref 1221634 // DocFlavor
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10114306 "getFactories"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 2
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "outType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1220482 "AttributeException"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface AttributeException is a mixin interface which a subclass of
{@link
PrintException PrintException} can implement to report an error condition
involving one or more printing attributes that a particular Print
Service instance does not support. Either the attribute is not supported at
all, or the attribute is supported but the particular specified value is not
supported. The Print Service API does not define any print exception
classes that implement interface AttributeException, that being left to the
Print Service implementor's discretion.

"
      operation 10097410 "getUnsupportedAttributes"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of printing attribute classes for which the Print
Service instance does not support the attribute at all, or null if
there are no such attributes. The objects in the returned array are
classes that extend the base interface
{@link javax.print.attribute.Attribute Attribute}.

@return unsupported attribute classes
"
      end

      operation 10097538 "getUnsupportedValues"
	public return_type class_ref 1220610 // Attribute
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of printing attributes for which the Print Service
instance supports the attribute but does not support that particular
value of the attribute, or null if there are no such attribute values.

@return unsupported attribute values
"
      end
    end

    class 1220738 "CancelablePrintJob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is used by a printing application to cancel a
print job.  This interface extends {@link DocPrintJob}.  A
<code>DocPrintJob</code> implementation returned from a print
service implements this interface if the print job can be
cancelled.  Before trying to cancel
a print job, the client needs to test if the
<code>DocPrintJob</code> object returned from the print service
actually implements this interface.  Clients should never assume
that a <code>DocPrintJob</code> implements this interface.  A
print service might support cancellation only for certain types
of print data and representation class names.  This means that
only some of the <code>DocPrintJob</code> objects returned from
a service will implement this interface.
<p>
Service implementors are encouraged to implement this optional interface
and to deliver a javax.print.event.PrintJobEvent.JOB_CANCELLED event
to any listeners if a job is successfully cancelled with an
implementation of this interface. Services should also note that an
implementation of this method may be made from a separate client thread
than that which made the print request.  Thus the implementation of
this interface must be made thread safe.
"
      classrelation 3906562 // <generalisation>
	relation 3906562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3906562 // <generalisation>
	  b parent class_ref 1220866 // DocPrintJob
      end

      operation 10098562 "cancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1221506 // PrintException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stops further processing of a print job.
<p>
If a service supports this method it cannot be concluded that
job cancellation will always succeed. A job may not be able to be
cancelled once it has reached and passed some point in its processing.
A successful cancellation means only that the entire job was not
printed, some portion may already have printed when cancel returns.
<p>
The service will throw a PrintException if the cancellation did not
succeed. A job which has not yet been submitted for printing should
throw this exception.
Cancelling an already successfully cancelled Print Job is not
considered an error and will always succeed.
<p>
Cancellation in some services may be a lengthy process, involving
requests to a server and processing of its print queue. Clients
may wish to execute cancel in a thread which does not affect
application execution.
@throws PrintException if the job could not be successfully cancelled.
"
      end
    end

    class 1220866 "DocPrintJob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
This interface represents a print job that can print a specified
document with a set of job attributes.  An object implementing
this interface is obtained from a print service.

"
      operation 10097666 "getPrintService"
	public return_type class_ref 428418 // PrintService
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the {@link PrintService} object to which this print job
object is bound.

@return  <code>PrintService</code> object.

"
      end

      operation 10097794 "getAttributes"
	public return_type class_ref 1220994 // PrintJobAttributeSet
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains this Print Job's set of printing attributes.
The returned attribute set object is unmodifiable.
The returned attribute set object is a \"snapshot\" of this Print Job's
attribute set at the time of the {@link #getAttributes()} method
call; that is, the returned attribute set's object's contents will
not be updated if this Print Job's attribute set's contents change
in the future. To detect changes in attribute values, call
<code>getAttributes()</code> again and compare the new attribute
set to the previous attribute set; alternatively, register a
listener for print job events.
The returned value may be an empty set but should not be null.
@return the print job attributes
"
      end

      operation 10097922 "addPrintJobListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1221122 // PrintJobListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a listener for event occurring during this print job.
If listener is null, no exception is thrown and no action is
performed.
If listener is already registered, it will be registered again.
@see #removePrintJobListener

@param listener  The object implementing the listener interface

"
      end

      operation 10098050 "removePrintJobListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1221122 // PrintJobListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from this print job.
This method performs no function, nor does it throw an exception,
if the listener specified by the argument was not previously added
to this component. If listener is null, no exception is thrown and
no action is performed. If a listener was registered more than once
only one of the registrations will be removed.
@see #addPrintJobListener

@param listener  The object implementing the listener interface
"
      end

      operation 10098178 "addPrintJobAttributeListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "listener" type class_ref 1221250 // PrintJobAttributeListener
	  param inout name "attributes" type class_ref 1220994 // PrintJobAttributeSet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a listener for changes in the specified attributes.
If listener is null, no exception is thrown and no action is
performed.
To determine the attribute updates that may be reported by this job,
a client can call <code>getAttributes()</code> and identify the
subset that are interesting and likely to be reported to the
listener. Clients expecting to be updated about changes in a
specific job attribute should verify it is in that set, but
updates about an attribute will be made only if it changes and this
is detected by the job. Also updates may be subject to batching
by the job. To minimize overhead in print job processing it is
recommended to listen on only that subset of attributes which
are likely to change.
If the specified set is empty no attribute updates will be reported
to the listener.
If the attribute set is null, then this means to listen on all
dynamic attributes that the job supports. This may result in no
update notifications if a job can not report any attribute updates.

If listener is already registered, it will be registered again.
@see #removePrintJobAttributeListener

@param listener  The object implementing the listener interface
@param attributes The attributes to listen on, or null to mean
all attributes that can change, as determined by the job.
"
      end

      operation 10098306 "removePrintJobAttributeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1221250 // PrintJobAttributeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an attribute listener from this print job.
This method performs no function, nor does it throw an exception,
if the listener specified by the argument was not previously added
to this component. If the listener is null, no exception is thrown
and no action is performed.
If a listener is registered more than once, even for a different
set of attributes, no guarantee is made which listener is removed.
@see #addPrintJobAttributeListener

@param listener  The object implementing the listener interface

"
      end

      operation 10098434 "print"
	public explicit_return_type "void"
	nparams 2
	  param inout name "doc" type class_ref 1221378 // Doc
	  param inout name "attributes" type class_ref 428546 // PrintRequestAttributeSet
	nexceptions 1
	  exception class_ref 1221506 // PrintException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a document with the specified job attributes.
This method should only be called once for a given print job.
Calling it again will not result in a new job being spooled to
the printer. The service implementation will define policy
for service interruption and recovery.
When the print method returns, printing may not yet have completed as
printing may happen asynchronously, perhaps in a different thread.
Application clients which  want to monitor the success or failure
should register a PrintJobListener.
<p>
Print service implementors should close any print data streams (ie
Reader or InputStream implementations) that they obtain
from the client doc. Robust clients may still wish to verify this.
An exception is always generated if a <code>DocFlavor</code> cannot
be printed.

@param doc       The document to be printed. If must be a flavor
                                 supported by this PrintJob.

@param attributes The job attributes to be applied to this print job.
       If this parameter is null then the default attributes are used.
@throws PrintException The exception additionally may implement
an interface that more precisely describes the cause of the
exception
<ul>
<li>FlavorException.
 If the document has a flavor not supported by this print job.
<li>AttributeException.
 If one or more of the attributes are not valid for this print job.
</ul>
"
      end
    end

    class 1221378 "Doc"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface Doc specifies the interface for an object that supplies one piece
of print data for a Print Job. \"Doc\" is a short, easy-to-pronounce term
that means \"a piece of print data.\" The client passes to the Print Job an
object that implements interface Doc, and the Print Job calls methods on
that object to obtain the print data. The Doc interface lets a Print Job:
<UL>
<LI>
Determine the format, or \"doc flavor\" (class {@link DocFlavor DocFlavor}),
in which the print data is available. A doc flavor designates the print
data format (a MIME type) and the representation class of the object
from which the print data comes.
<P>
<LI>
Obtain the print data representation object, which is an instance of the
doc flavor's representation class. The Print Job can then obtain the actual
print data from the representation object.
<P>
<LI>
Obtain the printing attributes that specify additional characteristics of
the doc or that specify processing instructions to be applied to the doc.
Printing attributes are defined in package {@link javax.print.attribute
javax.print.attribute}. The doc returns its printing attributes stored in
an {@link javax.print.attribute.DocAttributeSet javax.print.attribute.DocAttributeSet}.
</UL>
<P>
Each method in an implementation of interface Doc is permitted always to
return the same object each time the method is called.
This has implications
for a Print Job or other caller of a doc object whose print data
representation object \"consumes\" the print data as the caller obtains the
print data, such as a print data representation object which is a stream.
Once the Print Job has called {@link #getPrintData()
getPrintData()} and obtained the stream, any further calls to
{@link #getPrintData() getPrintData()} will return the same
stream object upon which reading may already be in progress, <I>not</I> a new
stream object that will re-read the print data from the beginning. Specifying
a doc object to behave this way simplifies the implementation of doc objects,
and is justified on the grounds that a particular doc is intended to convey
print data only to one Print Job, not to several different Print Jobs. (To
convey the same print data to several different Print Jobs, you have to
create several different doc objects on top of the same print data source.)
<P>
Interface Doc affords considerable implementation flexibility. The print data
might already be in existence when the doc object is constructed. In this
case the objects returned by the doc's methods can be supplied to the doc's
constructor, be stored in the doc ahead of time, and simply be returned when
called for. Alternatively, the print data might not exist yet when the doc
object is constructed. In this case the doc object might provide a \"lazy\"
implementation that generates the print data representation object (and/or
the print data) only when the Print Job calls for it (when the Print Job
calls the {@link #getPrintData() getPrintData()} method).
<P>
There is no restriction on the number of client threads that may be
simultaneously accessing the same doc. Therefore, all implementations of
interface Doc must be designed to be multiple thread safe.
<p>
However there can only be one consumer of the print data obtained from a
Doc.
<p>
If print data is obtained from the client as a stream, by calling Doc's
<code>getReaderForText()</code> or <code>getStreamForBytes()</code>
methods, or because the print data source is already an InputStream or
Reader, then the print service should always close these streams for the
client on all job completion conditions. With the following caveat.
If the print data is itself a stream, the service will always close it.
If the print data is otherwise something that can be requested as a stream,
the service will only close the stream if it has obtained the stream before
terminating. That is, just because a print service might request data as
a stream does not mean that it will, with the implications that Doc
implementors which rely on the service to close them should create such
streams only in response to a request from the service.
<P>
<HR>
"
      operation 10098690 "getDocFlavor"
	public return_type class_ref 1221634 // DocFlavor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the doc flavor in which this doc object will supply its
piece of print data.

@return  Doc flavor.
"
      end

      operation 10098818 "getPrintData"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the print data representation object that contains this doc
object's piece of print data in the format corresponding to the
supported doc flavor.
The <CODE>getPrintData()</CODE> method returns an instance of
the representation class whose name is given by <CODE>{@link
#getDocFlavor() getDocFlavor()}.{@link
DocFlavor#getRepresentationClassName()
getRepresentationClassName()}</CODE>, and the return value can be cast
from class Object to that representation class.

@return  Print data representation object.

@exception  IOException
    Thrown if the representation class is a stream and there was an I/O
    error while constructing the stream.
"
      end

      operation 10098946 "getAttributes"
	public return_type class_ref 1221762 // DocAttributeSet
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of printing attributes for this doc object. If the
returned attribute set includes an instance of a particular attribute
<I>X,</I> the printer must use that attribute value for this doc,
overriding any value of attribute <I>X</I> in the job's attribute set.
If the returned attribute set does not include an instance
of a particular attribute <I>X</I> or if null is returned, the printer
must consult the job's attribute set to obtain the value for
attribute <I>X,</I> and if not found there, the printer must use an
implementation-dependent default value. The returned attribute set is
unmodifiable.

@return  Unmodifiable set of printing attributes for this doc, or null
         to obtain all attribute values from the job's attribute
         set.
"
      end

      operation 10099074 "getReaderForText"
	public return_type class_ref 407298 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a reader for extracting character print data from this doc.
The Doc implementation is required to support this method if the
DocFlavor has one of the following print data representation classes,
and return null otherwise:
<UL>
<LI> char[]
<LI> java.lang.String
<LI> java.io.Reader
</UL>
The doc's print data representation object is used to construct and
return a Reader for reading the print data as a stream of characters
from the print data representation object.
However, if the print data representation object is itself a Reader,
then the print data representation object is simply returned.
<P>
@return  Reader for reading the print data characters from this doc.
         If a reader cannot be provided because this doc does not meet
         the criteria stated above, null is returned.

@exception  IOException
    Thrown if there was an I/O error while creating the reader.
"
      end

      operation 10099202 "getStreamForBytes"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an input stream for extracting byte print data from this
doc.  The Doc implementation is required to support this method if
the DocFlavor has one of the following print data representation
classes, and return null otherwise:
<UL>
<LI> byte[]
<LI> java.io.InputStream
</UL>
This doc's print data representation object is obtained, then an input
stream for reading the print data from the print data representation
object as a stream of bytes is created and returned. However, if the
print data representation object is itself an input stream, then the
print data representation object is simply returned.
<P>
@return  Input stream for reading the print data bytes from this doc. If
         an input stream cannot be provided because this doc does not
         meet the criteria stated above, null is returned.

@exception  IOException
    Thrown if there was an I/O error while creating the input stream.
"
      end
    end

    class 1221506 "PrintException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class PrintException encapsulates a printing-related error condition that
occurred while using a Print Service instance. This base class
furnishes only a string description of the error. Subclasses furnish more
detailed information if applicable.

"
      classrelation 3918466 // <generalisation>
	relation 3918466 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3918466 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      operation 10108418 "PrintException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a print exception with no detail message.
"
      end

      operation 10108546 "PrintException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a print exception with the given detail message.

@param  s  Detail message, or null if no detail message.
"
      end

      operation 10108674 "PrintException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a print exception chaining the supplied exception.

@param  e  Chained exception.
"
      end

      operation 10108802 "PrintException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a print exception with the given detail message
and chained exception.
@param  s  Detail message, or null if no detail message.
@param  e  Chained exception.
"
      end
    end

    class 1221634 "DocFlavor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class <code>DocFlavor</code> encapsulates an object that specifies the
format in which print data is supplied to a {@link DocPrintJob}.
\"Doc\" is a short, easy-to-pronounce term that means \"a piece of print data.\"
The print data format, or \"doc flavor\", consists of two things:
<UL>
<LI>
<B>MIME type.</B> This is a Multipurpose Internet Mail Extensions (MIME)
media type (as defined in <A HREF=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC
2045</A> and <A HREF=\"http://www.ietf.org/rfc/rfc2046.txt\">RFC 2046</A>)
that specifies how the print data is to be interpreted.
The charset of text data should be the IANA MIME-preferred name, or its
canonical name if no preferred name is specified. Additionally a few
historical names supported by earlier versions of the Java platform may
be recognized.
See <a href=\"../../java/lang/package-summary.html#charenc\">
character encodings</a> for more information on the character encodings
supported on the Java platform.
<P>
<LI>
<B>Representation class name.</B> This specifies the fully-qualified name of
the class of the object from which the actual print data comes, as returned
by the {@link java.lang.Class#getName() Class.getName()} method.
(Thus the class name for <CODE>byte[]</CODE> is <CODE>\"[B\"</CODE>, for
<CODE>char[]</CODE> it is <CODE>\"[C\"</CODE>.)
</UL>
<P>
A <code>DocPrintJob</code> obtains its print data by means of interface
{@link Doc Doc}. A <code>Doc</code> object lets the <code>DocPrintJob</code>
determine the doc flavor the client can supply.  A <code>Doc</code> object
also lets the <code>DocPrintJob</code> obtain an instance of the doc flavor's
representation class, from which the <code>DocPrintJob</code> then obtains
the actual print data.
<P>
<HR>
<H3>Client Formatted Print Data</H3>
There are two broad categories of print data, client formatted print data
and service formatted print data.
<P>
For <B>client formatted print data</B>, the client determines or knows the
print data format.
For example the client may have a JPEG encoded image, a URL for
HTML code, or a disk file containing plain text in some encoding,
possibly obtained from an external source, and
requires a way to describe the data format to the print service.
<p>
The doc flavor's representation class is a conduit for the JPS
<code>DocPrintJob</code> to obtain a sequence of characters or
bytes from the client. The
doc flavor's MIME type is one of the standard media types telling how to
interpret the sequence of characters or bytes. For a list of standard media
types, see the Internet Assigned Numbers Authority's (IANA's) <A
HREF=\"http://www.iana.org/assignments/media-types/\">Media Types
Directory</A>. Interface {@link Doc Doc} provides two utility operations,
{@link Doc#getReaderForText() getReaderForText} and
{@link Doc#getStreamForBytes() getStreamForBytes()}, to help a
<code>Doc</code> object's client extract client formatted print data.
<P>
For client formatted print data, the print data representation class is
typically one of the following (although other representation classes are
permitted):
<UL>
<LI>
Character array (<CODE>char[]</CODE>) -- The print data consists of the
Unicode characters in the array.
<P>
<LI>
<code>String</code>  --
The print data consists of the Unicode characters in the string.
<P>
<LI>
Character stream ({@link java.io.Reader java.io.Reader})
-- The print data consists of the Unicode characters read from the stream
up to the end-of-stream.
<P>
<LI>
Byte array (<CODE>byte[]</CODE>) -- The print data consists of the bytes in
the array. The bytes are encoded in the character set specified by the doc
flavor's MIME type. If the MIME type does not specify a character set, the
default character set is US-ASCII.
<P>
<LI>
Byte stream ({@link java.io.InputStream java.io.InputStream}) --
The print data consists of the bytes read from the stream up to the
end-of-stream. The bytes are encoded in the character set specified by the
doc flavor's MIME type. If the MIME type does not specify a character set,
the default character set is US-ASCII.

<LI>
Uniform Resource Locator ({@link java.net.URL URL})
-- The print data consists of the bytes read from the URL location.
The bytes are encoded in the character set specified by the doc flavor's
MIME type. If the MIME type does not specify a character set, the default
character set is US-ASCII.
<P>
When the representation class is a URL, the print service itself accesses
and downloads the document directly from its URL address, without involving
the client. The service may be some form of network print service which
is executing in a different environment.
This means you should not use a URL print data flavor to print a
document at a restricted URL that the client can see but the printer cannot
see. This also means you should not use a URL print data flavor to print a
document stored in a local file that is not available at a URL
accessible independently of the client.
For example, a file that is not served up by an HTTP server or FTP server.
To print such documents, let the client open an input stream on the URL
or file and use an input stream data flavor.
</UL>
<p>
<HR>
<h3>Default and Platform Encodings</h3>
<P>
For byte print data where the doc flavor's MIME type does not include a
<CODE>charset</CODE> parameter, the Java Print Service instance assumes the
US-ASCII character set by default. This is in accordance with
<A HREF=\"http://www.ietf.org/rfc/rfc2046.txt\">RFC 2046</A>, which says the
default character set is US-ASCII. Note that US-ASCII is a subset of
UTF-8, so in the future this may be widened if a future RFC endorses
UTF-8 as the default in a compatible manner.
<p>
Also note that this is different than the behaviour of the Java runtime
when interpreting a stream of bytes as text data. That assumes the
default encoding for the user's locale. Thus, when spooling a file in local
encoding to a Java Print Service it is important to correctly specify
the encoding. Developers working in the English locales should
be particularly conscious of this, as their platform encoding corresponds
to the default mime charset. By this coincidence that particular
case may work without specifying the encoding of platform data.
<p>
Every instance of the Java virtual machine has a default character encoding
determined during virtual-machine startup and typically depends upon the
locale and charset being used by the underlying operating system.
In a distributed environment there is no guarantee that two VM share
the same default encoding. Thus clients which want to stream platform
encoded text data from the host platform to a Java Print Service instance
must explicitly declare the charset and not rely on defaults.
<p>
The preferred form is the official IANA primary name for an encoding.
Applications which stream text data should always specify the charset
in the mime type, which necessitates obtaining the encoding of the host
platform for data (eg files) stored in that platform's encoding.
A CharSet which corresponds to this and is suitable for use in a
mime-type for a DocFlavor can be obtained
from {@link DocFlavor#hostEncoding DocFlavor.hostEncoding}
This may not always be the primary IANA name but is guaranteed to be
understood by this VM.
For common flavors, the pre-defined *HOST DocFlavors may be used.
<p>
<p>
See <a href=\"../../java/lang/package-summary.html#charenc\">
character encodings</a> for more information on the character encodings
supported on the Java platform.
<p>
<HR>
<h3>Recommended DocFlavors</h3>
<P>
The Java Print Service API does not define any mandatorily supported
DocFlavors.
However, here are some examples of MIME types that a Java Print Service
instance might support for client formatted print data.
Nested classes inside class DocFlavor declare predefined static
constant DocFlavor objects for these example doc flavors; class DocFlavor's
constructor can be used to create an arbitrary doc flavor.
<UL>
<LI>Preformatted text
<P>
<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=\"MIME-Types and their descriptions\">
<TR>
 <TH>MIME-Type</TH><TH>Description</TH>
</TR>
<TR>
<TD><CODE>\"text/plain\"</CODE></TD>
<TD>Plain text in the default character set (US-ASCII)</TD>
</TR>
<TR>
<TD><CODE>\"text/plain; charset=<I>xxx</I>\"</CODE></TD>
<TD>Plain text in character set <I>xxx</I></TD>
</TR>
<TR>
<TD><CODE>\"text/html\"</CODE></TD>
<TD>HyperText Markup Language in the default character set (US-ASCII)</TD>
</TR>
<TR>
<TD><CODE>\"text/html; charset=<I>xxx</I>\"</CODE></TD>
<TD>HyperText Markup Language in character set <I>xxx</I></TD>
</TR>
</TABLE>
<P>
In general, preformatted text print data is provided either in a character
oriented representation class (character array, String, Reader) or in a
byte oriented representation class (byte array, InputStream, URL).
<P>
 <LI>Preformatted page description language (PDL) documents
<P>
<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=\"MIME-Types and their descriptions\">
<TR>
 <TH>MIME-Type</TH><TH>Description</TH>
</TR>
<TR>
<TD><CODE>\"application/pdf\"</CODE></TD>
<TD>Portable Document Format document</TD>
</TR>
<TR>
<TD><CODE>\"application/postscript\"</CODE></TD>
<TD>PostScript document</TD>
</TR>
<TR>
<TD><CODE>\"application/vnd.hp-PCL\"</CODE></TD>
<TD>Printer Control Language document</TD>
</TR>
</TABLE>
<P>
In general, preformatted PDL print data is provided in a byte oriented
representation class (byte array, InputStream, URL).
<P>
 <LI>Preformatted images
<P>
<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=\"MIME-Types and their descriptions\">
<TR>
 <TH>MIME-Type</TH><TH>Description</TH>
</TR>

<TR>
<TD><CODE>\"image/gif\"</CODE></TD>
<TD>Graphics Interchange Format image</TD>
</TR>
<TR>
<TD><CODE>\"image/jpeg\"</CODE></TD>
<TD>Joint Photographic Experts Group image</TD>
</TR>
<TR>
<TD><CODE>\"image/png\"</CODE></TD>
<TD>Portable Network Graphics image</TD>
</TR>
</TABLE>
<P>
In general, preformatted image print data is provided in a byte oriented
representation class (byte array, InputStream, URL).
<P>
 <LI>Preformatted autosense print data
  <P>
<TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=\"MIME-Types and their descriptions\">
<TR>
 <TH>MIME-Type</TH><TH>Description</TH>
</TR>

<TR>
<TD><CODE>\"application/octet-stream\"</CODE></TD>
<TD>The print data format is unspecified (just an octet stream)</TD>
</TABLE>
<P>
The printer decides how to interpret the print data; the way this
\"autosensing\" works is implementation dependent. In general, preformatted
autosense print data is provided in a byte oriented representation class
(byte array, InputStream, URL).
</UL>
<P>
<HR>
<H3>Service Formatted Print Data</H3>
<P>
For <B>service formatted print data</B>, the Java Print Service instance
determines the print data format. The doc flavor's representation class
denotes an interface whose methods the <code>DocPrintJob</code> invokes to
determine the content to be printed -- such as a renderable image
interface or a Java printable interface.
The doc flavor's MIME type is the special value
<CODE>\"application/x-java-jvm-local-objectref\"</CODE> indicating the client
will supply a reference to a Java object that implements the interface
named as the representation class.
This MIME type is just a placeholder; what's
important is the print data representation class.
<P>
For service formatted print data, the print data representation class is
typically one of the following (although other representation classes are
permitted). Nested classes inside class DocFlavor declare predefined static
constant DocFlavor objects for these example doc flavors; class DocFlavor's
constructor can be used to create an arbitrary doc flavor.
<UL>
<LI>
Renderable image object -- The client supplies an object that implements
interface
{@link java.awt.image.renderable.RenderableImage RenderableImage}. The
printer calls methods
in that interface to obtain the image to be printed.
<P>
<LI>
Printable object -- The client supplies an object that implements interface
{@link java.awt.print.Printable Printable}.
The printer calls methods in that interface to obtain the pages to be
printed, one by one.
For each page, the printer supplies a graphics context, and whatever the
client draws in that graphics context gets printed.
<P>
<LI>
Pageable object -- The client supplies an object that implements interface
{@link java.awt.print.Pageable Pageable}. The printer calls
methods in that interface to obtain the pages to be printed, one by one.
For each page, the printer supplies a graphics context, and whatever
the client draws in that graphics context gets printed.
</UL>
<P>
<HR>
<P>
<HR>
<H3>Pre-defined Doc Flavors</H3>
A Java Print Service instance is not <B><I>required</I></B> to support the
following print data formats and print data representation classes.  In
fact, a developer using this class should <b>never</b> assume that a
particular print service supports the document types corresponding to
these pre-defined doc flavors.  Always query the print service
to determine what doc flavors it supports.  However,
developers who have print services that support these doc flavors are
encouraged to refer to the predefined singleton instances created here.
<UL>
<LI>
Plain text print data provided through a byte stream. Specifically, the
following doc flavors are recommended to be supported:
<BR>&#183;&nbsp;&nbsp;
<CODE>(\"text/plain\", \"java.io.InputStream\")</CODE>
<BR>&#183;&nbsp;&nbsp;
<CODE>(\"text/plain; charset=us-ascii\", \"java.io.InputStream\")</CODE>
<BR>&#183;&nbsp;&nbsp;
<CODE>(\"text/plain; charset=utf-8\", \"java.io.InputStream\")</CODE>
<P>
<LI>
Renderable image objects. Specifically, the following doc flavor is
recommended to be supported:
<BR>&#183;&nbsp;&nbsp;
<CODE>(\"application/x-java-jvm-local-objectref\", \"java.awt.image.renderable.RenderableImage\")</CODE>
</UL>
<P>
A Java Print Service instance is allowed to support any other doc flavors
(or none) in addition to the above mandatory ones, at the implementation's
choice.
<P>
Support for the above doc flavors is desirable so a printing client can rely
on being able to print on any JPS printer, regardless of which doc flavors
the printer supports. If the printer doesn't support the client's preferred
doc flavor, the client can at least print plain text, or the client can
convert its data to a renderable image and print the image.
<P>
Furthermore, every Java Print Service instance must fulfill these
requirements for processing plain text print data:
<UL>
<LI>
The character pair carriage return-line feed (CR-LF) means
\"go to column 1 of the next line.\"
<LI>
A carriage return (CR) character standing by itself means
\"go to column 1 of the next line.\"
<LI>
A line feed (LF) character standing by itself means
\"go to column 1 of the next line.\"
<LI>
</UL>
<P>
The client must itself perform all plain text print data formatting not
addressed by the above requirements.
<P>
<H3>Design Rationale</H3>
<P>
Class DocFlavor in package javax.print.data is similar to class
{@link java.awt.datatransfer.DataFlavor DataFlavor}. Class
<code>DataFlavor</code>
is not used in the Java Print Service (JPS) API
for three reasons which are all rooted in allowing the JPS API to be
shared by other print services APIs which may need to run on Java profiles
which do not include all of the Java Platform, Standard Edition.
<OL TYPE=1>
<LI>
The JPS API is designed to be used in Java profiles which do not support
AWT.
<P>
<LI>
The implementation of class <code>java.awt.datatransfer.DataFlavor</code>
does not guarantee that equivalent data flavors will have the same
serialized representation. DocFlavor does, and can be used in services
which need this.
<P>
<LI>
The implementation of class <code>java.awt.datatransfer.DataFlavor</code>
includes a human presentable name as part of the serialized representation.
This is not appropriate as part of a service matching constraint.
</OL>
<P>
Class DocFlavor's serialized representation uses the following
canonical form of a MIME type string. Thus, two doc flavors with MIME types
that are not identical but that are equivalent (that have the same
canonical form) may be considered equal.
<UL>
<LI> The media type, media subtype, and parameters are retained, but all
     comments and whitespace characters are discarded.
<LI> The media type, media subtype, and parameter names are converted to
     lowercase.
<LI> The parameter values retain their original case, except a charset
     parameter value for a text media type is converted to lowercase.
<LI> Quote characters surrounding parameter values are removed.
<LI> Quoting backslash characters inside parameter values are removed.
<LI> The parameters are arranged in ascending order of parameter name.
</UL>
<P>
Class DocFlavor's serialized representation also contains the
fully-qualified class <I>name</I> of the representation class
(a String object), rather than the representation class itself
(a Class object). This allows a client to examine the doc flavors a
Java Print Service instance supports without having
to load the representation classes, which may be problematic for
limited-resource clients.
<P>

@author  Alan Kaminsky
"
      classrelation 3906690 // <realization>
	relation 3906690 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3906690 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3906818 // <realization>
	relation 3906818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3906818 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2323714 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4512080796965449721L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3906946 // hostEncoding (<unidirectional association>)
	relation 3906946 --->
	  a role_name "hostEncoding" class_relation const_relation public
	    comment "
A String representing the host operating system encoding.
This will follow the conventions documented in
<a href=\"http://www.ietf.org/rfc/rfc2278.txt\">
<i>RFC&nbsp;2278:&nbsp;IANA Charset Registration Procedures</i></a>
except where historical names are returned for compatibility with
previous versions of the Java platform.
The value returned from method is valid only for the VM which
returns it, for use in a DocFlavor.
This is the charset for all the \"HOST\" pre-defined DocFlavors in
the executing VM.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3906946 // hostEncoding (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 183426 "initialization"
	
	cpp "" ""
	java "  static {
        hostEncoding =
            (String)java.security.AccessController.doPrivileged(
                  new sun.security.action.GetPropertyAction(\"file.encoding\"));
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3907074 // myMimeType (<unidirectional association>)
	relation 3907074 --->
	  a role_name "myMimeType" private
	    comment "
MIME type.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3907074 // myMimeType (<unidirectional association>)
	  b parent class_ref 1221890 // MimeType
      end

      classrelation 3907202 // myClassName (<unidirectional association>)
	relation 3907202 --->
	  a role_name "myClassName" private
	    comment "
Representation class name.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3907202 // myClassName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3907330 // myStringValue (<unidirectional association>)
	relation 3907330 --->
	  a role_name "myStringValue" init_value " null" private
	    comment "
String value for this doc flavor. Computed when needed and cached.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3907330 // myStringValue (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10099330 "DocFlavor"
	public explicit_return_type ""
	nparams 2
	  param inout name "mimeType" type class_ref 128130 // String
	  param inout name "className" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new doc flavor object from the given MIME type and
representation class name. The given MIME type is converted into
canonical form and stored internally.

@param  mimeType   MIME media type string.
@param  className  Fully-qualified representation class name.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> is null or
    <CODE>className</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> does not
    obey the syntax for a MIME media type string.
"
      end

      operation 10099458 "getMimeType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this doc flavor object's MIME type string based on the
canonical form. Each parameter value is enclosed in quotes.
@return the mime type
"
      end

      operation 10099586 "getMediaType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this doc flavor object's media type (from the MIME type).
@return the media type
"
      end

      operation 10099714 "getMediaSubtype"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this doc flavor object's media subtype (from the MIME type).
@return the media sub-type
"
      end

      operation 10099842 "getParameter"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "paramName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> representing a MIME
parameter.
Mime types may include parameters which are usually optional.
The charset for text types is a commonly useful example.
This convenience method will return the value of the specified
parameter if one was specified in the mime type for this flavor.
<p>
@param paramName the name of the paramater. This name is internally
converted to the canonical lower case format before performing
the match.
@return String representing a mime parameter, or
null if that parameter is not in the mime type string.
@exception NullPointerException if paramName is null.
"
      end

      operation 10099970 "getRepresentationClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this doc flavor object's representation class.
@return the name of the representation class.
"
      end

      operation 10100098 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <code>DocFlavor</code> to a string.

@return  MIME type string based on the canonical form. Each parameter
         value is enclosed in quotes.
         A \"class=\" parameter is appended to the
         MIME type string to indicate the representation class name.
"
      end

      operation 10100226 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this doc flavor object.
"
      end

      operation 10100354 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this doc flavor object is equal to the given object.
The two are equal if the given object is not null, is an instance
of <code>DocFlavor</code>, has a MIME type equivalent to this doc
flavor object's MIME type (that is, the MIME types have the same media
type, media subtype, and parameters), and has the same representation
class name as this doc flavor object. Thus, if two doc flavor objects'
MIME types are the same except for comments, they are considered equal.
However, two doc flavor objects with MIME types of \"text/plain\" and
\"text/plain; charset=US-ASCII\" are not considered equal, even though
they represent the same media type (because the default character
set for plain text is US-ASCII).

@param  obj  Object to test.

@return  True if this doc flavor object equals <CODE>obj</CODE>, false
         otherwise.
"
      end

      operation 10100482 "getStringValue"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this doc flavor object's string value.
"
      end

      operation 10100610 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the instance to a stream (ie serialize the object).
"
      end

      operation 10100738 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute an instance from a stream (that is, deserialize it).

@serialData
The serialised form of a DocFlavor is the String naming the
representation class followed by the String representing the canonical
form of the mime type.
"
      end

      class 1222018 "BYTE_ARRAY"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3907458 // <generalisation>
	  relation 3907458 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3907458 // <generalisation>
	    b parent class_ref 1221634 // DocFlavor
	end

	attribute 2323842 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -9065578006593857475L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10100866 "BYTE_ARRAY"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "mimeType" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new doc flavor with the given MIME type and a print
data representation class name of <CODE>\"[B\"</CODE> (byte array).

@param  mimeType   MIME media type string.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> does not
    obey the syntax for a MIME media type string.
"
	end

	classrelation 3907586 // TEXT_PLAIN_HOST (<unidirectional association>)
	  relation 3907586 --->
	    a role_name "TEXT_PLAIN_HOST" init_value "
            new BYTE_ARRAY (\"text/plain; charset=\"+hostEncoding)" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/plain\"</CODE>,
encoded in the host platform encoding.
See {@link DocFlavor#hostEncoding hostEncoding}
Print data representation class name =
<CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3907586 // TEXT_PLAIN_HOST (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3907714 // TEXT_PLAIN_UTF_8 (<unidirectional association>)
	  relation 3907714 --->
	    a role_name "TEXT_PLAIN_UTF_8" init_value "
            new BYTE_ARRAY (\"text/plain; charset=utf-8\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-8\"</CODE>,
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3907714 // TEXT_PLAIN_UTF_8 (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3907842 // TEXT_PLAIN_UTF_16 (<unidirectional association>)
	  relation 3907842 --->
	    a role_name "TEXT_PLAIN_UTF_16" init_value "
            new BYTE_ARRAY (\"text/plain; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16\"</CODE>,
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3907842 // TEXT_PLAIN_UTF_16 (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3907970 // TEXT_PLAIN_UTF_16BE (<unidirectional association>)
	  relation 3907970 --->
	    a role_name "TEXT_PLAIN_UTF_16BE" init_value "
            new BYTE_ARRAY (\"text/plain; charset=utf-16be\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16be\"</CODE>
(big-endian byte ordering),
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3907970 // TEXT_PLAIN_UTF_16BE (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908098 // TEXT_PLAIN_UTF_16LE (<unidirectional association>)
	  relation 3908098 --->
	    a role_name "TEXT_PLAIN_UTF_16LE" init_value "
            new BYTE_ARRAY (\"text/plain; charset=utf-16le\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16le\"</CODE>
(little-endian byte ordering),
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908098 // TEXT_PLAIN_UTF_16LE (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908226 // TEXT_PLAIN_US_ASCII (<unidirectional association>)
	  relation 3908226 --->
	    a role_name "TEXT_PLAIN_US_ASCII" init_value "
            new BYTE_ARRAY (\"text/plain; charset=us-ascii\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=us-ascii\"</CODE>,
print data representation class name =
<CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908226 // TEXT_PLAIN_US_ASCII (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908354 // TEXT_HTML_HOST (<unidirectional association>)
	  relation 3908354 --->
	    a role_name "TEXT_HTML_HOST" init_value "
            new BYTE_ARRAY (\"text/html; charset=\"+hostEncoding)" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/html\"</CODE>,
encoded in the host platform encoding.
See {@link DocFlavor#hostEncoding hostEncoding}
Print data representation class name =
<CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908354 // TEXT_HTML_HOST (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908482 // TEXT_HTML_UTF_8 (<unidirectional association>)
	  relation 3908482 --->
	    a role_name "TEXT_HTML_UTF_8" init_value "
            new BYTE_ARRAY (\"text/html; charset=utf-8\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-8\"</CODE>,
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908482 // TEXT_HTML_UTF_8 (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908610 // TEXT_HTML_UTF_16 (<unidirectional association>)
	  relation 3908610 --->
	    a role_name "TEXT_HTML_UTF_16" init_value "
            new BYTE_ARRAY (\"text/html; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16\"</CODE>,
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908610 // TEXT_HTML_UTF_16 (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908738 // TEXT_HTML_UTF_16BE (<unidirectional association>)
	  relation 3908738 --->
	    a role_name "TEXT_HTML_UTF_16BE" init_value "
            new BYTE_ARRAY (\"text/html; charset=utf-16be\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16be\"</CODE>
(big-endian byte ordering),
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908738 // TEXT_HTML_UTF_16BE (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908866 // TEXT_HTML_UTF_16LE (<unidirectional association>)
	  relation 3908866 --->
	    a role_name "TEXT_HTML_UTF_16LE" init_value "
            new BYTE_ARRAY (\"text/html; charset=utf-16le\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16le\"</CODE>
(little-endian byte ordering),
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908866 // TEXT_HTML_UTF_16LE (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3908994 // TEXT_HTML_US_ASCII (<unidirectional association>)
	  relation 3908994 --->
	    a role_name "TEXT_HTML_US_ASCII" init_value "
            new BYTE_ARRAY (\"text/html; charset=us-ascii\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=us-ascii\"</CODE>,
print data representation class name =
<CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3908994 // TEXT_HTML_US_ASCII (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3909122 // PDF (<unidirectional association>)
	  relation 3909122 --->
	    a role_name "PDF" init_value " new BYTE_ARRAY (\"application/pdf\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/pdf\"</CODE>, print
data representation class name = <CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3909122 // PDF (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3909250 // POSTSCRIPT (<unidirectional association>)
	  relation 3909250 --->
	    a role_name "POSTSCRIPT" init_value "
            new BYTE_ARRAY (\"application/postscript\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/postscript\"</CODE>,
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3909250 // POSTSCRIPT (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3909378 // PCL (<unidirectional association>)
	  relation 3909378 --->
	    a role_name "PCL" init_value "
            new BYTE_ARRAY (\"application/vnd.hp-PCL\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/vnd.hp-PCL\"</CODE>,
print data representation class name = <CODE>\"[B\"</CODE> (byte
array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3909378 // PCL (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3909506 // GIF (<unidirectional association>)
	  relation 3909506 --->
	    a role_name "GIF" init_value " new BYTE_ARRAY (\"image/gif\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/gif\"</CODE>, print data
representation class name = <CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3909506 // GIF (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3909634 // JPEG (<unidirectional association>)
	  relation 3909634 --->
	    a role_name "JPEG" init_value " new BYTE_ARRAY (\"image/jpeg\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/jpeg\"</CODE>, print data
representation class name = <CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3909634 // JPEG (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3909762 // PNG (<unidirectional association>)
	  relation 3909762 --->
	    a role_name "PNG" init_value " new BYTE_ARRAY (\"image/png\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/png\"</CODE>, print data
representation class name = <CODE>\"[B\"</CODE> (byte array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3909762 // PNG (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end

	classrelation 3909890 // AUTOSENSE (<unidirectional association>)
	  relation 3909890 --->
	    a role_name "AUTOSENSE" init_value "
            new BYTE_ARRAY (\"application/octet-stream\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"application/octet-stream\"</CODE>,
print data representation class name = <CODE>\"[B\"</CODE> (byte
array). The client must determine that data described
using this DocFlavor is valid for the printer.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3909890 // AUTOSENSE (<unidirectional association>)
	    b parent class_ref 1222018 // BYTE_ARRAY
	end
      end

      class 1222146 "INPUT_STREAM"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3910018 // <generalisation>
	  relation 3910018 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3910018 // <generalisation>
	    b parent class_ref 1221634 // DocFlavor
	end

	attribute 2323970 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -7045842700749194127L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10100994 "INPUT_STREAM"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "mimeType" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new doc flavor with the given MIME type and a print
data representation class name of
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

@param  mimeType   MIME media type string.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> does not
    obey the syntax for a MIME media type string.
"
	end

	classrelation 3910146 // TEXT_PLAIN_HOST (<unidirectional association>)
	  relation 3910146 --->
	    a role_name "TEXT_PLAIN_HOST" init_value "
            new INPUT_STREAM (\"text/plain; charset=\"+hostEncoding)" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/plain\"</CODE>,
encoded in the host platform encoding.
See {@link DocFlavor#hostEncoding hostEncoding}
Print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3910146 // TEXT_PLAIN_HOST (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3910274 // TEXT_PLAIN_UTF_8 (<unidirectional association>)
	  relation 3910274 --->
	    a role_name "TEXT_PLAIN_UTF_8" init_value "
            new INPUT_STREAM (\"text/plain; charset=utf-8\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-8\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3910274 // TEXT_PLAIN_UTF_8 (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3910402 // TEXT_PLAIN_UTF_16 (<unidirectional association>)
	  relation 3910402 --->
	    a role_name "TEXT_PLAIN_UTF_16" init_value "
            new INPUT_STREAM (\"text/plain; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3910402 // TEXT_PLAIN_UTF_16 (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3910530 // TEXT_PLAIN_UTF_16BE (<unidirectional association>)
	  relation 3910530 --->
	    a role_name "TEXT_PLAIN_UTF_16BE" init_value "
            new INPUT_STREAM (\"text/plain; charset=utf-16be\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16be\"</CODE>
(big-endian byte ordering),
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3910530 // TEXT_PLAIN_UTF_16BE (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3910658 // TEXT_PLAIN_UTF_16LE (<unidirectional association>)
	  relation 3910658 --->
	    a role_name "TEXT_PLAIN_UTF_16LE" init_value "
            new INPUT_STREAM (\"text/plain; charset=utf-16le\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16le\"</CODE>
(little-endian byte ordering),
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3910658 // TEXT_PLAIN_UTF_16LE (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3910786 // TEXT_PLAIN_US_ASCII (<unidirectional association>)
	  relation 3910786 --->
	    a role_name "TEXT_PLAIN_US_ASCII" init_value "
                new INPUT_STREAM (\"text/plain; charset=us-ascii\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=us-ascii\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3910786 // TEXT_PLAIN_US_ASCII (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3910914 // TEXT_HTML_HOST (<unidirectional association>)
	  relation 3910914 --->
	    a role_name "TEXT_HTML_HOST" init_value "
            new INPUT_STREAM (\"text/html; charset=\"+hostEncoding)" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/html\"</CODE>,
encoded in the host platform encoding.
See {@link DocFlavor#hostEncoding hostEncoding}
Print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3910914 // TEXT_HTML_HOST (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911042 // TEXT_HTML_UTF_8 (<unidirectional association>)
	  relation 3911042 --->
	    a role_name "TEXT_HTML_UTF_8" init_value "
            new INPUT_STREAM (\"text/html; charset=utf-8\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-8\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911042 // TEXT_HTML_UTF_8 (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911170 // TEXT_HTML_UTF_16 (<unidirectional association>)
	  relation 3911170 --->
	    a role_name "TEXT_HTML_UTF_16" init_value "
            new INPUT_STREAM (\"text/html; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911170 // TEXT_HTML_UTF_16 (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911298 // TEXT_HTML_UTF_16BE (<unidirectional association>)
	  relation 3911298 --->
	    a role_name "TEXT_HTML_UTF_16BE" init_value "
            new INPUT_STREAM (\"text/html; charset=utf-16be\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16be\"</CODE>
(big-endian byte ordering),
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911298 // TEXT_HTML_UTF_16BE (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911426 // TEXT_HTML_UTF_16LE (<unidirectional association>)
	  relation 3911426 --->
	    a role_name "TEXT_HTML_UTF_16LE" init_value "
            new INPUT_STREAM (\"text/html; charset=utf-16le\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16le\"</CODE>
(little-endian byte ordering),
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911426 // TEXT_HTML_UTF_16LE (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911554 // TEXT_HTML_US_ASCII (<unidirectional association>)
	  relation 3911554 --->
	    a role_name "TEXT_HTML_US_ASCII" init_value "
            new INPUT_STREAM (\"text/html; charset=us-ascii\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=us-ascii\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911554 // TEXT_HTML_US_ASCII (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911682 // PDF (<unidirectional association>)
	  relation 3911682 --->
	    a role_name "PDF" init_value " new INPUT_STREAM (\"application/pdf\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/pdf\"</CODE>, print
data representation class name = <CODE>\"java.io.InputStream\"</CODE>
(byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911682 // PDF (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911810 // POSTSCRIPT (<unidirectional association>)
	  relation 3911810 --->
	    a role_name "POSTSCRIPT" init_value "
            new INPUT_STREAM (\"application/postscript\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/postscript\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911810 // POSTSCRIPT (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3911938 // PCL (<unidirectional association>)
	  relation 3911938 --->
	    a role_name "PCL" init_value "
            new INPUT_STREAM (\"application/vnd.hp-PCL\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/vnd.hp-PCL\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3911938 // PCL (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3912066 // GIF (<unidirectional association>)
	  relation 3912066 --->
	    a role_name "GIF" init_value " new INPUT_STREAM (\"image/gif\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/gif\"</CODE>, print data
representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3912066 // GIF (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3912194 // JPEG (<unidirectional association>)
	  relation 3912194 --->
	    a role_name "JPEG" init_value " new INPUT_STREAM (\"image/jpeg\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/jpeg\"</CODE>, print data
representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3912194 // JPEG (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3912322 // PNG (<unidirectional association>)
	  relation 3912322 --->
	    a role_name "PNG" init_value " new INPUT_STREAM (\"image/png\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/png\"</CODE>, print data
representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3912322 // PNG (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end

	classrelation 3912450 // AUTOSENSE (<unidirectional association>)
	  relation 3912450 --->
	    a role_name "AUTOSENSE" init_value "
            new INPUT_STREAM (\"application/octet-stream\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"application/octet-stream\"</CODE>,
print data representation class name =
<CODE>\"java.io.InputStream\"</CODE> (byte stream).
The client must determine that data described
using this DocFlavor is valid for the printer.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3912450 // AUTOSENSE (<unidirectional association>)
	    b parent class_ref 1222146 // INPUT_STREAM
	end
      end

      class 1222274 "URL"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3912578 // <generalisation>
	  relation 3912578 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3912578 // <generalisation>
	    b parent class_ref 1221634 // DocFlavor
	end

	operation 10101122 "URL"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "mimeType" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new doc flavor with the given MIME type and a print
data representation class name of <CODE>\"java.net.URL\"</CODE>.

@param  mimeType   MIME media type string.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> does not
    obey the syntax for a MIME media type string.
"
	end

	classrelation 3912706 // TEXT_PLAIN_HOST (<unidirectional association>)
	  relation 3912706 --->
	    a role_name "TEXT_PLAIN_HOST" init_value "
            new URL (\"text/plain; charset=\"+hostEncoding)" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/plain\"</CODE>,
encoded in the host platform encoding.
See {@link DocFlavor#hostEncoding hostEncoding}
Print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3912706 // TEXT_PLAIN_HOST (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3912834 // TEXT_PLAIN_UTF_8 (<unidirectional association>)
	  relation 3912834 --->
	    a role_name "TEXT_PLAIN_UTF_8" init_value "
            new URL (\"text/plain; charset=utf-8\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-8\"</CODE>,
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3912834 // TEXT_PLAIN_UTF_8 (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3912962 // TEXT_PLAIN_UTF_16 (<unidirectional association>)
	  relation 3912962 --->
	    a role_name "TEXT_PLAIN_UTF_16" init_value "
            new URL (\"text/plain; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16\"</CODE>,
print data representation class name =
<CODE>java.net.URL\"\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3912962 // TEXT_PLAIN_UTF_16 (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913090 // TEXT_PLAIN_UTF_16BE (<unidirectional association>)
	  relation 3913090 --->
	    a role_name "TEXT_PLAIN_UTF_16BE" init_value "
            new URL (\"text/plain; charset=utf-16be\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16be\"</CODE>
(big-endian byte ordering),
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913090 // TEXT_PLAIN_UTF_16BE (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913218 // TEXT_PLAIN_UTF_16LE (<unidirectional association>)
	  relation 3913218 --->
	    a role_name "TEXT_PLAIN_UTF_16LE" init_value "
            new URL (\"text/plain; charset=utf-16le\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=utf-16le\"</CODE>
(little-endian byte ordering),
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913218 // TEXT_PLAIN_UTF_16LE (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913346 // TEXT_PLAIN_US_ASCII (<unidirectional association>)
	  relation 3913346 --->
	    a role_name "TEXT_PLAIN_US_ASCII" init_value "
            new URL (\"text/plain; charset=us-ascii\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/plain; charset=us-ascii\"</CODE>,
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913346 // TEXT_PLAIN_US_ASCII (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913474 // TEXT_HTML_HOST (<unidirectional association>)
	  relation 3913474 --->
	    a role_name "TEXT_HTML_HOST" init_value "
            new URL (\"text/html; charset=\"+hostEncoding)" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/html\"</CODE>,
encoded in the host platform encoding.
See {@link DocFlavor#hostEncoding hostEncoding}
Print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913474 // TEXT_HTML_HOST (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913602 // TEXT_HTML_UTF_8 (<unidirectional association>)
	  relation 3913602 --->
	    a role_name "TEXT_HTML_UTF_8" init_value "
            new URL (\"text/html; charset=utf-8\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-8\"</CODE>,
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913602 // TEXT_HTML_UTF_8 (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913730 // TEXT_HTML_UTF_16 (<unidirectional association>)
	  relation 3913730 --->
	    a role_name "TEXT_HTML_UTF_16" init_value "
            new URL (\"text/html; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16\"</CODE>,
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913730 // TEXT_HTML_UTF_16 (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913858 // TEXT_HTML_UTF_16BE (<unidirectional association>)
	  relation 3913858 --->
	    a role_name "TEXT_HTML_UTF_16BE" init_value "
            new URL (\"text/html; charset=utf-16be\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16be\"</CODE>
(big-endian byte ordering),
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913858 // TEXT_HTML_UTF_16BE (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3913986 // TEXT_HTML_UTF_16LE (<unidirectional association>)
	  relation 3913986 --->
	    a role_name "TEXT_HTML_UTF_16LE" init_value "
            new URL (\"text/html; charset=utf-16le\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=utf-16le\"</CODE>
(little-endian byte ordering),
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3913986 // TEXT_HTML_UTF_16LE (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3914114 // TEXT_HTML_US_ASCII (<unidirectional association>)
	  relation 3914114 --->
	    a role_name "TEXT_HTML_US_ASCII" init_value "
            new URL (\"text/html; charset=us-ascii\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"text/html; charset=us-ascii\"</CODE>,
print data representation class name =
<CODE>\"java.net.URL\"</CODE> (byte stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3914114 // TEXT_HTML_US_ASCII (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3914242 // PDF (<unidirectional association>)
	  relation 3914242 --->
	    a role_name "PDF" init_value " new URL (\"application/pdf\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/pdf\"</CODE>, print
data representation class name = <CODE>\"java.net.URL\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3914242 // PDF (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3914370 // POSTSCRIPT (<unidirectional association>)
	  relation 3914370 --->
	    a role_name "POSTSCRIPT" init_value " new URL (\"application/postscript\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/postscript\"</CODE>,
print data representation class name = <CODE>\"java.net.URL\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3914370 // POSTSCRIPT (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3914498 // PCL (<unidirectional association>)
	  relation 3914498 --->
	    a role_name "PCL" init_value " new URL (\"application/vnd.hp-PCL\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"application/vnd.hp-PCL\"</CODE>,
print data representation class name = <CODE>\"java.net.URL\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3914498 // PCL (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3914626 // GIF (<unidirectional association>)
	  relation 3914626 --->
	    a role_name "GIF" init_value " new URL (\"image/gif\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/gif\"</CODE>, print data
representation class name = <CODE>\"java.net.URL\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3914626 // GIF (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3914754 // JPEG (<unidirectional association>)
	  relation 3914754 --->
	    a role_name "JPEG" init_value " new URL (\"image/jpeg\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/jpeg\"</CODE>, print data
representation class name = <CODE>\"java.net.URL\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3914754 // JPEG (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3914882 // PNG (<unidirectional association>)
	  relation 3914882 --->
	    a role_name "PNG" init_value " new URL (\"image/png\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"image/png\"</CODE>, print data
representation class name = <CODE>\"java.net.URL\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3914882 // PNG (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end

	classrelation 3915010 // AUTOSENSE (<unidirectional association>)
	  relation 3915010 --->
	    a role_name "AUTOSENSE" init_value " new URL (\"application/octet-stream\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type =
<CODE>\"application/octet-stream\"</CODE>,
print data representation class name = <CODE>\"java.net.URL\"</CODE>.
 The client must determine that data described
using this DocFlavor is valid for the printer.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3915010 // AUTOSENSE (<unidirectional association>)
	    b parent class_ref 1222274 // URL
	end
      end

      class 1222402 "CHAR_ARRAY"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3915138 // <generalisation>
	  relation 3915138 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3915138 // <generalisation>
	    b parent class_ref 1221634 // DocFlavor
	end

	attribute 2324098 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -8720590903724405128L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10101250 "CHAR_ARRAY"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "mimeType" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new doc flavor with the given MIME type and a print
data representation class name of
<CODE>\"[C\"</CODE> (character array).

@param  mimeType  MIME media type string. If it is a text media
                     type, it is assumed to contain a
                     <CODE>\"charset=utf-16\"</CODE> parameter.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> does not
    obey the syntax for a MIME media type string.
"
	end

	classrelation 3915266 // TEXT_PLAIN (<unidirectional association>)
	  relation 3915266 --->
	    a role_name "TEXT_PLAIN" init_value "
            new CHAR_ARRAY (\"text/plain; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/plain;
charset=utf-16\"</CODE>, print data representation class name =
<CODE>\"[C\"</CODE> (character array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3915266 // TEXT_PLAIN (<unidirectional association>)
	    b parent class_ref 1222402 // CHAR_ARRAY
	end

	classrelation 3915394 // TEXT_HTML (<unidirectional association>)
	  relation 3915394 --->
	    a role_name "TEXT_HTML" init_value "
            new CHAR_ARRAY (\"text/html; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/html;
charset=utf-16\"</CODE>, print data representation class name =
<CODE>\"[C\"</CODE> (character array).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3915394 // TEXT_HTML (<unidirectional association>)
	    b parent class_ref 1222402 // CHAR_ARRAY
	end
      end

      class 1222530 "STRING"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3915522 // <generalisation>
	  relation 3915522 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3915522 // <generalisation>
	    b parent class_ref 1221634 // DocFlavor
	end

	attribute 2324226 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 4414407504887034035L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10101378 "STRING"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "mimeType" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new doc flavor with the given MIME type and a print
data representation class name of <CODE>\"java.lang.String\"</CODE>.

@param  mimeType  MIME media type string. If it is a text media
                     type, it is assumed to contain a
                     <CODE>\"charset=utf-16\"</CODE> parameter.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> does not
    obey the syntax for a MIME media type string.
"
	end

	classrelation 3915650 // TEXT_PLAIN (<unidirectional association>)
	  relation 3915650 --->
	    a role_name "TEXT_PLAIN" init_value "
            new STRING (\"text/plain; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/plain;
charset=utf-16\"</CODE>, print data representation class name =
<CODE>\"java.lang.String\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3915650 // TEXT_PLAIN (<unidirectional association>)
	    b parent class_ref 1222530 // STRING
	end

	classrelation 3915778 // TEXT_HTML (<unidirectional association>)
	  relation 3915778 --->
	    a role_name "TEXT_HTML" init_value "
            new STRING (\"text/html; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/html;
charset=utf-16\"</CODE>, print data representation class name =
<CODE>\"java.lang.String\"</CODE>.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3915778 // TEXT_HTML (<unidirectional association>)
	    b parent class_ref 1222530 // STRING
	end
      end

      class 1222658 "READER"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3915906 // <generalisation>
	  relation 3915906 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3915906 // <generalisation>
	    b parent class_ref 1221634 // DocFlavor
	end

	attribute 2324354 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7100295812579351567L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10101506 "READER"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "mimeType" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new doc flavor with the given MIME type and a print
data representation class name of\\
<CODE>\"java.io.Reader\"</CODE> (character stream).

@param  mimeType  MIME media type string. If it is a text media
                     type, it is assumed to contain a
                     <CODE>\"charset=utf-16\"</CODE> parameter.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>mimeType</CODE> does not
    obey the syntax for a MIME media type string.
"
	end

	classrelation 3916034 // TEXT_PLAIN (<unidirectional association>)
	  relation 3916034 --->
	    a role_name "TEXT_PLAIN" init_value "
            new READER (\"text/plain; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/plain;
charset=utf-16\"</CODE>, print data representation class name =
<CODE>\"java.io.Reader\"</CODE> (character stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3916034 // TEXT_PLAIN (<unidirectional association>)
	    b parent class_ref 1222658 // READER
	end

	classrelation 3916162 // TEXT_HTML (<unidirectional association>)
	  relation 3916162 --->
	    a role_name "TEXT_HTML" init_value "
            new READER (\"text/html; charset=utf-16\")" class_relation const_relation public
	      comment "
Doc flavor with MIME type = <CODE>\"text/html;
charset=utf-16\"</CODE>, print data representation class name =
<CODE>\"java.io.Reader\"</CODE> (character stream).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3916162 // TEXT_HTML (<unidirectional association>)
	    b parent class_ref 1222658 // READER
	end
      end

      class 1222786 "SERVICE_FORMATTED"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3916290 // <generalisation>
	  relation 3916290 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3916290 // <generalisation>
	    b parent class_ref 1221634 // DocFlavor
	end

	attribute 2324482 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6181337766266637256L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10101634 "SERVICE_FORMATTED"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "className" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new doc flavor with a MIME type of
<CODE>\"application/x-java-jvm-local-objectref\"</CODE> indicating
service formatted print data and the given print data
representation class name.

@param  className  Fully-qualified representation class name.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>className</CODE> is
    null.
"
	end

	classrelation 3916418 // RENDERABLE_IMAGE (<unidirectional association>)
	  relation 3916418 --->
	    a role_name "RENDERABLE_IMAGE" init_value "
            new SERVICE_FORMATTED(\"java.awt.image.renderable.RenderableImage\")" class_relation const_relation public
	      comment "
Service formatted print data doc flavor with print data
representation class name =
<CODE>\"java.awt.image.renderable.RenderableImage\"</CODE>
(renderable image object).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3916418 // RENDERABLE_IMAGE (<unidirectional association>)
	    b parent class_ref 1222786 // SERVICE_FORMATTED
	end

	classrelation 3916546 // PRINTABLE (<unidirectional association>)
	  relation 3916546 --->
	    a role_name "PRINTABLE" init_value "
            new SERVICE_FORMATTED (\"java.awt.print.Printable\")" class_relation const_relation public
	      comment "
Service formatted print data doc flavor with print data
representation class name = <CODE>\"java.awt.print.Printable\"</CODE>
(printable object).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3916546 // PRINTABLE (<unidirectional association>)
	    b parent class_ref 1222786 // SERVICE_FORMATTED
	end

	classrelation 3916674 // PAGEABLE (<unidirectional association>)
	  relation 3916674 --->
	    a role_name "PAGEABLE" init_value "
            new SERVICE_FORMATTED (\"java.awt.print.Pageable\")" class_relation const_relation public
	      comment "
Service formatted print data doc flavor with print data
representation class name = <CODE>\"java.awt.print.Pageable\"</CODE>
(pageable object).

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3916674 // PAGEABLE (<unidirectional association>)
	    b parent class_ref 1222786 // SERVICE_FORMATTED
	end
      end
    end

    class 1221890 "MimeType"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class MimeType encapsulates a Multipurpose Internet Mail Extensions (MIME)
media type as defined in <A HREF=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC
2045</A> and <A HREF=\"http://www.ietf.org/rfc/rfc2046.txt\">RFC 2046</A>. A
MIME type object is part of a {@link DocFlavor DocFlavor} object and
specifies the format of the print data.
<P>
Class MimeType is similar to the like-named
class in package {@link java.awt.datatransfer java.awt.datatransfer}. Class
java.awt.datatransfer.MimeType is not used in the Jini Print Service API
for two reasons:
<OL TYPE=1>
<LI>
Since not all Java profiles include the AWT, the Jini Print Service should
not depend on an AWT class.
<P>
<LI>
The implementation of class java.awt.datatransfer.MimeType does not
guarantee
that equivalent MIME types will have the same serialized representation.
Thus, since the Jini Lookup Service (JLUS) matches service attributes based
on equality of serialized representations, JLUS searches involving MIME
types encapsulated in class java.awt.datatransfer.MimeType may incorrectly
fail to match.
</OL>
<P>
Class MimeType's serialized representation is based on the following
canonical form of a MIME type string. Thus, two MIME types that are not
identical but that are equivalent (that have the same canonical form) will
be considered equal by the JLUS's matching algorithm.
<UL>
<LI> The media type, media subtype, and parameters are retained, but all
     comments and whitespace characters are discarded.
<LI> The media type, media subtype, and parameter names are converted to
     lowercase.
<LI> The parameter values retain their original case, except a charset
     parameter value for a text media type is converted to lowercase.
<LI> Quote characters surrounding parameter values are removed.
<LI> Quoting backslash characters inside parameter values are removed.
<LI> The parameters are arranged in ascending order of parameter name.
</UL>
<P>

@author  Alan Kaminsky
"
      classrelation 3916802 // <realization>
	relation 3916802 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3916802 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3916930 // <realization>
	relation 3916930 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3916930 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2324610 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2785720609362367683L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3917058 // myPieces (<unidirectional association>)
	relation 3917058 --->
	  a role_name "myPieces" multiplicity "[]" private
	    comment "
Array of strings that hold pieces of this MIME type's canonical form.
If the MIME type has <I>n</I> parameters, <I>n</I> &gt;= 0, then the
strings in the array are:
<BR>Index 0 -- Media type.
<BR>Index 1 -- Media subtype.
<BR>Index 2<I>i</I>+2 -- Name of parameter <I>i</I>,
<I>i</I>=0,1,...,<I>n</I>-1.
<BR>Index 2<I>i</I>+3 -- Value of parameter <I>i</I>,
<I>i</I>=0,1,...,<I>n</I>-1.
<BR>Parameters are arranged in ascending order of parameter name.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3917058 // myPieces (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3917186 // myStringValue (<unidirectional association>)
	relation 3917186 --->
	  a role_name "myStringValue" init_value " null" private
	    comment "
String value for this MIME type. Computed when needed and cached.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3917186 // myStringValue (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      class 1223042 "ParameterMapEntrySet"
	visibility private 
	nactuals 1
	actual class class_ref 255618 // AbstractSet
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3917826 // <generalisation>
	  relation 3917826 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3917826 // <generalisation>
	    b parent class_ref 255618 // AbstractSet
	end

	operation 10103042 "iterator"
	  public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10103170 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3917314 // myEntrySet (<unidirectional association>)
	relation 3917314 --->
	  a role_name "myEntrySet" init_value " null" private
	    comment "
Parameter map entry set. Computed when needed and cached.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3917314 // myEntrySet (<unidirectional association>)
	  b parent class_ref 1223042 // ParameterMapEntrySet
      end

      class 1223170 "ParameterMap"
	visibility private 
	nactuals 2
	actual class class_ref 192130 // AbstractMap
	  rank 0 explicit_value ""
	actual class class_ref 192130 // AbstractMap
	  rank 1 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3917954 // <generalisation>
	  relation 3917954 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3917954 // <generalisation>
	    b parent class_ref 192130 // AbstractMap
	end

	operation 10103298 "entrySet"
	  public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3917442 // myParameterMap (<unidirectional association>)
	relation 3917442 --->
	  a role_name "myParameterMap" init_value " null" private
	    comment "
Parameter map. Computed when needed and cached.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3917442 // myParameterMap (<unidirectional association>)
	  b parent class_ref 1223170 // ParameterMap
      end

      class 1223298 "ParameterMapEntry"
	visibility private 
	nactuals 4
	actual class class_ref 130178 // Map
	  rank 0 explicit_value ""
	actual class class_ref 130178 // Map
	  rank 1 explicit_value ""
	actual class class_ref 192386 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 192386 // Entry
	  rank 1 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3917570 // <realization>
	  relation 3917570 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3917570 // <realization>
	    b parent class_ref 192386 // Entry
	end

	attribute 2324738 "myIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10101890 "ParameterMapEntry"
	  public explicit_return_type ""
	  nparams 1
	    param in name "theIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10102018 "getKey"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10102146 "getValue"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10102274 "setValue"
	  public return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10102402 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10102530 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1223426 "ParameterMapEntrySetIterator"
	visibility private 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3917698 // <realization>
	  relation 3917698 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3917698 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	attribute 2324866 "myIndex"
	  private explicit_type "int"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10102658 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10102786 "next"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10102914 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 10103426 "MimeType"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new MIME type object from the given string. The given
string is converted into canonical form and stored internally.

@param  s  MIME media type string.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>s</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>s</CODE> does not obey the
    syntax for a MIME media type string.
"
      end

      operation 10103554 "getMimeType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this MIME type object's MIME type string based on the canonical
form. Each parameter value is enclosed in quotes.
"
      end

      operation 10103682 "getMediaType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this MIME type object's media type.
"
      end

      operation 10103810 "getMediaSubtype"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this MIME type object's media subtype.
"
      end

      operation 10103938 "getParameterMap"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable map view of the parameters in this MIME type
object. Each entry in the parameter map view consists of a parameter
name String (key) mapping to a parameter value String. If this MIME
type object has no parameters, an empty map is returned.

@return  Parameter map for this MIME type object.
"
      end

      operation 10104066 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this MIME type object to a string.

@return  MIME type string based on the canonical form. Each parameter
         value is enclosed in quotes.
"
      end

      operation 10104194 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this MIME type object.
"
      end

      operation 10104322 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if this MIME type object is equal to the given object. The two
are equal if the given object is not null, is an instance of class
net.jini.print.data.MimeType, and has the same canonical form as this
MIME type object (that is, has the same type, subtype, and parameters).
Thus, if two MIME type objects are the same except for comments, they are
considered equal. However, \"text/plain\" and \"text/plain;
charset=us-ascii\" are not considered equal, even though they represent
the same media type (because the default character set for plain text is
US-ASCII).

@param  obj  Object to test.

@return  True if this MIME type object equals <CODE>obj</CODE>, false
         otherwise.
"
      end

      operation 10104450 "getStringValue"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this MIME type's string value in canonical form.
"
      end

      attribute 2324994 "TOKEN_LEXEME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Hidden classes, constants, and operations for parsing a MIME media type
 string.
 Lexeme types.
"
      end

      attribute 2325122 "QUOTED_STRING_LEXEME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2325250 "TSPECIAL_LEXEME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2325378 "EOF_LEXEME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2325506 "ILLEGAL_LEXEME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1223554 "LexicalAnalyzer"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3918082 // mySource (<unidirectional association>)
	  relation 3918082 --->
	    a role_name "mySource" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3918082 // mySource (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 2325634 "mySourceLength"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2325762 "myCurrentIndex"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2325890 "myLexemeType"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2326018 "myLexemeBeginIndex"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2326146 "myLexemeEndIndex"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 10104578 "LexicalAnalyzer"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "theSource" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10104706 "getLexemeType"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10104834 "getLexeme"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10104962 "getLexemeFirstCharacter"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10105090 "nextLexeme"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 10105218 "toUnicodeLowerCase"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a lowercase version of the given string. The lowercase version
is constructed by applying Character.toLowerCase() to each character of
the given string, which maps characters to lowercase using the rules of
Unicode. This mapping is the same regardless of locale, whereas the
mapping of String.toLowerCase() may be different depending on the
default locale.
"
      end

      operation 10105346 "removeBackslashes"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a version of the given string with backslashes removed.
"
      end

      operation 10105474 "addQuotes"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a version of the string surrounded by quotes and with interior
quotes preceded by a backslash.
"
      end

      operation 10105602 "parse"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the given string into canonical pieces and stores the pieces in
{@link #myPieces <CODE>myPieces</CODE>}.
<P>
Special rules applied:
<UL>
<LI> If the media type is text, the value of a charset parameter is
     converted to lowercase.
</UL>

@param  s  MIME media type string.

@exception  NullPointerException
    (unchecked exception) Thrown if <CODE>s</CODE> is null.
@exception  IllegalArgumentException
    (unchecked exception) Thrown if <CODE>s</CODE> does not obey the
    syntax for a MIME media type string.
"
      end
    end

    class 1222914 "FlavorException"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface FlavorException is a mixin interface which a subclass of {@link
PrintException PrintException} can implement to report an error condition
involving a doc flavor or flavors (class {@link javax.print.DocFlavor
DocFlavor}). The Print Service API does not define any print exception
classes that implement interface FlavorException, that being left to the
Print Service implementor's discretion.

"
      operation 10101762 "getUnsupportedFlavors"
	public return_type class_ref 1221634 // DocFlavor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unsupported flavors.
@return the unsupported doc flavors.
"
      end
    end

    class 1223682 "MultiDoc"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface MultiDoc specifies the interface for an object that supplies more
than one piece of print data for a Print Job. \"Doc\" is a short,
easy-to-pronounce term that means \"a piece of print data,\" and a \"multidoc\"
is a group of several docs. The client passes to the Print Job an object
that implements interface MultiDoc, and the Print Job calls methods on
 that object to obtain the print data.
<P>
Interface MultiDoc provides an abstraction similar to a \"linked list\" of
docs. A multidoc object is like a node in the linked list, containing the
current doc in the list and a pointer to the next node (multidoc) in the
list. The Print Job can call the multidoc's {@link #getDoc()
getDoc()} method to get the current doc. When it's ready to go
on to the next doc, the Print Job can call the multidoc's {@link #next()
next()} method to get the next multidoc, which contains the
next doc. So Print Job code for accessing a multidoc might look like this:
<PRE>
     void processMultiDoc(MultiDoc theMultiDoc) {

         MultiDoc current = theMultiDoc;

         while (current != null) {
             processDoc (current.getDoc());
             current = current.next();
         }
     }
</PRE>
<P>
Of course, interface MultiDoc can be implemented in any way that fulfills
the contract; it doesn't have to use a linked list in the implementation.
<P>
To get all the print data for a multidoc print job, a Print Service
proxy could use either of two patterns:
<OL TYPE=1>
<LI>
The <B>interleaved</B> pattern: Get the doc from the current multidoc. Get
the print data representation object from the current doc. Get all the print
data from the print data representation object. Get the next multidoc from
the current multidoc, and repeat until there are no more. (The code example
above uses the interleaved pattern.)
<P>
<LI>
The <B>all-at-once</B> pattern: Get the doc from the current multidoc, and
save the doc in a list. Get the next multidoc from the current multidoc, and
repeat until there are no more. Then iterate over the list of saved docs. Get
the print data representation object from the current doc. Get all the print
data from the print data representation object. Go to the next doc in the
list, and repeat until there are no more.
</OL>
Now, consider a printing client that is generating print data on the fly and
does not have the resources to store more than one piece of print data at a
time. If the print service proxy used the all-at-once pattern to get the
print data, it would pose a problem for such a client; the client would have
to keep all the docs' print data around until the print service proxy comes
back and asks for them, which the client is not able to do. To work with such
a client, the print service proxy must use the interleaved pattern.
<P>
To address this problem, and to simplify the design of clients providing
multiple docs to a Print Job, every Print Service proxy that supports
multidoc print jobs is required to access a MultiDoc object using the
interleaved pattern. That is, given a MultiDoc object, the print service
proxy will call {@link #getDoc() getDoc()} one or more times
until it successfully obtains the current Doc object. The print service proxy
will then obtain the current doc's print data, not proceeding until all the
print data is obtained or an unrecoverable error occurs. If it is able to
continue, the print service proxy will then call {@link #next()
next()} one or more times until it successfully obtains either
the next MultiDoc object or an indication that there are no more. An
implementation of interface MultiDoc can assume the print service proxy will
follow this interleaved pattern; for any other pattern of usage, the MultiDoc
implementation's behavior is unspecified.
<P>
There is no restriction on the number of client threads that may be
simultaneously accessing the same multidoc. Therefore, all implementations of
interface MultiDoc must be designed to be multiple thread safe. In fact, a
client thread could be adding docs to the end of the (conceptual) list while
a Print Job thread is simultaneously obtaining docs from the beginning of the
list; provided the multidoc object synchronizes the threads properly, the two
threads will not interfere with each other
"
      operation 10105730 "getDoc"
	public return_type class_ref 1221378 // Doc
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain the current doc object.

@return  Current doc object.

@exception  IOException
    Thrown if a error occurred reading the document.
"
      end

      operation 10105858 "next"
	public return_type class_ref 1223682 // MultiDoc
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Go to the multidoc object that contains the next doc object in the
sequence of doc objects.

@return  Multidoc object containing the next doc object, or null if
there are no further doc objects.

@exception  IOException
    Thrown if an error occurred locating the next document
"
      end
    end

    class 1223810 "MultiDocPrintJob"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Obtained from a MultiDocPrintService, a MultiDocPrintJob can print a
specified collection of documents as a single print job with a set of
job attributes.
<P>
"
      classrelation 3918210 // <generalisation>
	relation 3918210 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3918210 // <generalisation>
	  b parent class_ref 1220866 // DocPrintJob
      end

      operation 10105986 "print"
	public explicit_return_type "void"
	nparams 2
	  param inout name "multiDoc" type class_ref 1223682 // MultiDoc
	  param inout name "attributes" type class_ref 428546 // PrintRequestAttributeSet
	nexceptions 1
	  exception class_ref 1221506 // PrintException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print a MultiDoc with the specified job attributes.
This method should only be called once for a given print job.
Calling it again will not result in a new job being spooled to
the printer. The service implementation will define policy
for service interruption and recovery. Application clients which
want to monitor the success or failure should register a
PrintJobListener.

@param multiDoc The documents to be printed. ALL must be a flavor
       supported by the PrintJob {@literal &} PrintService.

@param attributes The job attributes to be applied to this print job.
       If this parameter is null then the default attributes are used.

@throws PrintException The exception additionally may implement
an interfaces which more precisely describes the cause of the exception
<ul>
<li>FlavorException.
 If the document has a flavor not supported by this print job.
<li>AttributeException.
 If one or more of the attributes are not valid for this print job.
</ul>
"
      end
    end

    class 1223938 "MultiDocPrintService"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Interface MultiPrintService is the factory for a MultiDocPrintJob.
A MultiPrintService
describes the capabilities of a Printer and can be queried regarding
a printer's supported attributes.
"
      classrelation 3918338 // <generalisation>
	relation 3918338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3918338 // <generalisation>
	  b parent class_ref 428418 // PrintService
      end

      operation 10108290 "createMultiDocPrintJob"
	public return_type class_ref 1223810 // MultiDocPrintJob
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a job which can print a multiDoc.
@return a MultiDocPrintJob
"
      end
    end

    class 1224450 "ServiceUIFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Services may optionally provide UIs which allow different styles
of interaction in different roles.
One role may be end-user browsing and setting of print options.
Another role may be administering the print service.
<p>
Although the Print Service API does not presently provide standardised
support for administering a print service, monitoring of the print
service is possible and a UI may provide for private update mechanisms.
<p>
The basic design intent is to allow applications to lazily locate and
initialize services only when needed without any API dependencies
except in an environment in which they are used.
<p>
Swing UIs are preferred as they provide a more consistent {@literal L&F}
and can support accessibility APIs.
<p>
Example usage:
<pre>
 ServiceUIFactory factory = printService.getServiceUIFactory();
 if (factory != null) {
     JComponent swingui = (JComponent)factory.getUI(
                                        ServiceUIFactory.MAIN_UIROLE,
                                        ServiceUIFactory.JCOMPONENT_UI);
     if (swingui != null) {
         tabbedpane.add(\"Custom UI\", swingui);
     }
 }
</pre>
"
      classrelation 3918850 // JCOMPONENT_UI (<unidirectional association>)
	relation 3918850 --->
	  a role_name "JCOMPONENT_UI" init_value " \"javax.swing.JComponent\"" class_relation const_relation public
	    comment "
Denotes a UI implemented as a Swing component.
The value of the String is the fully qualified classname :
\"javax.swing.JComponent\".

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3918850 // JCOMPONENT_UI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3918978 // PANEL_UI (<unidirectional association>)
	relation 3918978 --->
	  a role_name "PANEL_UI" init_value " \"java.awt.Panel\"" class_relation const_relation public
	    comment "
Denotes a UI implemented as an AWT panel.
The value of the String is the fully qualified classname :
\"java.awt.Panel\"

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3918978 // PANEL_UI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3919106 // DIALOG_UI (<unidirectional association>)
	relation 3919106 --->
	  a role_name "DIALOG_UI" init_value " \"java.awt.Dialog\"" class_relation const_relation public
	    comment "
Denotes a UI implemented as an AWT dialog.
The value of the String is the fully qualified classname :
\"java.awt.Dialog\"

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3919106 // DIALOG_UI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3919234 // JDIALOG_UI (<unidirectional association>)
	relation 3919234 --->
	  a role_name "JDIALOG_UI" init_value " \"javax.swing.JDialog\"" class_relation const_relation public
	    comment "
Denotes a UI implemented as a Swing dialog.
The value of the String is the fully qualified classname :
\"javax.swing.JDialog\"

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3919234 // JDIALOG_UI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2326274 "ABOUT_UIROLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Denotes a UI which performs an informative \"About\" role.

"
      end

      attribute 2326402 "ADMIN_UIROLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Denotes a UI which performs an administrative role.

"
      end

      attribute 2326530 "MAIN_UIROLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Denotes a UI which performs the normal end user role.

"
      end

      attribute 2326658 "RESERVED_UIROLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 99"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Not a valid role but role id's greater than this may be used
for private roles supported by a service. Knowledge of the
function performed by this role is required to make proper use
of it.

"
      end

      operation 10111362 "getUI"
	abstract public return_type class_ref 129538 // Object
	nparams 2
	  param in name "role" explicit_type "int"
	  param inout name "ui" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a UI object which may be cast to the requested UI type
by the application and used in its user interface.
<P>
@param role requested. Must be one of the standard roles or
a private role supported by this factory.
@param ui type in which the role is requested.
@return the UI role or null if the requested UI role is not available
from this factory
@throws IllegalArgumentException if the role or ui is neither
one of the standard ones, nor a private one
supported by the factory.
"
      end

      operation 10111490 "getUIClassNamesForRole"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param in name "role" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a UI role obtained from this factory obtain the UI
types available from this factory which implement this role.
The returned Strings should refer to the static variables defined
in this class so that applications can use equality of reference
(\"==\").
@param role to be looked up.
@return the UI types supported by this class for the specified role,
null if no UIs are available for the role.
@throws IllegalArgumentException is the role is a non-standard
role not supported by this factory.
"
      end
    end

    class 1224578 "PrintServiceLookup"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Implementations of this class provide lookup services for
print services (typically equivalent to printers) of a particular type.
<p>
Multiple implementations may be installed concurrently.
All implementations must be able to describe the located printers
as instances of a PrintService.
Typically implementations of this service class are located
automatically in JAR files (see the SPI JAR file specification).
These classes must be instantiable using a default constructor.
Alternatively applications may explicitly register instances
at runtime.
<p>
Applications use only the static methods of this abstract class.
The instance methods are implemented by a service provider in a subclass
and the unification of the results from all installed lookup classes
are reported by the static methods of this class when called by
the application.
<p>
A PrintServiceLookup implementor is recommended to check for the
SecurityManager.checkPrintJobAccess() to deny access to untrusted code.
Following this recommended policy means that untrusted code may not
be able to locate any print services. Downloaded applets are the most
common example of untrusted code.
<p>
This check is made on a per lookup service basis to allow flexibility in
the policy to reflect the needs of different lookup services.
<p>
Services which are registered by registerService(PrintService)
will not be included in lookup results if a security manager is
installed and its checkPrintJobAccess() method denies access.
"
      class 1224706 "Services"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3918594 // listOfLookupServices (<unidirectional association>)
	  relation 3918594 --->
	    a role_name "listOfLookupServices" init_value " null" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3918594 // listOfLookupServices (<unidirectional association>)
	    b parent class_ref 186498 // ArrayList
	end

	classrelation 3918722 // registeredServices (<unidirectional association>)
	  relation 3918722 --->
	    a role_name "registeredServices" init_value " null" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3918722 // registeredServices (<unidirectional association>)
	    b parent class_ref 186498 // ArrayList
	end
      end

      operation 10108930 "getServicesForContext"
	class_operation private return_type class_ref 1224706 // Services
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10109058 "getListOfLookupServices"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10109186 "initListOfLookupServices"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10109314 "getRegisteredServices"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10109442 "initRegisteredServices"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10109570 "lookupPrintServices"
	class_operation public return_type class_ref 428418 // PrintService
	nparams 2
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locates print services capable of printing the specified
{@link DocFlavor}.

@param flavor the flavor to print. If null, this constraint is not
       used.
@param attributes attributes that the print service must support.
If null this constraint is not used.

@return array of matching <code>PrintService</code> objects
representing print services that support the specified flavor
attributes.  If no services match, the array is zero-length.
"
      end

      operation 10109698 "lookupMultiDocPrintServices"
	class_operation public return_type class_ref 1223938 // MultiDocPrintService
	nparams 2
	  param inout name "flavors" type class_ref 1221634 // DocFlavor
	multiplicity "[]"
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locates MultiDoc print Services capable of printing MultiDocs
containing all the specified doc flavors.
<P> This method is useful to help locate a service that can print
a <code>MultiDoc</code> in which the elements may be different
flavors. An application could perform this itself by multiple lookups
on each <code>DocFlavor</code> in turn and collating the results,
but the lookup service may be able to do this more efficiently.

@param flavors the flavors to print. If null or empty this
       constraint is not used.
Otherwise return only multidoc print services that can print all
specified doc flavors.
@param attributes attributes that the print service must
support.  If null this constraint is not used.

@return array of matching {@link MultiDocPrintService} objects.
If no services match, the array is zero-length.

"
      end

      operation 10109826 "lookupDefaultPrintService"
	class_operation public return_type class_ref 428418 // PrintService
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locates the default print service for this environment.
This may return null.
If multiple lookup services each specify a default, the
chosen service is not precisely defined, but a
platform native service, rather than an installed service,
is usually returned as the default.  If there is no clearly
identifiable
platform native default print service, the default is the first
to be located in an implementation-dependent manner.
<p>
This may include making use of any preferences API that is available
as part of the Java or native platform.
This algorithm may be overridden by a user setting the property
javax.print.defaultPrinter.
A service specified must be discovered to be valid and currently
available to be returned as the default.

@return the default PrintService.
"
      end

      operation 10109954 "registerServiceProvider"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "sp" type class_ref 1224578 // PrintServiceLookup
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows an application to explicitly register a class that
implements lookup services. The registration will not persist
across VM invocations.
This is useful if an application needs to make a new service
available that is not part of the installation.
If the lookup service is already registered, or cannot be registered,
the method returns false.
<p>

@param sp an implementation of a lookup service.
@return <code>true</code> if the new lookup service is newly
        registered; <code>false</code> otherwise.
"
      end

      operation 10110082 "registerService"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "service" type class_ref 428418 // PrintService
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows an application to directly register an instance of a
class which implements a print service.
The lookup operations for this service will be
performed by the PrintServiceLookup class using the attribute
values and classes reported by the service.
This may be less efficient than a lookup
service tuned for that service.
Therefore registering a <code>PrintServiceLookup</code> instance
instead is recommended.
The method returns true if this service is not previously
registered and is now successfully registered.
This method should not be called with StreamPrintService instances.
They will always fail to register and the method will return false.
@param service an implementation of a print service.
@return <code>true</code> if the service is newly
        registered; <code>false</code> otherwise.
"
      end

      operation 10110210 "getPrintServices"
	abstract public return_type class_ref 428418 // PrintService
	nparams 2
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Locates services that can be positively confirmed to support
the combination of attributes and DocFlavors specified.
This method is not called directly by applications.
<p>
Implemented by a service provider, used by the static methods
of this class.
<p>
The results should be the same as obtaining all the PrintServices
and querying each one individually on its support for the
specified attributes and flavors, but the process can be more
efficient by taking advantage of the capabilities of lookup services
for the print services.

@param flavor of document required.  If null it is ignored.
@param attributes required to be supported. If null this
constraint is not used.
@return array of matching PrintServices. If no services match, the
array is zero-length.
"
      end

      operation 10110338 "getPrintServices"
	abstract public return_type class_ref 428418 // PrintService
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Not called directly by applications.
Implemented by a service provider, used by the static methods
of this class.
@return array of all PrintServices known to this lookup service
class. If none are found, the array is zero-length.
"
      end

      operation 10110466 "getMultiDocPrintServices"
	abstract public return_type class_ref 1223938 // MultiDocPrintService
	nparams 2
	  param inout name "flavors" type class_ref 1221634 // DocFlavor
	multiplicity "[]"
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Not called directly by applications.
<p>
Implemented by a service provider, used by the static methods
of this class.
<p>
Locates MultiDoc print services which can be positively confirmed
to support the combination of attributes and DocFlavors specified.
<p>

@param flavors of documents required. If null or empty it is ignored.
@param attributes required to be supported. If null this
constraint is not used.
@return array of matching PrintServices. If no services match, the
array is zero-length.
"
      end

      operation 10110594 "getDefaultPrintService"
	abstract public return_type class_ref 428418 // PrintService
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Not called directly by applications.
Implemented by a service provider, and called by the print lookup
service
@return the default PrintService for this lookup service.
If there is no default, returns null.
"
      end

      operation 10110722 "getAllLookupServices"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10110850 "getServices"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 2
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10110978 "getMultiDocServices"
	class_operation private return_type class_ref 186498 // ArrayList
	nparams 2
	  param inout name "flavors" type class_ref 1221634 // DocFlavor
	multiplicity "[]"
	  param inout name "attributes" type class_ref 1224322 // AttributeSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1224834 "ServiceUI"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class is a collection of UI convenience methods which provide a
graphical user dialog for browsing print services looked up through the Java
Print Service API.
<p>
The dialogs follow a standard pattern of acting as a continue/cancel option
for a user as well as allowing the user to select the print service to use
and specify choices such as paper size and number of copies.
<p>
<p>
The dialogs are designed to work with pluggable print services though the
public APIs of those print services.
<p>
If a print service provides any vendor extensions these may be made
accessible to the user through a vendor supplied tab panel Component.
Such a vendor extension is encouraged to use Swing! and to support its
accessibility APIs.
The vendor extensions should return the settings as part of the
AttributeSet.
Applications which want to preserve the user settings should use those
settings to specify the print job.
Note that this class is not referenced by any other part of the Java
Print Service and may not be included in profiles which cannot depend
on the presence of the AWT packages.
"
      operation 10111106 "printDialog"
	class_operation public return_type class_ref 428418 // PrintService
	nparams 7
	  param inout name "gc" type class_ref 340994 // GraphicsConfiguration
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "services" type class_ref 428418 // PrintService
	multiplicity "[]"
	  param inout name "defaultService" type class_ref 428418 // PrintService
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 428546 // PrintRequestAttributeSet
	nexceptions 1
	  exception class_ref 343554 // HeadlessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Presents a dialog to the user for selecting a print service (printer).
It is displayed at the location specified by the application and
is modal.
If the specification is invalid or would make the dialog not visible it
will be displayed at a location determined by the implementation.
The dialog blocks its calling thread and is application modal.
<p>
The dialog may include a tab panel with custom UI lazily obtained from
the PrintService's ServiceUIFactory when the PrintService is browsed.
The dialog will attempt to locate a MAIN_UIROLE first as a JComponent,
then as a Panel. If there is no ServiceUIFactory or no matching role
the custom tab will be empty or not visible.
<p>
The dialog returns the print service selected by the user if the user
OK's the dialog and null if the user cancels the dialog.
<p>
An application must pass in an array of print services to browse.
The array must be non-null and non-empty.
Typically an application will pass in only PrintServices capable
of printing a particular document flavor.
<p>
An application may pass in a PrintService to be initially displayed.
A non-null parameter must be included in the array of browsable
services.
If this parameter is null a service is chosen by the implementation.
<p>
An application may optionally pass in the flavor to be printed.
If this is non-null choices presented to the user can be better
validated against those supported by the services.
An application must pass in a PrintRequestAttributeSet for returning
user choices.
On calling the PrintRequestAttributeSet may be empty, or may contain
application-specified values.
<p>
These are used to set the initial settings for the initially
displayed print service. Values which are not supported by the print
service are ignored. As the user browses print services, attributes
and values are copied to the new display. If a user browses a
print service which does not support a particular attribute-value, the
default for that service is used as the new value to be copied.
<p>
If the user cancels the dialog, the returned attributes will not reflect
any changes made by the user.

A typical basic usage of this method may be :
<pre>{@code
PrintService[] services = PrintServiceLookup.lookupPrintServices(
                           DocFlavor.INPUT_STREAM.JPEG, null);
PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet();
if (services.length > 0) {
   PrintService service =  ServiceUI.printDialog(null, 50, 50,
                                              services, services[0],
                                              null,
                                              attributes);
   if (service != null) {
    ... print ...
   }
}
}</pre>
<p>

@param gc used to select screen. null means primary or default screen.
@param x location of dialog including border in screen coordinates
@param y location of dialog including border in screen coordinates
@param services to be browsable, must be non-null.
@param defaultService - initial PrintService to display.
@param flavor - the flavor to be printed, or null.
@param attributes on input is the initial application supplied
preferences. This cannot be null but may be empty.
On output the attributes reflect changes made by the user.
@return print service selected by the user, or null if the user
cancelled the dialog.
@throws HeadlessException if GraphicsEnvironment.isHeadless()
returns true.
@throws IllegalArgumentException if services is null or empty,
or attributes is null, or the initial PrintService is not in the
list of browsable services.
"
      end

      operation 10111234 "removeUnsupportedAttributes"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "ps" type class_ref 428418 // PrintService
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "aset" type class_ref 1224322 // AttributeSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "POSSIBLE FUTURE API: This method may be used down the road if we
decide to allow developers to explicitly display a \"page setup\" dialog.
Currently we use that functionality internally for the AWT print model.


public static void pageDialog(GraphicsConfiguration gc,
int x, int y,
PrintService service,
DocFlavor flavor,
PrintRequestAttributeSet attributes)
throws HeadlessException
{
if (GraphicsEnvironment.isHeadless()) {
throw new HeadlessException();
} else if (service == null) {
throw new IllegalArgumentException(\"service must be non-null\");
} else if (attributes == null) {
throw new IllegalArgumentException(\"attributes must be non-null\");
}

ServiceDialog dialog = new ServiceDialog(gc, x, y, service,
flavor, attributes);
dialog.show();

if (dialog.getStatus() == ServiceDialog.APPROVE) {
PrintRequestAttributeSet newas = dialog.getAttributes();
Class amCategory = SunAlternateMedia.class;

if (attributes.containsKey(amCategory) &&
!newas.containsKey(amCategory))
{
attributes.remove(amCategory);
}

attributes.addAll(newas.values());
}

dialog.getOwner().dispose();
}


Removes any attributes from the given AttributeSet that are
unsupported by the given PrintService/DocFlavor combination.
"
      end
    end

    class 1224962 "SimpleDoc"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is an implementation of interface <code>Doc</code> that can
be used in many common printing requests.
It can handle all of the presently defined \"pre-defined\" doc flavors
defined as static variables in the DocFlavor class.
<p>
In particular this class implements certain required semantics of the
Doc specification as follows:
<ul>
<li>constructs a stream for the service if requested and appropriate.
<li>ensures the same object is returned for each call on a method.
<li>ensures multiple threads can access the Doc
<li>performs some validation of that the data matches the doc flavor.
</ul>
Clients who want to re-use the doc object in other jobs,
or need a MultiDoc will not want to use this class.
<p>
If the print data is a stream, or a print job requests data as a
stream, then <code>SimpleDoc</code> does not monitor if the service
properly closes the stream after data transfer completion or job
termination.
Clients may prefer to use provide their own implementation of doc that
adds a listener to monitor job completion and to validate that
resources such as streams are freed (ie closed).
"
      classrelation 3919362 // <realization>
	relation 3919362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3919362 // <realization>
	  b parent class_ref 1221378 // Doc
      end

      classrelation 3919490 // flavor (<unidirectional association>)
	relation 3919490 --->
	  a role_name "flavor" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3919490 // flavor (<unidirectional association>)
	  b parent class_ref 1221634 // DocFlavor
      end

      classrelation 3919618 // attributes (<unidirectional association>)
	relation 3919618 --->
	  a role_name "attributes" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3919618 // attributes (<unidirectional association>)
	  b parent class_ref 1221762 // DocAttributeSet
      end

      classrelation 3919746 // printData (<unidirectional association>)
	relation 3919746 --->
	  a role_name "printData" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3919746 // printData (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3919874 // reader (<unidirectional association>)
	relation 3919874 --->
	  a role_name "reader" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3919874 // reader (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      classrelation 3920002 // inStream (<unidirectional association>)
	relation 3920002 --->
	  a role_name "inStream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3920002 // inStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      operation 10111618 "SimpleDoc"
	public explicit_return_type ""
	nparams 3
	  param inout name "printData" type class_ref 129538 // Object
	  param inout name "flavor" type class_ref 1221634 // DocFlavor
	  param inout name "attributes" type class_ref 1221762 // DocAttributeSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDoc</code> with the specified
print data, doc flavor and doc attribute set.
@param printData the print data object
@param flavor the <code>DocFlavor</code> object
@param attributes a <code>DocAttributeSet</code>, which can
                  be <code>null</code>
@throws IllegalArgumentException if <code>flavor</code> or
        <code>printData</code> is <code>null</code>, or the
        <code>printData</code> does not correspond
        to the specified doc flavor--for example, the data is
        not of the type specified as the representation in the
        <code>DocFlavor</code>.
"
      end

      operation 10111746 "getDocFlavor"
	public return_type class_ref 1221634 // DocFlavor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the doc flavor in which this doc object will supply its
piece of print data.

@return  Doc flavor.
"
      end

      operation 10111874 "getAttributes"
	public return_type class_ref 1221762 // DocAttributeSet
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of printing attributes for this doc object. If the
returned attribute set includes an instance of a particular attribute
<I>X,</I> the printer must use that attribute value for this doc,
overriding any value of attribute <I>X</I> in the job's attribute set.
If the returned attribute set does not include an instance
of a particular attribute <I>X</I> or if null is returned, the printer
must consult the job's attribute set to obtain the value for
attribute <I>X,</I> and if not found there, the printer must use an
implementation-dependent default value. The returned attribute set is
unmodifiable.

@return  Unmodifiable set of printing attributes for this doc, or null
         to obtain all attribute values from the job's attribute
         set.
"
      end

      operation 10112002 "getPrintData"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the print data representation object that contains this doc
object's piece of print data in the format corresponding to the
supported doc flavor.
The <CODE>getPrintData()</CODE> method returns an instance of
the representation class whose name is given by
{@link DocFlavor#getRepresentationClassName() getRepresentationClassName},
and the return value can be cast
from class Object to that representation class.

@return  Print data representation object.

@exception  IOException if the representation class is a stream and
    there was an I/O error while constructing the stream.
"
      end

      operation 10112130 "getReaderForText"
	public return_type class_ref 407298 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a reader for extracting character print data from this doc.
The <code>Doc</code> implementation is required to support this
method if the <code>DocFlavor</code> has one of the following print
data representation classes, and return <code>null</code>
otherwise:
<UL>
<LI> <code>char[]</code>
<LI> <code>java.lang.String</code>
<LI> <code>java.io.Reader</code>
</UL>
The doc's print data representation object is used to construct and
return a <code>Reader</code> for reading the print data as a stream
of characters from the print data representation object.
However, if the print data representation object is itself a
<code>Reader</code> then the print data representation object is
simply returned.
<P>
@return  a <code>Reader</code> for reading the print data
         characters from this doc.
         If a reader cannot be provided because this doc does not meet
         the criteria stated above, <code>null</code> is returned.

@exception  IOException if there was an I/O error while creating
            the reader.
"
      end

      operation 10112258 "getStreamForBytes"
	public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an input stream for extracting byte print data from
this doc.
The <code>Doc</code> implementation is required to support this
method if the <code>DocFlavor</code> has one of the following print
data representation classes; otherwise this method
returns <code>null</code>:
<UL>
<LI> <code>byte[]</code>
<LI> <code>java.io.InputStream</code>
</UL>
The doc's print data representation object is obtained.  Then, an
input stream for reading the print data
from the print data representation object as a stream of bytes is
created and returned.
However, if the print data representation object is itself an
input stream then the print data representation object is simply
returned.
<P>
@return  an <code>InputStream</code> for reading the print data
         bytes from this doc.  If an input stream cannot be
         provided because this doc does not meet
         the criteria stated above, <code>null</code> is returned.

@exception  IOException
    if there was an I/O error while creating the input stream.
"
      end
    end

    class 1225090 "StreamPrintService"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends {@link PrintService} and represents a
print service that prints data in different formats to a
client-provided output stream.
This is principally intended for services where
the output format is a document type suitable for viewing
or archiving.
The output format must be declared as a mime type.
This is equivalent to an output document flavor where the
representation class is always \"java.io.OutputStream\"
An instance of the <code>StreamPrintService</code> class is
obtained from a {@link StreamPrintServiceFactory} instance.
<p>
Note that a <code>StreamPrintService</code> is different from a
<code>PrintService</code>, which supports a
{@link javax.print.attribute.standard.Destination Destination}
attribute.  A <code>StreamPrintService</code> always requires an output
stream, whereas a <code>PrintService</code> optionally accepts a
<code>Destination</code>. A <code>StreamPrintService</code>
has no default destination for its formatted output.
Additionally a <code>StreamPrintService</code> is expected to generate
output in
a format useful in other contexts.
StreamPrintService's are not expected to support the Destination attribute.
"
      classrelation 3920130 // <realization>
	relation 3920130 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3920130 // <realization>
	  b parent class_ref 428418 // PrintService
      end

      classrelation 3920258 // outStream (<unidirectional association>)
	relation 3920258 --->
	  a role_name "outStream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3920258 // outStream (<unidirectional association>)
	  b parent class_ref 151298 // OutputStream
      end

      attribute 2326786 "disposed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 10112386 "StreamPrintService"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10112514 "StreamPrintService"
	protected explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a StreamPrintService object.

@param out  stream to which to send formatted print data.
"
      end

      operation 10112642 "getOutputStream"
	public return_type class_ref 151298 // OutputStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the output stream.

@return the stream to which this service will send formatted print data.
"
      end

      operation 10112770 "getOutputFormat"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the document format emitted by this print service.
Must be in mimetype format, compatible with the mime type
components of DocFlavors @see DocFlavor.
@return mime type identifying the output format.
"
      end

      operation 10112898 "dispose"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disposes this <code>StreamPrintService</code>.
If a stream service cannot be re-used, it must be disposed
to indicate this. Typically the client will call this method.
Services which write data which cannot meaningfully be appended to
may also dispose the stream. This does not close the stream. It
just marks it as not for further use by this service.
"
      end

      operation 10113026 "isDisposed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>boolean</code> indicating whether or not
this <code>StreamPrintService</code> has been disposed.
If this object has been disposed, will return true.
Used by services and client applications to recognize streams
to which no further data should be written.
@return if this <code>StreamPrintService</code> has been disposed
"
      end
    end

    class 1225346 "URIException"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface URIException is a mixin interface which a subclass of {@link
PrintException PrintException} can implement to report an error condition
involving a URI address. The Print Service API does not define any print
exception classes that implement interface URIException, that being left to
the Print Service implementor's discretion.

"
      attribute 2326914 "URIInaccessible"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the printer cannot access the URI address.
For example, the printer might report this error if it goes to get
the print data and cannot even establish a connection to the
URI address.

"
      end

      attribute 2327042 "URISchemeNotSupported"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the printer does not support the URI
scheme (\"http\", \"ftp\", etc.) in the URI address.

"
      end

      attribute 2327170 "URIOtherProblem"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates any kind of problem not specifically identified
by the other reasons.

"
      end

      operation 10114434 "getUnsupportedURI"
	public return_type class_ref 783874 // URI
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the URI.
@return the URI that is the cause of this exception.
"
      end

      operation 10114562 "getReason"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the reason for the event.
@return one of the predefined reasons enumerated in this interface.
"
      end
    end
  end

  package_ref 154754 // attribute

  deploymentview 173954 "print"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 885634 "AttributeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.print.attribute.Attribute;
${definition}"
      associated_elems
	class_ref 1220482 // AttributeException
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 885762 "DocPrintJob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.print.attribute.PrintJobAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.event.PrintJobAttributeListener;
import javax.print.event.PrintJobListener;
import javax.print.PrintException;
${definition}"
      associated_elems
	class_ref 1220866 // DocPrintJob
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 885890 "CancelablePrintJob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1220738 // CancelablePrintJob
      end
      comment "Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886018 "Doc"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.Reader;
import javax.print.attribute.DocAttributeSet;
${definition}"
      associated_elems
	class_ref 1221378 // Doc
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886146 "DocFlavor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 1221634 // DocFlavor
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886274 "FlavorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.print.DocFlavor;
${definition}"
      associated_elems
	class_ref 1222914 // FlavorException
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886402 "MimeType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.AbstractMap;
import java.util.AbstractSet;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 1221890 // MimeType
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886530 "MultiDoc"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1223682 // MultiDoc
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886658 "MultiDocPrintJob"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.print.attribute.PrintRequestAttributeSet;
${definition}"
      associated_elems
	class_ref 1223810 // MultiDocPrintJob
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886786 "PrintService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import javax.print.attribute.Attribute;
import javax.print.attribute.AttributeSet;
import javax.print.attribute.PrintServiceAttribute;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.event.PrintServiceAttributeListener;
${definition}"
      associated_elems
	class_ref 428418 // PrintService
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 886914 "MultiDocPrintService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1223938 // MultiDocPrintService
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887042 "PrintException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1221506 // PrintException
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887170 "PrintServiceLookup"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Iterator;
import javax.print.attribute.AttributeSet;
import sun.awt.AppContext;
import java.util.ServiceLoader;
import java.util.ServiceConfigurationError;
${definition}"
      associated_elems
	class_ref 1224578 // PrintServiceLookup
      end
      comment "Copyright (c) 2000, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887298 "ServiceUI"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.HeadlessException;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.KeyboardFocusManager;
import javax.print.attribute.Attribute;
import javax.print.attribute.AttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Destination;
import javax.print.attribute.standard.Fidelity;
import sun.print.ServiceDialog;
import sun.print.SunAlternateMedia;
${definition}"
      associated_elems
	class_ref 1224834 // ServiceUI
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887426 "ServiceUIFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1224450 // ServiceUIFactory
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887554 "SimpleDoc"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.StringReader;
import java.io.InputStream;
import java.io.IOException;
import java.io.Reader;
import javax.print.attribute.AttributeSetUtilities;
import javax.print.attribute.DocAttributeSet;
${definition}"
      associated_elems
	class_ref 1224962 // SimpleDoc
      end
      comment "Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887682 "StreamPrintService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.OutputStream;
${definition}"
      associated_elems
	class_ref 1225090 // StreamPrintService
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887810 "StreamPrintServiceFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import javax.print.DocFlavor;
import sun.awt.AppContext;
import java.util.ServiceLoader;
import java.util.ServiceConfigurationError;
${definition}"
      associated_elems
	class_ref 902530 // StreamPrintServiceFactory
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 887938 "URIException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URI;
${definition}"
      associated_elems
	class_ref 1225346 // URIException
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 185090 // event
end
