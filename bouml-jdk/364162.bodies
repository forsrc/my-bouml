class JComboBox
!!!2219650.java!!!	JComboBox(inout aModel : ComboBoxModel)
        super();
        setModel(aModel);
        init();
!!!2219778.java!!!	JComboBox(inout items : E [[]])
        super();
        setModel(new DefaultComboBoxModel<E>(items));
        init();
!!!2219906.java!!!	JComboBox(inout items : Vector)
        super();
        setModel(new DefaultComboBoxModel<E>(items));
        init();
!!!2220034.java!!!	JComboBox()
        super();
        setModel(new DefaultComboBoxModel<E>());
        init();
!!!2220162.java!!!	init() : void
        installAncestorListener();
        setUIProperty("opaque",true);
        updateUI();
!!!2220290.java!!!	installAncestorListener() : void
        addAncestorListener(new AncestorListener(){
                                public void ancestorAdded(AncestorEvent event){ hidePopup();}
                                public void ancestorRemoved(AncestorEvent event){ hidePopup();}
                                public void ancestorMoved(AncestorEvent event){
                                    if (event.getSource() != JComboBox.this)
                                        hidePopup();
                                }});
!!!2220418.java!!!	setUI(inout ui : ComboBoxUI) : void
        super.setUI(ui);
!!!2220546.java!!!	updateUI() : void
        setUI((ComboBoxUI)UIManager.getUI(this));

        ListCellRenderer<? super E> renderer = getRenderer();
        if (renderer instanceof Component) {
            SwingUtilities.updateComponentTreeUI((Component)renderer);
        }
!!!2220674.java!!!	getUIClassID() : String
        return uiClassID;
!!!2220802.java!!!	getUI() : ComboBoxUI
        return(ComboBoxUI)ui;
!!!2220930.java!!!	setModel(inout aModel : ComboBoxModel) : void
        ComboBoxModel<E> oldModel = dataModel;
        if (oldModel != null) {
            oldModel.removeListDataListener(this);
        }
        dataModel = aModel;
        dataModel.addListDataListener(this);

        // set the current selected item.
        selectedItemReminder = dataModel.getSelectedItem();

        firePropertyChange( "model", oldModel, dataModel);
!!!2221058.java!!!	getModel() : ComboBoxModel
        return dataModel;
!!!2221186.java!!!	setLightWeightPopupEnabled(inout aFlag : boolean) : void
        boolean oldFlag = lightWeightPopupEnabled;
        lightWeightPopupEnabled = aFlag;
        firePropertyChange("lightWeightPopupEnabled", oldFlag, lightWeightPopupEnabled);
!!!2221314.java!!!	isLightWeightPopupEnabled() : boolean
        return lightWeightPopupEnabled;
!!!2221442.java!!!	setEditable(inout aFlag : boolean) : void
        boolean oldFlag = isEditable;
        isEditable = aFlag;
        firePropertyChange( "editable", oldFlag, isEditable );
!!!2221570.java!!!	isEditable() : boolean
        return isEditable;
!!!2221698.java!!!	setMaximumRowCount(in count : int) : void
        int oldCount = maximumRowCount;
        maximumRowCount = count;
        firePropertyChange( "maximumRowCount", oldCount, maximumRowCount );
!!!2221826.java!!!	getMaximumRowCount() : int
        return maximumRowCount;
!!!2221954.java!!!	setRenderer(inout aRenderer : ListCellRenderer) : void
        ListCellRenderer<? super E> oldRenderer = renderer;
        renderer = aRenderer;
        firePropertyChange( "renderer", oldRenderer, renderer );
        invalidate();
!!!2222082.java!!!	getRenderer() : ListCellRenderer
        return renderer;
!!!2222210.java!!!	setEditor(inout anEditor : ComboBoxEditor) : void
        ComboBoxEditor oldEditor = editor;

        if ( editor != null ) {
            editor.removeActionListener(this);
        }
        editor = anEditor;
        if ( editor != null ) {
            editor.addActionListener(this);
        }
        firePropertyChange( "editor", oldEditor, editor );
!!!2222338.java!!!	getEditor() : ComboBoxEditor
        return editor;
!!!2222466.java!!!	setSelectedItem(inout anObject : Object) : void
        Object oldSelection = selectedItemReminder;
        Object objectToSelect = anObject;
        if (oldSelection == null || !oldSelection.equals(anObject)) {

            if (anObject != null && !isEditable()) {
                // For non editable combo boxes, an invalid selection
                // will be rejected.
                boolean found = false;
                for (int i = 0; i < dataModel.getSize(); i++) {
                    E element = dataModel.getElementAt(i);
                    if (anObject.equals(element)) {
                        found = true;
                        objectToSelect = element;
                        break;
                    }
                }
                if (!found) {
                    return;
                }
            }

            // Must toggle the state of this flag since this method
            // call may result in ListDataEvents being fired.
            selectingItem = true;
            dataModel.setSelectedItem(objectToSelect);
            selectingItem = false;

            if (selectedItemReminder != dataModel.getSelectedItem()) {
                // in case a users implementation of ComboBoxModel
                // doesn't fire a ListDataEvent when the selection
                // changes.
                selectedItemChanged();
            }
        }
        fireActionEvent();
!!!2222594.java!!!	getSelectedItem() : Object
        return dataModel.getSelectedItem();
!!!2222722.java!!!	setSelectedIndex(in anIndex : int) : void
        int size = dataModel.getSize();

        if ( anIndex == -1 ) {
            setSelectedItem( null );
        } else if ( anIndex < -1 || anIndex >= size ) {
            throw new IllegalArgumentException("setSelectedIndex: " + anIndex + " out of bounds");
        } else {
            setSelectedItem(dataModel.getElementAt(anIndex));
        }
!!!2222850.java!!!	getSelectedIndex() : int
        Object sObject = dataModel.getSelectedItem();
        int i,c;
        E obj;

        for ( i=0,c=dataModel.getSize();i<c;i++ ) {
            obj = dataModel.getElementAt(i);
            if ( obj != null && obj.equals(sObject) )
                return i;
        }
        return -1;
!!!2222978.java!!!	getPrototypeDisplayValue() : E
        return prototypeDisplayValue;
!!!2223106.java!!!	setPrototypeDisplayValue(inout prototypeDisplayValue : E) : void
        Object oldValue = this.prototypeDisplayValue;
        this.prototypeDisplayValue = prototypeDisplayValue;
        firePropertyChange("prototypeDisplayValue", oldValue, prototypeDisplayValue);
!!!2223234.java!!!	addItem(inout item : E) : void
        checkMutableComboBoxModel();
        ((MutableComboBoxModel<E>)dataModel).addElement(item);
!!!2223362.java!!!	insertItemAt(inout item : E, in index : int) : void
        checkMutableComboBoxModel();
        ((MutableComboBoxModel<E>)dataModel).insertElementAt(item,index);
!!!2223490.java!!!	removeItem(inout anObject : Object) : void
        checkMutableComboBoxModel();
        ((MutableComboBoxModel)dataModel).removeElement(anObject);
!!!2223618.java!!!	removeItemAt(in anIndex : int) : void
        checkMutableComboBoxModel();
        ((MutableComboBoxModel<E>)dataModel).removeElementAt( anIndex );
!!!2223746.java!!!	removeAllItems() : void
        checkMutableComboBoxModel();
        MutableComboBoxModel<E> model = (MutableComboBoxModel<E>)dataModel;
        int size = model.getSize();

        if ( model instanceof DefaultComboBoxModel ) {
            ((DefaultComboBoxModel)model).removeAllElements();
        }
        else {
            for ( int i = 0; i < size; ++i ) {
                E element = model.getElementAt( 0 );
                model.removeElement( element );
            }
        }
        selectedItemReminder = null;
        if (isEditable()) {
            editor.setItem(null);
        }
!!!2223874.java!!!	checkMutableComboBoxModel() : void
        if ( !(dataModel instanceof MutableComboBoxModel) )
            throw new RuntimeException("Cannot use this method with a non-Mutable data model.");
!!!2224002.java!!!	showPopup() : void
        setPopupVisible(true);
!!!2224130.java!!!	hidePopup() : void
        setPopupVisible(false);
!!!2224258.java!!!	setPopupVisible(inout v : boolean) : void
        getUI().setPopupVisible(this, v);
!!!2224386.java!!!	isPopupVisible() : boolean
        return getUI().isPopupVisible(this);
!!!2224514.java!!!	addItemListener(inout aListener : ItemListener) : void
        listenerList.add(ItemListener.class,aListener);
!!!2224642.java!!!	removeItemListener(inout aListener : ItemListener) : void
        listenerList.remove(ItemListener.class,aListener);
!!!2224770.java!!!	getItemListeners() : ItemListener
        return listenerList.getListeners(ItemListener.class);
!!!2224898.java!!!	addActionListener(inout l : ActionListener) : void
        listenerList.add(ActionListener.class,l);
!!!2225026.java!!!	removeActionListener(inout l : ActionListener) : void
        if ((l != null) && (getAction() == l)) {
            setAction(null);
        } else {
            listenerList.remove(ActionListener.class, l);
        }
!!!2225154.java!!!	getActionListeners() : ActionListener
        return listenerList.getListeners(ActionListener.class);
!!!2225282.java!!!	addPopupMenuListener(inout l : PopupMenuListener) : void
        listenerList.add(PopupMenuListener.class,l);
!!!2225410.java!!!	removePopupMenuListener(inout l : PopupMenuListener) : void
        listenerList.remove(PopupMenuListener.class,l);
!!!2225538.java!!!	getPopupMenuListeners() : PopupMenuListener
        return listenerList.getListeners(PopupMenuListener.class);
!!!2225666.java!!!	firePopupMenuWillBecomeVisible() : void
        Object[] listeners = listenerList.getListenerList();
        PopupMenuEvent e=null;
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==PopupMenuListener.class) {
                if (e == null)
                    e = new PopupMenuEvent(this);
                ((PopupMenuListener)listeners[i+1]).popupMenuWillBecomeVisible(e);
            }
        }
!!!2225794.java!!!	firePopupMenuWillBecomeInvisible() : void
        Object[] listeners = listenerList.getListenerList();
        PopupMenuEvent e=null;
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==PopupMenuListener.class) {
                if (e == null)
                    e = new PopupMenuEvent(this);
                ((PopupMenuListener)listeners[i+1]).popupMenuWillBecomeInvisible(e);
            }
        }
!!!2225922.java!!!	firePopupMenuCanceled() : void
        Object[] listeners = listenerList.getListenerList();
        PopupMenuEvent e=null;
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==PopupMenuListener.class) {
                if (e == null)
                    e = new PopupMenuEvent(this);
                ((PopupMenuListener)listeners[i+1]).popupMenuCanceled(e);
            }
        }
!!!2226050.java!!!	setActionCommand(inout aCommand : String) : void
        actionCommand = aCommand;
!!!2226178.java!!!	getActionCommand() : String
        return actionCommand;
!!!2226306.java!!!	setAction(inout a : Action) : void
        Action oldValue = getAction();
        if (action==null || !action.equals(a)) {
            action = a;
            if (oldValue!=null) {
                removeActionListener(oldValue);
                oldValue.removePropertyChangeListener(actionPropertyChangeListener);
                actionPropertyChangeListener = null;
            }
            configurePropertiesFromAction(action);
            if (action!=null) {
                // Don't add if it is already a listener
                if (!isListener(ActionListener.class, action)) {
                    addActionListener(action);
                }
                // Reverse linkage:
                actionPropertyChangeListener = createActionPropertyChangeListener(action);
                action.addPropertyChangeListener(actionPropertyChangeListener);
            }
            firePropertyChange("action", oldValue, action);
        }
!!!2226434.java!!!	isListener(inout c : Class, inout a : ActionListener) : boolean
        boolean isListener = false;
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==c && listeners[i+1]==a) {
                    isListener=true;
            }
        }
        return isListener;
!!!2226562.java!!!	getAction() : Action
        return action;
!!!2226690.java!!!	configurePropertiesFromAction(inout a : Action) : void
        AbstractAction.setEnabledFromAction(this, a);
        AbstractAction.setToolTipTextFromAction(this, a);
        setActionCommandFromAction(a);
!!!2226818.java!!!	createActionPropertyChangeListener(inout a : Action) : PropertyChangeListener
        return new ComboBoxActionPropertyChangeListener(this, a);
!!!2226946.java!!!	actionPropertyChanged(inout action : Action, inout propertyName : String) : void
        if (propertyName == Action.ACTION_COMMAND_KEY) {
            setActionCommandFromAction(action);
        } else if (propertyName == "enabled") {
            AbstractAction.setEnabledFromAction(this, action);
        } else if (Action.SHORT_DESCRIPTION == propertyName) {
            AbstractAction.setToolTipTextFromAction(this, action);
        }
!!!2227074.java!!!	setActionCommandFromAction(inout a : Action) : void
        setActionCommand((a != null) ?
                             (String)a.getValue(Action.ACTION_COMMAND_KEY) :
                             null);
!!!2228866.java!!!	fireItemStateChanged(inout e : ItemEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for ( int i = listeners.length-2; i>=0; i-=2 ) {
            if ( listeners[i]==ItemListener.class ) {
                // Lazily create the event:
                // if (changeEvent == null)
                // changeEvent = new ChangeEvent(this);
                ((ItemListener)listeners[i+1]).itemStateChanged(e);
            }
        }
!!!2228994.java!!!	fireActionEvent() : void
        if (!firingActionEvent) {
            // Set flag to ensure that an infinite loop is not created
            firingActionEvent = true;
            ActionEvent e = null;
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            long mostRecentEventTime = EventQueue.getMostRecentEventTime();
            int modifiers = 0;
            AWTEvent currentEvent = EventQueue.getCurrentEvent();
            if (currentEvent instanceof InputEvent) {
                modifiers = ((InputEvent)currentEvent).getModifiers();
            } else if (currentEvent instanceof ActionEvent) {
                modifiers = ((ActionEvent)currentEvent).getModifiers();
            }
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for ( int i = listeners.length-2; i>=0; i-=2 ) {
                if ( listeners[i]==ActionListener.class ) {
                    // Lazily create the event:
                    if ( e == null )
                        e = new ActionEvent(this,ActionEvent.ACTION_PERFORMED,
                                            getActionCommand(),
                                            mostRecentEventTime, modifiers);
                    ((ActionListener)listeners[i+1]).actionPerformed(e);
                }
            }
            firingActionEvent = false;
        }
!!!2229122.java!!!	selectedItemChanged() : void
        if (selectedItemReminder != null ) {
            fireItemStateChanged(new ItemEvent(this,ItemEvent.ITEM_STATE_CHANGED,
                                               selectedItemReminder,
                                               ItemEvent.DESELECTED));
        }

        // set the new selected item.
        selectedItemReminder = dataModel.getSelectedItem();

        if (selectedItemReminder != null ) {
            fireItemStateChanged(new ItemEvent(this,ItemEvent.ITEM_STATE_CHANGED,
                                               selectedItemReminder,
                                               ItemEvent.SELECTED));
        }
!!!2229250.java!!!	getSelectedObjects() : Object
        Object selectedObject = getSelectedItem();
        if ( selectedObject == null )
            return new Object[0];
        else {
            Object result[] = new Object[1];
            result[0] = selectedObject;
            return result;
        }
!!!2229378.java!!!	actionPerformed(inout e : ActionEvent) : void
        ComboBoxEditor editor = getEditor();
        if ((editor != null) && (e != null) && (editor == e.getSource()
                || editor.getEditorComponent() == e.getSource())) {
            setPopupVisible(false);
            getModel().setSelectedItem(editor.getItem());
            String oldCommand = getActionCommand();
            setActionCommand("comboBoxEdited");
            fireActionEvent();
            setActionCommand(oldCommand);
        }
!!!2229506.java!!!	contentsChanged(inout e : ListDataEvent) : void
        Object oldSelection = selectedItemReminder;
        Object newSelection = dataModel.getSelectedItem();
        if (oldSelection == null || !oldSelection.equals(newSelection)) {
            selectedItemChanged();
            if (!selectingItem) {
                fireActionEvent();
            }
        }
!!!2229634.java!!!	intervalAdded(inout e : ListDataEvent) : void
        if (selectedItemReminder != dataModel.getSelectedItem()) {
            selectedItemChanged();
        }
!!!2229762.java!!!	intervalRemoved(inout e : ListDataEvent) : void
        contentsChanged(e);
!!!2229890.java!!!	selectWithKeyChar(in keyChar : char) : boolean
        int index;

        if ( keySelectionManager == null )
            keySelectionManager = createDefaultKeySelectionManager();

        index = keySelectionManager.selectionForKey(keyChar,getModel());
        if ( index != -1 ) {
            setSelectedIndex(index);
            return true;
        }
        else
            return false;
!!!2230018.java!!!	setEnabled(inout b : boolean) : void
        super.setEnabled(b);
        firePropertyChange( "enabled", !isEnabled(), isEnabled() );
!!!2230146.java!!!	configureEditor(inout anEditor : ComboBoxEditor, inout anItem : Object) : void
        anEditor.setItem(anItem);
!!!2230274.java!!!	processKeyEvent(inout e : KeyEvent) : void
        if ( e.getKeyCode() == KeyEvent.VK_TAB ) {
            hidePopup();
        }
        super.processKeyEvent(e);
!!!2230402.java!!!	processKeyBinding(inout ks : KeyStroke, inout e : KeyEvent, in condition : int, inout pressed : boolean) : boolean
        if (super.processKeyBinding(ks, e, condition, pressed)) {
            return true;
        }

        if (!isEditable() || condition != WHEN_FOCUSED || getEditor() == null
                || !Boolean.TRUE.equals(getClientProperty("JComboBox.isTableCellEditor"))) {
            return false;
        }

        Component editorComponent = getEditor().getEditorComponent();
        if (editorComponent instanceof JComponent) {
            JComponent component = (JComponent) editorComponent;
            return component.processKeyBinding(ks, e, WHEN_FOCUSED, pressed);
        }
        return false;
!!!2230530.java!!!	setKeySelectionManager(inout aManager : JComboBox::KeySelectionManager) : void
        keySelectionManager = aManager;
!!!2230658.java!!!	getKeySelectionManager() : JComboBox::KeySelectionManager
        return keySelectionManager;
!!!2230786.java!!!	getItemCount() : int
        return dataModel.getSize();
!!!2230914.java!!!	getItemAt(in index : int) : E
        return dataModel.getElementAt(index);
!!!2231042.java!!!	createDefaultKeySelectionManager() : JComboBox::KeySelectionManager
        return new DefaultKeySelectionManager();
!!!2231426.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!2231554.java!!!	paramString() : String
        String selectedItemReminderString = (selectedItemReminder != null ?
                                             selectedItemReminder.toString() :
                                             "");
        String isEditableString = (isEditable ? "true" : "false");
        String lightWeightPopupEnabledString = (lightWeightPopupEnabled ?
                                                "true" : "false");

        return super.paramString() +
        ",isEditable=" + isEditableString +
        ",lightWeightPopupEnabled=" + lightWeightPopupEnabledString +
        ",maximumRowCount=" + maximumRowCount +
        ",selectedItemReminder=" + selectedItemReminderString;
!!!2231682.java!!!	getAccessibleContext() : AccessibleContext
        if ( accessibleContext == null ) {
            accessibleContext = new AccessibleJComboBox();
        }
        return accessibleContext;
