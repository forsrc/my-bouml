class LinearGradientPaint
!!!6258050.java!!!	LinearGradientPaint(in startX : float, in startY : float, in endX : float, in endY : float, inout fractions : float [[]], inout colors : Color [[]])
        this(new Point2D.Float(startX, startY),
             new Point2D.Float(endX, endY),
             fractions,
             colors,
             CycleMethod.NO_CYCLE);
!!!6258178.java!!!	LinearGradientPaint(in startX : float, in startY : float, in endX : float, in endY : float, inout fractions : float [[]], inout colors : Color [[]], inout cycleMethod : MultipleGradientPaint::CycleMethod)
        this(new Point2D.Float(startX, startY),
             new Point2D.Float(endX, endY),
             fractions,
             colors,
             cycleMethod);
!!!6258306.java!!!	LinearGradientPaint(inout start : Point2D, inout end : Point2D, inout fractions : float [[]], inout colors : Color [[]])
        this(start, end,
             fractions, colors,
             CycleMethod.NO_CYCLE);
!!!6258434.java!!!	LinearGradientPaint(inout start : Point2D, inout end : Point2D, inout fractions : float [[]], inout colors : Color [[]], inout cycleMethod : MultipleGradientPaint::CycleMethod)
        this(start, end,
             fractions, colors,
             cycleMethod,
             ColorSpaceType.SRGB,
             new AffineTransform());
!!!6258562.java!!!	LinearGradientPaint(inout start : Point2D, inout end : Point2D, inout fractions : float [[]], inout colors : Color [[]], inout cycleMethod : MultipleGradientPaint::CycleMethod, inout colorSpace : MultipleGradientPaint::ColorSpaceType, inout gradientTransform : AffineTransform)
        super(fractions, colors, cycleMethod, colorSpace, gradientTransform);

        // check input parameters
        if (start == null || end == null) {
            throw new NullPointerException("Start and end points must be" +
                                           "non-null");
        }

        if (start.equals(end)) {
            throw new IllegalArgumentException("Start point cannot equal" +
                                               "endpoint");
        }

        // copy the points...
        this.start = new Point2D.Double(start.getX(), start.getY());
        this.end = new Point2D.Double(end.getX(), end.getY());
!!!6258690.java!!!	createContext(inout cm : ColorModel, inout deviceBounds : Rectangle, inout userBounds : Rectangle2D, inout transform : AffineTransform, inout hints : RenderingHints) : PaintContext
        // avoid modifying the user's transform...
        transform = new AffineTransform(transform);
        // incorporate the gradient transform
        transform.concatenate(gradientTransform);

        if ((fractions.length == 2) &&
            (cycleMethod != CycleMethod.REPEAT) &&
            (colorSpace == ColorSpaceType.SRGB))
        {
            // faster to use the basic GradientPaintContext for this
            // common case
            boolean cyclic = (cycleMethod != CycleMethod.NO_CYCLE);
            return new GradientPaintContext(cm, start, end,
                                            transform,
                                            colors[0], colors[1],
                                            cyclic);
        } else {
            return new LinearGradientPaintContext(this, cm,
                                                  deviceBounds, userBounds,
                                                  transform, hints,
                                                  start, end,
                                                  fractions, colors,
                                                  cycleMethod, colorSpace);
        }
!!!6258818.java!!!	getStartPoint() : Point2D
        return new Point2D.Double(start.getX(), start.getY());
!!!6258946.java!!!	getEndPoint() : Point2D
        return new Point2D.Double(end.getX(), end.getY());
