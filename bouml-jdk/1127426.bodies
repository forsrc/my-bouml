class AtomicIntegerArray
!!!9253378.java!!!	checkedByteOffset(in i : int) : long
        if (i < 0 || i >= array.length)
            throw new IndexOutOfBoundsException("index " + i);

        return byteOffset(i);
!!!9253506.java!!!	byteOffset(in i : int) : long
        return ((long) i << shift) + base;
!!!9253634.java!!!	AtomicIntegerArray(in length : int)
        array = new int[length];
!!!9253762.java!!!	AtomicIntegerArray(inout array : int [[]])
        // Visibility guaranteed by final field guarantees
        this.array = array.clone();
!!!9253890.java!!!	length() : int
        return array.length;
!!!9254018.java!!!	get(in i : int) : int
        return getRaw(checkedByteOffset(i));
!!!9254146.java!!!	getRaw(in offset : long) : int
        return unsafe.getIntVolatile(array, offset);
!!!9254274.java!!!	set(in i : int, in newValue : int) : void
        unsafe.putIntVolatile(array, checkedByteOffset(i), newValue);
!!!9254402.java!!!	lazySet(in i : int, in newValue : int) : void
        unsafe.putOrderedInt(array, checkedByteOffset(i), newValue);
!!!9254530.java!!!	getAndSet(in i : int, in newValue : int) : int
        return unsafe.getAndSetInt(array, checkedByteOffset(i), newValue);
!!!9254658.java!!!	compareAndSet(in i : int, in expect : int, in update : int) : boolean
        return compareAndSetRaw(checkedByteOffset(i), expect, update);
!!!9254786.java!!!	compareAndSetRaw(in offset : long, in expect : int, in update : int) : boolean
        return unsafe.compareAndSwapInt(array, offset, expect, update);
!!!9254914.java!!!	weakCompareAndSet(in i : int, in expect : int, in update : int) : boolean
        return compareAndSet(i, expect, update);
!!!9255042.java!!!	getAndIncrement(in i : int) : int
        return getAndAdd(i, 1);
!!!9255170.java!!!	getAndDecrement(in i : int) : int
        return getAndAdd(i, -1);
!!!9255298.java!!!	getAndAdd(in i : int, in delta : int) : int
        return unsafe.getAndAddInt(array, checkedByteOffset(i), delta);
!!!9255426.java!!!	incrementAndGet(in i : int) : int
        return getAndAdd(i, 1) + 1;
!!!9255554.java!!!	decrementAndGet(in i : int) : int
        return getAndAdd(i, -1) - 1;
!!!9255682.java!!!	addAndGet(in i : int, in delta : int) : int
        return getAndAdd(i, delta) + delta;
!!!9255810.java!!!	getAndUpdate(in i : int, inout updateFunction : IntUnaryOperator) : int
        long offset = checkedByteOffset(i);
        int prev, next;
        do {
            prev = getRaw(offset);
            next = updateFunction.applyAsInt(prev);
        } while (!compareAndSetRaw(offset, prev, next));
        return prev;
!!!9255938.java!!!	updateAndGet(in i : int, inout updateFunction : IntUnaryOperator) : int
        long offset = checkedByteOffset(i);
        int prev, next;
        do {
            prev = getRaw(offset);
            next = updateFunction.applyAsInt(prev);
        } while (!compareAndSetRaw(offset, prev, next));
        return next;
!!!9256066.java!!!	getAndAccumulate(in i : int, in x : int, inout accumulatorFunction : IntBinaryOperator) : int
        long offset = checkedByteOffset(i);
        int prev, next;
        do {
            prev = getRaw(offset);
            next = accumulatorFunction.applyAsInt(prev, x);
        } while (!compareAndSetRaw(offset, prev, next));
        return prev;
!!!9256194.java!!!	accumulateAndGet(in i : int, in x : int, inout accumulatorFunction : IntBinaryOperator) : int
        long offset = checkedByteOffset(i);
        int prev, next;
        do {
            prev = getRaw(offset);
            next = accumulatorFunction.applyAsInt(prev, x);
        } while (!compareAndSetRaw(offset, prev, next));
        return next;
!!!9256322.java!!!	toString() : String
        int iMax = array.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(getRaw(byteOffset(i)));
            if (i == iMax)
                return b.append(']').toString();
            b.append(',').append(' ');
        }
