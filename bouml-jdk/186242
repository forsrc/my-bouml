format 222
"sql" // jdk1.8::javax::sql
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/sql/"
  java_package "javax.sql"
  classview 179202 "sql"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1256322 "CommonDataSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface that defines the methods which are common between <code>DataSource</code>,
<code>XADataSource</code> and <code>ConnectionPoolDataSource</code>.

"
      operation 10320642 "getLogWriter"
	public return_type class_ref 195330 // PrintWriter
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Retrieves the log writer for this <code>DataSource</code>
object.

<p>The log writer is a character output stream to which all logging
and tracing messages for this data source will be
printed.  This includes messages printed by the methods of this
object, messages printed by methods of other objects manufactured
by this object, and so on.  Messages printed to a data source
specific log writer are not printed to the log writer associated
with the <code>java.sql.DriverManager</code> class.  When a
<code>DataSource</code> object is
created, the log writer is initially null; in other words, the
default is for logging to be disabled.

@return the log writer for this data source or null if
       logging is disabled
@exception java.sql.SQLException if a database access error occurs
@see #setLogWriter
@since 1.4
"
      end

      operation 10320770 "setLogWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 195330 // PrintWriter
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the log writer for this <code>DataSource</code>
object to the given <code>java.io.PrintWriter</code> object.

<p>The log writer is a character output stream to which all logging
and tracing messages for this data source will be
printed.  This includes messages printed by the methods of this
object, messages printed by methods of other objects manufactured
by this object, and so on.  Messages printed to a data source-
specific log writer are not printed to the log writer associated
with the <code>java.sql.DriverManager</code> class. When a
<code>DataSource</code> object is created the log writer is
initially null; in other words, the default is for logging to be
disabled.

@param out the new log writer; to disable logging, set to null
@exception SQLException if a database access error occurs
@see #getLogWriter
@since 1.4
"
      end

      operation 10320898 "setLoginTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.  A value of zero
specifies that the timeout is the default system timeout
if there is one; otherwise, it specifies that there is no timeout.
When a <code>DataSource</code> object is created, the login timeout is
initially zero.

@param seconds the data source login time limit
@exception SQLException if a database access error occurs.
@see #getLoginTimeout
@since 1.4
"
      end

      operation 10321026 "getLoginTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum time in seconds that this data source can wait
while attempting to connect to a database.  A value of zero
means that the timeout is the default system timeout
if there is one; otherwise, it means that there is no timeout.
When a <code>DataSource</code> object is created, the login timeout is
initially zero.

@return the data source login time limit
@exception SQLException if a database access error occurs.
@see #setLoginTimeout
@since 1.4
"
      end

      operation 10321154 "getParentLogger"
	public return_type class_ref 215298 // Logger
	nparams 0
	nexceptions 1
	  exception class_ref 1041154 // SQLFeatureNotSupportedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------- JDBC 4.1 -----------------------------------

Return the parent Logger of all the Loggers used by this data source. This
should be the Logger farthest from the root Logger that is
still an ancestor of all of the Loggers used by this data source. Configuring
this Logger will affect all of the log messages generated by the data source.
In the worst case, this may be the root Logger.

@return the parent Logger for this data source
@throws SQLFeatureNotSupportedException if the data source does not use
{@code java.util.logging}
@since 1.7
"
      end
    end

    class 1256450 "ConnectionEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>An <code>Event</code> object that provides information about the
source of a connection-related event.  <code>ConnectionEvent</code>
objects are generated when an application closes a pooled connection
and when an error occurs.  The <code>ConnectionEvent</code> object
contains two kinds of information:
<UL>
  <LI>The pooled connection closed by the application
  <LI>In the case of an error event, the <code>SQLException</code>
      about to be thrown to the application
</UL>

@since 1.4
"
      classrelation 4043522 // <generalisation>
	relation 4043522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4043522 // <generalisation>
	  b parent class_ref 525698 // EventObject
      end

      operation 10321282 "ConnectionEvent"
	public explicit_return_type ""
	nparams 1
	  param inout name "con" type class_ref 1256578 // PooledConnection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<P>Constructs a <code>ConnectionEvent</code> object initialized with
the given <code>PooledConnection</code> object. <code>SQLException</code>
defaults to <code>null</code>.

@param con the pooled connection that is the source of the event
@throws IllegalArgumentException if <code>con</code> is null.
"
      end

      operation 10321410 "ConnectionEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "con" type class_ref 1256578 // PooledConnection
	  param inout name "ex" type class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<P>Constructs a <code>ConnectionEvent</code> object initialized with
the given <code>PooledConnection</code> object and
<code>SQLException</code> object.

@param con the pooled connection that is the source of the event
@param ex the SQLException about to be thrown to the application
@throws IllegalArgumentException if <code>con</code> is null.
"
      end

      operation 10321538 "getSQLException"
	public return_type class_ref 1037186 // SQLException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<P>Retrieves the <code>SQLException</code> for this
<code>ConnectionEvent</code> object. May be <code>null</code>.

@return the SQLException about to be thrown or <code>null</code>
"
      end

      classrelation 4043650 // ex (<unidirectional association>)
	relation 4043650 --->
	  a role_name "ex" init_value " null" private
	    comment "
The <code>SQLException</code> that the driver will throw to the
application when an error occurs and the pooled connection is no
longer usable.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4043650 // ex (<unidirectional association>)
	  b parent class_ref 1037186 // SQLException
      end

      attribute 2367618 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -4843217645290030002L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Private serial version unique ID to ensure serialization
compatibility.

"
      end
    end

    class 1256578 "PooledConnection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that provides hooks for connection pool management.
A <code>PooledConnection</code> object
represents a physical connection to a data source.  The connection
can be recycled rather than being closed when an application is
finished with it, thus reducing the number of connections that
need to be made.
<P>
An application programmer does not use the <code>PooledConnection</code>
interface directly; rather, it is used by a middle tier infrastructure
that manages the pooling of connections.
<P>
When an application calls the method <code>DataSource.getConnection</code>,
it gets back a <code>Connection</code> object.  If connection pooling is
being done, that <code>Connection</code> object is actually a handle to
a <code>PooledConnection</code> object, which is a physical connection.
<P>
The connection pool manager, typically the application server, maintains
a pool of <code>PooledConnection</code> objects.  If there is a
<code>PooledConnection</code> object available in the pool, the
connection pool manager returns a <code>Connection</code> object that
is a handle to that physical connection.
If no <code>PooledConnection</code> object is available, the
connection pool manager calls the <code>ConnectionPoolDataSource</code>
method <code>getPoolConnection</code> to create a new physical connection.  The
 JDBC driver implementing <code>ConnectionPoolDataSource</code> creates a
 new <code>PooledConnection</code> object and returns a handle to it.
<P>
When an application closes a connection, it calls the <code>Connection</code>
method <code>close</code>. When connection pooling is being done,
the connection pool manager is notified because it has registered itself as
a <code>ConnectionEventListener</code> object using the
<code>ConnectionPool</code> method <code>addConnectionEventListener</code>.
The connection pool manager deactivates the handle to
the <code>PooledConnection</code> object and  returns the
<code>PooledConnection</code> object to the pool of connections so that
it can be used again.  Thus, when an application closes its connection,
the underlying physical connection is recycled rather than being closed.
<P>
The physical connection is not closed until the connection pool manager
calls the <code>PooledConnection</code> method <code>close</code>.
This method is generally called to have an orderly shutdown of the server or
if a fatal error has made the connection unusable.

<p>
A connection pool manager is often also a statement pool manager, maintaining
 a pool of <code>PreparedStatement</code> objects.
 When an application closes a prepared statement, it calls the
 <code>PreparedStatement</code>
method <code>close</code>. When <code>Statement</code> pooling is being done,
the pool manager is notified because it has registered itself as
a <code>StatementEventListener</code> object using the
<code>ConnectionPool</code> method <code>addStatementEventListener</code>.
 Thus, when an application closes its  <code>PreparedStatement</code>,
the underlying prepared statement is recycled rather than being closed.
<P>

@since 1.4
"
      operation 10322434 "getConnection"
	public return_type class_ref 1038338 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a <code>Connection</code> object that is a handle
for the physical connection that
this <code>PooledConnection</code> object represents.
The connection pool manager calls this method when an application has
called the method <code>DataSource.getConnection</code> and there are
no <code>PooledConnection</code> objects available. See the
{@link PooledConnection interface description} for more information.

@return  a <code>Connection</code> object that is a handle to
         this <code>PooledConnection</code> object
@exception SQLException if a database access error occurs
@exception java.sql.SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10322562 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the physical connection that this <code>PooledConnection</code>
object represents.  An application never calls this method directly;
it is called by the connection pool module, or manager.
<P>
See the {@link PooledConnection interface description} for more
information.

@exception SQLException if a database access error occurs
@exception java.sql.SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10322690 "addConnectionEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1256706 // ConnectionEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given event listener so that it will be notified
when an event occurs on this <code>PooledConnection</code> object.

@param listener a component, usually the connection pool manager,
       that has implemented the
       <code>ConnectionEventListener</code> interface and wants to be
       notified when the connection is closed or has an error
@see #removeConnectionEventListener
"
      end

      operation 10322818 "removeConnectionEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1256706 // ConnectionEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given event listener from the list of components that
will be notified when an event occurs on this
<code>PooledConnection</code> object.

@param listener a component, usually the connection pool manager,
       that has implemented the
       <code>ConnectionEventListener</code> interface and
       been registered with this <code>PooledConnection</code> object as
       a listener
@see #addConnectionEventListener
"
      end

      operation 10322946 "addStatementEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1257090 // StatementEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a <code>StatementEventListener</code> with this <code>PooledConnection</code> object.  Components that
wish to be notified when  <code>PreparedStatement</code>s created by the
connection are closed or are detected to be invalid may use this method
to register a <code>StatementEventListener</code> with this <code>PooledConnection</code> object.
<p>
@param listener      an component which implements the <code>StatementEventListener</code>
                                     interface that is to be registered with this <code>PooledConnection</code> object
<p>
@since 1.6
"
      end

      operation 10323074 "removeStatementEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1257090 // StatementEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified <code>StatementEventListener</code> from the list of
components that will be notified when the driver detects that a
<code>PreparedStatement</code> has been closed or is invalid.
<p>
@param listener      the component which implements the
                                     <code>StatementEventListener</code> interface that was previously
                                     registered with this <code>PooledConnection</code> object
<p>
@since 1.6
"
      end
    end

    class 1256706 "ConnectionEventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P>
An object that registers to be notified of events generated by a
<code>PooledConnection</code> object.
<P>
The <code>ConnectionEventListener</code> interface is implemented by a
connection pooling component.  A connection pooling component will
usually be provided by a JDBC driver vendor or another system software
vendor.  A JDBC driver notifies a <code>ConnectionEventListener</code>
object when an application is finished using a pooled connection with
which the listener has registered.  The notification
occurs after the application calls the method <code>close</code> on
its representation of a <code>PooledConnection</code> object.  A
<code>ConnectionEventListener</code> is also notified when a
connection error occurs due to the fact that the <code>PooledConnection</code>
is unfit for future use---the server has crashed, for example.
The listener is notified by the JDBC driver just before the driver throws an
<code>SQLException</code> to the application using the
<code>PooledConnection</code> object.

@since 1.4
"
      classrelation 4043778 // <generalisation>
	relation 4043778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4043778 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 10321666 "connectionClosed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1256450 // ConnectionEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies this <code>ConnectionEventListener</code> that
the application has called the method <code>close</code> on its
representation of a pooled connection.

@param event an event object describing the source of
the event
"
      end

      operation 10321794 "connectionErrorOccurred"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1256450 // ConnectionEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies this <code>ConnectionEventListener</code> that
a fatal error has occurred and the pooled connection can
no longer be used.  The driver makes this notification just
before it throws the application the <code>SQLException</code>
contained in the given <code>ConnectionEvent</code> object.

@param event an event object describing the source of
the event and containing the <code>SQLException</code> that the
driver is about to throw
"
      end
    end

    class 1256834 "ConnectionPoolDataSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A factory for <code>PooledConnection</code>
objects.  An object that implements this interface will typically be
registered with a naming service that is based on the
Java&trade; Naming and Directory Interface
(JNDI).

@since 1.4
"
      classrelation 4043906 // <generalisation>
	relation 4043906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4043906 // <generalisation>
	  b parent class_ref 1256322 // CommonDataSource
      end

      operation 10321922 "getPooledConnection"
	public return_type class_ref 1256578 // PooledConnection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection that can
be used as a pooled connection.

@return  a <code>PooledConnection</code> object that is a physical
        connection to the database that this
        <code>ConnectionPoolDataSource</code> object represents
@exception SQLException if a database access error occurs
@exception java.sql.SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10322050 "getPooledConnection"
	public return_type class_ref 1256578 // PooledConnection
	nparams 2
	  param inout name "user" type class_ref 128130 // String
	  param inout name "password" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection that can
be used as a pooled connection.

@param user the database user on whose behalf the connection is being made
@param password the user's password
@return  a <code>PooledConnection</code> object that is a physical
        connection to the database that this
        <code>ConnectionPoolDataSource</code> object represents
@exception SQLException if a database access error occurs
@exception java.sql.SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end
    end

    class 1256962 "DataSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A factory for connections to the physical data source that this
{@code DataSource} object represents.  An alternative to the
{@code DriverManager} facility, a {@code DataSource} object
is the preferred means of getting a connection. An object that implements
the {@code DataSource} interface will typically be
registered with a naming service based on the
Java&trade; Naming and Directory (JNDI) API.
<P>
The {@code DataSource} interface is implemented by a driver vendor.
There are three types of implementations:
<OL>
  <LI>Basic implementation -- produces a standard {@code Connection}
      object
  <LI>Connection pooling implementation -- produces a {@code Connection}
      object that will automatically participate in connection pooling.  This
      implementation works with a middle-tier connection pooling manager.
  <LI>Distributed transaction implementation -- produces a
      {@code Connection} object that may be used for distributed
      transactions and almost always participates in connection pooling.
      This implementation works with a middle-tier
      transaction manager and almost always with a connection
      pooling manager.
</OL>
<P>
A {@code DataSource} object has properties that can be modified
when necessary.  For example, if the data source is moved to a different
server, the property for the server can be changed.  The benefit is that
because the data source's properties can be changed, any code accessing
that data source does not need to be changed.
<P>
A driver that is accessed via a {@code DataSource} object does not
register itself with the {@code DriverManager}.  Rather, a
{@code DataSource} object is retrieved though a lookup operation
and then used to create a {@code Connection} object.  With a basic
implementation, the connection obtained through a {@code DataSource}
object is identical to a connection obtained through the
{@code DriverManager} facility.
<p>
An implementation of {@code DataSource} must include a public no-arg
constructor.

@since 1.4
"
      classrelation 4044034 // <generalisation>
	relation 4044034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4044034 // <generalisation>
	  b parent class_ref 1256322 // CommonDataSource
      end

      classrelation 4044162 // <generalisation>
	relation 4044162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4044162 // <generalisation>
	  b parent class_ref 1038082 // Wrapper
      end

      operation 10322178 "getConnection"
	public return_type class_ref 1038338 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Attempts to establish a connection with the data source that
this {@code DataSource} object represents.

@return  a connection to the data source
@exception SQLException if a database access error occurs
@throws java.sql.SQLTimeoutException  when the driver has determined that the
timeout value specified by the {@code setLoginTimeout} method
has been exceeded and has at least tried to cancel the
current database connection attempt
"
      end

      operation 10322306 "getConnection"
	public return_type class_ref 1038338 // Connection
	nparams 2
	  param inout name "username" type class_ref 128130 // String
	  param inout name "password" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Attempts to establish a connection with the data source that
this {@code DataSource} object represents.

@param username the database user on whose behalf the connection is
 being made
@param password the user's password
@return  a connection to the data source
@exception SQLException if a database access error occurs
@throws java.sql.SQLTimeoutException  when the driver has determined that the
timeout value specified by the {@code setLoginTimeout} method
has been exceeded and has at least tried to cancel the
current database connection attempt
@since 1.4
"
      end
    end

    class 1257090 "StatementEventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that registers to be notified of events that occur on PreparedStatements
that are in the Statement pool.
<p>
The JDBC 3.0 specification added the maxStatements
<code>ConnectionPooledDataSource</code> property to provide a standard mechanism for
enabling the pooling of <code>PreparedStatements</code>
and to specify the size of the statement
pool.  However, there was no way for a driver to notify an external
statement pool when a <code>PreparedStatement</code> becomes invalid.  For some databases, a
statement becomes invalid if a DDL operation is performed that affects the
table.  For example an application may create a temporary table to do some work
on the table and then destroy it.  It may later recreate the same table when
it is needed again.  Some databases will invalidate any prepared statements
that reference the temporary table when the table is dropped.
<p>
Similar to the methods defined in the <code>ConnectionEventListener</code> interface,
the driver will call the <code>StatementEventListener.statementErrorOccurred</code>
method prior to throwing any exceptions when it detects a statement is invalid.
The driver will also call the <code>StatementEventListener.statementClosed</code>
method when a <code>PreparedStatement</code> is closed.
<p>
Methods which allow a component to register a StatementEventListener with a
<code>PooledConnection</code> have been added to the <code>PooledConnection</code> interface.
<p>
@since 1.6
"
      classrelation 4045186 // <generalisation>
	relation 4045186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4045186 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 10342018 "statementClosed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1258114 // StatementEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The driver calls this method on all <code>StatementEventListener</code>s registered on the connection when it detects that a
<code>PreparedStatement</code> is closed.

@param event an event object describing the source of
the event and that the <code>PreparedStatement</code> was closed.
@since 1.6
"
      end

      operation 10342146 "statementErrorOccurred"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1258114 // StatementEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The driver calls this method on all <code>StatementEventListener</code>s
registered on the connection when it detects that a
<code>PreparedStatement</code> is invalid. The driver calls this method
just before it throws the <code>SQLException</code>,
contained in the given event, to the application.
<p>
@param event         an event object describing the source of the event,
                                     the statement that is invalid and the exception the
                                     driver is about to throw.  The source of the event is
                                     the <code>PooledConnection</code> which the invalid <code>PreparedStatement</code>
is associated with.
<p>
@since 1.6
"
      end
    end

    class 1257218 "RowSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface that adds support to the JDBC API for the
JavaBeans&trade; component model.
A rowset, which can be used as a JavaBeans component in
a visual Bean development environment, can be created and
configured at design time and executed at run time.
<P>
The <code>RowSet</code>
interface provides a set of JavaBeans properties that allow a <code>RowSet</code>
instance to be configured to connect to a JDBC data source and read
some data from the data source.  A group of setter methods (<code>setInt</code>,
<code>setBytes</code>, <code>setString</code>, and so on)
provide a way to pass input parameters to a rowset's command property.
This command is the SQL query the rowset uses when it gets its data from
a relational database, which is generally the case.
<P>
The <code>RowSet</code>
interface supports JavaBeans events, allowing other components in an
application to be notified when an event occurs on a rowset,
such as a change in its value.

<P>The <code>RowSet</code> interface is unique in that it is intended to be
implemented using the rest of the JDBC API.  In other words, a
<code>RowSet</code> implementation is a layer of software that executes \"on top\"
of a JDBC driver.  Implementations of the <code>RowSet</code> interface can
be provided by anyone, including JDBC driver vendors who want to
provide a <code>RowSet</code> implementation as part of their JDBC products.
<P>
A <code>RowSet</code> object may make a connection with a data source and
maintain that connection throughout its life cycle, in which case it is
called a <i>connected</i> rowset.  A rowset may also make a connection with
a data source, get data from it, and then close the connection. Such a rowset
is called a <i>disconnected</i> rowset.  A disconnected rowset may make
changes to its data while it is disconnected and then send the changes back
to the original source of the data, but it must reestablish a connection to do so.
<P>
A disconnected rowset may have a reader (a <code>RowSetReader</code> object)
and a writer (a <code>RowSetWriter</code> object) associated with it.
The reader may be implemented in many different ways to populate a rowset
with data, including getting data from a non-relational data source. The
writer can also be implemented in many different ways to propagate changes
made to the rowset's data back to the underlying data source.
<P>
Rowsets are easy to use.  The <code>RowSet</code> interface extends the standard
<code>java.sql.ResultSet</code> interface.  The <code>RowSetMetaData</code>
interface extends the <code>java.sql.ResultSetMetaData</code> interface.
Thus, developers familiar
with the JDBC API will have to learn a minimal number of new APIs to
use rowsets.  In addition, third-party software tools that work with
JDBC <code>ResultSet</code> objects will also easily be made to work with rowsets.

@since 1.4
"
      classrelation 4044290 // <generalisation>
	relation 4044290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4044290 // <generalisation>
	  b parent class_ref 1037314 // ResultSet
      end

      operation 10323202 "getUrl"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 Properties
-----------------------------------------------------------------------
-----------------------------------------------------------------------
 The following properties may be used to create a Connection.
-----------------------------------------------------------------------

Retrieves the url property this <code>RowSet</code> object will use to
create a connection if it uses the <code>DriverManager</code>
instead of a <code>DataSource</code> object to establish the connection.
The default value is <code>null</code>.

@return a string url
@exception SQLException if a database access error occurs
@see #setUrl
"
      end

      operation 10323330 "setUrl"
	public explicit_return_type "void"
	nparams 1
	  param inout name "url" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the URL this <code>RowSet</code> object will use when it uses the
<code>DriverManager</code> to create a connection.

Setting this property is optional.  If a URL is used, a JDBC driver
that accepts the URL must be loaded before the
rowset is used to connect to a database.  The rowset will use the URL
internally to create a database connection when reading or writing
data.  Either a URL or a data source name is used to create a
connection, whichever was set to non null value most recently.

@param url a string value; may be <code>null</code>
@exception SQLException if a database access error occurs
@see #getUrl
"
      end

      operation 10323458 "getDataSourceName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the logical name that identifies the data source for this
<code>RowSet</code> object.

@return a data source name
@see #setDataSourceName
@see #setUrl
"
      end

      operation 10323586 "setDataSourceName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data source name property for this <code>RowSet</code> object to the
given <code>String</code>.
<P>
The value of the data source name property can be used to do a lookup of
a <code>DataSource</code> object that has been registered with a naming
service.  After being retrieved, the <code>DataSource</code> object can be
used to create a connection to the data source that it represents.

@param name the logical name of the data source for this <code>RowSet</code>
       object; may be <code>null</code>
@exception SQLException if a database access error occurs
@see #getDataSourceName
"
      end

      operation 10323714 "getUsername"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the username used to create a database connection for this
<code>RowSet</code> object.
The username property is set at run time before calling the method
<code>execute</code>.  It is
not usually part of the serialized state of a <code>RowSet</code> object.

@return the username property
@see #setUsername
"
      end

      operation 10323842 "setUsername"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the username property for this <code>RowSet</code> object to the
given <code>String</code>.

@param name a user name
@exception SQLException if a database access error occurs
@see #getUsername
"
      end

      operation 10323970 "getPassword"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the password used to create a database connection.
The password property is set at run time before calling the method
<code>execute</code>.  It is not usually part of the serialized state
of a <code>RowSet</code> object.

@return the password for making a database connection
@see #setPassword
"
      end

      operation 10324098 "setPassword"
	public explicit_return_type "void"
	nparams 1
	  param inout name "password" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the database password for this <code>RowSet</code> object to
the given <code>String</code>.

@param password the password string
@exception SQLException if a database access error occurs
@see #getPassword
"
      end

      operation 10324226 "getTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the transaction isolation level set for this
<code>RowSet</code> object.

@return the transaction isolation level; one of
     <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
     <code>Connection.TRANSACTION_READ_COMMITTED</code>,
     <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
     <code>Connection.TRANSACTION_SERIALIZABLE</code>
@see #setTransactionIsolation
"
      end

      operation 10324354 "setTransactionIsolation"
	public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the transaction isolation level for this <code>RowSet</code> object.

@param level the transaction isolation level; one of
     <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
     <code>Connection.TRANSACTION_READ_COMMITTED</code>,
     <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
     <code>Connection.TRANSACTION_SERIALIZABLE</code>
@exception SQLException if a database access error occurs
@see #getTransactionIsolation
"
      end

      operation 10324482 "getTypeMap"
	public return_type class_ref 130178 // Map
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Map</code> object associated with this
<code>RowSet</code> object, which specifies the custom mapping
of SQL user-defined types, if any.  The default is for the
type map to be empty.

@return a <code>java.util.Map</code> object containing the names of
        SQL user-defined types and the Java classes to which they are
        to be mapped

@exception SQLException if a database access error occurs
@see #setTypeMap
"
      end

      operation 10324610 "setTypeMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Installs the given <code>java.util.Map</code> object as the default
type map for this <code>RowSet</code> object. This type map will be
used unless another type map is supplied as a method parameter.

@param map  a <code>java.util.Map</code> object containing the names of
        SQL user-defined types and the Java classes to which they are
        to be mapped
@exception SQLException if a database access error occurs
@see #getTypeMap
"
      end

      operation 10324738 "getCommand"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 The following properties may be used to create a Statement.
-----------------------------------------------------------------------

Retrieves this <code>RowSet</code> object's command property.

The command property contains a command string, which must be an SQL
query, that can be executed to fill the rowset with data.
The default value is <code>null</code>.

@return the command string; may be <code>null</code>
@see #setCommand
"
      end

      operation 10324866 "setCommand"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cmd" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>RowSet</code> object's command property to the given
SQL query.

This property is optional
when a rowset gets its data from a data source that does not support
commands, such as a spreadsheet.

@param cmd the SQL query that will be used to get the data for this
       <code>RowSet</code> object; may be <code>null</code>
@exception SQLException if a database access error occurs
@see #getCommand
"
      end

      operation 10324994 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>RowSet</code> object is read-only.
If updates are possible, the default is for a rowset to be
updatable.
<P>
Attempts to update a read-only rowset will result in an
<code>SQLException</code> being thrown.

@return <code>true</code> if this <code>RowSet</code> object is
        read-only; <code>false</code> if it is updatable
@see #setReadOnly
"
      end

      operation 10325122 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether this <code>RowSet</code> object is read-only to the
given <code>boolean</code>.

@param value <code>true</code> if read-only; <code>false</code> if
       updatable
@exception SQLException if a database access error occurs
@see #isReadOnly
"
      end

      operation 10325250 "getMaxFieldSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of bytes that may be returned
for certain column values.
This limit applies only to <code>BINARY</code>,
<code>VARBINARY</code>, <code>LONGVARBINARYBINARY</code>, <code>CHAR</code>,
<code>VARCHAR</code>, <code>LONGVARCHAR</code>, <code>NCHAR</code>
and <code>NVARCHAR</code> columns.
If the limit is exceeded, the excess data is silently discarded.

@return the current maximum column size limit; zero means that there
         is no limit
@exception SQLException if a database access error occurs
@see #setMaxFieldSize
"
      end

      operation 10325378 "setMaxFieldSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of bytes that can be returned for a column
value to the given number of bytes.
This limit applies only to <code>BINARY</code>,
<code>VARBINARY</code>, <code>LONGVARBINARYBINARY</code>, <code>CHAR</code>,
<code>VARCHAR</code>, <code>LONGVARCHAR</code>, <code>NCHAR</code>
and <code>NVARCHAR</code> columns.
If the limit is exceeded, the excess data is silently discarded.
For maximum portability, use values greater than 256.

@param max the new max column size limit in bytes; zero means unlimited
@exception SQLException if a database access error occurs
@see #getMaxFieldSize
"
      end

      operation 10325506 "getMaxRows"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of rows that this <code>RowSet</code>
object can contain.
If the limit is exceeded, the excess rows are silently dropped.

@return the current maximum number of rows that this <code>RowSet</code>
        object can contain; zero means unlimited
@exception SQLException if a database access error occurs
@see #setMaxRows
"
      end

      operation 10325634 "setMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of rows that this <code>RowSet</code>
object can contain to the specified number.
If the limit is exceeded, the excess rows are silently dropped.

@param max the new maximum number of rows; zero means unlimited
@exception SQLException if a database access error occurs
@see #getMaxRows
"
      end

      operation 10325762 "getEscapeProcessing"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether escape processing is enabled for this
<code>RowSet</code> object.
If escape scanning is enabled, which is the default, the driver will do
escape substitution before sending an SQL statement to the database.

@return <code>true</code> if escape processing is enabled;
        <code>false</code> if it is disabled
@exception SQLException if a database access error occurs
@see #setEscapeProcessing
"
      end

      operation 10325890 "setEscapeProcessing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets escape processing for this <code>RowSet</code> object on or
off. If escape scanning is on (the default), the driver will do
escape substitution before sending an SQL statement to the database.

@param enable <code>true</code> to enable escape processing;
       <code>false</code> to disable it
@exception SQLException if a database access error occurs
@see #getEscapeProcessing
"
      end

      operation 10326018 "getQueryTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of seconds the driver will wait for
a statement to execute.
If this limit is exceeded, an <code>SQLException</code> is thrown.

@return the current query timeout limit in seconds; zero means
         unlimited
@exception SQLException if a database access error occurs
@see #setQueryTimeout
"
      end

      operation 10326146 "setQueryTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum time the driver will wait for
a statement to execute to the given number of seconds.
If this limit is exceeded, an <code>SQLException</code> is thrown.

@param seconds the new query timeout limit in seconds; zero means
       that there is no limit
@exception SQLException if a database access error occurs
@see #getQueryTimeout
"
      end

      operation 10326274 "setType"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type of this <code>RowSet</code> object to the given type.
This method is used to change the type of a rowset, which is by
default read-only and non-scrollable.

@param type one of the <code>ResultSet</code> constants specifying a type:
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@exception SQLException if a database access error occurs
@see java.sql.ResultSet#getType
"
      end

      operation 10326402 "setConcurrency"
	public explicit_return_type "void"
	nparams 1
	  param in name "concurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the concurrency of this <code>RowSet</code> object to the given
concurrency level. This method is used to change the concurrency level
of a rowset, which is by default <code>ResultSet.CONCUR_READ_ONLY</code>

@param concurrency one of the <code>ResultSet</code> constants specifying a
       concurrency level:  <code>ResultSet.CONCUR_READ_ONLY</code> or
       <code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException if a database access error occurs
@see ResultSet#getConcurrency
"
      end

      operation 10326530 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 Parameters
-----------------------------------------------------------------------

The <code>RowSet</code> setter methods are used to set any input parameters
needed by the <code>RowSet</code> object's command.
Parameters are set at run time, as opposed to design time.


Sets the designated parameter in this <code>RowSet</code> object's SQL
command to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param sqlType a SQL type code defined by <code>java.sql.Types</code>
@exception SQLException if a database access error occurs
"
      end

      operation 10326658 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterName the name of the parameter
@param sqlType the SQL type code defined in <code>java.sql.Types</code>
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10326786 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "paramIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's SQL
command to SQL <code>NULL</code>. This version of the method <code>setNull</code>
should  be used for SQL user-defined types (UDTs) and <code>REF</code> type
parameters.  Examples of UDTs include: <code>STRUCT</code>, <code>DISTINCT</code>,
<code>JAVA_OBJECT</code>, and named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully qualified SQL type name when specifying
a NULL UDT or <code>REF</code> parameter.  In the case of a UDT,
the name is the type name of the parameter itself.  For a <code>REF</code>
parameter, the name is the type name of the referenced type.  If
a JDBC driver does not need the type code or type name information,
it may ignore it.

Although it is intended for UDT and <code>REF</code> parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or <code>REF</code> type,
the typeName parameter is ignored.


@param paramIndex the first parameter is 1, the second is 2, ...
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully qualified name of an SQL UDT or the type
       name of the SQL structured type being referenced by a <code>REF</code>
       type; ignored if the parameter is not a UDT or <code>REF</code> type
@exception SQLException if a database access error occurs
"
      end

      operation 10326914 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.
This version of the method <code>setNull</code> should
be used for user-defined types and REF type parameters.  Examples
of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully-qualified SQL type name when specifying
a NULL user-defined or REF parameter.  In the case of a user-defined type
the name is the type name of the parameter itself.  For a REF
parameter, the name is the type name of the referenced type.  If
a JDBC driver does not need the type code or type name information,
it may ignore it.

Although it is intended for user-defined and Ref parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or REF type, the given
typeName is ignored.


@param parameterName the name of the parameter
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully-qualified name of an SQL user-defined type;
       ignored if the parameter is not a user-defined type or
       SQL <code>REF</code> value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10327042 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>boolean</code> value. The driver converts this to
an SQL <code>BIT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10327170 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>boolean</code> value.
The driver converts this
to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@see #getBoolean
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10327298 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>byte</code> value. The driver converts this to
an SQL <code>TINYINT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10327426 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>byte</code> value.
The driver converts this
to an SQL <code>TINYINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getByte
@since 1.4
"
      end

      operation 10327554 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>short</code> value. The driver converts this to
an SQL <code>SMALLINT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10327682 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>short</code> value.
The driver converts this
to an SQL <code>SMALLINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getShort
@since 1.4
"
      end

      operation 10327810 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>int</code> value. The driver converts this to
an SQL <code>INTEGER</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10327938 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>int</code> value.
The driver converts this
to an SQL <code>INTEGER</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getInt
@since 1.4
"
      end

      operation 10328066 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>long</code> value. The driver converts this to
an SQL <code>BIGINT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10328194 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>long</code> value.
The driver converts this
to an SQL <code>BIGINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getLong
@since 1.4
"
      end

      operation 10328322 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>float</code> value. The driver converts this to
an SQL <code>REAL</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10328450 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>float</code> value.
The driver converts this
to an SQL <code>FLOAT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getFloat
@since 1.4
"
      end

      operation 10328578 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>double</code> value. The driver converts this to
an SQL <code>DOUBLE</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10328706 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>double</code> value.
The driver converts this
to an SQL <code>DOUBLE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getDouble
@since 1.4
"
      end

      operation 10328834 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.math.BigDeciaml</code> value.
The driver converts this to
an SQL <code>NUMERIC</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10328962 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.math.BigDecimal</code> value.
The driver converts this to an SQL <code>NUMERIC</code> value when
it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getBigDecimal
@since 1.4
"
      end

      operation 10329090 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>String</code> value. Before sending it to the
database, the driver converts this to an SQL <code>VARCHAR</code> or
<code>LONGVARCHAR</code> value, depending on the argument's size relative
to the driver's limits on <code>VARCHAR</code> values.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10329218 "setString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>String</code> value.
The driver converts this
to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>VARCHAR</code> values)
when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getString
@since 1.4
"
      end

      operation 10329346 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java array of <code>byte</code> values. Before sending it to the
database, the driver converts this to an SQL <code>VARBINARY</code> or
<code>LONGVARBINARY</code> value, depending on the argument's size relative
to the driver's limits on <code>VARBINARY</code> values.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10329474 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java array of bytes.
The driver converts this to an SQL <code>VARBINARY</code> or
<code>LONGVARBINARY</code> (depending on the argument's size relative
to the driver's limits on <code>VARBINARY</code> values) when it sends
it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getBytes
@since 1.4
"
      end

      operation 10329602 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.sql.Date</code> value. The driver converts this to
an SQL <code>DATE</code> value before sending it to the database, using the
default <code>java.util.Calendar</code> to calculate the date.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10329730 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.sql.Time</code> value. The driver converts this to
an SQL <code>TIME</code> value before sending it to the database, using the
default <code>java.util.Calendar</code> to calculate it.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10329858 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.sql.Timestamp</code> value. The driver converts this to
an SQL <code>TIMESTAMP</code> value before sending it to the database, using the
default <code>java.util.Calendar</code> to calculate it.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10329986 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
The driver
converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTimestamp
@since 1.4
"
      end

      operation 10330114 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.io.InputStream</code> value.
It may be more practical to send a very large ASCII value via a
<code>java.io.InputStream</code> rather than as a <code>LONGVARCHAR</code>
parameter. The driver will read the data from the stream
as needed until it reaches end-of-file.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream
@exception SQLException if a database access error occurs
"
      end

      operation 10330242 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10330370 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.io.InputStream</code> value.
It may be more practical to send a very large binary value via a
<code>java.io.InputStream</code> rather than as a <code>LONGVARBINARY</code>
parameter. The driver will read the data from the stream
as needed until it reaches end-of-file.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream
@exception SQLException if a database access error occurs
"
      end

      operation 10330498 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the stream
as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10330626 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.io.Reader</code> value.
It may be more practical to send a very large UNICODE value via a
<code>java.io.Reader</code> rather than as a <code>LONGVARCHAR</code>
parameter. The driver will read the data from the stream
as needed until it reaches end-of-file.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>Reader</code> object that contains the UNICODE data
       to be set
@param length the number of characters in the stream
@exception SQLException if a database access error occurs
"
      end

      operation 10330754 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that
       contains the UNICODE data used as the designated parameter
@param length the number of characters in the stream
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10330882 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given input stream.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setAsciiStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10331010 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setAsciiStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10331138 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given input stream.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBinaryStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10331266 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBinaryStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10331394 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>Reader</code>
object.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setCharacterStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10331522 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setCharacterStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10331650 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNCharacterStream</code> which takes a length parameter.

@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; if a database access error occurs; or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10331778 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scaleOrLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given Java <code>Object</code>.  For integral values, the
<code>java.lang</code> equivalent objects should be used (for example,
an instance of the class <code>Integer</code> for an <code>int</code>).

If the second argument is an <code>InputStream</code> then the stream must contain
the number of bytes specified by scaleOrLength.  If the second argument is a
<code>Reader</code> then the reader must contain the number of characters specified    * by scaleOrLength. If these conditions are not true the driver will generate a
<code>SQLException</code> when the prepared statement is executed.

<p>The given Java object will be converted to the targetSqlType
before being sent to the database.
<P>
If the object is of a class implementing <code>SQLData</code>,
the rowset should call the method <code>SQLData.writeSQL</code>
to write the object to an <code>SQLOutput</code> data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.


<p>Note that this method may be used to pass datatabase-specific
abstract data types.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
       to be sent to the database. The scale argument may further qualify this
       type.
@param scaleOrLength for <code>java.sql.Types.DECIMAL</code>
         or <code>java.sql.Types.NUMERIC types</code>,
         this is the number of digits after the decimal point. For
         Java Object types <code>InputStream</code> and <code>Reader</code>,
         this is the length
         of the data in the stream or reader.  For all other types,
         this value will be ignored.
@exception SQLException if a database access error occurs
@see java.sql.Types
"
      end

      operation 10331906 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object. The second
argument must be an object type; for integral values, the
<code>java.lang</code> equivalent objects should be used.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the
interface <code>SQLData</code>),
the JDBC driver should call the method <code>SQLData.writeSQL</code> to write it
to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
Note that this method may be used to pass datatabase-
specific abstract data types.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
sent to the database. The scale argument may further qualify this type.
@param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
         this is the number of digits after the decimal point.  For all other
         types, this value will be ignored.
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
@see Types
@see #getObject
@since 1.4
"
      end

      operation 10332034 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with a Java <code>Object</code>.  For integral values, the
<code>java.lang</code> equivalent objects should be used.
This method is like <code>setObject</code> above, but the scale used is the scale
of the second parameter.  Scalar values have a scale of zero.  Literal
values have the scale present in the literal.
<P>
Even though it is supported, it is not recommended that this method
be called with floating point input values.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
       to be sent to the database
@exception SQLException if a database access error occurs
"
      end

      operation 10332162 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.
This method is like the method <code>setObject</code>
above, except that it assumes a scale of zero.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
                     sent to the database
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
@see #getObject
@since 1.4
"
      end

      operation 10332290 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.
The second parameter must be of type <code>Object</code>; therefore, the
<code>java.lang</code> equivalent objects should be used for built-in types.

<p>The JDBC specification specifies a standard mapping from
Java <code>Object</code> types to SQL types.  The given argument
will be converted to the corresponding SQL type before being
sent to the database.

<p>Note that this method may be used to pass datatabase-
specific abstract data types, by using a driver-specific Java
type.

If the object is of a class implementing the interface <code>SQLData</code>,
the JDBC driver should call the method <code>SQLData.writeSQL</code>
to write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
This method throws an exception if there is an ambiguity, for example, if the
object is of a class implementing more than one of the interfaces named above.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@exception SQLException if a database access error occurs,
this method is called on a closed <code>CallableStatement</code> or if the given
           <code>Object</code> parameter is ambiguous
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getObject
@since 1.4
"
      end

      operation 10332418 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with a Java <code>Object</code>.  For integral values, the
<code>java.lang</code> equivalent objects should be used.

<p>The JDBC specification provides a standard mapping from
Java Object types to SQL types.  The driver will convert the
given Java object to its standard SQL mapping before sending it
to the database.

<p>Note that this method may be used to pass datatabase-specific
abstract data types by using a driver-specific Java type.

If the object is of a class implementing <code>SQLData</code>,
the rowset should call the method <code>SQLData.writeSQL</code>
to write the object to an <code>SQLOutput</code> data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.

<P>
An exception is thrown if there is an ambiguity, for example, if the
object is of a class implementing more than one of these interfaces.

@param parameterIndex The first parameter is 1, the second is 2, ...
@param x The object containing the input parameter value
@exception SQLException if a database access error occurs
"
      end

      operation 10332546 "setRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 1038850 // Ref
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Ref</code> value.  The driver will convert this
to the appropriate <code>REF(&lt;structured-type&gt;)</code> value.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing data of an SQL <code>REF</code> type
@exception SQLException if a database access error occurs
"
      end

      operation 10332674 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Blob</code> value.  The driver will convert this
to the <code>BLOB</code> value that the <code>Blob</code> object
represents before sending it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing a BLOB
@exception SQLException if a database access error occurs
"
      end

      operation 10332802 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.  The inputstream must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
@param parameterIndex index of the first parameter is 1,
the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@throws SQLException if a database access error occurs,
this method is called on a closed <code>PreparedStatement</code>,
if parameterIndex does not correspond
to a parameter marker in the SQL statement,  if the length specified
is less than zero or if the number of bytes in the inputstream does not match
the specified length.
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10332930 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.
This method differs from the <code>setBinaryStream (int, InputStream)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBlob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1,
the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@throws SQLException if a database access error occurs,
this method is called on a closed <code>PreparedStatement</code> or
if parameterIndex does not correspond
to a parameter marker in the SQL statement,
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10333058 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.  The <code>inputstream</code> must contain  the number
of characters specified by length, otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

@param parameterName the name of the parameter to be set
the second is 2, ...

@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@throws SQLException  if parameterIndex does not correspond
to a parameter marker in the SQL statement,  or if the length specified
is less than zero; if the number of bytes in the inputstream does not match
the specified length; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.6
"
      end

      operation 10333186 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Blob</code> object.
The driver converts this to an SQL <code>BLOB</code> value when it
sends it to the database.

@param parameterName the name of the parameter
@param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 10333314 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.
This method differs from the <code>setBinaryStream (int, InputStream)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBlob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param inputStream An object that contains the data to set the parameter
value to.
@throws SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10333442 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Clob</code> value.  The driver will convert this
to the <code>CLOB</code> value that the <code>Clob</code> object
represents before sending it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing a CLOB
@exception SQLException if a database access error occurs
"
      end

      operation 10333570 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if a database access error occurs, this method is called on
a closed <code>PreparedStatement</code>, if parameterIndex does not correspond to a parameter
marker in the SQL statement, or if the length specified is less than zero.

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10333698 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setClob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if a database access error occurs, this method is called on
a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
marker in the SQL statement

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10333826 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
@param parameterName the name of the parameter to be set
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the length specified is less than zero;
a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.6
"
      end

      operation 10333954 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Clob</code> object.
The driver converts this to an SQL <code>CLOB</code> value when it
sends it to the database.

@param parameterName the name of the parameter
@param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 10334082 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setClob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if a database access error occurs or this method is called on
a closed <code>CallableStatement</code>

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10334210 "setArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 1037058 // Array
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Array</code> value.  The driver will convert this
to the <code>ARRAY</code> value that the <code>Array</code> object
represents before sending it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing an SQL array
@exception SQLException if a database access error occurs
"
      end

      operation 10334338 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038466 // Date
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>java.sql.Date</code> value.  The driver will convert this
to an SQL <code>DATE</code> value, using the given <code>java.util.Calendar</code>
object to calculate the date.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>java.util.Calendar</code> object to use for calculating the date
@exception SQLException if a database access error occurs
"
      end

      operation 10334466 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value
using the default time zone of the virtual machine that is running
the application.
The driver converts this
to an SQL <code>DATE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getDate
@since 1.4
"
      end

      operation 10334594 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038466 // Date
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the date
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getDate
@since 1.4
"
      end

      operation 10334722 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038594 // Time
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>java.sql.Time</code> value.  The driver will convert this
to an SQL <code>TIME</code> value, using the given <code>java.util.Calendar</code>
object to calculate it, before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>java.util.Calendar</code> object to use for calculating the time
@exception SQLException if a database access error occurs
"
      end

      operation 10334850 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value.
The driver converts this
to an SQL <code>TIME</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTime
@since 1.4
"
      end

      operation 10334978 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038594 // Time
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the time
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTime
@since 1.4
"
      end

      operation 10335106 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038722 // Timestamp
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>java.sql.Timestamp</code> value.  The driver will
convert this to an SQL <code>TIMESTAMP</code> value, using the given
<code>java.util.Calendar</code> object to calculate it, before sending it to the
database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>java.util.Calendar</code> object to use for calculating the
       timestamp
@exception SQLException if a database access error occurs
"
      end

      operation 10335234 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038722 // Timestamp
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the timestamp
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getTimestamp
@since 1.4
"
      end

      operation 10335362 "clearParameters"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the parameters set for this <code>RowSet</code> object's command.
<P>In general, parameter values remain in force for repeated use of a
<code>RowSet</code> object. Setting a parameter value automatically clears its
previous value.  However, in some cases it is useful to immediately
release the resources used by the current parameter values, which can
be done by calling the method <code>clearParameters</code>.

@exception SQLException if a database access error occurs
"
      end

      operation 10335490 "execute"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------------
 Reading and writing data
---------------------------------------------------------------------

Fills this <code>RowSet</code> object with data.
<P>
The <code>execute</code> method may use the following properties
to create a connection for reading data: url, data source name,
user name, password, transaction isolation, and type map.

The <code>execute</code> method  may use the following properties
to create a statement to execute a command:
command, read only, maximum field size,
maximum rows, escape processing, and query timeout.
<P>
If the required properties have not been set, an exception is
thrown.  If this method is successful, the current contents of the rowset are
discarded and the rowset's metadata is also (re)set.  If there are
outstanding updates, they are ignored.
<P>
If this <code>RowSet</code> object does not maintain a continuous connection
with its source of data, it may use a reader (a <code>RowSetReader</code>
object) to fill itself with data.  In this case, a reader will have been
registered with this <code>RowSet</code> object, and the method
<code>execute</code> will call on the reader's <code>readData</code>
method as part of its implementation.

@exception SQLException if a database access error occurs or any of the
           properties necessary for making a connection and creating
           a statement have not been set
"
      end

      operation 10335618 "addRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1257346 // RowSetListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------------------------------------------------
 Events
--------------------------------------------------------------------

Registers the given listener so that it will be notified of events
that occur on this <code>RowSet</code> object.

@param listener a component that has implemented the <code>RowSetListener</code>
       interface and wants to be notified when events occur on this
       <code>RowSet</code> object
@see #removeRowSetListener
"
      end

      operation 10335746 "removeRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1257346 // RowSetListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified listener from the list of components that will be
notified when an event occurs on this <code>RowSet</code> object.

@param listener a component that has been registered as a listener for this
       <code>RowSet</code> object
@see #addRowSetListener
"
      end

      operation 10335874 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an
SQL <code>XML</code> value when it sends it to the database.
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value
@throws SQLException if a database access error occurs, this method
 is called on a closed result set,
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed
for the <code>SQLXML</code> object  or
 if there is an error processing the XML value.  The <code>getCause</code> method
 of the exception may provide a more detailed exception, for example, if the
 stream does not contain valid XML.
@since 1.6
"
      end

      operation 10336002 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an
<code>SQL XML</code> value when it sends it to the database.
@param parameterName the name of the parameter
@param xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
@throws SQLException if a database access error occurs, this method
 is called on a closed result set,
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed
for the <code>SQLXML</code> object  or
 if there is an error processing the XML value.  The <code>getCause</code> method
 of the exception may provide a more detailed exception, for example, if the
 stream does not contain valid XML.
@since 1.6
"
      end

      operation 10336130 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
driver converts this to a SQL <code>ROWID</code> value when it sends it
to the database

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@throws SQLException if a database access error occurs

@since 1.6
"
      end

      operation 10336258 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
driver converts this to a SQL <code>ROWID</code> when it sends it to the
database.

@param parameterName the name of the parameter
@param x the parameter value
@throws SQLException if a database access error occurs
@since 1.6
"
      end

      operation 10336386 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>String</code> object.
The driver converts this to a SQL <code>NCHAR</code> or
<code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>NVARCHAR</code> values)
when it sends it to the database.

@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; or if a database access error occurs
@since 1.6
"
      end

      operation 10336514 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>String</code> object.
The driver converts this to a SQL <code>NCHAR</code> or
<code>NVARCHAR</code> or <code>LONGNVARCHAR</code>
@param parameterName the name of the column to be set
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; or if a database access error occurs
@since 1.6
"
      end

      operation 10336642 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.
@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@param length the number of characters in the parameter data.
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; or if a database access error occurs
@since 1.6
"
      end

      operation 10336770 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.
@param parameterName the name of the column to be set
@param value the parameter value
@param length the number of characters in the parameter data.
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; or if a database access error occurs
@since 1.6
"
      end

      operation 10336898 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNCharacterStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; if a database access error occurs; or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10337026 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>java.sql.NClob</code> object. The object
implements the <code>java.sql.NClob</code> interface. This <code>NClob</code>
object maps to a SQL <code>NCLOB</code>.
@param parameterName the name of the column to be set
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; or if a database access error occurs
@since 1.6
"
      end

      operation 10337154 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>

@param parameterName the name of the parameter to be set
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the length specified is less than zero;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 10337282 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNClob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10337410 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the length specified is less than zero;
if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10337538 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this to a
SQL <code>NCLOB</code> value when it sends it to the database.
@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; or if a database access error occurs
@since 1.6
"
      end

      operation 10337666 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNClob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement;
if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10337794 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.net.URL</code> value.
The driver converts this to an SQL <code>DATALINK</code> value
when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the <code>java.net.URL</code> object to be set
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.4
"
      end
    end

    class 1257346 "RowSetListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface that must be implemented by a
component that wants to be notified when a significant
event happens in the life of a <code>RowSet</code> object.
A component becomes a listener by being registered with a
<code>RowSet</code> object via the method <code>RowSet.addRowSetListener</code>.
How a registered component implements this interface determines what it does
when it is notified of an event.

@since 1.4
"
      classrelation 4044546 // <generalisation>
	relation 4044546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4044546 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 10338690 "rowSetChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1257474 // RowSetEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies registered listeners that a <code>RowSet</code> object
in the given <code>RowSetEvent</code> object has changed its entire contents.
<P>
The source of the event can be retrieved with the method
<code>event.getSource</code>.

@param event a <code>RowSetEvent</code> object that contains
        the <code>RowSet</code> object that is the source of the event
"
      end

      operation 10338818 "rowChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1257474 // RowSetEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies registered listeners that a <code>RowSet</code> object
has had a change in one of its rows.
<P>
The source of the event can be retrieved with the method
<code>event.getSource</code>.

@param event a <code>RowSetEvent</code> object that contains
        the <code>RowSet</code> object that is the source of the event
"
      end

      operation 10338946 "cursorMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1257474 // RowSetEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies registered listeners that a <code>RowSet</code> object's
cursor has moved.
<P>
The source of the event can be retrieved with the method
<code>event.getSource</code>.

@param event a <code>RowSetEvent</code> object that contains
        the <code>RowSet</code> object that is the source of the event
"
      end
    end

    class 1257474 "RowSetEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An <code>Event</code> object generated when an event occurs to a
<code>RowSet</code> object.  A <code>RowSetEvent</code> object is
generated when a single row in a rowset is changed, the whole rowset
is changed, or the rowset cursor moves.
<P>
When an event occurs on a <code>RowSet</code> object, one of the
<code>RowSetListener</code> methods will be sent to all registered
listeners to notify them of the event.  An <code>Event</code> object
is supplied to the <code>RowSetListener</code> method so that the
listener can use it to find out which <code>RowSet</code> object is
the source of the event.

@since 1.4
"
      classrelation 4044418 // <generalisation>
	relation 4044418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4044418 // <generalisation>
	  b parent class_ref 525698 // EventObject
      end

      operation 10337922 "RowSetEvent"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 1257218 // RowSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RowSetEvent</code> object initialized with the
given <code>RowSet</code> object.

@param source the <code>RowSet</code> object whose data has changed or
       whose cursor has moved
@throws IllegalArgumentException if <code>source</code> is null.
"
      end

      attribute 2367746 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -1875450876546332005L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Private serial version unique ID to ensure serialization
compatibility.

"
      end
    end

    class 1257602 "RowSetInternal"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface that a <code>RowSet</code> object implements in order to
present itself to a <code>RowSetReader</code> or <code>RowSetWriter</code>
object. The <code>RowSetInternal</code> interface contains
methods that let the reader or writer access and modify the internal
state of the rowset.

@since 1.4
"
      operation 10338050 "getParams"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the parameters that have been set for this
<code>RowSet</code> object's command.

@return an array of the current parameter values for this <code>RowSet</code>
        object's command
@exception SQLException if a database access error occurs
"
      end

      operation 10338178 "getConnection"
	public return_type class_ref 1038338 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Connection</code> object that was passed to this
<code>RowSet</code> object.

@return the <code>Connection</code> object passed to the rowset
     or <code>null</code> if none was passed
@exception SQLException if a database access error occurs
"
      end

      operation 10338306 "setMetaData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "md" type class_ref 1257730 // RowSetMetaData
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given <code>RowSetMetaData</code> object as the
<code>RowSetMetaData</code> object for this <code>RowSet</code>
object. The <code>RowSetReader</code> object associated with the rowset
will use <code>RowSetMetaData</code> methods to set the values giving
information about the rowset's columns.

@param md the <code>RowSetMetaData</code> object that will be set with
       information about the rowset's columns

@exception SQLException if a database access error occurs
"
      end

      operation 10338434 "getOriginal"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>ResultSet</code> object containing the original
value of this <code>RowSet</code> object.
<P>
The cursor is positioned before the first row in the result set.
Only rows contained in the result set returned by the method
<code>getOriginal</code> are said to have an original value.

@return the original value of the rowset
@exception SQLException if a database access error occurs
"
      end

      operation 10338562 "getOriginalRow"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>ResultSet</code> object containing the original value
of the current row only.  If the current row has no original value,
an empty result set is returned. If there is no current row,
an exception is thrown.

@return the original value of the current row as a <code>ResultSet</code>
         object
@exception SQLException if a database access error occurs or this method
          is called while the cursor is on the insert row, before the
          first row, or after the last row
"
      end
    end

    class 1257730 "RowSetMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that contains information about the columns in a
<code>RowSet</code> object.  This interface is
an extension of the <code>ResultSetMetaData</code> interface with
methods for setting the values in a <code>RowSetMetaData</code> object.
When a <code>RowSetReader</code> object reads data into a <code>RowSet</code>
object, it creates a <code>RowSetMetaData</code> object and initializes it
using the methods in the <code>RowSetMetaData</code> interface.  Then the
reader passes the <code>RowSetMetaData</code> object to the rowset.
<P>
The methods in this interface are invoked internally when an application
calls the method <code>RowSet.execute</code>; an application
programmer would not use them directly.

@since 1.4
"
      classrelation 4044674 // <generalisation>
	relation 4044674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4044674 // <generalisation>
	  b parent class_ref 1039106 // ResultSetMetaData
      end

      operation 10339074 "setColumnCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of columns in the <code>RowSet</code> object to
the given number.

@param columnCount the number of columns in the <code>RowSet</code> object
@exception SQLException if a database access error occurs
"
      end

      operation 10339202 "setAutoIncrement"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is automatically numbered,
The default is for a <code>RowSet</code> object's
columns not to be automatically numbered.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is automatically
                numbered; <code>false</code> if it is not

@exception SQLException if a database access error occurs
"
      end

      operation 10339330 "setCaseSensitive"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is case sensitive.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is case sensitive;
                <code>false</code> if it is not

@exception SQLException if a database access error occurs
"
      end

      operation 10339458 "setSearchable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column can be used in a where clause.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column can be used in a
                <code>WHERE</code> clause; <code>false</code> if it cannot

@exception SQLException if a database access error occurs
"
      end

      operation 10339586 "setCurrency"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is a cash value.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is a cash value;
                <code>false</code> if it is not

@exception SQLException if a database access error occurs
"
      end

      operation 10339714 "setNullable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "property" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column's value can be set to
<code>NULL</code>.
The default is <code>ResultSetMetaData.columnNullableUnknown</code>

@param columnIndex the first column is 1, the second is 2, ...
@param property one of the following constants:
                <code>ResultSetMetaData.columnNoNulls</code>,
                <code>ResultSetMetaData.columnNullable</code>, or
                <code>ResultSetMetaData.columnNullableUnknown</code>

@exception SQLException if a database access error occurs
"
      end

      operation 10339842 "setSigned"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is a signed number.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is a signed number;
                <code>false</code> if it is not

@exception SQLException if a database access error occurs
"
      end

      operation 10339970 "setColumnDisplaySize"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's normal maximum width in chars to the
given <code>int</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param size the normal maximum number of characters for
          the designated column

@exception SQLException if a database access error occurs
"
      end

      operation 10340098 "setColumnLabel"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "label" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the suggested column title for use in printouts and
displays, if any, to the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param label the column title
@exception SQLException if a database access error occurs
"
      end

      operation 10340226 "setColumnName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "columnName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the designated column to the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param columnName the designated column's name
@exception SQLException if a database access error occurs
"
      end

      operation 10340354 "setSchemaName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "schemaName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the designated column's table's schema, if any, to
the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param schemaName the schema name
@exception SQLException if a database access error occurs
"
      end

      operation 10340482 "setPrecision"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "precision" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's number of decimal digits to the
given <code>int</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param precision the total number of decimal digits
@exception SQLException if a database access error occurs
"
      end

      operation 10340610 "setScale"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's number of digits to the
right of the decimal point to the given <code>int</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param scale the number of digits to right of decimal point
@exception SQLException if a database access error occurs
"
      end

      operation 10340738 "setTableName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "tableName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's table name, if any, to the given
<code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param tableName the column's table name
@exception SQLException if a database access error occurs
"
      end

      operation 10340866 "setCatalogName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "catalogName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's table's catalog name, if any, to the given
<code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param catalogName the column's catalog name
@exception SQLException if a database access error occurs
"
      end

      operation 10340994 "setColumnType"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "SQLType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's SQL type to the one given.

@param columnIndex the first column is 1, the second is 2, ...
@param SQLType the column's SQL type
@exception SQLException if a database access error occurs
@see Types
"
      end

      operation 10341122 "setColumnTypeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's type name that is specific to the
data source, if any, to the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param typeName data source specific type name.
@exception SQLException if a database access error occurs
"
      end
    end

    class 1257858 "RowSetReader"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The facility that a disconnected <code>RowSet</code> object calls on
to populate itself with rows of data. A reader (an object implementing the
<code>RowSetReader</code> interface) may be registered with
a <code>RowSet</code> object that supports the reader/writer paradigm.
When the <code>RowSet</code> object's <code>execute</code> method is
called, it in turn calls the reader's <code>readData</code> method.

@since 1.4
"
      operation 10341250 "readData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "caller" type class_ref 1257602 // RowSetInternal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the new contents of the calling <code>RowSet</code> object.
In order to call this method, a <code>RowSet</code>
object must have implemented the <code>RowSetInternal</code> interface
and registered this <code>RowSetReader</code> object as its reader.
The <code>readData</code>  method is invoked internally
by the <code>RowSet.execute</code> method for rowsets that support the
reader/writer paradigm.

<P>The <code>readData</code> method adds rows to the caller.
It can be implemented in a wide variety of ways and can even
populate the caller with rows from a nonrelational data source.
In general, a reader may invoke any of the rowset's methods,
with one exception. Calling the method <code>execute</code> will
cause an <code>SQLException</code> to be thrown
because <code>execute</code> may not be called recursively.  Also,
when a reader invokes <code>RowSet</code> methods, no listeners
are notified; that is, no <code>RowSetEvent</code> objects are
generated and no <code>RowSetListener</code> methods are invoked.
This is true because listeners are already being notified by the method
<code>execute</code>.

@param caller the <code>RowSet</code> object (1) that has implemented the
        <code>RowSetInternal</code> interface, (2) with which this reader is
       registered, and (3) whose <code>execute</code> method called this reader
@exception SQLException if a database access error occurs or this method
           invokes the <code>RowSet.execute</code> method
"
      end
    end

    class 1257986 "RowSetWriter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that implements the <code>RowSetWriter</code> interface,
called a <i>writer</i>. A writer may be registered with a <code>RowSet</code>
object that supports the reader/writer paradigm.
<P>
If a disconnected <code>RowSet</code> object modifies some of its data,
and it has a writer associated with it, it may be implemented so that it
calls on the writer's <code>writeData</code> method internally
to write the updates back to the data source. In order to do this, the writer
must first establish a connection with the rowset's data source.
<P>
If the data to be updated has already been changed in the data source, there
is a conflict, in which case the writer will not write
the changes to the data source.  The algorithm the writer uses for preventing
or limiting conflicts depends entirely on its implementation.

@since 1.4
"
      operation 10341378 "writeData"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "caller" type class_ref 1257602 // RowSetInternal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the changes in this <code>RowSetWriter</code> object's
rowset back to the data source from which it got its data.

@param caller the <code>RowSet</code> object (1) that has implemented the
        <code>RowSetInternal</code> interface, (2) with which this writer is
       registered, and (3) that called this method internally
@return <code>true</code> if the modified data was written; <code>false</code>
         if not, which will be the case if there is a conflict
@exception SQLException if a database access error occurs
"
      end
    end

    class 1258114 "StatementEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>StatementEvent</code> is sent to all <code>StatementEventListener</code>s which were
registered with a <code>PooledConnection</code>. This occurs when the driver determines that a
<code>PreparedStatement</code> that is associated with the <code>PooledConnection</code> has been closed or the driver determines
is invalid.
<p>
@since 1.6
"
      classrelation 4044802 // <generalisation>
	relation 4044802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4044802 // <generalisation>
	  b parent class_ref 525698 // EventObject
      end

      attribute 2367874 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -8089573731826608315L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 4044930 // exception (<unidirectional association>)
	relation 4044930 --->
	  a role_name "exception" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4044930 // exception (<unidirectional association>)
	  b parent class_ref 1037186 // SQLException
      end

      classrelation 4045058 // statement (<unidirectional association>)
	relation 4045058 --->
	  a role_name "statement" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4045058 // statement (<unidirectional association>)
	  b parent class_ref 1037826 // PreparedStatement
      end

      operation 10341506 "StatementEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "con" type class_ref 1256578 // PooledConnection
	  param inout name "statement" type class_ref 1037826 // PreparedStatement
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>StatementEvent</code> with the specified <code>PooledConnection</code> and
<code>PreparedStatement</code>.  The <code>SQLException</code> contained in the event defaults to
null.
<p>
@param con                   The <code>PooledConnection</code> that the closed or invalid
<code>PreparedStatement</code>is associated with.
@param statement             The <code>PreparedStatement</code> that is being closed or is invalid
<p>
@throws IllegalArgumentException if <code>con</code> is null.

@since 1.6
"
      end

      operation 10341634 "StatementEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "con" type class_ref 1256578 // PooledConnection
	  param inout name "statement" type class_ref 1037826 // PreparedStatement
	  param inout name "exception" type class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>StatementEvent</code> with the specified <code>PooledConnection</code>,
<code>PreparedStatement</code> and <code>SQLException</code>
<p>
@param con                   The <code>PooledConnection</code> that the closed or invalid <code>PreparedStatement</code>
is associated with.
@param statement             The <code>PreparedStatement</code> that is being closed or is invalid
@param exception             The <code>SQLException </code>the driver is about to throw to
                                             the application

@throws IllegalArgumentException if <code>con</code> is null.
<p>
@since 1.6
"
      end

      operation 10341762 "getStatement"
	public return_type class_ref 1037826 // PreparedStatement
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>PreparedStatement</code> that is being closed or is invalid
<p>
@return      The <code>PreparedStatement</code> that is being closed or is invalid
<p>
@since 1.6
"
      end

      operation 10341890 "getSQLException"
	public return_type class_ref 1037186 // SQLException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>SQLException</code> the driver is about to throw
<p>
@return      The <code>SQLException</code> the driver is about to throw
<p>
@since 1.6
"
      end
    end

    class 1258242 "XAConnection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that provides support for distributed
transactions.  An <code>XAConnection</code> object  may be enlisted
in a distributed transaction by means of an <code>XAResource</code> object.
A transaction manager, usually part of a middle tier server, manages an
<code>XAConnection</code> object through the <code>XAResource</code> object.
<P>
An application programmer does not use this interface directly; rather,
it is used by a transaction manager working in the middle tier server.

@since 1.4
"
      classrelation 4045314 // <generalisation>
	relation 4045314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4045314 // <generalisation>
	  b parent class_ref 1256578 // PooledConnection
      end

      operation 10342274 "getXAResource"
	public explicit_return_type "javax.transaction.xa.XAResource"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an <code>XAResource</code> object that
the transaction manager will use
to manage this <code>XAConnection</code> object's participation in a
distributed transaction.

@return the <code>XAResource</code> object
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end
    end

    class 1258370 "XADataSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A factory for {@code XAConnection} objects that is used internally.
An object that implements the {@code XADataSource} interface is
typically registered with a naming service that uses the
Java Naming and Directory Interface&trade;
(JNDI).
 <p>
An implementation of {@code XADataSource} must include a public no-arg
constructor.
@since 1.4
"
      classrelation 4045442 // <generalisation>
	relation 4045442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4045442 // <generalisation>
	  b parent class_ref 1256322 // CommonDataSource
      end

      operation 10342402 "getXAConnection"
	public return_type class_ref 1258242 // XAConnection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection that can be
used in a distributed transaction.

@return  an {@code XAConnection} object, which represents a
         physical connection to a data source, that can be used in
         a distributed transaction
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@throws SQLTimeoutException when the driver has determined that the
timeout value specified by the {@code setLoginTimeout} method
has been exceeded and has at least tried to cancel the
current database connection attempt
@since 1.4
"
      end

      operation 10342530 "getXAConnection"
	public return_type class_ref 1258242 // XAConnection
	nparams 2
	  param inout name "user" type class_ref 128130 // String
	  param inout name "password" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection, using the given
user name and password. The connection that is returned is one that
can be used in a distributed transaction.

@param user the database user on whose behalf the connection is being made
@param password the user's password
@return  an {@code XAConnection} object, which represents a
         physical connection to a data source, that can be used in
         a distributed transaction
@exception SQLException if a database access error occurs
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@throws SQLTimeoutException when the driver has determined that the
timeout value specified by the {@code setLoginTimeout} method
has been exceeded and has at least tried to cancel the
current database connection attempt
@since 1.4
"
      end
    end
  end

  deploymentview 175746 "sql"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 916866 "CommonDataSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
import java.io.PrintWriter;
import java.sql.SQLFeatureNotSupportedException;
import java.util.logging.Logger;
${definition}"
      associated_elems
	class_ref 1256322 // CommonDataSource
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 916994 "ConnectionEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_elems
	class_ref 1256450 // ConnectionEvent
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 917122 "ConnectionEventListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1256706 // ConnectionEventListener
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 917250 "ConnectionPoolDataSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_elems
	class_ref 1256834 // ConnectionPoolDataSource
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 917378 "DataSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Wrapper;
${definition}"
      associated_elems
	class_ref 1256962 // DataSource
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 917506 "PooledConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.Connection;
import java.sql.SQLException;
${definition}"
      associated_elems
	class_ref 1256578 // PooledConnection
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 917634 "RowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import java.io.*;
import java.math.*;
import java.util.*;
${definition}"
      associated_elems
	class_ref 1257218 // RowSet
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 917762 "RowSetEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1257474 // RowSetEvent
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 917890 "RowSetInternal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_elems
	class_ref 1257602 // RowSetInternal
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 918018 "RowSetListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1257346 // RowSetListener
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 918146 "RowSetMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_elems
	class_ref 1257730 // RowSetMetaData
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 918274 "RowSetReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_elems
	class_ref 1257858 // RowSetReader
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 918402 "RowSetWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_elems
	class_ref 1257986 // RowSetWriter
      end
      comment "Copyright (c) 2000, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 918530 "StatementEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.EventObject;
${definition}"
      associated_elems
	class_ref 1258114 // StatementEvent
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Created on Apr 28, 2005
"
    end

    artifact 918658 "StatementEventListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1257090 // StatementEventListener
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Created on Apr 28, 2005
"
    end

    artifact 918786 "XAConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_elems
	class_ref 1258242 // XAConnection
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 918914 "XADataSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_elems
	class_ref 1258370 // XADataSource
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 186370 // rowset
end
