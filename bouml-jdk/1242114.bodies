class SimpleScriptContext
!!!10207746.java!!!	SimpleScriptContext()
        engineScope = new SimpleBindings();
        globalScope = null;
        reader = new InputStreamReader(System.in);
        writer = new PrintWriter(System.out , true);
        errorWriter = new PrintWriter(System.err, true);
!!!10207874.java!!!	setBindings(inout bindings : Bindings, in scope : int) : void

        switch (scope) {

            case ENGINE_SCOPE:
                if (bindings == null) {
                    throw new NullPointerException("Engine scope cannot be null.");
                }
                engineScope = bindings;
                break;
            case GLOBAL_SCOPE:
                globalScope = bindings;
                break;
            default:
                throw new IllegalArgumentException("Invalid scope value.");
        }
!!!10208002.java!!!	getAttribute(inout name : String) : Object
        checkName(name);
        if (engineScope.containsKey(name)) {
            return getAttribute(name, ENGINE_SCOPE);
        } else if (globalScope != null && globalScope.containsKey(name)) {
            return getAttribute(name, GLOBAL_SCOPE);
        }

        return null;
!!!10208130.java!!!	getAttribute(inout name : String, in scope : int) : Object
        checkName(name);
        switch (scope) {

            case ENGINE_SCOPE:
                return engineScope.get(name);

            case GLOBAL_SCOPE:
                if (globalScope != null) {
                    return globalScope.get(name);
                }
                return null;

            default:
                throw new IllegalArgumentException("Illegal scope value.");
        }
!!!10208258.java!!!	removeAttribute(inout name : String, in scope : int) : Object
        checkName(name);
        switch (scope) {

            case ENGINE_SCOPE:
                if (getBindings(ENGINE_SCOPE) != null) {
                    return getBindings(ENGINE_SCOPE).remove(name);
                }
                return null;

            case GLOBAL_SCOPE:
                if (getBindings(GLOBAL_SCOPE) != null) {
                    return getBindings(GLOBAL_SCOPE).remove(name);
                }
                return null;

            default:
                throw new IllegalArgumentException("Illegal scope value.");
        }
!!!10208386.java!!!	setAttribute(inout name : String, inout value : Object, in scope : int) : void
        checkName(name);
        switch (scope) {

            case ENGINE_SCOPE:
                engineScope.put(name, value);
                return;

            case GLOBAL_SCOPE:
                if (globalScope != null) {
                    globalScope.put(name, value);
                }
                return;

            default:
                throw new IllegalArgumentException("Illegal scope value.");
        }
!!!10208514.java!!!	getWriter() : Writer
        return writer;
!!!10208642.java!!!	getReader() : Reader
        return reader;
!!!10208770.java!!!	setReader(inout reader : Reader) : void
        this.reader = reader;
!!!10208898.java!!!	setWriter(inout writer : Writer) : void
        this.writer = writer;
!!!10209026.java!!!	getErrorWriter() : Writer
        return errorWriter;
!!!10209154.java!!!	setErrorWriter(inout writer : Writer) : void
        this.errorWriter = writer;
!!!10209282.java!!!	getAttributesScope(inout name : String) : int
        checkName(name);
        if (engineScope.containsKey(name)) {
            return ENGINE_SCOPE;
        } else if (globalScope != null && globalScope.containsKey(name)) {
            return GLOBAL_SCOPE;
        } else {
            return -1;
        }
!!!10209410.java!!!	getBindings(in scope : int) : Bindings
        if (scope == ENGINE_SCOPE) {
            return engineScope;
        } else if (scope == GLOBAL_SCOPE) {
            return globalScope;
        } else {
            throw new IllegalArgumentException("Illegal scope value.");
        }
!!!10209538.java!!!	getScopes() : List
        return scopes;
!!!10209666.java!!!	checkName(inout name : String) : void
        Objects.requireNonNull(name);
        if (name.isEmpty()) {
            throw new IllegalArgumentException("name cannot be empty");
        }
