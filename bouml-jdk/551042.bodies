class LocalVariableInstruction
!!!3418754.java!!!	wide() : boolean
 return n > Constants.MAX_BYTE;
!!!3418882.java!!!	LocalVariableInstruction(in canon_tag : short, in c_tag : short)
    super();
    this.canon_tag = canon_tag;
    this.c_tag     = c_tag;
!!!3419138.java!!!	LocalVariableInstruction(in opcode : short, in c_tag : short, in n : int)
    super(opcode, (short)2);

    this.c_tag = c_tag;
    canon_tag  = opcode;

    setIndex(n);
!!!3419266.java!!!	dump(inout out : DataOutputStream) : void
    if(wide()) // Need WIDE prefix ?
      out.writeByte(Constants.WIDE);

    out.writeByte(opcode);

    if(length > 1) { // Otherwise ILOAD_n, instruction, e.g.
      if(wide())
        out.writeShort(n);
      else
        out.writeByte(n);
    }
!!!3419394.java!!!	toString(inout verbose : boolean) : String
    if(((opcode >= Constants.ILOAD_0) &&
        (opcode <= Constants.ALOAD_3)) ||
       ((opcode >= Constants.ISTORE_0) &&
        (opcode <= Constants.ASTORE_3)))
      return super.toString(verbose);
    else
      return super.toString(verbose) + " " + n;
!!!3419522.java!!!	initFromFile(inout bytes : ByteSequence, inout wide : boolean) : void
    if(wide) {
      n         = bytes.readUnsignedShort();
      length    = 4;
    } else if(((opcode >= Constants.ILOAD) &&
               (opcode <= Constants.ALOAD)) ||
              ((opcode >= Constants.ISTORE) &&
               (opcode <= Constants.ASTORE))) {
      n      = bytes.readUnsignedByte();
      length = 2;
    } else if(opcode <= Constants.ALOAD_3) { // compact load instruction such as ILOAD_2
      n      = (opcode - Constants.ILOAD_0) % 4;
      length = 1;
    } else { // Assert ISTORE_0 <= tag <= ASTORE_3
      n      = (opcode - Constants.ISTORE_0) % 4;
      length = 1;
    }
!!!3419650.java!!!	getIndex() : int
 return n;
!!!3419778.java!!!	setIndex(in n : int) : void
    if((n < 0) || (n > Constants.MAX_SHORT))
      throw new ClassGenException("Illegal value: " + n);

    this.n = n;

    if(n >= 0 && n <= 3) { // Use more compact instruction xLOAD_n
      opcode = (short)(c_tag + n);
      length = 1;
    } else {
      opcode = canon_tag;

      if(wide()) // Need WIDE prefix ?
        length = 4;
      else
        length = 2;
    }
!!!3419906.java!!!	getCanonicalTag() : short
    return canon_tag;
!!!3420034.java!!!	getType(inout cp : ConstantPoolGen) : Type
    switch(canon_tag) {
    case Constants.ILOAD: case Constants.ISTORE:
      return Type.INT;
    case Constants.LLOAD: case Constants.LSTORE:
      return Type.LONG;
    case Constants.DLOAD: case Constants.DSTORE:
      return Type.DOUBLE;
    case Constants.FLOAD: case Constants.FSTORE:
      return Type.FLOAT;
    case Constants.ALOAD: case Constants.ASTORE:
      return Type.OBJECT;

    default: throw new ClassGenException("Oops: unknown case in switch" + canon_tag);
    }
