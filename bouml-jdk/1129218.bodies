class DoubleAccumulator
!!!9284482.java!!!	DoubleAccumulator(inout accumulatorFunction : DoubleBinaryOperator, in identity : double)
        this.function = accumulatorFunction;
        base = this.identity = Double.doubleToRawLongBits(identity);
!!!9284610.java!!!	accumulate(in x : double) : void
        Cell[] as; long b, v, r; int m; Cell a;
        if ((as = cells) != null ||
            (r = Double.doubleToRawLongBits
             (function.applyAsDouble
              (Double.longBitsToDouble(b = base), x))) != b  && !casBase(b, r)) {
            boolean uncontended = true;
            if (as == null || (m = as.length - 1) < 0 ||
                (a = as[getProbe() & m]) == null ||
                !(uncontended =
                  (r = Double.doubleToRawLongBits
                   (function.applyAsDouble
                    (Double.longBitsToDouble(v = a.value), x))) == v ||
                  a.cas(v, r)))
                doubleAccumulate(x, function, uncontended);
        }
!!!9284738.java!!!	get() : double
        Cell[] as = cells; Cell a;
        double result = Double.longBitsToDouble(base);
        if (as != null) {
            for (int i = 0; i < as.length; ++i) {
                if ((a = as[i]) != null)
                    result = function.applyAsDouble
                        (result, Double.longBitsToDouble(a.value));
            }
        }
        return result;
!!!9284866.java!!!	reset() : void
        Cell[] as = cells; Cell a;
        base = identity;
        if (as != null) {
            for (int i = 0; i < as.length; ++i) {
                if ((a = as[i]) != null)
                    a.value = identity;
            }
        }
!!!9284994.java!!!	getThenReset() : double
        Cell[] as = cells; Cell a;
        double result = Double.longBitsToDouble(base);
        base = identity;
        if (as != null) {
            for (int i = 0; i < as.length; ++i) {
                if ((a = as[i]) != null) {
                    double v = Double.longBitsToDouble(a.value);
                    a.value = identity;
                    result = function.applyAsDouble(result, v);
                }
            }
        }
        return result;
!!!9285122.java!!!	toString() : String
        return Double.toString(get());
!!!9285250.java!!!	doubleValue() : double
        return get();
!!!9285378.java!!!	longValue() : long
        return (long)get();
!!!9285506.java!!!	intValue() : int
        return (int)get();
!!!9285634.java!!!	floatValue() : float
        return (float)get();
!!!9286018.java!!!	writeReplace() : Object
        return new SerializationProxy(this);
!!!9286146.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new java.io.InvalidObjectException("Proxy required");
