class BasicToolTipUI
!!!11025026.java!!!	createUI(inout c : JComponent) : ComponentUI
        return sharedInstance;
!!!11025154.java!!!	BasicToolTipUI()
        super();
!!!11025282.java!!!	installUI(inout c : JComponent) : void
        installDefaults(c);
        installComponents(c);
        installListeners(c);
!!!11025410.java!!!	uninstallUI(inout c : JComponent) : void
        // REMIND: this is NOT getting called
        uninstallDefaults(c);
        uninstallComponents(c);
        uninstallListeners(c);
!!!11025538.java!!!	installDefaults(inout c : JComponent) : void
        LookAndFeel.installColorsAndFont(c, "ToolTip.background",
                                         "ToolTip.foreground",
                                         "ToolTip.font");
        LookAndFeel.installProperty(c, "opaque", Boolean.TRUE);
        componentChanged(c);
!!!11025666.java!!!	uninstallDefaults(inout c : JComponent) : void
        LookAndFeel.uninstallBorder(c);
!!!11025794.java!!!	installComponents(inout c : JComponent) : void
        BasicHTML.updateRenderer(c, ((JToolTip)c).getTipText());
!!!11025922.java!!!	uninstallComponents(inout c : JComponent) : void
        BasicHTML.updateRenderer(c, "");
!!!11026050.java!!!	installListeners(inout c : JComponent) : void
        propertyChangeListener = createPropertyChangeListener(c);

        c.addPropertyChangeListener(propertyChangeListener);
!!!11026178.java!!!	uninstallListeners(inout c : JComponent) : void
        c.removePropertyChangeListener(propertyChangeListener);

        propertyChangeListener = null;
!!!11026306.java!!!	createPropertyChangeListener(inout c : JComponent) : PropertyChangeListener
        if (sharedPropertyChangedListener == null) {
            sharedPropertyChangedListener = new PropertyChangeHandler();
        }
        return sharedPropertyChangedListener;
!!!11026434.java!!!	paint(inout g : Graphics, inout c : JComponent) : void
        Font font = c.getFont();
        FontMetrics metrics = SwingUtilities2.getFontMetrics(c, g, font);
        Dimension size = c.getSize();

        g.setColor(c.getForeground());
        // fix for bug 4153892
        String tipText = ((JToolTip)c).getTipText();
        if (tipText == null) {
            tipText = "";
        }

        Insets insets = c.getInsets();
        Rectangle paintTextR = new Rectangle(
            insets.left + 3,
            insets.top,
            size.width - (insets.left + insets.right) - 6,
            size.height - (insets.top + insets.bottom));
        View v = (View) c.getClientProperty(BasicHTML.propertyKey);
        if (v != null) {
            v.paint(g, paintTextR);
        } else {
            g.setFont(font);
            SwingUtilities2.drawString(c, g, tipText, paintTextR.x,
                                  paintTextR.y + metrics.getAscent());
        }
!!!11026562.java!!!	getPreferredSize(inout c : JComponent) : Dimension
        Font font = c.getFont();
        FontMetrics fm = c.getFontMetrics(font);
        Insets insets = c.getInsets();

        Dimension prefSize = new Dimension(insets.left+insets.right,
                                           insets.top+insets.bottom);
        String text = ((JToolTip)c).getTipText();

        if ((text == null) || text.equals("")) {
            text = "";
        }
        else {
            View v = (c != null) ? (View) c.getClientProperty("html") : null;
            if (v != null) {
                prefSize.width += (int) v.getPreferredSpan(View.X_AXIS) + 6;
                prefSize.height += (int) v.getPreferredSpan(View.Y_AXIS);
            } else {
                prefSize.width += SwingUtilities2.stringWidth(c,fm,text) + 6;
                prefSize.height += fm.getHeight();
            }
        }
        return prefSize;
!!!11026690.java!!!	getMinimumSize(inout c : JComponent) : Dimension
        Dimension d = getPreferredSize(c);
        View v = (View) c.getClientProperty(BasicHTML.propertyKey);
        if (v != null) {
            d.width -= v.getPreferredSpan(View.X_AXIS) - v.getMinimumSpan(View.X_AXIS);
        }
        return d;
!!!11026818.java!!!	getMaximumSize(inout c : JComponent) : Dimension
        Dimension d = getPreferredSize(c);
        View v = (View) c.getClientProperty(BasicHTML.propertyKey);
        if (v != null) {
            d.width += v.getMaximumSpan(View.X_AXIS) - v.getPreferredSpan(View.X_AXIS);
        }
        return d;
!!!11026946.java!!!	componentChanged(inout c : JComponent) : void
        JComponent comp = ((JToolTip)c).getComponent();

        if (comp != null && !(comp.isEnabled())) {
            // For better backward compatibility, only install inactive
            // properties if they are defined.
            if (UIManager.getBorder("ToolTip.borderInactive") != null) {
                LookAndFeel.installBorder(c, "ToolTip.borderInactive");
            }
            else {
                LookAndFeel.installBorder(c, "ToolTip.border");
            }
            if (UIManager.getColor("ToolTip.backgroundInactive") != null) {
                LookAndFeel.installColors(c,"ToolTip.backgroundInactive",
                                          "ToolTip.foregroundInactive");
            }
            else {
                LookAndFeel.installColors(c,"ToolTip.background",
                                          "ToolTip.foreground");
            }
        } else {
            LookAndFeel.installBorder(c, "ToolTip.border");
            LookAndFeel.installColors(c, "ToolTip.background",
                                      "ToolTip.foreground");
        }
