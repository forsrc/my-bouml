class ASCII_CharStream
!!!3261186.java!!!	ExpandBuff(inout wrapAround : boolean) : void
     char[] newbuffer = new char[bufsize + 2048];
     int newbufline[] = new int[bufsize + 2048];
     int newbufcolumn[] = new int[bufsize + 2048];

     try
     {
        if (wrapAround)
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           System.arraycopy(buffer, 0, newbuffer,
                                             bufsize - tokenBegin, bufpos);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
           bufcolumn = newbufcolumn;

           maxNextCharInd = (bufpos += (bufsize - tokenBegin));
        }
        else
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           bufcolumn = newbufcolumn;

           maxNextCharInd = (bufpos -= tokenBegin);
        }
     }
     catch (Throwable t)
     {
        throw new Error(t.getMessage());
     }


     bufsize += 2048;
     available = bufsize;
     tokenBegin = 0;
!!!3261314.java!!!	FillBuff() : void
     if (maxNextCharInd == available)
     {
        if (available == bufsize)
        {
           if (tokenBegin > 2048)
           {
              bufpos = maxNextCharInd = 0;
              available = tokenBegin;
           }
           else if (tokenBegin < 0)
              bufpos = maxNextCharInd = 0;
           else
              ExpandBuff(false);
        }
        else if (available > tokenBegin)
           available = bufsize;
        else if ((tokenBegin - available) < 2048)
           ExpandBuff(true);
        else
           available = tokenBegin;
     }

     int i;
     try {
        if ((i = inputStream.read(buffer, maxNextCharInd,
                                    available - maxNextCharInd)) == -1)
        {
           inputStream.close();
           throw new java.io.IOException();
        }
        else
           maxNextCharInd += i;
        return;
     }
     catch(java.io.IOException e) {
        --bufpos;
        backup(0);
        if (tokenBegin == -1)
           tokenBegin = bufpos;
        throw e;
     }
!!!3261442.java!!!	BeginToken() : char
     tokenBegin = -1;
     char c = readChar();
     tokenBegin = bufpos;

     return c;
!!!3261570.java!!!	UpdateLineColumn(in c : char) : void
     column++;

     if (prevCharIsLF)
     {
        prevCharIsLF = false;
        line += (column = 1);
     }
     else if (prevCharIsCR)
     {
        prevCharIsCR = false;
        if (c == '\n')
        {
           prevCharIsLF = true;
        }
        else
           line += (column = 1);
     }

     switch (c)
     {
        case '\r' :
           prevCharIsCR = true;
           break;
        case '\n' :
           prevCharIsLF = true;
           break;
        case '\t' :
           column--;
           column += (8 - (column & 07));
           break;
        default :
           break;
     }

     bufline[bufpos] = line;
     bufcolumn[bufpos] = column;
!!!3261698.java!!!	readChar() : char
     if (inBuf > 0)
     {
        --inBuf;
        return (char)((char)0xff & buffer[(bufpos == bufsize - 1) ? (bufpos = 0) : ++bufpos]);
     }

     if (++bufpos >= maxNextCharInd)
        FillBuff();

     char c = (char)((char)0xff & buffer[bufpos]);

     UpdateLineColumn(c);
     return (c);
!!!3261826.java!!!	getColumn() : int
     return bufcolumn[bufpos];
!!!3261954.java!!!	getLine() : int
     return bufline[bufpos];
!!!3262082.java!!!	getEndColumn() : int
     return bufcolumn[bufpos];
!!!3262210.java!!!	getEndLine() : int
     return bufline[bufpos];
!!!3262338.java!!!	getBeginColumn() : int
     return bufcolumn[tokenBegin];
!!!3262466.java!!!	getBeginLine() : int
     return bufline[tokenBegin];
!!!3262594.java!!!	backup(in amount : int) : void

    inBuf += amount;
    if ((bufpos -= amount) < 0)
       bufpos += bufsize;
!!!3262722.java!!!	ASCII_CharStream(inout dstream : Reader, in startline : int, in startcolumn : int, in buffersize : int)
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
!!!3262850.java!!!	ASCII_CharStream(inout dstream : Reader, in startline : int, in startcolumn : int)
     this(dstream, startline, startcolumn, 4096);
!!!3262978.java!!!	ReInit(inout dstream : Reader, in startline : int, in startcolumn : int, in buffersize : int) : void
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    if (buffer == null || buffersize != buffer.length)
    {
      available = bufsize = buffersize;
      buffer = new char[buffersize];
      bufline = new int[buffersize];
      bufcolumn = new int[buffersize];
    }
    prevCharIsLF = prevCharIsCR = false;
    tokenBegin = inBuf = maxNextCharInd = 0;
    bufpos = -1;
!!!3263106.java!!!	ReInit(inout dstream : Reader, in startline : int, in startcolumn : int) : void
     ReInit(dstream, startline, startcolumn, 4096);
!!!3263234.java!!!	ASCII_CharStream(inout dstream : InputStream, in startline : int, in startcolumn : int, in buffersize : int)
     this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
!!!3263362.java!!!	ASCII_CharStream(inout dstream : InputStream, in startline : int, in startcolumn : int)
     this(dstream, startline, startcolumn, 4096);
!!!3263490.java!!!	ReInit(inout dstream : InputStream, in startline : int, in startcolumn : int, in buffersize : int) : void
     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
!!!3263618.java!!!	ReInit(inout dstream : InputStream, in startline : int, in startcolumn : int) : void
     ReInit(dstream, startline, startcolumn, 4096);
!!!3263746.java!!!	GetImage() : String
     if (bufpos >= tokenBegin)
        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
     else
        return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                              new String(buffer, 0, bufpos + 1);
!!!3263874.java!!!	GetSuffix(in len : int) : char
     char[] ret = new char[len];

     if ((bufpos + 1) >= len)
        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
     else
     {
        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                          len - bufpos - 1);
        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
     }

     return ret;
!!!3264002.java!!!	Done() : void
     buffer = null;
     bufline = null;
     bufcolumn = null;
!!!3264130.java!!!	adjustBeginLineColumn(in newLine : int, in newCol : int) : void
     int start = tokenBegin;
     int len;

     if (bufpos >= tokenBegin)
     {
        len = bufpos - tokenBegin + inBuf + 1;
     }
     else
     {
        len = bufsize - tokenBegin + bufpos + 1 + inBuf;
     }

     int i = 0, j = 0, k = 0;
     int nextColDiff = 0, columnDiff = 0;

     while (i < len &&
            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
     {
        bufline[j] = newLine;
        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
        bufcolumn[j] = newCol + columnDiff;
        columnDiff = nextColDiff;
        i++;
     }

     if (i < len)
     {
        bufline[j] = newLine++;
        bufcolumn[j] = newCol + columnDiff;

        while (i++ < len)
        {
           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
              bufline[j] = newLine++;
           else
              bufline[j] = newLine;
        }
     }

     line = bufline[j];
     column = bufcolumn[j];
