class Double
!!!7011842.java!!!	toString(in d : double) : String
        return FloatingDecimal.toJavaFormatString(d);
!!!7011970.java!!!	toHexString(in d : double) : String
        /*
         * Modeled after the "a" conversion specifier in C99, section
         * 7.19.6.1; however, the output of this method is more
         * tightly specified.
         */
        if (!isFinite(d) )
            // For infinity and NaN, use the decimal output.
            return Double.toString(d);
        else {
            // Initialized to maximum size of output.
            StringBuilder answer = new StringBuilder(24);

            if (Math.copySign(1.0, d) == -1.0)    // value is negative,
                answer.append("-");                  // so append sign info

            answer.append("0x");

            d = Math.abs(d);

            if(d == 0.0) {
                answer.append("0.0p0");
            } else {
                boolean subnormal = (d < DoubleConsts.MIN_NORMAL);

                // Isolate significand bits and OR in a high-order bit
                // so that the string representation has a known
                // length.
                long signifBits = (Double.doubleToLongBits(d)
                                   & DoubleConsts.SIGNIF_BIT_MASK) |
                    0x1000000000000000L;

                // Subnormal values have a 0 implicit bit; normal
                // values have a 1 implicit bit.
                answer.append(subnormal ? "0." : "1.");

                // Isolate the low-order 13 digits of the hex
                // representation.  If all the digits are zero,
                // replace with a single 0; otherwise, remove all
                // trailing zeros.
                String signif = Long.toHexString(signifBits).substring(3,16);
                answer.append(signif.equals("0000000000000") ? // 13 zeros
                              "0":
                              signif.replaceFirst("0{1,12}$", ""));

                answer.append('p');
                // If the value is subnormal, use the E_min exponent
                // value for double; otherwise, extract and report d's
                // exponent (the representation of a subnormal uses
                // E_min -1).
                answer.append(subnormal ?
                              DoubleConsts.MIN_EXPONENT:
                              Math.getExponent(d));
            }
            return answer.toString();
        }
!!!7012098.java!!!	valueOf(inout s : String) : Double
        return new Double(parseDouble(s));
!!!7012226.java!!!	valueOf(in d : double) : Double
        return new Double(d);
!!!7012354.java!!!	parseDouble(inout s : String) : double
        return FloatingDecimal.parseDouble(s);
!!!7012482.java!!!	isNaN(in v : double) : boolean
        return (v != v);
!!!7012610.java!!!	isInfinite(in v : double) : boolean
        return (v == POSITIVE_INFINITY) || (v == NEGATIVE_INFINITY);
!!!7012738.java!!!	isFinite(in d : double) : boolean
        return Math.abs(d) <= DoubleConsts.MAX_VALUE;
!!!7012866.java!!!	Double(in value : double)
        this.value = value;
!!!7012994.java!!!	Double(inout s : String)
        value = parseDouble(s);
!!!7013122.java!!!	isNaN() : boolean
        return isNaN(value);
!!!7013250.java!!!	isInfinite() : boolean
        return isInfinite(value);
!!!7013378.java!!!	toString() : String
        return toString(value);
!!!7013506.java!!!	byteValue() : byte
        return (byte)value;
!!!7013634.java!!!	shortValue() : short
        return (short)value;
!!!7013762.java!!!	intValue() : int
        return (int)value;
!!!7013890.java!!!	longValue() : long
        return (long)value;
!!!7014018.java!!!	floatValue() : float
        return (float)value;
!!!7014146.java!!!	doubleValue() : double
        return value;
!!!7014274.java!!!	hashCode() : int
        return Double.hashCode(value);
!!!7014402.java!!!	hashCode(in value : double) : int
        long bits = doubleToLongBits(value);
        return (int)(bits ^ (bits >>> 32));
!!!7014530.java!!!	equals(inout obj : Object) : boolean
        return (obj instanceof Double)
               && (doubleToLongBits(((Double)obj).value) ==
                      doubleToLongBits(value));
!!!7014658.java!!!	doubleToLongBits(in value : double) : long
        long result = doubleToRawLongBits(value);
        // Check for NaN based on values of bit fields, maximum
        // exponent and nonzero significand.
        if ( ((result & DoubleConsts.EXP_BIT_MASK) ==
              DoubleConsts.EXP_BIT_MASK) &&
             (result & DoubleConsts.SIGNIF_BIT_MASK) != 0L)
            result = 0x7ff8000000000000L;
        return result;
!!!7015042.java!!!	compareTo(inout anotherDouble : Double) : int
        return Double.compare(value, anotherDouble.value);
!!!7015170.java!!!	compare(in d1 : double, in d2 : double) : int
        if (d1 < d2)
            return -1;           // Neither val is NaN, thisVal is smaller
        if (d1 > d2)
            return 1;            // Neither val is NaN, thisVal is larger

        // Cannot use doubleToRawLongBits because of possibility of NaNs.
        long thisBits    = Double.doubleToLongBits(d1);
        long anotherBits = Double.doubleToLongBits(d2);

        return (thisBits == anotherBits ?  0 : // Values are equal
                (thisBits < anotherBits ? -1 : // (-0.0, 0.0) or (!NaN, NaN)
                 1));                          // (0.0, -0.0) or (NaN, !NaN)
!!!7015298.java!!!	sum(in a : double, in b : double) : double
        return a + b;
!!!7015426.java!!!	max(in a : double, in b : double) : double
        return Math.max(a, b);
!!!7015554.java!!!	min(in a : double, in b : double) : double
        return Math.min(a, b);
