class InclusiveNamespaces
!!!5475586.java!!!	InclusiveNamespaces(inout doc : Document, inout prefixList : String)
        this(doc, InclusiveNamespaces.prefixStr2Set(prefixList));
!!!5475714.java!!!	InclusiveNamespaces(inout doc : Document, inout prefixes : Set)
        super(doc);

        SortedSet<String> prefixList = null;
        if (prefixes instanceof SortedSet<?>) {
            prefixList = (SortedSet<String>)prefixes;
        } else {
            prefixList = new TreeSet<String>(prefixes);
        }

        StringBuilder sb = new StringBuilder();
        for (String prefix : prefixList) {
            if (prefix.equals("xmlns")) {
                sb.append("#default ");
            } else {
                sb.append(prefix + " ");
            }
        }

        this.constructionElement.setAttributeNS(
            null, InclusiveNamespaces._ATT_EC_PREFIXLIST, sb.toString().trim());
!!!5475842.java!!!	InclusiveNamespaces(inout element : Element, inout BaseURI : String)
        super(element, BaseURI);
!!!5475970.java!!!	getInclusiveNamespaces() : String
        return this.constructionElement.getAttributeNS(null, InclusiveNamespaces._ATT_EC_PREFIXLIST);
!!!5476098.java!!!	prefixStr2Set(inout inclusiveNamespaces : String) : SortedSet
        SortedSet<String> prefixes = new TreeSet<String>();

        if ((inclusiveNamespaces == null) || (inclusiveNamespaces.length() == 0)) {
            return prefixes;
        }

        String[] tokens = inclusiveNamespaces.split("\\s");
        for (String prefix : tokens) {
            if (prefix.equals("#default")) {
                prefixes.add("xmlns");
            } else {
                prefixes.add(prefix);
            }
        }

        return prefixes;
!!!5476226.java!!!	getBaseNamespace() : String
        return InclusiveNamespaces.ExclusiveCanonicalizationNamespace;
!!!5476354.java!!!	getBaseLocalName() : String
        return InclusiveNamespaces._TAG_EC_INCLUSIVENAMESPACES;
