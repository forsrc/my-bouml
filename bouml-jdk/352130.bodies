class DataFlavor
!!!6389762.java!!!	tryToLoadClass(inout className : String, inout fallback : ClassLoader) : Class
        ReflectUtil.checkPackageAccess(className);
        try {
            SecurityManager sm = System.getSecurityManager();
            if (sm != null) {
                sm.checkPermission(GET_CLASSLOADER_PERMISSION);
            }
            ClassLoader loader = ClassLoader.getSystemClassLoader();
            try {
                // bootstrap class loader and system class loader if present
                return Class.forName(className, true, loader);
            }
            catch (ClassNotFoundException exception) {
                // thread context class loader if and only if present
                loader = Thread.currentThread().getContextClassLoader();
                if (loader != null) {
                    try {
                        return Class.forName(className, true, loader);
                    }
                    catch (ClassNotFoundException e) {
                        // fallback to user's class loader
                    }
                }
            }
        } catch (SecurityException exception) {
            // ignore secured class loaders
        }
        return Class.forName(className, true, fallback);
!!!6389890.java!!!	createConstant(inout rc : Class, inout prn : String) : DataFlavor
        try {
            return new DataFlavor(rc, prn);
        } catch (Exception e) {
            return null;
        }
!!!6390018.java!!!	createConstant(inout mt : String, inout prn : String) : DataFlavor
        try {
            return new DataFlavor(mt, prn);
        } catch (Exception e) {
            return null;
        }
!!!6390146.java!!!	initHtmlDataFlavor(inout htmlFlavorType : String) : DataFlavor
        try {
            return new DataFlavor ("text/html; class=java.lang.String;document=" +
                                       htmlFlavorType + ";charset=Unicode");
        } catch (Exception e) {
            return null;
        }
!!!6390274.java!!!	DataFlavor()
        super();
!!!6390402.java!!!	DataFlavor(inout primaryType : String, inout subType : String, inout params : MimeTypeParameterList, inout representationClass : Class, inout humanPresentableName : String)
        super();
        if (primaryType == null) {
            throw new NullPointerException("primaryType");
        }
        if (subType == null) {
            throw new NullPointerException("subType");
        }
        if (representationClass == null) {
            throw new NullPointerException("representationClass");
        }

        if (params == null) params = new MimeTypeParameterList();

        params.set("class", representationClass.getName());

        if (humanPresentableName == null) {
            humanPresentableName = params.get("humanPresentableName");

            if (humanPresentableName == null)
                humanPresentableName = primaryType + "/" + subType;
        }

        try {
            mimeType = new MimeType(primaryType, subType, params);
        } catch (MimeTypeParseException mtpe) {
            throw new IllegalArgumentException("MimeType Parse Exception: " + mtpe.getMessage());
        }

        this.representationClass  = representationClass;
        this.humanPresentableName = humanPresentableName;

        mimeType.removeParameter("humanPresentableName");
!!!6390530.java!!!	DataFlavor(inout representationClass : Class, inout humanPresentableName : String)
        this("application", "x-java-serialized-object", null, representationClass, humanPresentableName);
        if (representationClass == null) {
            throw new NullPointerException("representationClass");
        }
!!!6390658.java!!!	DataFlavor(inout mimeType : String, inout humanPresentableName : String)
        super();
        if (mimeType == null) {
            throw new NullPointerException("mimeType");
        }
        try {
            initialize(mimeType, humanPresentableName, this.getClass().getClassLoader());
        } catch (MimeTypeParseException mtpe) {
            throw new IllegalArgumentException("failed to parse:" + mimeType);
        } catch (ClassNotFoundException cnfe) {
            throw new IllegalArgumentException("can't find specified class: " + cnfe.getMessage());
        }
!!!6390786.java!!!	DataFlavor(inout mimeType : String, inout humanPresentableName : String, inout classLoader : ClassLoader)
        super();
        if (mimeType == null) {
            throw new NullPointerException("mimeType");
        }
        try {
            initialize(mimeType, humanPresentableName, classLoader);
        } catch (MimeTypeParseException mtpe) {
            throw new IllegalArgumentException("failed to parse:" + mimeType);
        }
!!!6390914.java!!!	DataFlavor(inout mimeType : String)
        super();
        if (mimeType == null) {
            throw new NullPointerException("mimeType");
        }
        try {
            initialize(mimeType, null, this.getClass().getClassLoader());
        } catch (MimeTypeParseException mtpe) {
            throw new IllegalArgumentException("failed to parse:" + mimeType);
        }
!!!6391042.java!!!	initialize(inout mimeType : String, inout humanPresentableName : String, inout classLoader : ClassLoader) : void
        if (mimeType == null) {
            throw new NullPointerException("mimeType");
        }

        this.mimeType = new MimeType(mimeType); // throws

        String rcn = getParameter("class");

        if (rcn == null) {
            if ("application/x-java-serialized-object".equals(this.mimeType.getBaseType()))

                throw new IllegalArgumentException("no representation class specified for:" + mimeType);
            else
                representationClass = java.io.InputStream.class; // default
        } else { // got a class name
            representationClass = DataFlavor.tryToLoadClass(rcn, classLoader);
        }

        this.mimeType.setParameter("class", representationClass.getName());

        if (humanPresentableName == null) {
            humanPresentableName = this.mimeType.getParameter("humanPresentableName");
            if (humanPresentableName == null)
                humanPresentableName = this.mimeType.getPrimaryType() + "/" + this.mimeType.getSubType();
        }

        this.humanPresentableName = humanPresentableName; // set it.

        this.mimeType.removeParameter("humanPresentableName"); // just in case
!!!6391170.java!!!	toString() : String
        String string = getClass().getName();
        string += "["+paramString()+"]";
        return string;
!!!6391298.java!!!	paramString() : String
        String params = "";
        params += "mimetype=";
        if (mimeType == null) {
            params += "null";
        } else {
            params += mimeType.getBaseType();
        }
        params += ";representationclass=";
        if (representationClass == null) {
           params += "null";
        } else {
           params += representationClass.getName();
        }
        if (DataTransferer.isFlavorCharsetTextType(this) &&
            (isRepresentationClassInputStream() ||
             isRepresentationClassByteBuffer() ||
             byte[].class.equals(representationClass)))
        {
            params += ";charset=" + DataTransferer.getTextCharset(this);
        }
        return params;
!!!6391426.java!!!	getTextPlainUnicodeFlavor() : DataFlavor
        String encoding = null;
        DataTransferer transferer = DataTransferer.getInstance();
        if (transferer != null) {
            encoding = transferer.getDefaultUnicodeEncoding();
        }
        return new DataFlavor(
            "text/plain;charset="+encoding
            +";class=java.io.InputStream", "Plain Text");
!!!6391554.java!!!	selectBestTextFlavor(inout availableFlavors : DataFlavor [[]]) : DataFlavor
        if (availableFlavors == null || availableFlavors.length == 0) {
            return null;
        }

        if (textFlavorComparator == null) {
            textFlavorComparator = new TextFlavorComparator();
        }

        DataFlavor bestFlavor =
            (DataFlavor)Collections.max(Arrays.asList(availableFlavors),
                                        textFlavorComparator);

        if (!bestFlavor.isFlavorTextType()) {
            return null;
        }

        return bestFlavor;
!!!6391810.java!!!	getReaderForText(inout transferable : Transferable) : Reader
        Object transferObject = transferable.getTransferData(this);
        if (transferObject == null) {
            throw new IllegalArgumentException
                ("getTransferData() returned null");
        }

        if (transferObject instanceof Reader) {
            return (Reader)transferObject;
        } else if (transferObject instanceof String) {
            return new StringReader((String)transferObject);
        } else if (transferObject instanceof CharBuffer) {
            CharBuffer buffer = (CharBuffer)transferObject;
            int size = buffer.remaining();
            char[] chars = new char[size];
            buffer.get(chars, 0, size);
            return new CharArrayReader(chars);
        } else if (transferObject instanceof char[]) {
            return new CharArrayReader((char[])transferObject);
        }

        InputStream stream = null;

        if (transferObject instanceof InputStream) {
            stream = (InputStream)transferObject;
        } else if (transferObject instanceof ByteBuffer) {
            ByteBuffer buffer = (ByteBuffer)transferObject;
            int size = buffer.remaining();
            byte[] bytes = new byte[size];
            buffer.get(bytes, 0, size);
            stream = new ByteArrayInputStream(bytes);
        } else if (transferObject instanceof byte[]) {
            stream = new ByteArrayInputStream((byte[])transferObject);
        }

        if (stream == null) {
            throw new IllegalArgumentException("transfer data is not Reader, String, CharBuffer, char array, InputStream, ByteBuffer, or byte array");
        }

        String encoding = getParameter("charset");
        return (encoding == null)
            ? new InputStreamReader(stream)
            : new InputStreamReader(stream, encoding);
!!!6391938.java!!!	getMimeType() : String
        return (mimeType != null) ? mimeType.toString() : null;
!!!6392066.java!!!	getRepresentationClass() : Class
        return representationClass;
!!!6392194.java!!!	getHumanPresentableName() : String
        return humanPresentableName;
!!!6392322.java!!!	getPrimaryType() : String
        return (mimeType != null) ? mimeType.getPrimaryType() : null;
!!!6392450.java!!!	getSubType() : String
        return (mimeType != null) ? mimeType.getSubType() : null;
!!!6392578.java!!!	getParameter(inout paramName : String) : String
        if (paramName.equals("humanPresentableName")) {
            return humanPresentableName;
        } else {
            return (mimeType != null)
                ? mimeType.getParameter(paramName) : null;
        }
!!!6392706.java!!!	setHumanPresentableName(inout humanPresentableName : String) : void
        this.humanPresentableName = humanPresentableName;
!!!6392834.java!!!	equals(inout o : Object) : boolean
        return ((o instanceof DataFlavor) && equals((DataFlavor)o));
!!!6392962.java!!!	equals(inout that : DataFlavor) : boolean
        if (that == null) {
            return false;
        }
        if (this == that) {
            return true;
        }

        if (!Objects.equals(this.getRepresentationClass(), that.getRepresentationClass())) {
            return false;
        }

        if (mimeType == null) {
            if (that.mimeType != null) {
                return false;
            }
        } else {
            if (!mimeType.match(that.mimeType)) {
                return false;
            }

            if ("text".equals(getPrimaryType())) {
                if (DataTransferer.doesSubtypeSupportCharset(this)
                        && representationClass != null
                        && !isStandardTextRepresentationClass()) {
                    String thisCharset =
                            DataTransferer.canonicalName(this.getParameter("charset"));
                    String thatCharset =
                            DataTransferer.canonicalName(that.getParameter("charset"));
                    if (!Objects.equals(thisCharset, thatCharset)) {
                        return false;
                    }
                }

                if ("html".equals(getSubType())) {
                    String thisDocument = this.getParameter("document");
                    String thatDocument = that.getParameter("document");
                    if (!Objects.equals(thisDocument, thatDocument)) {
                        return false;
                    }
                }
            }
        }

        return true;
!!!6393090.java!!!	equals(inout s : String) : boolean
        if (s == null || mimeType == null)
            return false;
        return isMimeTypeEqual(s);
!!!6393218.java!!!	hashCode() : int
        int total = 0;

        if (representationClass != null) {
            total += representationClass.hashCode();
        }

        if (mimeType != null) {
            String primaryType = mimeType.getPrimaryType();
            if (primaryType != null) {
                total += primaryType.hashCode();
            }

            // Do not add subType.hashCode() to the total. equals uses
            // MimeType.match which reports a match if one or both of the
            // subTypes is '*', regardless of the other subType.

            if ("text".equals(primaryType)) {
                if (DataTransferer.doesSubtypeSupportCharset(this)
                        && representationClass != null
                        && !isStandardTextRepresentationClass()) {
                    String charset = DataTransferer.canonicalName(getParameter("charset"));
                    if (charset != null) {
                        total += charset.hashCode();
                    }
                }

                if ("html".equals(getSubType())) {
                    String document = this.getParameter("document");
                    if (document != null) {
                        total += document.hashCode();
                    }
                }
            }
        }

        return total;
!!!6393346.java!!!	match(inout that : DataFlavor) : boolean
        return equals(that);
!!!6393474.java!!!	isMimeTypeEqual(inout mimeType : String) : boolean
        // JCK Test DataFlavor0117: if 'mimeType' is null, throw NPE
        if (mimeType == null) {
            throw new NullPointerException("mimeType");
        }
        if (this.mimeType == null) {
            return false;
        }
        try {
            return this.mimeType.match(new MimeType(mimeType));
        } catch (MimeTypeParseException mtpe) {
            return false;
        }
!!!6393602.java!!!	isMimeTypeEqual(inout dataFlavor : DataFlavor) : boolean
        return isMimeTypeEqual(dataFlavor.mimeType);
!!!6393730.java!!!	isMimeTypeEqual(inout mtype : MimeType) : boolean
        if (this.mimeType == null) {
            return (mtype == null);
        }
        return mimeType.match(mtype);
!!!6393858.java!!!	isStandardTextRepresentationClass() : boolean
        return isRepresentationClassReader()
                || String.class.equals(representationClass)
                || isRepresentationClassCharBuffer()
                || char[].class.equals(representationClass);
!!!6393986.java!!!	isMimeTypeSerializedObject() : boolean
        return isMimeTypeEqual(javaSerializedObjectMimeType);
!!!6394114.java!!!	getDefaultRepresentationClass() : Class
        return ioInputStreamClass;
!!!6394242.java!!!	getDefaultRepresentationClassAsString() : String
        return getDefaultRepresentationClass().getName();
!!!6394370.java!!!	isRepresentationClassInputStream() : boolean
        return ioInputStreamClass.isAssignableFrom(representationClass);
!!!6394498.java!!!	isRepresentationClassReader() : boolean
        return java.io.Reader.class.isAssignableFrom(representationClass);
!!!6394626.java!!!	isRepresentationClassCharBuffer() : boolean
        return java.nio.CharBuffer.class.isAssignableFrom(representationClass);
!!!6394754.java!!!	isRepresentationClassByteBuffer() : boolean
        return java.nio.ByteBuffer.class.isAssignableFrom(representationClass);
!!!6394882.java!!!	isRepresentationClassSerializable() : boolean
        return java.io.Serializable.class.isAssignableFrom(representationClass);
!!!6395010.java!!!	isRepresentationClassRemote() : boolean
        return DataTransferer.isRemote(representationClass);
!!!6395138.java!!!	isFlavorSerializedObjectType() : boolean
        return isRepresentationClassSerializable() && isMimeTypeEqual(javaSerializedObjectMimeType);
!!!6395266.java!!!	isFlavorRemoteObjectType() : boolean
        return isRepresentationClassRemote()
            && isRepresentationClassSerializable()
            && isMimeTypeEqual(javaRemoteObjectMimeType);
!!!6395394.java!!!	isFlavorJavaFileListType() : boolean
        if (mimeType == null || representationClass == null)
            return false;
        return java.util.List.class.isAssignableFrom(representationClass) &&
               mimeType.match(javaFileListFlavor.mimeType);

!!!6395522.java!!!	isFlavorTextType() : boolean
        return (DataTransferer.isFlavorCharsetTextType(this) ||
                DataTransferer.isFlavorNoncharsetTextType(this));
!!!6395650.java!!!	writeExternal(inout os : ObjectOutput) : void
       if (mimeType != null) {
           mimeType.setParameter("humanPresentableName", humanPresentableName);
           os.writeObject(mimeType);
           mimeType.removeParameter("humanPresentableName");
       } else {
           os.writeObject(null);
       }

       os.writeObject(representationClass);
!!!6395778.java!!!	readExternal(inout is : ObjectInput) : void
       String rcn = null;
        mimeType = (MimeType)is.readObject();

        if (mimeType != null) {
            humanPresentableName =
                mimeType.getParameter("humanPresentableName");
            mimeType.removeParameter("humanPresentableName");
            rcn = mimeType.getParameter("class");
            if (rcn == null) {
                throw new IOException("no class parameter specified in: " +
                                      mimeType);
            }
        }

        try {
            representationClass = (Class)is.readObject();
        } catch (OptionalDataException ode) {
            if (!ode.eof || ode.length != 0) {
                throw ode;
            }
            // Ensure backward compatibility.
            // Old versions didn't write the representation class to the stream.
            if (rcn != null) {
                representationClass =
                    DataFlavor.tryToLoadClass(rcn, getClass().getClassLoader());
            }
        }
!!!6395906.java!!!	clone() : Object
        Object newObj = super.clone();
        if (mimeType != null) {
            ((DataFlavor)newObj).mimeType = (MimeType)mimeType.clone();
        }
        return newObj;
!!!6396034.java!!!	normalizeMimeTypeParameter(inout parameterName : String, inout parameterValue : String) : String
        return parameterValue;
!!!6396162.java!!!	normalizeMimeType(inout mimeType : String) : String
        return mimeType;
