class NavigableSubMap
!!!8952194.java!!!	NavigableSubMap(inout m : TreeMap, inout fromStart : boolean, inout lo : K, inout loInclusive : boolean, inout toEnd : boolean, inout hi : K, inout hiInclusive : boolean)
            if (!fromStart && !toEnd) {
                if (m.compare(lo, hi) > 0)
                    throw new IllegalArgumentException("fromKey > toKey");
            } else {
                if (!fromStart) // type check
                    m.compare(lo, lo);
                if (!toEnd)
                    m.compare(hi, hi);
            }

            this.m = m;
            this.fromStart = fromStart;
            this.lo = lo;
            this.loInclusive = loInclusive;
            this.toEnd = toEnd;
            this.hi = hi;
            this.hiInclusive = hiInclusive;
!!!8952322.java!!!	tooLow(inout key : Object) : boolean
            if (!fromStart) {
                int c = m.compare(key, lo);
                if (c < 0 || (c == 0 && !loInclusive))
                    return true;
            }
            return false;
!!!8952450.java!!!	tooHigh(inout key : Object) : boolean
            if (!toEnd) {
                int c = m.compare(key, hi);
                if (c > 0 || (c == 0 && !hiInclusive))
                    return true;
            }
            return false;
!!!8952578.java!!!	inRange(inout key : Object) : boolean
            return !tooLow(key) && !tooHigh(key);
!!!8952706.java!!!	inClosedRange(inout key : Object) : boolean
            return (fromStart || m.compare(key, lo) >= 0)
                && (toEnd || m.compare(hi, key) >= 0);
!!!8952834.java!!!	inRange(inout key : Object, inout inclusive : boolean) : boolean
            return inclusive ? inRange(key) : inClosedRange(key);
!!!8952962.java!!!	absLowest() : Map::Entry
            TreeMap.Entry<K,V> e =
                (fromStart ?  m.getFirstEntry() :
                 (loInclusive ? m.getCeilingEntry(lo) :
                                m.getHigherEntry(lo)));
            return (e == null || tooHigh(e.key)) ? null : e;
!!!8953090.java!!!	absHighest() : Map::Entry
            TreeMap.Entry<K,V> e =
                (toEnd ?  m.getLastEntry() :
                 (hiInclusive ?  m.getFloorEntry(hi) :
                                 m.getLowerEntry(hi)));
            return (e == null || tooLow(e.key)) ? null : e;
!!!8953218.java!!!	absCeiling(inout key : K) : Map::Entry
            if (tooLow(key))
                return absLowest();
            TreeMap.Entry<K,V> e = m.getCeilingEntry(key);
            return (e == null || tooHigh(e.key)) ? null : e;
!!!8953346.java!!!	absHigher(inout key : K) : Map::Entry
            if (tooLow(key))
                return absLowest();
            TreeMap.Entry<K,V> e = m.getHigherEntry(key);
            return (e == null || tooHigh(e.key)) ? null : e;
!!!8953474.java!!!	absFloor(inout key : K) : Map::Entry
            if (tooHigh(key))
                return absHighest();
            TreeMap.Entry<K,V> e = m.getFloorEntry(key);
            return (e == null || tooLow(e.key)) ? null : e;
!!!8953602.java!!!	absLower(inout key : K) : Map::Entry
            if (tooHigh(key))
                return absHighest();
            TreeMap.Entry<K,V> e = m.getLowerEntry(key);
            return (e == null || tooLow(e.key)) ? null : e;
!!!8953730.java!!!	absHighFence() : Map::Entry
            return (toEnd ? null : (hiInclusive ?
                                    m.getHigherEntry(hi) :
                                    m.getCeilingEntry(hi)));
!!!8953858.java!!!	absLowFence() : Map::Entry
            return (fromStart ? null : (loInclusive ?
                                        m.getLowerEntry(lo) :
                                        m.getFloorEntry(lo)));
!!!8955138.java!!!	isEmpty() : boolean
            return (fromStart && toEnd) ? m.isEmpty() : entrySet().isEmpty();
!!!8955266.java!!!	size() : int
            return (fromStart && toEnd) ? m.size() : entrySet().size();
!!!8955394.java!!!	containsKey(inout key : Object) : boolean
            return inRange(key) && m.containsKey(key);
!!!8955522.java!!!	put(inout key : K, inout value : V) : V
            if (!inRange(key))
                throw new IllegalArgumentException("key out of range");
            return m.put(key, value);
!!!8955650.java!!!	get(inout key : Object) : V
            return !inRange(key) ? null :  m.get(key);
!!!8955778.java!!!	remove(inout key : Object) : V
            return !inRange(key) ? null : m.remove(key);
!!!8955906.java!!!	ceilingEntry(inout key : K) : Map::Entry
            return exportEntry(subCeiling(key));
!!!8956034.java!!!	ceilingKey(inout key : K) : K
            return keyOrNull(subCeiling(key));
!!!8956162.java!!!	higherEntry(inout key : K) : Map::Entry
            return exportEntry(subHigher(key));
!!!8956290.java!!!	higherKey(inout key : K) : K
            return keyOrNull(subHigher(key));
!!!8956418.java!!!	floorEntry(inout key : K) : Map::Entry
            return exportEntry(subFloor(key));
!!!8956546.java!!!	floorKey(inout key : K) : K
            return keyOrNull(subFloor(key));
!!!8956674.java!!!	lowerEntry(inout key : K) : Map::Entry
            return exportEntry(subLower(key));
!!!8956802.java!!!	lowerKey(inout key : K) : K
            return keyOrNull(subLower(key));
!!!8956930.java!!!	firstKey() : K
            return key(subLowest());
!!!8957058.java!!!	lastKey() : K
            return key(subHighest());
!!!8957186.java!!!	firstEntry() : Map::Entry
            return exportEntry(subLowest());
!!!8957314.java!!!	lastEntry() : Map::Entry
            return exportEntry(subHighest());
!!!8957442.java!!!	pollFirstEntry() : Map::Entry
            TreeMap.Entry<K,V> e = subLowest();
            Map.Entry<K,V> result = exportEntry(e);
            if (e != null)
                m.deleteEntry(e);
            return result;
!!!8957570.java!!!	pollLastEntry() : Map::Entry
            TreeMap.Entry<K,V> e = subHighest();
            Map.Entry<K,V> result = exportEntry(e);
            if (e != null)
                m.deleteEntry(e);
            return result;
!!!8957698.java!!!	navigableKeySet() : NavigableSet
            KeySet<K> nksv = navigableKeySetView;
            return (nksv != null) ? nksv :
                (navigableKeySetView = new TreeMap.KeySet<>(this));
!!!8957826.java!!!	keySet() : Set
            return navigableKeySet();
!!!8957954.java!!!	descendingKeySet() : NavigableSet
            return descendingMap().navigableKeySet();
!!!8958082.java!!!	subMap(inout fromKey : K, inout toKey : K) : SortedMap
            return subMap(fromKey, true, toKey, false);
!!!8958210.java!!!	headMap(inout toKey : K) : SortedMap
            return headMap(toKey, false);
!!!8958338.java!!!	tailMap(inout fromKey : K) : SortedMap
            return tailMap(fromKey, true);
