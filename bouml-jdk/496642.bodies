class MBeanAttributeInfo
!!!9760770.java!!!	MBeanAttributeInfo(inout name : String, inout type : String, inout description : String, inout isReadable : boolean, inout isWritable : boolean, inout isIs : boolean)
        this(name, type, description, isReadable, isWritable, isIs,
             (Descriptor) null);
!!!9760898.java!!!	MBeanAttributeInfo(inout name : String, inout type : String, inout description : String, inout isReadable : boolean, inout isWritable : boolean, inout isIs : boolean, inout descriptor : Descriptor)
        super(name, description, descriptor);

        this.attributeType = type;
        this.isRead = isReadable;
        this.isWrite = isWritable;
        if (isIs && !isReadable) {
            throw new IllegalArgumentException("Cannot have an \"is\" getter " +
                                               "for a non-readable attribute");
        }
        if (isIs && !type.equals("java.lang.Boolean") &&
                !type.equals("boolean")) {
            throw new IllegalArgumentException("Cannot have an \"is\" getter " +
                                               "for a non-boolean attribute");
        }
        this.is = isIs;
!!!9761026.java!!!	MBeanAttributeInfo(inout name : String, inout description : String, inout getter : Method, inout setter : Method)
        this(name,
             attributeType(getter, setter),
             description,
             (getter != null),
             (setter != null),
             isIs(getter),
             ImmutableDescriptor.union(Introspector.descriptorForElement(getter),
                                   Introspector.descriptorForElement(setter)));
!!!9761154.java!!!	clone() : Object
         try {
             return super.clone() ;
         } catch (CloneNotSupportedException e) {
             // should not happen as this class is cloneable
             return null;
         }
!!!9761282.java!!!	getType() : String
        return attributeType;
!!!9761410.java!!!	isReadable() : boolean
        return isRead;
!!!9761538.java!!!	isWritable() : boolean
        return isWrite;
!!!9761666.java!!!	isIs() : boolean
        return is;
!!!9761794.java!!!	toString() : String
        String access;
        if (isReadable()) {
            if (isWritable())
                access = "read/write";
            else
                access = "read-only";
        } else if (isWritable())
            access = "write-only";
        else
            access = "no-access";

        return
            getClass().getName() + "[" +
            "description=" + getDescription() + ", " +
            "name=" + getName() + ", " +
            "type=" + getType() + ", " +
            access + ", " +
            (isIs() ? "isIs, " : "") +
            "descriptor=" + getDescriptor() +
            "]";
!!!9761922.java!!!	equals(inout o : Object) : boolean
        if (o == this)
            return true;
        if (!(o instanceof MBeanAttributeInfo))
            return false;
        MBeanAttributeInfo p = (MBeanAttributeInfo) o;
        return (Objects.equals(p.getName(), getName()) &&
                Objects.equals(p.getType(), getType()) &&
                Objects.equals(p.getDescription(), getDescription()) &&
                Objects.equals(p.getDescriptor(), getDescriptor()) &&
                p.isReadable() == isReadable() &&
                p.isWritable() == isWritable() &&
                p.isIs() == isIs());
!!!9762050.java!!!	hashCode() : int
        return Objects.hash(getName(), getType());
!!!9762178.java!!!	isIs(inout getter : Method) : boolean
        return (getter != null &&
                getter.getName().startsWith("is") &&
                (getter.getReturnType().equals(Boolean.TYPE) ||
                 getter.getReturnType().equals(Boolean.class)));
!!!9762306.java!!!	attributeType(inout getter : Method, inout setter : Method) : String
        Class<?> type = null;

        if (getter != null) {
            if (getter.getParameterTypes().length != 0) {
                throw new IntrospectionException("bad getter arg count");
            }
            type = getter.getReturnType();
            if (type == Void.TYPE) {
                throw new IntrospectionException("getter " + getter.getName() +
                                                 " returns void");
            }
        }

        if (setter != null) {
            Class<?> params[] = setter.getParameterTypes();
            if (params.length != 1) {
                throw new IntrospectionException("bad setter arg count");
            }
            if (type == null)
                type = params[0];
            else if (type != params[0]) {
                throw new IntrospectionException("type mismatch between " +
                                                 "getter and setter");
            }
        }

        if (type == null) {
            throw new IntrospectionException("getter and setter cannot " +
                                             "both be null");
        }

        return type.getName();
