class WindowsScrollBarUI
!!!2842370.java!!!	createUI(inout c : JComponent) : ComponentUI
        return new WindowsScrollBarUI();
!!!2842498.java!!!	installDefaults() : void
        super.installDefaults();

        XPStyle xp = XPStyle.getXP();
        if (xp != null) {
            scrollbar.setBorder(null);
            horizontalThumbSize = getSize(scrollbar, xp, Part.SBP_THUMBBTNHORZ);
            verticalThumbSize = getSize(scrollbar, xp, Part.SBP_THUMBBTNVERT);
        } else {
            horizontalThumbSize = null;
            verticalThumbSize = null;
        }
!!!2842626.java!!!	getSize(inout component : Component, inout xp : XPStyle, inout part : Part) : Dimension
        Skin skin = xp.getSkin(component, part);
        return new Dimension(skin.getWidth(), skin.getHeight());
!!!2842754.java!!!	getMinimumThumbSize() : Dimension
        if ((horizontalThumbSize == null) || (verticalThumbSize == null)) {
            return super.getMinimumThumbSize();
        }
        return JScrollBar.HORIZONTAL == scrollbar.getOrientation()
                ? horizontalThumbSize
                : verticalThumbSize;
!!!2842882.java!!!	uninstallUI(inout c : JComponent) : void
        super.uninstallUI(c);
        thumbGrid = highlightGrid = null;
!!!2843010.java!!!	configureScrollBarColors() : void
        super.configureScrollBarColors();
        Color color = UIManager.getColor("ScrollBar.trackForeground");
        if (color != null && trackColor != null) {
            thumbGrid = Grid.getGrid(color, trackColor);
        }

        color = UIManager.getColor("ScrollBar.trackHighlightForeground");
        if (color != null && trackHighlightColor != null) {
            highlightGrid = Grid.getGrid(color, trackHighlightColor);
        }
!!!2843138.java!!!	createDecreaseButton(in orientation : int) : JButton
        return new WindowsArrowButton(orientation,
                                    UIManager.getColor("ScrollBar.thumb"),
                                    UIManager.getColor("ScrollBar.thumbShadow"),
                                    UIManager.getColor("ScrollBar.thumbDarkShadow"),
                                    UIManager.getColor("ScrollBar.thumbHighlight"));
!!!2843266.java!!!	createIncreaseButton(in orientation : int) : JButton
        return new WindowsArrowButton(orientation,
                                    UIManager.getColor("ScrollBar.thumb"),
                                    UIManager.getColor("ScrollBar.thumbShadow"),
                                    UIManager.getColor("ScrollBar.thumbDarkShadow"),
                                    UIManager.getColor("ScrollBar.thumbHighlight"));
!!!2843394.java!!!	createArrowButtonListener() : BasicScrollBarUI::ArrowButtonListener
        // we need to repaint the entire scrollbar because state change for each
        // button causes a state change for the thumb and other button on Vista
        if(XPStyle.isVista()) {
            return new ArrowButtonListener() {
                public void mouseEntered(MouseEvent evt) {
                    repaint();
                    super.mouseEntered(evt);
                }
                public void mouseExited(MouseEvent evt) {
                    repaint();
                    super.mouseExited(evt);
                }
                private void repaint() {
                    scrollbar.repaint();
                }
            };
        } else {
            return super.createArrowButtonListener();
        }
!!!2843522.java!!!	paintTrack(inout g : Graphics, inout c : JComponent, inout trackBounds : Rectangle) : void
        boolean v = (scrollbar.getOrientation() == JScrollBar.VERTICAL);

        XPStyle xp = XPStyle.getXP();
        if (xp != null) {
            JScrollBar sb = (JScrollBar)c;
            State state = State.NORMAL;
            // Pending: Implement rollover (hot) and pressed
            if (!sb.isEnabled()) {
                state = State.DISABLED;
            }
            Part part = v ? Part.SBP_LOWERTRACKVERT : Part.SBP_LOWERTRACKHORZ;
            xp.getSkin(sb, part).paintSkin(g, trackBounds, state);
        } else if (thumbGrid == null) {
            super.paintTrack(g, c, trackBounds);
        }
        else {
            thumbGrid.paint(g, trackBounds.x, trackBounds.y, trackBounds.width,
                            trackBounds.height);
            if (trackHighlight == DECREASE_HIGHLIGHT) {
                paintDecreaseHighlight(g);
            }
            else if (trackHighlight == INCREASE_HIGHLIGHT) {
                paintIncreaseHighlight(g);
            }
        }
!!!2843650.java!!!	paintThumb(inout g : Graphics, inout c : JComponent, inout thumbBounds : Rectangle) : void
        boolean v = (scrollbar.getOrientation() == JScrollBar.VERTICAL);

        XPStyle xp = XPStyle.getXP();
        if (xp != null) {
            JScrollBar sb = (JScrollBar)c;
            State state = State.NORMAL;
            if (!sb.isEnabled()) {
                state = State.DISABLED;
            } else if (isDragging) {
                state = State.PRESSED;
            } else if (isThumbRollover()) {
                state = State.HOT;
            } else if (XPStyle.isVista()) {
                if ((incrButton != null && incrButton.getModel().isRollover()) ||
                    (decrButton != null && decrButton.getModel().isRollover())) {
                    state = State.HOVER;
                }
            }
            // Paint thumb
            Part thumbPart = v ? Part.SBP_THUMBBTNVERT : Part.SBP_THUMBBTNHORZ;
            xp.getSkin(sb, thumbPart).paintSkin(g, thumbBounds, state);
            // Paint gripper
            Part gripperPart = v ? Part.SBP_GRIPPERVERT : Part.SBP_GRIPPERHORZ;
            Skin skin = xp.getSkin(sb, gripperPart);
            Insets gripperInsets = xp.getMargin(c, thumbPart, null, Prop.CONTENTMARGINS);
            if (gripperInsets == null ||
                (v && (thumbBounds.height - gripperInsets.top -
                       gripperInsets.bottom >= skin.getHeight())) ||
                (!v && (thumbBounds.width - gripperInsets.left -
                        gripperInsets.right >= skin.getWidth()))) {
                skin.paintSkin(g,
                               thumbBounds.x + (thumbBounds.width  - skin.getWidth()) / 2,
                               thumbBounds.y + (thumbBounds.height - skin.getHeight()) / 2,
                               skin.getWidth(), skin.getHeight(), state);
            }
        } else {
            super.paintThumb(g, c, thumbBounds);
        }
!!!2843778.java!!!	paintDecreaseHighlight(inout g : Graphics) : void
        if (highlightGrid == null) {
            super.paintDecreaseHighlight(g);
        }
        else {
            Insets insets = scrollbar.getInsets();
            Rectangle thumbR = getThumbBounds();
            int x, y, w, h;

            if (scrollbar.getOrientation() == JScrollBar.VERTICAL) {
                x = insets.left;
                y = decrButton.getY() + decrButton.getHeight();
                w = scrollbar.getWidth() - (insets.left + insets.right);
                h = thumbR.y - y;
            }
            else {
                x = decrButton.getX() + decrButton.getHeight();
                y = insets.top;
                w = thumbR.x - x;
                h = scrollbar.getHeight() - (insets.top + insets.bottom);
            }
            highlightGrid.paint(g, x, y, w, h);
        }
!!!2843906.java!!!	paintIncreaseHighlight(inout g : Graphics) : void
        if (highlightGrid == null) {
            super.paintDecreaseHighlight(g);
        }
        else {
            Insets insets = scrollbar.getInsets();
            Rectangle thumbR = getThumbBounds();
            int x, y, w, h;

            if (scrollbar.getOrientation() == JScrollBar.VERTICAL) {
                x = insets.left;
                y = thumbR.y + thumbR.height;
                w = scrollbar.getWidth() - (insets.left + insets.right);
                h = incrButton.getY() - y;
            }
            else {
                x = thumbR.x + thumbR.width;
                y = insets.top;
                w = incrButton.getX() - x;
                h = scrollbar.getHeight() - (insets.top + insets.bottom);
            }
            highlightGrid.paint(g, x, y, w, h);
        }
!!!2844034.java!!!	setThumbRollover(inout active : boolean) : void
        boolean old = isThumbRollover();
        super.setThumbRollover(active);
        // we need to repaint the entire scrollbar because state change for thumb
        // causes state change for incr and decr buttons on Vista
        if(XPStyle.isVista() && active != old) {
            scrollbar.repaint();
        }
