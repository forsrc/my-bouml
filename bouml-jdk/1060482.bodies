class PrefixTree
!!!8531458.java!!!	PrefixTree(inout k : String, inout v : String, inout child : DateTimeFormatterBuilder::PrefixTree)
            this.key = k;
            this.value = v;
            this.child = child;
            if (k.length() == 0){
                c0 = 0xffff;
            } else {
                c0 = key.charAt(0);
            }
!!!8531586.java!!!	newTree(inout context : DateTimeParseContext) : DateTimeFormatterBuilder::PrefixTree
            //if (!context.isStrict()) {
            //    return new LENIENT("", null, null);
            //}
            if (context.isCaseSensitive()) {
                return new PrefixTree("", null, null);
            }
            return new CI("", null, null);
!!!8531714.java!!!	newTree(inout keys : Set, inout context : DateTimeParseContext) : DateTimeFormatterBuilder::PrefixTree
            PrefixTree tree = newTree(context);
            for (String k : keys) {
                tree.add0(k, k);
            }
            return tree;
!!!8531842.java!!!	copyTree() : DateTimeFormatterBuilder::PrefixTree
            PrefixTree copy = new PrefixTree(key, value, null);
            if (child != null) {
                copy.child = child.copyTree();
            }
            if (sibling != null) {
                copy.sibling = sibling.copyTree();
            }
            return copy;
!!!8531970.java!!!	add(inout k : String, inout v : String) : boolean
            return add0(k, v);
!!!8532098.java!!!	add0(inout k : String, inout v : String) : boolean
            k = toKey(k);
            int prefixLen = prefixLength(k);
            if (prefixLen == key.length()) {
                if (prefixLen < k.length()) {  // down the tree
                    String subKey = k.substring(prefixLen);
                    PrefixTree c = child;
                    while (c != null) {
                        if (isEqual(c.c0, subKey.charAt(0))) {
                            return c.add0(subKey, v);
                        }
                        c = c.sibling;
                    }
                    // add the node as the child of the current node
                    c = newNode(subKey, v, null);
                    c.sibling = child;
                    child = c;
                    return true;
                }
                // have an existing <key, value> already, overwrite it
                // if (value != null) {
                //    return false;
                //}
                value = v;
                return true;
            }
            // split the existing node
            PrefixTree n1 = newNode(key.substring(prefixLen), value, child);
            key = k.substring(0, prefixLen);
            child = n1;
            if (prefixLen < k.length()) {
                PrefixTree n2 = newNode(k.substring(prefixLen), v, null);
                child.sibling = n2;
                value = null;
            } else {
                value = v;
            }
            return true;
!!!8532226.java!!!	match(inout text : CharSequence, in off : int, in end : int) : String
            if (!prefixOf(text, off, end)){
                return null;
            }
            if (child != null && (off += key.length()) != end) {
                PrefixTree c = child;
                do {
                    if (isEqual(c.c0, text.charAt(off))) {
                        String found = c.match(text, off, end);
                        if (found != null) {
                            return found;
                        }
                        return value;
                    }
                    c = c.sibling;
                } while (c != null);
            }
            return value;
!!!8532354.java!!!	match(inout text : CharSequence, inout pos : ParsePosition) : String
            int off = pos.getIndex();
            int end = text.length();
            if (!prefixOf(text, off, end)){
                return null;
            }
            off += key.length();
            if (child != null && off != end) {
                PrefixTree c = child;
                do {
                    if (isEqual(c.c0, text.charAt(off))) {
                        pos.setIndex(off);
                        String found = c.match(text, pos);
                        if (found != null) {
                            return found;
                        }
                        break;
                    }
                    c = c.sibling;
                } while (c != null);
            }
            pos.setIndex(off);
            return value;
!!!8532482.java!!!	toKey(inout k : String) : String
            return k;
!!!8532610.java!!!	newNode(inout k : String, inout v : String, inout child : DateTimeFormatterBuilder::PrefixTree) : DateTimeFormatterBuilder::PrefixTree
            return new PrefixTree(k, v, child);
!!!8532738.java!!!	isEqual(in c1 : char, in c2 : char) : boolean
            return c1 == c2;
!!!8532866.java!!!	prefixOf(inout text : CharSequence, in off : int, in end : int) : boolean
            if (text instanceof String) {
                return ((String)text).startsWith(key, off);
            }
            int len = key.length();
            if (len > end - off) {
                return false;
            }
            int off0 = 0;
            while (len-- > 0) {
                if (!isEqual(key.charAt(off0++), text.charAt(off++))) {
                    return false;
                }
            }
            return true;
!!!8532994.java!!!	prefixLength(inout k : String) : int
            int off = 0;
            while (off < k.length() && off < key.length()) {
                if (!isEqual(k.charAt(off), key.charAt(off))) {
                    return off;
                }
                off++;
            }
            return off;
