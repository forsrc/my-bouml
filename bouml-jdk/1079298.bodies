class SetFromMap
!!!8760450.java!!!	SetFromMap(inout map : Map)
            if (!map.isEmpty())
                throw new IllegalArgumentException("Map is non-empty");
            m = map;
            s = map.keySet();
!!!8760578.java!!!	clear() : void
        m.clear();
!!!8760706.java!!!	size() : int
 return m.size();
!!!8760834.java!!!	isEmpty() : boolean
 return m.isEmpty();
!!!8760962.java!!!	contains(inout o : Object) : boolean
 return m.containsKey(o);
!!!8761090.java!!!	remove(inout o : Object) : boolean
 return m.remove(o) != null;
!!!8761218.java!!!	add(inout e : E) : boolean
 return m.put(e, Boolean.TRUE) == null;
!!!8761346.java!!!	iterator() : Iterator
 return s.iterator();
!!!8761474.java!!!	toArray() : Object
 return s.toArray();
!!!8761602.java!!!	toArray(inout a : T [[]]) : T
 return s.toArray(a);
!!!8761730.java!!!	toString() : String
 return s.toString();
!!!8761858.java!!!	hashCode() : int
 return s.hashCode();
!!!8761986.java!!!	equals(inout o : Object) : boolean
 return o == this || s.equals(o);
!!!8762114.java!!!	containsAll(inout c : Collection) : boolean
return s.containsAll(c);
!!!8762242.java!!!	removeAll(inout c : Collection) : boolean
return s.removeAll(c);
!!!8762370.java!!!	retainAll(inout c : Collection) : boolean
return s.retainAll(c);
!!!8762498.java!!!	forEach(inout action : Consumer) : void
            s.forEach(action);
!!!8762626.java!!!	removeIf(inout filter : Predicate) : boolean
            return s.removeIf(filter);
!!!8762754.java!!!	spliterator() : Spliterator
return s.spliterator();
!!!8762882.java!!!	stream() : Stream
return s.stream();
!!!8763010.java!!!	parallelStream() : Stream
return s.parallelStream();
!!!8763138.java!!!	readObject(inout stream : ObjectInputStream) : void
            stream.defaultReadObject();
            s = m.keySet();
