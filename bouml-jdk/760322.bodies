class KeyInfo
!!!5382658.java!!!	KeyInfo(inout doc : Document)
        super(doc);

        XMLUtils.addReturnToElement(this.constructionElement);
!!!5382786.java!!!	KeyInfo(inout element : Element, inout baseURI : String)
        super(element, baseURI);

        Attr attr = element.getAttributeNodeNS(null, "Id");
        if (attr != null) {
            element.setIdAttributeNode(attr, true);
        }
!!!5382914.java!!!	setSecureValidation(inout secureValidation : boolean) : void
        this.secureValidation = secureValidation;
!!!5383042.java!!!	setId(inout id : String) : void
        if (id != null) {
            this.constructionElement.setAttributeNS(null, Constants._ATT_ID, id);
            this.constructionElement.setIdAttributeNS(null, Constants._ATT_ID, true);
        }
!!!5383170.java!!!	getId() : String
        return this.constructionElement.getAttributeNS(null, Constants._ATT_ID);
!!!5383298.java!!!	addKeyName(inout keynameString : String) : void
        this.add(new KeyName(this.doc, keynameString));
!!!5383426.java!!!	add(inout keyname : KeyName) : void
        this.constructionElement.appendChild(keyname.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5383554.java!!!	addKeyValue(inout pk : PublicKey) : void
        this.add(new KeyValue(this.doc, pk));
!!!5383682.java!!!	addKeyValue(inout unknownKeyValueElement : Element) : void
        this.add(new KeyValue(this.doc, unknownKeyValueElement));
!!!5383810.java!!!	add(inout dsakeyvalue : DSAKeyValue) : void
        this.add(new KeyValue(this.doc, dsakeyvalue));
!!!5383938.java!!!	add(inout rsakeyvalue : RSAKeyValue) : void
        this.add(new KeyValue(this.doc, rsakeyvalue));
!!!5384066.java!!!	add(inout pk : PublicKey) : void
        this.add(new KeyValue(this.doc, pk));
!!!5384194.java!!!	add(inout keyvalue : KeyValue) : void
        this.constructionElement.appendChild(keyvalue.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5384322.java!!!	addMgmtData(inout mgmtdata : String) : void
        this.add(new MgmtData(this.doc, mgmtdata));
!!!5384450.java!!!	add(inout mgmtdata : MgmtData) : void
        this.constructionElement.appendChild(mgmtdata.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5384578.java!!!	add(inout pgpdata : PGPData) : void
        this.constructionElement.appendChild(pgpdata.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5384706.java!!!	addRetrievalMethod(inout uri : String, inout transforms : Transforms, inout Type : String) : void
        this.add(new RetrievalMethod(this.doc, uri, transforms, Type));
!!!5384834.java!!!	add(inout retrievalmethod : RetrievalMethod) : void
        this.constructionElement.appendChild(retrievalmethod.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5384962.java!!!	add(inout spkidata : SPKIData) : void
        this.constructionElement.appendChild(spkidata.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5385090.java!!!	add(inout x509data : X509Data) : void
        if (x509Datas == null) {
            x509Datas = new ArrayList<X509Data>();
        }
        x509Datas.add(x509data);
        this.constructionElement.appendChild(x509data.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5385218.java!!!	add(inout encryptedKey : EncryptedKey) : void
        if (encryptedKeys == null) {
            encryptedKeys = new ArrayList<EncryptedKey>();
        }
        encryptedKeys.add(encryptedKey);
        XMLCipher cipher = XMLCipher.getInstance();
        this.constructionElement.appendChild(cipher.martial(encryptedKey));
!!!5385346.java!!!	addDEREncodedKeyValue(inout pk : PublicKey) : void
        this.add(new DEREncodedKeyValue(this.doc, pk));
!!!5385474.java!!!	add(inout derEncodedKeyValue : DEREncodedKeyValue) : void
        this.constructionElement.appendChild(derEncodedKeyValue.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5385602.java!!!	addKeyInfoReference(inout URI : String) : void
        this.add(new KeyInfoReference(this.doc, URI));
!!!5385730.java!!!	add(inout keyInfoReference : KeyInfoReference) : void
        this.constructionElement.appendChild(keyInfoReference.getElement());
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5385858.java!!!	addUnknownElement(inout element : Element) : void
        this.constructionElement.appendChild(element);
        XMLUtils.addReturnToElement(this.constructionElement);
!!!5385986.java!!!	lengthKeyName() : int
        return this.length(Constants.SignatureSpecNS, Constants._TAG_KEYNAME);
!!!5386114.java!!!	lengthKeyValue() : int
        return this.length(Constants.SignatureSpecNS, Constants._TAG_KEYVALUE);
!!!5386242.java!!!	lengthMgmtData() : int
        return this.length(Constants.SignatureSpecNS, Constants._TAG_MGMTDATA);
!!!5386370.java!!!	lengthPGPData() : int
        return this.length(Constants.SignatureSpecNS, Constants._TAG_PGPDATA);
!!!5386498.java!!!	lengthRetrievalMethod() : int
        return this.length(Constants.SignatureSpecNS, Constants._TAG_RETRIEVALMETHOD);
!!!5386626.java!!!	lengthSPKIData() : int
        return this.length(Constants.SignatureSpecNS, Constants._TAG_SPKIDATA);
!!!5386754.java!!!	lengthX509Data() : int
        if (x509Datas != null) {
            return x509Datas.size();
        }
        return this.length(Constants.SignatureSpecNS, Constants._TAG_X509DATA);
!!!5386882.java!!!	lengthDEREncodedKeyValue() : int
        return this.length(Constants.SignatureSpec11NS, Constants._TAG_DERENCODEDKEYVALUE);
!!!5387010.java!!!	lengthKeyInfoReference() : int
        return this.length(Constants.SignatureSpec11NS, Constants._TAG_KEYINFOREFERENCE);
!!!5387138.java!!!	lengthUnknownElement() : int
        int res = 0;
        NodeList nl = this.constructionElement.getChildNodes();

        for (int i = 0; i < nl.getLength(); i++) {
            Node current = nl.item(i);

            /**
             * $todo$ using this method, we don't see unknown Elements
             *  from Signature NS; revisit
             */
            if ((current.getNodeType() == Node.ELEMENT_NODE)
                && current.getNamespaceURI().equals(Constants.SignatureSpecNS)) {
                res++;
            }
        }

        return res;
!!!5387266.java!!!	itemKeyName(in i : int) : KeyName
        Element e =
            XMLUtils.selectDsNode(
                this.constructionElement.getFirstChild(), Constants._TAG_KEYNAME, i);

        if (e != null) {
            return new KeyName(e, this.baseURI);
        }
        return null;
!!!5387394.java!!!	itemKeyValue(in i : int) : KeyValue
        Element e =
            XMLUtils.selectDsNode(
                this.constructionElement.getFirstChild(), Constants._TAG_KEYVALUE, i);

        if (e != null) {
            return new KeyValue(e, this.baseURI);
        }
        return null;
!!!5387522.java!!!	itemMgmtData(in i : int) : MgmtData
        Element e =
            XMLUtils.selectDsNode(
                this.constructionElement.getFirstChild(), Constants._TAG_MGMTDATA, i);

        if (e != null) {
            return new MgmtData(e, this.baseURI);
        }
        return null;
!!!5387650.java!!!	itemPGPData(in i : int) : PGPData
        Element e =
            XMLUtils.selectDsNode(
                this.constructionElement.getFirstChild(), Constants._TAG_PGPDATA, i);

        if (e != null) {
            return new PGPData(e, this.baseURI);
        }
        return null;
!!!5387778.java!!!	itemRetrievalMethod(in i : int) : RetrievalMethod
        Element e =
            XMLUtils.selectDsNode(
                this.constructionElement.getFirstChild(), Constants._TAG_RETRIEVALMETHOD, i);

        if (e != null) {
            return new RetrievalMethod(e, this.baseURI);
        }
        return null;
!!!5387906.java!!!	itemSPKIData(in i : int) : SPKIData
        Element e =
            XMLUtils.selectDsNode(
                this.constructionElement.getFirstChild(), Constants._TAG_SPKIDATA, i);

        if (e != null) {
            return new SPKIData(e, this.baseURI);
        }
        return null;
!!!5388034.java!!!	itemX509Data(in i : int) : X509Data
        if (x509Datas != null) {
            return x509Datas.get(i);
        }
        Element e =
            XMLUtils.selectDsNode(
                this.constructionElement.getFirstChild(), Constants._TAG_X509DATA, i);

        if (e != null) {
            return new X509Data(e, this.baseURI);
        }
        return null;
!!!5388162.java!!!	itemEncryptedKey(in i : int) : EncryptedKey
        if (encryptedKeys != null) {
            return encryptedKeys.get(i);
        }
        Element e =
            XMLUtils.selectXencNode(
                this.constructionElement.getFirstChild(), EncryptionConstants._TAG_ENCRYPTEDKEY, i);

        if (e != null) {
            XMLCipher cipher = XMLCipher.getInstance();
            cipher.init(XMLCipher.UNWRAP_MODE, null);
            return cipher.loadEncryptedKey(e);
        }
        return null;
!!!5388290.java!!!	itemDEREncodedKeyValue(in i : int) : DEREncodedKeyValue
        Element e =
            XMLUtils.selectDs11Node(
                this.constructionElement.getFirstChild(), Constants._TAG_DERENCODEDKEYVALUE, i);

        if (e != null) {
            return new DEREncodedKeyValue(e, this.baseURI);
        }
        return null;
!!!5388418.java!!!	itemKeyInfoReference(in i : int) : KeyInfoReference
        Element e =
            XMLUtils.selectDs11Node(
                this.constructionElement.getFirstChild(), Constants._TAG_KEYINFOREFERENCE, i);

        if (e != null) {
            return new KeyInfoReference(e, this.baseURI);
        }
        return null;
!!!5388546.java!!!	itemUnknownElement(in i : int) : Element
        NodeList nl = this.constructionElement.getChildNodes();
        int res = 0;

        for (int j = 0; j < nl.getLength(); j++) {
            Node current = nl.item(j);

            /**
             * $todo$ using this method, we don't see unknown Elements
             *  from Signature NS; revisit
             */
            if ((current.getNodeType() == Node.ELEMENT_NODE)
                && current.getNamespaceURI().equals(Constants.SignatureSpecNS)) {
                res++;

                if (res == i) {
                    return (Element) current;
                }
            }
        }

        return null;
!!!5388674.java!!!	isEmpty() : boolean
        return this.constructionElement.getFirstChild() == null;
!!!5388802.java!!!	containsKeyName() : boolean
        return this.lengthKeyName() > 0;
!!!5388930.java!!!	containsKeyValue() : boolean
        return this.lengthKeyValue() > 0;
!!!5389058.java!!!	containsMgmtData() : boolean
        return this.lengthMgmtData() > 0;
!!!5389186.java!!!	containsPGPData() : boolean
        return this.lengthPGPData() > 0;
!!!5389314.java!!!	containsRetrievalMethod() : boolean
        return this.lengthRetrievalMethod() > 0;
!!!5389442.java!!!	containsSPKIData() : boolean
        return this.lengthSPKIData() > 0;
!!!5389570.java!!!	containsUnknownElement() : boolean
        return this.lengthUnknownElement() > 0;
!!!5389698.java!!!	containsX509Data() : boolean
        return this.lengthX509Data() > 0;
!!!5389826.java!!!	containsDEREncodedKeyValue() : boolean
        return this.lengthDEREncodedKeyValue() > 0;
!!!5389954.java!!!	containsKeyInfoReference() : boolean
        return this.lengthKeyInfoReference() > 0;
!!!5390082.java!!!	getPublicKey() : PublicKey
        PublicKey pk = this.getPublicKeyFromInternalResolvers();

        if (pk != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a key using the per-KeyInfo key resolvers");
            }

            return pk;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a key using the per-KeyInfo key resolvers");
        }

        pk = this.getPublicKeyFromStaticResolvers();

        if (pk != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a key using the system-wide key resolvers");
            }

            return pk;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a key using the system-wide key resolvers");
        }

        return null;
!!!5390210.java!!!	getPublicKeyFromStaticResolvers() : PublicKey
        Iterator<KeyResolverSpi> it = KeyResolver.iterator();
        while (it.hasNext()) {
            KeyResolverSpi keyResolver = it.next();
            keyResolver.setSecureValidation(secureValidation);
            Node currentChild = this.constructionElement.getFirstChild();
            String uri = this.getBaseURI();
            while (currentChild != null) {
                if (currentChild.getNodeType() == Node.ELEMENT_NODE) {
                    for (StorageResolver storage : storageResolvers) {
                        PublicKey pk =
                            keyResolver.engineLookupAndResolvePublicKey(
                                (Element) currentChild, uri, storage
                            );

                        if (pk != null) {
                            return pk;
                        }
                    }
                }
                currentChild = currentChild.getNextSibling();
            }
        }
        return null;
!!!5390338.java!!!	getPublicKeyFromInternalResolvers() : PublicKey
        for (KeyResolverSpi keyResolver : internalKeyResolvers) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "Try " + keyResolver.getClass().getName());
            }
            keyResolver.setSecureValidation(secureValidation);
            Node currentChild = this.constructionElement.getFirstChild();
            String uri = this.getBaseURI();
            while (currentChild != null)      {
                if (currentChild.getNodeType() == Node.ELEMENT_NODE) {
                    for (StorageResolver storage : storageResolvers) {
                        PublicKey pk =
                            keyResolver.engineLookupAndResolvePublicKey(
                                (Element) currentChild, uri, storage
                            );

                        if (pk != null) {
                            return pk;
                        }
                    }
                }
                currentChild = currentChild.getNextSibling();
            }
        }

        return null;
!!!5390466.java!!!	getX509Certificate() : X509Certificate
        // First search using the individual resolvers from the user
        X509Certificate cert = this.getX509CertificateFromInternalResolvers();

        if (cert != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a X509Certificate using the per-KeyInfo key resolvers");
            }

            return cert;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a X509Certificate using the per-KeyInfo key resolvers");
        }

        // Then use the system-wide Resolvers
        cert = this.getX509CertificateFromStaticResolvers();

        if (cert != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a X509Certificate using the system-wide key resolvers");
            }

            return cert;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a X509Certificate using the system-wide key resolvers");
        }

        return null;
!!!5390594.java!!!	getX509CertificateFromStaticResolvers() : X509Certificate
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE,
                "Start getX509CertificateFromStaticResolvers() with " + KeyResolver.length()
                + " resolvers"
            );
        }
        String uri = this.getBaseURI();
        Iterator<KeyResolverSpi> it = KeyResolver.iterator();
        while (it.hasNext()) {
            KeyResolverSpi keyResolver = it.next();
            keyResolver.setSecureValidation(secureValidation);
            X509Certificate cert = applyCurrentResolver(uri, keyResolver);
            if (cert != null) {
                return cert;
            }
        }
        return null;
!!!5390722.java!!!	applyCurrentResolver(inout uri : String, inout keyResolver : KeyResolverSpi) : X509Certificate
        Node currentChild = this.constructionElement.getFirstChild();
        while (currentChild != null)      {
            if (currentChild.getNodeType() == Node.ELEMENT_NODE) {
                for (StorageResolver storage : storageResolvers) {
                    X509Certificate cert =
                        keyResolver.engineLookupResolveX509Certificate(
                            (Element) currentChild, uri, storage
                        );

                    if (cert != null) {
                        return cert;
                    }
                }
            }
            currentChild = currentChild.getNextSibling();
        }
        return null;
!!!5390850.java!!!	getX509CertificateFromInternalResolvers() : X509Certificate
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE,
                "Start getX509CertificateFromInternalResolvers() with "
                + this.lengthInternalKeyResolver() + " resolvers"
            );
        }
        String uri = this.getBaseURI();
        for (KeyResolverSpi keyResolver : internalKeyResolvers) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "Try " + keyResolver.getClass().getName());
            }
            keyResolver.setSecureValidation(secureValidation);
            X509Certificate cert = applyCurrentResolver(uri, keyResolver);
            if (cert != null) {
                return cert;
            }
        }

        return null;
!!!5390978.java!!!	getSecretKey() : SecretKey
        SecretKey sk = this.getSecretKeyFromInternalResolvers();

        if (sk != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a secret key using the per-KeyInfo key resolvers");
            }

            return sk;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a secret key using the per-KeyInfo key resolvers");
        }

        sk = this.getSecretKeyFromStaticResolvers();

        if (sk != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a secret key using the system-wide key resolvers");
            }

            return sk;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a secret key using the system-wide key resolvers");
        }

        return null;
!!!5391106.java!!!	getSecretKeyFromStaticResolvers() : SecretKey
        Iterator<KeyResolverSpi> it = KeyResolver.iterator();
        while (it.hasNext()) {
            KeyResolverSpi keyResolver = it.next();
            keyResolver.setSecureValidation(secureValidation);

            Node currentChild = this.constructionElement.getFirstChild();
            String uri = this.getBaseURI();
            while (currentChild != null)      {
                if (currentChild.getNodeType() == Node.ELEMENT_NODE) {
                    for (StorageResolver storage : storageResolvers) {
                        SecretKey sk =
                            keyResolver.engineLookupAndResolveSecretKey(
                                (Element) currentChild, uri, storage
                            );

                        if (sk != null) {
                            return sk;
                        }
                    }
                }
                currentChild = currentChild.getNextSibling();
            }
        }
        return null;
!!!5391234.java!!!	getSecretKeyFromInternalResolvers() : SecretKey
        for (KeyResolverSpi keyResolver : internalKeyResolvers) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "Try " + keyResolver.getClass().getName());
            }
            keyResolver.setSecureValidation(secureValidation);
            Node currentChild = this.constructionElement.getFirstChild();
            String uri = this.getBaseURI();
            while (currentChild != null)      {
                if (currentChild.getNodeType() == Node.ELEMENT_NODE) {
                    for (StorageResolver storage : storageResolvers) {
                        SecretKey sk =
                            keyResolver.engineLookupAndResolveSecretKey(
                                (Element) currentChild, uri, storage
                            );

                        if (sk != null) {
                            return sk;
                        }
                    }
                }
                currentChild = currentChild.getNextSibling();
            }
        }

        return null;
!!!5391362.java!!!	getPrivateKey() : PrivateKey
        PrivateKey pk = this.getPrivateKeyFromInternalResolvers();

        if (pk != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a private key using the per-KeyInfo key resolvers");
            }
            return pk;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a secret key using the per-KeyInfo key resolvers");
        }

        pk = this.getPrivateKeyFromStaticResolvers();
        if (pk != null) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "I could find a private key using the system-wide key resolvers");
            }
            return pk;
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "I couldn't find a private key using the system-wide key resolvers");
        }

        return null;
!!!5391490.java!!!	getPrivateKeyFromStaticResolvers() : PrivateKey
        Iterator<KeyResolverSpi> it = KeyResolver.iterator();
        while (it.hasNext()) {
            KeyResolverSpi keyResolver = it.next();
            keyResolver.setSecureValidation(secureValidation);

            Node currentChild = this.constructionElement.getFirstChild();
            String uri = this.getBaseURI();
            while (currentChild != null)      {
                if (currentChild.getNodeType() == Node.ELEMENT_NODE) {
                    // not using StorageResolvers at the moment
                    // since they cannot return private keys
                    PrivateKey pk =
                        keyResolver.engineLookupAndResolvePrivateKey(
                            (Element) currentChild, uri, null
                        );

                    if (pk != null) {
                        return pk;
                    }
                }
                currentChild = currentChild.getNextSibling();
            }
        }
        return null;
!!!5391618.java!!!	getPrivateKeyFromInternalResolvers() : PrivateKey
        for (KeyResolverSpi keyResolver : internalKeyResolvers) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "Try " + keyResolver.getClass().getName());
            }
            keyResolver.setSecureValidation(secureValidation);
            Node currentChild = this.constructionElement.getFirstChild();
            String uri = this.getBaseURI();
            while (currentChild != null) {
                if (currentChild.getNodeType() == Node.ELEMENT_NODE) {
                    // not using StorageResolvers at the moment
                    // since they cannot return private keys
                    PrivateKey pk =
                        keyResolver.engineLookupAndResolvePrivateKey(
                            (Element) currentChild, uri, null
                        );

                    if (pk != null) {
                        return pk;
                    }
                }
                currentChild = currentChild.getNextSibling();
            }
        }

        return null;
!!!5391746.java!!!	registerInternalKeyResolver(inout realKeyResolver : KeyResolverSpi) : void
        this.internalKeyResolvers.add(realKeyResolver);
!!!5391874.java!!!	lengthInternalKeyResolver() : int
        return this.internalKeyResolvers.size();
!!!5392002.java!!!	itemInternalKeyResolver(in i : int) : KeyResolverSpi
        return this.internalKeyResolvers.get(i);
!!!5392130.java!!!	addStorageResolver(inout storageResolver : StorageResolver) : void
        if (storageResolvers == nullList) {
            // Replace the default null StorageResolver
            storageResolvers = new ArrayList<StorageResolver>();
        }
        this.storageResolvers.add(storageResolver);
!!!5392258.java!!!	getBaseLocalName() : String
        return Constants._TAG_KEYINFO;
