class GIFMetadata
!!!1764226.java!!!	fatal(inout node : Node, inout reason : String) : void
        throw new IIOInvalidTreeException(reason, node);
!!!1764354.java!!!	getStringAttribute(inout node : Node, inout name : String, inout defaultValue : String, inout required : boolean, inout range : String [[]]) : String
        Node attr = node.getAttributes().getNamedItem(name);
        if (attr == null) {
            if (!required) {
                return defaultValue;
            } else {
                fatal(node, "Required attribute " + name + " not present!");
            }
        }
        String value = attr.getNodeValue();

        if (range != null) {
            if (value == null) {
                fatal(node,
                      "Null value for "+node.getNodeName()+
                      " attribute "+name+"!");
            }
            boolean validValue = false;
            int len = range.length;
            for (int i = 0; i < len; i++) {
                if (value.equals(range[i])) {
                    validValue = true;
                    break;
                }
            }
            if (!validValue) {
                fatal(node,
                      "Bad value for "+node.getNodeName()+
                      " attribute "+name+"!");
            }
        }

        return value;
!!!1764482.java!!!	getIntAttribute(inout node : Node, inout name : String, in defaultValue : int, inout required : boolean, inout bounded : boolean, in min : int, in max : int) : int
        String value = getStringAttribute(node, name, null, required, null);
        if (value == null || "".equals(value)) {
            return defaultValue;
        }

        int intValue = defaultValue;
        try {
            intValue = Integer.parseInt(value);
        } catch (NumberFormatException e) {
            fatal(node,
                  "Bad value for "+node.getNodeName()+
                  " attribute "+name+"!");
        }
        if (bounded && (intValue < min || intValue > max)) {
            fatal(node,
                  "Bad value for "+node.getNodeName()+
                  " attribute "+name+"!");
        }
        return intValue;
!!!1764610.java!!!	getFloatAttribute(inout node : Node, inout name : String, in defaultValue : float, inout required : boolean) : float
        String value = getStringAttribute(node, name, null, required, null);
        if (value == null) {
            return defaultValue;
        }
        return Float.parseFloat(value);
!!!1764738.java!!!	getIntAttribute(inout node : Node, inout name : String, inout bounded : boolean, in min : int, in max : int) : int
        return getIntAttribute(node, name, -1, true, bounded, min, max);
!!!1764866.java!!!	getFloatAttribute(inout node : Node, inout name : String) : float
        return getFloatAttribute(node, name, -1.0F, true);
!!!1764994.java!!!	getBooleanAttribute(inout node : Node, inout name : String, inout defaultValue : boolean, inout required : boolean) : boolean
        Node attr = node.getAttributes().getNamedItem(name);
        if (attr == null) {
            if (!required) {
                return defaultValue;
            } else {
                fatal(node, "Required attribute " + name + " not present!");
            }
        }
        String value = attr.getNodeValue();
        // Allow lower case booleans for backward compatibility, #5082756
        if (value.equals("TRUE") || value.equals("true")) {
            return true;
        } else if (value.equals("FALSE") || value.equals("false")) {
            return false;
        } else {
            fatal(node, "Attribute " + name + " must be 'TRUE' or 'FALSE'!");
            return false;
        }
!!!1765122.java!!!	getBooleanAttribute(inout node : Node, inout name : String) : boolean
        return getBooleanAttribute(node, name, false, true);
!!!1765250.java!!!	getEnumeratedAttribute(inout node : Node, inout name : String, inout legalNames : String [[]], in defaultValue : int, inout required : boolean) : int
        Node attr = node.getAttributes().getNamedItem(name);
        if (attr == null) {
            if (!required) {
                return defaultValue;
            } else {
                fatal(node, "Required attribute " + name + " not present!");
            }
        }
        String value = attr.getNodeValue();
        for (int i = 0; i < legalNames.length; i++) {
            if(value.equals(legalNames[i])) {
                return i;
            }
        }

        fatal(node, "Illegal value for attribute " + name + "!");
        return -1;
!!!1765378.java!!!	getEnumeratedAttribute(inout node : Node, inout name : String, inout legalNames : String [[]]) : int
        return getEnumeratedAttribute(node, name, legalNames, -1, true);
!!!1765506.java!!!	getAttribute(inout node : Node, inout name : String, inout defaultValue : String, inout required : boolean) : String
        Node attr = node.getAttributes().getNamedItem(name);
        if (attr == null) {
            if (!required) {
                return defaultValue;
            } else {
                fatal(node, "Required attribute " + name + " not present!");
            }
        }
        return attr.getNodeValue();
!!!1765634.java!!!	getAttribute(inout node : Node, inout name : String) : String
        return getAttribute(node, name, null, true);
!!!1765762.java!!!	GIFMetadata(inout standardMetadataFormatSupported : boolean, inout nativeMetadataFormatName : String, inout nativeMetadataFormatClassName : String, inout extraMetadataFormatNames : String [[]], inout extraMetadataFormatClassNames : String [[]])
        super(standardMetadataFormatSupported,
              nativeMetadataFormatName,
              nativeMetadataFormatClassName,
              extraMetadataFormatNames,
              extraMetadataFormatClassNames);
!!!1765890.java!!!	mergeTree(inout formatName : String, inout root : Node) : void
        if (formatName.equals(nativeMetadataFormatName)) {
            if (root == null) {
                throw new IllegalArgumentException("root == null!");
            }
            mergeNativeTree(root);
        } else if (formatName.equals
                  (IIOMetadataFormatImpl.standardMetadataFormatName)) {
            if (root == null) {
                throw new IllegalArgumentException("root == null!");
            }
            mergeStandardTree(root);
        } else {
            throw new IllegalArgumentException("Not a recognized format!");
        }
!!!1766018.java!!!	getColorTable(inout colorTableNode : Node, inout entryNodeName : String, inout lengthExpected : boolean, in expectedLength : int) : byte
        byte[] red = new byte[256];
        byte[] green  = new byte[256];
        byte[] blue = new byte[256];
        int maxIndex = -1;

        Node entry = colorTableNode.getFirstChild();
        if (entry == null) {
            fatal(colorTableNode, "Palette has no entries!");
        }

        while (entry != null) {
            if (!entry.getNodeName().equals(entryNodeName)) {
                fatal(colorTableNode,
                      "Only a "+entryNodeName+" may be a child of a "+
                      entry.getNodeName()+"!");
            }

            int index = getIntAttribute(entry, "index", true, 0, 255);
            if (index > maxIndex) {
                maxIndex = index;
            }
            red[index] = (byte)getIntAttribute(entry, "red", true, 0, 255);
            green[index] = (byte)getIntAttribute(entry, "green", true, 0, 255);
            blue[index] = (byte)getIntAttribute(entry, "blue", true, 0, 255);

            entry = entry.getNextSibling();
        }

        int numEntries = maxIndex + 1;

        if (lengthExpected && numEntries != expectedLength) {
            fatal(colorTableNode, "Unexpected length for palette!");
        }

        byte[] colorTable = new byte[3*numEntries];
        for (int i = 0, j = 0; i < numEntries; i++) {
            colorTable[j++] = red[i];
            colorTable[j++] = green[i];
            colorTable[j++] = blue[i];
        }

        return colorTable;
