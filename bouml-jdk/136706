format 222
"connection" // jdk1.8::com::sun::corba::se::spi::legacy::connection
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/corba/se/spi/legacy/connection/"
  java_package "com.sun.corba.se.spi.legacy.connection"
  classview 134402 "connection"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 177410 "Connection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents the connection on which a request is made.
"
      operation 706690 "getSocket"
	public return_type class_ref 209154 // Socket
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 208770 "ORBSocketFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p>
DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p>

This interface gives one the ability to plug in their own socket
factory class to an ORB. <p>

Usage: <p>

One specifies a class which implements this interface via the

    <code>ORBConstants.SOCKET_FACTORY_CLASS_PROPERTY</code>

property. <p>

Example: <p>

<pre>
  -Dcom.sun.CORBA.connection.ORBSocketFactoryClass=MySocketFactory
</pre> <p>

Typically one would use the same socket factory class on both the
server side and the client side (but this is not required). <p>

A <code>ORBSocketFactory</code> class should have a public default
constructor which is called once per instantiating ORB.init call.
That ORB then calls the methods of that <code>ORBSocketFactory</code>
to obtain client and server sockets. <p>

This interface also supports multiple server end points.  See the
documentation on <code>createServerSocket</code> below.

"
      classrelation 260226 // IIOP_CLEAR_TEXT (<unidirectional association>)
	relation 260226 --->
	  a role_name "IIOP_CLEAR_TEXT" init_value " \"IIOP_CLEAR_TEXT\"" class_relation const_relation public
	    comment "
DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p>

A server ORB always creates an \"IIOP_CLEAR_TEXT\" listening port.
That port is put into IOP profiles of object references exported
by an ORB. <p>

If

    <code>createServerSocket(String type, int port)</code>

is passed <code>IIOP_CLEAR_TEXT</code> as a <code>type</code>
argument it should then call and return

    <code>new java.net.ServerSocket(int port)</code> <p>

If

    <code>createSocket(SocketInfo socketInfo)</code>

is passed <code>IIOP_CLEAR_TEXT</code> in
<code>socketInfo.getType()</code> it should
then call and return

<pre>
    new java.net.Socket(socketInfo.getHost(),
                        socketInfo.getPort())
</pre>


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 260226 // IIOP_CLEAR_TEXT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 687234 "createServerSocket"
	public return_type class_ref 208898 // ServerSocket
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p>

This method is used by a server side ORB. <p>

When an ORB needs to create a listen socket on which connection
requests are accepted it calls

    <code>createServerSocket(String type, int port)</code>.

The type argument says which type of socket should be created. <p>

The interpretation of the type argument is the responsibility of
an instance of <code>ORBSocketFactory</code>, except in the case
of <code>IIOP_CLEAR_TEXT</code>, in which case a standard server
socket should be created. <p>


Multiple Server Port API: <p>

In addition to the IIOP_CLEAR_TEXT listening port, it is possible
to specify that an ORB listen on additional port of specific types. <p>

This API allows one to specify that an ORB should create an X,
or an X and a Y listen socket. <p>

If X, to the user, means SSL, then one just plugs in an SSL
socket factory. <p>

Or, another example, if X and Y, to the user, means SSL without
authentication and SSL with authentication respectively, then they
plug in a factory which will either create an X or a Y socket
depending on the type given to

    <code>createServerSocket(String type, int port)</code>. <p>

One specifies multiple listening ports (in addition to the
default IIOP_CLEAR_TEXT port) using the

    <code>ORBConstants.LISTEN_SOCKET_PROPERTY</code>

property. <p>

Example usage:<p>

<pre>
   ... \\
   -Dcom.sun.CORBA.connection.ORBSocketFactoryClass=com.my.MySockFact \\
   -Dcom.sun.CORBA.connection.ORBListenSocket=SSL:0,foo:1 \\
   ...
</pre>

The meaning of the \"type\" (SSL and foo above) is controlled
by the user. <p>

ORBListenSocket is only meaningful for servers. <p>

The property value is interpreted as follows.  For each
type/number pair: <p>

If number is 0 then use an emphemeral port for the listener of
the associated type. <p>

If number is greater then 0 use that port number. <p>

An ORB creates a listener socket for each type
specified by the user by calling

   <code>createServerSocket(String type, int port)</code>

with the type specified by the user. <p>

After an ORB is initialized and the RootPOA has been resolved,
it is then listening on
all the end points which were specified.  It may be necessary
to add this additional end point information to object references
exported by this ORB.  <p>

Each object reference will contain the ORB's default IIOP_CLEAR_TEXT
end point in its IOP profile.  To add additional end point information
(i.e., an SSL port) to an IOR (i.e., an object reference) one needs
to intercept IOR creation using
an <code>PortableInterceptor::IORInterceptor</code>. <p>

Using PortableInterceptors (with a non-standard extension): <p>

Register an <code>IORInterceptor</code>.  Inside its
<code>establish_components</code> operation:

<pre>

com.sun.corba.se.spi.legacy.interceptor.IORInfoExt ext;
ext = (com.sun.corba.se.spi.legacy.interceptor.IORInfoExt)info;

int port = ext.getServerPort(\"myType\");

</pre>

Once you have the port you may add information to references
created by the associated adapter by calling

   <code>IORInfo::add_ior_component</code><p> <p>


Note: if one is using a POA and the lifespan policy of that
POA is persistent then the port number returned
by <code>getServerPort</code> <em>may</em>
be the corresponding ORBD port, depending on whether the POA/ORBD
protocol is the present port exchange or if, in the future,
the protocol is based on object reference template exchange.
In either
case, the port returned will be correct for the protocol.
(In more detail, if the port exchange protocol is used then
getServerPort will return the ORBD's port since the port
exchange happens before, at ORB initialization.
If object reference
exchange is used then the server's transient port will be returned
since the templates are exchanged after adding components.) <p>


Persistent object reference support: <p>

When creating persistent object references with alternate
type/port info, ones needs to configure the ORBD to also support
this alternate info.  This is done as follows: <p>

- Give the ORBD the same socket factory you gave to the client
and server. <p>

- specify ORBListenSocket ports of the same types that your
servers support.  You should probably specify explicit port
numbers for ORBD if you embed these numbers inside IORs. <p>

Note: when using the port exchange protocol
the ORBD and servers will exchange port
numbers for each given type so they know about each other.
When using object reference template exchange the server's
transient ports are contained in the template. <p>


- specify your <code>BadServerIdHandler</code> (discussed below)
using the

   <code>ORBConstants.BAD_SERVER_ID_HANDLER_CLASS_PROPERTY</code> <p>

Example: <p>

<pre>

-Dcom.sun.CORBA.POA.ORBBadServerIdHandlerClass=corba.socketPersistent.MyBadServerIdHandler

</pre>

The <code>BadServerIdHandler</code> ...<p>

See <code>com.sun.corba.se.impl.activation.ServerManagerImpl.handle</code>
for example code on writing a bad server id handler.  NOTE:  This
is an unsupported internal API.  It will not exist in future releases.
<p>


Secure connections to other services: <p>

If one wants secure connections to other services such as
Naming then one should configure them with the same

    <code>SOCKET_FACTORY_CLASS_PROPERTY</code> and
    <code>LISTEN_SOCKET_PROPERTY</code>

as used by other clients and servers in your distributed system. <p>

"
      end

      operation 687362 "getEndPointInfo"
	public return_type class_ref 209026 // SocketInfo
	nparams 3
	  param inout name "orb" type class_ref 128386 // ORB
	  param inout name "ior" type class_ref 164354 // IOR
	  param inout name "socketInfo" type class_ref 209026 // SocketInfo
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p>

This method is used by a client side ORB. <p>

Each time a client invokes on an object reference, the reference's
associated ORB will call

<pre>
   getEndPointInfo(ORB orb,
                   IOR ior,
                   SocketInfo socketInfo)
</pre>

NOTE: The type of the <code>ior</code> argument is an internal
representation for efficiency.  If the <code>ORBSocketFactory</code>
interface ever becomes standardized then the <code>ior</code> will
most likely change to a standard type (e.g., a stringified ior,
an <code>org.omg.IOP.IOR</code>, or ...). <p>

Typically, this method will look at tagged components in the
given <code>ior</code> to determine what type of socket to create. <p>

Typically, the <code>ior</code> will contain a tagged component
specifying an alternate port type and number.  <p>

This method should return an <code>SocketInfo</code> object
containing the type/host/port to be used for the connection.

If there are no appropriate tagged components then this method
should return an <code>SocketInfo</code> object with the type
<code>IIOP_CLEAR_TEXT</code> and host/port from the ior's IOP
profile. <p>

If the ORB already has an existing connection to the returned
type/host/port, then that connection is used.  Otherwise the ORB calls

   <code>createSocket(SocketInfo socketInfo)</code> <p>

The <code>orb</code> argument is useful for handling
the <code>ior</code> argument. <p>

The <code>SocketInfo</code> given to <code>getEndPointInfo</code>
is either null or an object obtained
from <code>GetEndPointInfoAgainException</code> <p>

"
      end

      operation 687490 "createSocket"
	public return_type class_ref 209154 // Socket
	nparams 1
	  param inout name "socketInfo" type class_ref 209026 // SocketInfo
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 209282 // GetEndPointInfoAgainException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DEPRECATED.  DEPRECATED. DEPRECATED. DEPRECATED. <p

This method is used by a client side ORB. <p>

This method should return a client socket of the given
type/host/port. <p>

Note: the <code>SocketInfo</code> is the same instance as was
returned by <code>getSocketInfo</code> so extra cookie info may
be attached. <p>

If this method throws GetEndPointInfoAgainException then the
ORB calls <code>getEndPointInfo</code> again, passing it the
<code>SocketInfo</code> object contained in the exception. <p>

"
      end
    end

    class 209282 "GetEndPointInfoAgainException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised by <code>ORBSocketFactory.createSocket</code>.
It informs the ORB that it should call
<code>ORBSocketFactory.getEndPointInfo</code> again with the
given <code>socketInfo</code> object as an argument (i.e., a cookie).

"
      classrelation 496386 // <generalisation>
	relation 496386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 496386 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 496514 // socketInfo (<unidirectional association>)
	relation 496514 --->
	  a role_name "socketInfo" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 496514 // socketInfo (<unidirectional association>)
	  b parent class_ref 209026 // SocketInfo
      end

      operation 1614722 "GetEndPointInfoAgainException"
	public explicit_return_type ""
	nparams 1
	  param inout name "socketInfo" type class_ref 209026 // SocketInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1614850 "getEndPointInfo"
	public return_type class_ref 209026 // SocketInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 209538 "LegacyServerSocketEndPointInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LegacyServerSocketEndPointInfo is an abstraction of a port.
"
      operation 688642 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "e.g.: \"CLEAR_TEXT\", \"SSL\", ...
"
      end

      operation 688770 "getHostName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the host name of this end point. Subcontracts must use this
instead of InetAddress.getHostName() because this would take
into account the value of the ORBServerHost property.
"
      end

      operation 688898 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 689026 "getLocatorPort"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The ORBD's proxy port of this end point.
Note: Pre-ORT \"port-exchange\" model.
"
      end

      operation 689154 "setLocatorPort"
	public explicit_return_type "void"
	nparams 1
	  param in name "port" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 260994 // DEFAULT_ENDPOINT (<unidirectional association>)
	relation 260994 --->
	  a role_name "DEFAULT_ENDPOINT" init_value " \"DEFAULT_ENDPOINT\"" class_relation const_relation public
	    comment " NAME is used while we still have a \"port-exchange\" ORBD
 to get what used to be called \"default\" or \"bootstrap\" endpoints.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 260994 // DEFAULT_ENDPOINT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 261122 // BOOT_NAMING (<unidirectional association>)
	relation 261122 --->
	  a role_name "BOOT_NAMING" init_value " \"BOOT_NAMING\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 261122 // BOOT_NAMING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 261250 // NO_NAME (<unidirectional association>)
	relation 261250 --->
	  a role_name "NO_NAME" init_value " \"NO_NAME\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 261250 // NO_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 689282 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 209794 "LegacyServerSocketManager"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "@author Harold Carr
"
      operation 690818 "legacyGetTransientServerPort"
	public explicit_return_type "int"
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 690946 "legacyGetPersistentServerPort"
	public explicit_return_type "int"
	nparams 1
	  param inout name "socketType" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 691074 "legacyGetTransientOrPersistentServerPort"
	public explicit_return_type "int"
	nparams 1
	  param inout name "socketType" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 691202 "legacyGetEndpoint"
	public return_type class_ref 209538 // LegacyServerSocketEndPointInfo
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 691330 "legacyIsLocalServerPort"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "port" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 131970 "connection"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 169602 "ORBSocketFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.ServerSocket;
import java.net.Socket;
import java.io.IOException;
import com.sun.corba.se.spi.ior.IOR;
import com.sun.corba.se.spi.transport.SocketInfo;
${definition}"
      associated_elems
	class_ref 208770 // ORBSocketFactory
      end
      comment "Copyright (c) 2000, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 169986 "LegacyServerSocketEndPointInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 209538 // LegacyServerSocketEndPointInfo
      end
      comment "Copyright (c) 1998, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 170242 "LegacyServerSocketManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import com.sun.corba.se.spi.legacy.connection.LegacyServerSocketEndPointInfo;
import com.sun.corba.se.spi.transport.SocketOrChannelAcceptor;
${definition}"
      associated_elems
	class_ref 209794 // LegacyServerSocketManager
      end
      comment "Copyright (c) 1998, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 171650 "Connection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 177410 // Connection
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 248066 "GetEndPointInfoAgainException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.corba.se.spi.transport.SocketInfo;
${definition}"
      associated_elems
	class_ref 209282 // GetEndPointInfoAgainException
      end
      comment "Copyright (c) 2000, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
