class List
!!!6261250.java!!!	List()
        this(0, false);
!!!6261378.java!!!	List(in rows : int)
        this(rows, false);
!!!6261506.java!!!	List(in rows : int, inout multipleMode : boolean)
        GraphicsEnvironment.checkHeadless();
        this.rows = (rows != 0) ? rows : DEFAULT_VISIBLE_ROWS;
        this.multipleMode = multipleMode;
!!!6261634.java!!!	constructComponentName() : String
        synchronized (List.class) {
            return base + nameCounter++;
        }
!!!6261762.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = getToolkit().createList(this);
            super.addNotify();
        }
!!!6261890.java!!!	removeNotify() : void
        synchronized (getTreeLock()) {
            ListPeer peer = (ListPeer)this.peer;
            if (peer != null) {
                selected = peer.getSelectedIndexes();
            }
            super.removeNotify();
        }
!!!6262018.java!!!	getItemCount() : int
        return countItems();
!!!6262146.java!!!	countItems() : int
        return items.size();
!!!6262274.java!!!	getItem(in index : int) : String
        return getItemImpl(index);
!!!6262402.java!!!	getItemImpl(in index : int) : String
        return items.elementAt(index);
!!!6262530.java!!!	getItems() : String
        String itemCopies[] = new String[items.size()];
        items.copyInto(itemCopies);
        return itemCopies;
!!!6262658.java!!!	add(inout item : String) : void
        addItem(item);
!!!6262786.java!!!	addItem(inout item : String) : void
        addItem(item, -1);
!!!6262914.java!!!	add(inout item : String, in index : int) : void
        addItem(item, index);
!!!6263042.java!!!	addItem(inout item : String, in index : int) : void
        if (index < -1 || index >= items.size()) {
            index = -1;
        }

        if (item == null) {
            item = "";
        }

        if (index == -1) {
            items.addElement(item);
        } else {
            items.insertElementAt(item, index);
        }

        ListPeer peer = (ListPeer)this.peer;
        if (peer != null) {
            peer.add(item, index);
        }
!!!6263170.java!!!	replaceItem(inout newValue : String, in index : int) : void
        remove(index);
        add(newValue, index);
!!!6263298.java!!!	removeAll() : void
        clear();
!!!6263426.java!!!	clear() : void
        ListPeer peer = (ListPeer)this.peer;
        if (peer != null) {
            peer.removeAll();
        }
        items = new Vector<>();
        selected = new int[0];
!!!6263554.java!!!	remove(inout item : String) : void
        int index = items.indexOf(item);
        if (index < 0) {
            throw new IllegalArgumentException("item " + item +
                                               " not found in list");
        } else {
            remove(index);
        }
!!!6263682.java!!!	remove(in position : int) : void
        delItem(position);
!!!6263810.java!!!	delItem(in position : int) : void
        delItems(position, position);
!!!6263938.java!!!	getSelectedIndex() : int
        int sel[] = getSelectedIndexes();
        return (sel.length == 1) ? sel[0] : -1;
!!!6264066.java!!!	getSelectedIndexes() : int
        ListPeer peer = (ListPeer)this.peer;
        if (peer != null) {
            selected = peer.getSelectedIndexes();
        }
        return selected.clone();
!!!6264194.java!!!	getSelectedItem() : String
        int index = getSelectedIndex();
        return (index < 0) ? null : getItem(index);
!!!6264322.java!!!	getSelectedItems() : String
        int sel[] = getSelectedIndexes();
        String str[] = new String[sel.length];
        for (int i = 0 ; i < sel.length ; i++) {
            str[i] = getItem(sel[i]);
        }
        return str;
!!!6264450.java!!!	getSelectedObjects() : Object
        return getSelectedItems();
!!!6264578.java!!!	select(in index : int) : void
        // Bug #4059614: select can't be synchronized while calling the peer,
        // because it is called from the Window Thread.  It is sufficient to
        // synchronize the code that manipulates 'selected' except for the
        // case where the peer changes.  To handle this case, we simply
        // repeat the selection process.

        ListPeer peer;
        do {
            peer = (ListPeer)this.peer;
            if (peer != null) {
                peer.select(index);
                return;
            }

            synchronized(this)
            {
                boolean alreadySelected = false;

                for (int i = 0 ; i < selected.length ; i++) {
                    if (selected[i] == index) {
                        alreadySelected = true;
                        break;
                    }
                }

                if (!alreadySelected) {
                    if (!multipleMode) {
                        selected = new int[1];
                        selected[0] = index;
                    } else {
                        int newsel[] = new int[selected.length + 1];
                        System.arraycopy(selected, 0, newsel, 0,
                                         selected.length);
                        newsel[selected.length] = index;
                        selected = newsel;
                    }
                }
            }
        } while (peer != this.peer);
!!!6264706.java!!!	deselect(in index : int) : void
        ListPeer peer = (ListPeer)this.peer;
        if (peer != null) {
            if (isMultipleMode() || (getSelectedIndex() == index)) {
                peer.deselect(index);
            }
        }

        for (int i = 0 ; i < selected.length ; i++) {
            if (selected[i] == index) {
                int newsel[] = new int[selected.length - 1];
                System.arraycopy(selected, 0, newsel, 0, i);
                System.arraycopy(selected, i+1, newsel, i, selected.length - (i+1));
                selected = newsel;
                return;
            }
        }
!!!6264834.java!!!	isIndexSelected(in index : int) : boolean
        return isSelected(index);
!!!6264962.java!!!	isSelected(in index : int) : boolean
        int sel[] = getSelectedIndexes();
        for (int i = 0 ; i < sel.length ; i++) {
            if (sel[i] == index) {
                return true;
            }
        }
        return false;
!!!6265090.java!!!	getRows() : int
        return rows;
!!!6265218.java!!!	isMultipleMode() : boolean
        return allowsMultipleSelections();
!!!6265346.java!!!	allowsMultipleSelections() : boolean
        return multipleMode;
!!!6265474.java!!!	setMultipleMode(inout b : boolean) : void
        setMultipleSelections(b);
!!!6265602.java!!!	setMultipleSelections(inout b : boolean) : void
        if (b != multipleMode) {
            multipleMode = b;
            ListPeer peer = (ListPeer)this.peer;
            if (peer != null) {
                peer.setMultipleMode(b);
            }
        }
!!!6265730.java!!!	getVisibleIndex() : int
        return visibleIndex;
!!!6265858.java!!!	makeVisible(in index : int) : void
        visibleIndex = index;
        ListPeer peer = (ListPeer)this.peer;
        if (peer != null) {
            peer.makeVisible(index);
        }
!!!6265986.java!!!	getPreferredSize(in rows : int) : Dimension
        return preferredSize(rows);
!!!6266114.java!!!	preferredSize(in rows : int) : Dimension
        synchronized (getTreeLock()) {
            ListPeer peer = (ListPeer)this.peer;
            return (peer != null) ?
                       peer.getPreferredSize(rows) :
                       super.preferredSize();
        }
!!!6266242.java!!!	getPreferredSize() : Dimension
        return preferredSize();
!!!6266370.java!!!	preferredSize() : Dimension
        synchronized (getTreeLock()) {
            return (rows > 0) ?
                       preferredSize(rows) :
                       super.preferredSize();
        }
!!!6266498.java!!!	getMinimumSize(in rows : int) : Dimension
        return minimumSize(rows);
!!!6266626.java!!!	minimumSize(in rows : int) : Dimension
        synchronized (getTreeLock()) {
            ListPeer peer = (ListPeer)this.peer;
            return (peer != null) ?
                       peer.getMinimumSize(rows) :
                       super.minimumSize();
        }
!!!6266754.java!!!	getMinimumSize() : Dimension
        return minimumSize();
!!!6266882.java!!!	minimumSize() : Dimension
        synchronized (getTreeLock()) {
            return (rows > 0) ? minimumSize(rows) : super.minimumSize();
        }
!!!6267010.java!!!	addItemListener(inout l : ItemListener) : void
        if (l == null) {
            return;
        }
        itemListener = AWTEventMulticaster.add(itemListener, l);
        newEventsOnly = true;
!!!6267138.java!!!	removeItemListener(inout l : ItemListener) : void
        if (l == null) {
            return;
        }
        itemListener = AWTEventMulticaster.remove(itemListener, l);
!!!6267266.java!!!	getItemListeners() : ItemListener
        return getListeners(ItemListener.class);
!!!6267394.java!!!	addActionListener(inout l : ActionListener) : void
        if (l == null) {
            return;
        }
        actionListener = AWTEventMulticaster.add(actionListener, l);
        newEventsOnly = true;
!!!6267522.java!!!	removeActionListener(inout l : ActionListener) : void
        if (l == null) {
            return;
        }
        actionListener = AWTEventMulticaster.remove(actionListener, l);
!!!6267650.java!!!	getActionListeners() : ActionListener
        return getListeners(ActionListener.class);
!!!6267778.java!!!	getListeners(inout listenerType : Class) : T
        EventListener l = null;
        if  (listenerType == ActionListener.class) {
            l = actionListener;
        } else if  (listenerType == ItemListener.class) {
            l = itemListener;
        } else {
            return super.getListeners(listenerType);
        }
        return AWTEventMulticaster.getListeners(l, listenerType);
!!!6267906.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        switch(e.id) {
          case ActionEvent.ACTION_PERFORMED:
            if ((eventMask & AWTEvent.ACTION_EVENT_MASK) != 0 ||
                actionListener != null) {
                return true;
            }
            return false;
          case ItemEvent.ITEM_STATE_CHANGED:
            if ((eventMask & AWTEvent.ITEM_EVENT_MASK) != 0 ||
                itemListener != null) {
                return true;
            }
            return false;
          default:
            break;
        }
        return super.eventEnabled(e);
!!!6268034.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof ItemEvent) {
            processItemEvent((ItemEvent)e);
            return;
        } else if (e instanceof ActionEvent) {
            processActionEvent((ActionEvent)e);
            return;
        }
        super.processEvent(e);
!!!6268162.java!!!	processItemEvent(inout e : ItemEvent) : void
        ItemListener listener = itemListener;
        if (listener != null) {
            listener.itemStateChanged(e);
        }
!!!6268290.java!!!	processActionEvent(inout e : ActionEvent) : void
        ActionListener listener = actionListener;
        if (listener != null) {
            listener.actionPerformed(e);
        }
!!!6268418.java!!!	paramString() : String
        return super.paramString() + ",selected=" + getSelectedItem();
!!!6268546.java!!!	delItems(in start : int, in end : int) : void
        for (int i = end; i >= start; i--) {
            items.removeElementAt(i);
        }
        ListPeer peer = (ListPeer)this.peer;
        if (peer != null) {
            peer.delItems(start, end);
        }
!!!6268674.java!!!	writeObject(inout s : ObjectOutputStream) : void
      synchronized (this) {
        ListPeer peer = (ListPeer)this.peer;
        if (peer != null) {
          selected = peer.getSelectedIndexes();
        }
      }
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, itemListenerK, itemListener);
      AWTEventMulticaster.save(s, actionListenerK, actionListener);
      s.writeObject(null);
!!!6268802.java!!!	readObject(inout s : ObjectInputStream) : void
      GraphicsEnvironment.checkHeadless();
      s.defaultReadObject();

      Object keyOrNull;
      while(null != (keyOrNull = s.readObject())) {
        String key = ((String)keyOrNull).intern();

        if (itemListenerK == key)
          addItemListener((ItemListener)(s.readObject()));

        else if (actionListenerK == key)
          addActionListener((ActionListener)(s.readObject()));

        else // skip value for unrecognized key
          s.readObject();
      }
!!!6268930.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTList();
        }
        return accessibleContext;
