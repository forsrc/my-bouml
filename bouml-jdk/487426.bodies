class MBeanInfo
!!!9764226.java!!!	MBeanInfo(inout className : String, inout description : String, inout attributes : MBeanAttributeInfo [[]], inout constructors : MBeanConstructorInfo [[]], inout operations : MBeanOperationInfo [[]], inout notifications : MBeanNotificationInfo [[]])
        this(className, description, attributes, constructors, operations,
             notifications, null);
!!!9764354.java!!!	MBeanInfo(inout className : String, inout description : String, inout attributes : MBeanAttributeInfo [[]], inout constructors : MBeanConstructorInfo [[]], inout operations : MBeanOperationInfo [[]], inout notifications : MBeanNotificationInfo [[]], inout descriptor : Descriptor)

        this.className = className;

        this.description = description;

        if (attributes == null)
            attributes = MBeanAttributeInfo.NO_ATTRIBUTES;
        this.attributes = attributes;

        if (operations == null)
            operations = MBeanOperationInfo.NO_OPERATIONS;
        this.operations = operations;

        if (constructors == null)
            constructors = MBeanConstructorInfo.NO_CONSTRUCTORS;
        this.constructors = constructors;

        if (notifications == null)
            notifications = MBeanNotificationInfo.NO_NOTIFICATIONS;
        this.notifications = notifications;

        if (descriptor == null)
            descriptor = ImmutableDescriptor.EMPTY_DESCRIPTOR;
        this.descriptor = descriptor;

        this.arrayGettersSafe =
                arrayGettersSafe(this.getClass(), MBeanInfo.class);
!!!9764482.java!!!	clone() : Object
         try {
             return super.clone() ;
         } catch (CloneNotSupportedException e) {
             // should not happen as this class is cloneable
             return null;
         }
!!!9764610.java!!!	getClassName() : String
        return className;
!!!9764738.java!!!	getDescription() : String
        return description;
!!!9764866.java!!!	getAttributes() : MBeanAttributeInfo
        MBeanAttributeInfo[] as = nonNullAttributes();
        if (as.length == 0)
            return as;
        else
            return as.clone();
!!!9764994.java!!!	fastGetAttributes() : MBeanAttributeInfo
        if (arrayGettersSafe)
            return nonNullAttributes();
        else
            return getAttributes();
!!!9765122.java!!!	nonNullAttributes() : MBeanAttributeInfo
        return (attributes == null) ?
            MBeanAttributeInfo.NO_ATTRIBUTES : attributes;
!!!9765250.java!!!	getOperations() : MBeanOperationInfo
        MBeanOperationInfo[] os = nonNullOperations();
        if (os.length == 0)
            return os;
        else
            return os.clone();
!!!9765378.java!!!	fastGetOperations() : MBeanOperationInfo
        if (arrayGettersSafe)
            return nonNullOperations();
        else
            return getOperations();
!!!9765506.java!!!	nonNullOperations() : MBeanOperationInfo
        return (operations == null) ?
            MBeanOperationInfo.NO_OPERATIONS : operations;
!!!9765634.java!!!	getConstructors() : MBeanConstructorInfo
        MBeanConstructorInfo[] cs = nonNullConstructors();
        if (cs.length == 0)
            return cs;
        else
            return cs.clone();
!!!9765762.java!!!	fastGetConstructors() : MBeanConstructorInfo
        if (arrayGettersSafe)
            return nonNullConstructors();
        else
            return getConstructors();
!!!9765890.java!!!	nonNullConstructors() : MBeanConstructorInfo
        return (constructors == null) ?
            MBeanConstructorInfo.NO_CONSTRUCTORS : constructors;
!!!9766018.java!!!	getNotifications() : MBeanNotificationInfo
        MBeanNotificationInfo[] ns = nonNullNotifications();
        if (ns.length == 0)
            return ns;
        else
            return ns.clone();
!!!9766146.java!!!	fastGetNotifications() : MBeanNotificationInfo
        if (arrayGettersSafe)
            return nonNullNotifications();
        else
            return getNotifications();
!!!9766274.java!!!	nonNullNotifications() : MBeanNotificationInfo
        return (notifications == null) ?
            MBeanNotificationInfo.NO_NOTIFICATIONS : notifications;
!!!9766402.java!!!	getDescriptor() : Descriptor
        return (Descriptor) nonNullDescriptor(descriptor).clone();
!!!9766530.java!!!	toString() : String
        return
            getClass().getName() + "[" +
            "description=" + getDescription() + ", " +
            "attributes=" + Arrays.asList(fastGetAttributes()) + ", " +
            "constructors=" + Arrays.asList(fastGetConstructors()) + ", " +
            "operations=" + Arrays.asList(fastGetOperations()) + ", " +
            "notifications=" + Arrays.asList(fastGetNotifications()) + ", " +
            "descriptor=" + getDescriptor() +
            "]";
!!!9766658.java!!!	equals(inout o : Object) : boolean
        if (o == this)
            return true;
        if (!(o instanceof MBeanInfo))
            return false;
        MBeanInfo p = (MBeanInfo) o;
        if (!isEqual(getClassName(),  p.getClassName()) ||
                !isEqual(getDescription(), p.getDescription()) ||
                !getDescriptor().equals(p.getDescriptor())) {
            return false;
        }

        return
            (Arrays.equals(p.fastGetAttributes(), fastGetAttributes()) &&
             Arrays.equals(p.fastGetOperations(), fastGetOperations()) &&
             Arrays.equals(p.fastGetConstructors(), fastGetConstructors()) &&
             Arrays.equals(p.fastGetNotifications(), fastGetNotifications()));
!!!9766786.java!!!	hashCode() : int
        /* Since computing the hashCode is quite expensive, we cache it.
           If by some terrible misfortune the computed value is 0, the
           caching won't work and we will recompute it every time.

           We don't bother synchronizing, because, at worst, n different
           threads will compute the same hashCode at the same time.  */
        if (hashCode != 0)
            return hashCode;

        hashCode = Objects.hash(getClassName(), getDescriptor())
                ^ Arrays.hashCode(fastGetAttributes())
                ^ Arrays.hashCode(fastGetOperations())
                ^ Arrays.hashCode(fastGetConstructors())
                ^ Arrays.hashCode(fastGetNotifications());

        return hashCode;
!!!9766914.java!!!	arrayGettersSafe(inout subclass : Class, inout immutableClass : Class) : boolean
        if (subclass == immutableClass)
            return true;
        synchronized (arrayGettersSafeMap) {
            Boolean safe = arrayGettersSafeMap.get(subclass);
            if (safe == null) {
                try {
                    ArrayGettersSafeAction action =
                        new ArrayGettersSafeAction(subclass, immutableClass);
                    safe = AccessController.doPrivileged(action);
                } catch (Exception e) { // e.g. SecurityException
                    /* We don't know, so we assume it isn't.  */
                    safe = false;
                }
                arrayGettersSafeMap.put(subclass, safe);
            }
            return safe;
        }
!!!9767298.java!!!	isEqual(inout s1 : String, inout s2 : String) : boolean
        boolean ret;

        if (s1 == null) {
            ret = (s2 == null);
        } else {
            ret = s1.equals(s2);
        }

        return ret;
!!!9767426.java!!!	writeObject(inout out : ObjectOutputStream) : void
        out.defaultWriteObject();

        if (descriptor.getClass() == ImmutableDescriptor.class) {
            out.write(1);

            final String[] names = descriptor.getFieldNames();

            out.writeObject(names);
            out.writeObject(descriptor.getFieldValues(names));
        } else {
            out.write(0);

            out.writeObject(descriptor);
        }
!!!9767554.java!!!	readObject(inout in : ObjectInputStream) : void

        in.defaultReadObject();

        switch (in.read()) {
        case 1:
            final String[] names = (String[])in.readObject();

            final Object[] values = (Object[]) in.readObject();
            descriptor = (names.length == 0) ?
                ImmutableDescriptor.EMPTY_DESCRIPTOR :
                new ImmutableDescriptor(names, values);

            break;
        case 0:
            descriptor = (Descriptor)in.readObject();

            if (descriptor == null) {
                descriptor = ImmutableDescriptor.EMPTY_DESCRIPTOR;
            }

            break;
        case -1: // from an earlier version of the JMX API
            descriptor = ImmutableDescriptor.EMPTY_DESCRIPTOR;

            break;
        default:
            throw new StreamCorruptedException("Got unexpected byte.");
        }
