class LongPipeline
!!!9534466.java!!!	LongPipeline(inout source : Supplier, in sourceFlags : int, inout parallel : boolean)
        super(source, sourceFlags, parallel);
!!!9534594.java!!!	LongPipeline(inout source : Spliterator, in sourceFlags : int, inout parallel : boolean)
        super(source, sourceFlags, parallel);
!!!9534722.java!!!	LongPipeline(inout upstream : AbstractPipeline, in opFlags : int)
        super(upstream, opFlags);
!!!9534850.java!!!	adapt(inout sink : Sink) : LongConsumer
        if (sink instanceof LongConsumer) {
            return (LongConsumer) sink;
        } else {
            if (Tripwire.ENABLED)
                Tripwire.trip(AbstractPipeline.class,
                              "using LongStream.adapt(Sink<Long> s)");
            return sink::accept;
        }
!!!9534978.java!!!	adapt(inout s : Spliterator) : Spliterator::OfLong
        if (s instanceof Spliterator.OfLong) {
            return (Spliterator.OfLong) s;
        } else {
            if (Tripwire.ENABLED)
                Tripwire.trip(AbstractPipeline.class,
                              "using LongStream.adapt(Spliterator<Long> s)");
            throw new UnsupportedOperationException("LongStream.adapt(Spliterator<Long> s)");
        }
!!!9535106.java!!!	getOutputShape() : StreamShape
        return StreamShape.LONG_VALUE;
!!!9535234.java!!!	evaluateToNode(inout helper : PipelineHelper, inout spliterator : Spliterator, inout flattenTree : boolean, inout generator : IntFunction) : Node
        return Nodes.collectLong(helper, spliterator, flattenTree);
!!!9535362.java!!!	wrap(inout ph : PipelineHelper, inout supplier : Supplier, inout isParallel : boolean) : Spliterator
        return new StreamSpliterators.LongWrappingSpliterator<>(ph, supplier, isParallel);
!!!9535490.java!!!	lazySpliterator(inout supplier : Supplier) : Spliterator::OfLong
        return new StreamSpliterators.DelegatingSpliterator.OfLong((Supplier<Spliterator.OfLong>) supplier);
!!!9535618.java!!!	forEachWithCancel(inout spliterator : Spliterator, inout sink : Sink) : void
        Spliterator.OfLong spl = adapt(spliterator);
        LongConsumer adaptedSink =  adapt(sink);
        do { } while (!sink.cancellationRequested() && spl.tryAdvance(adaptedSink));
!!!9535746.java!!!	makeNodeBuilder(in exactSizeIfKnown : long, inout generator : IntFunction) : Node::Builder
        return Nodes.longBuilder(exactSizeIfKnown);
!!!9535874.java!!!	iterator() : PrimitiveIterator::OfLong
        return Spliterators.iterator(spliterator());
!!!9536002.java!!!	spliterator() : Spliterator::OfLong
        return adapt(super.spliterator());
!!!9536130.java!!!	asDoubleStream() : DoubleStream
        return new DoublePipeline.StatelessOp<Long>(this, StreamShape.LONG_VALUE,
                                                    StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedLong<Double>(sink) {
                    @Override
                    public void accept(long t) {
                        downstream.accept((double) t);
                    }
                };
            }
        };
!!!9536258.java!!!	boxed() : Stream
        return mapToObj(Long::valueOf);
!!!9536386.java!!!	map(inout mapper : LongUnaryOperator) : LongStream
        Objects.requireNonNull(mapper);
        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,
                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Long> sink) {
                return new Sink.ChainedLong<Long>(sink) {
                    @Override
                    public void accept(long t) {
                        downstream.accept(mapper.applyAsLong(t));
                    }
                };
            }
        };
!!!9536514.java!!!	mapToObj(inout mapper : LongFunction) : Stream
        Objects.requireNonNull(mapper);
        return new ReferencePipeline.StatelessOp<Long, U>(this, StreamShape.LONG_VALUE,
                                                          StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<U> sink) {
                return new Sink.ChainedLong<U>(sink) {
                    @Override
                    public void accept(long t) {
                        downstream.accept(mapper.apply(t));
                    }
                };
            }
        };
!!!9536642.java!!!	mapToInt(inout mapper : LongToIntFunction) : IntStream
        Objects.requireNonNull(mapper);
        return new IntPipeline.StatelessOp<Long>(this, StreamShape.LONG_VALUE,
                                                 StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Integer> sink) {
                return new Sink.ChainedLong<Integer>(sink) {
                    @Override
                    public void accept(long t) {
                        downstream.accept(mapper.applyAsInt(t));
                    }
                };
            }
        };
!!!9536770.java!!!	mapToDouble(inout mapper : LongToDoubleFunction) : DoubleStream
        Objects.requireNonNull(mapper);
        return new DoublePipeline.StatelessOp<Long>(this, StreamShape.LONG_VALUE,
                                                    StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Double> sink) {
                return new Sink.ChainedLong<Double>(sink) {
                    @Override
                    public void accept(long t) {
                        downstream.accept(mapper.applyAsDouble(t));
                    }
                };
            }
        };
!!!9536898.java!!!	flatMap(inout mapper : LongFunction) : LongStream
        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,
                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Long> sink) {
                return new Sink.ChainedLong<Long>(sink) {
                    @Override
                    public void begin(long size) {
                        downstream.begin(-1);
                    }

                    @Override
                    public void accept(long t) {
                        try (LongStream result = mapper.apply(t)) {
                            // We can do better that this too; optimize for depth=0 case and just grab spliterator and forEach it
                            if (result != null)
                                result.sequential().forEach(i -> downstream.accept(i));
                        }
                    }
                };
            }
        };
!!!9537026.java!!!	unordered() : LongStream
        if (!isOrdered())
            return this;
        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE, StreamOpFlag.NOT_ORDERED) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Long> sink) {
                return sink;
            }
        };
!!!9537154.java!!!	filter(inout predicate : LongPredicate) : LongStream
        Objects.requireNonNull(predicate);
        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,
                                     StreamOpFlag.NOT_SIZED) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Long> sink) {
                return new Sink.ChainedLong<Long>(sink) {
                    @Override
                    public void begin(long size) {
                        downstream.begin(-1);
                    }

                    @Override
                    public void accept(long t) {
                        if (predicate.test(t))
                            downstream.accept(t);
                    }
                };
            }
        };
!!!9537282.java!!!	peek(inout action : LongConsumer) : LongStream
        Objects.requireNonNull(action);
        return new StatelessOp<Long>(this, StreamShape.LONG_VALUE,
                                     0) {
            @Override
            Sink<Long> opWrapSink(int flags, Sink<Long> sink) {
                return new Sink.ChainedLong<Long>(sink) {
                    @Override
                    public void accept(long t) {
                        action.accept(t);
                        downstream.accept(t);
                    }
                };
            }
        };
!!!9537410.java!!!	limit(in maxSize : long) : LongStream
        if (maxSize < 0)
            throw new IllegalArgumentException(Long.toString(maxSize));
        return SliceOps.makeLong(this, 0, maxSize);
!!!9537538.java!!!	skip(in n : long) : LongStream
        if (n < 0)
            throw new IllegalArgumentException(Long.toString(n));
        if (n == 0)
            return this;
        else
            return SliceOps.makeLong(this, n, -1);
!!!9537666.java!!!	sorted() : LongStream
        return SortedOps.makeLong(this);
!!!9537794.java!!!	distinct() : LongStream
        // While functional and quick to implement, this approach is not very efficient.
        // An efficient version requires a long-specific map/set implementation.
        return boxed().distinct().mapToLong(i -> (long) i);
!!!9537922.java!!!	forEach(inout action : LongConsumer) : void
        evaluate(ForEachOps.makeLong(action, false));
!!!9538050.java!!!	forEachOrdered(inout action : LongConsumer) : void
        evaluate(ForEachOps.makeLong(action, true));
!!!9538178.java!!!	sum() : long
        // use better algorithm to compensate for intermediate overflow?
        return reduce(0, Long::sum);
!!!9538306.java!!!	min() : OptionalLong
        return reduce(Math::min);
!!!9538434.java!!!	max() : OptionalLong
        return reduce(Math::max);
!!!9538562.java!!!	average() : OptionalDouble
        long[] avg = collect(() -> new long[2],
                             (ll, i) -> {
                                 ll[0]++;
                                 ll[1] += i;
                             },
                             (ll, rr) -> {
                                 ll[0] += rr[0];
                                 ll[1] += rr[1];
                             });
        return avg[0] > 0
               ? OptionalDouble.of((double) avg[1] / avg[0])
               : OptionalDouble.empty();
!!!9538690.java!!!	count() : long
        return map(e -> 1L).sum();
!!!9538818.java!!!	summaryStatistics() : LongSummaryStatistics
        return collect(LongSummaryStatistics::new, LongSummaryStatistics::accept,
                       LongSummaryStatistics::combine);
!!!9538946.java!!!	reduce(in identity : long, inout op : LongBinaryOperator) : long
        return evaluate(ReduceOps.makeLong(identity, op));
!!!9539074.java!!!	reduce(inout op : LongBinaryOperator) : OptionalLong
        return evaluate(ReduceOps.makeLong(op));
!!!9539202.java!!!	collect(inout supplier : Supplier, inout accumulator : ObjLongConsumer, inout combiner : BiConsumer) : R
        BinaryOperator<R> operator = (left, right) -> {
            combiner.accept(left, right);
            return left;
        };
        return evaluate(ReduceOps.makeLong(supplier, accumulator, operator));
!!!9539330.java!!!	anyMatch(inout predicate : LongPredicate) : boolean
        return evaluate(MatchOps.makeLong(predicate, MatchOps.MatchKind.ANY));
!!!9539458.java!!!	allMatch(inout predicate : LongPredicate) : boolean
        return evaluate(MatchOps.makeLong(predicate, MatchOps.MatchKind.ALL));
!!!9539586.java!!!	noneMatch(inout predicate : LongPredicate) : boolean
        return evaluate(MatchOps.makeLong(predicate, MatchOps.MatchKind.NONE));
!!!9539714.java!!!	findFirst() : OptionalLong
        return evaluate(FindOps.makeLong(true));
!!!9539842.java!!!	findAny() : OptionalLong
        return evaluate(FindOps.makeLong(false));
!!!9539970.java!!!	toArray() : long
        return Nodes.flattenLong((Node.OfLong) evaluateToArrayNode(Long[]::new))
                .asPrimitiveArray();
