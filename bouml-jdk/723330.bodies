class DurationDayTimeImpl
!!!4924418.java!!!	DurationDayTimeImpl(inout isPositive : boolean, inout days : BigInteger, inout hours : BigInteger, inout minutes : BigInteger, inout seconds : BigDecimal)

        super(isPositive, null, null, days, hours, minutes, seconds);
        convertToCanonicalDayTime();
!!!4924546.java!!!	DurationDayTimeImpl(inout isPositive : boolean, in days : int, in hours : int, in minutes : int, in seconds : int)

        this(
            isPositive,
            wrap(days),
            wrap(hours),
            wrap(minutes),
            (seconds != DatatypeConstants.FIELD_UNDEFINED ? new BigDecimal(String.valueOf(seconds)) : null));
!!!4924674.java!!!	DurationDayTimeImpl(inout lexicalRepresentation : String)
        super(lexicalRepresentation);

        if (getYears() > 0 || getMonths() > 0) {
            throw new IllegalArgumentException(
                    "Trying to create an xdt:dayTimeDuration with an invalid"
                    + " lexical representation of \"" + lexicalRepresentation
                    + "\", data model requires a format PnDTnHnMnS.");
        }

        convertToCanonicalDayTime();
!!!4924802.java!!!	DurationDayTimeImpl(in durationInMilliseconds : long)
            super(durationInMilliseconds);
            convertToCanonicalDayTime();
            // only day, hour, minute, and second should have values
            years = null;
            months = null;
!!!4924930.java!!!	getValue() : float
        float sec = (seconds==null)?0:seconds.floatValue();
        return (((((getDays() * 24) +
                    getHours()) * 60) +
                    getMinutes())*60) +
                    sec;
!!!4925058.java!!!	convertToCanonicalDayTime() : void

        while (getSeconds() >= 60)
        {
            seconds = seconds.subtract(BigDecimal.valueOf(60));
            minutes = BigInteger.valueOf((long) getMinutes()).add(BigInteger.ONE);
        }

        while (getMinutes() >= 60)
        {
            minutes = minutes.subtract(BigInteger.valueOf(60));
            hours = BigInteger.valueOf((long) getHours()).add(BigInteger.ONE);
        }

        while (getHours() >= 24)
        {
            hours = hours.subtract(BigInteger.valueOf(24));
            days = BigInteger.valueOf((long) getDays()).add(BigInteger.ONE);
        }
