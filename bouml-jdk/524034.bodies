class SnmpMibOid
!!!3147266.java!!!	get(inout req : SnmpMibSubRequest, in depth : int) : void
        for (Enumeration<SnmpVarBind> e= req.getElements(); e.hasMoreElements();) {
            SnmpVarBind var= e.nextElement();
            SnmpStatusException x =
                new SnmpStatusException(SnmpStatusException.noSuchObject);
            req.registerGetException(var,x);
        }
!!!3147394.java!!!	set(inout req : SnmpMibSubRequest, in depth : int) : void
        for (Enumeration<SnmpVarBind> e= req.getElements(); e.hasMoreElements();) {
            SnmpVarBind var= e.nextElement();
            SnmpStatusException x =
                new SnmpStatusException(SnmpStatusException.noAccess);
            req.registerSetException(var,x);
        }
!!!3147522.java!!!	check(inout req : SnmpMibSubRequest, in depth : int) : void
        for (Enumeration<SnmpVarBind> e= req.getElements(); e.hasMoreElements();) {
            SnmpVarBind var= e.nextElement();
            SnmpStatusException x =
                new SnmpStatusException(SnmpStatusException.noAccess);
            req.registerCheckException(var,x);
        }
!!!3147650.java!!!	findHandlingNode(inout varbind : SnmpVarBind, inout oid : long [[]], in depth : int, inout handlers : SnmpRequestTree) : void


        final int length = oid.length;
        SnmpMibNode node = null;

        if (handlers == null)
            throw new SnmpStatusException(SnmpStatusException.snmpRspGenErr);

        if (depth > length) {
            // Nothing is left... the oid is not valid
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        } else if (depth == length) {
            // The oid is not complete...
            throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
        } else {
            // Some children variable or subobject is being querried
            // getChild() will raise an exception if no child is found.
            //
            final SnmpMibNode child= getChild(oid[depth]);

            // XXXX zzzz : what about null children?
            //             (variables for nested groups)
            // if child==null, then we're dealing with a variable or
            // a table: we register this node.
            // This behaviour should be overriden in subclasses,
            // in particular in group meta classes: the group
            // meta classes that hold tables should take care
            // of forwarding this call to all the tables involved.
            //
            if (child == null)
                handlers.add(this,depth,varbind);
            else
                child.findHandlingNode(varbind,oid,depth+1,handlers);
        }
!!!3147778.java!!!	findNextHandlingNode(inout varbind : SnmpVarBind, inout oid : long [[]], in pos : int, in depth : int, inout handlers : SnmpRequestTree, inout checker : AcmChecker) : long


        final int length = oid.length;
        SnmpMibNode node = null;
        long[] result = null;
        if (handlers == null) {
            // This should be considered as a genErr, but we do not want to
            // abort the whole request, so we're going to throw
            // a noSuchObject...
            //
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        }

        final Object data = handlers.getUserData();
        final int pduVersion = handlers.getRequestPduVersion();

        if (pos >= length) {
            long[] newOid= new long[1];
            newOid[0]=  getNextVarId(-1,data,pduVersion);
            result = findNextHandlingNode(varbind,newOid,0,depth,handlers,
                                          checker);
            return result;
        }

        // search the element specified in the oid
        //
        long[] newOid= new long[1];
        long index= oid[pos];

        while (true) {

            try {
                final SnmpMibNode child = getChild(index);
                // SnmpOid result = null;
                if (child == null) {
                    // shouldn't happen
                    throw new SnmpStatusException(SnmpStatusException.noSuchObject);
                    // validateVarId(index);
                    // handlers.add(this,varbind,depth);
                    // result = new SnmpOid(0);
                } else {
                    checker.add(depth, index);
                    try {
                        result = child.findNextHandlingNode(varbind,oid,pos+1,
                                                            depth+1,handlers,
                                                            checker);
                    } finally {
                        checker.remove(depth);
                    }
                }

                // Build up the leaf OID
                result[depth] = index;
                return result;

            } catch(SnmpStatusException e) {
                // If there is no such element go one level up ...
                //
                index= getNextVarId(index,data,pduVersion);

                // There is no need to carry the original oid ...
                newOid[0]=index;
                pos= 1;
                oid=newOid;
            }
        }
!!!3147906.java!!!	getRootOid(inout result : Vector) : void

        // If a node has several children, let assume that we are one step to
        // far in order to get the MIB root.
        //
        if (nbChildren != 1)
            return;

        result.addElement(varList[0]);

        // Now query our child.
        //
        children.firstElement().getRootOid(result);

!!!3148034.java!!!	registerNode(inout oidString : String, inout node : SnmpMibNode) : void
        SnmpOid oid= new SnmpOid(oidString);
        registerNode(oid.longValue(), 0, node);
!!!3148162.java!!!	registerNode(inout oid : long [[]], in cursor : int, inout node : SnmpMibNode) : void

        if (cursor >= oid.length)
            throw new IllegalAccessException();

        // Check if the node is already defined
        //
        long var= oid[cursor];

        //System.out.println("entering registration for val="
        // + String.valueOf(var) + " position= " + cursor);

        int pos = retrieveIndex(var);
        if (pos  == nbChildren) {
            nbChildren++;
            varList= new int[nbChildren];
            varList[0]= (int) var;
            pos =0;
            if ( (cursor + 1) == oid.length) {
                // That 's the end of the trip.
                // Do not forward the registration

                //System.out.println("End of trip for val="
                //      + String.valueOf(var) + " position= " + cursor);
                children.insertElementAt(node,pos);
                return;
            }

            //System.out.println("Create node for val="
            //       + String.valueOf(var) + " position= " + cursor);
            SnmpMibOid child= new SnmpMibOid();
            children.insertElementAt(child, pos);
            child.registerNode(oid, cursor + 1, node);
            return;
        }
        if (pos == -1) {
            // The node is not yet registered
            //
            int[] tmp= new int[nbChildren + 1];
            tmp[nbChildren]= (int) var;
            System.arraycopy(varList, 0, tmp, 0, nbChildren);
            varList= tmp;
            nbChildren++;
            SnmpMibNode.sort(varList);
            int newPos = retrieveIndex(var);
            varList[newPos]= (int) var;
            if ( (cursor + 1) == oid.length) {
                // That 's the end of the trip.
                // Do not forward the registration

                //System.out.println("End of trip for val="
                //     + String.valueOf(var) + " position= " + cursor);
                children.insertElementAt(node, newPos);
                return;
            }
            SnmpMibOid child= new SnmpMibOid();
            // System.out.println("Create node for val=" +
            //     String.valueOf(var) + " position= " + cursor);
            children.insertElementAt(child, newPos);
            child.registerNode(oid, cursor + 1, node);
        }
        else {
            // The node is already registered
            //
            SnmpMibNode child= children.elementAt(pos);
            if ( (cursor + 1) == oid.length ) {
                //System.out.println("Node already registered val=" +
                //          String.valueOf(var) + " position= " + cursor);
                if (child == node) return;
                if (child != null && node != null) {
                    // Now we're going to patch the tree the following way:
                    //   if a subgroup has been registered before its father,
                    //   we're going to replace the father OID node with
                    //   the actual group-node and export the children from
                    //   the temporary OID node to the actual group node.
                    //

                    if (node instanceof SnmpMibGroup) {
                        // `node' is a group => replace `child' with `node'
                        // export the child's subtree to `node'.
                        //
                        ((SnmpMibOid)child).exportChildren((SnmpMibOid)node);
                        children.setElementAt(node,pos);
                        return;

                    } else if ((node instanceof SnmpMibOid) &&
                             (child instanceof SnmpMibGroup)) {
                        // `node' is a temporary node, and `child' is a
                        //  group => keep child and export the node's
                        //  subtree to `child'.
                        //
                        ((SnmpMibOid)node).exportChildren((SnmpMibOid)child);
                        return;
                    } else if (node instanceof SnmpMibOid) {
                        // `node' and `child' are both temporary OID nodes
                        // => replace `child' with `node' and export child's
                        // subtree to `node'.
                        //
                        ((SnmpMibOid)child).exportChildren((SnmpMibOid)node);
                        children.setElementAt(node,pos);
                        return;
                    }
                }
                children.setElementAt(node,pos);
            } else {
                if (child == null)
                    throw new IllegalAccessException();
                ((SnmpMibOid)child).registerNode(oid, cursor + 1, node);
            }
        }
!!!3148290.java!!!	exportChildren(inout brother : SnmpMibOid) : void

        if (brother == null) return;
        final long[] oid = new long[1];
        for (int i=0; i<nbChildren; i++) {
            final SnmpMibNode child = children.elementAt(i);
            if (child == null) continue;
            oid[0] = varList[i];
            brother.registerNode(oid,0,child);
        }
!!!3148418.java!!!	getChild(in id : long) : SnmpMibNode

        // first we need to retrieve the identifier in the list of children
        //
        final int pos= getInsertAt(id);
        if (pos >= nbChildren) {
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        }

        if (varList[pos] != (int) id) {
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        }

        // Access the node
        //
        SnmpMibNode child = null;
        try {
            child = children.elementAtNonSync(pos);
        } catch(ArrayIndexOutOfBoundsException e) {
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        }
        if (child == null) {
            throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
        }
        return child;
!!!3148546.java!!!	retrieveIndex(in val : long) : int

        int low= 0;
        int cursor= (int) val;
        if (varList == null || varList.length < 1)
            return nbChildren;

        int max= varList.length -1 ;
        int curr= low + (max-low)/2;
        int elmt;
        while (low <= max) {
            elmt= varList[curr];
            if (cursor == elmt) {
                // We need to get the next index ...
                //
                return curr;
            }
            if (elmt < cursor) {
                low= curr +1;
            } else {
                max= curr -1;
            }
            curr= low + (max-low)/2;
        }
        return -1;
!!!3148674.java!!!	getInsertAt(in val : long) : int

        int low= 0;
        final int index= (int) val;
        if (varList == null)
            return -1;
        int max= varList.length -1 ;
        int elmt;
        //final int[] v = varList;

        //if (index > a[max])
        //return max +1;


        int curr= low + (max-low)/2;
        while (low <= max) {

            elmt= varList[curr];

            // never know ...we might find something ...
            //
            if (index == elmt)
                return curr;

            if (elmt < index) {
                low= curr +1;
            } else {
                max= curr -1;
            }
            curr= low + (max-low)/2;
        }

        return curr;
