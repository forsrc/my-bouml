class Runtime
!!!7076098.java!!!	getRuntime() : Runtime
        return currentRuntime;
!!!7076354.java!!!	exit(in status : int) : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkExit(status);
        }
        Shutdown.exit(status);
!!!7076482.java!!!	addShutdownHook(inout hook : Thread) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new RuntimePermission("shutdownHooks"));
        }
        ApplicationShutdownHooks.add(hook);
!!!7076610.java!!!	removeShutdownHook(inout hook : Thread) : boolean
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new RuntimePermission("shutdownHooks"));
        }
        return ApplicationShutdownHooks.remove(hook);
!!!7076738.java!!!	halt(in status : int) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkExit(status);
        }
        Shutdown.halt(status);
!!!7076866.java!!!	runFinalizersOnExit(inout value : boolean) : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            try {
                security.checkExit(0);
            } catch (SecurityException e) {
                throw new SecurityException("runFinalizersOnExit");
            }
        }
        Shutdown.setRunFinalizersOnExit(value);
!!!7076994.java!!!	exec(inout command : String) : Process
        return exec(command, null, null);
!!!7077122.java!!!	exec(inout command : String, inout envp : String [[]]) : Process
        return exec(command, envp, null);
!!!7077250.java!!!	exec(inout command : String, inout envp : String [[]], inout dir : File) : Process
        if (command.length() == 0)
            throw new IllegalArgumentException("Empty command");

        StringTokenizer st = new StringTokenizer(command);
        String[] cmdarray = new String[st.countTokens()];
        for (int i = 0; st.hasMoreTokens(); i++)
            cmdarray[i] = st.nextToken();
        return exec(cmdarray, envp, dir);
!!!7077378.java!!!	exec(inout cmdarray : String [[]]) : Process
        return exec(cmdarray, null, null);
!!!7077506.java!!!	exec(inout cmdarray : String [[]], inout envp : String [[]]) : Process
        return exec(cmdarray, envp, null);
!!!7077634.java!!!	exec(inout cmdarray : String [[]], inout envp : String [[]], inout dir : File) : Process
        return new ProcessBuilder(cmdarray)
            .environment(envp)
            .directory(dir)
            .start();
!!!7078530.java!!!	runFinalization() : void
        runFinalization0();
!!!7078914.java!!!	load(inout filename : String) : void
        load0(Reflection.getCallerClass(), filename);
!!!7079042.java!!!	load0(inout fromClass : Class, inout filename : String) : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkLink(filename);
        }
        if (!(new File(filename).isAbsolute())) {
            throw new UnsatisfiedLinkError(
                "Expecting an absolute path of the library: " + filename);
        }
        ClassLoader.loadLibrary(fromClass, filename, true);
!!!7079170.java!!!	loadLibrary(inout libname : String) : void
        loadLibrary0(Reflection.getCallerClass(), libname);
!!!7079298.java!!!	loadLibrary0(inout fromClass : Class, inout libname : String) : void
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkLink(libname);
        }
        if (libname.indexOf((int)File.separatorChar) != -1) {
            throw new UnsatisfiedLinkError(
    "Directory separator should not appear in library name: " + libname);
        }
        ClassLoader.loadLibrary(fromClass, libname, false);
!!!7079426.java!!!	getLocalizedInputStream(inout in : InputStream) : InputStream
        return in;
!!!7079554.java!!!	getLocalizedOutputStream(inout out : OutputStream) : OutputStream
        return out;
