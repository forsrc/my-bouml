class FieldView
!!!11646850.java!!!	FieldView(inout elem : Element)
        super(elem);
!!!11646978.java!!!	getFontMetrics() : FontMetrics
        Component c = getContainer();
        return c.getFontMetrics(c.getFont());
!!!11647106.java!!!	adjustAllocation(inout a : Shape) : Shape
        if (a != null) {
            Rectangle bounds = a.getBounds();
            int vspan = (int) getPreferredSpan(Y_AXIS);
            int hspan = (int) getPreferredSpan(X_AXIS);
            if (bounds.height != vspan) {
                int slop = bounds.height - vspan;
                bounds.y += slop / 2;
                bounds.height -= slop;
            }

            // horizontal adjustments
            Component c = getContainer();
            if (c instanceof JTextField) {
                JTextField field = (JTextField) c;
                BoundedRangeModel vis = field.getHorizontalVisibility();
                int max = Math.max(hspan, bounds.width);
                int value = vis.getValue();
                int extent = Math.min(max, bounds.width - 1);
                if ((value + extent) > max) {
                    value = max - extent;
                }
                vis.setRangeProperties(value, extent, vis.getMinimum(),
                                       max, false);
                if (hspan < bounds.width) {
                    // horizontally align the interior
                    int slop = bounds.width - 1 - hspan;

                    int align = ((JTextField)c).getHorizontalAlignment();
                    if(Utilities.isLeftToRight(c)) {
                        if(align==LEADING) {
                            align = LEFT;
                        }
                        else if(align==TRAILING) {
                            align = RIGHT;
                        }
                    }
                    else {
                        if(align==LEADING) {
                            align = RIGHT;
                        }
                        else if(align==TRAILING) {
                            align = LEFT;
                        }
                    }

                    switch (align) {
                    case SwingConstants.CENTER:
                        bounds.x += slop / 2;
                        bounds.width -= slop;
                        break;
                    case SwingConstants.RIGHT:
                        bounds.x += slop;
                        bounds.width -= slop;
                        break;
                    }
                } else {
                    // adjust the allocation to match the bounded range.
                    bounds.width = hspan;
                    bounds.x -= vis.getValue();
                }
            }
            return bounds;
        }
        return null;
!!!11647234.java!!!	updateVisibilityModel() : void
        Component c = getContainer();
        if (c instanceof JTextField) {
            JTextField field = (JTextField) c;
            BoundedRangeModel vis = field.getHorizontalVisibility();
            int hspan = (int) getPreferredSpan(X_AXIS);
            int extent = vis.getExtent();
            int maximum = Math.max(hspan, extent);
            extent = (extent == 0) ? maximum : extent;
            int value = maximum - extent;
            int oldValue = vis.getValue();
            if ((oldValue + extent) > maximum) {
                oldValue = maximum - extent;
            }
            value = Math.max(0, Math.min(value, oldValue));
            vis.setRangeProperties(value, extent, 0, maximum, false);
        }
!!!11647362.java!!!	paint(inout g : Graphics, inout a : Shape) : void
        Rectangle r = (Rectangle) a;
        g.clipRect(r.x, r.y, r.width, r.height);
        super.paint(g, a);
!!!11647490.java!!!	adjustPaintRegion(inout a : Shape) : Shape
        return adjustAllocation(a);
!!!11647618.java!!!	getPreferredSpan(in axis : int) : float
        switch (axis) {
        case View.X_AXIS:
            Segment buff = SegmentCache.getSharedSegment();
            Document doc = getDocument();
            int width;
            try {
                FontMetrics fm = getFontMetrics();
                doc.getText(0, doc.getLength(), buff);
                width = Utilities.getTabbedTextWidth(buff, fm, 0, this, 0);
                if (buff.count > 0) {
                    Component c = getContainer();
                    firstLineOffset = sun.swing.SwingUtilities2.
                        getLeftSideBearing((c instanceof JComponent) ?
                                           (JComponent)c : null, fm,
                                           buff.array[buff.offset]);
                    firstLineOffset = Math.max(0, -firstLineOffset);
                }
                else {
                    firstLineOffset = 0;
                }
            } catch (BadLocationException bl) {
                width = 0;
            }
            SegmentCache.releaseSharedSegment(buff);
            return width + firstLineOffset;
        default:
            return super.getPreferredSpan(axis);
        }
!!!11647746.java!!!	getResizeWeight(in axis : int) : int
        if (axis == View.X_AXIS) {
            return 1;
        }
        return 0;
!!!11647874.java!!!	modelToView(in pos : int, inout a : Shape, inout b : Position::Bias) : Shape
        return super.modelToView(pos, adjustAllocation(a), b);
!!!11648002.java!!!	viewToModel(in fx : float, in fy : float, inout a : Shape, inout bias : Position::Bias [[]]) : int
        return super.viewToModel(fx, fy, adjustAllocation(a), bias);
!!!11648130.java!!!	insertUpdate(inout changes : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
        super.insertUpdate(changes, adjustAllocation(a), f);
        updateVisibilityModel();
!!!11648258.java!!!	removeUpdate(inout changes : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
        super.removeUpdate(changes, adjustAllocation(a), f);
        updateVisibilityModel();
