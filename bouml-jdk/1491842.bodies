class Context
!!!12585218.java!!!	Context()
            copyTables();
!!!12585346.java!!!	setParent(inout parent : NamespaceSupport::Context) : void
            this.parent = parent;
            declarations = null;
            prefixTable = parent.prefixTable;
            uriTable = parent.uriTable;
            elementNameTable = parent.elementNameTable;
            attributeNameTable = parent.attributeNameTable;
            defaultNS = parent.defaultNS;
            declSeen = false;
!!!12585474.java!!!	clear() : void
            parent = null;
            prefixTable = null;
            uriTable = null;
            elementNameTable = null;
            attributeNameTable = null;
            defaultNS = null;
!!!12585602.java!!!	declarePrefix(inout prefix : String, inout uri : String) : void
                                // Lazy processing...
//          if (!declsOK)
//              throw new IllegalStateException (
//                  "can't declare any more prefixes in this context");
            if (!declSeen) {
                copyTables();
            }
            if (declarations == null) {
                declarations = new ArrayList<>();
            }

            prefix = prefix.intern();
            uri = uri.intern();
            if ("".equals(prefix)) {
                if ("".equals(uri)) {
                    defaultNS = null;
                } else {
                    defaultNS = uri;
                }
            } else {
                prefixTable.put(prefix, uri);
                uriTable.put(uri, prefix); // may wipe out another prefix
            }
            declarations.add(prefix);
!!!12585730.java!!!	processName(inout qName : String, inout isAttribute : boolean) : String
            String name[];
            Map<String, String[]> table;

            // Select the appropriate table.
            if (isAttribute) {
                table = attributeNameTable;
            } else {
                table = elementNameTable;
            }

            // Start by looking in the cache, and
            // return immediately if the name
            // is already known in this content
            name = (String[])table.get(qName);
            if (name != null) {
                return name;
            }

            // We haven't seen this name in this
            // context before.  Maybe in the parent
            // context, but we can't assume prefix
            // bindings are the same.
            name = new String[3];
            name[2] = qName.intern();
            int index = qName.indexOf(':');


            // No prefix.
            if (index == -1) {
                if (isAttribute) {
                    if (qName == "xmlns" && namespaceDeclUris)
                        name[0] = NSDECL;
                    else
                        name[0] = "";
                } else if (defaultNS == null) {
                    name[0] = "";
                } else {
                    name[0] = defaultNS;
                }
                name[1] = name[2];
            }

            // Prefix
            else {
                String prefix = qName.substring(0, index);
                String local = qName.substring(index+1);
                String uri;
                if ("".equals(prefix)) {
                    uri = defaultNS;
                } else {
                    uri = (String)prefixTable.get(prefix);
                }
                if (uri == null
                        || (!isAttribute && "xmlns".equals (prefix))) {
                    return null;
                }
                name[0] = uri;
                name[1] = local.intern();
            }

            // Save in the cache for future use.
            // (Could be shared with parent context...)
            table.put(name[2], name);
            return name;
!!!12585858.java!!!	getURI(inout prefix : String) : String
            if ("".equals(prefix)) {
                return defaultNS;
            } else if (prefixTable == null) {
                return null;
            } else {
                return (String)prefixTable.get(prefix);
            }
!!!12585986.java!!!	getPrefix(inout uri : String) : String
            if (uriTable == null) {
                return null;
            } else {
                return (String)uriTable.get(uri);
            }
!!!12586114.java!!!	getDeclaredPrefixes() : Enumeration
            if (declarations == null) {
                return EMPTY_ENUMERATION;
            } else {
                return Collections.enumeration(declarations);
            }
!!!12586242.java!!!	getPrefixes() : Enumeration
            if (prefixTable == null) {
                return EMPTY_ENUMERATION;
            } else {
                return Collections.enumeration(prefixTable.keySet());
            }
!!!12586370.java!!!	copyTables() : void
            if (prefixTable != null) {
                prefixTable = new HashMap<>(prefixTable);
            } else {
                prefixTable = new HashMap<>();
            }
            if (uriTable != null) {
                uriTable = new HashMap<>(uriTable);
            } else {
                uriTable = new HashMap<>();
            }
            elementNameTable = new HashMap<>();
            attributeNameTable = new HashMap<>();
            declSeen = true;
