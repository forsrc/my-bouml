class ExsltMath
!!!3647746.java!!!	max(inout nl : NodeList) : double
    if (nl == null || nl.getLength() == 0)
      return Double.NaN;

    double m = - Double.MAX_VALUE;
    for (int i = 0; i < nl.getLength(); i++)
    {
      Node n = nl.item(i);
      double d = toNumber(n);
      if (Double.isNaN(d))
        return Double.NaN;
      else if (d > m)
        m = d;
    }

    return m;
!!!3647874.java!!!	min(inout nl : NodeList) : double
    if (nl == null || nl.getLength() == 0)
      return Double.NaN;

    double m = Double.MAX_VALUE;
    for (int i = 0; i < nl.getLength(); i++)
    {
      Node n = nl.item(i);
      double d = toNumber(n);
      if (Double.isNaN(d))
        return Double.NaN;
      else if (d < m)
        m = d;
    }

    return m;
!!!3648002.java!!!	highest(inout nl : NodeList) : NodeList
    double maxValue = max(nl);

    NodeSet highNodes = new NodeSet();
    highNodes.setShouldCacheNodes(true);

    if (Double.isNaN(maxValue))
      return highNodes;  // empty Nodeset

    for (int i = 0; i < nl.getLength(); i++)
    {
      Node n = nl.item(i);
      double d = toNumber(n);
      if (d == maxValue)
        highNodes.addElement(n);
    }
    return highNodes;
!!!3648130.java!!!	lowest(inout nl : NodeList) : NodeList
    double minValue = min(nl);

    NodeSet lowNodes = new NodeSet();
    lowNodes.setShouldCacheNodes(true);

    if (Double.isNaN(minValue))
      return lowNodes;  // empty Nodeset

    for (int i = 0; i < nl.getLength(); i++)
    {
      Node n = nl.item(i);
      double d = toNumber(n);
      if (d == minValue)
        lowNodes.addElement(n);
    }
    return lowNodes;
!!!3648258.java!!!	abs(in num : double) : double
     return Math.abs(num);
!!!3648386.java!!!	acos(in num : double) : double
     return Math.acos(num);
!!!3648514.java!!!	asin(in num : double) : double
     return Math.asin(num);
!!!3648642.java!!!	atan(in num : double) : double
     return Math.atan(num);
!!!3648770.java!!!	atan2(in num1 : double, in num2 : double) : double
     return Math.atan2(num1, num2);
!!!3648898.java!!!	cos(in num : double) : double
     return Math.cos(num);
!!!3649026.java!!!	exp(in num : double) : double
     return Math.exp(num);
!!!3649154.java!!!	log(in num : double) : double
     return Math.log(num);
!!!3649282.java!!!	power(in num1 : double, in num2 : double) : double
     return Math.pow(num1, num2);
!!!3649410.java!!!	random() : double
     return Math.random();
!!!3649538.java!!!	sin(in num : double) : double
     return Math.sin(num);
!!!3649666.java!!!	sqrt(in num : double) : double
     return Math.sqrt(num);
!!!3649794.java!!!	tan(in num : double) : double
     return Math.tan(num);
!!!3649922.java!!!	constant(inout name : String, in precision : double) : double
     String value = null;
     if (name.equals("PI"))
       value = PI;
     else if (name.equals("E"))
       value = E;
     else if (name.equals("SQRRT2"))
       value = SQRRT2;
     else if (name.equals("LN2"))
       value = LN2;
     else if (name.equals("LN10"))
       value = LN10;
     else if (name.equals("LOG2E"))
       value = LOG2E;
     else if (name.equals("SQRT1_2"))
       value = SQRT1_2;

     if (value != null)
     {
       int bits = new Double(precision).intValue();

       if (bits <= value.length())
         value = value.substring(0, bits);

       return Double.parseDouble(value);
     }
     else
       return Double.NaN;

