class Optional
!!!8863234.java!!!	Optional()
        this.value = null;
!!!8863362.java!!!	empty() : Optional
        @SuppressWarnings("unchecked")
        Optional<T> t = (Optional<T>) EMPTY;
        return t;
!!!8863490.java!!!	Optional(inout value : T)
        this.value = Objects.requireNonNull(value);
!!!8863618.java!!!	of(inout value : T) : Optional
        return new Optional<>(value);
!!!8863746.java!!!	ofNullable(inout value : T) : Optional
        return value == null ? empty() : of(value);
!!!8863874.java!!!	get() : T
        if (value == null) {
            throw new NoSuchElementException("No value present");
        }
        return value;
!!!8864002.java!!!	isPresent() : boolean
        return value != null;
!!!8864130.java!!!	ifPresent(inout consumer : Consumer) : void
        if (value != null)
            consumer.accept(value);
!!!8864258.java!!!	filter(inout predicate : Predicate) : Optional
        Objects.requireNonNull(predicate);
        if (!isPresent())
            return this;
        else
            return predicate.test(value) ? this : empty();
!!!8864386.java!!!	map(inout mapper : Function) : Optional
        Objects.requireNonNull(mapper);
        if (!isPresent())
            return empty();
        else {
            return Optional.ofNullable(mapper.apply(value));
        }
!!!8864514.java!!!	flatMap(inout mapper : Function) : Optional
        Objects.requireNonNull(mapper);
        if (!isPresent())
            return empty();
        else {
            return Objects.requireNonNull(mapper.apply(value));
        }
!!!8864642.java!!!	orElse(inout other : T) : T
        return value != null ? value : other;
!!!8864770.java!!!	orElseGet(inout other : Supplier) : T
        return value != null ? value : other.get();
!!!8864898.java!!!	orElseThrow(inout exceptionSupplier : Supplier) : T
        if (value != null) {
            return value;
        } else {
            throw exceptionSupplier.get();
        }
!!!8865026.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Optional)) {
            return false;
        }

        Optional<?> other = (Optional<?>) obj;
        return Objects.equals(value, other.value);
!!!8865154.java!!!	hashCode() : int
        return Objects.hashCode(value);
!!!8865282.java!!!	toString() : String
        return value != null
            ? String.format("Optional[%s]", value)
            : "Optional.empty";
