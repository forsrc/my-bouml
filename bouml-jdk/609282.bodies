class UnionPathExpr
!!!3804162.java!!!	UnionPathExpr(inout pathExpr : Expression, inout rest : Expression)
        _pathExpr = pathExpr;
        _rest     = rest;
!!!3804290.java!!!	setParser(inout parser : Parser) : void
        super.setParser(parser);
        // find all expressions in this Union
        final Vector components = new Vector();
        flatten(components);
        final int size = components.size();
        _components = (Expression[])components.toArray(new Expression[size]);
        for (int i = 0; i < size; i++) {
            _components[i].setParser(parser);
            _components[i].setParent(this);
            if (_components[i] instanceof Step) {
                final Step step = (Step)_components[i];
                final int axis = step.getAxis();
                final int type = step.getNodeType();
                // Put attribute iterators first
                if ((axis == Axis.ATTRIBUTE) || (type == DTM.ATTRIBUTE_NODE)) {
                    _components[i] = _components[0];
                    _components[0] = step;
                }
                // Check if the union contains a reverse iterator
        if (Axis.isReverse(axis)) _reverse = true;
            }
        }
        // No need to reverse anything if another expression lies on top of this
        if (getParent() instanceof Expression) _reverse = false;
!!!3804418.java!!!	typeCheck(inout stable : SymbolTable) : Type
        final int length = _components.length;
        for (int i = 0; i < length; i++) {
            if (_components[i].typeCheck(stable) != Type.NodeSet) {
                _components[i] = new CastExpr(_components[i], Type.NodeSet);
            }
        }
        return _type = Type.NodeSet;
!!!3804546.java!!!	toString() : String
        return "union(" + _pathExpr + ", " + _rest + ')';
!!!3804674.java!!!	flatten(inout components : Vector) : void
        components.addElement(_pathExpr);
        if (_rest != null) {
            if (_rest instanceof UnionPathExpr) {
                ((UnionPathExpr)_rest).flatten(components);
            }
            else {
                components.addElement(_rest);
            }
        }
!!!3804802.java!!!	translate(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();

        final int init = cpg.addMethodref(UNION_ITERATOR_CLASS,
                                          "<init>",
                                          "("+DOM_INTF_SIG+")V");
        final int iter = cpg.addMethodref(UNION_ITERATOR_CLASS,
                                          ADD_ITERATOR,
                                          ADD_ITERATOR_SIG);

        // Create the UnionIterator and leave it on the stack
        il.append(new NEW(cpg.addClass(UNION_ITERATOR_CLASS)));
        il.append(DUP);
        il.append(methodGen.loadDOM());
        il.append(new INVOKESPECIAL(init));

        // Add the various iterators to the UnionIterator
        final int length = _components.length;
        for (int i = 0; i < length; i++) {
            _components[i].translate(classGen, methodGen);
            il.append(new INVOKEVIRTUAL(iter));
        }

        // Order the iterator only if strictly needed
        if (_reverse) {
            final int order = cpg.addInterfaceMethodref(DOM_INTF,
                                                        ORDER_ITERATOR,
                                                        ORDER_ITERATOR_SIG);
            il.append(methodGen.loadDOM());
            il.append(SWAP);
            il.append(methodGen.loadContextNode());
            il.append(new INVOKEINTERFACE(order, 3));

        }
