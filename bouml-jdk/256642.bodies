class ThreadPoolManagerImpl
!!!1297666.java!!!	ThreadPoolManagerImpl()
        threadGroup = getThreadGroup();
        threadPool = new ThreadPoolImpl(threadGroup,
            ORBConstants.THREADPOOL_DEFAULT_NAME);
!!!1297794.java!!!	getThreadGroup() : ThreadGroup
        ThreadGroup tg;

        // See bugs 4916766 and 4936203
        // We intend to create new threads in a reliable thread group.
        // This avoids problems if the application/applet
        // creates a thread group, makes JavaIDL calls which create a new
        // connection and ReaderThread, and then destroys the thread
        // group. If our ReaderThreads were to be part of such destroyed thread
        // group then it might get killed and cause other invoking threads
        // sharing the same connection to get a non-restartable
        // CommunicationFailure. We'd like to avoid that.
        //
        // Our solution is to create all of our threads in the highest thread
        // group that we have access to, given our own security clearance.
        //
        try {
            // try to get a thread group that's as high in the threadgroup
            // parent-child hierarchy, as we can get to.
            // this will prevent an ORB thread created during applet-init from
            // being killed when an applet dies.
            tg = AccessController.doPrivileged(
                new PrivilegedAction<ThreadGroup>() {
                    public ThreadGroup run() {
                        ThreadGroup tg = Thread.currentThread().getThreadGroup();
                        ThreadGroup ptg = tg;
                        try {
                            while (ptg != null) {
                                tg = ptg;
                                ptg = tg.getParent();
                            }
                        } catch (SecurityException se) {
                            // Discontinue going higher on a security exception.
                        }
                        return new ThreadGroup(tg, "ORB ThreadGroup " + tgCount.getAndIncrement());
                    }
                }
            );
        } catch (SecurityException e) {
            // something wrong, we go back to the original code
            tg = Thread.currentThread().getThreadGroup();
        }

        return tg;
!!!1297922.java!!!	close() : void
        try {
            threadPool.close();
        } catch (IOException exc) {
            wrapper.threadPoolCloseError();
        }

        try {
            boolean isDestroyed = threadGroup.isDestroyed();
            int numThreads = threadGroup.activeCount();
            int numGroups = threadGroup.activeGroupCount();

            if (isDestroyed) {
                wrapper.threadGroupIsDestroyed(threadGroup);
            } else {
                if (numThreads > 0)
                    wrapper.threadGroupHasActiveThreadsInClose(threadGroup, numThreads);

                if (numGroups > 0)
                    wrapper.threadGroupHasSubGroupsInClose(threadGroup, numGroups);

                threadGroup.destroy();
            }
        } catch (IllegalThreadStateException exc) {
            wrapper.threadGroupDestroyFailed(exc, threadGroup);
        }

        threadGroup = null;
!!!1298050.java!!!	getThreadPool(inout threadpoolId : String) : ThreadPool

        return threadPool;
!!!1298178.java!!!	getThreadPool(in numericIdForThreadpool : int) : ThreadPool

        return threadPool;
!!!1298306.java!!!	getThreadPoolNumericId(inout threadpoolId : String) : int
        return 0;
!!!1298434.java!!!	getThreadPoolStringId(in numericIdForThreadpool : int) : String
       return "";
!!!1298562.java!!!	getDefaultThreadPool() : ThreadPool
        return threadPool;
!!!1298690.java!!!	getThreadPoolChooser(inout componentId : String) : ThreadPoolChooser
        //FIXME: This method is not used, but should be fixed once
        //nio select starts working and we start using ThreadPoolChooser
        return null;
!!!1298818.java!!!	getThreadPoolChooser(in componentIndex : int) : ThreadPoolChooser
        //FIXME: This method is not used, but should be fixed once
        //nio select starts working and we start using ThreadPoolChooser
        return null;
!!!1298946.java!!!	setThreadPoolChooser(inout componentId : String, inout aThreadPoolChooser : ThreadPoolChooser) : void
        //FIXME: This method is not used, but should be fixed once
        //nio select starts working and we start using ThreadPoolChooser
!!!1299074.java!!!	getThreadPoolChooserNumericId(inout componentId : String) : int
        //FIXME: This method is not used, but should be fixed once
        //nio select starts working and we start using ThreadPoolChooser
        return 0;
