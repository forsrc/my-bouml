class ThaiBuddhistChronology
!!!8502018.java!!!	getId() : String
        return "ThaiBuddhist";
!!!8502146.java!!!	getCalendarType() : String
        return "buddhist";
!!!8502274.java!!!	date(inout era : Era, in yearOfEra : int, in month : int, in dayOfMonth : int) : ThaiBuddhistDate
        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);
!!!8502402.java!!!	date(in prolepticYear : int, in month : int, in dayOfMonth : int) : ThaiBuddhistDate
        return new ThaiBuddhistDate(LocalDate.of(prolepticYear - YEARS_DIFFERENCE, month, dayOfMonth));
!!!8502530.java!!!	dateYearDay(inout era : Era, in yearOfEra : int, in dayOfYear : int) : ThaiBuddhistDate
        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);
!!!8502658.java!!!	dateYearDay(in prolepticYear : int, in dayOfYear : int) : ThaiBuddhistDate
        return new ThaiBuddhistDate(LocalDate.ofYearDay(prolepticYear - YEARS_DIFFERENCE, dayOfYear));
!!!8502786.java!!!	dateEpochDay(in epochDay : long) : ThaiBuddhistDate
        return new ThaiBuddhistDate(LocalDate.ofEpochDay(epochDay));
!!!8502914.java!!!	dateNow() : ThaiBuddhistDate
        return dateNow(Clock.systemDefaultZone());
!!!8503042.java!!!	dateNow(inout zone : ZoneId) : ThaiBuddhistDate
        return dateNow(Clock.system(zone));
!!!8503170.java!!!	dateNow(inout clock : Clock) : ThaiBuddhistDate
        return date(LocalDate.now(clock));
!!!8503298.java!!!	date(inout temporal : TemporalAccessor) : ThaiBuddhistDate
        if (temporal instanceof ThaiBuddhistDate) {
            return (ThaiBuddhistDate) temporal;
        }
        return new ThaiBuddhistDate(LocalDate.from(temporal));
!!!8503426.java!!!	localDateTime(inout temporal : TemporalAccessor) : ChronoLocalDateTime
        return (ChronoLocalDateTime<ThaiBuddhistDate>)super.localDateTime(temporal);
!!!8503554.java!!!	zonedDateTime(inout temporal : TemporalAccessor) : ChronoZonedDateTime
        return (ChronoZonedDateTime<ThaiBuddhistDate>)super.zonedDateTime(temporal);
!!!8503682.java!!!	zonedDateTime(inout instant : Instant, inout zone : ZoneId) : ChronoZonedDateTime
        return (ChronoZonedDateTime<ThaiBuddhistDate>)super.zonedDateTime(instant, zone);
!!!8503810.java!!!	isLeapYear(in prolepticYear : long) : boolean
        return IsoChronology.INSTANCE.isLeapYear(prolepticYear - YEARS_DIFFERENCE);
!!!8503938.java!!!	prolepticYear(inout era : Era, in yearOfEra : int) : int
        if (era instanceof ThaiBuddhistEra == false) {
            throw new ClassCastException("Era must be BuddhistEra");
        }
        return (era == ThaiBuddhistEra.BE ? yearOfEra : 1 - yearOfEra);
!!!8504066.java!!!	eraOf(in eraValue : int) : ThaiBuddhistEra
        return ThaiBuddhistEra.of(eraValue);
!!!8504194.java!!!	eras() : List
        return Arrays.<Era>asList(ThaiBuddhistEra.values());
!!!8504322.java!!!	range(inout field : ChronoField) : ValueRange
        switch (field) {
            case PROLEPTIC_MONTH: {
                ValueRange range = PROLEPTIC_MONTH.range();
                return ValueRange.of(range.getMinimum() + YEARS_DIFFERENCE * 12L, range.getMaximum() + YEARS_DIFFERENCE * 12L);
            }
            case YEAR_OF_ERA: {
                ValueRange range = YEAR.range();
                return ValueRange.of(1, -(range.getMinimum() + YEARS_DIFFERENCE) + 1, range.getMaximum() + YEARS_DIFFERENCE);
            }
            case YEAR: {
                ValueRange range = YEAR.range();
                return ValueRange.of(range.getMinimum() + YEARS_DIFFERENCE, range.getMaximum() + YEARS_DIFFERENCE);
            }
        }
        return field.range();
!!!8504450.java!!!	resolveDate(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : ThaiBuddhistDate
        return (ThaiBuddhistDate) super.resolveDate(fieldValues, resolverStyle);
!!!8504578.java!!!	writeReplace() : Object
        return super.writeReplace();
!!!8504706.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
