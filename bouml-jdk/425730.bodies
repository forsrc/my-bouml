class BasicMenuUI
!!!2513666.java!!!	createUI(inout x : JComponent) : ComponentUI
        return new BasicMenuUI();
!!!2513794.java!!!	loadActionMap(inout map : LazyActionMap) : void
        BasicMenuItemUI.loadActionMap(map);
        map.put(new Actions(Actions.SELECT, null, true));
!!!2513922.java!!!	installDefaults() : void
        super.installDefaults();
        updateDefaultBackgroundColor();
        ((JMenu)menuItem).setDelay(200);
        crossMenuMnemonic = UIManager.getBoolean("Menu.crossMenuMnemonic");
!!!2514050.java!!!	getPropertyPrefix() : String
        return "Menu";
!!!2514178.java!!!	installListeners() : void
        super.installListeners();

        if (changeListener == null)
            changeListener = createChangeListener(menuItem);

        if (changeListener != null)
            menuItem.addChangeListener(changeListener);

        if (menuListener == null)
            menuListener = createMenuListener(menuItem);

        if (menuListener != null)
            ((JMenu)menuItem).addMenuListener(menuListener);
!!!2514306.java!!!	installKeyboardActions() : void
        super.installKeyboardActions();
        updateMnemonicBinding();
!!!2514434.java!!!	installLazyActionMap() : void
        LazyActionMap.installLazyActionMap(menuItem, BasicMenuUI.class,
                                           getPropertyPrefix() + ".actionMap");
!!!2514562.java!!!	updateMnemonicBinding() : void
        int mnemonic = menuItem.getModel().getMnemonic();
        int[] shortcutKeys = (int[])DefaultLookup.get(menuItem, this,
                                                   "Menu.shortcutKeys");
        if (shortcutKeys == null) {
            shortcutKeys = new int[] {KeyEvent.ALT_MASK};
        }
        if (mnemonic == lastMnemonic) {
            return;
        }
        InputMap windowInputMap = SwingUtilities.getUIInputMap(
                       menuItem, JComponent.WHEN_IN_FOCUSED_WINDOW);
        if (lastMnemonic != 0 && windowInputMap != null) {
            for (int shortcutKey : shortcutKeys) {
                windowInputMap.remove(KeyStroke.getKeyStroke
                        (lastMnemonic, shortcutKey, false));
            }
        }
        if (mnemonic != 0) {
            if (windowInputMap == null) {
                windowInputMap = createInputMap(JComponent.
                                              WHEN_IN_FOCUSED_WINDOW);
                SwingUtilities.replaceUIInputMap(menuItem, JComponent.
                                       WHEN_IN_FOCUSED_WINDOW, windowInputMap);
            }
            for (int shortcutKey : shortcutKeys) {
                windowInputMap.put(KeyStroke.getKeyStroke(mnemonic,
                        shortcutKey, false), "selectMenu");
            }
        }
        lastMnemonic = mnemonic;
!!!2514690.java!!!	uninstallKeyboardActions() : void
        super.uninstallKeyboardActions();
        lastMnemonic = 0;
!!!2514818.java!!!	createMouseInputListener(inout c : JComponent) : MouseInputListener
        return getHandler();
!!!2514946.java!!!	createMenuListener(inout c : JComponent) : MenuListener
        return null;
!!!2515074.java!!!	createChangeListener(inout c : JComponent) : ChangeListener
        return null;
!!!2515202.java!!!	createPropertyChangeListener(inout c : JComponent) : PropertyChangeListener
        return getHandler();
!!!2515330.java!!!	getHandler() : BasicMenuItemUI::Handler
        if (handler == null) {
            handler = new Handler();
        }
        return handler;
!!!2515458.java!!!	uninstallDefaults() : void
        menuItem.setArmed(false);
        menuItem.setSelected(false);
        menuItem.resetKeyboardActions();
        super.uninstallDefaults();
!!!2515586.java!!!	uninstallListeners() : void
        super.uninstallListeners();

        if (changeListener != null)
            menuItem.removeChangeListener(changeListener);

        if (menuListener != null)
            ((JMenu)menuItem).removeMenuListener(menuListener);

        changeListener = null;
        menuListener = null;
        handler = null;
!!!2515714.java!!!	createMenuDragMouseListener(inout c : JComponent) : MenuDragMouseListener
        return getHandler();
!!!2515842.java!!!	createMenuKeyListener(inout c : JComponent) : MenuKeyListener
        return (MenuKeyListener)getHandler();
!!!2515970.java!!!	getMaximumSize(inout c : JComponent) : Dimension
        if (((JMenu)menuItem).isTopLevelMenu() == true) {
            Dimension d = c.getPreferredSize();
            return new Dimension(d.width, Short.MAX_VALUE);
        }
        return null;
!!!2516098.java!!!	setupPostTimer(inout menu : JMenu) : void
        Timer timer = new Timer(menu.getDelay(), new Actions(
                                    Actions.SELECT, menu,false));
        timer.setRepeats(false);
        timer.start();
!!!2516226.java!!!	appendPath(inout path : MenuElement [[]], inout elem : MenuElement) : void
        MenuElement newPath[] = new MenuElement[path.length+1];
        System.arraycopy(path, 0, newPath, 0, path.length);
        newPath[path.length] = elem;
        MenuSelectionManager.defaultManager().setSelectedPath(newPath);
