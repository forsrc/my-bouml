format 222
"openmbean" // jdk1.8::javax::management::openmbean
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/management/openmbean/"
  java_package "javax.management.openmbean"
  classview 152322 "openmbean"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 490242 "OpenType"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>OpenType</code> class is the parent abstract class of all classes which describe the actual <i>open type</i>
of open data values.
<p>
An <i>open type</i> is defined by:
<ul>
 <li>the fully qualified Java class name of the open data values this type describes;
     note that only a limited set of Java classes is allowed for open data values
     (see {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}),</li>
 <li>its name,</li>
 <li>its description.</li>
</ul>

@param <T> the Java type that instances described by this type must
have.  For example, {@link SimpleType#INTEGER} is a {@code
SimpleType<Integer>} which is a subclass of {@code OpenType<Integer>},
meaning that an attribute, parameter, or return value that is described
as a {@code SimpleType.INTEGER} must have Java type
{@link Integer}.

@since 1.5
"
      classrelation 3830914 // <realization>
	relation 3830914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3830914 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2288642 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -9195195325186646468L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3831042 // ALLOWED_CLASSNAMES_LIST (<unidirectional association>)
	relation 3831042 --->
	  a role_name "ALLOWED_CLASSNAMES_LIST" init_value "
      Collections.unmodifiableList(
        Arrays.asList(
          \"java.lang.Void\",
          \"java.lang.Boolean\",
          \"java.lang.Character\",
          \"java.lang.Byte\",
          \"java.lang.Short\",
          \"java.lang.Integer\",
          \"java.lang.Long\",
          \"java.lang.Float\",
          \"java.lang.Double\",
          \"java.lang.String\",
          \"java.math.BigDecimal\",
          \"java.math.BigInteger\",
          \"java.util.Date\",
          \"javax.management.ObjectName\",
          CompositeData.class.getName(),        // better refer to these two class names like this, rather than hardcoding a string,
          TabularData.class.getName()) )" class_relation const_relation public
	    comment "
List of the fully qualified names of the Java classes allowed for open
data values. A multidimensional array of any one of these classes or
their corresponding primitive types is also an allowed class for open
data values.

<pre>ALLOWED_CLASSNAMES_LIST = {
\"java.lang.Void\",
\"java.lang.Boolean\",
\"java.lang.Character\",
\"java.lang.Byte\",
\"java.lang.Short\",
\"java.lang.Integer\",
\"java.lang.Long\",
\"java.lang.Float\",
\"java.lang.Double\",
\"java.lang.String\",
\"java.math.BigDecimal\",
\"java.math.BigInteger\",
\"java.util.Date\",
\"javax.management.ObjectName\",
CompositeData.class.getName(),
TabularData.class.getName() } ;
</pre>


 in case the package of these classes should change (who knows...)"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3831042 // ALLOWED_CLASSNAMES_LIST (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3831170 // ALLOWED_CLASSNAMES (<unidirectional association>)
	relation 3831170 --->
	  a role_name "ALLOWED_CLASSNAMES" multiplicity "[]" init_value "
        ALLOWED_CLASSNAMES_LIST.toArray(new String[0])" class_relation const_relation public
	    comment "
@deprecated Use {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST} instead.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    java_annotation "@Deprecated
"
	    classrelation_ref 3831170 // ALLOWED_CLASSNAMES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3831298 // className (<unidirectional association>)
	relation 3831298 --->
	  a role_name "className" private
	    comment "
@serial The fully qualified Java class name of open data values this
        type describes.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3831298 // className (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3831426 // description (<unidirectional association>)
	relation 3831426 --->
	  a role_name "description" private
	    comment "
@serial The type description (should not be null or empty).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3831426 // description (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3831554 // typeName (<unidirectional association>)
	relation 3831554 --->
	  a role_name "typeName" private
	    comment "
@serial The name given to this type (should not be null or empty).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3831554 // typeName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2288770 "isArray"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tells if this type describes an array (checked in constructor).

"
      end

      classrelation 3831682 // descriptor (<unidirectional association>)
	relation 3831682 --->
	  a role_name "descriptor" private
	    comment "
Cached Descriptor for this OpenType, constructed on demand.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3831682 // descriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      operation 9868546 "OpenType"
	cpp_inline protected explicit_return_type ""
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Constructor *** 

Constructs an <code>OpenType</code> instance (actually a subclass instance as <code>OpenType</code> is abstract),
checking for the validity of the given parameters.
The validity constraints are described below for each parameter.
<br>&nbsp;
@param  className  The fully qualified Java class name of the open data values this open type describes.
                   The valid Java class names allowed for open data values are listed in
                   {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.
                   A multidimensional array of any one of these classes
                   or their corresponding primitive types is also an allowed class,
                   in which case the class name follows the rules defined by the method
                   {@link Class#getName() getName()} of <code>java.lang.Class</code>.
                   For example, a 3-dimensional array of Strings has for class name
                   &quot;<code>[[[Ljava.lang.String;</code>&quot; (without the quotes).
<br>&nbsp;
@param  typeName  The name given to the open type this instance represents; cannot be a null or empty string.
<br>&nbsp;
@param  description  The human readable description of the open type this instance represents;
                     cannot be a null or empty string.
<br>&nbsp;
@throws IllegalArgumentException  if <var>className</var>, <var>typeName</var> or <var>description</var>
                                  is a null or empty string
<br>&nbsp;
@throws OpenDataException  if <var>className</var> is not one of the allowed Java class names for open data
"
      end

      operation 9868674 "OpenType"
	cpp_inline package explicit_return_type ""
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "isArray" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private constructor for callers we trust to get it right. "
      end

      operation 9868802 "checkClassNameOverride"
	cpp_inline private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9868930 "overridesGetClassName"
	class_operation cpp_inline private explicit_return_type "boolean"
	nparams 1
	  param in name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9869058 "validClassName"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9869186 "valid"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 2
	  param inout name "argName" type class_ref 128130 // String
	  param inout name "argValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return argValue.trim() provided argValue is neither null nor empty;
otherwise throw IllegalArgumentException.  "
      end

      operation 9869314 "getDescriptor"
	cpp_inline package return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private access to a Descriptor containing this OpenType. "
      end

      operation 9869442 "getClassName"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Open type information methods *** 

Returns the fully qualified Java class name of the open data values
this open type describes.
The only possible Java class names for open data values are listed in
{@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.
A multidimensional array of any one of these classes or their
corresponding primitive types is also an allowed class,
in which case the class name follows the rules defined by the method
{@link Class#getName() getName()} of <code>java.lang.Class</code>.
For example, a 3-dimensional array of Strings has for class name
&quot;<code>[[[Ljava.lang.String;</code>&quot; (without the quotes),
a 3-dimensional array of Integers has for class name
&quot;<code>[[[Ljava.lang.Integer;</code>&quot; (without the quotes),
and a 3-dimensional array of int has for class name
&quot;<code>[[[I</code>&quot; (without the quotes)

@return the class name.
"
      end

      operation 9869570 "safeGetClassName"
	cpp_inline package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A version of getClassName() that can only be called from within this
 package and that cannot be overridden."
      end

      operation 9869698 "getTypeName"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this <code>OpenType</code> instance.

@return the type name.
"
      end

      operation 9869826 "getDescription"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the text description of this <code>OpenType</code> instance.

@return the description.
"
      end

      operation 9869954 "isArray"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the open data values this open
type describes are arrays, <code>false</code> otherwise.

@return true if this is an array type.
"
      end

      operation 9870082 "isValue"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether <var>obj</var> is a value for this open type.

@param obj the object to be tested for validity.

@return <code>true</code> if <var>obj</var> is a value for this
open type, <code>false</code> otherwise.
"
      end

      operation 9870210 "isAssignableFrom"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "ot" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether values of the given type can be assigned to this open type.
The default implementation of this method returns true only if the
types are equal.

@param ot the type to be tested.

@return true if {@code ot} is assignable to this open type.
"
      end

      operation 9870338 "equals"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Methods overriden from class Object *** 

Compares the specified <code>obj</code> parameter with this
open type instance for equality.

@param obj the object to compare to.

@return true if this object and <code>obj</code> are equal.
"
      end

      operation 9870466 "hashCode"
	abstract cpp_inline public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9870594 "toString"
	abstract cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this open type instance.

@return the string representation.
"
      end

      operation 9870722 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link OpenType} from an {@link java.io.ObjectInputStream}.
"
      end
    end

    class 490498 "OpenDataException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This checked exception is thrown when an <i>open type</i>, an <i>open data</i>  or an <i>open MBean metadata info</i> instance
could not be constructed because one or more validity constraints were not met.


@since 1.5
"
      classrelation 3834498 // <generalisation>
	relation 3834498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3834498 // <generalisation>
	  b parent class_ref 1186690 // JMException
      end

      attribute 2290434 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8346311255433349870L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9880322 "OpenDataException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An OpenDataException with no detail message.
"
      end

      operation 9880450 "OpenDataException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An OpenDataException with a detail message.

@param msg the detail message.
"
      end
    end

    class 491778 "ArrayType"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 490242 // OpenType
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ArrayType</code> class is the <i>open type</i> class whose instances describe
all <i>open data</i> values which are n-dimensional arrays of <i>open data</i> values.
<p>
Examples of valid {@code ArrayType} instances are:
<pre>{@code
// 2-dimension array of java.lang.String
ArrayType<String[][]> a1 = new ArrayType<String[][]>(2, SimpleType.STRING);

// 1-dimension array of int
ArrayType<int[]> a2 = new ArrayType<int[]>(SimpleType.INTEGER, true);

// 1-dimension array of java.lang.Integer
ArrayType<Integer[]> a3 = new ArrayType<Integer[]>(SimpleType.INTEGER, false);

// 4-dimension array of int
ArrayType<int[][][][]> a4 = new ArrayType<int[][][][]>(3, a2);

// 4-dimension array of java.lang.Integer
ArrayType<Integer[][][][]> a5 = new ArrayType<Integer[][][][]>(3, a3);

// 1-dimension array of java.lang.String
ArrayType<String[]> a6 = new ArrayType<String[]>(SimpleType.STRING, false);

// 1-dimension array of long
ArrayType<long[]> a7 = new ArrayType<long[]>(SimpleType.LONG, true);

// 1-dimension array of java.lang.Integer
ArrayType<Integer[]> a8 = ArrayType.getArrayType(SimpleType.INTEGER);

// 2-dimension array of java.lang.Integer
ArrayType<Integer[][]> a9 = ArrayType.getArrayType(a8);

// 2-dimension array of int
ArrayType<int[][]> a10 = ArrayType.getPrimitiveArrayType(int[][].class);

// 3-dimension array of int
ArrayType<int[][][]> a11 = ArrayType.getArrayType(a10);

// 1-dimension array of float
ArrayType<float[]> a12 = ArrayType.getPrimitiveArrayType(float[].class);

// 2-dimension array of float
ArrayType<float[][]> a13 = ArrayType.getArrayType(a12);

// 1-dimension array of javax.management.ObjectName
ArrayType<ObjectName[]> a14 = ArrayType.getArrayType(SimpleType.OBJECTNAME);

// 2-dimension array of javax.management.ObjectName
ArrayType<ObjectName[][]> a15 = ArrayType.getArrayType(a14);

// 3-dimension array of java.lang.String
ArrayType<String[][][]> a16 = new ArrayType<String[][][]>(3, SimpleType.STRING);

// 1-dimension array of java.lang.String
ArrayType<String[]> a17 = new ArrayType<String[]>(1, SimpleType.STRING);

// 2-dimension array of java.lang.String
ArrayType<String[][]> a18 = new ArrayType<String[][]>(1, a17);

// 3-dimension array of java.lang.String
ArrayType<String[][][]> a19 = new ArrayType<String[][][]>(1, a18);
}</pre>


@since 1.5


Generification note: we could have defined a type parameter that is the
element type, with class ArrayType<E> extends OpenType<E[]>.  However,
that doesn't buy us all that much.  We can't say
public OpenType<E> getElementOpenType()
because this ArrayType could be a multi-dimensional array.
For example, if we had
ArrayType(2, SimpleType.INTEGER)
then E would have to be Integer[], while getElementOpenType() would
return SimpleType.INTEGER, which is an OpenType<Integer>.

Furthermore, we would like to support int[] (as well as Integer[]) as
an Open Type (RFE 5045358).  We would want this to be an OpenType<int[]>
which can't be expressed as <E[]> because E can't be a primitive type
like int.
"
      classrelation 3831810 // <realization>
	relation 3831810 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3831810 // <realization>
	  b parent class_ref 490242 // OpenType
      end

      attribute 2288898 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 720504429830309770L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      attribute 2289026 "dimension"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The dimension of arrays described by this {@link ArrayType}
        instance.

"
      end

      classrelation 3831938 // elementType (<unidirectional association>)
	relation 3831938 --->
	  a role_name "elementType" private
	    comment "
@serial The <i>open type</i> of element values contained in the arrays
        described by this {@link ArrayType} instance.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3831938 // elementType (<unidirectional association>)
	  b parent class_ref 490242 // OpenType
      end

      attribute 2289154 "primitiveArray"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial This flag indicates whether this {@link ArrayType}
        describes a primitive array.

@since 1.6

"
      end

      classrelation 3832066 // myHashCode (<unidirectional association>)
	relation 3832066 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable, these two values"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3832066 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3832194 // myToString (<unidirectional association>)
	relation 3832194 --->
	  a role_name "myToString" init_value " null" private
	    comment " need only be calculated once."
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3832194 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2289282 "PRIMITIVE_WRAPPER_NAME_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indexes refering to columns in the PRIMITIVE_ARRAY_TYPES table.
"
      end

      attribute 2289410 "PRIMITIVE_TYPE_NAME_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2289538 "PRIMITIVE_TYPE_KEY_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2289666 "PRIMITIVE_OPEN_TYPE_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3832322 // PRIMITIVE_ARRAY_TYPES (<unidirectional association>)
	relation 3832322 --->
	  a role_name "PRIMITIVE_ARRAY_TYPES" multiplicity "[][]" init_value " {
        { Boolean.class.getName(),   boolean.class.getName(), \"Z\", SimpleType.BOOLEAN },
        { Character.class.getName(), char.class.getName(),    \"C\", SimpleType.CHARACTER },
        { Byte.class.getName(),      byte.class.getName(),    \"B\", SimpleType.BYTE },
        { Short.class.getName(),     short.class.getName(),   \"S\", SimpleType.SHORT },
        { Integer.class.getName(),   int.class.getName(),     \"I\", SimpleType.INTEGER },
        { Long.class.getName(),      long.class.getName(),    \"J\", SimpleType.LONG },
        { Float.class.getName(),     float.class.getName(),   \"F\", SimpleType.FLOAT },
        { Double.class.getName(),    double.class.getName(),  \"D\", SimpleType.DOUBLE }
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3832322 // PRIMITIVE_ARRAY_TYPES (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9870850 "isPrimitiveContentType"
	class_operation cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param in name "primitiveKey" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9870978 "getPrimitiveTypeKey"
	class_operation cpp_inline package return_type class_ref 128130 // String
	nparams 1
	  param inout name "elementClassName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the key used to identify the element type in
arrays - e.g. \"Z\" for boolean, \"C\" for char etc...
@param elementClassName the wrapper class name of the array
       element (\"Boolean\",  \"Character\", etc...)
@return the key corresponding to the given type (\"Z\", \"C\", etc...)
        return null if the given elementClassName is not a primitive
        wrapper class name.
"
      end

      operation 9871106 "getPrimitiveTypeName"
	class_operation cpp_inline package return_type class_ref 128130 // String
	nparams 1
	  param inout name "elementClassName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the primitive type name corresponding to the given wrapper class.
e.g. \"boolean\" for \"Boolean\", \"char\" for \"Character\" etc...
@param elementClassName the type of the array element (\"Boolean\",
       \"Character\", etc...)
@return the primitive type name corresponding to the given wrapper class
        (\"boolean\", \"char\", etc...)
        return null if the given elementClassName is not a primitive
        wrapper type name.
"
      end

      operation 9871234 "getPrimitiveOpenType"
	class_operation cpp_inline package return_type class_ref 1197314 // SimpleType
	nparams 1
	  param inout name "primitiveTypeName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the primitive open type corresponding to the given primitive type.
e.g. SimpleType.BOOLEAN for \"boolean\", SimpleType.CHARACTER for
\"char\", etc...
@param primitiveTypeName the primitive type of the array element (\"boolean\",
       \"char\", etc...)
@return the OpenType corresponding to the given primitive type name
        (SimpleType.BOOLEAN, SimpleType.CHARACTER, etc...)
        return null if the given elementClassName is not a primitive
        type name.
"
      end

      operation 9871362 "ArrayType"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "dimension" explicit_type "int"
	  param inout name "elementType" type class_ref 490242 // OpenType
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Constructor *** 

Constructs an <tt>ArrayType</tt> instance describing <i>open data</i> values which are
arrays with dimension <var>dimension</var> of elements whose <i>open type</i> is <var>elementType</var>.
<p>
When invoked on an <tt>ArrayType</tt> instance, the {@link OpenType#getClassName() getClassName} method
returns the class name of the array instances it describes (following the rules defined by the
{@link Class#getName() getName} method of <code>java.lang.Class</code>), not the class name of the array elements
(which is returned by a call to <tt>getElementOpenType().getClassName()</tt>).
<p>
The internal field corresponding to the type name of this <code>ArrayType</code> instance is also set to
the class name of the array instances it describes.
In other words, the methods <code>getClassName</code> and <code>getTypeName</code> return the same string value.
The internal field corresponding to the description of this <code>ArrayType</code> instance is set to a string value
which follows the following template:
<ul>
<li>if non-primitive array: <tt><i>&lt;dimension&gt;</i>-dimension array of <i>&lt;element_class_name&gt;</i></tt></li>
<li>if primitive array: <tt><i>&lt;dimension&gt;</i>-dimension array of <i>&lt;primitive_type_of_the_element_class_name&gt;</i></tt></li>
</ul>
<p>
As an example, the following piece of code:
<pre>{@code
ArrayType<String[][][]> t = new ArrayType<String[][][]>(3, SimpleType.STRING);
System.out.println(\"array class name       = \" + t.getClassName());
System.out.println(\"element class name     = \" + t.getElementOpenType().getClassName());
System.out.println(\"array type name        = \" + t.getTypeName());
System.out.println(\"array type description = \" + t.getDescription());
}</pre>
would produce the following output:
<pre>{@code
array class name       = [[[Ljava.lang.String;
element class name     = java.lang.String
array type name        = [[[Ljava.lang.String;
array type description = 3-dimension array of java.lang.String
}</pre>
And the following piece of code which is equivalent to the one listed
above would also produce the same output:
<pre>{@code
ArrayType<String[]> t1 = new ArrayType<String[]>(1, SimpleType.STRING);
ArrayType<String[][]> t2 = new ArrayType<String[][]>(1, t1);
ArrayType<String[][][]> t3 = new ArrayType<String[][][]>(1, t2);
System.out.println(\"array class name       = \" + t3.getClassName());
System.out.println(\"element class name     = \" + t3.getElementOpenType().getClassName());
System.out.println(\"array type name        = \" + t3.getTypeName());
System.out.println(\"array type description = \" + t3.getDescription());
}</pre>

@param  dimension  the dimension of arrays described by this <tt>ArrayType</tt> instance;
                   must be greater than or equal to 1.

@param  elementType  the <i>open type</i> of element values contained
                     in the arrays described by this <tt>ArrayType</tt>
                     instance; must be an instance of either
                     <tt>SimpleType</tt>, <tt>CompositeType</tt>,
                     <tt>TabularType</tt> or another <tt>ArrayType</tt>
                     with a <tt>SimpleType</tt>, <tt>CompositeType</tt>
                     or <tt>TabularType</tt> as its <tt>elementType</tt>.

@throws IllegalArgumentException if {@code dimension} is not a positive
                                 integer.
@throws OpenDataException  if <var>elementType's className</var> is not
                           one of the allowed Java class names for open
                           data.
"
      end

      operation 9871490 "ArrayType"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "elementType" type class_ref 1197314 // SimpleType
	  param inout name "primitiveArray" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a unidimensional {@code ArrayType} instance for the
supplied {@code SimpleType}.
<p>
This constructor supports the creation of arrays of primitive
types when {@code primitiveArray} is {@code true}.
<p>
For primitive arrays the {@link #getElementOpenType()} method
returns the {@link SimpleType} corresponding to the wrapper
type of the primitive type of the array.
<p>
When invoked on an <tt>ArrayType</tt> instance, the {@link OpenType#getClassName() getClassName} method
returns the class name of the array instances it describes (following the rules defined by the
{@link Class#getName() getName} method of <code>java.lang.Class</code>), not the class name of the array elements
(which is returned by a call to <tt>getElementOpenType().getClassName()</tt>).
<p>
The internal field corresponding to the type name of this <code>ArrayType</code> instance is also set to
the class name of the array instances it describes.
In other words, the methods <code>getClassName</code> and <code>getTypeName</code> return the same string value.
The internal field corresponding to the description of this <code>ArrayType</code> instance is set to a string value
which follows the following template:
<ul>
<li>if non-primitive array: <tt>1-dimension array of <i>&lt;element_class_name&gt;</i></tt></li>
<li>if primitive array: <tt>1-dimension array of <i>&lt;primitive_type_of_the_element_class_name&gt;</i></tt></li>
</ul>
<p>
As an example, the following piece of code:
<pre>{@code
ArrayType<int[]> t = new ArrayType<int[]>(SimpleType.INTEGER, true);
System.out.println(\"array class name       = \" + t.getClassName());
System.out.println(\"element class name     = \" + t.getElementOpenType().getClassName());
System.out.println(\"array type name        = \" + t.getTypeName());
System.out.println(\"array type description = \" + t.getDescription());
}</pre>
would produce the following output:
<pre>{@code
array class name       = [I
element class name     = java.lang.Integer
array type name        = [I
array type description = 1-dimension array of int
}</pre>

@param elementType the {@code SimpleType} of the element values
                   contained in the arrays described by this
                   {@code ArrayType} instance.

@param primitiveArray {@code true} when this array describes
                      primitive arrays.

@throws IllegalArgumentException if {@code dimension} is not a positive
integer.
@throws OpenDataException if {@code primitiveArray} is {@code true} and
{@code elementType} is not a valid {@code SimpleType} for a primitive
type.

@since 1.6
"
      end

      operation 9871618 "ArrayType"
	cpp_inline package explicit_return_type ""
	nparams 6
	  param inout name "className" type class_ref 128130 // String
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param in name "dimension" explicit_type "int"
	  param inout name "elementType" type class_ref 490242 // OpenType
	  param inout name "primitiveArray" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private constructor for callers we trust to get it right. "
      end

      operation 9871746 "buildArrayClassName"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 2
	  param in name "dimension" explicit_type "int"
	  param inout name "elementType" type class_ref 490242 // OpenType
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9871874 "buildArrayClassName"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 3
	  param in name "dimension" explicit_type "int"
	  param inout name "elementType" type class_ref 490242 // OpenType
	  param inout name "isPrimitiveArray" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9872002 "buildArrayDescription"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 2
	  param in name "dimension" explicit_type "int"
	  param inout name "elementType" type class_ref 490242 // OpenType
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9872130 "buildArrayDescription"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 3
	  param in name "dimension" explicit_type "int"
	  param inout name "elementType" type class_ref 490242 // OpenType
	  param inout name "isPrimitiveArray" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9872258 "getDimension"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** ArrayType specific information methods *** 

Returns the dimension of arrays described by this <tt>ArrayType</tt> instance.

@return the dimension.
"
      end

      operation 9872386 "getElementOpenType"
	cpp_inline public return_type class_ref 490242 // OpenType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>open type</i> of element values contained in the arrays described by this <tt>ArrayType</tt> instance.

@return the element type.
"
      end

      operation 9872514 "isPrimitiveArray"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the open data values this open
type describes are primitive arrays, <code>false</code> otherwise.

@return true if this is a primitive array type.

@since 1.6
"
      end

      operation 9872642 "isValue"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether <var>obj</var> is a value for this <code>ArrayType</code>
instance.
<p>
This method returns <code>true</code> if and only if <var>obj</var>
is not null, <var>obj</var> is an array and any one of the following
is <tt>true</tt>:

<ul>
<li>if this <code>ArrayType</code> instance describes an array of
<tt>SimpleType</tt> elements or their corresponding primitive types,
<var>obj</var>'s class name is the same as the className field defined
for this <code>ArrayType</code> instance (i.e. the class name returned
by the {@link OpenType#getClassName() getClassName} method, which
includes the dimension information),<br>&nbsp;</li>
<li>if this <code>ArrayType</code> instance describes an array of
classes implementing the {@code TabularData} interface or the
{@code CompositeData} interface, <var>obj</var> is assignable to
such a declared array, and each element contained in {<var>obj</var>
is either null or a valid value for the element's open type specified
by this <code>ArrayType</code> instance.</li>
</ul>

@param obj the object to be tested.

@return <code>true</code> if <var>obj</var> is a value for this
<code>ArrayType</code> instance.
"
      end

      operation 9872770 "checkElementsType"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "x_dim_Array" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "dim" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if all elements contained in the array argument x_dim_Array of dimension dim
are valid values (ie either null or of the right openType)
for the element open type specified by this ArrayType instance.

This method's implementation uses recursion to go down the dimensions of the array argument.
"
      end

      operation 9872898 "isAssignableFrom"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "ot" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9873026 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Methods overriden from class Object *** 

Compares the specified <code>obj</code> parameter with this
<code>ArrayType</code> instance for equality.
<p>
Two <code>ArrayType</code> instances are equal if and only if they
describe array instances which have the same dimension, elements'
open type and primitive array flag.

@param obj the object to be compared for equality with this
           <code>ArrayType</code> instance; if <var>obj</var>
           is <code>null</code> or is not an instance of the
           class <code>ArrayType</code> this method returns
           <code>false</code>.

@return <code>true</code> if the specified object is equal to
        this <code>ArrayType</code> instance.
"
      end

      operation 9873154 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>ArrayType</code> instance.
<p>
The hash code of an <code>ArrayType</code> instance is the sum of the
hash codes of all the elements of information used in <code>equals</code>
comparisons (i.e. dimension, elements' open type and primitive array flag).
The hashcode for a primitive value is the hashcode of the corresponding boxed
object (e.g. the hashcode for <tt>true</tt> is <tt>Boolean.TRUE.hashCode()</tt>).
This ensures that <code> t1.equals(t2) </code> implies that
<code> t1.hashCode()==t2.hashCode() </code> for any two
<code>ArrayType</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>
As <code>ArrayType</code> instances are immutable, the hash
code for this instance is calculated once, on the first call
to <code>hashCode</code>, and then the same value is returned
for subsequent calls.

@return  the hash code value for this <code>ArrayType</code> instance
"
      end

      operation 9873282 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>ArrayType</code> instance.
<p>
The string representation consists of the name of this class (i.e.
<code>javax.management.openmbean.ArrayType</code>), the type name,
the dimension, the elements' open type and the primitive array flag
defined for this instance.
<p>
As <code>ArrayType</code> instances are immutable, the
string representation for this instance is calculated
once, on the first call to <code>toString</code>, and
then the same value is returned for subsequent calls.

@return a string representation of this <code>ArrayType</code> instance
"
      end

      operation 9873410 "getArrayType"
	class_operation cpp_inline public return_type class_ref 491778 // ArrayType
	nparams 1
	  param inout name "elementType" type class_ref 490242 // OpenType
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E[]> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an {@code ArrayType} instance in a type-safe manner.
<p>
Multidimensional arrays can be built up by calling this method as many
times as necessary.
<p>
Calling this method twice with the same parameters may return the same
object or two equal but not identical objects.
<p>
As an example, the following piece of code:
<pre>{@code
ArrayType<String[]> t1 = ArrayType.getArrayType(SimpleType.STRING);
ArrayType<String[][]> t2 = ArrayType.getArrayType(t1);
ArrayType<String[][][]> t3 = ArrayType.getArrayType(t2);
System.out.println(\"array class name       = \" + t3.getClassName());
System.out.println(\"element class name     = \" + t3.getElementOpenType().getClassName());
System.out.println(\"array type name        = \" + t3.getTypeName());
System.out.println(\"array type description = \" + t3.getDescription());
}</pre>
would produce the following output:
<pre>{@code
array class name       = [[[Ljava.lang.String;
element class name     = java.lang.String
array type name        = [[[Ljava.lang.String;
array type description = 3-dimension array of java.lang.String
}</pre>

@param  elementType  the <i>open type</i> of element values contained
                     in the arrays described by this <tt>ArrayType</tt>
                     instance; must be an instance of either
                     <tt>SimpleType</tt>, <tt>CompositeType</tt>,
                     <tt>TabularType</tt> or another <tt>ArrayType</tt>
                     with a <tt>SimpleType</tt>, <tt>CompositeType</tt>
                     or <tt>TabularType</tt> as its <tt>elementType</tt>.

@throws OpenDataException if <var>elementType's className</var> is not
                          one of the allowed Java class names for open
                          data.

@since 1.6
"
      end

      operation 9873538 "getPrimitiveArrayType"
	class_operation cpp_inline public return_type class_ref 491778 // ArrayType
	nparams 1
	  param inout name "arrayClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Create an {@code ArrayType} instance in a type-safe manner.
<p>
Calling this method twice with the same parameters may return the
same object or two equal but not identical objects.
<p>
As an example, the following piece of code:
<pre>{@code
ArrayType<int[][][]> t = ArrayType.getPrimitiveArrayType(int[][][].class);
System.out.println(\"array class name       = \" + t.getClassName());
System.out.println(\"element class name     = \" + t.getElementOpenType().getClassName());
System.out.println(\"array type name        = \" + t.getTypeName());
System.out.println(\"array type description = \" + t.getDescription());
}</pre>
would produce the following output:
<pre>{@code
array class name       = [[[I
element class name     = java.lang.Integer
array type name        = [[[I
array type description = 3-dimension array of int
}</pre>

@param arrayClass a primitive array class such as {@code int[].class},
                  {@code boolean[][].class}, etc. The {@link
                  #getElementOpenType()} method of the returned
                  {@code ArrayType} returns the {@link SimpleType}
                  corresponding to the wrapper type of the primitive
                  type of the array.

@throws IllegalArgumentException if <var>arrayClass</var> is not
                                 a primitive array.

@since 1.6
"
      end

      operation 9873666 "readResolve"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace/resolve the object read from the stream before it is returned
to the caller.

@serialData The new serial form of this class defines a new serializable
{@code boolean} field {@code primitiveArray}. In order to guarantee the
interoperability with previous versions of this class the new serial
form must continue to refer to primitive wrapper types even when the
{@code ArrayType} instance describes a primitive type array. So when
{@code primitiveArray} is {@code true} the {@code className},
{@code typeName} and {@code description} serializable fields
are converted into primitive types before the deserialized
{@code ArrayType} instance is return to the caller. The
{@code elementType} field always returns the {@code SimpleType}
corresponding to the primitive wrapper type of the array's
primitive type.
<p>
Therefore the following serializable fields are deserialized as follows:
<ul>
  <li>if {@code primitiveArray} is {@code true} the {@code className}
      field is deserialized by replacing the array's component primitive
      wrapper type by the corresponding array's component primitive type,
      e.g. {@code \"[[Ljava.lang.Integer;\"} will be deserialized as
      {@code \"[[I\"}.</li>
  <li>if {@code primitiveArray} is {@code true} the {@code typeName}
      field is deserialized by replacing the array's component primitive
      wrapper type by the corresponding array's component primitive type,
      e.g. {@code \"[[Ljava.lang.Integer;\"} will be deserialized as
      {@code \"[[I\"}.</li>
  <li>if {@code primitiveArray} is {@code true} the {@code description}
      field is deserialized by replacing the array's component primitive
      wrapper type by the corresponding array's component primitive type,
      e.g. {@code \"2-dimension array of java.lang.Integer\"} will be
      deserialized as {@code \"2-dimension array of int\"}.</li>
</ul>

@since 1.6
"
      end

      operation 9873794 "convertFromWrapperToPrimitiveTypes"
	cpp_inline private return_type class_ref 491778 // ArrayType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9873922 "writeReplace"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Nominate a replacement for this object in the stream before the object
is written.

@serialData The new serial form of this class defines a new serializable
{@code boolean} field {@code primitiveArray}. In order to guarantee the
interoperability with previous versions of this class the new serial
form must continue to refer to primitive wrapper types even when the
{@code ArrayType} instance describes a primitive type array. So when
{@code primitiveArray} is {@code true} the {@code className},
{@code typeName} and {@code description} serializable fields
are converted into wrapper types before the serialized
{@code ArrayType} instance is written to the stream. The
{@code elementType} field always returns the {@code SimpleType}
corresponding to the primitive wrapper type of the array's
primitive type.
<p>
Therefore the following serializable fields are serialized as follows:
<ul>
  <li>if {@code primitiveArray} is {@code true} the {@code className}
      field is serialized by replacing the array's component primitive
      type by the corresponding array's component primitive wrapper type,
      e.g. {@code \"[[I\"} will be serialized as
      {@code \"[[Ljava.lang.Integer;\"}.</li>
  <li>if {@code primitiveArray} is {@code true} the {@code typeName}
      field is serialized by replacing the array's component primitive
      type by the corresponding array's component primitive wrapper type,
      e.g. {@code \"[[I\"} will be serialized as
      {@code \"[[Ljava.lang.Integer;\"}.</li>
  <li>if {@code primitiveArray} is {@code true} the {@code description}
      field is serialized by replacing the array's component primitive
      type by the corresponding array's component primitive wrapper type,
      e.g. {@code \"2-dimension array of int\"} will be serialized as
      {@code \"2-dimension array of java.lang.Integer\"}.</li>
</ul>

@since 1.6
"
      end

      operation 9874050 "convertFromPrimitiveToWrapperTypes"
	cpp_inline private return_type class_ref 491778 // ArrayType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 492290 "TabularType"
      visibility public 
      nactuals 1
      actual class class_ref 490242 // OpenType
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " jmx import


The <code>TabularType</code> class is the <i> open type</i> class
whose instances describe the types of {@link TabularData TabularData} values.

@since 1.5
"
      classrelation 3842050 // <realization>
	relation 3842050 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3842050 // <realization>
	  b parent class_ref 490242 // OpenType
      end

      attribute 2291458 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 6554071860220659261L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3842178 // rowType (<unidirectional association>)
	relation 3842178 --->
	  a role_name "rowType" private
	    comment "
@serial The composite type of rows

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3842178 // rowType (<unidirectional association>)
	  b parent class_ref 492546 // CompositeType
      end

      classrelation 3842306 // indexNames (<unidirectional association>)
	relation 3842306 --->
	  a role_name "indexNames" private
	    comment "
@serial The items used to index each row element, kept in the order the user gave
        This is an unmodifiable {@link ArrayList}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3842306 // indexNames (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3842434 // myHashCode (<unidirectional association>)
	relation 3842434 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable, these two values"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3842434 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3842562 // myToString (<unidirectional association>)
	relation 3842562 --->
	  a role_name "myToString" init_value " null" private
	    comment " need only be calculated once."
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3842562 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9903618 "TabularType"
	public explicit_return_type ""
	nparams 4
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "rowType" type class_ref 492546 // CompositeType
	  param inout name "indexNames" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Constructor *** 

Constructs a <code>TabularType</code> instance, checking for the validity of the given parameters.
The validity constraints are described below for each parameter.
<p>
The Java class name of tabular data values this tabular type represents
(ie the class name returned by the {@link OpenType#getClassName() getClassName} method)
is set to the string value returned by <code>TabularData.class.getName()</code>.
<p>
@param  typeName  The name given to the tabular type this instance represents; cannot be a null or empty string.
<br>&nbsp;
@param  description  The human readable description of the tabular type this instance represents;
                     cannot be a null or empty string.
<br>&nbsp;
@param  rowType  The type of the row elements of tabular data values described by this tabular type instance;
                 cannot be null.
<br>&nbsp;
@param  indexNames  The names of the items the values of which are used to uniquely index each row element in the
                    tabular data values described by this tabular type instance;
                    cannot be null or empty. Each element should be an item name defined in <var>rowType</var>
                    (no null or empty string allowed).
                    It is important to note that the <b>order</b> of the item names in <var>indexNames</var>
                    is used by the methods {@link TabularData#get(java.lang.Object[]) get} and
                    {@link TabularData#remove(java.lang.Object[]) remove} of class
                    <code>TabularData</code> to match their array of values parameter to items.
<br>&nbsp;
@throws IllegalArgumentException  if <var>rowType</var> is null,
                                  or <var>indexNames</var> is a null or empty array,
                                  or an element in <var>indexNames</var> is a null or empty string,
                                  or <var>typeName</var> or <var>description</var> is a null or empty string.
<br>&nbsp;
@throws OpenDataException  if an element's value of <var>indexNames</var>
                           is not an item name defined in <var>rowType</var>.
"
      end

      operation 9903746 "checkForNullElement"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "arg" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "argName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that Object[] arg is neither null nor empty (ie length==0)
and that it does not contain any null element.
"
      end

      operation 9903874 "checkForEmptyString"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "arg" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "argName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that String[] does not contain any empty (or blank characters only) string.
"
      end

      operation 9904002 "getRowType"
	public return_type class_ref 492546 // CompositeType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Tabular type specific information methods *** 

Returns the type of the row elements of tabular data values
described by this <code>TabularType</code> instance.

@return the type of each row.
"
      end

      operation 9904130 "getIndexNames"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns, in the same order as was given to this instance's
constructor, an unmodifiable List of the names of the items the
values of which are used to uniquely index each row element of
tabular data values described by this <code>TabularType</code>
instance.</p>

@return a List of String representing the names of the index
items.

"
      end

      operation 9904258 "isValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether <var>obj</var> is a value which could be
described by this <code>TabularType</code> instance.

<p>If <var>obj</var> is null or is not an instance of
<code>javax.management.openmbean.TabularData</code>,
<code>isValue</code> returns <code>false</code>.</p>

<p>If <var>obj</var> is an instance of
<code>javax.management.openmbean.TabularData</code>, say {@code
td}, the result is true if this {@code TabularType} is
<em>assignable from</em> {@link TabularData#getTabularType()
td.getTabularType()}, as defined in {@link
CompositeType#isValue CompositeType.isValue}.</p>

@param obj the value whose open type is to be tested for
compatibility with this <code>TabularType</code> instance.

@return <code>true</code> if <var>obj</var> is a value for this
tabular type, <code>false</code> otherwise.
"
      end

      operation 9904386 "isAssignableFrom"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "ot" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9904514 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Methods overriden from class Object *** 

Compares the specified <code>obj</code> parameter with this <code>TabularType</code> instance for equality.
<p>
Two <code>TabularType</code> instances are equal if and only if all of the following statements are true:
<ul>
<li>their type names are equal</li>
<li>their row types are equal</li>
<li>they use the same index names, in the same order</li>
</ul>
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>TabularType</code> instance;
             if <var>obj</var> is <code>null</code>, <code>equals</code> returns <code>false</code>.

@return  <code>true</code> if the specified object is equal to this <code>TabularType</code> instance.
"
      end

      operation 9904642 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>TabularType</code> instance.
<p>
The hash code of a <code>TabularType</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: name, row type, index names).
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>TabularType</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>
As <code>TabularType</code> instances are immutable, the hash code for this instance is calculated once,
on the first call to <code>hashCode</code>, and then the same value is returned for subsequent calls.

@return  the hash code value for this <code>TabularType</code> instance
"
      end

      operation 9904770 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>TabularType</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.TabularType</code>),
the type name for this instance, the row type string representation of this instance,
and the index names of this instance.
<p>
As <code>TabularType</code> instances are immutable, the string representation for this instance is calculated once,
on the first call to <code>toString</code>, and then the same value is returned for subsequent calls.

@return  a string representation of this <code>TabularType</code> instance
"
      end
    end

    class 492546 "CompositeType"
      visibility public 
      nactuals 1
      actual class class_ref 490242 // OpenType
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " jmx import


The <code>CompositeType</code> class is the <i>open type</i> class
whose instances describe the types of {@link CompositeData CompositeData} values.


@since 1.5
"
      classrelation 3833346 // <realization>
	relation 3833346 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3833346 // <realization>
	  b parent class_ref 490242 // OpenType
      end

      attribute 2289922 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -5366242454346948798L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3833474 // nameToDescription (<unidirectional association>)
	relation 3833474 --->
	  a role_name "nameToDescription" private
	    comment "
@serial Sorted mapping of the item names to their descriptions

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	    classrelation_ref 3833474 // nameToDescription (<unidirectional association>)
	  b parent class_ref 1095810 // TreeMap
      end

      classrelation 3833602 // nameToType (<unidirectional association>)
	relation 3833602 --->
	  a role_name "nameToType" private
	    comment "
@serial Sorted mapping of the item names to their open types

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,OpenType<?>> ${name}${value};
"
	    classrelation_ref 3833602 // nameToType (<unidirectional association>)
	  b parent class_ref 1095810 // TreeMap
      end

      classrelation 3833730 // myHashCode (<unidirectional association>)
	relation 3833730 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable, following three values need only
be calculated once.  
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3833730 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3833858 // myToString (<unidirectional association>)
	relation 3833858 --->
	  a role_name "myToString" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3833858 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3833986 // myNamesSet (<unidirectional association>)
	relation 3833986 --->
	  a role_name "myNamesSet" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3833986 // myNamesSet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 9878018 "CompositeType"
	public explicit_return_type ""
	nparams 5
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "itemNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "itemDescriptions" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "itemTypes" type class_ref 490242 // OpenType
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}<?>[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Constructor *** 

Constructs a <code>CompositeType</code> instance, checking for the validity of the given parameters.
The validity constraints are described below for each parameter.
<p>
Note that the contents of the three array parameters
<var>itemNames</var>, <var>itemDescriptions</var> and <var>itemTypes</var>
are internally copied so that any subsequent modification of these arrays by the caller of this constructor
has no impact on the constructed <code>CompositeType</code> instance.
<p>
The Java class name of composite data values this composite type represents
(ie the class name returned by the {@link OpenType#getClassName() getClassName} method)
is set to the string value returned by <code>CompositeData.class.getName()</code>.
<p>
@param  typeName  The name given to the composite type this instance represents; cannot be a null or empty string.
<br>&nbsp;
@param  description  The human readable description of the composite type this instance represents;
                     cannot be a null or empty string.
<br>&nbsp;
@param  itemNames  The names of the items contained in the
                   composite data values described by this <code>CompositeType</code> instance;
                   cannot be null and should contain at least one element; no element can be a null or empty string.
                   Note that the order in which the item names are given is not important to differentiate a
                   <code>CompositeType</code> instance from another;
                   the item names are internally stored sorted in ascending alphanumeric order.
<br>&nbsp;
@param  itemDescriptions  The descriptions, in the same order as <var>itemNames</var>, of the items contained in the
                          composite data values described by this <code>CompositeType</code> instance;
                          should be of the same size as <var>itemNames</var>;
                          no element can be null or an empty string.
<br>&nbsp;
@param  itemTypes  The open type instances, in the same order as <var>itemNames</var>, describing the items contained
                   in the composite data values described by this <code>CompositeType</code> instance;
                   should be of the same size as <var>itemNames</var>;
                   no element can be null.
<br>&nbsp;
@throws IllegalArgumentException  If <var>typeName</var> or <var>description</var> is a null or empty string,
                                  or <var>itemNames</var> or <var>itemDescriptions</var> or <var>itemTypes</var> is null,
                                  or any element of <var>itemNames</var> or <var>itemDescriptions</var>
                                  is a null or empty string,
                                  or any element of <var>itemTypes</var> is null,
                                  or <var>itemNames</var> or <var>itemDescriptions</var> or <var>itemTypes</var>
                                  are not of the same size.
<br>&nbsp;
@throws OpenDataException  If <var>itemNames</var> contains duplicate item names
                           (case sensitive, but leading and trailing whitespaces removed).
"
      end

      operation 9878146 "checkForNullElement"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "arg" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "argName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9878274 "checkForEmptyString"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "arg" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "argName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9878402 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "itemName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Composite type specific information methods *** 

Returns <code>true</code> if this <code>CompositeType</code> instance defines an item
whose name is <var>itemName</var>.

@param itemName the name of the item.

@return true if an item of this name is present.
"
      end

      operation 9878530 "getDescription"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "itemName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the description of the item whose name is <var>itemName</var>,
or <code>null</code> if this <code>CompositeType</code> instance does not define any item
whose name is <var>itemName</var>.

@param itemName the name of the item.

@return the description.
"
      end

      operation 9878658 "getType"
	public return_type class_ref 490242 // OpenType
	nparams 1
	  param inout name "itemName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>open type</i> of the item whose name is <var>itemName</var>,
or <code>null</code> if this <code>CompositeType</code> instance does not define any item
whose name is <var>itemName</var>.

@param itemName the name of the time.

@return the type.
"
      end

      operation 9878786 "keySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable Set view of all the item names defined by this <code>CompositeType</code> instance.
The set's iterator will return the item names in ascending order.

@return a {@link Set} of {@link String}.
"
      end

      operation 9878914 "isValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether <var>obj</var> is a value which could be
described by this <code>CompositeType</code> instance.

<p>If <var>obj</var> is null or is not an instance of
<code>javax.management.openmbean.CompositeData</code>,
<code>isValue</code> returns <code>false</code>.</p>

<p>If <var>obj</var> is an instance of
<code>javax.management.openmbean.CompositeData</code>, then let
{@code ct} be its {@code CompositeType} as returned by {@link
CompositeData#getCompositeType()}.  The result is true if
{@code this} is <em>assignable from</em> {@code ct}.  This
means that:</p>

<ul>
<li>{@link #getTypeName() this.getTypeName()} equals
{@code ct.getTypeName()}, and
<li>there are no item names present in {@code this} that are
not also present in {@code ct}, and
<li>for every item in {@code this}, its type is assignable from
the type of the corresponding item in {@code ct}.
</ul>

<p>A {@code TabularType} is assignable from another {@code
TabularType} if they have the same {@linkplain
TabularType#getTypeName() typeName} and {@linkplain
TabularType#getIndexNames() index name list}, and the
{@linkplain TabularType#getRowType() row type} of the first is
assignable from the row type of the second.

<p>An {@code ArrayType} is assignable from another {@code
ArrayType} if they have the same {@linkplain
ArrayType#getDimension() dimension}; and both are {@linkplain
ArrayType#isPrimitiveArray() primitive arrays} or neither is;
and the {@linkplain ArrayType#getElementOpenType() element
type} of the first is assignable from the element type of the
second.

<p>In every other case, an {@code OpenType} is assignable from
another {@code OpenType} only if they are equal.</p>

<p>These rules mean that extra items can be added to a {@code
CompositeData} without making it invalid for a {@code CompositeType}
that does not have those items.</p>

@param  obj  the value whose open type is to be tested for compatibility
with this <code>CompositeType</code> instance.

@return <code>true</code> if <var>obj</var> is a value for this
composite type, <code>false</code> otherwise.
"
      end

      operation 9879042 "isAssignableFrom"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "ot" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Tests whether values of the given type can be assigned to this
open type.  The result is true if the given type is also a
CompositeType with the same name ({@link #getTypeName()}), and
every item in this type is also present in the given type with
the same name and assignable type.  There can be additional
items in the given type, which are ignored.

@param ot the type to be tested.

@return true if {@code ot} is assignable to this open type.
"
      end

      operation 9879170 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Methods overriden from class Object *** 

Compares the specified <code>obj</code> parameter with this <code>CompositeType</code> instance for equality.
<p>
Two <code>CompositeType</code> instances are equal if and only if all of the following statements are true:
<ul>
<li>their type names are equal</li>
<li>their items' names and types are equal</li>
</ul>
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>CompositeType</code> instance;
             if <var>obj</var> is <code>null</code>, <code>equals</code> returns <code>false</code>.

@return  <code>true</code> if the specified object is equal to this <code>CompositeType</code> instance.
"
      end

      operation 9879298 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>CompositeType</code> instance.
<p>
The hash code of a <code>CompositeType</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: name, items names, items types).
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>CompositeType</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>
As <code>CompositeType</code> instances are immutable, the hash code for this instance is calculated once,
on the first call to <code>hashCode</code>, and then the same value is returned for subsequent calls.

@return  the hash code value for this <code>CompositeType</code> instance
"
      end

      operation 9879426 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>CompositeType</code> instance.
<p>
The string representation consists of
the name of this class (ie <code>javax.management.openmbean.CompositeType</code>), the type name for this instance,
and the list of the items names and types string representation of this instance.
<p>
As <code>CompositeType</code> instances are immutable, the string representation for this instance is calculated once,
on the first call to <code>toString</code>, and then the same value is returned for subsequent calls.

@return  a string representation of this <code>CompositeType</code> instance
"
      end
    end

    class 492802 "CompositeData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " jmx import


The <tt>CompositeData</tt> interface specifies the behavior of a specific type of complex <i>open data</i> objects
which represent <i>composite data</i> structures.


@since 1.5
"
      operation 9874178 "getCompositeType"
	public return_type class_ref 492546 // CompositeType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>composite type </i> of this <i>composite data</i> instance.

@return the type of this CompositeData.
"
      end

      operation 9874306 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the item whose name is <tt>key</tt>.

@param key the name of the item.

@return the value associated with this key.

@throws IllegalArgumentException  if <tt>key</tt> is a null or empty String.

@throws InvalidKeyException  if <tt>key</tt> is not an existing item name for this <tt>CompositeData</tt> instance.
"
      end

      operation 9874434 "getAll"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "keys" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the values of the items whose names are specified by <tt>keys</tt>, in the same order as <tt>keys</tt>.

@param keys the names of the items.

@return the values corresponding to the keys.

@throws IllegalArgumentException  if an element in <tt>keys</tt> is a null or empty String.

@throws InvalidKeyException  if an element in <tt>keys</tt> is not an existing item name for this <tt>CompositeData</tt> instance.
"
      end

      operation 9874562 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains
an item whose name is <tt>key</tt>.
If <tt>key</tt> is a null or empty String, this method simply returns false.

@param key the key to be tested.

@return true if this <tt>CompositeData</tt> contains the key.
"
      end

      operation 9874690 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains an item
whose value is <tt>value</tt>.

@param value the value to be tested.

@return true if this <tt>CompositeData</tt> contains the value.
"
      end

      operation 9874818 "values"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable Collection view of the item values contained in this <tt>CompositeData</tt> instance.
The returned collection's iterator will return the values in the ascending lexicographic order of the corresponding
item names.

@return the values.
"
      end

      operation 9874946 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified <var>obj</var> parameter with this
<code>CompositeData</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>CompositeData</code> interface,</li>
<li>their composite types are equal</li>
<li>their contents, i.e. (name, value) pairs are equal. If a value contained in
the content is an array, the value comparison is done as if by calling
the {@link java.util.Arrays#deepEquals(Object[], Object[]) deepEquals} method
for arrays of object reference types or the appropriate overloading of
{@code Arrays.equals(e1,e2)} for arrays of primitive types</li>
</ul>
<p>
This ensures that this <tt>equals</tt> method works properly for
<var>obj</var> parameters which are different implementations of the
<code>CompositeData</code> interface, with the restrictions mentioned in the
{@link java.util.Collection#equals(Object) equals}
method of the <tt>java.util.Collection</tt> interface.

@param  obj  the object to be compared for equality with this
<code>CompositeData</code> instance.
@return  <code>true</code> if the specified object is equal to this
<code>CompositeData</code> instance.
"
      end

      operation 9875074 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>CompositeData</code> instance.
<p>
The hash code of a <code>CompositeData</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its <i>composite type</i> and all the item values).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>CompositeData</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>
Each item value's hash code is added to the returned hash code.
If an item value is an array,
its hash code is obtained as if by calling the
{@link java.util.Arrays#deepHashCode(Object[]) deepHashCode} method
for arrays of object reference types or the appropriate overloading
of {@code Arrays.hashCode(e)} for arrays of primitive types.

@return the hash code value for this <code>CompositeData</code> instance
"
      end

      operation 9875202 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>CompositeData</code> instance.
<p>
The string representation consists of the name of the implementing class,
the string representation of the composite type of this instance, and the string representation of the contents
(ie list the itemName=itemValue mappings).

@return  a string representation of this <code>CompositeData</code> instance
"
      end
    end

    class 1192194 "OpenMBeanParameterInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " jmx import


<p>Describes a parameter used in one or more operations or
constructors of an open MBean.</p>

<p>This interface declares the same methods as the class {@link
javax.management.MBeanParameterInfo}.  A class implementing this
interface (typically {@link OpenMBeanParameterInfoSupport}) should
extend {@link javax.management.MBeanParameterInfo}.</p>


@since 1.5
"
      operation 9880578 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Re-declares methods that are in class MBeanParameterInfo of JMX 1.0
 (these will be removed when MBeanParameterInfo is made a parent interface of this interface)

Returns a human readable description of the parameter
described by this <tt>OpenMBeanParameterInfo</tt> instance.

@return the description.
"
      end

      operation 9880706 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the parameter
described by this <tt>OpenMBeanParameterInfo</tt> instance.

@return the name.
"
      end

      operation 9880834 "getOpenType"
	public return_type class_ref 490242 // OpenType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Now declares methods that are specific to open MBeans


Returns the <i>open type</i> of the values of the parameter
described by this <tt>OpenMBeanParameterInfo</tt> instance.

@return the open type.
"
      end

      operation 9880962 "getDefaultValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value for this parameter, if it has one, or
<tt>null</tt> otherwise.

@return the default value.
"
      end

      operation 9881090 "getLegalValues"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of legal values for this parameter, if it has
one, or <tt>null</tt> otherwise.

@return the set of legal values.
"
      end

      operation 9881218 "getMinValue"
	public return_type class_ref 194946 // Comparable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimal value for this parameter, if it has one, or
<tt>null</tt> otherwise.

@return the minimum value.
"
      end

      operation 9881346 "getMaxValue"
	public return_type class_ref 194946 // Comparable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximal value for this parameter, if it has one, or
<tt>null</tt> otherwise.

@return the maximum value.
"
      end

      operation 9881474 "hasDefaultValue"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this parameter has a specified default
value, or <tt>false</tt> otherwise.

@return true if there is a default value.
"
      end

      operation 9881602 "hasLegalValues"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this parameter has a specified set of
legal values, or <tt>false</tt> otherwise.

@return true if there is a set of legal values.
"
      end

      operation 9881730 "hasMinValue"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this parameter has a specified minimal
value, or <tt>false</tt> otherwise.

@return true if there is a minimum value.
"
      end

      operation 9881858 "hasMaxValue"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this parameter has a specified maximal
value, or <tt>false</tt> otherwise.

@return true if there is a maximum value.
"
      end

      operation 9881986 "isValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether <var>obj</var> is a valid value for the parameter
described by this <code>OpenMBeanParameterInfo</code> instance.

@param obj the object to be tested.

@return <code>true</code> if <var>obj</var> is a valid value
for the parameter described by this
<code>OpenMBeanParameterInfo</code> instance,
<code>false</code> otherwise.
"
      end

      operation 9882114 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified <var>obj</var> parameter with this <code>OpenMBeanParameterInfo</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>OpenMBeanParameterInfo</code> interface,</li>
<li>their names are equal</li>
<li>their open types are equal</li>
<li>their default, min, max and legal values are equal.</li>
</ul>
This ensures that this <tt>equals</tt> method works properly for <var>obj</var> parameters which are
different implementations of the <code>OpenMBeanParameterInfo</code> interface.
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>OpenMBeanParameterInfo</code> instance;

@return  <code>true</code> if the specified object is equal to this <code>OpenMBeanParameterInfo</code> instance.
"
      end

      operation 9882242 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>OpenMBeanParameterInfo</code> instance.
<p>
The hash code of an <code>OpenMBeanParameterInfo</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its name, its <i>open type</i>, and its default, min, max and legal values).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>OpenMBeanParameterInfo</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>

@return  the hash code value for this <code>OpenMBeanParameterInfo</code> instance
"
      end

      operation 9882370 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>OpenMBeanParameterInfo</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.OpenMBeanParameterInfo</code>),
the string representation of the name and open type of the described parameter,
and the string representation of its default, min, max and legal values.

@return  a string representation of this <code>OpenMBeanParameterInfo</code> instance
"
      end
    end

    class 1197314 "SimpleType"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 490242 // OpenType
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>SimpleType</code> class is the <i>open type</i> class whose instances describe
all <i>open data</i> values which are neither arrays,
nor {@link CompositeData CompositeData} values,
nor {@link TabularData TabularData} values.
It predefines all its possible instances as static fields, and has no public constructor.
<p>
Given a <code>SimpleType</code> instance describing values whose Java class name is <i>className</i>,
the internal fields corresponding to the name and description of this <code>SimpleType</code> instance
are also set to <i>className</i>.
In other words, its methods <code>getClassName</code>, <code>getTypeName</code> and <code>getDescription</code>
all return the same string value <i>className</i>.

@since 1.5
"
      classrelation 3838722 // <realization>
	relation 3838722 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3838722 // <realization>
	  b parent class_ref 490242 // OpenType
      end

      attribute 2291202 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 2215577471957694503L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3838850 // VOID (<unidirectional association>)
	relation 3838850 --->
	  a role_name "VOID" init_value "
        new SimpleType<Void>(Void.class)" class_relation const_relation public
	    comment " SimpleType instances.
 IF YOU ADD A SimpleType, YOU MUST UPDATE OpenType and typeArray

The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Void</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Void> ${name}${value};
"
	    classrelation_ref 3838850 // VOID (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3838978 // BOOLEAN (<unidirectional association>)
	relation 3838978 --->
	  a role_name "BOOLEAN" init_value "
        new SimpleType<Boolean>(Boolean.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Boolean</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 3838978 // BOOLEAN (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3839106 // CHARACTER (<unidirectional association>)
	relation 3839106 --->
	  a role_name "CHARACTER" init_value "
        new SimpleType<Character>(Character.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Character</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Character> ${name}${value};
"
	    classrelation_ref 3839106 // CHARACTER (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3839234 // BYTE (<unidirectional association>)
	relation 3839234 --->
	  a role_name "BYTE" init_value "
        new SimpleType<Byte>(Byte.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Byte</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Byte> ${name}${value};
"
	    classrelation_ref 3839234 // BYTE (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3839362 // SHORT (<unidirectional association>)
	relation 3839362 --->
	  a role_name "SHORT" init_value "
        new SimpleType<Short>(Short.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Short</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Short> ${name}${value};
"
	    classrelation_ref 3839362 // SHORT (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3839490 // INTEGER (<unidirectional association>)
	relation 3839490 --->
	  a role_name "INTEGER" init_value "
        new SimpleType<Integer>(Integer.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Integer</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 3839490 // INTEGER (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3839618 // LONG (<unidirectional association>)
	relation 3839618 --->
	  a role_name "LONG" init_value "
        new SimpleType<Long>(Long.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Long</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Long> ${name}${value};
"
	    classrelation_ref 3839618 // LONG (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3839746 // FLOAT (<unidirectional association>)
	relation 3839746 --->
	  a role_name "FLOAT" init_value "
        new SimpleType<Float>(Float.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Float</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Float> ${name}${value};
"
	    classrelation_ref 3839746 // FLOAT (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3839874 // DOUBLE (<unidirectional association>)
	relation 3839874 --->
	  a role_name "DOUBLE" init_value "
        new SimpleType<Double>(Double.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.Double</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Double> ${name}${value};
"
	    classrelation_ref 3839874 // DOUBLE (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3840002 // STRING (<unidirectional association>)
	relation 3840002 --->
	  a role_name "STRING" init_value "
        new SimpleType<String>(String.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.lang.String</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3840002 // STRING (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3840130 // BIGDECIMAL (<unidirectional association>)
	relation 3840130 --->
	  a role_name "BIGDECIMAL" init_value "
        new SimpleType<BigDecimal>(BigDecimal.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.math.BigDecimal</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<BigDecimal> ${name}${value};
"
	    classrelation_ref 3840130 // BIGDECIMAL (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3840258 // BIGINTEGER (<unidirectional association>)
	relation 3840258 --->
	  a role_name "BIGINTEGER" init_value "
        new SimpleType<BigInteger>(BigInteger.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.math.BigInteger</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<BigInteger> ${name}${value};
"
	    classrelation_ref 3840258 // BIGINTEGER (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3840386 // DATE (<unidirectional association>)
	relation 3840386 --->
	  a role_name "DATE" init_value "
        new SimpleType<Date>(Date.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>java.util.Date</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Date> ${name}${value};
"
	    classrelation_ref 3840386 // DATE (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3840514 // OBJECTNAME (<unidirectional association>)
	relation 3840514 --->
	  a role_name "OBJECTNAME" init_value "
        new SimpleType<ObjectName>(ObjectName.class)" class_relation const_relation public
	    comment "
The <code>SimpleType</code> instance describing values whose
Java class name is <code>javax.management.ObjectName</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3840514 // OBJECTNAME (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3840642 // typeArray (<unidirectional association>)
	relation 3840642 --->
	  a role_name "typeArray" multiplicity "[]" init_value " {
        VOID, BOOLEAN, CHARACTER, BYTE, SHORT, INTEGER, LONG, FLOAT,
        DOUBLE, STRING, BIGDECIMAL, BIGINTEGER, DATE, OBJECTNAME,
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3840642 // typeArray (<unidirectional association>)
	  b parent class_ref 1197314 // SimpleType
      end

      classrelation 3840770 // myHashCode (<unidirectional association>)
	relation 3840770 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable, these two values"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3840770 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3840898 // myToString (<unidirectional association>)
	relation 3840898 --->
	  a role_name "myToString" init_value " null" private
	    comment " need only be calculated once."
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3840898 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9896706 "SimpleType"
	cpp_inline private explicit_return_type ""
	nparams 1
	  param inout name "valueClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Constructor *** "
      end

      operation 9896834 "isValue"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** SimpleType specific information methods *** 

Tests whether <var>obj</var> is a value for this
<code>SimpleType</code> instance.  <p> This method returns
<code>true</code> if and only if <var>obj</var> is not null and
<var>obj</var>'s class name is the same as the className field
defined for this <code>SimpleType</code> instance (ie the class
name returned by the {@link OpenType#getClassName()
getClassName} method).

@param obj the object to be tested.

@return <code>true</code> if <var>obj</var> is a value for this
<code>SimpleType</code> instance.
"
      end

      operation 9896962 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Methods overriden from class Object *** 

Compares the specified <code>obj</code> parameter with this <code>SimpleType</code> instance for equality.
<p>
Two <code>SimpleType</code> instances are equal if and only if their
{@link OpenType#getClassName() getClassName} methods return the same value.

@param  obj  the object to be compared for equality with this <code>SimpleType</code> instance;
             if <var>obj</var> is <code>null</code> or is not an instance of the class <code>SimpleType</code>,
             <code>equals</code> returns <code>false</code>.

@return  <code>true</code> if the specified object is equal to this <code>SimpleType</code> instance.
"
      end

      operation 9897090 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>SimpleType</code> instance.
The hash code of a <code>SimpleType</code> instance is the the hash code of
the string value returned by the {@link OpenType#getClassName() getClassName} method.
<p>
As <code>SimpleType</code> instances are immutable, the hash code for this instance is calculated once,
on the first call to <code>hashCode</code>, and then the same value is returned for subsequent calls.

@return  the hash code value for this <code>SimpleType</code> instance
"
      end

      operation 9897218 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>SimpleType</code> instance.
<p>
The string representation consists of
the name of this class (ie <code>javax.management.openmbean.SimpleType</code>) and the type name
for this instance (which is the java class name of the values this <code>SimpleType</code> instance represents).
<p>
As <code>SimpleType</code> instances are immutable, the string representation for this instance is calculated once,
on the first call to <code>toString</code>, and then the same value is returned for subsequent calls.

@return  a string representation of this <code>SimpleType</code> instance
"
      end

      classrelation 3841026 // canonicalTypes (<unidirectional association>)
	relation 3841026 --->
	  a role_name "canonicalTypes" init_value "
        new HashMap<SimpleType<?>,SimpleType<?>>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SimpleType<?>,SimpleType<?>> ${name}${value};
"
	    classrelation_ref 3841026 // canonicalTypes (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 181762 "initialization"
	
	cpp "" ""
	java "  static {
        for (int i = 0; i < typeArray.length; i++) {
            final SimpleType<?> type = typeArray[i];
            canonicalTypes.put(type, type);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9897346 "readResolve"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace an object read from an {@link
java.io.ObjectInputStream} with the unique instance for that
value.

@return the replacement object.

@exception ObjectStreamException if the read object cannot be
resolved.
"
      end
    end

    class 1197442 "CompositeDataInvocationHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>An {@link InvocationHandler} that forwards getter methods to a
{@link CompositeData}.  If you have an interface that contains
only getter methods (such as {@code String getName()} or
{@code boolean isActive()}) then you can use this class in
conjunction with the {@link Proxy} class to produce an implementation
of the interface where each getter returns the value of the
corresponding item in a {@code CompositeData}.</p>

<p>For example, suppose you have an interface like this:

<blockquote>
<pre>
public interface NamedNumber {
public int getNumber();
public String getName();
}
</pre>
</blockquote>

and a {@code CompositeData} constructed like this:

<blockquote>
<pre>
CompositeData cd =
new {@link CompositeDataSupport}(
someCompositeType,
new String[] {\"number\", \"name\"},
new Object[] {<b>5</b>, \"five\"}
);
</pre>
</blockquote>

then you can construct an object implementing {@code NamedNumber}
and backed by the object {@code cd} like this:

<blockquote>
<pre>
InvocationHandler handler =
new CompositeDataInvocationHandler(cd);
NamedNumber nn = (NamedNumber)
Proxy.newProxyInstance(NamedNumber.class.getClassLoader(),
new Class[] {NamedNumber.class},
handler);
</pre>
</blockquote>

A call to {@code nn.getNumber()} will then return <b>5</b>.

<p>If the first letter of the property defined by a getter is a
capital, then this handler will look first for an item in the
{@code CompositeData} beginning with a capital, then, if that is
not found, for an item beginning with the corresponding lowercase
letter or code point.  For a getter called {@code getNumber()}, the
handler will first look for an item called {@code Number}, then for
{@code number}.  If the getter is called {@code getnumber()}, then
the item must be called {@code number}.</p>

<p>If the method given to {@link #invoke invoke} is the method
{@code boolean equals(Object)} inherited from {@code Object}, then
it will return true if and only if the argument is a {@code Proxy}
whose {@code InvocationHandler} is also a {@code
CompositeDataInvocationHandler} and whose backing {@code
CompositeData} is equal (not necessarily identical) to this
object's.  If the method given to {@code invoke} is the method
{@code int hashCode()} inherited from {@code Object}, then it will
return a value that is consistent with this definition of {@code
equals}: if two objects are equal according to {@code equals}, then
they will have the same {@code hashCode}.</p>

@since 1.6
"
      classrelation 3832450 // <realization>
	relation 3832450 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3832450 // <realization>
	  b parent class_ref 260610 // InvocationHandler
      end

      operation 9875330 "CompositeDataInvocationHandler"
	public explicit_return_type ""
	nparams 1
	  param inout name "compositeData" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct a handler backed by the given {@code
CompositeData}.</p>

@param compositeData the {@code CompositeData} that will supply
information to getters.

@throws IllegalArgumentException if {@code compositeData}
is null.
"
      end

      operation 9875458 "CompositeDataInvocationHandler"
	package explicit_return_type ""
	nparams 2
	  param inout name "compositeData" type class_ref 492802 // CompositeData
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct a handler backed by the given {@code
CompositeData}.</p>

@param compositeData the {@code CompositeData} that will supply
information to getters.

@throws IllegalArgumentException if {@code compositeData}
is null.
"
      end

      operation 9875586 "getCompositeData"
	public return_type class_ref 492802 // CompositeData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the {@code CompositeData} that was supplied to the
constructor.
@return the {@code CompositeData} that this handler is backed
by.  This is never null.
"
      end

      operation 9875714 "invoke"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "method" type class_ref 137858 // Method
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9875842 "equals"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method is called when equals(Object) is
called on our proxy and hence forwarded to us.  For example, if we
are a proxy for an interface like this:
public interface GetString {
    public String string();
}
then we must compare equal to another CompositeDataInvocationHandler
proxy for the same interface and where string() returns the same value.

You might think that we should also compare equal to another
object that implements GetString directly rather than using
Proxy, provided that its string() returns the same result as
ours, and in fact an earlier version of this class did that (by
converting the other object into a CompositeData and comparing
that with ours).  But in fact that doesn't make a great deal of
sense because there's absolutely no guarantee that the
resulting equals would be reflexive (otherObject.equals(this)
might be false even if this.equals(otherObject) is true), and,
especially, there's no way we could generate a hashCode() that
would be equal to otherObject.hashCode() when
this.equals(otherObject), because we don't know how
otherObject.hashCode() is computed.
"
      end

      classrelation 3832578 // compositeData (<unidirectional association>)
	relation 3832578 --->
	  a role_name "compositeData" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3832578 // compositeData (<unidirectional association>)
	  b parent class_ref 492802 // CompositeData
      end

      classrelation 3832706 // lookup (<unidirectional association>)
	relation 3832706 --->
	  a role_name "lookup" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3832706 // lookup (<unidirectional association>)
	  b parent class_ref 490370 // MXBeanLookup
      end
    end

    class 1197570 "CompositeDataSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <tt>CompositeDataSupport</tt> class is the <i>open data</i> class which
implements the <tt>CompositeData</tt> interface.


@since 1.5
"
      classrelation 3832834 // <realization>
	relation 3832834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3832834 // <realization>
	  b parent class_ref 492802 // CompositeData
      end

      classrelation 3832962 // <realization>
	relation 3832962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3832962 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2289794 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 8003518976613702244L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3833090 // contents (<unidirectional association>)
	relation 3833090 --->
	  a role_name "contents" const_relation private
	    comment "
@serial Internal representation of the mapping of item names to their
respective values.
        A {@link SortedMap} is used for faster retrieval of elements.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 3833090 // contents (<unidirectional association>)
	  b parent class_ref 500354 // SortedMap
      end

      classrelation 3833218 // compositeType (<unidirectional association>)
	relation 3833218 --->
	  a role_name "compositeType" const_relation private
	    comment "
@serial The <i>composite type </i> of this <i>composite data</i> instance.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3833218 // compositeType (<unidirectional association>)
	  b parent class_ref 492546 // CompositeType
      end

      operation 9875970 "CompositeDataSupport"
	public explicit_return_type ""
	nparams 3
	  param inout name "compositeType" type class_ref 492546 // CompositeType
	  param inout name "itemNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "itemValues" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a <tt>CompositeDataSupport</tt> instance with the specified
<tt>compositeType</tt>, whose item values
are specified by <tt>itemValues[]</tt>, in the same order as in
<tt>itemNames[]</tt>.
As a <tt>CompositeType</tt> does not specify any order on its items,
the <tt>itemNames[]</tt> parameter is used
to specify the order in which the values are given in <tt>itemValues[]</tt>.
The items contained in this <tt>CompositeDataSupport</tt> instance are
internally stored in a <tt>TreeMap</tt>,
thus sorted in ascending lexicographic order of their names, for faster
retrieval of individual item values.</p>

<p>The constructor checks that all the constraints listed below for each
parameter are satisfied,
and throws the appropriate exception if they are not.</p>

@param compositeType the <i>composite type </i> of this <i>composite
data</i> instance; must not be null.

@param itemNames <tt>itemNames</tt> must list, in any order, all the
item names defined in <tt>compositeType</tt>; the order in which the
names are listed, is used to match values in <tt>itemValues[]</tt>; must
not be null or empty.

@param itemValues the values of the items, listed in the same order as
their respective names in <tt>itemNames</tt>; each item value can be
null, but if it is non-null it must be a valid value for the open type
defined in <tt>compositeType</tt> for the corresponding item; must be of
the same size as <tt>itemNames</tt>; must not be null or empty.

@throws IllegalArgumentException <tt>compositeType</tt> is null, or
<tt>itemNames[]</tt> or <tt>itemValues[]</tt> is null or empty, or one
of the elements in <tt>itemNames[]</tt> is a null or empty string, or
<tt>itemNames[]</tt> and <tt>itemValues[]</tt> are not of the same size.

@throws OpenDataException <tt>itemNames[]</tt> or
<tt>itemValues[]</tt>'s size differs from the number of items defined in
<tt>compositeType</tt>, or one of the elements in <tt>itemNames[]</tt>
does not exist as an item name defined in <tt>compositeType</tt>, or one
of the elements in <tt>itemValues[]</tt> is not a valid value for the
corresponding item as defined in <tt>compositeType</tt>.
"
      end

      operation 9876098 "makeMap"
	class_operation private return_type class_ref 500354 // SortedMap
	nparams 2
	  param inout name "itemNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "itemValues" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Object> ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9876226 "CompositeDataSupport"
	public explicit_return_type ""
	nparams 2
	  param inout name "compositeType" type class_ref 492546 // CompositeType
	  param inout name "items" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Constructs a <tt>CompositeDataSupport</tt> instance with the specified <tt>compositeType</tt>, whose item names and corresponding values
are given by the mappings in the map <tt>items</tt>.
This constructor converts the keys to a string array and the values to an object array and calls
<tt>CompositeDataSupport(javax.management.openmbean.CompositeType, java.lang.String[], java.lang.Object[])</tt>.

@param  compositeType  the <i>composite type </i> of this <i>composite data</i> instance;
                       must not be null.
@param  items  the mappings of all the item names to their values;
               <tt>items</tt> must contain all the item names defined in <tt>compositeType</tt>;
               must not be null or empty.

@throws IllegalArgumentException <tt>compositeType</tt> is null, or
<tt>items</tt> is null or empty, or one of the keys in <tt>items</tt> is a null
or empty string.
@throws OpenDataException <tt>items</tt>' size differs from the
number of items defined in <tt>compositeType</tt>, or one of the
keys in <tt>items</tt> does not exist as an item name defined in
<tt>compositeType</tt>, or one of the values in <tt>items</tt>
is not a valid value for the corresponding item as defined in
<tt>compositeType</tt>.
@throws ArrayStoreException one or more keys in <tt>items</tt> is not of
the class <tt>java.lang.String</tt>.
"
      end

      operation 9876354 "makeMap"
	class_operation private return_type class_ref 500354 // SortedMap
	nparams 1
	  param inout name "items" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Object> ${name}${(}${t0}<String, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9876482 "CompositeDataSupport"
	private explicit_return_type ""
	nparams 2
	  param inout name "items" type class_ref 500354 // SortedMap
	  param inout name "compositeType" type class_ref 492546 // CompositeType
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String, Object> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9876610 "getCompositeType"
	public return_type class_ref 492546 // CompositeType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>composite type </i> of this <i>composite data</i> instance.
"
      end

      operation 9876738 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the item whose name is <tt>key</tt>.

@throws IllegalArgumentException  if <tt>key</tt> is a null or empty String.

@throws InvalidKeyException  if <tt>key</tt> is not an existing item name for
this <tt>CompositeData</tt> instance.
"
      end

      operation 9876866 "getAll"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "keys" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the values of the items whose names are specified by
<tt>keys</tt>, in the same order as <tt>keys</tt>.

@throws IllegalArgumentException  if an element in <tt>keys</tt> is a null
or empty String.

@throws InvalidKeyException  if an element in <tt>keys</tt> is not an existing
item name for this <tt>CompositeData</tt> instance.
"
      end

      operation 9876994 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains
an item whose name is <tt>key</tt>.
If <tt>key</tt> is a null or empty String, this method simply returns false.
"
      end

      operation 9877122 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance
contains an item
whose value is <tt>value</tt>.
"
      end

      operation 9877250 "values"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable Collection view of the item values contained in this
<tt>CompositeData</tt> instance.
The returned collection's iterator will return the values in the ascending
lexicographic order of the corresponding
item names.
"
      end

      operation 9877378 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified <var>obj</var> parameter with this
<code>CompositeDataSupport</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>CompositeData</code> interface,</li>
<li>their composite types are equal</li>
<li>their contents, i.e. (name, value) pairs are equal. If a value contained in
the content is an array, the value comparison is done as if by calling
the {@link java.util.Arrays#deepEquals(Object[], Object[]) deepEquals} method
for arrays of object reference types or the appropriate overloading of
{@code Arrays.equals(e1,e2)} for arrays of primitive types</li>
</ul>
<p>
This ensures that this <tt>equals</tt> method works properly for
<var>obj</var> parameters which are different implementations of the
<code>CompositeData</code> interface, with the restrictions mentioned in the
{@link java.util.Collection#equals(Object) equals}
method of the <tt>java.util.Collection</tt> interface.

@param  obj  the object to be compared for equality with this
<code>CompositeDataSupport</code> instance.
@return  <code>true</code> if the specified object is equal to this
<code>CompositeDataSupport</code> instance.
"
      end

      operation 9877506 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash code value for this <code>CompositeDataSupport</code> instance.
<p>
The hash code of a <code>CompositeDataSupport</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its <i>composite type</i> and all the item values).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>CompositeDataSupport</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>
Each item value's hash code is added to the returned hash code.
If an item value is an array,
its hash code is obtained as if by calling the
{@link java.util.Arrays#deepHashCode(Object[]) deepHashCode} method
for arrays of object reference types or the appropriate overloading
of {@code Arrays.hashCode(e)} for arrays of primitive types.

@return the hash code value for this <code>CompositeDataSupport</code> instance
"
      end

      operation 9877634 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this <code>CompositeDataSupport</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.CompositeDataSupport</code>),
the string representation of the composite type of this instance, and the string representation of the contents
(ie list the itemName=itemValue mappings).

@return  a string representation of this <code>CompositeDataSupport</code> instance
"
      end

      operation 9877762 "contentString"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1197698 "CompositeDataView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A Java class can implement this interface to indicate how it is
to be converted into a {@code CompositeData} by the MXBean framework.</p>

<p>A typical way to use this class is to add extra items to the
{@code CompositeData} in addition to the ones that are declared in the
{@code CompositeType} supplied by the MXBean framework.  To do this,
you must create another {@code CompositeType} that has all the same items,
plus your extra items.</p>

<p>For example, suppose you have a class {@code Measure} that consists of
a String called {@code units} and a {@code value} that is either a
{@code long} or a {@code double}.  It might look like this:</p>

<pre>
public class Measure implements CompositeDataView {
    private String units;
    private Number value; // a Long or a Double

    public Measure(String units, Number value) {
        this.units = units;
        this.value = value;
    }

    public static Measure from(CompositeData cd) {
        return new Measure((String) cd.get(\"units\"),
                           (Number) cd.get(\"value\"));
    }

    public String getUnits() {
        return units;
    }

    // Can't be called getValue(), because Number is not a valid type
    // in an MXBean, so the implied \"value\" property would be rejected.
    public Number _getValue() {
        return value;
    }

    public CompositeData toCompositeData(CompositeType ct) {
        try {
            {@code List<String> itemNames = new ArrayList<String>(ct.keySet());}
            {@code List<String> itemDescriptions = new ArrayList<String>();}
            {@code List<OpenType<?>> itemTypes = new ArrayList<OpenType<?>>();}
            for (String item : itemNames) {
                itemDescriptions.add(ct.getDescription(item));
                itemTypes.add(ct.getType(item));
            }
            itemNames.add(\"value\");
            itemDescriptions.add(\"long or double value of the measure\");
            itemTypes.add((value instanceof Long) ? SimpleType.LONG :
                          SimpleType.DOUBLE);
            CompositeType xct =
                new CompositeType(ct.getTypeName(),
                                  ct.getDescription(),
                                  itemNames.toArray(new String[0]),
                                  itemDescriptions.toArray(new String[0]),
                                  itemTypes.toArray(new OpenType&lt;?&gt;[0]));
            CompositeData cd =
                new CompositeDataSupport(xct,
                                         new String[] {\"units\", \"value\"},
                                         new Object[] {units, value});
            assert ct.isValue(cd);  // check we've done it right
            return cd;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
</pre>

<p>The {@code CompositeType} that will appear in the {@code openType} field
of the {@link javax.management.Descriptor Descriptor} for an attribute or
operation of this type will show only the {@code units} item, but the actual
{@code CompositeData} that is generated will have both {@code units} and
{@code value}.</p>

@see javax.management.MXBean

@since 1.6
"
      operation 9877890 "toCompositeData"
	public return_type class_ref 492802 // CompositeData
	nparams 1
	  param inout name "ct" type class_ref 492546 // CompositeType
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return a {@code CompositeData} corresponding to the values in
this object.  The returned value should usually be an instance of
{@link CompositeDataSupport}, or a class that serializes as a
{@code CompositeDataSupport} via a {@code writeReplace} method.
Otherwise, a remote client that receives the object might not be
able to reconstruct it.

@param ct The expected {@code CompositeType} of the returned
value.  If the returned value is {@code cd}, then
{@code cd.getCompositeType().equals(ct)} should be true.
Typically this will be because {@code cd} is a
{@link CompositeDataSupport} constructed with {@code ct} as its
{@code CompositeType}.

@return the {@code CompositeData}.
"
      end
    end

    class 1197826 "InvalidKeyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This runtime exception is thrown to indicate that a method parameter which was expected to be
an item name of a <i>composite data</i> or a row index of a <i>tabular data</i> is not valid.


@since 1.5
"
      classrelation 3834114 // <generalisation>
	relation 3834114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3834114 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 2290050 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4224269443946322062L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9879554 "InvalidKeyException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An InvalidKeyException with no detail message.
"
      end

      operation 9879682 "InvalidKeyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An InvalidKeyException with a detail message.

@param msg the detail message.
"
      end
    end

    class 1197954 "InvalidOpenTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This runtime exception is thrown to indicate that the <i>open type</i> of an <i>open data</i> value
is not the one expected.


@since 1.5
"
      classrelation 3834242 // <generalisation>
	relation 3834242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3834242 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 2290178 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2837312755412327534L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9879810 "InvalidOpenTypeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " An InvalidOpenTypeException with no detail message.  "
      end

      operation 9879938 "InvalidOpenTypeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An InvalidOpenTypeException with a detail message.

@param msg the detail message.
"
      end
    end

    class 1198082 "KeyAlreadyExistsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This runtime exception is thrown to indicate that the index of a row to be added to a <i>tabular data</i> instance
is already used to refer to another row in this <i>tabular data</i> instance.


@since 1.5
"
      classrelation 3834370 // <generalisation>
	relation 3834370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3834370 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 2290306 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1845183636745282866L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9880066 "KeyAlreadyExistsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A KeyAlreadyExistsException with no detail message.
"
      end

      operation 9880194 "KeyAlreadyExistsException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A KeyAlreadyExistsException with a detail message.

@param msg the detail message.
"
      end
    end

    class 1198210 "OpenMBeanAttributeInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " java import

 jmx import


<p>Describes an attribute of an open MBean.</p>

<p>This interface declares the same methods as the class {@link
javax.management.MBeanAttributeInfo}.  A class implementing this
interface (typically {@link OpenMBeanAttributeInfoSupport}) should
extend {@link javax.management.MBeanAttributeInfo}.</p>


@since 1.5
"
      classrelation 3834626 // <generalisation>
	relation 3834626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3834626 // <generalisation>
	  b parent class_ref 1192194 // OpenMBeanParameterInfo
      end

      operation 9882498 "isReadable"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Re-declares the methods that are in class MBeanAttributeInfo of JMX 1.0
 (these will be removed when MBeanAttributeInfo is made a parent interface of this interface)

Returns <tt>true</tt> if the attribute described by this <tt>OpenMBeanAttributeInfo</tt> instance is readable,
<tt>false</tt> otherwise.

@return true if the attribute is readable.
"
      end

      operation 9882626 "isWritable"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the attribute described by this <tt>OpenMBeanAttributeInfo</tt> instance is writable,
<tt>false</tt> otherwise.

@return true if the attribute is writable.
"
      end

      operation 9882754 "isIs"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the attribute described by this <tt>OpenMBeanAttributeInfo</tt> instance
is accessed through a <tt>is<i>XXX</i></tt> getter (applies only to <tt>boolean</tt> and <tt>Boolean</tt> values),
<tt>false</tt> otherwise.

@return true if the attribute is accessed through <tt>is<i>XXX</i></tt>.
"
      end

      operation 9882882 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " commodity methods


Compares the specified <var>obj</var> parameter with this <code>OpenMBeanAttributeInfo</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>OpenMBeanAttributeInfo</code> interface,</li>
<li>their names are equal</li>
<li>their open types are equal</li>
<li>their access properties (isReadable, isWritable and isIs) are equal</li>
<li>their default, min, max and legal values are equal.</li>
</ul>
This ensures that this <tt>equals</tt> method works properly for <var>obj</var> parameters which are
different implementations of the <code>OpenMBeanAttributeInfo</code> interface.
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>OpenMBeanAttributeInfo</code> instance;

@return  <code>true</code> if the specified object is equal to this <code>OpenMBeanAttributeInfo</code> instance.
"
      end

      operation 9883010 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>OpenMBeanAttributeInfo</code> instance.
<p>
The hash code of an <code>OpenMBeanAttributeInfo</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its name, its <i>open type</i>, and its default, min, max and legal values).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>OpenMBeanAttributeInfo</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>

@return  the hash code value for this <code>OpenMBeanAttributeInfo</code> instance
"
      end

      operation 9883138 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>OpenMBeanAttributeInfo</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.OpenMBeanAttributeInfo</code>),
the string representation of the name and open type of the described attribute,
and the string representation of its default, min, max and legal values.

@return  a string representation of this <code>OpenMBeanAttributeInfo</code> instance
"
      end
    end

    class 1198338 "OpenMBeanAttributeInfoSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes an attribute of an open MBean.


@since 1.5
"
      classrelation 3834754 // <generalisation>
	relation 3834754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3834754 // <generalisation>
	  b parent class_ref 496642 // MBeanAttributeInfo
      end

      classrelation 3834882 // <realization>
	relation 3834882 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3834882 // <realization>
	  b parent class_ref 1198210 // OpenMBeanAttributeInfo
      end

      attribute 2290562 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -4867215622149721849L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3835010 // openType (<unidirectional association>)
	relation 3835010 --->
	  a role_name "openType" private
	    comment "
@serial The open mbean attribute's <i>open type</i>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3835010 // openType (<unidirectional association>)
	  b parent class_ref 490242 // OpenType
      end

      classrelation 3835138 // defaultValue (<unidirectional association>)
	relation 3835138 --->
	  a role_name "defaultValue" const_relation private
	    comment "
@serial The open mbean attribute's default value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3835138 // defaultValue (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3835266 // legalValues (<unidirectional association>)
	relation 3835266 --->
	  a role_name "legalValues" const_relation private
	    comment "
@serial The open mbean attribute's legal values. This {@link
Set} is unmodifiable

 to be constructed unmodifiable"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3835266 // legalValues (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3835394 // minValue (<unidirectional association>)
	relation 3835394 --->
	  a role_name "minValue" const_relation private
	    comment "
@serial The open mbean attribute's min value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3835394 // minValue (<unidirectional association>)
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3835522 // maxValue (<unidirectional association>)
	relation 3835522 --->
	  a role_name "maxValue" const_relation private
	    comment "
@serial The open mbean attribute's max value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3835522 // maxValue (<unidirectional association>)
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3835650 // myHashCode (<unidirectional association>)
	relation 3835650 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable, these two values need only
 be calculated once.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3835650 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3835778 // myToString (<unidirectional association>)
	relation 3835778 --->
	  a role_name "myToString" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3835778 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9883266 "OpenMBeanAttributeInfoSupport"
	public explicit_return_type ""
	nparams 6
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
which describes the attribute of an open MBean with the
specified {@code name}, {@code openType} and {@code
description}, and the specified read/write access properties.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param isReadable {@code true} if the attribute has a getter
exposed for management.

@param isWritable {@code true} if the attribute has a setter
exposed for management.

@param isIs {@code true} if the attribute's getter is of the
form <tt>is<i>XXX</i></tt>.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.
"
      end

      operation 9883394 "OpenMBeanAttributeInfoSupport"
	public explicit_return_type ""
	nparams 7
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
which describes the attribute of an open MBean with the
specified {@code name}, {@code openType}, {@code
description}, read/write access properties, and {@code Descriptor}.</p>

<p>The {@code descriptor} can contain entries that will define
the values returned by certain methods of this class, as
explained in the <a href=\"package-summary.html#constraints\">
package description</a>.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param isReadable {@code true} if the attribute has a getter
exposed for management.

@param isWritable {@code true} if the attribute has a setter
exposed for management.

@param isIs {@code true} if the attribute's getter is of the
form <tt>is<i>XXX</i></tt>.

@param descriptor The descriptor for the attribute.  This may be null
which is equivalent to an empty descriptor.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null, or the descriptor entries are invalid as described in the
<a href=\"package-summary.html#constraints\">package description</a>.

@since 1.6
"
      end

      operation 9883522 "OpenMBeanAttributeInfoSupport"
	public explicit_return_type ""
	nparams 7
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "defaultValue" explicit_type "T"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
which describes the attribute of an open MBean with the
specified {@code name}, {@code openType}, {@code description}
and {@code defaultValue}, and the specified read/write access
properties.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param isReadable {@code true} if the attribute has a getter
exposed for management.

@param isWritable {@code true} if the attribute has a setter
exposed for management.

@param isIs {@code true} if the attribute's getter is of the
form <tt>is<i>XXX</i></tt>.

@param defaultValue must be a valid value for the {@code
openType} specified for this attribute; default value not
supported for {@code ArrayType} and {@code TabularType}; can
be null, in which case it means that no default value is set.

@param <T> allows the compiler to check that the {@code defaultValue},
if non-null, has the correct Java type for the given {@code openType}.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.

@throws OpenDataException if {@code defaultValue} is not a
valid value for the specified {@code openType}, or {@code
defaultValue} is non null and {@code openType} is an {@code
ArrayType} or a {@code TabularType}.
"
      end

      operation 9883650 "OpenMBeanAttributeInfoSupport"
	public explicit_return_type ""
	nparams 8
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "legalValues" explicit_type "T"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
which describes the attribute of an open MBean with the
specified {@code name}, {@code openType}, {@code description},
{@code defaultValue} and {@code legalValues}, and the specified
read/write access properties.</p>

<p>The contents of {@code legalValues} are copied, so subsequent
modifications of the array referenced by {@code legalValues}
have no impact on this {@code OpenMBeanAttributeInfoSupport}
instance.</p>

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param isReadable {@code true} if the attribute has a getter
exposed for management.

@param isWritable {@code true} if the attribute has a setter
exposed for management.

@param isIs {@code true} if the attribute's getter is of the
form <tt>is<i>XXX</i></tt>.

@param defaultValue must be a valid value
for the {@code
openType} specified for this attribute; default value not
supported for {@code ArrayType} and {@code TabularType}; can
be null, in which case it means that no default value is set.

@param legalValues each contained value must be valid for the
{@code openType} specified for this attribute; legal values
not supported for {@code ArrayType} and {@code TabularType};
can be null or empty.

@param <T> allows the compiler to check that the {@code
defaultValue} and {@code legalValues}, if non-null, have the
correct Java type for the given {@code openType}.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.

@throws OpenDataException if {@code defaultValue} is not a
valid value for the specified {@code openType}, or one value in
{@code legalValues} is not valid for the specified {@code
openType}, or {@code defaultValue} is non null and {@code
openType} is an {@code ArrayType} or a {@code TabularType}, or
{@code legalValues} is non null and non empty and {@code
openType} is an {@code ArrayType} or a {@code TabularType}, or
{@code legalValues} is non null and non empty and {@code
defaultValue} is not contained in {@code legalValues}.
"
      end

      operation 9883778 "OpenMBeanAttributeInfoSupport"
	public explicit_return_type ""
	nparams 9
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "minValue" type class_ref 194946 // Comparable
	  param inout name "maxValue" type class_ref 194946 // Comparable
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}<T> ${p7}, ${t8}<T> ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
which describes the attribute of an open MBean, with the
specified {@code name}, {@code openType}, {@code description},
{@code defaultValue}, {@code minValue} and {@code maxValue}.

It is possible to specify minimal and maximal values only for
an open type whose values are {@code Comparable}.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param isReadable {@code true} if the attribute has a getter
exposed for management.

@param isWritable {@code true} if the attribute has a setter
exposed for management.

@param isIs {@code true} if the attribute's getter is of the
form <tt>is<i>XXX</i></tt>.

@param defaultValue must be a valid value for the {@code
openType} specified for this attribute; default value not
supported for {@code ArrayType} and {@code TabularType}; can be
null, in which case it means that no default value is set.

@param minValue must be valid for the {@code openType}
specified for this attribute; can be null, in which case it
means that no minimal value is set.

@param maxValue must be valid for the {@code openType}
specified for this attribute; can be null, in which case it
means that no maximal value is set.

@param <T> allows the compiler to check that the {@code
defaultValue}, {@code minValue}, and {@code maxValue}, if
non-null, have the correct Java type for the given {@code
openType}.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.

@throws OpenDataException if {@code defaultValue}, {@code
minValue} or {@code maxValue} is not a valid value for the
specified {@code openType}, or {@code defaultValue} is non null
and {@code openType} is an {@code ArrayType} or a {@code
TabularType}, or both {@code minValue} and {@code maxValue} are
non-null and {@code minValue.compareTo(maxValue) > 0} is {@code
true}, or both {@code defaultValue} and {@code minValue} are
non-null and {@code minValue.compareTo(defaultValue) > 0} is
{@code true}, or both {@code defaultValue} and {@code maxValue}
are non-null and {@code defaultValue.compareTo(maxValue) > 0}
is {@code true}.
"
      end

      operation 9883906 "OpenMBeanAttributeInfoSupport"
	private explicit_return_type ""
	nparams 10
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "legalValues" explicit_type "T"
	multiplicity "[]"
	  param inout name "minValue" type class_ref 194946 // Comparable
	  param inout name "maxValue" type class_ref 194946 // Comparable
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}, ${t8}<T> ${p8}, ${t9}<T> ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9884034 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An object serialized in a version of the API before Descriptors were
added to this class will have an empty or null Descriptor.
For consistency with our
behavior in this version, we must replace the object with one
where the Descriptors reflect the same values of openType, defaultValue,
etc.
"
      end

      operation 9884162 "check"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "info" type class_ref 1192194 // OpenMBeanParameterInfo
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9884290 "compare"
	class_operation package explicit_return_type "int"
	nparams 2
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "y" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings({\"unchecked\", \"rawtypes\"})
"
	
	
	
      end

      operation 9884418 "makeDescriptor"
	class_operation package return_type class_ref 489986 // Descriptor
	nparams 5
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "legalValues" explicit_type "T"
	multiplicity "[]"
	  param inout name "minValue" type class_ref 194946 // Comparable
	  param inout name "maxValue" type class_ref 194946 // Comparable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}<T> ${p3}, ${t4}<T> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9884546 "makeDescriptor"
	class_operation package return_type class_ref 489986 // Descriptor
	nparams 5
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "legalValues" type class_ref 192258 // Set
	  param inout name "minValue" type class_ref 194946 // Comparable
	  param inout name "maxValue" type class_ref 194946 // Comparable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3}<T> ${p3}, ${t4}<T> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9884674 "valueFrom"
	class_operation package explicit_return_type "T"
	nparams 3
	  param inout name "d" type class_ref 489986 // Descriptor
	  param inout name "name" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9884802 "valuesFrom"
	class_operation package return_type class_ref 192258 // Set
	nparams 3
	  param inout name "d" type class_ref 489986 // Descriptor
	  param inout name "name" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9884930 "comparableValueFrom"
	class_operation package return_type class_ref 194946 // Comparable
	nparams 3
	  param inout name "d" type class_ref 489986 // Descriptor
	  param inout name "name" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9885058 "convertFrom"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9885186 "convertFromStrings"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9885314 "convertFromString"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9885442 "convertFromStringArray"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A Descriptor contained an array value encoded as Strings.  The
Strings must be organized in an array corresponding to the desired
array.  If the desired array has n dimensions, so must the String
array.  We will convert element by element from String to desired
component type. "
      end

      operation 9885570 "cast"
	class_operation package explicit_return_type "T"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9885698 "getOpenType"
	public return_type class_ref 490242 // OpenType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the open type for the values of the attribute described
by this {@code OpenMBeanAttributeInfoSupport} instance.
"
      end

      operation 9885826 "getDefaultValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value for the attribute described by this
{@code OpenMBeanAttributeInfoSupport} instance, if specified,
or {@code null} otherwise.
"
      end

      operation 9885954 "getLegalValues"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable Set of legal values for the attribute
described by this {@code OpenMBeanAttributeInfoSupport}
instance, if specified, or {@code null} otherwise.
"
      end

      operation 9886082 "getMinValue"
	public return_type class_ref 194946 // Comparable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimal value for the attribute described by this
{@code OpenMBeanAttributeInfoSupport} instance, if specified,
or {@code null} otherwise.
"
      end

      operation 9886210 "getMaxValue"
	public return_type class_ref 194946 // Comparable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximal value for the attribute described by this
{@code OpenMBeanAttributeInfoSupport} instance, if specified,
or {@code null} otherwise.
"
      end

      operation 9886338 "hasDefaultValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanAttributeInfoSupport} instance specifies a non-null
default value for the described attribute, {@code false}
otherwise.
"
      end

      operation 9886466 "hasLegalValues"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanAttributeInfoSupport} instance specifies a non-null
set of legal values for the described attribute, {@code false}
otherwise.
"
      end

      operation 9886594 "hasMinValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanAttributeInfoSupport} instance specifies a non-null
minimal value for the described attribute, {@code false}
otherwise.
"
      end

      operation 9886722 "hasMaxValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanAttributeInfoSupport} instance specifies a non-null
maximal value for the described attribute, {@code false}
otherwise.
"
      end

      operation 9886850 "isValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether {@code obj} is a valid value for the attribute
described by this {@code OpenMBeanAttributeInfoSupport}
instance.

@param obj the object to be tested.

@return {@code true} if {@code obj} is a valid value for
the parameter described by this {@code
OpenMBeanAttributeInfoSupport} instance, {@code false}
otherwise.
"
      end

      operation 9886978 "isValue"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "info" type class_ref 1192194 // OpenMBeanParameterInfo
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings({\"unchecked\", \"rawtypes\"})
"
	
	
	
      end

      operation 9887106 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Commodity methods from java.lang.Object  *** 

Compares the specified {@code obj} parameter with this {@code
OpenMBeanAttributeInfoSupport} instance for equality.
<p>
Returns {@code true} if and only if all of the following statements are true:
<ul>
<li>{@code obj} is non null,</li>
<li>{@code obj} also implements the {@code OpenMBeanAttributeInfo} interface,</li>
<li>their names are equal</li>
<li>their open types are equal</li>
<li>their access properties (isReadable, isWritable and isIs) are equal</li>
<li>their default, min, max and legal values are equal.</li>
</ul>
This ensures that this {@code equals} method works properly for
{@code obj} parameters which are different implementations of
the {@code OpenMBeanAttributeInfo} interface.

<p>If {@code obj} also implements {@link DescriptorRead}, then its
{@link DescriptorRead#getDescriptor() getDescriptor()} method must
also return the same value as for this object.</p>

@param obj the object to be compared for equality with this
{@code OpenMBeanAttributeInfoSupport} instance.

@return {@code true} if the specified object is equal to this
{@code OpenMBeanAttributeInfoSupport} instance.
"
      end

      operation 9887234 "equal"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "x1" type class_ref 1192194 // OpenMBeanParameterInfo
	  param inout name "x2" type class_ref 1192194 // OpenMBeanParameterInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9887362 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the hash code value for this {@code
OpenMBeanAttributeInfoSupport} instance.</p>

<p>The hash code of an {@code OpenMBeanAttributeInfoSupport}
instance is the sum of the hash codes of all elements of
information used in {@code equals} comparisons (ie: its name,
its <i>open type</i>, its default, min, max and legal
values, and its Descriptor).

<p>This ensures that {@code t1.equals(t2)} implies that {@code
t1.hashCode()==t2.hashCode()} for any two {@code
OpenMBeanAttributeInfoSupport} instances {@code t1} and {@code
t2}, as required by the general contract of the method {@link
Object#hashCode() Object.hashCode()}.

<p>However, note that another instance of a class implementing
the {@code OpenMBeanAttributeInfo} interface may be equal to
this {@code OpenMBeanAttributeInfoSupport} instance as defined
by {@link #equals(java.lang.Object)}, but may have a different
hash code if it is calculated differently.

<p>As {@code OpenMBeanAttributeInfoSupport} instances are
immutable, the hash code for this instance is calculated once,
on the first call to {@code hashCode}, and then the same value
is returned for subsequent calls.

@return the hash code value for this {@code
OpenMBeanAttributeInfoSupport} instance
"
      end

      operation 9887490 "hashCode"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "info" type class_ref 1192194 // OpenMBeanParameterInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9887618 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this
{@code OpenMBeanAttributeInfoSupport} instance.
<p>
The string representation consists of the name of this class (i.e.
{@code javax.management.openmbean.OpenMBeanAttributeInfoSupport}),
the string representation of the name and open type of the
described parameter, the string representation of its
default, min, max and legal values and the string
representation of its descriptor.

<p>As {@code OpenMBeanAttributeInfoSupport} instances are
immutable, the string representation for this instance is
calculated once, on the first call to {@code toString}, and
then the same value is returned for subsequent calls.

@return a string representation of this
{@code OpenMBeanAttributeInfoSupport} instance.
"
      end

      operation 9887746 "toString"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 1192194 // OpenMBeanParameterInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1198466 "OpenMBeanConstructorInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Describes a constructor of an Open MBean.</p>

<p>This interface declares the same methods as the class {@link
javax.management.MBeanConstructorInfo}.  A class implementing this
interface (typically {@link OpenMBeanConstructorInfoSupport})
should extend {@link javax.management.MBeanConstructorInfo}.</p>

<p>The {@link #getSignature()} method should return at runtime an
array of instances of a subclass of {@link MBeanParameterInfo}
which implements the {@link OpenMBeanParameterInfo} interface
(typically {@link OpenMBeanParameterInfoSupport}).</p>



@since 1.5
"
      operation 9887874 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Re-declares the methods that are in class MBeanConstructorInfo of JMX 1.0
 (methods will be removed when MBeanConstructorInfo is made a parent interface of this interface)

Returns a human readable description of the constructor
described by this <tt>OpenMBeanConstructorInfo</tt> instance.

@return the description.
"
      end

      operation 9888002 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the constructor
described by this <tt>OpenMBeanConstructorInfo</tt> instance.

@return the name.
"
      end

      operation 9888130 "getSignature"
	public return_type class_ref 1188994 // MBeanParameterInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>OpenMBeanParameterInfo</tt> instances
describing each parameter in the signature of the constructor
described by this <tt>OpenMBeanConstructorInfo</tt> instance.

@return the signature.
"
      end

      operation 9888258 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " commodity methods


Compares the specified <var>obj</var> parameter with this <code>OpenMBeanConstructorInfo</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>OpenMBeanConstructorInfo</code> interface,</li>
<li>their names are equal</li>
<li>their signatures are equal.</li>
</ul>
This ensures that this <tt>equals</tt> method works properly for <var>obj</var> parameters which are
different implementations of the <code>OpenMBeanConstructorInfo</code> interface.
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>OpenMBeanConstructorInfo</code> instance;

@return  <code>true</code> if the specified object is equal to this <code>OpenMBeanConstructorInfo</code> instance.
"
      end

      operation 9888386 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>OpenMBeanConstructorInfo</code> instance.
<p>
The hash code of an <code>OpenMBeanConstructorInfo</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its name and signature, where the signature hashCode is calculated by a call to
 <tt>java.util.Arrays.asList(this.getSignature).hashCode()</tt>).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>OpenMBeanConstructorInfo</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>

@return  the hash code value for this <code>OpenMBeanConstructorInfo</code> instance
"
      end

      operation 9888514 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>OpenMBeanConstructorInfo</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.OpenMBeanConstructorInfo</code>),
and the name and signature of the described constructor.

@return  a string representation of this <code>OpenMBeanConstructorInfo</code> instance
"
      end
    end

    class 1198594 "OpenMBeanConstructorInfoSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes a constructor of an Open MBean.


@since 1.5
"
      classrelation 3835906 // <generalisation>
	relation 3835906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3835906 // <generalisation>
	  b parent class_ref 497282 // MBeanConstructorInfo
      end

      classrelation 3836034 // <realization>
	relation 3836034 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3836034 // <realization>
	  b parent class_ref 1198466 // OpenMBeanConstructorInfo
      end

      attribute 2290690 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -4400441579007477003L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3836162 // myHashCode (<unidirectional association>)
	relation 3836162 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable,
 these two values need only be calculated once.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3836162 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3836290 // myToString (<unidirectional association>)
	relation 3836290 --->
	  a role_name "myToString" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3836290 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9888642 "OpenMBeanConstructorInfoSupport"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1192194 // OpenMBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanConstructorInfoSupport}
instance, which describes the constructor of a class of open
MBeans with the specified {@code name}, {@code description} and
{@code signature}.</p>

<p>The {@code signature} array parameter is internally copied,
so that subsequent changes to the array referenced by {@code
signature} have no effect on this instance.</p>

@param name cannot be a null or empty string.

@param description cannot be a null or empty string.

@param signature can be null or empty if there are no
parameters to describe.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string.

@throws ArrayStoreException If {@code signature} is not an
array of instances of a subclass of {@code MBeanParameterInfo}.
"
      end

      operation 9888770 "OpenMBeanConstructorInfoSupport"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1192194 // OpenMBeanParameterInfo
	multiplicity "[]"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanConstructorInfoSupport}
instance, which describes the constructor of a class of open
MBeans with the specified {@code name}, {@code description},
{@code signature}, and {@code descriptor}.</p>

<p>The {@code signature} array parameter is internally copied,
so that subsequent changes to the array referenced by {@code
signature} have no effect on this instance.</p>

@param name cannot be a null or empty string.

@param description cannot be a null or empty string.

@param signature can be null or empty if there are no
parameters to describe.

@param descriptor The descriptor for the constructor.  This may
be null which is equivalent to an empty descriptor.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string.

@throws ArrayStoreException If {@code signature} is not an
array of instances of a subclass of {@code MBeanParameterInfo}.

@since 1.6
"
      end

      operation 9888898 "arrayCopyCast"
	class_operation private return_type class_ref 1188994 // MBeanParameterInfo
	nparams 1
	  param inout name "src" type class_ref 1192194 // OpenMBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9889026 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Commodity methods from java.lang.Object  *** 

<p>Compares the specified {@code obj} parameter with this
{@code OpenMBeanConstructorInfoSupport} instance for
equality.</p>

<p>Returns {@code true} if and only if all of the following
statements are true:

<ul>
<li>{@code obj} is non null,</li>
<li>{@code obj} also implements the {@code
OpenMBeanConstructorInfo} interface,</li>
<li>their names are equal</li>
<li>their signatures are equal.</li>
</ul>

This ensures that this {@code equals} method works properly for
{@code obj} parameters which are different implementations of
the {@code OpenMBeanConstructorInfo} interface.

@param obj the object to be compared for equality with this
{@code OpenMBeanConstructorInfoSupport} instance;

@return {@code true} if the specified object is equal to this
{@code OpenMBeanConstructorInfoSupport} instance.
"
      end

      operation 9889154 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the hash code value for this {@code
OpenMBeanConstructorInfoSupport} instance.</p>

<p>The hash code of an {@code OpenMBeanConstructorInfoSupport}
instance is the sum of the hash codes of all elements of
information used in {@code equals} comparisons (ie: its name
and signature, where the signature hashCode is calculated by a
call to {@code
java.util.Arrays.asList(this.getSignature).hashCode()}).</p>

<p>This ensures that {@code t1.equals(t2)} implies that {@code
t1.hashCode()==t2.hashCode()} for any two {@code
OpenMBeanConstructorInfoSupport} instances {@code t1} and
{@code t2}, as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.</p>

<p>However, note that another instance of a class implementing
the {@code OpenMBeanConstructorInfo} interface may be equal to
this {@code OpenMBeanConstructorInfoSupport} instance as
defined by {@link #equals(java.lang.Object)}, but may have a
different hash code if it is calculated differently.</p>

<p>As {@code OpenMBeanConstructorInfoSupport} instances are
immutable, the hash code for this instance is calculated once,
on the first call to {@code hashCode}, and then the same value
is returned for subsequent calls.</p>

@return the hash code value for this {@code
OpenMBeanConstructorInfoSupport} instance
"
      end

      operation 9889282 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a string representation of this {@code
OpenMBeanConstructorInfoSupport} instance.</p>

<p>The string representation consists of the name of this class
(ie {@code
javax.management.openmbean.OpenMBeanConstructorInfoSupport}),
the name and signature of the described constructor and the
string representation of its descriptor.</p>

<p>As {@code OpenMBeanConstructorInfoSupport} instances are
immutable, the string representation for this instance is
calculated once, on the first call to {@code toString}, and
then the same value is returned for subsequent calls.</p>

@return a string representation of this {@code
OpenMBeanConstructorInfoSupport} instance
"
      end
    end

    class 1198722 "OpenMBeanInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Describes an Open MBean: an Open MBean is recognized as such if
its {@link javax.management.DynamicMBean#getMBeanInfo()
getMBeanInfo()} method returns an instance of a class which
implements the {@link OpenMBeanInfo} interface, typically {@link
OpenMBeanInfoSupport}.</p>

<p>This interface declares the same methods as the class {@link
javax.management.MBeanInfo}.  A class implementing this interface
(typically {@link OpenMBeanInfoSupport}) should extend {@link
javax.management.MBeanInfo}.</p>

<p>The {@link #getAttributes()}, {@link #getOperations()} and
{@link #getConstructors()} methods of the implementing class should
return at runtime an array of instances of a subclass of {@link
MBeanAttributeInfo}, {@link MBeanOperationInfo} or {@link
MBeanConstructorInfo} respectively which implement the {@link
OpenMBeanAttributeInfo}, {@link OpenMBeanOperationInfo} or {@link
OpenMBeanConstructorInfo} interface respectively.


@since 1.5
"
      operation 9889410 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Re-declares the methods that are in class MBeanInfo of JMX 1.0
 (methods will be removed when MBeanInfo is made a parent interface of this interface)

Returns the fully qualified Java class name of the open MBean
instances this <tt>OpenMBeanInfo</tt> describes.

@return the class name.
"
      end

      operation 9889538 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human readable description of the type of open MBean
instances this <tt>OpenMBeanInfo</tt> describes.

@return the description.
"
      end

      operation 9889666 "getAttributes"
	public return_type class_ref 496642 // MBeanAttributeInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>OpenMBeanAttributeInfo</tt> instances
describing each attribute in the open MBean described by this
<tt>OpenMBeanInfo</tt> instance.  Each instance in the returned
array should actually be a subclass of
<tt>MBeanAttributeInfo</tt> which implements the
<tt>OpenMBeanAttributeInfo</tt> interface (typically {@link
OpenMBeanAttributeInfoSupport}).

@return the attribute array.
"
      end

      operation 9889794 "getOperations"
	public return_type class_ref 496770 // MBeanOperationInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>OpenMBeanOperationInfo</tt> instances
describing each operation in the open MBean described by this
<tt>OpenMBeanInfo</tt> instance.  Each instance in the returned
array should actually be a subclass of
<tt>MBeanOperationInfo</tt> which implements the
<tt>OpenMBeanOperationInfo</tt> interface (typically {@link
OpenMBeanOperationInfoSupport}).

@return the operation array.
"
      end

      operation 9889922 "getConstructors"
	public return_type class_ref 497282 // MBeanConstructorInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>OpenMBeanConstructorInfo</tt> instances
describing each constructor in the open MBean described by this
<tt>OpenMBeanInfo</tt> instance.  Each instance in the returned
array should actually be a subclass of
<tt>MBeanConstructorInfo</tt> which implements the
<tt>OpenMBeanConstructorInfo</tt> interface (typically {@link
OpenMBeanConstructorInfoSupport}).

@return the constructor array.
"
      end

      operation 9890050 "getNotifications"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>MBeanNotificationInfo</tt> instances
describing each notification emitted by the open MBean
described by this <tt>OpenMBeanInfo</tt> instance.

@return the notification array.
"
      end

      operation 9890178 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " commodity methods


Compares the specified <var>obj</var> parameter with this <code>OpenMBeanInfo</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>OpenMBeanInfo</code> interface,</li>
<li>their class names are equal</li>
<li>their infos on attributes, constructors, operations and notifications are equal</li>
</ul>
This ensures that this <tt>equals</tt> method works properly for <var>obj</var> parameters which are
different implementations of the <code>OpenMBeanInfo</code> interface.
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>OpenMBeanInfo</code> instance;

@return  <code>true</code> if the specified object is equal to this <code>OpenMBeanInfo</code> instance.
"
      end

      operation 9890306 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>OpenMBeanInfo</code> instance.
<p>
The hash code of an <code>OpenMBeanInfo</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its class name, and its infos on attributes, constructors, operations and notifications,
where the hashCode of each of these arrays is calculated by a call to
 <tt>new java.util.HashSet(java.util.Arrays.asList(this.getSignature)).hashCode()</tt>).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>OpenMBeanInfo</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>

@return  the hash code value for this <code>OpenMBeanInfo</code> instance
"
      end

      operation 9890434 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>OpenMBeanInfo</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.OpenMBeanInfo</code>),
the MBean class name,
and the string representation of infos on attributes, constructors, operations and notifications of the described MBean.

@return  a string representation of this <code>OpenMBeanInfo</code> instance
"
      end
    end

    class 1198850 "OpenMBeanInfoSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code OpenMBeanInfoSupport} class describes the management
information of an <i>open MBean</i>: it is a subclass of {@link
javax.management.MBeanInfo}, and it implements the {@link
OpenMBeanInfo} interface.  Note that an <i>open MBean</i> is
recognized as such if its {@code getMBeanInfo()} method returns an
instance of a class which implements the OpenMBeanInfo interface,
typically {@code OpenMBeanInfoSupport}.


@since 1.5
"
      classrelation 3836418 // <generalisation>
	relation 3836418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3836418 // <generalisation>
	  b parent class_ref 487426 // MBeanInfo
      end

      classrelation 3836546 // <realization>
	relation 3836546 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3836546 // <realization>
	  b parent class_ref 1198722 // OpenMBeanInfo
      end

      attribute 2290818 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4349395935420511492L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3836674 // myHashCode (<unidirectional association>)
	relation 3836674 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable, these two values
 need only be calculated once.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3836674 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3836802 // myToString (<unidirectional association>)
	relation 3836802 --->
	  a role_name "myToString" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3836802 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9890562 "OpenMBeanInfoSupport"
	public explicit_return_type ""
	nparams 6
	  param inout name "className" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openAttributes" type class_ref 1198210 // OpenMBeanAttributeInfo
	multiplicity "[]"
	  param inout name "openConstructors" type class_ref 1198466 // OpenMBeanConstructorInfo
	multiplicity "[]"
	  param inout name "openOperations" type class_ref 1198978 // OpenMBeanOperationInfo
	multiplicity "[]"
	  param inout name "notifications" type class_ref 497154 // MBeanNotificationInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanInfoSupport} instance, which
describes a class of open MBeans with the specified {@code
className}, {@code description}, {@code openAttributes}, {@code
openConstructors} , {@code openOperations} and {@code
notifications}.</p>

<p>The {@code openAttributes}, {@code openConstructors},
{@code openOperations} and {@code notifications}
array parameters are internally copied, so that subsequent changes
to the arrays referenced by these parameters have no effect on this
instance.</p>

@param className The fully qualified Java class name of the
open MBean described by this <CODE>OpenMBeanInfoSupport</CODE>
instance.

@param description A human readable description of the open
MBean described by this <CODE>OpenMBeanInfoSupport</CODE>
instance.

@param openAttributes The list of exposed attributes of the
described open MBean; Must be an array of instances of a
subclass of {@code MBeanAttributeInfo}, typically {@code
OpenMBeanAttributeInfoSupport}.

@param openConstructors The list of exposed public constructors
of the described open MBean; Must be an array of instances of a
subclass of {@code MBeanConstructorInfo}, typically {@code
OpenMBeanConstructorInfoSupport}.

@param openOperations The list of exposed operations of the
described open MBean.  Must be an array of instances of a
subclass of {@code MBeanOperationInfo}, typically {@code
OpenMBeanOperationInfoSupport}.

@param notifications The list of notifications emitted by the
described open MBean.

@throws ArrayStoreException If {@code openAttributes}, {@code
openConstructors} or {@code openOperations} is not an array of
instances of a subclass of {@code MBeanAttributeInfo}, {@code
MBeanConstructorInfo} or {@code MBeanOperationInfo}
respectively.
"
      end

      operation 9890690 "OpenMBeanInfoSupport"
	public explicit_return_type ""
	nparams 7
	  param inout name "className" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openAttributes" type class_ref 1198210 // OpenMBeanAttributeInfo
	multiplicity "[]"
	  param inout name "openConstructors" type class_ref 1198466 // OpenMBeanConstructorInfo
	multiplicity "[]"
	  param inout name "openOperations" type class_ref 1198978 // OpenMBeanOperationInfo
	multiplicity "[]"
	  param inout name "notifications" type class_ref 497154 // MBeanNotificationInfo
	multiplicity "[]"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanInfoSupport} instance, which
describes a class of open MBeans with the specified {@code
className}, {@code description}, {@code openAttributes}, {@code
openConstructors} , {@code openOperations}, {@code
notifications}, and {@code descriptor}.</p>

<p>The {@code openAttributes}, {@code openConstructors}, {@code
openOperations} and {@code notifications} array parameters are
internally copied, so that subsequent changes to the arrays
referenced by these parameters have no effect on this
instance.</p>

@param className The fully qualified Java class name of the
open MBean described by this <CODE>OpenMBeanInfoSupport</CODE>
instance.

@param description A human readable description of the open
MBean described by this <CODE>OpenMBeanInfoSupport</CODE>
instance.

@param openAttributes The list of exposed attributes of the
described open MBean; Must be an array of instances of a
subclass of {@code MBeanAttributeInfo}, typically {@code
OpenMBeanAttributeInfoSupport}.

@param openConstructors The list of exposed public constructors
of the described open MBean; Must be an array of instances of a
subclass of {@code MBeanConstructorInfo}, typically {@code
OpenMBeanConstructorInfoSupport}.

@param openOperations The list of exposed operations of the
described open MBean.  Must be an array of instances of a
subclass of {@code MBeanOperationInfo}, typically {@code
OpenMBeanOperationInfoSupport}.

@param notifications The list of notifications emitted by the
described open MBean.

@param descriptor The descriptor for the MBean.  This may be null
which is equivalent to an empty descriptor.

@throws ArrayStoreException If {@code openAttributes}, {@code
openConstructors} or {@code openOperations} is not an array of
instances of a subclass of {@code MBeanAttributeInfo}, {@code
MBeanConstructorInfo} or {@code MBeanOperationInfo}
respectively.

@since 1.6
"
      end

      operation 9890818 "attributeArray"
	class_operation private return_type class_ref 496642 // MBeanAttributeInfo
	nparams 1
	  param inout name "src" type class_ref 1198210 // OpenMBeanAttributeInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9890946 "constructorArray"
	class_operation private return_type class_ref 497282 // MBeanConstructorInfo
	nparams 1
	  param inout name "src" type class_ref 1198466 // OpenMBeanConstructorInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9891074 "operationArray"
	class_operation private return_type class_ref 496770 // MBeanOperationInfo
	nparams 1
	  param inout name "src" type class_ref 1198978 // OpenMBeanOperationInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9891202 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Commodity methods from java.lang.Object  *** 

<p>Compares the specified {@code obj} parameter with this
{@code OpenMBeanInfoSupport} instance for equality.</p>

<p>Returns {@code true} if and only if all of the following
statements are true:

<ul>
<li>{@code obj} is non null,</li>
<li>{@code obj} also implements the {@code OpenMBeanInfo}
interface,</li>
<li>their class names are equal</li>
<li>their infos on attributes, constructors, operations and
notifications are equal</li>
</ul>

This ensures that this {@code equals} method works properly for
{@code obj} parameters which are different implementations of
the {@code OpenMBeanInfo} interface.

@param obj the object to be compared for equality with this
{@code OpenMBeanInfoSupport} instance;

@return {@code true} if the specified object is equal to this
{@code OpenMBeanInfoSupport} instance.
"
      end

      operation 9891330 "sameArrayContents"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a1" explicit_type "T"
	multiplicity "[]"
	  param inout name "a2" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9891458 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the hash code value for this {@code
OpenMBeanInfoSupport} instance.</p>

<p>The hash code of an {@code OpenMBeanInfoSupport} instance is
the sum of the hash codes of all elements of information used
in {@code equals} comparisons (ie: its class name, and its
infos on attributes, constructors, operations and
notifications, where the hashCode of each of these arrays is
calculated by a call to {@code new
java.util.HashSet(java.util.Arrays.asList(this.getSignature)).hashCode()}).</p>

<p>This ensures that {@code t1.equals(t2)} implies that {@code
t1.hashCode()==t2.hashCode()} for any two {@code
OpenMBeanInfoSupport} instances {@code t1} and {@code t2}, as
required by the general contract of the method {@link
Object#hashCode() Object.hashCode()}.</p>

<p>However, note that another instance of a class implementing
the {@code OpenMBeanInfo} interface may be equal to this {@code
OpenMBeanInfoSupport} instance as defined by {@link
#equals(java.lang.Object)}, but may have a different hash code
if it is calculated differently.</p>

<p>As {@code OpenMBeanInfoSupport} instances are immutable, the
hash code for this instance is calculated once, on the first
call to {@code hashCode}, and then the same value is returned
for subsequent calls.</p>

@return the hash code value for this {@code
OpenMBeanInfoSupport} instance
"
      end

      operation 9891586 "arraySetHash"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9891714 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a string representation of this {@code
OpenMBeanInfoSupport} instance.</p>

<p>The string representation consists of the name of this class
(ie {@code javax.management.openmbean.OpenMBeanInfoSupport}),
the MBean class name, the string representation of infos on
attributes, constructors, operations and notifications of the
described MBean and the string representation of the descriptor.</p>

<p>As {@code OpenMBeanInfoSupport} instances are immutable, the
string representation for this instance is calculated once, on
the first call to {@code toString}, and then the same value is
returned for subsequent calls.</p>

@return a string representation of this {@code
OpenMBeanInfoSupport} instance
"
      end
    end

    class 1198978 "OpenMBeanOperationInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Describes an operation of an Open MBean.</p>

<p>This interface declares the same methods as the class {@link
javax.management.MBeanOperationInfo}.  A class implementing this
interface (typically {@link OpenMBeanOperationInfoSupport}) should
extend {@link javax.management.MBeanOperationInfo}.</p>

<p>The {@link #getSignature()} method should return at runtime an
array of instances of a subclass of {@link MBeanParameterInfo}
which implements the {@link OpenMBeanParameterInfo} interface
(typically {@link OpenMBeanParameterInfoSupport}).</p>


@since 1.5
"
      operation 9891842 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Re-declares fields and methods that are in class MBeanOperationInfo of JMX 1.0
 (fields and methods will be removed when MBeanOperationInfo is made a parent interface of this interface)

Returns a human readable description of the operation
described by this <tt>OpenMBeanOperationInfo</tt> instance.

@return the description.
"
      end

      operation 9891970 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the operation
described by this <tt>OpenMBeanOperationInfo</tt> instance.

@return the name.
"
      end

      operation 9892098 "getSignature"
	public return_type class_ref 1188994 // MBeanParameterInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>OpenMBeanParameterInfo</tt> instances
describing each parameter in the signature of the operation
described by this <tt>OpenMBeanOperationInfo</tt> instance.
Each instance in the returned array should actually be a
subclass of <tt>MBeanParameterInfo</tt> which implements the
<tt>OpenMBeanParameterInfo</tt> interface (typically {@link
OpenMBeanParameterInfoSupport}).

@return the signature.
"
      end

      operation 9892226 "getImpact"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <tt>int</tt> constant qualifying the impact of the
operation described by this <tt>OpenMBeanOperationInfo</tt>
instance.

The returned constant is one of {@link
javax.management.MBeanOperationInfo#INFO}, {@link
javax.management.MBeanOperationInfo#ACTION}, {@link
javax.management.MBeanOperationInfo#ACTION_INFO}, or {@link
javax.management.MBeanOperationInfo#UNKNOWN}.

@return the impact code.
"
      end

      operation 9892354 "getReturnType"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully qualified Java class name of the values
returned by the operation described by this
<tt>OpenMBeanOperationInfo</tt> instance.  This method should
return the same value as a call to
<tt>getReturnOpenType().getClassName()</tt>.

@return the return type.
"
      end

      operation 9892482 "getReturnOpenType"
	public return_type class_ref 490242 // OpenType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Now declares methods that are specific to open MBeans


Returns the <i>open type</i> of the values returned by the
operation described by this <tt>OpenMBeanOperationInfo</tt>
instance.

@return the return type.
"
      end

      operation 9892610 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " open MBean specific method
 commodity methods


Compares the specified <var>obj</var> parameter with this <code>OpenMBeanOperationInfo</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>OpenMBeanOperationInfo</code> interface,</li>
<li>their names are equal</li>
<li>their signatures are equal</li>
<li>their return open types are equal</li>
<li>their impacts are equal</li>
</ul>
This ensures that this <tt>equals</tt> method works properly for <var>obj</var> parameters which are
different implementations of the <code>OpenMBeanOperationInfo</code> interface.
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>OpenMBeanOperationInfo</code> instance;

@return  <code>true</code> if the specified object is equal to this <code>OpenMBeanOperationInfo</code> instance.
"
      end

      operation 9892738 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>OpenMBeanOperationInfo</code> instance.
<p>
The hash code of an <code>OpenMBeanOperationInfo</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its name, return open type, impact and signature, where the signature hashCode is calculated by a call to
 <tt>java.util.Arrays.asList(this.getSignature).hashCode()</tt>).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>OpenMBeanOperationInfo</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>

@return  the hash code value for this <code>OpenMBeanOperationInfo</code> instance
"
      end

      operation 9892866 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>OpenMBeanOperationInfo</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.OpenMBeanOperationInfo</code>),
and the name, signature, return open type and impact of the described operation.

@return  a string representation of this <code>OpenMBeanOperationInfo</code> instance
"
      end
    end

    class 1199106 "OpenMBeanOperationInfoSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes an operation of an Open MBean.


@since 1.5
"
      classrelation 3836930 // <generalisation>
	relation 3836930 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3836930 // <generalisation>
	  b parent class_ref 496770 // MBeanOperationInfo
      end

      classrelation 3837058 // <realization>
	relation 3837058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3837058 // <realization>
	  b parent class_ref 1198978 // OpenMBeanOperationInfo
      end

      attribute 2290946 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4996859732565369366L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3837186 // returnOpenType (<unidirectional association>)
	relation 3837186 --->
	  a role_name "returnOpenType" private
	    comment "
@serial The <i>open type</i> of the values returned by the operation
        described by this {@link OpenMBeanOperationInfo} instance


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3837186 // returnOpenType (<unidirectional association>)
	  b parent class_ref 490242 // OpenType
      end

      classrelation 3837314 // myHashCode (<unidirectional association>)
	relation 3837314 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable,
 these two values need only be calculated once.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3837314 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3837442 // myToString (<unidirectional association>)
	relation 3837442 --->
	  a role_name "myToString" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3837442 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9892994 "OpenMBeanOperationInfoSupport"
	public explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1192194 // OpenMBeanParameterInfo
	multiplicity "[]"
	  param inout name "returnOpenType" type class_ref 490242 // OpenType
	  param in name "impact" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}<?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanOperationInfoSupport}
instance, which describes the operation of a class of open
MBeans, with the specified {@code name}, {@code description},
{@code signature}, {@code returnOpenType} and {@code
impact}.</p>

<p>The {@code signature} array parameter is internally copied,
so that subsequent changes to the array referenced by {@code
signature} have no effect on this instance.</p>

@param name cannot be a null or empty string.

@param description cannot be a null or empty string.

@param signature can be null or empty if there are no
parameters to describe.

@param returnOpenType cannot be null: use {@code
SimpleType.VOID} for operations that return nothing.

@param impact must be one of {@code ACTION}, {@code
ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code
returnOpenType} is null, or {@code impact} is not one of {@code
ACTION}, {@code ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.

@throws ArrayStoreException If {@code signature} is not an
array of instances of a subclass of {@code MBeanParameterInfo}.
"
      end

      operation 9893122 "OpenMBeanOperationInfoSupport"
	public explicit_return_type ""
	nparams 6
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1192194 // OpenMBeanParameterInfo
	multiplicity "[]"
	  param inout name "returnOpenType" type class_ref 490242 // OpenType
	  param in name "impact" explicit_type "int"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}<?> ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanOperationInfoSupport}
instance, which describes the operation of a class of open
MBeans, with the specified {@code name}, {@code description},
{@code signature}, {@code returnOpenType}, {@code
impact}, and {@code descriptor}.</p>

<p>The {@code signature} array parameter is internally copied,
so that subsequent changes to the array referenced by {@code
signature} have no effect on this instance.</p>

@param name cannot be a null or empty string.

@param description cannot be a null or empty string.

@param signature can be null or empty if there are no
parameters to describe.

@param returnOpenType cannot be null: use {@code
SimpleType.VOID} for operations that return nothing.

@param impact must be one of {@code ACTION}, {@code
ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.

@param descriptor The descriptor for the operation.  This may
be null, which is equivalent to an empty descriptor.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code
returnOpenType} is null, or {@code impact} is not one of {@code
ACTION}, {@code ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.

@throws ArrayStoreException If {@code signature} is not an
array of instances of a subclass of {@code MBeanParameterInfo}.

@since 1.6
"
      end

      operation 9893250 "arrayCopyCast"
	class_operation private return_type class_ref 1188994 // MBeanParameterInfo
	nparams 1
	  param inout name "src" type class_ref 1192194 // OpenMBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Converts an array of OpenMBeanParameterInfo objects extending
 MBeanParameterInfo into an array of MBeanParameterInfo.
"
      end

      operation 9893378 "arrayCopyCast"
	class_operation private return_type class_ref 1192194 // OpenMBeanParameterInfo
	nparams 1
	  param inout name "src" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Converts an array of MBeanParameterInfo objects implementing
 OpenMBeanParameterInfo into an array of OpenMBeanParameterInfo.
"
      end

      operation 9893506 "getReturnOpenType"
	public return_type class_ref 490242 // OpenType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " [JF]: should we add constructor with java.lang.reflect.Method
 method parameter ?  would need to add consistency check between
 OpenType<?> returnOpenType and method.getReturnType().

Returns the <i>open type</i> of the values returned by the
operation described by this {@code OpenMBeanOperationInfo}
instance.
"
      end

      operation 9893634 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Commodity methods from java.lang.Object  *** 

<p>Compares the specified {@code obj} parameter with this
{@code OpenMBeanOperationInfoSupport} instance for
equality.</p>

<p>Returns {@code true} if and only if all of the following
statements are true:

<ul>
<li>{@code obj} is non null,</li>
<li>{@code obj} also implements the {@code
OpenMBeanOperationInfo} interface,</li>
<li>their names are equal</li>
<li>their signatures are equal</li>
<li>their return open types are equal</li>
<li>their impacts are equal</li>
</ul>

This ensures that this {@code equals} method works properly for
{@code obj} parameters which are different implementations of
the {@code OpenMBeanOperationInfo} interface.

@param obj the object to be compared for equality with this
{@code OpenMBeanOperationInfoSupport} instance;

@return {@code true} if the specified object is equal to this
{@code OpenMBeanOperationInfoSupport} instance.
"
      end

      operation 9893762 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the hash code value for this {@code
OpenMBeanOperationInfoSupport} instance.</p>

<p>The hash code of an {@code OpenMBeanOperationInfoSupport}
instance is the sum of the hash codes of all elements of
information used in {@code equals} comparisons (ie: its name,
return open type, impact and signature, where the signature
hashCode is calculated by a call to {@code
java.util.Arrays.asList(this.getSignature).hashCode()}).</p>

<p>This ensures that {@code t1.equals(t2) } implies that {@code
t1.hashCode()==t2.hashCode() } for any two {@code
OpenMBeanOperationInfoSupport} instances {@code t1} and {@code
t2}, as required by the general contract of the method {@link
Object#hashCode() Object.hashCode()}.</p>

<p>However, note that another instance of a class implementing
the {@code OpenMBeanOperationInfo} interface may be equal to
this {@code OpenMBeanOperationInfoSupport} instance as defined
by {@link #equals(java.lang.Object)}, but may have a different
hash code if it is calculated differently.</p>

<p>As {@code OpenMBeanOperationInfoSupport} instances are
immutable, the hash code for this instance is calculated once,
on the first call to {@code hashCode}, and then the same value
is returned for subsequent calls.</p>

@return the hash code value for this {@code
OpenMBeanOperationInfoSupport} instance
"
      end

      operation 9893890 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a string representation of this {@code
OpenMBeanOperationInfoSupport} instance.</p>

<p>The string representation consists of the name of this class
(ie {@code
javax.management.openmbean.OpenMBeanOperationInfoSupport}), and
the name, signature, return open type and impact of the
described operation and the string representation of its descriptor.</p>

<p>As {@code OpenMBeanOperationInfoSupport} instances are
immutable, the string representation for this instance is
calculated once, on the first call to {@code toString}, and
then the same value is returned for subsequent calls.</p>

@return a string representation of this {@code
OpenMBeanOperationInfoSupport} instance
"
      end

      operation 9894018 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An object serialized in a version of the API before Descriptors were
added to this class will have an empty or null Descriptor.
For consistency with our
behavior in this version, we must replace the object with one
where the Descriptors reflect the same value of returned openType.
"
      end
    end

    class 1199234 "OpenMBeanParameterInfoSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " OpenMBeanAttributeInfoSupport and this class are very similar
 but can't easily be refactored because there's no multiple inheritance.
 The best we can do for refactoring is to put a bunch of static methods
 in OpenMBeanAttributeInfoSupport and import them here.

Describes a parameter used in one or more operations or
constructors of an open MBean.


@since 1.5
"
      classrelation 3837570 // <generalisation>
	relation 3837570 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3837570 // <generalisation>
	  b parent class_ref 1188994 // MBeanParameterInfo
      end

      classrelation 3837698 // <realization>
	relation 3837698 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3837698 // <realization>
	  b parent class_ref 1192194 // OpenMBeanParameterInfo
      end

      attribute 2291074 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -7235016873758443122L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3837826 // openType (<unidirectional association>)
	relation 3837826 --->
	  a role_name "openType" private
	    comment "
@serial The open mbean parameter's <i>open type</i>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3837826 // openType (<unidirectional association>)
	  b parent class_ref 490242 // OpenType
      end

      classrelation 3837954 // defaultValue (<unidirectional association>)
	relation 3837954 --->
	  a role_name "defaultValue" init_value " null" private
	    comment "
@serial The open mbean parameter's default value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3837954 // defaultValue (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3838082 // legalValues (<unidirectional association>)
	relation 3838082 --->
	  a role_name "legalValues" init_value " null" private
	    comment "
@serial The open mbean parameter's legal values. This {@link
Set} is unmodifiable

 to be constructed unmodifiable"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3838082 // legalValues (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3838210 // minValue (<unidirectional association>)
	relation 3838210 --->
	  a role_name "minValue" init_value " null" private
	    comment "
@serial The open mbean parameter's min value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3838210 // minValue (<unidirectional association>)
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3838338 // maxValue (<unidirectional association>)
	relation 3838338 --->
	  a role_name "maxValue" init_value " null" private
	    comment "
@serial The open mbean parameter's max value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3838338 // maxValue (<unidirectional association>)
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3838466 // myHashCode (<unidirectional association>)
	relation 3838466 --->
	  a role_name "myHashCode" init_value " null" private
	    comment " As this instance is immutable, these two values need only
 be calculated once.
 As this instance is immutable, these two values"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3838466 // myHashCode (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      classrelation 3838594 // myToString (<unidirectional association>)
	relation 3838594 --->
	  a role_name "myToString" init_value " null" private
	    comment " need only be calculated once."
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3838594 // myToString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9894146 "OpenMBeanParameterInfoSupport"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code OpenMBeanParameterInfoSupport} instance,
which describes the parameter used in one or more operations or
constructors of a class of open MBeans, with the specified
{@code name}, {@code openType} and {@code description}.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.
"
      end

      operation 9894274 "OpenMBeanParameterInfoSupport"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code OpenMBeanParameterInfoSupport} instance,
which describes the parameter used in one or more operations or
constructors of a class of open MBeans, with the specified
{@code name}, {@code openType}, {@code description},
and {@code descriptor}.

<p>The {@code descriptor} can contain entries that will define
the values returned by certain methods of this class, as
explained in the <a href=\"package-summary.html#constraints\">
package description</a>.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param descriptor The descriptor for the parameter.  This may be null
which is equivalent to an empty descriptor.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null, or the descriptor entries are invalid as described in the
<a href=\"package-summary.html#constraints\">package
description</a>.

@since 1.6
"
      end

      operation 9894402 "OpenMBeanParameterInfoSupport"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "defaultValue" explicit_type "T"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code OpenMBeanParameterInfoSupport} instance,
which describes the parameter used in one or more operations or
constructors of a class of open MBeans, with the specified
{@code name}, {@code openType}, {@code description} and {@code
defaultValue}.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param defaultValue must be a valid value for the {@code
openType} specified for this parameter; default value not
supported for {@code ArrayType} and {@code TabularType}; can be
null, in which case it means that no default value is set.

@param <T> allows the compiler to check that the {@code defaultValue},
if non-null, has the correct Java type for the given {@code openType}.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.

@throws OpenDataException if {@code defaultValue} is not a
valid value for the specified {@code openType}, or {@code
defaultValue} is non null and {@code openType} is an {@code
ArrayType} or a {@code TabularType}.
"
      end

      operation 9894530 "OpenMBeanParameterInfoSupport"
	public explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "legalValues" explicit_type "T"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs an {@code OpenMBeanParameterInfoSupport} instance,
which describes the parameter used in one or more operations or
constructors of a class of open MBeans, with the specified
{@code name}, {@code openType}, {@code description}, {@code
defaultValue} and {@code legalValues}.</p>

<p>The contents of {@code legalValues} are copied, so subsequent
modifications of the array referenced by {@code legalValues}
have no impact on this {@code OpenMBeanParameterInfoSupport}
instance.</p>

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param defaultValue must be a valid value for the {@code
openType} specified for this parameter; default value not
supported for {@code ArrayType} and {@code TabularType}; can be
null, in which case it means that no default value is set.

@param legalValues each contained value must be valid for the
{@code openType} specified for this parameter; legal values not
supported for {@code ArrayType} and {@code TabularType}; can be
null or empty.

@param <T> allows the compiler to check that the {@code
defaultValue} and {@code legalValues}, if non-null, have the
correct Java type for the given {@code openType}.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.

@throws OpenDataException if {@code defaultValue} is not a
valid value for the specified {@code openType}, or one value in
{@code legalValues} is not valid for the specified {@code
openType}, or {@code defaultValue} is non null and {@code
openType} is an {@code ArrayType} or a {@code TabularType}, or
{@code legalValues} is non null and non empty and {@code
openType} is an {@code ArrayType} or a {@code TabularType}, or
{@code legalValues} is non null and non empty and {@code
defaultValue} is not contained in {@code legalValues}.
"
      end

      operation 9894658 "OpenMBeanParameterInfoSupport"
	public explicit_return_type ""
	nparams 6
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "minValue" type class_ref 194946 // Comparable
	  param inout name "maxValue" type class_ref 194946 // Comparable
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4}<T> ${p4}, ${t5}<T> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code OpenMBeanParameterInfoSupport} instance,
which describes the parameter used in one or more operations or
constructors of a class of open MBeans, with the specified
{@code name}, {@code openType}, {@code description}, {@code
defaultValue}, {@code minValue} and {@code maxValue}.

It is possible to specify minimal and maximal values only for
an open type whose values are {@code Comparable}.

@param name  cannot be a null or empty string.

@param description  cannot be a null or empty string.

@param openType  cannot be null.

@param defaultValue must be a valid value for the {@code
openType} specified for this parameter; default value not
supported for {@code ArrayType} and {@code TabularType}; can be
null, in which case it means that no default value is set.

@param minValue must be valid for the {@code openType}
specified for this parameter; can be null, in which case it
means that no minimal value is set.

@param maxValue must be valid for the {@code openType}
specified for this parameter; can be null, in which case it
means that no maximal value is set.

@param <T> allows the compiler to check that the {@code
defaultValue}, {@code minValue}, and {@code maxValue}, if
non-null, have the correct Java type for the given {@code
openType}.

@throws IllegalArgumentException if {@code name} or {@code
description} are null or empty string, or {@code openType} is
null.

@throws OpenDataException if {@code defaultValue}, {@code
minValue} or {@code maxValue} is not a valid value for the
specified {@code openType}, or {@code defaultValue} is non null
and {@code openType} is an {@code ArrayType} or a {@code
TabularType}, or both {@code minValue} and {@code maxValue} are
non-null and {@code minValue.compareTo(maxValue) > 0} is {@code
true}, or both {@code defaultValue} and {@code minValue} are
non-null and {@code minValue.compareTo(defaultValue) > 0} is
{@code true}, or both {@code defaultValue} and {@code maxValue}
are non-null and {@code defaultValue.compareTo(maxValue) > 0}
is {@code true}.
"
      end

      operation 9894786 "OpenMBeanParameterInfoSupport"
	private explicit_return_type ""
	nparams 7
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "defaultValue" explicit_type "T"
	  param inout name "legalValues" explicit_type "T"
	multiplicity "[]"
	  param inout name "minValue" type class_ref 194946 // Comparable
	  param inout name "maxValue" type class_ref 194946 // Comparable
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5}<T> ${p5}, ${t6}<T> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9894914 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An object serialized in a version of the API before Descriptors were
added to this class will have an empty or null Descriptor.
For consistency with our
behavior in this version, we must replace the object with one
where the Descriptors reflect the same values of openType, defaultValue,
etc.
"
      end

      operation 9895042 "getOpenType"
	public return_type class_ref 490242 // OpenType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the open type for the values of the parameter described
by this {@code OpenMBeanParameterInfoSupport} instance.
"
      end

      operation 9895170 "getDefaultValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value for the parameter described by this
{@code OpenMBeanParameterInfoSupport} instance, if specified,
or {@code null} otherwise.
"
      end

      operation 9895298 "getLegalValues"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable Set of legal values for the parameter
described by this {@code OpenMBeanParameterInfoSupport}
instance, if specified, or {@code null} otherwise.
"
      end

      operation 9895426 "getMinValue"
	public return_type class_ref 194946 // Comparable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimal value for the parameter described by this
{@code OpenMBeanParameterInfoSupport} instance, if specified,
or {@code null} otherwise.
"
      end

      operation 9895554 "getMaxValue"
	public return_type class_ref 194946 // Comparable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximal value for the parameter described by this
{@code OpenMBeanParameterInfoSupport} instance, if specified,
or {@code null} otherwise.
"
      end

      operation 9895682 "hasDefaultValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanParameterInfoSupport} instance specifies a non-null
default value for the described parameter, {@code false}
otherwise.
"
      end

      operation 9895810 "hasLegalValues"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanParameterInfoSupport} instance specifies a non-null
set of legal values for the described parameter, {@code false}
otherwise.
"
      end

      operation 9895938 "hasMinValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanParameterInfoSupport} instance specifies a non-null
minimal value for the described parameter, {@code false}
otherwise.
"
      end

      operation 9896066 "hasMaxValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code
OpenMBeanParameterInfoSupport} instance specifies a non-null
maximal value for the described parameter, {@code false}
otherwise.
"
      end

      operation 9896194 "isValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether {@code obj} is a valid value for the parameter
described by this {@code OpenMBeanParameterInfo} instance.

@param obj the object to be tested.

@return {@code true} if {@code obj} is a valid value
for the parameter described by this
{@code OpenMBeanParameterInfo} instance,
{@code false} otherwise.
"
      end

      operation 9896322 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Commodity methods from java.lang.Object  *** 

<p>Compares the specified {@code obj} parameter with this {@code
OpenMBeanParameterInfoSupport} instance for equality.</p>

<p>Returns {@code true} if and only if all of the following
statements are true:

<ul>
<li>{@code obj} is non null,</li>
<li>{@code obj} also implements the {@code OpenMBeanParameterInfo}
interface,</li>
<li>their names are equal</li>
<li>their open types are equal</li>
<li>their default, min, max and legal values are equal.</li>
</ul>
This ensures that this {@code equals} method works properly for
{@code obj} parameters which are different implementations of
the {@code OpenMBeanParameterInfo} interface.

<p>If {@code obj} also implements {@link DescriptorRead}, then its
{@link DescriptorRead#getDescriptor() getDescriptor()} method must
also return the same value as for this object.</p>

@param obj the object to be compared for equality with this
{@code OpenMBeanParameterInfoSupport} instance.

@return {@code true} if the specified object is equal to this
{@code OpenMBeanParameterInfoSupport} instance.
"
      end

      operation 9896450 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the hash code value for this {@code
OpenMBeanParameterInfoSupport} instance.</p>

<p>The hash code of an {@code OpenMBeanParameterInfoSupport}
instance is the sum of the hash codes of all elements of
information used in {@code equals} comparisons (ie: its name,
its <i>open type</i>, its default, min, max and legal
values, and its Descriptor).

<p>This ensures that {@code t1.equals(t2)} implies that {@code
t1.hashCode()==t2.hashCode()} for any two {@code
OpenMBeanParameterInfoSupport} instances {@code t1} and {@code
t2}, as required by the general contract of the method {@link
Object#hashCode() Object.hashCode()}.

<p>However, note that another instance of a class implementing
the {@code OpenMBeanParameterInfo} interface may be equal to
this {@code OpenMBeanParameterInfoSupport} instance as defined
by {@link #equals(java.lang.Object)}, but may have a different
hash code if it is calculated differently.

<p>As {@code OpenMBeanParameterInfoSupport} instances are
immutable, the hash code for this instance is calculated once,
on the first call to {@code hashCode}, and then the same value
is returned for subsequent calls.

@return the hash code value for this {@code
OpenMBeanParameterInfoSupport} instance
"
      end

      operation 9896578 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this
{@code OpenMBeanParameterInfoSupport} instance.
<p>
The string representation consists of the name of this class (i.e.
{@code javax.management.openmbean.OpenMBeanParameterInfoSupport}),
the string representation of the name and open type of the described
parameter, the string representation of its default, min, max and legal
values and the string representation of its descriptor.
<p>
As {@code OpenMBeanParameterInfoSupport} instances are immutable,
the string representation for this instance is calculated once,
on the first call to {@code toString}, and then the same value
is returned for subsequent calls.

@return a string representation of this
{@code OpenMBeanParameterInfoSupport} instance.
"
      end
    end

    class 1199362 "TabularData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " jmx import


The <tt>TabularData</tt> interface specifies the behavior of a specific type of complex <i>open data</i> objects
which represent <i>tabular data</i> structures.

@since 1.5
"
      operation 9897474 "getTabularType"
	public return_type class_ref 492290 // TabularType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "extends Map
 *** TabularData specific information methods *** 

Returns the <i>tabular type</i> describing this
<tt>TabularData</tt> instance.

@return the tabular type.
"
      end

      operation 9897602 "calculateIndex"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the index that would be used in this <tt>TabularData</tt> instance to refer to the specified
composite data <var>value</var> parameter if it were added to this instance.
This method checks for the type validity of the specified <var>value</var>,
but does not check if the calculated index is already used to refer to a value in this <tt>TabularData</tt> instance.

@param  value                      the composite data value whose index in this
                                   <tt>TabularData</tt> instance is to be calculated;
                                   must be of the same composite type as this instance's row type;
                                   must not be null.

@return the index that the specified <var>value</var> would have in this <tt>TabularData</tt> instance.

@throws NullPointerException       if <var>value</var> is <tt>null</tt>

@throws InvalidOpenTypeException   if <var>value</var> does not conform to this <tt>TabularData</tt> instance's
                                   row type definition.
"
      end

      operation 9897730 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Content information query methods *** 

Returns the number of <tt>CompositeData</tt> values (ie the
number of rows) contained in this <tt>TabularData</tt>
instance.

@return the number of values contained.
"
      end

      operation 9897858 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if the number of <tt>CompositeData</tt>
values (ie the number of rows) contained in this
<tt>TabularData</tt> instance is zero.

@return true if this <tt>TabularData</tt> is empty.
"
      end

      operation 9897986 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains a <tt>CompositeData</tt> value
(ie a row) whose index is the specified <var>key</var>. If <var>key</var> is <tt>null</tt> or does not conform to
this <tt>TabularData</tt> instance's <tt>TabularType</tt> definition, this method simply returns <tt>false</tt>.

@param  key  the index value whose presence in this <tt>TabularData</tt> instance is to be tested.

@return  <tt>true</tt> if this <tt>TabularData</tt> indexes a row value with the specified key.
"
      end

      operation 9898114 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains the specified
<tt>CompositeData</tt> value. If <var>value</var> is <tt>null</tt> or does not conform to
this <tt>TabularData</tt> instance's row type definition, this method simply returns <tt>false</tt>.

@param  value  the row value whose presence in this <tt>TabularData</tt> instance is to be tested.

@return  <tt>true</tt> if this <tt>TabularData</tt> instance contains the specified row value.
"
      end

      operation 9898242 "get"
	public return_type class_ref 492802 // CompositeData
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>CompositeData</tt> value whose index is
<var>key</var>, or <tt>null</tt> if there is no value mapping
to <var>key</var>, in this <tt>TabularData</tt> instance.

@param key the key of the row to return.

@return the value corresponding to <var>key</var>.

@throws NullPointerException if the <var>key</var> is
<tt>null</tt>
@throws InvalidKeyException if the <var>key</var> does not
conform to this <tt>TabularData</tt> instance's *
<tt>TabularType</tt> definition
"
      end

      operation 9898370 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Content modification operations (one element at a time) *** 

Adds <var>value</var> to this <tt>TabularData</tt> instance.
The composite type of <var>value</var> must be the same as this
instance's row type (ie the composite type returned by
<tt>this.getTabularType().{@link TabularType#getRowType
getRowType()}</tt>), and there must not already be an existing
value in this <tt>TabularData</tt> instance whose index is the
same as the one calculated for the <var>value</var> to be
added. The index for <var>value</var> is calculated according
to this <tt>TabularData</tt> instance's <tt>TabularType</tt>
definition (see <tt>TabularType.{@link
TabularType#getIndexNames getIndexNames()}</tt>).

@param  value                      the composite data value to be added as a new row to this <tt>TabularData</tt> instance;
                                   must be of the same composite type as this instance's row type;
                                   must not be null.

@throws NullPointerException       if <var>value</var> is <tt>null</tt>
@throws InvalidOpenTypeException   if <var>value</var> does not conform to this <tt>TabularData</tt> instance's
                                   row type definition.
@throws KeyAlreadyExistsException  if the index for <var>value</var>, calculated according to
                                   this <tt>TabularData</tt> instance's <tt>TabularType</tt> definition
                                   already maps to an existing value in the underlying HashMap.
"
      end

      operation 9898498 "remove"
	public return_type class_ref 492802 // CompositeData
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the <tt>CompositeData</tt> value whose index is <var>key</var> from this <tt>TabularData</tt> instance,
and returns the removed value, or returns <tt>null</tt> if there is no value whose index is <var>key</var>.

@param  key  the index of the value to get in this <tt>TabularData</tt> instance;
             must be valid with this <tt>TabularData</tt> instance's row type definition;
             must not be null.

@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.

@throws NullPointerException  if the <var>key</var> is <tt>null</tt>
@throws InvalidKeyException   if the <var>key</var> does not conform to this <tt>TabularData</tt> instance's
                              <tt>TabularType</tt> definition
"
      end

      operation 9898626 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 492802 // CompositeData
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***   Content modification bulk operations   *** 

Add all the elements in <var>values</var> to this <tt>TabularData</tt> instance.
If any  element in <var>values</var> does not satisfy the constraints defined in {@link #put(CompositeData) <tt>put</tt>},
or if any two elements in <var>values</var> have the same index calculated according to this <tt>TabularData</tt>
instance's <tt>TabularType</tt> definition, then an exception describing the failure is thrown
and no element of <var>values</var> is added,  thus leaving this <tt>TabularData</tt> instance unchanged.

@param  values  the array of composite data values to be added as new rows to this <tt>TabularData</tt> instance;
                if <var>values</var> is <tt>null</tt> or empty, this method returns without doing anything.

@throws NullPointerException       if an element of <var>values</var> is <tt>null</tt>
@throws InvalidOpenTypeException   if an element of <var>values</var> does not conform to
                                   this <tt>TabularData</tt> instance's row type definition
@throws KeyAlreadyExistsException  if the index for an element of <var>values</var>, calculated according to
                                   this <tt>TabularData</tt> instance's <tt>TabularType</tt> definition
                                   already maps to an existing value in this instance,
                                   or two elements of <var>values</var> have the same index.
"
      end

      operation 9898754 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all <tt>CompositeData</tt> values (ie rows) from this <tt>TabularData</tt> instance.
"
      end

      operation 9898882 "keySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***   Collection views of the keys and values   *** 

Returns a set view of the keys (ie the index values) of the
{@code CompositeData} values (ie the rows) contained in this
{@code TabularData} instance. The returned {@code Set} is a
{@code Set<List<?>>} but is declared as a {@code Set<?>} for
compatibility reasons. The returned set can be used to iterate
over the keys.

@return a set view ({@code Set<List<?>>}) of the index values
used in this {@code TabularData} instance.
"
      end

      operation 9899010 "values"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection view of the {@code CompositeData} values
(ie the rows) contained in this {@code TabularData} instance.
The returned {@code Collection} is a {@code Collection<CompositeData>}
but is declared as a {@code Collection<?>} for compatibility reasons.
The returned collection can be used to iterate over the values.

@return a collection view ({@code Collection<CompositeData>})
of the rows contained in this {@code TabularData} instance.
"
      end

      operation 9899138 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Commodity methods from java.lang.Object  *** 

Compares the specified <var>obj</var> parameter with this <code>TabularData</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>TabularData</code> interface,</li>
<li>their row types are equal</li>
<li>their contents (ie index to value mappings) are equal</li>
</ul>
This ensures that this <tt>equals</tt> method works properly for <var>obj</var> parameters which are
different implementations of the <code>TabularData</code> interface.
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>TabularData</code> instance;

@return  <code>true</code> if the specified object is equal to this <code>TabularData</code> instance.
"
      end

      operation 9899266 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>TabularData</code> instance.
<p>
The hash code of a <code>TabularData</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its <i>tabular type</i> and its content, where the content is defined as all the index to value mappings).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>TabularDataSupport</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.

@return  the hash code value for this <code>TabularDataSupport</code> instance
"
      end

      operation 9899394 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>TabularData</code> instance.
<p>
The string representation consists of the name of the implementing class,
and the tabular type of this instance.

@return  a string representation of this <code>TabularData</code> instance
"
      end
    end

    class 1199490 "TabularDataSupport"
      visibility public 
      nactuals 2
      actual class class_ref 130178 // Map
        rank 0 explicit_value ""
      actual class class_ref 130178 // Map
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " jmx import


The <tt>TabularDataSupport</tt> class is the <i>open data</i> class which implements the <tt>TabularData</tt>
and the <tt>Map</tt> interfaces, and which is internally based on a hash map data structure.

@since 1.5

 It would make much more sense to implement
Map<List<?>,CompositeData> here, but unfortunately we cannot for
compatibility reasons.  If we did that, then we would have to
define e.g.
CompositeData remove(Object)
instead of
Object remove(Object).

That would mean that if any existing code subclassed
TabularDataSupport and overrode
Object remove(Object),
it would (a) no longer compile and (b) not actually override
CompositeData remove(Object)
in binaries compiled before the change.
"
      classrelation 3841154 // <realization>
	relation 3841154 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3841154 // <realization>
	  b parent class_ref 1199362 // TabularData
      end

      classrelation 3841282 // <realization>
	relation 3841282 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3841282 // <realization>
	  b parent class_ref 130178 // Map
      end

      classrelation 3841410 // <realization>
	relation 3841410 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3841410 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3841538 // <realization>
	relation 3841538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3841538 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2291330 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 5720150593236309827L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3841666 // dataMap (<unidirectional association>)
	relation 3841666 --->
	  a role_name "dataMap" private
	    comment "
@serial This tabular data instance's contents: a {@link HashMap}

 field cannot be final because of clone method
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object,CompositeData> ${name}${value};
"
	    classrelation_ref 3841666 // dataMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3841794 // tabularType (<unidirectional association>)
	relation 3841794 --->
	  a role_name "tabularType" const_relation private
	    comment "
@serial This tabular data instance's tabular type

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3841794 // tabularType (<unidirectional association>)
	  b parent class_ref 492290 // TabularType
      end

      classrelation 3841922 // indexNamesArray (<unidirectional association>)
	relation 3841922 --->
	  a role_name "indexNamesArray" multiplicity "[]" private
	    comment "
The array of item names that define the index used for rows (convenience field)

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3841922 // indexNamesArray (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9899522 "TabularDataSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "tabularType" type class_ref 492290 // TabularType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Constructors *** 

Creates an empty <tt>TabularDataSupport</tt> instance whose open-type is <var>tabularType</var>,
and whose underlying <tt>HashMap</tt> has a default initial capacity (101) and default load factor (0.75).
<p>
This constructor simply calls <tt>this(tabularType, 101, 0.75f);</tt>

@param  tabularType               the <i>tabular type</i> describing this <tt>TabularData</tt> instance;
                                  cannot be null.

@throws IllegalArgumentException  if the tabular type is null.
"
      end

      operation 9899650 "TabularDataSupport"
	public explicit_return_type ""
	nparams 3
	  param inout name "tabularType" type class_ref 492290 // TabularType
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty <tt>TabularDataSupport</tt> instance whose open-type is <var>tabularType</var>,
and whose underlying <tt>HashMap</tt> has the specified initial capacity and load factor.

@param  tabularType               the <i>tabular type</i> describing this <tt>TabularData</tt> instance;
                          cannot be null.

@param  initialCapacity   the initial capacity of the HashMap.

@param  loadFactor        the load factor of the HashMap

@throws IllegalArgumentException  if the initial capacity is less than zero,
                                  or the load factor is nonpositive,
                                  or the tabular type is null.
"
      end

      operation 9899778 "getTabularType"
	public return_type class_ref 492290 // TabularType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** TabularData specific information methods *** 

Returns the <i>tabular type</i> describing this <tt>TabularData</tt> instance.
"
      end

      operation 9899906 "calculateIndex"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the index that would be used in this <tt>TabularData</tt> instance to refer to the specified
composite data <var>value</var> parameter if it were added to this instance.
This method checks for the type validity of the specified <var>value</var>,
but does not check if the calculated index is already used to refer to a value in this <tt>TabularData</tt> instance.

@param  value                      the composite data value whose index in this
                                   <tt>TabularData</tt> instance is to be calculated;
                                   must be of the same composite type as this instance's row type;
                                   must not be null.

@return the index that the specified <var>value</var> would have in this <tt>TabularData</tt> instance.

@throws NullPointerException       if <var>value</var> is <tt>null</tt>.

@throws InvalidOpenTypeException   if <var>value</var> does not conform to this <tt>TabularData</tt> instance's
                                   row type definition.
"
      end

      operation 9900034 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Content information query methods *** 

Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains a <tt>CompositeData</tt> value
(ie a row) whose index is the specified <var>key</var>. If <var>key</var> cannot be cast to a one dimension array
of Object instances, this method simply returns <tt>false</tt>; otherwise it returns the the result of the call to
<tt>this.containsKey((Object[]) key)</tt>.

@param  key  the index value whose presence in this <tt>TabularData</tt> instance is to be tested.

@return  <tt>true</tt> if this <tt>TabularData</tt> indexes a row value with the specified key.
"
      end

      operation 9900162 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains a <tt>CompositeData</tt> value
(ie a row) whose index is the specified <var>key</var>. If <var>key</var> is <tt>null</tt> or does not conform to
this <tt>TabularData</tt> instance's <tt>TabularType</tt> definition, this method simply returns <tt>false</tt>.

@param  key  the index value whose presence in this <tt>TabularData</tt> instance is to be tested.

@return  <tt>true</tt> if this <tt>TabularData</tt> indexes a row value with the specified key.
"
      end

      operation 9900290 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains the specified
<tt>CompositeData</tt> value. If <var>value</var> is <tt>null</tt> or does not conform to
this <tt>TabularData</tt> instance's row type definition, this method simply returns <tt>false</tt>.

@param  value  the row value whose presence in this <tt>TabularData</tt> instance is to be tested.

@return  <tt>true</tt> if this <tt>TabularData</tt> instance contains the specified row value.
"
      end

      operation 9900418 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains the specified
value.

@param  value  the row value whose presence in this <tt>TabularData</tt> instance is to be tested.

@return  <tt>true</tt> if this <tt>TabularData</tt> instance contains the specified row value.
"
      end

      operation 9900546 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method simply calls <tt>get((Object[]) key)</tt>.

@throws NullPointerException  if the <var>key</var> is <tt>null</tt>
@throws ClassCastException    if the <var>key</var> is not of the type <tt>Object[]</tt>
@throws InvalidKeyException   if the <var>key</var> does not conform to this <tt>TabularData</tt> instance's
                              <tt>TabularType</tt> definition
"
      end

      operation 9900674 "get"
	public return_type class_ref 492802 // CompositeData
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>CompositeData</tt> value whose index is
<var>key</var>, or <tt>null</tt> if there is no value mapping
to <var>key</var>, in this <tt>TabularData</tt> instance.

@param key the index of the value to get in this
<tt>TabularData</tt> instance; * must be valid with this
<tt>TabularData</tt> instance's row type definition; * must not
be null.

@return the value corresponding to <var>key</var>.

@throws NullPointerException  if the <var>key</var> is <tt>null</tt>
@throws InvalidKeyException   if the <var>key</var> does not conform to this <tt>TabularData</tt> instance's
                              <tt>TabularType</tt> type definition.
"
      end

      operation 9900802 "put"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Content modification operations (one element at a time) *** 

This method simply calls <tt>put((CompositeData) value)</tt> and
therefore ignores its <var>key</var> parameter which can be <tt>null</tt>.

@param key an ignored parameter.
@param value the {@link CompositeData} to put.

@return the value which is put

@throws NullPointerException  if the <var>value</var> is <tt>null</tt>
@throws ClassCastException if the <var>value</var> is not of
the type <tt>CompositeData</tt>
@throws InvalidOpenTypeException if the <var>value</var> does
not conform to this <tt>TabularData</tt> instance's
<tt>TabularType</tt> definition
@throws KeyAlreadyExistsException if the key for the
<var>value</var> parameter, calculated according to this
<tt>TabularData</tt> instance's <tt>TabularType</tt> definition
already maps to an existing value
"
      end

      operation 9900930 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9901058 "internalPut"
	private return_type class_ref 492802 // CompositeData
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9901186 "remove"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method simply calls <tt>remove((Object[]) key)</tt>.

@param key an <tt>Object[]</tt> representing the key to remove.

@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.

@throws NullPointerException  if the <var>key</var> is <tt>null</tt>
@throws ClassCastException    if the <var>key</var> is not of the type <tt>Object[]</tt>
@throws InvalidKeyException   if the <var>key</var> does not conform to this <tt>TabularData</tt> instance's
                              <tt>TabularType</tt> definition
"
      end

      operation 9901314 "remove"
	public return_type class_ref 492802 // CompositeData
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the <tt>CompositeData</tt> value whose index is <var>key</var> from this <tt>TabularData</tt> instance,
and returns the removed value, or returns <tt>null</tt> if there is no value whose index is <var>key</var>.

@param  key  the index of the value to get in this <tt>TabularData</tt> instance;
             must be valid with this <tt>TabularData</tt> instance's row type definition;
             must not be null.

@return previous value associated with specified key, or <tt>null</tt>
        if there was no mapping for key.

@throws NullPointerException  if the <var>key</var> is <tt>null</tt>
@throws InvalidKeyException   if the <var>key</var> does not conform to this <tt>TabularData</tt> instance's
                              <tt>TabularType</tt> definition
"
      end

      operation 9901442 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***   Content modification bulk operations   *** 

Add all the values contained in the specified map <var>t</var>
to this <tt>TabularData</tt> instance.  This method converts
the collection of values contained in this map into an array of
<tt>CompositeData</tt> values, if possible, and then call the
method <tt>putAll(CompositeData[])</tt>. Note that the keys
used in the specified map <var>t</var> are ignored. This method
allows, for example to add the content of another
<tt>TabularData</tt> instance with the same row type (but
possibly different index names) into this instance.

@param t the map whose values are to be added as new rows to
this <tt>TabularData</tt> instance; if <var>t</var> is
<tt>null</tt> or empty, this method returns without doing
anything.

@throws NullPointerException if a value in <var>t</var> is
<tt>null</tt>.
@throws ClassCastException if a value in <var>t</var> is not an
instance of <tt>CompositeData</tt>.
@throws InvalidOpenTypeException if a value in <var>t</var>
does not conform to this <tt>TabularData</tt> instance's row
type definition.
@throws KeyAlreadyExistsException if the index for a value in
<var>t</var>, calculated according to this
<tt>TabularData</tt> instance's <tt>TabularType</tt> definition
already maps to an existing value in this instance, or two
values in <var>t</var> have the same index.
"
      end

      operation 9901570 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 492802 // CompositeData
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add all the elements in <var>values</var> to this
<tt>TabularData</tt> instance.  If any element in
<var>values</var> does not satisfy the constraints defined in
{@link #put(CompositeData) <tt>put</tt>}, or if any two
elements in <var>values</var> have the same index calculated
according to this <tt>TabularData</tt> instance's
<tt>TabularType</tt> definition, then an exception describing
the failure is thrown and no element of <var>values</var> is
added, thus leaving this <tt>TabularData</tt> instance
unchanged.

@param values the array of composite data values to be added as
new rows to this <tt>TabularData</tt> instance; if
<var>values</var> is <tt>null</tt> or empty, this method
returns without doing anything.

@throws NullPointerException if an element of <var>values</var>
is <tt>null</tt>
@throws InvalidOpenTypeException if an element of
<var>values</var> does not conform to this
<tt>TabularData</tt> instance's row type definition (ie its
<tt>TabularType</tt> definition)
@throws KeyAlreadyExistsException if the index for an element
of <var>values</var>, calculated according to this
<tt>TabularData</tt> instance's <tt>TabularType</tt> definition
already maps to an existing value in this instance, or two
elements of <var>values</var> have the same index
"
      end

      operation 9901698 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all rows from this <code>TabularDataSupport</code> instance.
"
      end

      operation 9901826 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Informational methods from java.util.Map  *** 

Returns the number of rows in this <code>TabularDataSupport</code> instance.

@return the number of rows in this <code>TabularDataSupport</code> instance.
"
      end

      operation 9901954 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this <code>TabularDataSupport</code> instance contains no rows.

@return <tt>true</tt> if this <code>TabularDataSupport</code> instance contains no rows.
"
      end

      operation 9902082 "keySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Collection views from java.util.Map  *** 

Returns a set view of the keys contained in the underlying map of this
{@code TabularDataSupport} instance used to index the rows.
Each key contained in this {@code Set} is an unmodifiable {@code List<?>}
so the returned set view is a {@code Set<List<?>>} but is declared as a
{@code Set<Object>} for compatibility reasons.
The set is backed by the underlying map of this
{@code TabularDataSupport} instance, so changes to the
{@code TabularDataSupport} instance are reflected in the
set, and vice-versa.

The set supports element removal, which removes the corresponding
row from this {@code TabularDataSupport} instance, via the
{@link Iterator#remove}, {@link Set#remove}, {@link Set#removeAll},
{@link Set#retainAll}, and {@link Set#clear} operations. It does
 not support the {@link Set#add} or {@link Set#addAll} operations.

@return a set view ({@code Set<List<?>>}) of the keys used to index
the rows of this {@code TabularDataSupport} instance.
"
      end

      operation 9902210 "values"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns a collection view of the rows contained in this
{@code TabularDataSupport} instance. The returned {@code Collection}
is a {@code Collection<CompositeData>} but is declared as a
{@code Collection<Object>} for compatibility reasons.
The returned collection can be used to iterate over the values.
The collection is backed by the underlying map, so changes to the
{@code TabularDataSupport} instance are reflected in the collection,
and vice-versa.

The collection supports element removal, which removes the corresponding
index to row mapping from this {@code TabularDataSupport} instance, via
the {@link Iterator#remove}, {@link Collection#remove},
{@link Collection#removeAll}, {@link Collection#retainAll},
and {@link Collection#clear} operations. It does not support
the {@link Collection#add} or {@link Collection#addAll} operations.

@return a collection view ({@code Collection<CompositeData>}) of
the values contained in this {@code TabularDataSupport} instance.
"
      end

      operation 9902338 "entrySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<Object,Object>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns a collection view of the index to row mappings
contained in this {@code TabularDataSupport} instance.
Each element in the returned collection is
a {@code Map.Entry<List<?>,CompositeData>} but
is declared as a {@code Map.Entry<Object,Object>}
for compatibility reasons. Each of the map entry
keys is an unmodifiable {@code List<?>}.
The collection is backed by the underlying map of this
{@code TabularDataSupport} instance, so changes to the
{@code TabularDataSupport} instance are reflected in
the collection, and vice-versa.
The collection supports element removal, which removes
the corresponding mapping from the map, via the
{@link Iterator#remove}, {@link Collection#remove},
{@link Collection#removeAll}, {@link Collection#retainAll},
and {@link Collection#clear} operations. It does not support
the {@link Collection#add} or {@link Collection#addAll}
operations.
<p>
<b>IMPORTANT NOTICE</b>: Do not use the {@code setValue} method of the
{@code Map.Entry} elements contained in the returned collection view.
Doing so would corrupt the index to row mappings contained in this
{@code TabularDataSupport} instance.

@return a collection view ({@code Set<Map.Entry<List<?>,CompositeData>>})
of the mappings contained in this map.
@see java.util.Map.Entry
"
      end

      operation 9902466 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ***  Commodity methods from java.lang.Object  *** 

Returns a clone of this <code>TabularDataSupport</code> instance:
the clone is obtained by calling <tt>super.clone()</tt>, and then cloning the underlying map.
Only a shallow clone of the underlying map is made, i.e. no cloning of the indexes and row values is made as they are immutable.

 We cannot use covariance here and return TabularDataSupport
because this would fail with existing code that subclassed
TabularDataSupport and overrode Object clone().  It would not
override the new clone().  "
      end

      operation 9902594 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified <var>obj</var> parameter with this <code>TabularDataSupport</code> instance for equality.
<p>
Returns <tt>true</tt> if and only if all of the following statements are true:
<ul>
<li><var>obj</var> is non null,</li>
<li><var>obj</var> also implements the <code>TabularData</code> interface,</li>
<li>their tabular types are equal</li>
<li>their contents (ie all CompositeData values) are equal.</li>
</ul>
This ensures that this <tt>equals</tt> method works properly for <var>obj</var> parameters which are
different implementations of the <code>TabularData</code> interface.
<br>&nbsp;
@param  obj  the object to be compared for equality with this <code>TabularDataSupport</code> instance;

@return  <code>true</code> if the specified object is equal to this <code>TabularDataSupport</code> instance.
"
      end

      operation 9902722 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>TabularDataSupport</code> instance.
<p>
The hash code of a <code>TabularDataSupport</code> instance is the sum of the hash codes
of all elements of information used in <code>equals</code> comparisons
(ie: its <i>tabular type</i> and its content, where the content is defined as all the CompositeData values).
<p>
This ensures that <code> t1.equals(t2) </code> implies that <code> t1.hashCode()==t2.hashCode() </code>
for any two <code>TabularDataSupport</code> instances <code>t1</code> and <code>t2</code>,
as required by the general contract of the method
{@link Object#hashCode() Object.hashCode()}.
<p>
However, note that another instance of a class implementing the <code>TabularData</code> interface
may be equal to this <code>TabularDataSupport</code> instance as defined by {@link #equals},
but may have a different hash code if it is calculated differently.

@return  the hash code value for this <code>TabularDataSupport</code> instance
"
      end

      operation 9902850 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>TabularDataSupport</code> instance.
<p>
The string representation consists of the name of this class (ie <code>javax.management.openmbean.TabularDataSupport</code>),
the string representation of the tabular type of this instance, and the string representation of the contents
(ie list the key=value mappings as returned by a call to
<tt>dataMap.</tt>{@link java.util.HashMap#toString() toString()}).

@return  a string representation of this <code>TabularDataSupport</code> instance
"
      end

      operation 9902978 "internalCalculateIndex"
	private return_type class_ref 175362 // List
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** TabularDataSupport internal utility methods *** 

Returns the index for value, assuming value is valid for this <tt>TabularData</tt> instance
(ie value is not null, and its composite type is equal to row type).

The index is a List, and not an array, so that an index.equals(otherIndex) call will actually compare contents,
not just the objects references as is done for an array object.

The returned List is unmodifiable so that once a row has been put into the dataMap, its index cannot be modified,
for example by a user that would attempt to modify an index contained in the Set returned by keySet().
"
      end

      operation 9903106 "checkKeyType"
	private explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified key is valid for this <tt>TabularData</tt> instance.

@throws  NullPointerException
@throws  InvalidOpenTypeException
"
      end

      operation 9903234 "checkValueType"
	private explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks the specified value's type is valid for this <tt>TabularData</tt> instance
(ie value is not null, and its composite type is equal to row type).

@throws  NullPointerException
@throws  InvalidOpenTypeException
"
      end

      operation 9903362 "checkValueAndIndex"
	private return_type class_ref 175362 // List
	nparams 1
	  param inout name "value" type class_ref 492802 // CompositeData
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified value can be put (ie added) in this <tt>TabularData</tt> instance
(ie value is not null, its composite type is equal to row type, and its index is not already used),
and returns the index calculated for this value.

The index is a List, and not an array, so that an index.equals(otherIndex) call will actually compare contents,
not just the objects references as is done for an array object.

@throws  NullPointerException
@throws  InvalidOpenTypeException
@throws  KeyAlreadyExistsException
"
      end

      operation 9903490 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link TabularDataSupport} from an {@link ObjectInputStream}.
"
      end
    end
  end

  deploymentview 173058 "openmbean"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 862210 "OpenType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.management.Descriptor;
import javax.management.ImmutableDescriptor;
${definition}"
      associated_elems
	class_ref 490242 // OpenType
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 862338 "ArrayType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamException;
import java.lang.reflect.Array;
${definition}"
      associated_elems
	class_ref 491778 // ArrayType
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 862466 "CompositeData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
${definition}"
      associated_elems
	class_ref 492802 // CompositeData
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 862594 "CompositeDataInvocationHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.MXBeanLookup;
import com.sun.jmx.mbeanserver.MXBeanMapping;
import com.sun.jmx.mbeanserver.MXBeanMappingFactory;
import com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
${definition}"
      associated_elems
	class_ref 1197442 // CompositeDataInvocationHandler
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 862722 "CompositeDataSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.TreeSet;
${definition}"
      associated_elems
	class_ref 1197570 // CompositeDataSupport
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 862850 "CompositeDataView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1197698 // CompositeDataView
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 862978 "CompositeType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import java.util.TreeMap;
import java.util.Collections;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 492546 // CompositeType
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 863106 "InvalidKeyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1197826 // InvalidKeyException
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 863234 "InvalidOpenTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1197954 // InvalidOpenTypeException
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 863362 "KeyAlreadyExistsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1198082 // KeyAlreadyExistsException
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 863490 "OpenDataException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.JMException;
${definition}"
      associated_elems
	class_ref 490498 // OpenDataException
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 863618 "OpenMBeanParameterInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import java.lang.Comparable;
${definition}"
      associated_elems
	class_ref 1192194 // OpenMBeanParameterInfo
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 863746 "OpenMBeanAttributeInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1198210 // OpenMBeanAttributeInfo
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 863874 "OpenMBeanAttributeInfoSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.management.Descriptor;
import javax.management.DescriptorRead;
import javax.management.ImmutableDescriptor;
import javax.management.MBeanAttributeInfo;
import com.sun.jmx.remote.util.EnvHelp;
import sun.reflect.misc.MethodUtil;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 1198338 // OpenMBeanAttributeInfoSupport
      end
      comment "Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864002 "OpenMBeanConstructorInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.MBeanParameterInfo;
${definition}"
      associated_elems
	class_ref 1198466 // OpenMBeanConstructorInfo
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864130 "OpenMBeanConstructorInfoSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import javax.management.Descriptor;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanParameterInfo;
${definition}"
      associated_elems
	class_ref 1198594 // OpenMBeanConstructorInfoSupport
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864258 "OpenMBeanInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanNotificationInfo;
${definition}"
      associated_elems
	class_ref 1198722 // OpenMBeanInfo
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864386 "OpenMBeanInfoSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import javax.management.Descriptor;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
${definition}"
      associated_elems
	class_ref 1198850 // OpenMBeanInfoSupport
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864514 "OpenMBeanOperationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.MBeanParameterInfo;
${definition}"
      associated_elems
	class_ref 1198978 // OpenMBeanOperationInfo
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864642 "OpenMBeanOperationInfoSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import javax.management.Descriptor;
import javax.management.ImmutableDescriptor;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
${definition}"
      associated_elems
	class_ref 1199106 // OpenMBeanOperationInfoSupport
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864770 "OpenMBeanParameterInfoSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import javax.management.Descriptor;
import javax.management.DescriptorRead;
import javax.management.ImmutableDescriptor;
import javax.management.MBeanParameterInfo;
import static javax.management.openmbean.OpenMBeanAttributeInfoSupport.*;
${definition}"
      associated_elems
	class_ref 1199234 // OpenMBeanParameterInfoSupport
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 864898 "SimpleType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.ObjectStreamException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 1197314 // SimpleType
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 865026 "TabularData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import java.util.Collection;
${definition}"
      associated_elems
	class_ref 1199362 // TabularData
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 865154 "TabularDataSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.mbeanserver.Util;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.security.AccessController;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1199490 // TabularDataSupport
      end
      comment "Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 865282 "TabularType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
${definition}"
      associated_elems
	class_ref 492290 // TabularType
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
