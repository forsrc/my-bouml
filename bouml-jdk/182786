format 222
"activation" // jdk1.8::java::rmi::activation
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/rmi/activation/"
  java_package "java.rmi.activation"
  classview 175490 "activation"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1007490 "Activatable"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Activatable</code> class provides support for remote
objects that require persistent access over time and that
can be activated by the system.

<p>For the constructors and static <code>exportObject</code> methods,
the stub for a remote object being exported is obtained as described in
{@link java.rmi.server.UnicastRemoteObject}.

<p>An attempt to serialize explicitly an instance of this class will
fail.

@author      Ann Wollrath
@since       1.2
@serial      exclude
"
      classrelation 3325314 // <generalisation>
	relation 3325314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3325314 // <generalisation>
	  b parent class_ref 1007618 // RemoteServer
      end

      classrelation 3325442 // id (<unidirectional association>)
	relation 3325442 --->
	  a role_name "id" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3325442 // id (<unidirectional association>)
	  b parent class_ref 1007874 // ActivationID
      end

      attribute 1834114 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3120617863591563455L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7883138 "Activatable"
	protected explicit_return_type ""
	nparams 4
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	  param inout name "restart" explicit_type "boolean"
	  param in name "port" explicit_type "int"
	nexceptions 2
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an activatable remote object by registering
an activation descriptor (with the specified location, data, and
restart mode) for this object, and exporting the object with the
specified port.

<p><strong>Note:</strong> Using the <code>Activatable</code>
constructors that both register and export an activatable remote
object is strongly discouraged because the actions of registering
and exporting the remote object are <i>not</i> guaranteed to be
atomic.  Instead, an application should register an activation
descriptor and export a remote object separately, so that exceptions
can be handled properly.

<p>This method invokes the {@link
#exportObject(Remote,String,MarshalledObject,boolean,int)
exportObject} method with this object, and the specified location,
data, restart mode, and port.  Subsequent calls to {@link #getID}
will return the activation identifier returned from the call to
<code>exportObject</code>.

@param location the location for classes for this object
@param data the object's initialization data
@param port the port on which the object is exported (an anonymous
port is used if port=0)
@param restart if true, the object is restarted (reactivated) when
either the activator is restarted or the object's activation group
is restarted after an unexpected crash; if false, the object is only
activated on demand.  Specifying <code>restart</code> to be
<code>true</code> does not force an initial immediate activation of
a newly registered object;  initial activation is lazy.
@exception ActivationException if object registration fails.
@exception RemoteException if either of the following fails:
a) registering the object with the activation system or b) exporting
the object to the RMI runtime.
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation.
@since 1.2
"
      end

      operation 7883266 "Activatable"
	protected explicit_return_type ""
	nparams 6
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	  param inout name "restart" explicit_type "boolean"
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 504834 // RMIClientSocketFactory
	  param inout name "ssf" type class_ref 504962 // RMIServerSocketFactory
	nexceptions 2
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an activatable remote object by registering
an activation descriptor (with the specified location, data, and
restart mode) for this object, and exporting the object with the
specified port, and specified client and server socket factories.

<p><strong>Note:</strong> Using the <code>Activatable</code>
constructors that both register and export an activatable remote
object is strongly discouraged because the actions of registering
and exporting the remote object are <i>not</i> guaranteed to be
atomic.  Instead, an application should register an activation
descriptor and export a remote object separately, so that exceptions
can be handled properly.

<p>This method invokes the {@link
#exportObject(Remote,String,MarshalledObject,boolean,int,RMIClientSocketFactory,RMIServerSocketFactory)
exportObject} method with this object, and the specified location,
data, restart mode, port, and client and server socket factories.
Subsequent calls to {@link #getID} will return the activation
identifier returned from the call to <code>exportObject</code>.

@param location the location for classes for this object
@param data the object's initialization data
@param restart if true, the object is restarted (reactivated) when
either the activator is restarted or the object's activation group
is restarted after an unexpected crash; if false, the object is only
activated on demand.  Specifying <code>restart</code> to be
<code>true</code> does not force an initial immediate activation of
a newly registered object;  initial activation is lazy.
@param port the port on which the object is exported (an anonymous
port is used if port=0)
@param csf the client-side socket factory for making calls to the
remote object
@param ssf the server-side socket factory for receiving remote calls
@exception ActivationException if object registration fails.
@exception RemoteException if either of the following fails:
a) registering the object with the activation system or b) exporting
the object to the RMI runtime.
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation.
@since 1.2
"
      end

      operation 7883394 "Activatable"
	protected explicit_return_type ""
	nparams 2
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor used to activate/export the object on a specified
port. An \"activatable\" remote object must have a constructor that
takes two arguments: <ul>
<li>the object's activation identifier (<code>ActivationID</code>), and
<li>the object's initialization data (a <code>MarshalledObject</code>).
</ul><p>

A concrete subclass of this class must call this constructor when it is
<i>activated</i> via the two parameter constructor described above. As
a side-effect of construction, the remote object is \"exported\"
to the RMI runtime (on the specified <code>port</code>) and is
available to accept incoming calls from clients.

@param id activation identifier for the object
@param port the port number on which the object is exported
@exception RemoteException if exporting the object to the RMI
runtime fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7883522 "Activatable"
	protected explicit_return_type ""
	nparams 4
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 504834 // RMIClientSocketFactory
	  param inout name "ssf" type class_ref 504962 // RMIServerSocketFactory
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor used to activate/export the object on a specified
port. An \"activatable\" remote object must have a constructor that
takes two arguments: <ul>
<li>the object's activation identifier (<code>ActivationID</code>), and
<li>the object's initialization data (a <code>MarshalledObject</code>).
</ul><p>

A concrete subclass of this class must call this constructor when it is
<i>activated</i> via the two parameter constructor described above. As
a side-effect of construction, the remote object is \"exported\"
to the RMI runtime (on the specified <code>port</code>) and is
available to accept incoming calls from clients.

@param id activation identifier for the object
@param port the port number on which the object is exported
@param csf the client-side socket factory for making calls to the
remote object
@param ssf the server-side socket factory for receiving remote calls
@exception RemoteException if exporting the object to the RMI
runtime fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7883650 "getID"
	protected return_type class_ref 1007874 // ActivationID
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object's activation identifier.  The method is
protected so that only subclasses can obtain an object's
identifier.
@return the object's activation identifier
@since 1.2
"
      end

      operation 7883778 "register"
	class_operation public return_type class_ref 207106 // Remote
	nparams 1
	  param inout name "desc" type class_ref 1008130 // ActivationDesc
	nexceptions 3
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register an object descriptor for an activatable remote
object so that is can be activated on demand.

@param desc  the object's descriptor
@return the stub for the activatable remote object
@exception UnknownGroupException if group id in <code>desc</code>
is not registered with the activation system
@exception ActivationException if activation system is not running
@exception RemoteException if remote call fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7883906 "inactive"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "id" type class_ref 1007874 // ActivationID
	nexceptions 3
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the system that the object with the corresponding activation
<code>id</code> is currently inactive. If the object is currently
active, the object is \"unexported\" from the RMI runtime (only if
there are no pending or in-progress calls)
so the that it can no longer receive incoming calls. This call
informs this VM's ActivationGroup that the object is inactive,
that, in turn, informs its ActivationMonitor. If this call
completes successfully, a subsequent activate request to the activator
will cause the object to reactivate. The operation may still
succeed if the object is considered active but has already
unexported itself.

@param id the object's activation identifier
@return true if the operation succeeds (the operation will
succeed if the object in currently known to be active and is
either already unexported or is currently exported and has no
pending/executing calls); false is returned if the object has
pending/executing calls in which case it cannot be deactivated
@exception UnknownObjectException if object is not known (it may
already be inactive)
@exception ActivationException if group is not active
@exception RemoteException if call informing monitor fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7884034 "unregister"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "id" type class_ref 1007874 // ActivationID
	nexceptions 3
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Revokes previous registration for the activation descriptor
associated with <code>id</code>. An object can no longer be
activated via that <code>id</code>.

@param id the object's activation identifier
@exception UnknownObjectException if object (<code>id</code>) is unknown
@exception ActivationException if activation system is not running
@exception RemoteException if remote call to activation system fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7884162 "exportObject"
	class_operation public return_type class_ref 1007874 // ActivationID
	nparams 5
	  param inout name "obj" type class_ref 207106 // Remote
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	  param inout name "restart" explicit_type "boolean"
	  param in name "port" explicit_type "int"
	nexceptions 2
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an activation descriptor (with the specified location,
data, and restart mode) for the specified object, and exports that
object with the specified port.

<p><strong>Note:</strong> Using this method (as well as the
<code>Activatable</code> constructors that both register and export
an activatable remote object) is strongly discouraged because the
actions of registering and exporting the remote object are
<i>not</i> guaranteed to be atomic.  Instead, an application should
register an activation descriptor and export a remote object
separately, so that exceptions can be handled properly.

<p>This method invokes the {@link
#exportObject(Remote,String,MarshalledObject,boolean,int,RMIClientSocketFactory,RMIServerSocketFactory)
exportObject} method with the specified object, location, data,
restart mode, and port, and <code>null</code> for both client and
server socket factories, and then returns the resulting activation
identifier.

@param obj the object being exported
@param location the object's code location
@param data the object's bootstrapping data
@param restart if true, the object is restarted (reactivated) when
either the activator is restarted or the object's activation group
is restarted after an unexpected crash; if false, the object is only
activated on demand.  Specifying <code>restart</code> to be
<code>true</code> does not force an initial immediate activation of
a newly registered object;  initial activation is lazy.
@param port the port on which the object is exported (an anonymous
port is used if port=0)
@return the activation identifier obtained from registering the
descriptor, <code>desc</code>, with the activation system
the wrong group
@exception ActivationException if activation group is not active
@exception RemoteException if object registration or export fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7884290 "exportObject"
	class_operation public return_type class_ref 1007874 // ActivationID
	nparams 7
	  param inout name "obj" type class_ref 207106 // Remote
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	  param inout name "restart" explicit_type "boolean"
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 504834 // RMIClientSocketFactory
	  param inout name "ssf" type class_ref 504962 // RMIServerSocketFactory
	nexceptions 2
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an activation descriptor (with the specified location,
data, and restart mode) for the specified object, and exports that
object with the specified port, and the specified client and server
socket factories.

<p><strong>Note:</strong> Using this method (as well as the
<code>Activatable</code> constructors that both register and export
an activatable remote object) is strongly discouraged because the
actions of registering and exporting the remote object are
<i>not</i> guaranteed to be atomic.  Instead, an application should
register an activation descriptor and export a remote object
separately, so that exceptions can be handled properly.

<p>This method first registers an activation descriptor for the
specified object as follows. It obtains the activation system by
invoking the method {@link ActivationGroup#getSystem
ActivationGroup.getSystem}.  This method then obtains an {@link
ActivationID} for the object by invoking the activation system's
{@link ActivationSystem#registerObject registerObject} method with
an {@link ActivationDesc} constructed with the specified object's
class name, and the specified location, data, and restart mode.  If
an exception occurs obtaining the activation system or registering
the activation descriptor, that exception is thrown to the caller.

<p>Next, this method exports the object by invoking the {@link
#exportObject(Remote,ActivationID,int,RMIClientSocketFactory,RMIServerSocketFactory)
exportObject} method with the specified remote object, the
activation identifier obtained from registration, the specified
port, and the specified client and server socket factories.  If an
exception occurs exporting the object, this method attempts to
unregister the activation identifier (obtained from registration) by
invoking the activation system's {@link
ActivationSystem#unregisterObject unregisterObject} method with the
activation identifier.  If an exception occurs unregistering the
identifier, that exception is ignored, and the original exception
that occurred exporting the object is thrown to the caller.

<p>Finally, this method invokes the {@link
ActivationGroup#activeObject activeObject} method on the activation
group in this VM with the activation identifier and the specified
remote object, and returns the activation identifier to the caller.

@param obj the object being exported
@param location the object's code location
@param data the object's bootstrapping data
@param restart if true, the object is restarted (reactivated) when
either the activator is restarted or the object's activation group
is restarted after an unexpected crash; if false, the object is only
activated on demand.  Specifying <code>restart</code> to be
<code>true</code> does not force an initial immediate activation of
a newly registered object;  initial activation is lazy.
@param port the port on which the object is exported (an anonymous
port is used if port=0)
@param csf the client-side socket factory for making calls to the
remote object
@param ssf the server-side socket factory for receiving remote calls
@return the activation identifier obtained from registering the
descriptor with the activation system
@exception ActivationException if activation group is not active
@exception RemoteException if object registration or export fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7884418 "exportObject"
	class_operation public return_type class_ref 207106 // Remote
	nparams 3
	  param inout name "obj" type class_ref 207106 // Remote
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Export the activatable remote object to the RMI runtime to make
the object available to receive incoming calls. The object is
exported on an anonymous port, if <code>port</code> is zero. <p>

During activation, this <code>exportObject</code> method should
be invoked explicitly by an \"activatable\" object, that does not
extend the <code>Activatable</code> class. There is no need for objects
that do extend the <code>Activatable</code> class to invoke this
method directly because the object is exported during construction.

@return the stub for the activatable remote object
@param obj the remote object implementation
@param id the object's  activation identifier
@param port the port on which the object is exported (an anonymous
port is used if port=0)
@exception RemoteException if object export fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7884546 "exportObject"
	class_operation public return_type class_ref 207106 // Remote
	nparams 5
	  param inout name "obj" type class_ref 207106 // Remote
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 504834 // RMIClientSocketFactory
	  param inout name "ssf" type class_ref 504962 // RMIServerSocketFactory
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Export the activatable remote object to the RMI runtime to make
the object available to receive incoming calls. The object is
exported on an anonymous port, if <code>port</code> is zero. <p>

During activation, this <code>exportObject</code> method should
be invoked explicitly by an \"activatable\" object, that does not
extend the <code>Activatable</code> class. There is no need for objects
that do extend the <code>Activatable</code> class to invoke this
method directly because the object is exported during construction.

@return the stub for the activatable remote object
@param obj the remote object implementation
@param id the object's  activation identifier
@param port the port on which the object is exported (an anonymous
port is used if port=0)
@param csf the client-side socket factory for making calls to the
remote object
@param ssf the server-side socket factory for receiving remote calls
@exception RemoteException if object export fails
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7884674 "unexportObject"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "obj" type class_ref 207106 // Remote
	  param inout name "force" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 207362 // NoSuchObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the remote object, obj, from the RMI runtime. If
successful, the object can no longer accept incoming RMI calls.
If the force parameter is true, the object is forcibly unexported
even if there are pending calls to the remote object or the
remote object still has calls in progress.  If the force
parameter is false, the object is only unexported if there are
no pending or in progress calls to the object.

@param obj the remote object to be unexported
@param force if true, unexports the object even if there are
pending or in-progress calls; if false, only unexports the object
if there are no pending or in-progress calls
@return true if operation is successful, false otherwise
@exception NoSuchObjectException if the remote object is not
currently exported
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7884802 "exportObject"
	class_operation private return_type class_ref 207106 // Remote
	nparams 2
	  param inout name "obj" type class_ref 207106 // Remote
	  param inout name "sref" explicit_type "ActivatableServerRef"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports the specified object using the specified server ref.
"
      end
    end

    class 1007874 "ActivationID"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Activation makes use of special identifiers to denote remote
objects that can be activated over time. An activation identifier
(an instance of the class <code>ActivationID</code>) contains several
pieces of information needed for activating an object:
<ul>
<li> a remote reference to the object's activator (a {@link
java.rmi.server.RemoteRef RemoteRef}
instance), and
<li> a unique identifier (a {@link java.rmi.server.UID UID}
instance) for the object. </ul> <p>

An activation identifier for an object can be obtained by registering
an object with the activation system. Registration is accomplished
in a few ways: <ul>
<li>via the <code>Activatable.register</code> method
<li>via the first <code>Activatable</code> constructor (that takes
three arguments and both registers and exports the object, and
<li>via the first <code>Activatable.exportObject</code> method
that takes the activation descriptor, object and port as arguments;
this method both registers and exports the object. </ul>

@author      Ann Wollrath
@see         Activatable
@since       1.2
"
      classrelation 3329538 // <realization>
	relation 3329538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3329538 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3329666 // activator (<unidirectional association>)
	relation 3329666 --->
	  a role_name "activator" private
	    comment "
the object's activator

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3329666 // activator (<unidirectional association>)
	  b parent class_ref 1009922 // Activator
      end

      classrelation 3329794 // uid (<unidirectional association>)
	relation 3329794 --->
	  a role_name "uid" init_value " new UID()" private
	    comment "
the object's unique id

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3329794 // uid (<unidirectional association>)
	  b parent class_ref 1009794 // UID
      end

      attribute 1835778 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4608673054848209235L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      classrelation 3329922 // NOPERMS_ACC (<unidirectional association>)
	relation 3329922 --->
	  a role_name "NOPERMS_ACC" class_relation const_relation private
	    comment " an AccessControlContext with no permissions 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3329922 // NOPERMS_ACC (<unidirectional association>)
	  b parent class_ref 129154 // AccessControlContext
      end

      extra_member 166786 "initialization"
	
	cpp "" ""
	java "  static {
        Permissions perms = new Permissions();
        ProtectionDomain[] pd = { new ProtectionDomain(null, perms) };
        NOPERMS_ACC = new AccessControlContext(pd);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7892866 "ActivationID"
	public explicit_return_type ""
	nparams 1
	  param inout name "activator" type class_ref 1009922 // Activator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The constructor for <code>ActivationID</code> takes a single
argument, activator, that specifies a remote reference to the
activator responsible for activating the object associated with
this identifier. An instance of <code>ActivationID</code> is globally
unique.

@param activator reference to the activator responsible for
activating the object
@throws UnsupportedOperationException if and only if activation is
        not supported by this implementation
@since 1.2
"
      end

      operation 7892994 "activate"
	public return_type class_ref 207106 // Remote
	nparams 1
	  param inout name "force" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Activate the object for this id.

@param force if true, forces the activator to contact the group
when activating the object (instead of returning a cached reference);
if false, returning a cached value is acceptable.
@return the reference to the active remote object
@exception ActivationException if activation fails
@exception UnknownObjectException if the object is unknown
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7893122 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for the activation id.  Two identifiers that
refer to the same remote object will have the same hash code.

@see java.util.Hashtable
@since 1.2
"
      end

      operation 7893250 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two activation ids for content equality.
Returns true if both of the following conditions are true:
1) the unique identifiers equivalent (by content), and
2) the activator specified in each identifier
   refers to the same remote object.

@param   obj     the Object to compare with
@return  true if these Objects are equal; false otherwise.
@see             java.util.Hashtable
@since 1.2
"
      end

      operation 7893378 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>writeObject</code> for custom serialization.

<p>This method writes this object's serialized form for
this class as follows:

<p>The <code>writeObject</code> method is invoked on
<code>out</code> passing this object's unique identifier
(a {@link java.rmi.server.UID UID} instance) as the argument.

<p>Next, the {@link
java.rmi.server.RemoteRef#getRefClass(java.io.ObjectOutput)
getRefClass} method is invoked on the activator's
<code>RemoteRef</code> instance to obtain its external ref
type name.  Next, the <code>writeUTF</code> method is
invoked on <code>out</code> with the value returned by
<code>getRefClass</code>, and then the
<code>writeExternal</code> method is invoked on the
<code>RemoteRef</code> instance passing <code>out</code>
as the argument.

@serialData The serialized data for this class comprises a
<code>java.rmi.server.UID</code> (written with
<code>ObjectOutput.writeObject</code>) followed by the
external ref type name of the activator's
<code>RemoteRef</code> instance (a string written with
<code>ObjectOutput.writeUTF</code>), followed by the
external form of the <code>RemoteRef</code> instance as
written by its <code>writeExternal</code> method.

<p>The external ref type name of the
<code>RemoteRef</Code> instance is
determined using the definitions of external ref type
names specified in the {@link java.rmi.server.RemoteObject
RemoteObject} <code>writeObject</code> method
<b>serialData</b> specification.  Similarly, the data
written by the <code>writeExternal</code> method and read
by the <code>readExternal</code> method of
<code>RemoteRef</code> implementation classes
corresponding to each of the defined external ref type
names is specified in the {@link
java.rmi.server.RemoteObject RemoteObject}
<code>writeObject</code> method <b>serialData</b>
specification.
"
      end

      operation 7893506 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>readObject</code> for custom serialization.

<p>This method reads this object's serialized form for this
class as follows:

<p>The <code>readObject</code> method is invoked on
<code>in</code> to read this object's unique identifier
(a {@link java.rmi.server.UID UID} instance).

<p>Next, the <code>readUTF</code> method is invoked on
<code>in</code> to read the external ref type name of the
<code>RemoteRef</code> instance for this object's
activator.  Next, the <code>RemoteRef</code>
instance is created of an implementation-specific class
corresponding to the external ref type name (returned by
<code>readUTF</code>), and the <code>readExternal</code>
method is invoked on that <code>RemoteRef</code> instance
to read the external form corresponding to the external
ref type name.

<p>Note: If the external ref type name is
<code>\"UnicastRef\"</code>, <code>\"UnicastServerRef\"</code>,
<code>\"UnicastRef2\"</code>, <code>\"UnicastServerRef2\"</code>,
or <code>\"ActivatableRef\"</code>, a corresponding
implementation-specific class must be found, and its
<code>readExternal</code> method must read the serial data
for that external ref type name as specified to be written
in the <b>serialData</b> documentation for this class.
If the external ref type name is any other string (of non-zero
length), a <code>ClassNotFoundException</code> will be thrown,
unless the implementation provides an implementation-specific
class corresponding to that external ref type name, in which
case the <code>RemoteRef</code> will be an instance of
that implementation-specific class.
"
      end
    end

    class 1008002 "ActivationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "General exception used by the activation interfaces.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"detail exception\"
that may be provided at construction time and accessed via the public
{@link #detail} field is now known as the <i>cause</i>, and may be
accessed via the {@link Throwable#getCause()} method, as well as
the aforementioned \"legacy field.\"

<p>Invoking the method {@link Throwable#initCause(Throwable)} on an
instance of <code>ActivationException</code> always throws {@link
IllegalStateException}.

@author      Ann Wollrath
@since       1.2
"
      classrelation 3326338 // <generalisation>
	relation 3326338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3326338 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 3326466 // detail (<unidirectional association>)
	relation 3326466 --->
	  a role_name "detail" public
	    comment "
The cause of the activation exception.

<p>This field predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3326466 // detail (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      attribute 1834626 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4320118837291406071L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7886594 "ActivationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActivationException</code>.
"
      end

      operation 7886722 "ActivationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActivationException</code> with the specified
detail message.

@param s the detail message
"
      end

      operation 7886850 "ActivationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActivationException</code> with the specified
detail message and cause.  This constructor sets the {@link #detail}
field to the specified <code>Throwable</code>.

@param s the detail message
@param cause the cause
"
      end

      operation 7886978 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the detail message, including the message from the cause, if
any, of this exception.

@return  the detail message
"
      end

      operation 7887106 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception.  This method returns the value
of the {@link #detail} field.

@return  the cause, which may be <tt>null</tt>.
@since   1.4
"
      end
    end

    class 1008130 "ActivationDesc"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An activation descriptor contains the information necessary to
activate an object: <ul>
<li> the object's group identifier,
<li> the object's fully-qualified class name,
<li> the object's code location (the location of the class), a codebase URL
path,
<li> the object's restart \"mode\", and,
<li> a \"marshalled\" object that can contain object specific
initialization data. </ul>

<p>A descriptor registered with the activation system can be used to
recreate/activate the object specified by the descriptor. The
<code>MarshalledObject</code> in the object's descriptor is passed
as the second argument to the remote object's constructor for
object to use during reinitialization/activation.

@author      Ann Wollrath
@since       1.2
@see         java.rmi.activation.Activatable
"
      classrelation 3325698 // <realization>
	relation 3325698 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3325698 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3325826 // groupID (<unidirectional association>)
	relation 3325826 --->
	  a role_name "groupID" private
	    comment "
@serial the group's identifier

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3325826 // groupID (<unidirectional association>)
	  b parent class_ref 1008642 // ActivationGroupID
      end

      classrelation 3325954 // className (<unidirectional association>)
	relation 3325954 --->
	  a role_name "className" private
	    comment "
@serial the object's class name

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3325954 // className (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3326082 // location (<unidirectional association>)
	relation 3326082 --->
	  a role_name "location" private
	    comment "
@serial the object's code location

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3326082 // location (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3326210 // data (<unidirectional association>)
	relation 3326210 --->
	  a role_name "data" private
	    comment "
@serial the object's initialization data

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3326210 // data (<unidirectional association>)
	  b parent class_ref 505986 // MarshalledObject
      end

      attribute 1834370 "restart"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial indicates whether the object should be restarted

"
      end

      attribute 1834498 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7455834104417690957L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7885186 "ActivationDesc"
	public explicit_return_type ""
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	nexceptions 1
	  exception class_ref 1008002 // ActivationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object descriptor for an object whose class name
is <code>className</code>, that can be loaded from the
code <code>location</code> and whose initialization
information is <code>data</code>. If this form of the constructor
is used, the <code>groupID</code> defaults to the current id for
<code>ActivationGroup</code> for this VM. All objects with the
same <code>ActivationGroupID</code> are activated in the same VM.

<p>Note that objects specified by a descriptor created with this
constructor will only be activated on demand (by default, the restart
mode is <code>false</code>).  If an activatable object requires restart
services, use one of the <code>ActivationDesc</code> constructors that
takes a boolean parameter, <code>restart</code>.

<p> This constructor will throw <code>ActivationException</code> if
there is no current activation group for this VM.  To create an
<code>ActivationGroup</code> use the
<code>ActivationGroup.createGroup</code> method.

@param className the object's fully package qualified class name
@param location the object's code location (from where the class is
loaded)
@param data the object's initialization (activation) data contained
in marshalled form.
@exception ActivationException if the current group is nonexistent
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7885314 "ActivationDesc"
	public explicit_return_type ""
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	  param inout name "restart" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1008002 // ActivationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object descriptor for an object whose class name
is <code>className</code>, that can be loaded from the
code <code>location</code> and whose initialization
information is <code>data</code>. If this form of the constructor
is used, the <code>groupID</code> defaults to the current id for
<code>ActivationGroup</code> for this VM. All objects with the
same <code>ActivationGroupID</code> are activated in the same VM.

<p>This constructor will throw <code>ActivationException</code> if
there is no current activation group for this VM.  To create an
<code>ActivationGroup</code> use the
<code>ActivationGroup.createGroup</code> method.

@param className the object's fully package qualified class name
@param location the object's code location (from where the class is
loaded)
@param data the object's initialization (activation) data contained
in marshalled form.
@param restart if true, the object is restarted (reactivated) when
either the activator is restarted or the object's activation group
is restarted after an unexpected crash; if false, the object is only
activated on demand.  Specifying <code>restart</code> to be
<code>true</code> does not force an initial immediate activation of
a newly registered object;  initial activation is lazy.
@exception ActivationException if the current group is nonexistent
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7885442 "ActivationDesc"
	public explicit_return_type ""
	nparams 4
	  param inout name "groupID" type class_ref 1008642 // ActivationGroupID
	  param inout name "className" type class_ref 128130 // String
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object descriptor for an object whose class name
is <code>className</code> that can be loaded from the
code <code>location</code> and whose initialization
information is <code>data</code>. All objects with the same
<code>groupID</code> are activated in the same Java VM.

<p>Note that objects specified by a descriptor created with this
constructor will only be activated on demand (by default, the restart
mode is <code>false</code>).  If an activatable object requires restart
services, use one of the <code>ActivationDesc</code> constructors that
takes a boolean parameter, <code>restart</code>.

@param groupID the group's identifier (obtained from registering
<code>ActivationSystem.registerGroup</code> method). The group
indicates the VM in which the object should be activated.
@param className the object's fully package-qualified class name
@param location the object's code location (from where the class is
loaded)
@param data  the object's initialization (activation) data contained
in marshalled form.
@exception IllegalArgumentException if <code>groupID</code> is null
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7885570 "ActivationDesc"
	public explicit_return_type ""
	nparams 5
	  param inout name "groupID" type class_ref 1008642 // ActivationGroupID
	  param inout name "className" type class_ref 128130 // String
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	  param inout name "restart" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object descriptor for an object whose class name
is <code>className</code> that can be loaded from the
code <code>location</code> and whose initialization
information is <code>data</code>. All objects with the same
<code>groupID</code> are activated in the same Java VM.

@param groupID the group's identifier (obtained from registering
<code>ActivationSystem.registerGroup</code> method). The group
indicates the VM in which the object should be activated.
@param className the object's fully package-qualified class name
@param location the object's code location (from where the class is
loaded)
@param data  the object's initialization (activation) data contained
in marshalled form.
@param restart if true, the object is restarted (reactivated) when
either the activator is restarted or the object's activation group
is restarted after an unexpected crash; if false, the object is only
activated on demand.  Specifying <code>restart</code> to be
<code>true</code> does not force an initial immediate activation of
a newly registered object;  initial activation is lazy.
@exception IllegalArgumentException if <code>groupID</code> is null
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@since 1.2
"
      end

      operation 7885698 "getGroupID"
	public return_type class_ref 1008642 // ActivationGroupID
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group identifier for the object specified by this
descriptor. A group provides a way to aggregate objects into a
single Java virtual machine. RMI creates/activates objects with
the same <code>groupID</code> in the same virtual machine.

@return the group identifier
@since 1.2
"
      end

      operation 7885826 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class name for the object specified by this
descriptor.
@return the class name
@since 1.2
"
      end

      operation 7885954 "getLocation"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code location for the object specified by
this descriptor.
@return the code location
@since 1.2
"
      end

      operation 7886082 "getData"
	public return_type class_ref 505986 // MarshalledObject
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a \"marshalled object\" containing intialization/activation
data for the object specified by this descriptor.
@return the object specific \"initialization\" data
@since 1.2
"
      end

      operation 7886210 "getRestartMode"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"restart\" mode of the object associated with
this activation descriptor.

@return true if the activatable object associated with this
activation descriptor is restarted via the activation
daemon when either the daemon comes up or the object's group
is restarted after an unexpected crash; otherwise it returns false,
meaning that the object is only activated on demand via a
method call.  Note that if the restart mode is <code>true</code>, the
activator does not force an initial immediate activation of
a newly registered object;  initial activation is lazy.
@since 1.2
"
      end

      operation 7886338 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two activation descriptors for content equality.

@param   obj     the Object to compare with
@return  true if these Objects are equal; false otherwise.
@see             java.util.Hashtable
@since 1.2
"
      end

      operation 7886466 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the same hashCode for similar <code>ActivationDesc</code>s.
@return an integer
@see java.util.Hashtable
"
      end
    end

    class 1008258 "UnknownGroupException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An <code>UnknownGroupException</code> is thrown by methods of classes and
interfaces in the <code>java.rmi.activation</code> package when the
<code>ActivationGroupID</code> parameter to the method is determined to be
invalid, i.e., not known by the <code>ActivationSystem</code>.  An
<code>UnknownGroupException</code> is also thrown if the
<code>ActivationGroupID</code> in an <code>ActivationDesc</code> refers to
a group that is not registered with the <code>ActivationSystem</code>

@author  Ann Wollrath
@since   1.2
@see     java.rmi.activation.Activatable
@see     java.rmi.activation.ActivationGroup
@see     java.rmi.activation.ActivationGroupID
@see     java.rmi.activation.ActivationMonitor
@see     java.rmi.activation.ActivationSystem
"
      classrelation 3330434 // <generalisation>
	relation 3330434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3330434 // <generalisation>
	  b parent class_ref 1008002 // ActivationException
      end

      attribute 1836034 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7056094974750002460L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7895426 "UnknownGroupException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnknownGroupException</code> with the specified
detail message.

@param s the detail message
@since 1.2
"
      end
    end

    class 1008386 "UnknownObjectException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An <code>UnknownObjectException</code> is thrown by methods of classes and
interfaces in the <code>java.rmi.activation</code> package when the
<code>ActivationID</code> parameter to the method is determined to be
invalid.  An <code>ActivationID</code> is invalid if it is not currently
known by the <code>ActivationSystem</code>.  An <code>ActivationID</code>
is obtained by the <code>ActivationSystem.registerObject</code> method.
An <code>ActivationID</code> is also obtained during the
<code>Activatable.register</code> call.

@author  Ann Wollrath
@since   1.2
@see     java.rmi.activation.Activatable
@see     java.rmi.activation.ActivationGroup
@see     java.rmi.activation.ActivationID
@see     java.rmi.activation.ActivationMonitor
@see     java.rmi.activation.ActivationSystem
@see     java.rmi.activation.Activator
"
      classrelation 3330562 // <generalisation>
	relation 3330562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3330562 // <generalisation>
	  b parent class_ref 1008002 // ActivationException
      end

      attribute 1836162 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3425547551622251430L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7895554 "UnknownObjectException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnknownObjectException</code> with the specified
detail message.

@param s the detail message
@since 1.2
"
      end
    end

    class 1008514 "ActivateFailedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown by the RMI runtime when activation
fails during a remote call to an activatable object.

@author      Ann Wollrath
@since       1.2
"
      classrelation 3325570 // <generalisation>
	relation 3325570 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3325570 // <generalisation>
	  b parent class_ref 207234 // RemoteException
      end

      attribute 1834242 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4863550261346652506L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7884930 "ActivateFailedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActivateFailedException</code> with the specified
detail message.

@param s the detail message
@since 1.2
"
      end

      operation 7885058 "ActivateFailedException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "ex" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ActivateFailedException</code> with the specified
detail message and nested exception.

@param s the detail message
@param ex the nested exception
@since 1.2
"
      end
    end

    class 1008642 "ActivationGroupID"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The identifier for a registered activation group serves several
purposes: <ul>
<li>identifies the group uniquely within the activation system, and
<li>contains a reference to the group's activation system so that the
group can contact its activation system when necessary.</ul><p>

The <code>ActivationGroupID</code> is returned from the call to
<code>ActivationSystem.registerGroup</code> and is used to identify
the group within the activation system. This group id is passed
as one of the arguments to the activation group's special constructor
when an activation group is created/recreated.

@author      Ann Wollrath
@see         ActivationGroup
@see         ActivationGroupDesc
@since       1.2
"
      classrelation 3329154 // <realization>
	relation 3329154 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3329154 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3329282 // system (<unidirectional association>)
	relation 3329282 --->
	  a role_name "system" private
	    comment "
@serial The group's activation system.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3329282 // system (<unidirectional association>)
	  b parent class_ref 1009410 // ActivationSystem
      end

      classrelation 3329410 // uid (<unidirectional association>)
	relation 3329410 --->
	  a role_name "uid" init_value " new UID()" private
	    comment "
@serial The group's unique id.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3329410 // uid (<unidirectional association>)
	  b parent class_ref 1009794 // UID
      end

      attribute 1835650 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1648432278909740833L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7892354 "ActivationGroupID"
	public explicit_return_type ""
	nparams 1
	  param inout name "system" type class_ref 1009410 // ActivationSystem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a unique group id.

@param system the group's activation system
@throws UnsupportedOperationException if and only if activation is
        not supported by this implementation
@since 1.2
"
      end

      operation 7892482 "getSystem"
	public return_type class_ref 1009410 // ActivationSystem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group's activation system.
@return the group's activation system
@since 1.2
"
      end

      operation 7892610 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for the group's identifier.  Two group
identifiers that refer to the same remote group will have the
same hash code.

@see java.util.Hashtable
@since 1.2
"
      end

      operation 7892738 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two group identifiers for content equality.
Returns true if both of the following conditions are true:
1) the unique identifiers are equivalent (by content), and
2) the activation system specified in each
   refers to the same remote object.

@param   obj     the Object to compare with
@return  true if these Objects are equal; false otherwise.
@see             java.util.Hashtable
@since 1.2
"
      end
    end

    class 1008770 "ActivationGroup"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An <code>ActivationGroup</code> is responsible for creating new
instances of \"activatable\" objects in its group, informing its
<code>ActivationMonitor</code> when either: its object's become
active or inactive, or the group as a whole becomes inactive. <p>

An <code>ActivationGroup</code> is <i>initially</i> created in one
of several ways: <ul>
<li>as a side-effect of creating an <code>ActivationDesc</code>
    without an explicit <code>ActivationGroupID</code> for the
    first activatable object in the group, or
<li>via the <code>ActivationGroup.createGroup</code> method
<li>as a side-effect of activating the first object in a group
    whose <code>ActivationGroupDesc</code> was only registered.</ul><p>

Only the activator can <i>recreate</i> an
<code>ActivationGroup</code>.  The activator spawns, as needed, a
separate VM (as a child process, for example) for each registered
activation group and directs activation requests to the appropriate
group. It is implementation specific how VMs are spawned. An
activation group is created via the
<code>ActivationGroup.createGroup</code> static method. The
<code>createGroup</code> method has two requirements on the group
to be created: 1) the group must be a concrete subclass of
<code>ActivationGroup</code>, and 2) the group must have a
constructor that takes two arguments:

<ul>
<li> the group's <code>ActivationGroupID</code>, and
<li> the group's initialization data (in a
     <code>java.rmi.MarshalledObject</code>)</ul><p>

When created, the default implementation of
<code>ActivationGroup</code> will override the system properties
with the properties requested when its
<code>ActivationGroupDesc</code> was created, and will set a
{@link SecurityManager} as the default system
security manager.  If your application requires specific properties
to be set when objects are activated in the group, the application
should create a special <code>Properties</code> object containing
these properties, then create an <code>ActivationGroupDesc</code>
with the <code>Properties</code> object, and use
<code>ActivationGroup.createGroup</code> before creating any
<code>ActivationDesc</code>s (before the default
<code>ActivationGroupDesc</code> is created).  If your application
requires the use of a security manager other than
{@link SecurityManager}, in the
ActivativationGroupDescriptor properties list you can set
<code>java.security.manager</code> property to the name of the security
manager you would like to install.

@author      Ann Wollrath
@see         ActivationInstantiator
@see         ActivationGroupDesc
@see         ActivationGroupID
@since       1.2
"
      classrelation 3326978 // <generalisation>
	relation 3326978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3326978 // <generalisation>
	  b parent class_ref 1008898 // UnicastRemoteObject
      end

      classrelation 3327234 // <realization>
	relation 3327234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3327234 // <realization>
	  b parent class_ref 1009154 // ActivationInstantiator
      end

      classrelation 3327362 // groupID (<unidirectional association>)
	relation 3327362 --->
	  a role_name "groupID" private
	    comment "
@serial the group's identifier

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3327362 // groupID (<unidirectional association>)
	  b parent class_ref 1008642 // ActivationGroupID
      end

      classrelation 3327490 // monitor (<unidirectional association>)
	relation 3327490 --->
	  a role_name "monitor" private
	    comment "
@serial the group's monitor

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3327490 // monitor (<unidirectional association>)
	  b parent class_ref 1009282 // ActivationMonitor
      end

      attribute 1835010 "incarnation"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial the group's incarnation number

"
      end

      classrelation 3327618 // currGroup (<unidirectional association>)
	relation 3327618 --->
	  a role_name "currGroup" class_relation private
	    comment " the current activation group for this VM 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3327618 // currGroup (<unidirectional association>)
	  b parent class_ref 1008770 // ActivationGroup
      end

      classrelation 3327746 // currGroupID (<unidirectional association>)
	relation 3327746 --->
	  a role_name "currGroupID" class_relation private
	    comment " the current group's identifier 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3327746 // currGroupID (<unidirectional association>)
	  b parent class_ref 1008642 // ActivationGroupID
      end

      classrelation 3327874 // currSystem (<unidirectional association>)
	relation 3327874 --->
	  a role_name "currSystem" class_relation private
	    comment " the current group's activation system 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3327874 // currSystem (<unidirectional association>)
	  b parent class_ref 1009410 // ActivationSystem
      end

      attribute 1835138 "canCreate"
	class_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " used to control a group being created only once 
"
      end

      attribute 1835266 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7696947875314805420L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7888770 "ActivationGroup"
	protected explicit_return_type ""
	nparams 1
	  param inout name "groupID" type class_ref 1008642 // ActivationGroupID
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an activation group with the given activation group
identifier.  The group is exported as a
<code>java.rmi.server.UnicastRemoteObject</code>.

@param   groupID the group's identifier
@throws  RemoteException if this group could not be exported
@throws  UnsupportedOperationException if and only if activation is
         not supported by this implementation
@since   1.2
"
      end

      operation 7888898 "inactiveObject"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "id" type class_ref 1007874 // ActivationID
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The group's <code>inactiveObject</code> method is called
indirectly via a call to the <code>Activatable.inactive</code>
method. A remote object implementation must call
<code>Activatable</code>'s <code>inactive</code> method when
that object deactivates (the object deems that it is no longer
active). If the object does not call
<code>Activatable.inactive</code> when it deactivates, the
object will never be garbage collected since the group keeps
strong references to the objects it creates.

<p>The group's <code>inactiveObject</code> method unexports the
remote object from the RMI runtime so that the object can no
longer receive incoming RMI calls. An object will only be unexported
if the object has no pending or executing calls.
The subclass of <code>ActivationGroup</code> must override this
method and unexport the object.

<p>After removing the object from the RMI runtime, the group
must inform its <code>ActivationMonitor</code> (via the monitor's
<code>inactiveObject</code> method) that the remote object is
not currently active so that the remote object will be
re-activated by the activator upon a subsequent activation
request.

<p>This method simply informs the group's monitor that the object
is inactive.  It is up to the concrete subclass of ActivationGroup
to fulfill the additional requirement of unexporting the object. <p>

@param id the object's activation identifier
@return true if the object was successfully deactivated; otherwise
        returns false.
@exception UnknownObjectException if object is unknown (may already
be inactive)
@exception RemoteException if call informing monitor fails
@exception ActivationException if group is inactive
@since 1.2
"
      end

      operation 7889026 "activeObject"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param inout name "obj" type class_ref 207106 // Remote
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The group's <code>activeObject</code> method is called when an
object is exported (either by <code>Activatable</code> object
construction or an explicit call to
<code>Activatable.exportObject</code>. The group must inform its
<code>ActivationMonitor</code> that the object is active (via
the monitor's <code>activeObject</code> method) if the group
hasn't already done so.

@param id the object's identifier
@param obj the remote object implementation
@exception UnknownObjectException if object is not registered
@exception RemoteException if call informing monitor fails
@exception ActivationException if group is inactive
@since 1.2
"
      end

      operation 7889154 "createGroup"
	class_operation public return_type class_ref 1008770 // ActivationGroup
	nparams 3
	  param inout name "id" type class_ref 1008642 // ActivationGroupID
	  param in name "desc" type class_ref 1009538 // ActivationGroupDesc
	  param in name "incarnation" explicit_type "long"
	nexceptions 1
	  exception class_ref 1008002 // ActivationException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and set the activation group for the current VM.  The
activation group can only be set if it is not currently set.
An activation group is set using the <code>createGroup</code>
method when the <code>Activator</code> initiates the
re-creation of an activation group in order to carry out
incoming <code>activate</code> requests. A group must first be
registered with the <code>ActivationSystem</code> before it can
be created via this method.

<p>The group class specified by the
<code>ActivationGroupDesc</code> must be a concrete subclass of
<code>ActivationGroup</code> and have a public constructor that
takes two arguments: the <code>ActivationGroupID</code> for the
group and the <code>MarshalledObject</code> containing the
group's initialization data (obtained from the
<code>ActivationGroupDesc</code>.

<p>If the group class name specified in the
<code>ActivationGroupDesc</code> is <code>null</code>, then
this method will behave as if the group descriptor contained
the name of the default activation group implementation class.

<p>Note that if your application creates its own custom
activation group, a security manager must be set for that
group.  Otherwise objects cannot be activated in the group.
{@link SecurityManager} is set by default.

<p>If a security manager is already set in the group VM, this
method first calls the security manager's
<code>checkSetFactory</code> method.  This could result in a
<code>SecurityException</code>. If your application needs to
set a different security manager, you must ensure that the
policy file specified by the group's
<code>ActivationGroupDesc</code> grants the group the necessary
permissions to set a new security manager.  (Note: This will be
necessary if your group downloads and sets a security manager).

<p>After the group is created, the
<code>ActivationSystem</code> is informed that the group is
active by calling the <code>activeGroup</code> method which
returns the <code>ActivationMonitor</code> for the group. The
application need not call <code>activeGroup</code>
independently since it is taken care of by this method.

<p>Once a group is created, subsequent calls to the
<code>currentGroupID</code> method will return the identifier
for this group until the group becomes inactive.

@param id the activation group's identifier
@param desc the activation group's descriptor
@param incarnation the group's incarnation number (zero on group's
initial creation)
@return the activation group for the VM
@exception ActivationException if group already exists or if error
occurs during group creation
@exception SecurityException if permission to create group is denied.
(Note: The default implementation of the security manager
<code>checkSetFactory</code>
method requires the RuntimePermission \"setFactory\")
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@see SecurityManager#checkSetFactory
@since 1.2
"
      end

      operation 7889282 "currentGroupID"
	class_operation public return_type class_ref 1008642 // ActivationGroupID
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current activation group's identifier.  Returns null
if no group is currently active for this VM.
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@return the activation group's identifier
@since 1.2
"
      end

      operation 7889410 "internalCurrentGroupID"
	class_operation package return_type class_ref 1008642 // ActivationGroupID
	nparams 0
	nexceptions 1
	  exception class_ref 1008002 // ActivationException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the activation group identifier for the VM.  If an
activation group does not exist for this VM, a default
activation group is created. A group can be created only once,
so if a group has already become active and deactivated.

@return the activation group identifier
@exception ActivationException if error occurs during group
creation, if security manager is not set, or if the group
has already been created and deactivated.
"
      end

      operation 7889538 "setSystem"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "system" type class_ref 1009410 // ActivationSystem
	nexceptions 1
	  exception class_ref 1008002 // ActivationException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the activation system for the VM.  The activation system can
only be set it if no group is currently active. If the activation
system is not set via this call, then the <code>getSystem</code>
method attempts to obtain a reference to the
<code>ActivationSystem</code> by looking up the name
\"java.rmi.activation.ActivationSystem\" in the Activator's
registry. By default, the port number used to look up the
activation system is defined by
<code>ActivationSystem.SYSTEM_PORT</code>. This port can be overridden
by setting the property <code>java.rmi.activation.port</code>.

<p>If there is a security manager, this method first
calls the security manager's <code>checkSetFactory</code> method.
This could result in a SecurityException.

@param system remote reference to the <code>ActivationSystem</code>
@exception ActivationException if activation system is already set
@exception SecurityException if permission to set the activation system is denied.
(Note: The default implementation of the security manager
<code>checkSetFactory</code>
method requires the RuntimePermission \"setFactory\")
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@see #getSystem
@see SecurityManager#checkSetFactory
@since 1.2
"
      end

      operation 7889666 "getSystem"
	class_operation public return_type class_ref 1009410 // ActivationSystem
	nparams 0
	nexceptions 1
	  exception class_ref 1008002 // ActivationException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the activation system for the VM. The activation system
may be set by the <code>setSystem</code> method. If the
activation system is not set via the <code>setSystem</code>
method, then the <code>getSystem</code> method attempts to
obtain a reference to the <code>ActivationSystem</code> by
looking up the name \"java.rmi.activation.ActivationSystem\" in
the Activator's registry. By default, the port number used to
look up the activation system is defined by
<code>ActivationSystem.SYSTEM_PORT</code>. This port can be
overridden by setting the property
<code>java.rmi.activation.port</code>.

@return the activation system for the VM/group
@exception ActivationException if activation system cannot be
 obtained or is not bound
(means that it is not running)
@exception UnsupportedOperationException if and only if activation is
not supported by this implementation
@see #setSystem
@since 1.2
"
      end

      operation 7889794 "activeObject"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param inout name "mobj" type class_ref 505986 // MarshalledObject
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Remote> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This protected method is necessary for subclasses to
make the <code>activeObject</code> callback to the group's
monitor. The call is simply forwarded to the group's
<code>ActivationMonitor</code>.

@param id the object's identifier
@param mobj a marshalled object containing the remote object's stub
@exception UnknownObjectException if object is not registered
@exception RemoteException if call informing monitor fails
@exception ActivationException if an activation error occurs
@since 1.2
"
      end

      operation 7889922 "inactiveGroup"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This protected method is necessary for subclasses to
make the <code>inactiveGroup</code> callback to the group's
monitor. The call is simply forwarded to the group's
<code>ActivationMonitor</code>. Also, the current group
for the VM is set to null.

@exception UnknownGroupException if group is not registered
@exception RemoteException if call informing monitor fails
@since 1.2
"
      end

      operation 7890050 "getMonitor"
	private return_type class_ref 1009282 // ActivationMonitor
	nparams 0
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the monitor for the activation group.
"
      end

      operation 7890178 "destroyGroup"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Destroys the current group.
"
      end

      operation 7890306 "currentGroup"
	class_operation package return_type class_ref 1008770 // ActivationGroup
	nparams 0
	nexceptions 1
	  exception class_ref 1008002 // ActivationException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current group for the VM.
@exception ActivationException if current group is null (not active)
"
      end
    end

    class 1009154 "ActivationInstantiator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An <code>ActivationInstantiator</code> is responsible for creating
instances of \"activatable\" objects. A concrete subclass of
<code>ActivationGroup</code> implements the <code>newInstance</code>
method to handle creating objects within the group.

@author      Ann Wollrath
@see         ActivationGroup
@since       1.2
"
      classrelation 3327106 // <generalisation>
	relation 3327106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3327106 // <generalisation>
	  b parent class_ref 207106 // Remote
      end

      operation 7888642 "newInstance"
	public return_type class_ref 505986 // MarshalledObject
	nparams 2
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param inout name "desc" type class_ref 1008130 // ActivationDesc
	nexceptions 2
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Remote> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The activator calls an instantiator's <code>newInstance</code>
method in order to recreate in that group an object with the
activation identifier, <code>id</code>, and descriptor,
<code>desc</code>. The instantiator is responsible for: <ul>

<li> determining the class for the object using the descriptor's
<code>getClassName</code> method,

<li> loading the class from the code location obtained from the
descriptor (using the <code>getLocation</code> method),

<li> creating an instance of the class by invoking the special
\"activation\" constructor of the object's class that takes two
arguments: the object's <code>ActivationID</code>, and the
<code>MarshalledObject</code> containing object specific
initialization data, and

<li> returning a MarshalledObject containing the stub for the
remote object it created </ul>

@param id the object's activation identifier
@param desc the object's descriptor
@return a marshalled object containing the serialized
representation of remote object's stub
@exception ActivationException if object activation fails
@exception RemoteException if remote call fails
@since 1.2
"
      end
    end

    class 1009282 "ActivationMonitor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An <code>ActivationMonitor</code> is specific to an
<code>ActivationGroup</code> and is obtained when a group is
reported active via a call to
<code>ActivationSystem.activeGroup</code> (this is done
internally). An activation group is responsible for informing its
<code>ActivationMonitor</code> when either: its objects become active or
inactive, or the group as a whole becomes inactive.

@author      Ann Wollrath
@see         Activator
@see         ActivationSystem
@see         ActivationGroup
@since       1.2
"
      classrelation 3330050 // <generalisation>
	relation 3330050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3330050 // <generalisation>
	  b parent class_ref 207106 // Remote
      end

      operation 7893634 "inactiveObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "id" type class_ref 1007874 // ActivationID
	nexceptions 2
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An activation group calls its monitor's
<code>inactiveObject</code> method when an object in its group
becomes inactive (deactivates).  An activation group discovers
that an object (that it participated in activating) in its VM
is no longer active, via calls to the activation group's
<code>inactiveObject</code> method. <p>

The <code>inactiveObject</code> call informs the
<code>ActivationMonitor</code> that the remote object reference
it holds for the object with the activation identifier,
<code>id</code>, is no longer valid. The monitor considers the
reference associated with <code>id</code> as a stale reference.
Since the reference is considered stale, a subsequent
<code>activate</code> call for the same activation identifier
results in re-activating the remote object.<p>

@param id the object's activation identifier
@exception UnknownObjectException if object is unknown
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7893762 "activeObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param inout name "obj" type class_ref 505986 // MarshalledObject
	nexceptions 2
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Remote> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs that an object is now active. An <code>ActivationGroup</code>
informs its monitor if an object in its group becomes active by
other means than being activated directly (i.e., the object
is registered and \"activated\" itself).

@param id the active object's id
@param obj the marshalled form of the object's stub
@exception UnknownObjectException if object is unknown
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7893890 "inactiveGroup"
	public explicit_return_type "void"
	nparams 2
	  param inout name "id" type class_ref 1008642 // ActivationGroupID
	  param in name "incarnation" explicit_type "long"
	nexceptions 2
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs that the group is now inactive. The group will be
recreated upon a subsequent request to activate an object
within the group. A group becomes inactive when all objects
in the group report that they are inactive.

@param id the group's id
@param incarnation the group's incarnation number
@exception UnknownGroupException if group is unknown
@exception RemoteException if remote call fails
@since 1.2
"
      end
    end

    class 1009410 "ActivationSystem"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ActivationSystem</code> provides a means for registering
groups and \"activatable\" objects to be activated within those groups.
The <code>ActivationSystem</code> works closely with the
<code>Activator</code>, which activates objects registered via the
<code>ActivationSystem</code>, and the <code>ActivationMonitor</code>,
which obtains information about active and inactive objects,
and inactive groups.

@author      Ann Wollrath
@see         Activator
@see         ActivationMonitor
@since       1.2
"
      classrelation 3330178 // <generalisation>
	relation 3330178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3330178 // <generalisation>
	  b parent class_ref 207106 // Remote
      end

      attribute 1835906 "SYSTEM_PORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1098"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The port to lookup the activation system. 
"
      end

      operation 7894018 "registerObject"
	public return_type class_ref 1007874 // ActivationID
	nparams 1
	  param inout name "desc" type class_ref 1008130 // ActivationDesc
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>registerObject</code> method is used to register an
activation descriptor, <code>desc</code>, and obtain an
activation identifier for a activatable remote object. The
<code>ActivationSystem</code> creates an
<code>ActivationID</code> (a activation identifier) for the
object specified by the descriptor, <code>desc</code>, and
records, in stable storage, the activation descriptor and its
associated identifier for later use. When the <code>Activator</code>
receives an <code>activate</code> request for a specific identifier, it
looks up the activation descriptor (registered previously) for
the specified identifier and uses that information to activate
the object. <p>

@param desc the object's activation descriptor
@return the activation id that can be used to activate the object
@exception ActivationException if registration fails (e.g., database
update failure, etc).
@exception UnknownGroupException if group referred to in
<code>desc</code> is not registered with this system
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7894146 "unregisterObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "id" type class_ref 1007874 // ActivationID
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the activation id and associated descriptor previously
registered with the <code>ActivationSystem</code>; the object
can no longer be activated via the object's activation id.

@param id the object's activation id (from previous registration)
@exception ActivationException if unregister fails (e.g., database
update failure, etc).
@exception UnknownObjectException if object is unknown (not registered)
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7894274 "registerGroup"
	public return_type class_ref 1008642 // ActivationGroupID
	nparams 1
	  param inout name "desc" type class_ref 1009538 // ActivationGroupDesc
	nexceptions 2
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register the activation group. An activation group must be
registered with the <code>ActivationSystem</code> before objects
can be registered within that group.

@param desc the group's descriptor
@return an identifier for the group
@exception ActivationException if group registration fails
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7894402 "activeGroup"
	public return_type class_ref 1009282 // ActivationMonitor
	nparams 3
	  param inout name "id" type class_ref 1008642 // ActivationGroupID
	  param inout name "group" type class_ref 1009154 // ActivationInstantiator
	  param in name "incarnation" explicit_type "long"
	nexceptions 3
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback to inform activation system that group is now
active. This call is made internally by the
<code>ActivationGroup.createGroup</code> method to inform
the <code>ActivationSystem</code> that the group is now
active.

@param id the activation group's identifier
@param group the group's instantiator
@param incarnation the group's incarnation number
@return monitor for activation group
@exception UnknownGroupException if group is not registered
@exception ActivationException if a group for the specified
<code>id</code> is already active and that group is not equal
to the specified <code>group</code> or that group has a different
<code>incarnation</code> than the specified <code>group</code>
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7894530 "unregisterGroup"
	public explicit_return_type "void"
	nparams 1
	  param inout name "id" type class_ref 1008642 // ActivationGroupID
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the activation group. An activation group makes this call back
to inform the activator that the group should be removed (destroyed).
If this call completes successfully, objects can no longer be
registered or activated within the group. All information of the
group and its associated objects is removed from the system.

@param id the activation group's identifier
@exception ActivationException if unregister fails (e.g., database
update failure, etc).
@exception UnknownGroupException if group is not registered
@exception RemoteException if remote call fails
@since 1.2
"
      end

      operation 7894658 "shutdown"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shutdown the activation system. Destroys all groups spawned by
the activation daemon and exits the activation daemon.
@exception RemoteException if failed to contact/shutdown the activation
daemon
@since 1.2
"
      end

      operation 7894786 "setActivationDesc"
	public return_type class_ref 1008130 // ActivationDesc
	nparams 2
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param inout name "desc" type class_ref 1008130 // ActivationDesc
	nexceptions 4
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the activation descriptor, <code>desc</code> for the object with
the activation identifier, <code>id</code>. The change will take
effect upon subsequent activation of the object.

@param id the activation identifier for the activatable object
@param desc the activation descriptor for the activatable object
@exception UnknownGroupException the group associated with
<code>desc</code> is not a registered group
@exception UnknownObjectException the activation <code>id</code>
is not registered
@exception ActivationException for general failure (e.g., unable
to update log)
@exception RemoteException if remote call fails
@return the previous value of the activation descriptor
@see #getActivationDesc
@since 1.2
"
      end

      operation 7894914 "setActivationGroupDesc"
	public return_type class_ref 1009538 // ActivationGroupDesc
	nparams 2
	  param inout name "id" type class_ref 1008642 // ActivationGroupID
	  param inout name "desc" type class_ref 1009538 // ActivationGroupDesc
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the activation group descriptor, <code>desc</code> for the object
with the activation group identifier, <code>id</code>. The change will
take effect upon subsequent activation of the group.

@param id the activation group identifier for the activation group
@param desc the activation group descriptor for the activation group
@exception UnknownGroupException the group associated with
<code>id</code> is not a registered group
@exception ActivationException for general failure (e.g., unable
to update log)
@exception RemoteException if remote call fails
@return the previous value of the activation group descriptor
@see #getActivationGroupDesc
@since 1.2
"
      end

      operation 7895042 "getActivationDesc"
	public return_type class_ref 1008130 // ActivationDesc
	nparams 1
	  param inout name "id" type class_ref 1007874 // ActivationID
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the activation descriptor, for the object with the activation
identifier, <code>id</code>.

@param id the activation identifier for the activatable object
@exception UnknownObjectException if <code>id</code> is not registered
@exception ActivationException for general failure
@exception RemoteException if remote call fails
@return the activation descriptor
@see #setActivationDesc
@since 1.2
"
      end

      operation 7895170 "getActivationGroupDesc"
	public return_type class_ref 1009538 // ActivationGroupDesc
	nparams 1
	  param inout name "id" type class_ref 1008642 // ActivationGroupID
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008258 // UnknownGroupException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the activation group descriptor, for the group
with the activation group identifier, <code>id</code>.

@param id the activation group identifier for the group
@exception UnknownGroupException if <code>id</code> is not registered
@exception ActivationException for general failure
@exception RemoteException if remote call fails
@return the activation group descriptor
@see #setActivationGroupDesc
@since 1.2
"
      end
    end

    class 1009538 "ActivationGroupDesc"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An activation group descriptor contains the information necessary to
create/recreate an activation group in which to activate objects.
Such a descriptor contains: <ul>
<li> the group's class name,
<li> the group's code location (the location of the group's class), and
<li> a \"marshalled\" object that can contain group specific
initialization data. </ul> <p>

The group's class must be a concrete subclass of
<code>ActivationGroup</code>. A subclass of
<code>ActivationGroup</code> is created/recreated via the
<code>ActivationGroup.createGroup</code> static method that invokes
a special constructor that takes two arguments: <ul>

<li> the group's <code>ActivationGroupID</code>, and
<li> the group's initialization data (in a
<code>java.rmi.MarshalledObject</code>)</ul><p>

@author      Ann Wollrath
@since       1.2
@see         ActivationGroup
@see         ActivationGroupID
"
      classrelation 3328002 // <realization>
	relation 3328002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3328002 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3328130 // className (<unidirectional association>)
	relation 3328130 --->
	  a role_name "className" private
	    comment "
@serial The group's fully package qualified class name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3328130 // className (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3328258 // location (<unidirectional association>)
	relation 3328258 --->
	  a role_name "location" private
	    comment "
@serial The location from where to load the group's class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3328258 // location (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3328386 // data (<unidirectional association>)
	relation 3328386 --->
	  a role_name "data" private
	    comment "
@serial The group's initialization data.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3328386 // data (<unidirectional association>)
	  b parent class_ref 505986 // MarshalledObject
      end

      class 1009666 "CommandEnvironment"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3328770 // <realization>
	  relation 3328770 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3328770 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1835522 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6165754737887770191L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3328898 // command (<unidirectional association>)
	  relation 3328898 --->
	    a role_name "command" private
	      comment "
@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3328898 // command (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3329026 // options (<unidirectional association>)
	  relation 3329026 --->
	    a role_name "options" multiplicity "[]" private
	      comment "
@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3329026 // options (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 7891330 "CommandEnvironment"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "cmdpath" type class_ref 128130 // String
	    param inout name "argv" type class_ref 128130 // String
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a CommandEnvironment with all the necessary
information.

@param cmdpath the name of the java executable, including
the full path, or <code>null</code>, meaning \"use rmid's default\".
The named program <em>must</em> be able to accept multiple
<code>-Dpropname=value</code> options (as documented for the
\"java\" tool)

@param argv extra options which will be used in creating the
ActivationGroup.  Null has the same effect as an empty
list.
@since 1.2
"
	end

	operation 7891458 "getCommandPath"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Fetch the configured path-qualified java command name.

@return the configured name, or <code>null</code> if configured to
accept the default
@since 1.2
"
	end

	operation 7891586 "getCommandOptions"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Fetch the configured java command options.

@return An array of the command options which will be passed
to the new child command by rmid.
Note that rmid may add other options before or after these
options, or both.
Never returns <code>null</code>.
@since 1.2
"
	end

	operation 7891714 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compares two command environments for content equality.

@param       obj     the Object to compare with
@return      true if these Objects are equal; false otherwise.
@see         java.util.Hashtable
@since 1.2
"
	end

	operation 7891842 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return identical values for similar
<code>CommandEnvironment</code>s.
@return an integer
@see java.util.Hashtable
"
	end

	operation 7891970 "readObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "in" type class_ref 168962 // ObjectInputStream
	  nexceptions 2
	    exception class_ref 146818 // IOException
	    exception class_ref 169730 // ClassNotFoundException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<code>readObject</code> for custom serialization.

<p>This method reads this object's serialized form for this
class as follows:

<p>This method first invokes <code>defaultReadObject</code> on
the specified object input stream, and if <code>options</code>
is <code>null</code>, then <code>options</code> is set to a
zero-length array of <code>String</code>.
"
	end
      end

      classrelation 3328514 // env (<unidirectional association>)
	relation 3328514 --->
	  a role_name "env" private
	    comment "
@serial The controlling options for executing the VM in
another process.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3328514 // env (<unidirectional association>)
	  b parent class_ref 1009666 // CommandEnvironment
      end

      classrelation 3328642 // props (<unidirectional association>)
	relation 3328642 --->
	  a role_name "props" private
	    comment "
@serial A properties map which will override those set
by default in the subprocess environment.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3328642 // props (<unidirectional association>)
	  b parent class_ref 240130 // Properties
      end

      attribute 1835394 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4936225423168276595L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with the Java 2 SDK v1.2 version of class 
"
      end

      operation 7890434 "ActivationGroupDesc"
	public explicit_return_type ""
	nparams 2
	  param inout name "overrides" type class_ref 240130 // Properties
	  param inout name "cmd" type class_ref 1009666 // CommandEnvironment
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a group descriptor that uses the system defaults for group
implementation and code location.  Properties specify Java
environment overrides (which will override system properties in
the group implementation's VM).  The command
environment can control the exact command/options used in
starting the child VM, or can be <code>null</code> to accept
rmid's default.

<p>This constructor will create an <code>ActivationGroupDesc</code>
with a <code>null</code> group class name, which indicates the system's
default <code>ActivationGroup</code> implementation.

@param overrides the set of properties to set when the group is
recreated.
@param cmd the controlling options for executing the VM in
another process (or <code>null</code>).
@since 1.2
"
      end

      operation 7890562 "ActivationGroupDesc"
	public explicit_return_type ""
	nparams 5
	  param inout name "className" type class_ref 128130 // String
	  param inout name "location" type class_ref 128130 // String
	  param inout name "data" type class_ref 505986 // MarshalledObject
	  param inout name "overrides" type class_ref 240130 // Properties
	  param inout name "cmd" type class_ref 1009666 // CommandEnvironment
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies an alternate group implementation and execution
environment to be used for the group.

@param className the group's package qualified class name or
<code>null</code>. A <code>null</code> group class name indicates
the system's default <code>ActivationGroup</code> implementation.
@param location the location from where to load the group's
class
@param data the group's initialization data contained in
marshalled form (could contain properties, for example)
@param overrides a properties map which will override those set
by default in the subprocess environment (will be translated
into <code>-D</code> options), or <code>null</code>.
@param cmd the controlling options for executing the VM in
another process (or <code>null</code>).
@since 1.2
"
      end

      operation 7890690 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group's class name (possibly <code>null</code>).  A
<code>null</code> group class name indicates the system's default
<code>ActivationGroup</code> implementation.
@return the group's class name
@since 1.2
"
      end

      operation 7890818 "getLocation"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group's code location.
@return the group's code location
@since 1.2
"
      end

      operation 7890946 "getData"
	public return_type class_ref 505986 // MarshalledObject
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group's initialization data.
@return the group's initialization data
@since 1.2
"
      end

      operation 7891074 "getPropertyOverrides"
	public return_type class_ref 240130 // Properties
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group's property-override list.
@return the property-override list, or <code>null</code>
@since 1.2
"
      end

      operation 7891202 "getCommandEnvironment"
	public return_type class_ref 1009666 // CommandEnvironment
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group's command-environment control object.
@return the command-environment object, or <code>null</code>
@since 1.2
"
      end

      operation 7892098 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two activation group descriptors for content equality.

@param   obj     the Object to compare with
@return  true if these Objects are equal; false otherwise.
@see             java.util.Hashtable
@since 1.2
"
      end

      operation 7892226 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce identical numbers for similar <code>ActivationGroupDesc</code>s.
@return an integer
@see java.util.Hashtable
"
      end
    end

    class 1009922 "Activator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Activator</code> facilitates remote object activation. A
\"faulting\" remote reference calls the activator's
<code>activate</code> method to obtain a \"live\" reference to a
\"activatable\" remote object. Upon receiving a request for activation,
the activator looks up the activation descriptor for the activation
identifier, <code>id</code>, determines the group in which the
object should be activated initiates object re-creation via the
group's <code>ActivationInstantiator</code> (via a call to the
<code>newInstance</code> method). The activator initiates the
execution of activation groups as necessary. For example, if an
activation group for a specific group identifier is not already
executing, the activator initiates the execution of a VM for the
group. <p>

The <code>Activator</code> works closely with
<code>ActivationSystem</code>, which provides a means for registering
groups and objects within those groups, and <code>ActivationMonitor</code>,
which recives information about active and inactive objects and inactive
groups. <p>

The activator is responsible for monitoring and detecting when
activation groups fail so that it can remove stale remote references
to groups and active object's within those groups.<p>

@author      Ann Wollrath
@see         ActivationInstantiator
@see         ActivationGroupDesc
@see         ActivationGroupID
@since       1.2
"
      classrelation 3330306 // <generalisation>
	relation 3330306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3330306 // <generalisation>
	  b parent class_ref 207106 // Remote
      end

      operation 7895298 "activate"
	public return_type class_ref 505986 // MarshalledObject
	nparams 2
	  param inout name "id" type class_ref 1007874 // ActivationID
	  param inout name "force" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 1008002 // ActivationException
	  exception class_ref 1008386 // UnknownObjectException
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Remote> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Activate the object associated with the activation identifier,
<code>id</code>. If the activator knows the object to be active
already, and <code>force</code> is false , the stub with a
\"live\" reference is returned immediately to the caller;
otherwise, if the activator does not know that corresponding
the remote object is active, the activator uses the activation
descriptor information (previously registered) to determine the
group (VM) in which the object should be activated. If an
<code>ActivationInstantiator</code> corresponding to the
object's group descriptor already exists, the activator invokes
the activation group's <code>newInstance</code> method passing
it the object's id and descriptor. <p>

If the activation group for the object's group descriptor does
not yet exist, the activator starts an
<code>ActivationInstantiator</code> executing (by spawning a
child process, for example). When the activator receives the
activation group's call back (via the
<code>ActivationSystem</code>'s <code>activeGroup</code>
method) specifying the activation group's reference, the
activator can then invoke that activation instantiator's
<code>newInstance</code> method to forward each pending
activation request to the activation group and return the
result (a marshalled remote object reference, a stub) to the
caller.<p>

Note that the activator receives a \"marshalled\" object instead of a
Remote object so that the activator does not need to load the
code for that object, or participate in distributed garbage
collection for that object. If the activator kept a strong
reference to the remote object, the activator would then
prevent the object from being garbage collected under the
normal distributed garbage collection mechanism. <p>

@param id the activation identifier for the object being activated
@param force if true, the activator contacts the group to obtain
the remote object's reference; if false, returning the cached value
is allowed.
@return the remote object (a stub) in a marshalled form
@exception ActivationException if object activation fails
@exception UnknownObjectException if object is unknown (not registered)
@exception RemoteException if remote call fails
@since 1.2
"
      end
    end
  end

  deploymentview 168962 "activation"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 744066 "Activatable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.MarshalledObject;
import java.rmi.NoSuchObjectException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.activation.UnknownGroupException;
import java.rmi.activation.UnknownObjectException;
import java.rmi.server.RMIClientSocketFactory;
import java.rmi.server.RMIServerSocketFactory;
import java.rmi.server.RemoteServer;
import sun.rmi.server.ActivatableServerRef;
${definition}"
      associated_elems
	class_ref 1007490 // Activatable
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 744194 "ActivateFailedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1008514 // ActivateFailedException
      end
      comment "Copyright (c) 1998, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 744322 "ActivationDesc"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.rmi.MarshalledObject;
${definition}"
      associated_elems
	class_ref 1008130 // ActivationDesc
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 744450 "ActivationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1008002 // ActivationException
      end
      comment "Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 744706 "ActivationInstantiator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.MarshalledObject;
import java.rmi.Remote;
import java.rmi.RemoteException;
${definition}"
      associated_elems
	class_ref 1009154 // ActivationInstantiator
      end
      comment "Copyright (c) 1997, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 744834 "ActivationGroup"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.rmi.MarshalledObject;
import java.rmi.Naming;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.activation.UnknownGroupException;
import java.rmi.activation.UnknownObjectException;
import java.rmi.server.RMIClassLoader;
import java.rmi.server.UnicastRemoteObject;
import java.security.AccessController;
import sun.security.action.GetIntegerAction;
${definition}"
      associated_elems
	class_ref 1008770 // ActivationGroup
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 744962 "ActivationGroupDesc"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.rmi.MarshalledObject;
import java.util.Arrays;
import java.util.Properties;
${definition}"
      associated_elems
	class_ref 1009538 // ActivationGroupDesc
      end
      comment "Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 745090 "ActivationGroupID"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.server.UID;
${definition}"
      associated_elems
	class_ref 1008642 // ActivationGroupID
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 745218 "ActivationID"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.rmi.MarshalledObject;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnmarshalException;
import java.rmi.server.RemoteObject;
import java.rmi.server.RemoteObjectInvocationHandler;
import java.rmi.server.RemoteRef;
import java.rmi.server.UID;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.Permissions;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.security.ProtectionDomain;
${definition}"
      associated_elems
	class_ref 1007874 // ActivationID
      end
      comment "Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 745346 "ActivationMonitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.MarshalledObject;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.activation.UnknownGroupException;
import java.rmi.activation.UnknownObjectException;
${definition}"
      associated_elems
	class_ref 1009282 // ActivationMonitor
      end
      comment "Copyright (c) 1997, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 745474 "ActivationSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.activation.UnknownGroupException;
import java.rmi.activation.UnknownObjectException;
${definition}"
      associated_elems
	class_ref 1009410 // ActivationSystem
      end
      comment "Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 745602 "Activator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.MarshalledObject;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.activation.UnknownObjectException;
${definition}"
      associated_elems
	class_ref 1009922 // Activator
      end
      comment "Copyright (c) 1997, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 745730 "UnknownGroupException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1008258 // UnknownGroupException
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 745858 "UnknownObjectException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1008386 // UnknownObjectException
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
