class DateTimeFormatter
!!!8509826.java!!!	ofPattern(inout pattern : String) : DateTimeFormatter
        return new DateTimeFormatterBuilder().appendPattern(pattern).toFormatter();
!!!8509954.java!!!	ofPattern(inout pattern : String, inout locale : Locale) : DateTimeFormatter
        return new DateTimeFormatterBuilder().appendPattern(pattern).toFormatter(locale);
!!!8510082.java!!!	ofLocalizedDate(inout dateStyle : FormatStyle) : DateTimeFormatter
        Objects.requireNonNull(dateStyle, "dateStyle");
        return new DateTimeFormatterBuilder().appendLocalized(dateStyle, null)
                .toFormatter(ResolverStyle.SMART, IsoChronology.INSTANCE);
!!!8510210.java!!!	ofLocalizedTime(inout timeStyle : FormatStyle) : DateTimeFormatter
        Objects.requireNonNull(timeStyle, "timeStyle");
        return new DateTimeFormatterBuilder().appendLocalized(null, timeStyle)
                .toFormatter(ResolverStyle.SMART, IsoChronology.INSTANCE);
!!!8510338.java!!!	ofLocalizedDateTime(inout dateTimeStyle : FormatStyle) : DateTimeFormatter
        Objects.requireNonNull(dateTimeStyle, "dateTimeStyle");
        return new DateTimeFormatterBuilder().appendLocalized(dateTimeStyle, dateTimeStyle)
                .toFormatter(ResolverStyle.SMART, IsoChronology.INSTANCE);
!!!8510466.java!!!	ofLocalizedDateTime(inout dateStyle : FormatStyle, inout timeStyle : FormatStyle) : DateTimeFormatter
        Objects.requireNonNull(dateStyle, "dateStyle");
        Objects.requireNonNull(timeStyle, "timeStyle");
        return new DateTimeFormatterBuilder().appendLocalized(dateStyle, timeStyle)
                .toFormatter(ResolverStyle.SMART, IsoChronology.INSTANCE);
!!!8510594.java!!!	parsedExcessDays() : TemporalQuery
        return PARSED_EXCESS_DAYS;
!!!8510722.java!!!	parsedLeapSecond() : TemporalQuery
        return PARSED_LEAP_SECOND;
!!!8510850.java!!!	DateTimeFormatter(inout printerParser : DateTimeFormatterBuilder::CompositePrinterParser, inout locale : Locale, inout decimalStyle : DecimalStyle, inout resolverStyle : ResolverStyle, inout resolverFields : Set, inout chrono : Chronology, inout zone : ZoneId)
        this.printerParser = Objects.requireNonNull(printerParser, "printerParser");
        this.resolverFields = resolverFields;
        this.locale = Objects.requireNonNull(locale, "locale");
        this.decimalStyle = Objects.requireNonNull(decimalStyle, "decimalStyle");
        this.resolverStyle = Objects.requireNonNull(resolverStyle, "resolverStyle");
        this.chrono = chrono;
        this.zone = zone;
!!!8510978.java!!!	getLocale() : Locale
        return locale;
!!!8511106.java!!!	withLocale(inout locale : Locale) : DateTimeFormatter
        if (this.locale.equals(locale)) {
            return this;
        }
        return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
!!!8511234.java!!!	getDecimalStyle() : DecimalStyle
        return decimalStyle;
!!!8511362.java!!!	withDecimalStyle(inout decimalStyle : DecimalStyle) : DateTimeFormatter
        if (this.decimalStyle.equals(decimalStyle)) {
            return this;
        }
        return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
!!!8511490.java!!!	getChronology() : Chronology
        return chrono;
!!!8511618.java!!!	withChronology(inout chrono : Chronology) : DateTimeFormatter
        if (Objects.equals(this.chrono, chrono)) {
            return this;
        }
        return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
!!!8511746.java!!!	getZone() : ZoneId
        return zone;
!!!8511874.java!!!	withZone(inout zone : ZoneId) : DateTimeFormatter
        if (Objects.equals(this.zone, zone)) {
            return this;
        }
        return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
!!!8512002.java!!!	getResolverStyle() : ResolverStyle
        return resolverStyle;
!!!8512130.java!!!	withResolverStyle(inout resolverStyle : ResolverStyle) : DateTimeFormatter
        Objects.requireNonNull(resolverStyle, "resolverStyle");
        if (Objects.equals(this.resolverStyle, resolverStyle)) {
            return this;
        }
        return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
!!!8512258.java!!!	getResolverFields() : Set
        return resolverFields;
!!!8512386.java!!!	withResolverFields(inout  : TemporalField...resolverFields) : DateTimeFormatter
        Set<TemporalField> fields = null;
        if (resolverFields != null) {
            fields = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(resolverFields)));
        }
        if (Objects.equals(this.resolverFields, fields)) {
            return this;
        }
        return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, fields, chrono, zone);
!!!8512514.java!!!	withResolverFields(inout resolverFields : Set) : DateTimeFormatter
        if (Objects.equals(this.resolverFields, resolverFields)) {
            return this;
        }
        if (resolverFields != null) {
            resolverFields = Collections.unmodifiableSet(new HashSet<>(resolverFields));
        }
        return new DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone);
!!!8512642.java!!!	format(inout temporal : TemporalAccessor) : String
        StringBuilder buf = new StringBuilder(32);
        formatTo(temporal, buf);
        return buf.toString();
!!!8512770.java!!!	formatTo(inout temporal : TemporalAccessor, inout appendable : Appendable) : void
        Objects.requireNonNull(temporal, "temporal");
        Objects.requireNonNull(appendable, "appendable");
        try {
            DateTimePrintContext context = new DateTimePrintContext(temporal, this);
            if (appendable instanceof StringBuilder) {
                printerParser.format(context, (StringBuilder) appendable);
            } else {
                // buffer output to avoid writing to appendable in case of error
                StringBuilder buf = new StringBuilder(32);
                printerParser.format(context, buf);
                appendable.append(buf);
            }
        } catch (IOException ex) {
            throw new DateTimeException(ex.getMessage(), ex);
        }
!!!8512898.java!!!	parse(inout text : CharSequence) : TemporalAccessor
        Objects.requireNonNull(text, "text");
        try {
            return parseResolved0(text, null);
        } catch (DateTimeParseException ex) {
            throw ex;
        } catch (RuntimeException ex) {
            throw createError(text, ex);
        }
!!!8513026.java!!!	parse(inout text : CharSequence, inout position : ParsePosition) : TemporalAccessor
        Objects.requireNonNull(text, "text");
        Objects.requireNonNull(position, "position");
        try {
            return parseResolved0(text, position);
        } catch (DateTimeParseException | IndexOutOfBoundsException ex) {
            throw ex;
        } catch (RuntimeException ex) {
            throw createError(text, ex);
        }
!!!8513154.java!!!	parse(inout text : CharSequence, inout query : TemporalQuery) : T
        Objects.requireNonNull(text, "text");
        Objects.requireNonNull(query, "query");
        try {
            return parseResolved0(text, null).query(query);
        } catch (DateTimeParseException ex) {
            throw ex;
        } catch (RuntimeException ex) {
            throw createError(text, ex);
        }
!!!8513282.java!!!	parseBest(inout text : CharSequence, inout queries : TemporalQuery<?>...) : TemporalAccessor
        Objects.requireNonNull(text, "text");
        Objects.requireNonNull(queries, "queries");
        if (queries.length < 2) {
            throw new IllegalArgumentException("At least two queries must be specified");
        }
        try {
            TemporalAccessor resolved = parseResolved0(text, null);
            for (TemporalQuery<?> query : queries) {
                try {
                    return (TemporalAccessor) resolved.query(query);
                } catch (RuntimeException ex) {
                    // continue
                }
            }
            throw new DateTimeException("Unable to convert parsed text using any of the specified queries");
        } catch (DateTimeParseException ex) {
            throw ex;
        } catch (RuntimeException ex) {
            throw createError(text, ex);
        }
!!!8513410.java!!!	createError(inout text : CharSequence, inout ex : RuntimeException) : DateTimeParseException
        String abbr;
        if (text.length() > 64) {
            abbr = text.subSequence(0, 64).toString() + "...";
        } else {
            abbr = text.toString();
        }
        return new DateTimeParseException("Text '" + abbr + "' could not be parsed: " + ex.getMessage(), text, 0, ex);
!!!8513538.java!!!	parseResolved0(in text : CharSequence, in position : ParsePosition) : TemporalAccessor
        ParsePosition pos = (position != null ? position : new ParsePosition(0));
        DateTimeParseContext context = parseUnresolved0(text, pos);
        if (context == null || pos.getErrorIndex() >= 0 || (position == null && pos.getIndex() < text.length())) {
            String abbr;
            if (text.length() > 64) {
                abbr = text.subSequence(0, 64).toString() + "...";
            } else {
                abbr = text.toString();
            }
            if (pos.getErrorIndex() >= 0) {
                throw new DateTimeParseException("Text '" + abbr + "' could not be parsed at index " +
                        pos.getErrorIndex(), text, pos.getErrorIndex());
            } else {
                throw new DateTimeParseException("Text '" + abbr + "' could not be parsed, unparsed text found at index " +
                        pos.getIndex(), text, pos.getIndex());
            }
        }
        return context.toResolved(resolverStyle, resolverFields);
!!!8513666.java!!!	parseUnresolved(inout text : CharSequence, inout position : ParsePosition) : TemporalAccessor
        DateTimeParseContext context = parseUnresolved0(text, position);
        if (context == null) {
            return null;
        }
        return context.toUnresolved();
!!!8513794.java!!!	parseUnresolved0(inout text : CharSequence, inout position : ParsePosition) : DateTimeParseContext
        Objects.requireNonNull(text, "text");
        Objects.requireNonNull(position, "position");
        DateTimeParseContext context = new DateTimeParseContext(this);
        int pos = position.getIndex();
        pos = printerParser.parse(context, text, pos);
        if (pos < 0) {
            position.setErrorIndex(~pos);  // index not updated from input
            return null;
        }
        position.setIndex(pos);  // errorIndex not updated from input
        return context;
!!!8513922.java!!!	toPrinterParser(inout optional : boolean) : DateTimeFormatterBuilder::CompositePrinterParser
        return printerParser.withOptional(optional);
!!!8514050.java!!!	toFormat() : Format
        return new ClassicFormat(this, null);
!!!8514178.java!!!	toFormat(inout parseQuery : TemporalQuery) : Format
        Objects.requireNonNull(parseQuery, "parseQuery");
        return new ClassicFormat(this, parseQuery);
!!!8514306.java!!!	toString() : String
        String pattern = printerParser.toString();
        pattern = pattern.startsWith("[") ? pattern : pattern.substring(1, pattern.length() - 1);
        return pattern;
        // TODO: Fix tests to not depend on toString()
//        return "DateTimeFormatter[" + locale +
//                (chrono != null ? "," + chrono : "") +
//                (zone != null ? "," + zone : "") +
//                pattern + "]";
