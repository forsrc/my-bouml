class StandardMBean
!!!9800450.java!!!	construct(inout implementation : T, inout mbeanInterface : Class, inout nullImplementationAllowed : boolean, inout isMXBean : boolean) : void
        if (implementation == null) {
            // Have to use (T)this rather than mbeanInterface.cast(this)
            // because mbeanInterface might be null.
            if (nullImplementationAllowed)
                implementation = Util.<T>cast(this);
            else throw new IllegalArgumentException("implementation is null");
        }
        if (isMXBean) {
            if (mbeanInterface == null) {
                mbeanInterface = Util.cast(Introspector.getMXBeanInterface(
                        implementation.getClass()));
            }
            this.mbean = new MXBeanSupport(implementation, mbeanInterface);
        } else {
            if (mbeanInterface == null) {
                mbeanInterface = Util.cast(Introspector.getStandardMBeanInterface(
                        implementation.getClass()));
            }
            this.mbean =
                    new StandardMBeanSupport(implementation, mbeanInterface);
        }
!!!9800578.java!!!	StandardMBean(inout implementation : T, inout mbeanInterface : Class)
        construct(implementation, mbeanInterface, false, false);
!!!9800706.java!!!	StandardMBean(inout mbeanInterface : Class)
        construct(null, mbeanInterface, true, false);
!!!9800834.java!!!	StandardMBean(inout implementation : T, inout mbeanInterface : Class, inout isMXBean : boolean)
        try {
            construct(implementation, mbeanInterface, false, isMXBean);
        } catch (NotCompliantMBeanException e) {
            throw new IllegalArgumentException(e);
        }
!!!9800962.java!!!	StandardMBean(inout mbeanInterface : Class, inout isMXBean : boolean)
        try {
            construct(null, mbeanInterface, true, isMXBean);
        } catch (NotCompliantMBeanException e) {
            throw new IllegalArgumentException(e);
        }
!!!9801090.java!!!	setImplementation(inout implementation : Object) : void

        if (implementation == null)
            throw new IllegalArgumentException("implementation is null");

        if (isMXBean()) {
            this.mbean = new MXBeanSupport(implementation,
                    Util.<Class<Object>>cast(getMBeanInterface()));
        } else {
            this.mbean = new StandardMBeanSupport(implementation,
                    Util.<Class<Object>>cast(getMBeanInterface()));
        }
!!!9801218.java!!!	getImplementation() : Object
        return mbean.getResource();
!!!9801346.java!!!	getMBeanInterface() : Class
        return mbean.getMBeanInterface();
!!!9801474.java!!!	getImplementationClass() : Class
        return mbean.getResource().getClass();
!!!9801602.java!!!	getAttribute(inout attribute : String) : Object
        return mbean.getAttribute(attribute);
!!!9801730.java!!!	setAttribute(inout attribute : Attribute) : void
        mbean.setAttribute(attribute);
!!!9801858.java!!!	getAttributes(inout attributes : String [[]]) : AttributeList
        return mbean.getAttributes(attributes);
!!!9801986.java!!!	setAttributes(inout attributes : AttributeList) : AttributeList
        return mbean.setAttributes(attributes);
!!!9802114.java!!!	invoke(inout actionName : String, inout params : Object [[]], inout signature : String [[]]) : Object
        return mbean.invoke(actionName, params, signature);
!!!9802242.java!!!	getMBeanInfo() : MBeanInfo
        try {
            final MBeanInfo cached = getCachedMBeanInfo();
            if (cached != null) return cached;
        } catch (RuntimeException x) {
            if (MISC_LOGGER.isLoggable(Level.FINEST)) {
                MISC_LOGGER.logp(Level.FINEST,
                        MBeanServerFactory.class.getName(), "getMBeanInfo",
                        "Failed to get cached MBeanInfo", x);
            }
        }

        if (MISC_LOGGER.isLoggable(Level.FINER)) {
            MISC_LOGGER.logp(Level.FINER,
                    MBeanServerFactory.class.getName(), "getMBeanInfo",
                    "Building MBeanInfo for " +
                    getImplementationClass().getName());
        }

        MBeanSupport<?> msupport = mbean;
        final MBeanInfo bi = msupport.getMBeanInfo();
        final Object impl = msupport.getResource();

        final boolean immutableInfo = immutableInfo(this.getClass());

        final String                  cname = getClassName(bi);
        final String                  text  = getDescription(bi);
        final MBeanConstructorInfo[]  ctors = getConstructors(bi,impl);
        final MBeanAttributeInfo[]    attrs = getAttributes(bi);
        final MBeanOperationInfo[]    ops   = getOperations(bi);
        final MBeanNotificationInfo[] ntfs  = getNotifications(bi);
        final Descriptor              desc  = getDescriptor(bi, immutableInfo);

        final MBeanInfo nmbi = new MBeanInfo(
                cname, text, attrs, ctors, ops, ntfs, desc);
        try {
            cacheMBeanInfo(nmbi);
        } catch (RuntimeException x) {
            if (MISC_LOGGER.isLoggable(Level.FINEST)) {
                MISC_LOGGER.logp(Level.FINEST,
                        MBeanServerFactory.class.getName(), "getMBeanInfo",
                        "Failed to cache MBeanInfo", x);
            }
        }

        return nmbi;
!!!9802370.java!!!	getClassName(inout info : MBeanInfo) : String
        if (info == null) return getImplementationClass().getName();
        return info.getClassName();
!!!9802498.java!!!	getDescription(inout info : MBeanInfo) : String
        if (info == null) return null;
        return info.getDescription();
!!!9802626.java!!!	getDescription(inout info : MBeanFeatureInfo) : String
        if (info == null) return null;
        return info.getDescription();
!!!9802754.java!!!	getDescription(inout info : MBeanAttributeInfo) : String
        return getDescription((MBeanFeatureInfo)info);
!!!9802882.java!!!	getDescription(inout info : MBeanConstructorInfo) : String
        return getDescription((MBeanFeatureInfo)info);
!!!9803010.java!!!	getDescription(inout ctor : MBeanConstructorInfo, inout param : MBeanParameterInfo, in sequence : int) : String
        if (param == null) return null;
        return param.getDescription();
!!!9803138.java!!!	getParameterName(inout ctor : MBeanConstructorInfo, inout param : MBeanParameterInfo, in sequence : int) : String
        if (param == null) return null;
        return param.getName();
!!!9803266.java!!!	getDescription(inout info : MBeanOperationInfo) : String
        return getDescription((MBeanFeatureInfo)info);
!!!9803394.java!!!	getImpact(inout info : MBeanOperationInfo) : int
        if (info == null) return MBeanOperationInfo.UNKNOWN;
        return info.getImpact();
!!!9803522.java!!!	getParameterName(inout op : MBeanOperationInfo, inout param : MBeanParameterInfo, in sequence : int) : String
        if (param == null) return null;
        return param.getName();
!!!9803650.java!!!	getDescription(inout op : MBeanOperationInfo, inout param : MBeanParameterInfo, in sequence : int) : String
        if (param == null) return null;
        return param.getDescription();
!!!9803778.java!!!	getConstructors(inout ctors : MBeanConstructorInfo [[]], inout impl : Object) : MBeanConstructorInfo
            if (ctors == null) return null;
            if (impl != null && impl != this) return null;
            return ctors;
!!!9803906.java!!!	getNotifications(inout info : MBeanInfo) : MBeanNotificationInfo
        return null;
!!!9804034.java!!!	getDescriptor(inout info : MBeanInfo, inout immutableInfo : boolean) : Descriptor
        ImmutableDescriptor desc;
        if (info == null ||
            info.getDescriptor() == null ||
            info.getDescriptor().getFieldNames().length == 0) {
            final String interfaceClassNameS =
                "interfaceClassName=" + getMBeanInterface().getName();
            final String immutableInfoS =
                "immutableInfo=" + immutableInfo;
            desc = new ImmutableDescriptor(interfaceClassNameS, immutableInfoS);
            desc = descriptors.get(desc);
        } else {
            Descriptor d = info.getDescriptor();
            Map<String,Object> fields = new HashMap<String,Object>();
            for (String fieldName : d.getFieldNames()) {
                if (fieldName.equals("immutableInfo")) {
                    // Replace immutableInfo as the underlying MBean/MXBean
                    // could already implement NotificationBroadcaster and
                    // return immutableInfo=true in its MBeanInfo.
                    fields.put(fieldName, Boolean.toString(immutableInfo));
                } else {
                    fields.put(fieldName, d.getFieldValue(fieldName));
                }
            }
            desc = new ImmutableDescriptor(fields);
        }
        return desc;
!!!9804162.java!!!	getCachedMBeanInfo() : MBeanInfo
        return cachedMBeanInfo;
!!!9804290.java!!!	cacheMBeanInfo(inout info : MBeanInfo) : void
        cachedMBeanInfo = info;
!!!9804418.java!!!	isMXBean() : boolean
        return mbean.isMXBean();
!!!9804546.java!!!	identicalArrays(inout a : T [[]], inout b : T [[]]) : boolean
        if (a == b)
            return true;
        if (a == null || b == null || a.length != b.length)
            return false;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != b[i])
                return false;
        }
        return true;
!!!9804674.java!!!	equal(inout a : T, inout b : T) : boolean
        if (a == b)
            return true;
        if (a == null || b == null)
            return false;
        return a.equals(b);
!!!9804802.java!!!	customize(inout pi : MBeanParameterInfo, inout name : String, inout description : String) : MBeanParameterInfo
        if (equal(name, pi.getName()) &&
                equal(description, pi.getDescription()))
            return pi;
        else if (pi instanceof OpenMBeanParameterInfo) {
            OpenMBeanParameterInfo opi = (OpenMBeanParameterInfo) pi;
            return new OpenMBeanParameterInfoSupport(name,
                                                     description,
                                                     opi.getOpenType(),
                                                     pi.getDescriptor());
        } else {
            return new MBeanParameterInfo(name,
                                          pi.getType(),
                                          description,
                                          pi.getDescriptor());
        }
!!!9804930.java!!!	customize(inout ci : MBeanConstructorInfo, inout description : String, inout signature : MBeanParameterInfo [[]]) : MBeanConstructorInfo
        if (equal(description, ci.getDescription()) &&
                identicalArrays(signature, ci.getSignature()))
            return ci;
        if (ci instanceof OpenMBeanConstructorInfo) {
            OpenMBeanParameterInfo[] oparams =
                paramsToOpenParams(signature);
            return new OpenMBeanConstructorInfoSupport(ci.getName(),
                                                       description,
                                                       oparams,
                                                       ci.getDescriptor());
        } else {
            return new MBeanConstructorInfo(ci.getName(),
                                            description,
                                            signature,
                                            ci.getDescriptor());
        }
!!!9805058.java!!!	customize(inout oi : MBeanOperationInfo, inout description : String, inout signature : MBeanParameterInfo [[]], in impact : int) : MBeanOperationInfo
        if (equal(description, oi.getDescription()) &&
                identicalArrays(signature, oi.getSignature()) &&
                impact == oi.getImpact())
            return oi;
        if (oi instanceof OpenMBeanOperationInfo) {
            OpenMBeanOperationInfo ooi = (OpenMBeanOperationInfo) oi;
            OpenMBeanParameterInfo[] oparams =
                paramsToOpenParams(signature);
            return new OpenMBeanOperationInfoSupport(oi.getName(),
                                                     description,
                                                     oparams,
                                                     ooi.getReturnOpenType(),
                                                     impact,
                                                     oi.getDescriptor());
        } else {
            return new MBeanOperationInfo(oi.getName(),
                                          description,
                                          signature,
                                          oi.getReturnType(),
                                          impact,
                                          oi.getDescriptor());
        }
!!!9805186.java!!!	customize(inout ai : MBeanAttributeInfo, inout description : String) : MBeanAttributeInfo
        if (equal(description, ai.getDescription()))
            return ai;
        if (ai instanceof OpenMBeanAttributeInfo) {
            OpenMBeanAttributeInfo oai = (OpenMBeanAttributeInfo) ai;
            return new OpenMBeanAttributeInfoSupport(ai.getName(),
                                                     description,
                                                     oai.getOpenType(),
                                                     ai.isReadable(),
                                                     ai.isWritable(),
                                                     ai.isIs(),
                                                     ai.getDescriptor());
        } else {
            return new MBeanAttributeInfo(ai.getName(),
                                          ai.getType(),
                                          description,
                                          ai.isReadable(),
                                          ai.isWritable(),
                                          ai.isIs(),
                                          ai.getDescriptor());
        }
!!!9805314.java!!!	paramsToOpenParams(inout params : MBeanParameterInfo [[]]) : OpenMBeanParameterInfo
        if (params instanceof OpenMBeanParameterInfo[])
            return (OpenMBeanParameterInfo[]) params;
        OpenMBeanParameterInfo[] oparams =
            new OpenMBeanParameterInfoSupport[params.length];
        System.arraycopy(params, 0, oparams, 0, params.length);
        return oparams;
!!!9805442.java!!!	getConstructors(inout info : MBeanInfo, inout impl : Object) : MBeanConstructorInfo
        final MBeanConstructorInfo[] ctors =
            getConstructors(info.getConstructors(), impl);
        if (ctors == null)
            return null;
        final int ctorlen = ctors.length;
        final MBeanConstructorInfo[] nctors = new MBeanConstructorInfo[ctorlen];
        for (int i=0; i<ctorlen; i++) {
            final MBeanConstructorInfo c = ctors[i];
            final MBeanParameterInfo[] params = c.getSignature();
            final MBeanParameterInfo[] nps;
            if (params != null) {
                final int plen = params.length;
                nps = new MBeanParameterInfo[plen];
                for (int ii=0;ii<plen;ii++) {
                    MBeanParameterInfo p = params[ii];
                    nps[ii] = customize(p,
                                        getParameterName(c,p,ii),
                                        getDescription(c,p,ii));
                }
            } else {
                nps = null;
            }
            nctors[i] =
                customize(c, getDescription(c), nps);
        }
        return nctors;
!!!9805570.java!!!	getOperations(inout info : MBeanInfo) : MBeanOperationInfo
        final MBeanOperationInfo[] ops = info.getOperations();
        if (ops == null)
            return null;
        final int oplen = ops.length;
        final MBeanOperationInfo[] nops = new MBeanOperationInfo[oplen];
        for (int i=0; i<oplen; i++) {
            final MBeanOperationInfo o = ops[i];
            final MBeanParameterInfo[] params = o.getSignature();
            final MBeanParameterInfo[] nps;
            if (params != null) {
                final int plen = params.length;
                nps = new MBeanParameterInfo[plen];
                for (int ii=0;ii<plen;ii++) {
                    MBeanParameterInfo p = params[ii];
                    nps[ii] = customize(p,
                                        getParameterName(o,p,ii),
                                        getDescription(o,p,ii));
                }
            } else {
                nps = null;
            }
            nops[i] = customize(o, getDescription(o), nps, getImpact(o));
        }
        return nops;
!!!9805698.java!!!	getAttributes(inout info : MBeanInfo) : MBeanAttributeInfo
        final MBeanAttributeInfo[] atts = info.getAttributes();
        if (atts == null)
            return null; // should not happen
        final MBeanAttributeInfo[] natts;
        final int attlen = atts.length;
        natts = new MBeanAttributeInfo[attlen];
        for (int i=0; i<attlen; i++) {
            final MBeanAttributeInfo a = atts[i];
            natts[i] = customize(a, getDescription(a));
        }
        return natts;
!!!9805826.java!!!	preRegister(inout server : MBeanServer, inout name : ObjectName) : ObjectName
        mbean.register(server, name);
        return name;
!!!9805954.java!!!	postRegister(inout registrationDone : Boolean) : void
        if (!registrationDone)
            mbean.unregister();
!!!9806210.java!!!	postDeregister() : void
        mbean.unregister();
!!!9806338.java!!!	immutableInfo(inout subclass : Class) : boolean
        if (subclass == StandardMBean.class ||
            subclass == StandardEmitterMBean.class)
            return true;
        synchronized (mbeanInfoSafeMap) {
            Boolean safe = mbeanInfoSafeMap.get(subclass);
            if (safe == null) {
                try {
                    MBeanInfoSafeAction action =
                        new MBeanInfoSafeAction(subclass);
                    safe = AccessController.doPrivileged(action);
                } catch (Exception e) { // e.g. SecurityException
                    /* We don't know, so we assume it isn't.  */
                    safe = false;
                }
                mbeanInfoSafeMap.put(subclass, safe);
            }
            return safe;
        }
!!!9806466.java!!!	overrides(inout subclass : Class, inout superclass : Class, inout name : String, inout params : Class<?>...) : boolean
        for (Class<?> c = subclass; c != superclass; c = c.getSuperclass()) {
            try {
                c.getDeclaredMethod(name, params);
                return true;
            } catch (NoSuchMethodException e) {
                // OK: this class doesn't override it
            }
        }
        return false;
