class KeyStore
!!!7964162.java!!!	KeyStore(inout keyStoreSpi : KeyStoreSpi, inout provider : Provider, inout type : String)
        this.keyStoreSpi = keyStoreSpi;
        this.provider = provider;
        this.type = type;

        if (!skipDebug && pdebug != null) {
            pdebug.println("KeyStore." + type.toUpperCase() + " type from: " +
                this.provider.getName());
        }
!!!7964290.java!!!	getInstance(inout type : String) : KeyStore
        try {
            Object[] objs = Security.getImpl(type, "KeyStore", (String)null);
            return new KeyStore((KeyStoreSpi)objs[0], (Provider)objs[1], type);
        } catch (NoSuchAlgorithmException nsae) {
            throw new KeyStoreException(type + " not found", nsae);
        } catch (NoSuchProviderException nspe) {
            throw new KeyStoreException(type + " not found", nspe);
        }
!!!7964418.java!!!	getInstance(inout type : String, inout provider : String) : KeyStore
        if (provider == null || provider.length() == 0)
            throw new IllegalArgumentException("missing provider");
        try {
            Object[] objs = Security.getImpl(type, "KeyStore", provider);
            return new KeyStore((KeyStoreSpi)objs[0], (Provider)objs[1], type);
        } catch (NoSuchAlgorithmException nsae) {
            throw new KeyStoreException(type + " not found", nsae);
        }
!!!7964546.java!!!	getInstance(inout type : String, inout provider : Provider) : KeyStore
        if (provider == null)
            throw new IllegalArgumentException("missing provider");
        try {
            Object[] objs = Security.getImpl(type, "KeyStore", provider);
            return new KeyStore((KeyStoreSpi)objs[0], (Provider)objs[1], type);
        } catch (NoSuchAlgorithmException nsae) {
            throw new KeyStoreException(type + " not found", nsae);
        }
!!!7964674.java!!!	getDefaultType() : String
        String kstype;
        kstype = AccessController.doPrivileged(new PrivilegedAction<String>() {
            public String run() {
                return Security.getProperty(KEYSTORE_TYPE);
            }
        });
        if (kstype == null) {
            kstype = "jks";
        }
        return kstype;
!!!7964802.java!!!	getProvider() : Provider
        return this.provider;
!!!7964930.java!!!	getType() : String
        return this.type;
!!!7965058.java!!!	getKey(inout alias : String, inout password : char [[]]) : Key
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineGetKey(alias, password);
!!!7965186.java!!!	getCertificateChain(inout alias : String) : Certificate
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineGetCertificateChain(alias);
!!!7965314.java!!!	getCertificate(inout alias : String) : Certificate
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineGetCertificate(alias);
!!!7965442.java!!!	getCreationDate(inout alias : String) : Date
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineGetCreationDate(alias);
!!!7965570.java!!!	setKeyEntry(inout alias : String, inout key : Key, inout password : char [[]], inout chain : Certificate [[]]) : void
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        if ((key instanceof PrivateKey) &&
            (chain == null || chain.length == 0)) {
            throw new IllegalArgumentException("Private key must be "
                                               + "accompanied by certificate "
                                               + "chain");
        }
        keyStoreSpi.engineSetKeyEntry(alias, key, password, chain);
!!!7965698.java!!!	setKeyEntry(inout alias : String, inout key : byte [[]], inout chain : Certificate [[]]) : void
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        keyStoreSpi.engineSetKeyEntry(alias, key, chain);
!!!7965826.java!!!	setCertificateEntry(inout alias : String, inout cert : Certificate) : void
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        keyStoreSpi.engineSetCertificateEntry(alias, cert);
!!!7965954.java!!!	deleteEntry(inout alias : String) : void
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        keyStoreSpi.engineDeleteEntry(alias);
!!!7966082.java!!!	aliases() : Enumeration
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineAliases();
!!!7966210.java!!!	containsAlias(inout alias : String) : boolean
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineContainsAlias(alias);
!!!7966338.java!!!	size() : int
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineSize();
!!!7966466.java!!!	isKeyEntry(inout alias : String) : boolean
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineIsKeyEntry(alias);
!!!7966594.java!!!	isCertificateEntry(inout alias : String) : boolean
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineIsCertificateEntry(alias);
!!!7966722.java!!!	getCertificateAlias(inout cert : Certificate) : String
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineGetCertificateAlias(cert);
!!!7966850.java!!!	store(inout stream : OutputStream, inout password : char [[]]) : void
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        keyStoreSpi.engineStore(stream, password);
!!!7966978.java!!!	store(inout param : KeyStore::LoadStoreParameter) : void
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        keyStoreSpi.engineStore(param);
!!!7967106.java!!!	load(inout stream : InputStream, inout password : char [[]]) : void
        keyStoreSpi.engineLoad(stream, password);
        initialized = true;
!!!7967234.java!!!	load(inout param : KeyStore::LoadStoreParameter) : void

        keyStoreSpi.engineLoad(param);
        initialized = true;
!!!7967362.java!!!	getEntry(inout alias : String, inout protParam : KeyStore::ProtectionParameter) : KeyStore::Entry

        if (alias == null) {
            throw new NullPointerException("invalid null input");
        }
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineGetEntry(alias, protParam);
!!!7967490.java!!!	setEntry(inout alias : String, inout entry : KeyStore::Entry, inout protParam : KeyStore::ProtectionParameter) : void
        if (alias == null || entry == null) {
            throw new NullPointerException("invalid null input");
        }
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        keyStoreSpi.engineSetEntry(alias, entry, protParam);
!!!7967618.java!!!	entryInstanceOf(inout alias : String, inout entryClass : Class) : boolean

        if (alias == null || entryClass == null) {
            throw new NullPointerException("invalid null input");
        }
        if (!initialized) {
            throw new KeyStoreException("Uninitialized keystore");
        }
        return keyStoreSpi.engineEntryInstanceOf(alias, entryClass);
