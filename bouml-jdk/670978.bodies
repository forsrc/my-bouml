class XMLAttributesImpl
!!!5098370.java!!!	XMLAttributesImpl()
        this(TABLE_SIZE);
!!!5098498.java!!!	XMLAttributesImpl(in tableSize : int)
        fTableViewBuckets = tableSize;
        for (int i = 0; i < fAttributes.length; i++) {
            fAttributes[i] = new Attribute();
        }
!!!5098626.java!!!	setNamespaces(inout namespaces : boolean) : void
        fNamespaces = namespaces;
!!!5098754.java!!!	addAttribute(inout name : QName, inout type : String, inout value : String) : int
      return addAttribute(name,type,value,null);
!!!5098882.java!!!	addAttribute(inout name : QName, inout type : String, inout value : String, inout valueCache : XMLString) : int

        int index;
        if (fLength < SIZE_LIMIT) {
            index = name.uri != null && !name.uri.equals("")
                ? getIndexFast(name.uri, name.localpart)
                : getIndexFast(name.rawname);

            if (index == -1) {
                index = fLength;
                if (fLength++ == fAttributes.length) {
                    Attribute[] attributes = new Attribute[fAttributes.length + 4];
                    System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
                    for (int i = fAttributes.length; i < attributes.length; i++) {
                        attributes[i] = new Attribute();
                    }
                    fAttributes = attributes;
                }
            }
        }
        else if (name.uri == null ||
            name.uri.length() == 0 ||
            (index = getIndexFast(name.uri, name.localpart)) == -1) {

            /**
             * If attributes were removed from the list after the table
             * becomes in use this isn't reflected in the table view. It's
             * assumed that once a user starts removing attributes they're
             * not likely to add more. We only make the view consistent if
             * the user of this class adds attributes, removes them, and
             * then adds more.
             */
            if (!fIsTableViewConsistent || fLength == SIZE_LIMIT ||
                (fLength > SIZE_LIMIT && fLength > fTableViewBuckets)) {
                prepareAndPopulateTableView();
                fIsTableViewConsistent = true;
            }

            int bucket = getTableViewBucket(name.rawname);

            // The chain is stale.
            // This must be a unique attribute.
            if (fAttributeTableViewChainState[bucket] != fLargeCount) {
                index = fLength;
                if (fLength++ == fAttributes.length) {
                    Attribute[] attributes = new Attribute[fAttributes.length << 1];
                    System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
                    for (int i = fAttributes.length; i < attributes.length; i++) {
                        attributes[i] = new Attribute();
                    }
                    fAttributes = attributes;
                }

                // Update table view.
                fAttributeTableViewChainState[bucket] = fLargeCount;
                fAttributes[index].next = null;
                fAttributeTableView[bucket] = fAttributes[index];
            }
            // This chain is active.
            // We need to check if any of the attributes has the same rawname.
            else {
                // Search the table.
                int collisionCount = 0;
                Attribute found = fAttributeTableView[bucket];
                while (found != null) {
                    if (found.name.rawname == name.rawname) {
                        break;
                    }
                    found = found.next;
                    ++collisionCount;
                }
                // This attribute is unique.
                if (found == null) {
                    index = fLength;
                    if (fLength++ == fAttributes.length) {
                        Attribute[] attributes = new Attribute[fAttributes.length << 1];
                        System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
                        for (int i = fAttributes.length; i < attributes.length; i++) {
                            attributes[i] = new Attribute();
                        }
                        fAttributes = attributes;
                    }

                    // Select a new hash function and rehash the table view
                    // if the collision threshold is exceeded.
                    if (collisionCount >= MAX_HASH_COLLISIONS) {
                        // The current attribute will be processed in the rehash.
                        // Need to set its name first.
                        fAttributes[index].name.setValues(name);
                        rebalanceTableView(fLength);
                    }
                    else {
                        // Update table view
                        fAttributes[index].next = fAttributeTableView[bucket];
                        fAttributeTableView[bucket] = fAttributes[index];
                    }
                }
                // Duplicate. We still need to find the index.
                else {
                    index = getIndexFast(name.rawname);
                }
            }
        }

        // set values
        Attribute attribute = fAttributes[index];
        attribute.name.setValues(name);
        attribute.type = type;
        attribute.value = value;
        attribute.xmlValue = valueCache;
        attribute.nonNormalizedValue = value;
        attribute.specified = false;

        // clear augmentations
        if(attribute.augs != null)
            attribute.augs.removeAllItems();

        return index;

!!!5099010.java!!!	removeAllAttributes() : void
        fLength = 0;
!!!5099138.java!!!	removeAttributeAt(in attrIndex : int) : void
        fIsTableViewConsistent = false;
        if (attrIndex < fLength - 1) {
            Attribute removedAttr = fAttributes[attrIndex];
            System.arraycopy(fAttributes, attrIndex + 1,
                             fAttributes, attrIndex, fLength - attrIndex - 1);
            // Make the discarded Attribute object available for re-use
            // by tucking it after the Attributes that are still in use
            fAttributes[fLength-1] = removedAttr;
        }
        fLength--;
!!!5099266.java!!!	setName(in attrIndex : int, inout attrName : QName) : void
        fAttributes[attrIndex].name.setValues(attrName);
!!!5099394.java!!!	getName(in attrIndex : int, inout attrName : QName) : void
        attrName.setValues(fAttributes[attrIndex].name);
!!!5099522.java!!!	setType(in attrIndex : int, inout attrType : String) : void
        fAttributes[attrIndex].type = attrType;
!!!5099650.java!!!	setValue(in attrIndex : int, inout attrValue : String) : void
        setValue(attrIndex,attrValue,null);
!!!5099778.java!!!	setValue(in attrIndex : int, inout attrValue : String, inout value : XMLString) : void
        Attribute attribute = fAttributes[attrIndex];
        attribute.value = attrValue;
        attribute.nonNormalizedValue = attrValue;
        attribute.xmlValue = value;
!!!5099906.java!!!	setNonNormalizedValue(in attrIndex : int, inout attrValue : String) : void
        if (attrValue == null) {
            attrValue = fAttributes[attrIndex].value;
        }
        fAttributes[attrIndex].nonNormalizedValue = attrValue;
!!!5100034.java!!!	getNonNormalizedValue(in attrIndex : int) : String
        String value = fAttributes[attrIndex].nonNormalizedValue;
        return value;
!!!5100162.java!!!	setSpecified(in attrIndex : int, inout specified : boolean) : void
        fAttributes[attrIndex].specified = specified;
!!!5100290.java!!!	isSpecified(in attrIndex : int) : boolean
        return fAttributes[attrIndex].specified;
!!!5100418.java!!!	getLength() : int
        return fLength;
!!!5100546.java!!!	getType(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        return getReportableType(fAttributes[index].type);
!!!5100674.java!!!	getType(inout qname : String) : String
        int index = getIndex(qname);
        return index != -1 ? getReportableType(fAttributes[index].type) : null;
!!!5100802.java!!!	getValue(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        if(fAttributes[index].value == null && fAttributes[index].xmlValue != null)
            fAttributes[index].value = fAttributes[index].xmlValue.toString();
        return fAttributes[index].value;
!!!5100930.java!!!	getValue(inout qname : String) : String
        int index = getIndex(qname);
        if(index == -1 )
            return null;
        if(fAttributes[index].value == null)
            fAttributes[index].value = fAttributes[index].xmlValue.toString();
        return fAttributes[index].value;
!!!5101058.java!!!	getName(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        return fAttributes[index].name.rawname;
!!!5101186.java!!!	getIndex(inout qName : String) : int
        for (int i = 0; i < fLength; i++) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.rawname != null &&
                attribute.name.rawname.equals(qName)) {
                return i;
            }
        }
        return -1;
!!!5101314.java!!!	getIndex(inout uri : String, inout localPart : String) : int
        for (int i = 0; i < fLength; i++) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.localpart != null &&
                attribute.name.localpart.equals(localPart) &&
                ((uri==attribute.name.uri) ||
            (uri!=null && attribute.name.uri!=null && attribute.name.uri.equals(uri)))) {
                return i;
            }
        }
        return -1;
!!!5101442.java!!!	getIndexByLocalName(inout localPart : String) : int
        for (int i = 0; i < fLength; i++) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.localpart != null &&
                attribute.name.localpart.equals(localPart)) {
                return i;
            }
        }
        return -1;
!!!5101570.java!!!	getLocalName(in index : int) : String
        if (!fNamespaces) {
            return "";
        }
        if (index < 0 || index >= fLength) {
            return null;
        }
        return fAttributes[index].name.localpart;
!!!5101698.java!!!	getQName(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        String rawname = fAttributes[index].name.rawname;
        return rawname != null ? rawname : "";
!!!5101826.java!!!	getQualifiedName(in index : int) : QName
        if (index < 0 || index >= fLength) {
            return null;
        }
        return fAttributes[index].name;
!!!5101954.java!!!	getType(inout uri : String, inout localName : String) : String
        if (!fNamespaces) {
            return null;
        }
        int index = getIndex(uri, localName);
        return index != -1 ? getType(index) : null;
!!!5102082.java!!!	getIndexFast(inout qName : String) : int
        for (int i = 0; i < fLength; ++i) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.rawname == qName) {
                return i;
            }
        }
        return -1;
!!!5102210.java!!!	addAttributeNS(inout name : QName, inout type : String, inout value : String) : void
        int index = fLength;
        if (fLength++ == fAttributes.length) {
            Attribute[] attributes;
            if (fLength < SIZE_LIMIT) {
                attributes = new Attribute[fAttributes.length + 4];
            }
            else {
                attributes = new Attribute[fAttributes.length << 1];
            }
            System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
            for (int i = fAttributes.length; i < attributes.length; i++) {
                attributes[i] = new Attribute();
            }
            fAttributes = attributes;
        }

        // set values
        Attribute attribute = fAttributes[index];
        attribute.name.setValues(name);
        attribute.type = type;
        attribute.value = value;
        attribute.nonNormalizedValue = value;
        attribute.specified = false;

        // clear augmentations
        attribute.augs.removeAllItems();
!!!5102338.java!!!	checkDuplicatesNS() : QName
        // If the list is small check for duplicates using pairwise comparison.
        final int length = fLength;
        if (length <= SIZE_LIMIT) {
            final Attribute[] attributes = fAttributes;
            for (int i = 0; i < length - 1; ++i) {
                Attribute att1 = attributes[i];
                for (int j = i + 1; j < length; ++j) {
                    Attribute att2 = attributes[j];
                    if (att1.name.localpart == att2.name.localpart &&
                        att1.name.uri == att2.name.uri) {
                        return att2.name;
                    }
                }
            }
            return null;
        }
        // If the list is large check duplicates using a hash table.
        else {
            return checkManyDuplicatesNS();
        }
!!!5102466.java!!!	checkManyDuplicatesNS() : QName
        // We don't want this table view to be read if someone calls
        // addAttribute so we invalidate it up front.
        fIsTableViewConsistent = false;

        prepareTableView();

        Attribute attr;
        int bucket;

        final int length = fLength;
        final Attribute[] attributes = fAttributes;
        final Attribute[] attributeTableView = fAttributeTableView;
        final int[] attributeTableViewChainState = fAttributeTableViewChainState;
        int largeCount = fLargeCount;

        for (int i = 0; i < length; ++i) {
            attr = attributes[i];
            bucket = getTableViewBucket(attr.name.localpart, attr.name.uri);

            // The chain is stale.
            // This must be a unique attribute.
            if (attributeTableViewChainState[bucket] != largeCount) {
                attributeTableViewChainState[bucket] = largeCount;
                attr.next = null;
                attributeTableView[bucket] = attr;
            }
            // This chain is active.
            // We need to check if any of the attributes has the same name.
            else {
                // Search the table.
                int collisionCount = 0;
                Attribute found = attributeTableView[bucket];
                while (found != null) {
                    if (found.name.localpart == attr.name.localpart &&
                        found.name.uri == attr.name.uri) {
                        return attr.name;
                    }
                    found = found.next;
                    ++collisionCount;
                }
                // Select a new hash function and rehash the table view
                // if the collision threshold is exceeded.
                if (collisionCount >= MAX_HASH_COLLISIONS) {
                    // The current attribute will be processed in the rehash.
                    rebalanceTableViewNS(i+1);
                    largeCount = fLargeCount;
                }
                else {
                    // Update table view
                    attr.next = attributeTableView[bucket];
                    attributeTableView[bucket] = attr;
                }
            }
        }
        return null;
!!!5102594.java!!!	getIndexFast(inout uri : String, inout localPart : String) : int
        for (int i = 0; i < fLength; ++i) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.localpart == localPart &&
                attribute.name.uri == uri) {
                return i;
            }
        }
        return -1;
!!!5102722.java!!!	getReportableType(inout type : String) : String

        if (type.charAt(0) == '(') {
            return "NMTOKEN";
        }
        return type;
!!!5102850.java!!!	getTableViewBucket(inout qname : String) : int
        return (hash(qname) & 0x7FFFFFFF) % fTableViewBuckets;
!!!5102978.java!!!	getTableViewBucket(inout localpart : String, inout uri : String) : int
        if (uri == null) {
            return (hash(localpart) & 0x7FFFFFFF) % fTableViewBuckets;
        }
        else {
            return (hash(localpart, uri) & 0x7FFFFFFF) % fTableViewBuckets;
        }
!!!5103106.java!!!	hash(inout localpart : String) : int
        if (fHashMultipliers == null) {
            return localpart.hashCode();
        }
        return hash0(localpart);
!!!5103234.java!!!	hash(inout localpart : String, inout uri : String) : int
        if (fHashMultipliers == null) {
            return localpart.hashCode() + uri.hashCode() * 31;
        }
        return hash0(localpart) + hash0(uri) * fHashMultipliers[MULTIPLIERS_SIZE];
!!!5103362.java!!!	hash0(inout symbol : String) : int
        int code = 0;
        final int length = symbol.length();
        final int[] multipliers = fHashMultipliers;
        for (int i = 0; i < length; ++i) {
            code = code * multipliers[i & MULTIPLIERS_MASK] + symbol.charAt(i);
        }
        return code;
!!!5103490.java!!!	cleanTableView() : void
        if (++fLargeCount < 0) {
            // Overflow. We actually need to visit the chain state array.
            if (fAttributeTableViewChainState != null) {
                for (int i = fTableViewBuckets - 1; i >= 0; --i) {
                    fAttributeTableViewChainState[i] = 0;
                }
            }
            fLargeCount = 1;
        }
!!!5103618.java!!!	growTableView() : void
        final int length = fLength;
        int tableViewBuckets = fTableViewBuckets;
        do {
            tableViewBuckets = (tableViewBuckets << 1) + 1;
            if (tableViewBuckets < 0) {
                tableViewBuckets = Integer.MAX_VALUE;
                break;
            }
        }
       while (length > tableViewBuckets);
        fTableViewBuckets = tableViewBuckets;
        fAttributeTableView = null;
        fLargeCount = 1;
!!!5103746.java!!!	prepareTableView() : void
        if (fLength > fTableViewBuckets) {
            growTableView();
        }
        if (fAttributeTableView == null) {
            fAttributeTableView = new Attribute[fTableViewBuckets];
            fAttributeTableViewChainState = new int[fTableViewBuckets];
        }
        else {
            cleanTableView();
        }
!!!5103874.java!!!	prepareAndPopulateTableView() : void
        prepareAndPopulateTableView(fLength);
!!!5104002.java!!!	prepareAndPopulateTableView(in count : int) : void
        prepareTableView();
        // Need to populate the hash table with the attributes we've processed so far.
        Attribute attr;
        int bucket;
        for (int i = 0; i < count; ++i) {
            attr = fAttributes[i];
            bucket = getTableViewBucket(attr.name.rawname);
            if (fAttributeTableViewChainState[bucket] != fLargeCount) {
                fAttributeTableViewChainState[bucket] = fLargeCount;
                attr.next = null;
                fAttributeTableView[bucket] = attr;
            }
            else {
                // Update table view
                attr.next = fAttributeTableView[bucket];
                fAttributeTableView[bucket] = attr;
            }
        }
!!!5104130.java!!!	getPrefix(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        String prefix = fAttributes[index].name.prefix;
        // REVISIT: The empty string is not entered in the symbol table!
        return prefix != null ? prefix : "";
!!!5104258.java!!!	getURI(in index : int) : String
        if (index < 0 || index >= fLength) {
            return null;
        }
        String uri = fAttributes[index].name.uri;
        return uri;
!!!5104386.java!!!	getValue(inout uri : String, inout localName : String) : String
        int index = getIndex(uri, localName);
        return index != -1 ? getValue(index) : null;
!!!5104514.java!!!	getAugmentations(inout uri : String, inout localName : String) : Augmentations
        int index = getIndex(uri, localName);
        return index != -1 ? fAttributes[index].augs : null;
!!!5104642.java!!!	getAugmentations(inout qName : String) : Augmentations
        int index = getIndex(qName);
        return index != -1 ? fAttributes[index].augs : null;
!!!5104770.java!!!	getAugmentations(in attributeIndex : int) : Augmentations
        if (attributeIndex < 0 || attributeIndex >= fLength) {
            return null;
        }
        return fAttributes[attributeIndex].augs;
!!!5104898.java!!!	setAugmentations(in attrIndex : int, inout augs : Augmentations) : void
        fAttributes[attrIndex].augs = augs;
!!!5105026.java!!!	setURI(in attrIndex : int, inout uri : String) : void
        fAttributes[attrIndex].name.uri = uri;
!!!5105154.java!!!	setSchemaId(in attrIndex : int, inout schemaId : boolean) : void
        fAttributes[attrIndex].schemaId = schemaId;
!!!5105282.java!!!	getSchemaId(in index : int) : boolean
        if (index < 0 || index >= fLength) {
            return false;
        }
        return fAttributes[index].schemaId;
!!!5105410.java!!!	getSchemaId(inout qname : String) : boolean
        int index = getIndex(qname);
        return index != -1 ? fAttributes[index].schemaId : false;
!!!5105538.java!!!	getSchemaId(inout uri : String, inout localName : String) : boolean
        if (!fNamespaces) {
            return false;
        }
        int index = getIndex(uri, localName);
        return index != -1 ? fAttributes[index].schemaId : false;
!!!5105666.java!!!	refresh() : void
        if(fLength > 0){
            for(int i = 0 ; i < fLength ; i++){
                getValue(i);
            }
        }
!!!5105922.java!!!	prepareAndPopulateTableViewNS(in count : int) : void
        prepareTableView();
        // Need to populate the hash table with the attributes we've processed so far.
        Attribute attr;
        int bucket;
        for (int i = 0; i < count; ++i) {
            attr = fAttributes[i];
            bucket = getTableViewBucket(attr.name.localpart, attr.name.uri);
            if (fAttributeTableViewChainState[bucket] != fLargeCount) {
                fAttributeTableViewChainState[bucket] = fLargeCount;
                attr.next = null;
                fAttributeTableView[bucket] = attr;
            }
            else {
                // Update table view
                attr.next = fAttributeTableView[bucket];
                fAttributeTableView[bucket] = attr;
            }
        }
!!!5106050.java!!!	rebalanceTableView(in count : int) : void
        if (fHashMultipliers == null) {
            fHashMultipliers = new int[MULTIPLIERS_SIZE + 1];
        }
        PrimeNumberSequenceGenerator.generateSequence(fHashMultipliers);
        prepareAndPopulateTableView(count);
!!!5106178.java!!!	rebalanceTableViewNS(in count : int) : void
        if (fHashMultipliers == null) {
            fHashMultipliers = new int[MULTIPLIERS_SIZE + 1];
        }
        PrimeNumberSequenceGenerator.generateSequence(fHashMultipliers);
        prepareAndPopulateTableViewNS(count);
