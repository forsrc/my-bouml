class StringMonitor
!!!9866370.java!!!	start() : void
        if (isActive()) {
            MONITOR_LOGGER.logp(Level.FINER, StringMonitor.class.getName(),
                    "start", "the monitor is already active");
            return;
        }
        // Reset values.
        //
        for (ObservedObject o : observedObjects) {
            final StringMonitorObservedObject smo =
                (StringMonitorObservedObject) o;
            smo.setStatus(MATCHING_OR_DIFFERING);
        }
        doStart();
!!!9866498.java!!!	stop() : void
        doStop();
!!!9866626.java!!!	getDerivedGauge(inout object : ObjectName) : String
        return (String) super.getDerivedGauge(object);
!!!9866754.java!!!	getDerivedGaugeTimeStamp(inout object : ObjectName) : long
        return super.getDerivedGaugeTimeStamp(object);
!!!9866882.java!!!	getDerivedGauge() : String
        if (observedObjects.isEmpty()) {
            return null;
        } else {
            return (String) observedObjects.get(0).getDerivedGauge();
        }
!!!9867010.java!!!	getDerivedGaugeTimeStamp() : long
        if (observedObjects.isEmpty()) {
            return 0;
        } else {
            return observedObjects.get(0).getDerivedGaugeTimeStamp();
        }
!!!9867138.java!!!	getStringToCompare() : String
        return stringToCompare;
!!!9867266.java!!!	setStringToCompare(inout value : String) : void

        if (value == null) {
            throw new IllegalArgumentException("Null string to compare");
        }

        if (stringToCompare.equals(value))
            return;
        stringToCompare = value;

        // Reset values.
        //
        for (ObservedObject o : observedObjects) {
            final StringMonitorObservedObject smo =
                (StringMonitorObservedObject) o;
            smo.setStatus(MATCHING_OR_DIFFERING);
        }
!!!9867394.java!!!	getNotifyMatch() : boolean
        return notifyMatch;
!!!9867522.java!!!	setNotifyMatch(inout value : boolean) : void
        if (notifyMatch == value)
            return;
        notifyMatch = value;
!!!9867650.java!!!	getNotifyDiffer() : boolean
        return notifyDiffer;
!!!9867778.java!!!	setNotifyDiffer(inout value : boolean) : void
        if (notifyDiffer == value)
            return;
        notifyDiffer = value;
!!!9867906.java!!!	getNotificationInfo() : MBeanNotificationInfo
        return notifsInfo.clone();
!!!9868034.java!!!	createObservedObject(inout object : ObjectName) : Monitor::ObservedObject
        final StringMonitorObservedObject smo =
            new StringMonitorObservedObject(object);
        smo.setStatus(MATCHING_OR_DIFFERING);
        return smo;
!!!9868162.java!!!	isComparableTypeValid(inout object : ObjectName, inout attribute : String, inout value : Comparable) : boolean
        // Check that the observed attribute is of type "String".
        //
        if (value instanceof String) {
            return true;
        }
        return false;
!!!9868290.java!!!	onErrorNotification(inout notification : MonitorNotification) : void
        final StringMonitorObservedObject o = (StringMonitorObservedObject)
            getObservedObject(notification.getObservedObject());
        if (o == null)
            return;

        // Reset values.
        //
        o.setStatus(MATCHING_OR_DIFFERING);
!!!9868418.java!!!	buildAlarmNotification(inout object : ObjectName, inout attribute : String, inout value : Comparable) : MonitorNotification
        String type = null;
        String msg = null;
        Object trigger = null;

        final StringMonitorObservedObject o =
            (StringMonitorObservedObject) getObservedObject(object);
        if (o == null)
            return null;

        // Send matching notification if notifyMatch is true.
        // Send differing notification if notifyDiffer is true.
        //
        if (o.getStatus() == MATCHING_OR_DIFFERING) {
            if (o.getDerivedGauge().equals(stringToCompare)) {
                if (notifyMatch) {
                    type = STRING_TO_COMPARE_VALUE_MATCHED;
                    msg = "";
                    trigger = stringToCompare;
                }
                o.setStatus(DIFFERING);
            } else {
                if (notifyDiffer) {
                    type = STRING_TO_COMPARE_VALUE_DIFFERED;
                    msg = "";
                    trigger = stringToCompare;
                }
                o.setStatus(MATCHING);
            }
        } else {
            if (o.getStatus() == MATCHING) {
                if (o.getDerivedGauge().equals(stringToCompare)) {
                    if (notifyMatch) {
                        type = STRING_TO_COMPARE_VALUE_MATCHED;
                        msg = "";
                        trigger = stringToCompare;
                    }
                    o.setStatus(DIFFERING);
                }
            } else if (o.getStatus() == DIFFERING) {
                if (!o.getDerivedGauge().equals(stringToCompare)) {
                    if (notifyDiffer) {
                        type = STRING_TO_COMPARE_VALUE_DIFFERED;
                        msg = "";
                        trigger = stringToCompare;
                    }
                    o.setStatus(MATCHING);
                }
            }
        }

        return new MonitorNotification(type,
                                       this,
                                       0,
                                       0,
                                       msg,
                                       null,
                                       null,
                                       null,
                                       trigger);
