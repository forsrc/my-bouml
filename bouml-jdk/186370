format 222
"rowset" // jdk1.8::javax::sql::rowset
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/sql/rowset/"
  java_package "javax.sql.rowset"
  classview 179330 "rowset"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1258498 "BaseRowSet"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract class providing a <code>RowSet</code> object with its basic functionality.
The basic functions include having properties and sending event notifications,
which all JavaBeans&trade; components must implement.

<h3>1.0 Overview</h3>
The <code>BaseRowSet</code> class provides the core functionality
for all <code>RowSet</code> implementations,
and all standard implementations <b>may</b> use this class in combination with
one or more <code>RowSet</code> interfaces in order to provide a standard
vendor-specific implementation.  To clarify, all implementations must implement
at least one of the <code>RowSet</code> interfaces (<code>JdbcRowSet</code>,
<code>CachedRowSet</code>, <code>JoinRowSet</code>, <code>FilteredRowSet</code>,
or <code>WebRowSet</code>). This means that any implementation that extends
the <code>BaseRowSet</code> class must also implement one of the <code>RowSet</code>
interfaces.
<p>
The <code>BaseRowSet</code> class provides the following:

<UL>
<LI><b>Properties</b>
    <ul>
    <li>Fields for storing current properties
    <li>Methods for getting and setting properties
    </ul>

<LI><b>Event notification</b>

<LI><b>A complete set of setter methods</b> for setting the parameters in a
     <code>RowSet</code> object's command

<LI> <b>Streams</b>
 <ul>
 <li>Fields for storing stream instances
 <li>Constants for indicating the type of a stream
 </ul>
 <p>
</UL>

<h3>2.0 Setting Properties</h3>
All rowsets maintain a set of properties, which will usually be set using
a tool.  The number and kinds of properties a rowset has will vary,
depending on what the <code>RowSet</code> implementation does and how it gets
its data.  For example,
rowsets that get their data from a <code>ResultSet</code> object need to
set the properties that are required for making a database connection.
If a <code>RowSet</code> object uses the <code>DriverManager</code> facility to make a
connection, it needs to set a property for the JDBC URL that identifies the
appropriate driver, and it needs to set the properties that give the
user name and password.
If, on the other hand, the rowset uses a <code>DataSource</code> object
to make the connection, which is the preferred method, it does not need to
set the property for the JDBC URL.  Instead, it needs to set the property
for the logical name of the data source along with the properties for
the user name and password.
<P>
NOTE:  In order to use a <code>DataSource</code> object for making a
connection, the <code>DataSource</code> object must have been registered
with a naming service that uses the Java Naming and Directory
Interface&trade; (JNDI) API.  This registration
is usually done by a person acting in the capacity of a system administrator.

<h3>3.0 Setting the Command and Its Parameters</h3>
When a rowset gets its data from a relational database, it executes a command (a query)
that produces a <code>ResultSet</code> object.  This query is the command that is set
for the <code>RowSet</code> object's command property.  The rowset populates itself with data by reading the
data from the <code>ResultSet</code> object into itself. If the query
contains placeholders for values to be set, the <code>BaseRowSet</code> setter methods
are used to set these values. All setter methods allow these values to be set
to <code>null</code> if required.
<P>
The following code fragment illustrates how the
<code>CachedRowSet</code>&trade;
object <code>crs</code> might have its command property set.  Note that if a
tool is used to set properties, this is the code that the tool would use.
<PRE>{@code
   crs.setCommand(\"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS\" +
                  \"WHERE CREDIT_LIMIT > ? AND REGION = ?\");
}</PRE>
<P>
In this example, the values for <code>CREDIT_LIMIT</code> and
<code>REGION</code> are placeholder parameters, which are indicated with a
question mark (?).  The first question mark is placeholder parameter number
<code>1</code>, the second question mark is placeholder parameter number
<code>2</code>, and so on.  Any placeholder parameters must be set with
values before the query can be executed. To set these
placeholder parameters, the <code>BaseRowSet</code> class provides a set of setter
methods, similar to those provided by the <code>PreparedStatement</code>
interface, for setting values of each data type.  A <code>RowSet</code> object stores the
parameter values internally, and its <code>execute</code> method uses them internally
to set values for the placeholder parameters
before it sends the command to the DBMS to be executed.
<P>
The following code fragment demonstrates
setting the two parameters in the query from the previous example.
<PRE>{@code
   crs.setInt(1, 5000);
   crs.setString(2, \"West\");
}</PRE>
If the <code>execute</code> method is called at this point, the query
sent to the DBMS will be:
<PRE>{@code
   \"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS\" +
                  \"WHERE CREDIT_LIMIT > 5000 AND REGION = 'West'\"
}</PRE>
NOTE: Setting <code>Array</code>, <code>Clob</code>, <code>Blob</code> and
<code>Ref</code> objects as a command parameter, stores these values as
<code>SerialArray</code>, <code>SerialClob</code>, <code>SerialBlob</code>
and <code>SerialRef</code> objects respectively.

<h3>4.0 Handling of Parameters Behind the Scenes</h3>

NOTE: The <code>BaseRowSet</code> class provides two kinds of setter methods,
those that set properties and those that set placeholder parameters. The setter
methods discussed in this section are those that set placeholder parameters.
<P>
The placeholder parameters set with the <code>BaseRowSet</code> setter methods
are stored as objects in an internal <code>Hashtable</code> object.
Primitives are stored as their <code>Object</code> type. For example, <code>byte</code>
is stored as <code>Byte</code> object, and <code>int</code> is stored as
an <code>Integer</code> object.
When the method <code>execute</code> is called, the values in the
<code>Hashtable</code> object are substituted for the appropriate placeholder
parameters in the command.
<P>
A call to the method <code>getParams</code> returns the values stored in the
<code>Hashtable</code> object as an array of <code>Object</code> instances.
An element in this array may be a simple <code>Object</code> instance or an
array (which is a type of <code>Object</code>). The particular setter method used
determines whether an element in this array is an <code>Object</code> or an array.
<P>
The majority of methods for setting placeholder parameters take two parameters,
 with the first parameter
indicating which placeholder parameter is to be set, and the second parameter
giving the value to be set.  Methods such as <code>setInt</code>,
<code>setString</code>, <code>setBoolean</code>, and <code>setLong</code> fall into
this category.  After these methods have been called, a call to the method
<code>getParams</code> will return an array with the values that have been set. Each
element in the array is an <code>Object</code> instance representing the
values that have been set. The order of these values in the array is determined by the
<code>int</code> (the first parameter) passed to the setter method. The values in the
array are the values (the second parameter) passed to the setter method.
In other words, the first element in the array is the value
to be set for the first placeholder parameter in the <code>RowSet</code> object's
command. The second element is the value to
be set for the second placeholder parameter, and so on.
<P>
Several setter methods send the driver and DBMS information beyond the value to be set.
When the method <code>getParams</code> is called after one of these setter methods has
been used, the elements in the array will themselves be arrays to accommodate the
additional information. In this category, the method <code>setNull</code> is a special case
because one version takes only
two parameters (<code>setNull(int parameterIndex, int SqlType)</code>). Nevertheless,
it requires
an array to contain the information that will be passed to the driver and DBMS.  The first
element in this array is the value to be set, which is <code>null</code>, and the
second element is the <code>int</code> supplied for <i>sqlType</i>, which
indicates the type of SQL value that is being set to <code>null</code>. This information
is needed by some DBMSs and is therefore required in order to ensure that applications
are portable.
The other version is intended to be used when the value to be set to <code>null</code>
is a user-defined type. It takes three parameters
(<code>setNull(int parameterIndex, int sqlType, String typeName)</code>) and also
requires an array to contain the information to be passed to the driver and DBMS.
The first two elements in this array are the same as for the first version of
<code>setNull</code>.  The third element, <i>typeName</i>, gives the SQL name of
the user-defined type. As is true with the other setter methods, the number of the
placeholder parameter to be set is indicated by an element's position in the array
returned by <code>getParams</code>.  So, for example, if the parameter
supplied to <code>setNull</code> is <code>2</code>, the second element in the array
returned by <code>getParams</code> will be an array of two or three elements.
<P>
Some methods, such as <code>setObject</code> and <code>setDate</code> have versions
that take more than two parameters, with the extra parameters giving information
to the driver or the DBMS. For example, the methods <code>setDate</code>,
<code>setTime</code>, and <code>setTimestamp</code> can take a <code>Calendar</code>
object as their third parameter.  If the DBMS does not store time zone information,
the driver uses the <code>Calendar</code> object to construct the <code>Date</code>,
<code>Time</code>, or <code>Timestamp</code> object being set. As is true with other
methods that provide additional information, the element in the array returned
by <code>getParams</code> is an array instead of a simple <code>Object</code> instance.
<P>
The methods <code>setAsciiStream</code>, <code>setBinaryStream</code>,
<code>setCharacterStream</code>, and <code>setUnicodeStream</code> (which is
deprecated, so applications should use <code>getCharacterStream</code> instead)
take three parameters, so for them, the element in the array returned by
<code>getParams</code> is also an array.  What is different about these setter
methods is that in addition to the information provided by parameters, the array contains
one of the <code>BaseRowSet</code> constants indicating the type of stream being set.
<p>
NOTE: The method <code>getParams</code> is called internally by
<code>RowSet</code> implementations extending this class; it is not normally called by an
application programmer directly.

<h3>5.0 Event Notification</h3>
The <code>BaseRowSet</code> class provides the event notification
mechanism for rowsets.  It contains the field
<code>listeners</code>, methods for adding and removing listeners, and
methods for notifying listeners of changes.
<P>
A listener is an object that has implemented the <code>RowSetListener</code> interface.
If it has been added to a <code>RowSet</code> object's list of listeners, it will be notified
 when an event occurs on that <code>RowSet</code> object.  Each listener's
implementation of the <code>RowSetListener</code> methods defines what that object
will do when it is notified that an event has occurred.
<P>
There are three possible events for a <code>RowSet</code> object:
<OL>
<LI>the cursor moves
<LI>an individual row is changed (updated, deleted, or inserted)
<LI>the contents of the entire <code>RowSet</code> object  are changed
</OL>
<P>
The <code>BaseRowSet</code> method used for the notification indicates the
type of event that has occurred.  For example, the method
<code>notifyRowChanged</code> indicates that a row has been updated,
deleted, or inserted.  Each of the notification methods creates a
<code>RowSetEvent</code> object, which is supplied to the listener in order to
identify the <code>RowSet</code> object on which the event occurred.
What the listener does with this information, which may be nothing, depends on how it was
implemented.

<h3>6.0 Default Behavior</h3>
A default <code>BaseRowSet</code> object is initialized with many starting values.

The following is true of a default <code>RowSet</code> instance that extends
the <code>BaseRowSet</code> class:
<UL>
  <LI>Has a scrollable cursor and does not show changes
      made by others.
  <LI>Is updatable.
  <LI>Does not show rows that have been deleted.
  <LI>Has no time limit for how long a driver may take to
      execute the <code>RowSet</code> object's command.
  <LI>Has no limit for the number of rows it may contain.
  <LI>Has no limit for the number of bytes a column may contain. NOTE: This
  limit applies only to columns that hold values of the
  following types:  <code>BINARY</code>, <code>VARBINARY</code>,
  <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
  and <code>LONGVARCHAR</code>.
  <LI>Will not see uncommitted data (make \"dirty\" reads).
  <LI>Has escape processing turned on.
  <LI>Has its connection's type map set to <code>null</code>.
  <LI>Has an empty <code>Vector</code> object for storing the values set
      for the placeholder parameters in the <code>RowSet</code> object's command.
</UL>
<p>
If other values are desired, an application must set the property values
explicitly. For example, the following line of code sets the maximum number
of rows for the <code>CachedRowSet</code> object <i>crs</i> to 500.
<PRE>
   crs.setMaxRows(500);
</PRE>
Methods implemented in extensions of this <code>BaseRowSet</code> class <b>must</b> throw an
<code>SQLException</code> object for any violation of the defined assertions.  Also, if the
extending class overrides and reimplements any <code>BaseRowSet</code> method and encounters
connectivity or underlying data source issues, that method <b>may</b> in addition throw an
<code>SQLException</code> object for that reason.
"
      classrelation 4045570 // <realization>
	relation 4045570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4045570 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 4045698 // <realization>
	relation 4045698 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4045698 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2368002 "UNICODE_STREAM_PARAM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating to a <code>RowSetReaderImpl</code> object
that a given parameter is a Unicode stream. This
<code>RowSetReaderImpl</code> object is provided as an extension of the
<code>SyncProvider</code> abstract class defined in the
<code>SyncFactory</code> static factory SPI mechanism.

"
      end

      attribute 2368130 "BINARY_STREAM_PARAM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating to a <code>RowSetReaderImpl</code> object
that a given parameter is a binary stream. A
<code>RowSetReaderImpl</code> object is provided as an extension of the
<code>SyncProvider</code> abstract class defined in the
<code>SyncFactory</code> static factory SPI mechanism.

"
      end

      attribute 2368258 "ASCII_STREAM_PARAM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating to a <code>RowSetReaderImpl</code> object
that a given parameter is an ASCII stream. A
<code>RowSetReaderImpl</code> object is provided as an extension of the
<code>SyncProvider</code> abstract class defined in the
<code>SyncFactory</code> static factory SPI mechanism.

"
      end

      classrelation 4045826 // binaryStream (<unidirectional association>)
	relation 4045826 --->
	  a role_name "binaryStream" protected
	    comment "
The <code>InputStream</code> object that will be
returned by the method <code>getBinaryStream</code>, which is
specified in the <code>ResultSet</code> interface.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4045826 // binaryStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 4045954 // unicodeStream (<unidirectional association>)
	relation 4045954 --->
	  a role_name "unicodeStream" protected
	    comment "
The <code>InputStream</code> object that will be
returned by the method <code>getUnicodeStream</code>,
which is specified in the <code>ResultSet</code> interface.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4045954 // unicodeStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 4046082 // asciiStream (<unidirectional association>)
	relation 4046082 --->
	  a role_name "asciiStream" protected
	    comment "
The <code>InputStream</code> object that will be
returned by the method <code>getAsciiStream</code>,
which is specified in the <code>ResultSet</code> interface.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4046082 // asciiStream (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      classrelation 4046210 // charStream (<unidirectional association>)
	relation 4046210 --->
	  a role_name "charStream" protected
	    comment "
The <code>Reader</code> object that will be
returned by the method <code>getCharacterStream</code>,
which is specified in the <code>ResultSet</code> interface.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4046210 // charStream (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      classrelation 4046338 // command (<unidirectional association>)
	relation 4046338 --->
	  a role_name "command" private
	    comment "
The query that will be sent to the DBMS for execution when the
method <code>execute</code> is called.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4046338 // command (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4046466 // URL (<unidirectional association>)
	relation 4046466 --->
	  a role_name "URL" private
	    comment "
The JDBC URL the reader, writer, or both supply to the method
<code>DriverManager.getConnection</code> when the
<code>DriverManager</code> is used to get a connection.
<P>
The JDBC URL identifies the driver to be used to make the conndection.
This URL can be found in the documentation supplied by the driver
vendor.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4046466 // URL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4046594 // dataSource (<unidirectional association>)
	relation 4046594 --->
	  a role_name "dataSource" private
	    comment "
The logical name of the data source that the reader/writer should use
in order to retrieve a <code>DataSource</code> object from a Java
Directory and Naming Interface (JNDI) naming service.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4046594 // dataSource (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4046722 // username (<unidirectional association>)
	relation 4046722 --->
	  a role_name "username" private
	    comment "
The user name the reader, writer, or both supply to the method
<code>DriverManager.getConnection</code> when the
<code>DriverManager</code> is used to get a connection.
@serial

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4046722 // username (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4046850 // password (<unidirectional association>)
	relation 4046850 --->
	  a role_name "password" private
	    comment "
The password the reader, writer, or both supply to the method
<code>DriverManager.getConnection</code> when the
<code>DriverManager</code> is used to get a connection.
@serial

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4046850 // password (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2368386 "rowSetType"
	private explicit_type "int"
	init_value " ResultSet.TYPE_SCROLL_INSENSITIVE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating the type of this JDBC <code>RowSet</code>
object. It must be one of the following <code>ResultSet</code>
constants:  <code>TYPE_FORWARD_ONLY</code>,
<code>TYPE_SCROLL_INSENSITIVE</code>, or
<code>TYPE_SCROLL_SENSITIVE</code>.
@serial

"
      end

      attribute 2368514 "showDeleted"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> indicating whether deleted rows are visible in this
JDBC <code>RowSet</code> object .
@serial

 default is false"
      end

      attribute 2368642 "queryTimeout"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of seconds the driver
will wait for a command to execute.  This limit applies while
this JDBC <code>RowSet</code> object is connected to its data
source, that is, while it is populating itself with
data and while it is writing data back to the data source.
@serial

 default is no timeout"
      end

      attribute 2368770 "maxRows"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of rows the reader should read.
@serial

 default is no limit"
      end

      attribute 2368898 "maxFieldSize"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum field size the reader should read.
@serial

 default is no limit"
      end

      attribute 2369026 "concurrency"
	private explicit_type "int"
	init_value " ResultSet.CONCUR_UPDATABLE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating the concurrency of this JDBC <code>RowSet</code>
object. It must be one of the following <code>ResultSet</code>
constants: <code>CONCUR_READ_ONLY</code> or
<code>CONCUR_UPDATABLE</code>.
@serial

"
      end

      attribute 2369154 "readOnly"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> indicating whether this JDBC <code>RowSet</code>
object is read-only.  <code>true</code> indicates that it is read-only;
<code>false</code> that it is writable.
@serial

"
      end

      attribute 2369282 "escapeProcessing"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> indicating whether the reader for this
JDBC <code>RowSet</code> object should perform escape processing.
<code>true</code> means that escape processing is turned on;
<code>false</code> that it is not. The default is <code>true</code>.
@serial

"
      end

      attribute 2369410 "isolation"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating the isolation level of the connection
for this JDBC <code>RowSet</code> object . It must be one of
the following <code>Connection</code> constants:
<code>TRANSACTION_NONE</code>,
<code>TRANSACTION_READ_UNCOMMITTED</code>,
<code>TRANSACTION_READ_COMMITTED</code>,
<code>TRANSACTION_REPEATABLE_READ</code> or
<code>TRANSACTION_SERIALIZABLE</code>.
@serial

"
      end

      attribute 2369538 "fetchDir"
	private explicit_type "int"
	init_value " ResultSet.FETCH_FORWARD"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant used as a hint to the driver that indicates the direction in
which data from this JDBC <code>RowSet</code> object  is going
to be fetched. The following <code>ResultSet</code> constants are
possible values:
<code>FETCH_FORWARD</code>,
<code>FETCH_REVERSE</code>,
<code>FETCH_UNKNOWN</code>.
<P>
Unused at this time.
@serial

 default fetch direction"
      end

      attribute 2369666 "fetchSize"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A hint to the driver that indicates the expected number of rows
in this JDBC <code>RowSet</code> object .
<P>
Unused at this time.
@serial

 default fetchSize"
      end

      classrelation 4046978 // map (<unidirectional association>)
	relation 4046978 --->
	  a role_name "map" private
	    comment "
The <code>java.util.Map</code> object that contains entries mapping
SQL type names to classes in the Java programming language for the
custom mapping of user-defined types.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Class<?>> ${name}${value};
"
	    classrelation_ref 4046978 // map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 4047106 // listeners (<unidirectional association>)
	relation 4047106 --->
	  a role_name "listeners" private
	    comment "
A <code>Vector</code> object that holds the list of listeners
that have registered with this <code>RowSet</code> object.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<RowSetListener> ${name}${value};
"
	    classrelation_ref 4047106 // listeners (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 4047234 // params (<unidirectional association>)
	relation 4047234 --->
	  a role_name "params" private
	    comment "
A <code>Vector</code> object that holds the parameters set
for this <code>RowSet</code> object's current command.
@serial

 could be transient?"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, Object> ${name}${value};
"
	    classrelation_ref 4047234 // params (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      operation 10342658 "BaseRowSet"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>BaseRowSet</code> object initialized with
a default <code>Vector</code> object for its <code>listeners</code>
field. The other default values with which it is initialized are listed
in Section 6.0 of the class comment for this class.
"
      end

      operation 10342786 "initParams"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the necessary internal configurations and initializations
to allow any JDBC <code>RowSet</code> implementation to start using
the standard facilities provided by a <code>BaseRowSet</code>
instance. This method <b>should</b> be called after the <code>RowSet</code> object
has been instantiated to correctly initialize all parameters. This method
<b>should</b> never be called by an application, but is called from with
a <code>RowSet</code> implementation extending this class.
"
      end

      operation 10342914 "addRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1257346 // RowSetListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------------------------------------------------
 Events
--------------------------------------------------------------------

The listener will be notified whenever an event occurs on this <code>RowSet</code>
object.
<P>
A listener might, for example, be a table or graph that needs to
be updated in order to accurately reflect the current state of
the <code>RowSet</code> object.
<p>
<b>Note</b>: if the <code>RowSetListener</code> object is
<code>null</code>, this method silently discards the <code>null</code>
value and does not add a null reference to the set of listeners.
<p>
<b>Note</b>: if the listener is already set, and the new <code>RowSetListerner</code>
instance is added to the set of listeners already registered to receive
event notifications from this <code>RowSet</code>.

@param listener an object that has implemented the
    <code>javax.sql.RowSetListener</code> interface and wants to be notified
    of any events that occur on this <code>RowSet</code> object; May be
    null.
@see #removeRowSetListener
"
      end

      operation 10343042 "removeRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1257346 // RowSetListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the designated object from this <code>RowSet</code> object's list of listeners.
If the given argument is not a registered listener, this method
does nothing.

 <b>Note</b>: if the <code>RowSetListener</code> object is
<code>null</code>, this method silently discards the <code>null</code>
value.

@param listener a <code>RowSetListener</code> object that is on the list
       of listeners for this <code>RowSet</code> object
@see #addRowSetListener
"
      end

      operation 10343170 "checkforRowSetInterface"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if instance of this class extends the RowSet interface.
"
      end

      operation 10343298 "notifyCursorMoved"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all of the listeners registered with this
<code>RowSet</code> object that its cursor has moved.
<P>
When an application calls a method to move the cursor,
that method moves the cursor and then calls this method
internally. An application <b>should</b> never invoke
this method directly.

@throws SQLException if the class extending the <code>BaseRowSet</code>
    abstract class does not implement the <code>RowSet</code> interface or
    one of it's sub-interfaces.
"
      end

      operation 10343426 "notifyRowChanged"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all of the listeners registered with this <code>RowSet</code> object that
one of its rows has changed.
<P>
When an application calls a method that changes a row, such as
the <code>CachedRowSet</code> methods <code>insertRow</code>,
<code>updateRow</code>, or <code>deleteRow</code>,
that method calls <code>notifyRowChanged</code>
internally. An application <b>should</b> never invoke
this method directly.

@throws SQLException if the class extending the <code>BaseRowSet</code>
    abstract class does not implement the <code>RowSet</code> interface or
    one of it's sub-interfaces.
"
      end

      operation 10343554 "notifyRowSetChanged"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all of the listeners registered with this <code>RowSet</code>
object that its entire contents have changed.
<P>
When an application calls methods that change the entire contents
of the <code>RowSet</code> object, such as the <code>CachedRowSet</code> methods
<code>execute</code>, <code>populate</code>, <code>restoreOriginal</code>,
or <code>release</code>, that method calls <code>notifyRowSetChanged</code>
internally (either directly or indirectly). An application <b>should</b>
never invoke this method directly.

@throws SQLException if the class extending the <code>BaseRowSet</code>
    abstract class does not implement the <code>RowSet</code> interface or
    one of it's sub-interfaces.
"
      end

      operation 10343682 "getCommand"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the SQL query that is the command for this
<code>RowSet</code> object. The command property contains the query that
will be executed to populate this <code>RowSet</code> object.
<P>
The SQL query returned by this method is used by <code>RowSet</code> methods
such as <code>execute</code> and <code>populate</code>, which may be implemented
by any class that extends the <code>BaseRowSet</code> abstract class and
implements one or more of the standard JSR-114 <code>RowSet</code>
interfaces.
<P>
The command is used by the <code>RowSet</code> object's
reader to obtain a <code>ResultSet</code> object.  The reader then
reads the data from the <code>ResultSet</code> object and uses it to
to populate this <code>RowSet</code> object.
<P>
The default value for the <code>command</code> property is <code>null</code>.

@return the <code>String</code> that is the value for this
        <code>RowSet</code> object's <code>command</code> property;
        may be <code>null</code>
@see #setCommand
"
      end

      operation 10343810 "setCommand"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cmd" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>RowSet</code> object's <code>command</code> property to
the given <code>String</code> object and clears the parameters, if any,
that were set for the previous command.
<P>
The <code>command</code> property may not be needed if the <code>RowSet</code>
object gets its data from a source that does not support commands,
such as a spreadsheet or other tabular file.
Thus, this property is optional and may be <code>null</code>.

@param cmd a <code>String</code> object containing an SQL query
           that will be set as this <code>RowSet</code> object's command
           property; may be <code>null</code> but may not be an empty string
@throws SQLException if an empty string is provided as the command value
@see #getCommand
"
      end

      operation 10343938 "getUrl"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the JDBC URL that this <code>RowSet</code> object's
<code>javax.sql.Reader</code> object uses to make a connection
with a relational database using a JDBC technology-enabled driver.
<P>
The <code>Url</code> property will be <code>null</code> if the underlying data
source is a non-SQL data source, such as a spreadsheet or an XML
data source.

@return a <code>String</code> object that contains the JDBC URL
        used to establish the connection for this <code>RowSet</code>
        object; may be <code>null</code> (default value) if not set
@throws SQLException if an error occurs retrieving the URL value
@see #setUrl
"
      end

      operation 10344066 "setUrl"
	public explicit_return_type "void"
	nparams 1
	  param inout name "url" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the Url property for this <code>RowSet</code> object
to the given <code>String</code> object and sets the dataSource name
property to <code>null</code>. The Url property is a
JDBC URL that is used when
the connection is created using a JDBC technology-enabled driver
(\"JDBC driver\") and the <code>DriverManager</code>.
The correct JDBC URL for the specific driver to be used can be found
in the driver documentation.  Although there are guidelines for for how
a JDBC URL is formed,
a driver vendor can specify any <code>String</code> object except
one with a length of <code>0</code> (an empty string).
<P>
Setting the Url property is optional if connections are established using
a <code>DataSource</code> object instead of the <code>DriverManager</code>.
The driver will use either the URL property or the
dataSourceName property to create a connection, whichever was
specified most recently. If an application uses a JDBC URL, it
must load a JDBC driver that accepts the JDBC URL before it uses the
<code>RowSet</code> object to connect to a database.  The <code>RowSet</code>
object will use the URL internally to create a database connection in order
to read or write data.

@param url a <code>String</code> object that contains the JDBC URL
    that will be used to establish the connection to a database for this
    <code>RowSet</code> object; may be <code>null</code> but must not
    be an empty string
@throws SQLException if an error occurs setting the Url property or the
    parameter supplied is a string with a length of <code>0</code> (an
    empty string)
@see #getUrl
"
      end

      operation 10344194 "getDataSourceName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the logical name that when supplied to a naming service
that uses the Java Naming and Directory Interface (JNDI) API, will
retrieve a <code>javax.sql.DataSource</code> object. This
<code>DataSource</code> object can be used to establish a connection
to the data source that it represents.
<P>
Users should set either the url or the data source name property.
The driver will use the property set most recently to establish a
connection.

@return a <code>String</code> object that identifies the
        <code>DataSource</code> object to be used for making a
        connection; if no logical name has been set, <code>null</code>
        is returned.
@see #setDataSourceName
"
      end

      operation 10344322 "setDataSourceName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>DataSource</code> name property for this <code>RowSet</code>
object to the given logical name and sets this <code>RowSet</code> object's
Url property to <code>null</code>. The name must have been bound to a
<code>DataSource</code> object in a JNDI naming service so that an
application can do a lookup using that name to retrieve the
<code>DataSource</code> object bound to it. The <code>DataSource</code>
object can then be used to establish a connection to the data source it
represents.
<P>
Users should set either the Url property or the dataSourceName property.
If both properties are set, the driver will use the property set most recently.

@param name a <code>String</code> object with the name that can be supplied
    to a naming service based on JNDI technology to retrieve the
    <code>DataSource</code> object that can be used to get a connection;
    may be <code>null</code> but must not be an empty string
@throws SQLException if an empty string is provided as the <code>DataSource</code>
   name
@see #getDataSourceName
"
      end

      operation 10344450 "getUsername"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user name used to create a database connection.  Because it
is not serialized, the username property is set at runtime before
calling the method <code>execute</code>.

@return the <code>String</code> object containing the user name that
        is supplied to the data source to create a connection; may be
        <code>null</code> (default value) if not set
@see #setUsername
"
      end

      operation 10344578 "setUsername"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the username property for this <code>RowSet</code> object
to the given user name. Because it
is not serialized, the username property is set at run time before
calling the method <code>execute</code>.

@param name the <code>String</code> object containing the user name that
    is supplied to the data source to create a connection. It may be null.
@see #getUsername
"
      end

      operation 10344706 "getPassword"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the password used to create a database connection for this
<code>RowSet</code> object.  Because the password property is not
serialized, it is set at run time before calling the method
<code>execute</code>. The default value is <code>null</code>

@return the <code>String</code> object that represents the password
        that must be supplied to the database to create a connection
@see #setPassword
"
      end

      operation 10344834 "setPassword"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pass" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the password used to create a database connection for this
<code>RowSet</code> object to the given <code>String</code>
object.  Because the password property is not
serialized, it is set at run time before calling the method
<code>execute</code>.

@param pass the <code>String</code> object that represents the password
    that is supplied to the database to create a connection. It may be
    null.
@see #getPassword
"
      end

      operation 10344962 "setType"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type for this <code>RowSet</code> object to the specified type.
The default type is <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>.

@param type one of the following constants:
            <code>ResultSet.TYPE_FORWARD_ONLY</code>,
            <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
            <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@throws SQLException if the parameter supplied is not one of the
        following constants:
         <code>ResultSet.TYPE_FORWARD_ONLY</code> or
         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>
         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@see #getConcurrency
@see #getType
"
      end

      operation 10345090 "getType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this <code>RowSet</code> object. The type is initially
determined by the statement that created the <code>RowSet</code> object.
The <code>RowSet</code> object can call the method
<code>setType</code> at any time to change its
type.  The default is <code>TYPE_SCROLL_INSENSITIVE</code>.

@return the type of this JDBC <code>RowSet</code>
        object, which must be one of the following:
        <code>ResultSet.TYPE_FORWARD_ONLY</code>,
        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@throws SQLException if an error occurs getting the type of
    of this <code>RowSet</code> object
@see #setType
"
      end

      operation 10345218 "setConcurrency"
	public explicit_return_type "void"
	nparams 1
	  param in name "concurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the concurrency for this <code>RowSet</code> object to
the specified concurrency. The default concurrency for any <code>RowSet</code>
object (connected or disconnected) is <code>ResultSet.CONCUR_UPDATABLE</code>,
but this method may be called at any time to change the concurrency.
<P>
@param concurrency one of the following constants:
                   <code>ResultSet.CONCUR_READ_ONLY</code> or
                   <code>ResultSet.CONCUR_UPDATABLE</code>
@throws SQLException if the parameter supplied is not one of the
        following constants:
         <code>ResultSet.CONCUR_UPDATABLE</code> or
         <code>ResultSet.CONCUR_READ_ONLY</code>
@see #getConcurrency
@see #isReadOnly
"
      end

      operation 10345346 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>boolean</code> indicating whether this
<code>RowSet</code> object is read-only.
Any attempts to update a read-only <code>RowSet</code> object will result in an
<code>SQLException</code> being thrown. By default,
rowsets are updatable if updates are possible.

@return <code>true</code> if this <code>RowSet</code> object
        cannot be updated; <code>false</code> otherwise
@see #setConcurrency
@see #setReadOnly
"
      end

      operation 10345474 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>RowSet</code> object's readOnly  property to the given <code>boolean</code>.

@param value <code>true</code> to indicate that this
             <code>RowSet</code> object is read-only;
             <code>false</code> to indicate that it is updatable
"
      end

      operation 10345602 "getTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transaction isolation property for this
<code>RowSet</code> object's connection. This property represents
the transaction isolation level requested for use in transactions.
<P>
For <code>RowSet</code> implementations such as
the <code>CachedRowSet</code> that operate in a disconnected environment,
the <code>SyncProvider</code> object
offers complementary locking and data integrity options. The
options described below are pertinent only to connected <code>RowSet</code>
objects (<code>JdbcRowSet</code> objects).

@return one of the following constants:
        <code>Connection.TRANSACTION_NONE</code>,
        <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
        <code>Connection.TRANSACTION_READ_COMMITTED</code>,
        <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
        <code>Connection.TRANSACTION_SERIALIZABLE</code>
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncProvider
@see #setTransactionIsolation

"
      end

      operation 10345730 "setTransactionIsolation"
	public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the transaction isolation property for this JDBC <code>RowSet</code> object to the given
constant. The DBMS will use this transaction isolation level for
transactions if it can.
<p>
For <code>RowSet</code> implementations such as
the <code>CachedRowSet</code> that operate in a disconnected environment,
the <code>SyncProvider</code> object being used
offers complementary locking and data integrity options. The
options described below are pertinent only to connected <code>RowSet</code>
objects (<code>JdbcRowSet</code> objects).

@param level one of the following constants, listed in ascending order:
             <code>Connection.TRANSACTION_NONE</code>,
             <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
             <code>Connection.TRANSACTION_READ_COMMITTED</code>,
             <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
             <code>Connection.TRANSACTION_SERIALIZABLE</code>
@throws SQLException if the given parameter is not one of the Connection
         constants
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncProvider
@see #getTransactionIsolation
"
      end

      operation 10345858 "getTypeMap"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type map associated with the <code>Connection</code>
object for this <code>RowSet</code> object.
<P>
Drivers that support the JDBC 3.0 API will create
<code>Connection</code> objects with an associated type map.
This type map, which is initially empty, can contain one or more
fully-qualified SQL names and <code>Class</code> objects indicating
the class to which the named SQL value will be mapped. The type mapping
specified in the connection's type map is used for custom type mapping
when no other type map supersedes it.
<p>
If a type map is explicitly supplied to a method that can perform
custom mapping, that type map supersedes the connection's type map.

@return the <code>java.util.Map</code> object that is the type map
        for this <code>RowSet</code> object's connection
"
      end

      operation 10345986 "setTypeMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Installs the given <code>java.util.Map</code> object as the type map
associated with the <code>Connection</code> object for this
<code>RowSet</code> object.  The custom mapping indicated in
this type map will be used unless a different type map is explicitly
supplied to a method, in which case the type map supplied will be used.

@param map a <code>java.util.Map</code> object that contains the
    mapping from SQL type names for user defined types (UDT) to classes in
    the Java programming language.  Each entry in the <code>Map</code>
    object consists of the fully qualified SQL name of a UDT and the
    <code>Class</code> object for the <code>SQLData</code> implementation
    of that UDT. May be <code>null</code>.
"
      end

      operation 10346114 "getMaxFieldSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of bytes that can be used for a column
value in this <code>RowSet</code> object.
This limit applies only to columns that hold values of the
following types:  <code>BINARY</code>, <code>VARBINARY</code>,
<code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
and <code>LONGVARCHAR</code>.  If the limit is exceeded, the excess
data is silently discarded.

@return an <code>int</code> indicating the current maximum column size
    limit; zero means that there is no limit
@throws SQLException if an error occurs internally determining the
   maximum limit of the column size
"
      end

      operation 10346242 "setMaxFieldSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of bytes that can be used for a column
value in this <code>RowSet</code> object to the given number.
This limit applies only to columns that hold values of the
following types:  <code>BINARY</code>, <code>VARBINARY</code>,
<code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
and <code>LONGVARCHAR</code>.  If the limit is exceeded, the excess
data is silently discarded. For maximum portability, it is advisable to
use values greater than 256.

@param max an <code>int</code> indicating the new maximum column size
    limit; zero means that there is no limit
@throws SQLException if (1) an error occurs internally setting the
    maximum limit of the column size or (2) a size of less than 0 is set
"
      end

      operation 10346370 "getMaxRows"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of rows that this <code>RowSet</code> object may contain. If
this limit is exceeded, the excess rows are silently dropped.

@return an <code>int</code> indicating the current maximum number of
    rows; zero means that there is no limit
@throws SQLException if an error occurs internally determining the
    maximum limit of rows that a <code>Rowset</code> object can contain
"
      end

      operation 10346498 "setMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of rows that this <code>RowSet</code> object may contain to
the given number. If this limit is exceeded, the excess rows are
silently dropped.

@param max an <code>int</code> indicating the current maximum number
    of rows; zero means that there is no limit
@throws SQLException if an error occurs internally setting the
    maximum limit on the number of rows that a JDBC <code>RowSet</code> object
    can contain; or if <i>max</i> is less than <code>0</code>; or
    if <i>max</i> is less than the <code>fetchSize</code> of the
    <code>RowSet</code>
"
      end

      operation 10346626 "setEscapeProcessing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given <code>boolean</code> whether or not the driver will
scan for escape syntax and do escape substitution before sending SQL
statements to the database. The default is for the driver to do escape
processing.
<P>
Note: Since <code>PreparedStatement</code> objects have usually been
parsed prior to making this call, disabling escape processing for
prepared statements will likely have no effect.

@param enable <code>true</code> to enable escape processing;
    <code>false</code> to disable it
@throws SQLException if an error occurs setting the underlying JDBC
technology-enabled driver to process the escape syntax
"
      end

      operation 10346754 "getQueryTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of seconds the driver will wait for a
query to execute. If the limit is exceeded, an <code>SQLException</code>
is thrown.

@return the current query timeout limit in seconds; zero means that
    there is no limit
@throws SQLException if an error occurs in determining the query
    time-out value
"
      end

      operation 10346882 "setQueryTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given number the maximum number of seconds the driver will
wait for a query to execute. If the limit is exceeded, an
<code>SQLException</code> is thrown.

@param seconds the new query time-out limit in seconds; zero means that
    there is no limit; must not be less than zero
@throws SQLException if an error occurs setting the query
    time-out or if the query time-out value is less than 0
"
      end

      operation 10347010 "getShowDeleted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>boolean</code> indicating whether rows marked
for deletion appear in the set of current rows.
The default value is <code>false</code>.
<P>
Note: Allowing deleted rows to remain visible complicates the behavior
of some of the methods.  However, most <code>RowSet</code> object users
can simply ignore this extra detail because only sophisticated
applications will likely want to take advantage of this feature.

@return <code>true</code> if deleted rows are visible;
        <code>false</code> otherwise
@throws SQLException if an error occurs determining if deleted rows
are visible or not
@see #setShowDeleted
"
      end

      operation 10347138 "setShowDeleted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the property <code>showDeleted</code> to the given
<code>boolean</code> value, which determines whether
rows marked for deletion appear in the set of current rows.

@param value <code>true</code> if deleted rows should be shown;
    <code>false</code> otherwise
@throws SQLException if an error occurs setting whether deleted
    rows are visible or not
@see #getShowDeleted
"
      end

      operation 10347266 "getEscapeProcessing"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ascertains whether escape processing is enabled for this
<code>RowSet</code> object.

@return <code>true</code> if escape processing is turned on;
        <code>false</code> otherwise
@throws SQLException if an error occurs determining if escape
    processing is enabled or not or if the internal escape
    processing trigger has not been enabled
"
      end

      operation 10347394 "setFetchDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives the driver a performance hint as to the direction in
which the rows in this <code>RowSet</code> object will be
processed.  The driver may ignore this hint.
<P>
A <code>RowSet</code> object inherits the default properties of the
<code>ResultSet</code> object from which it got its data.  That
<code>ResultSet</code> object's default fetch direction is set by
the <code>Statement</code> object that created it.
<P>
This method applies to a <code>RowSet</code> object only while it is
connected to a database using a JDBC driver.
<p>
A <code>RowSet</code> object may use this method at any time to change
its setting for the fetch direction.

@param direction one of <code>ResultSet.FETCH_FORWARD</code>,
                 <code>ResultSet.FETCH_REVERSE</code>, or
                 <code>ResultSet.FETCH_UNKNOWN</code>
@throws SQLException if (1) the <code>RowSet</code> type is
    <code>TYPE_FORWARD_ONLY</code> and the given fetch direction is not
    <code>FETCH_FORWARD</code> or (2) the given fetch direction is not
    one of the following:
       ResultSet.FETCH_FORWARD,
       ResultSet.FETCH_REVERSE, or
       ResultSet.FETCH_UNKNOWN
@see #getFetchDirection
"
      end

      operation 10347522 "getFetchDirection"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this <code>RowSet</code> object's current setting for the
fetch direction. The default type is <code>ResultSet.FETCH_FORWARD</code>

@return one of <code>ResultSet.FETCH_FORWARD</code>,
                 <code>ResultSet.FETCH_REVERSE</code>, or
                 <code>ResultSet.FETCH_UNKNOWN</code>
@throws SQLException if an error occurs in determining the
    current fetch direction for fetching rows
@see #setFetchDirection
"
      end

      operation 10347650 "setFetchSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the fetch size for this <code>RowSet</code> object to the given number of
rows.  The fetch size gives a JDBC technology-enabled driver (\"JDBC driver\")
a hint as to the
number of rows that should be fetched from the database when more rows
are needed for this <code>RowSet</code> object. If the fetch size specified
is zero, the driver ignores the value and is free to make its own best guess
as to what the fetch size should be.
<P>
A <code>RowSet</code> object inherits the default properties of the
<code>ResultSet</code> object from which it got its data.  That
<code>ResultSet</code> object's default fetch size is set by
the <code>Statement</code> object that created it.
<P>
This method applies to a <code>RowSet</code> object only while it is
connected to a database using a JDBC driver.
For connected <code>RowSet</code> implementations such as
<code>JdbcRowSet</code>, this method has a direct and immediate effect
on the underlying JDBC driver.
<P>
A <code>RowSet</code> object may use this method at any time to change
its setting for the fetch size.
<p>
For <code>RowSet</code> implementations such as
<code>CachedRowSet</code>, which operate in a disconnected environment,
the <code>SyncProvider</code> object being used
may leverage the fetch size to poll the data source and
retrieve a number of rows that do not exceed the fetch size and that may
form a subset of the actual rows returned by the original query. This is
an implementation variance determined by the specific <code>SyncProvider</code>
object employed by the disconnected <code>RowSet</code> object.
<P>

@param rows the number of rows to fetch; <code>0</code> to let the
       driver decide what the best fetch size is; must not be less
       than <code>0</code> or more than the maximum number of rows
       allowed for this <code>RowSet</code> object (the number returned
       by a call to the method {@link #getMaxRows})
@throws SQLException if the specified fetch size is less than <code>0</code>
       or more than the limit for the maximum number of rows
@see #getFetchSize
"
      end

      operation 10347778 "getFetchSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fetch size for this <code>RowSet</code> object. The default
value is zero.

@return the number of rows suggested as the fetch size when this <code>RowSet</code> object
    needs more rows from the database
@throws SQLException if an error occurs determining the number of rows in the
    current fetch size
@see #setFetchSize
"
      end

      operation 10347906 "getConcurrency"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the concurrency for this <code>RowSet</code> object.
The default is <code>CONCUR_UPDATABLE</code> for both connected and
disconnected <code>RowSet</code> objects.
<P>
An application can call the method <code>setConcurrency</code> at any time
to change a <code>RowSet</code> object's concurrency.
<p>
@return the concurrency type for this <code>RowSet</code>
    object, which must be one of the following:
    <code>ResultSet.CONCUR_READ_ONLY</code> or
    <code>ResultSet.CONCUR_UPDATABLE</code>
@throws SQLException if an error occurs getting the concurrency
    of this <code>RowSet</code> object
@see #setConcurrency
@see #isReadOnly
"
      end

      operation 10348034 "checkParamIndex"
	private explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 Parameters
-----------------------------------------------------------------------

Checks the given index to see whether it is less than <code>1</code> and
throws an <code>SQLException</code> object if it is.
<P>
This method is called by many methods internally; it is never
called by an application directly.

@param idx an <code>int</code> indicating which parameter is to be
    checked; the first parameter is <code>1</code>
@throws SQLException if the parameter is less than <code>1</code>
"
      end

      operation 10348162 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------------
 setter methods for setting the parameters in a <code>RowSet</code> object's command
---------------------------------------------------------------------

Sets the designated parameter to SQL <code>NULL</code>.
Note that the parameter's SQL type must be specified using one of the
type codes defined in <code>java.sql.Types</code>.  This SQL type is
specified in the second parameter.
<p>
Note that the second parameter tells the DBMS the data type of the value being
set to <code>NULL</code>. Some DBMSs require this information, so it is required
in order to make code more portable.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setNull</code>
has been called will return an <code>Object</code> array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is <code>null</code>.
The second element is the value set for <i>sqlType</i>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the second placeholder parameter is being set to
<code>null</code>, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param sqlType an <code>int</code> that is one of the SQL type codes
       defined in the class {@link java.sql.Types}. If a non-standard
       <i>sqlType</i> is supplied, this method will not throw a
       <code>SQLException</code>. This allows implicit support for
       non-standard SQL types.
@throws SQLException if a database access error occurs or the given
       parameter index is out of bounds
@see #getParams
"
      end

      operation 10348290 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.

Although this version of the  method <code>setNull</code> is intended
for user-defined
and <code>REF</code> parameters, this method may be used to set a null
parameter for any JDBC type. The following are user-defined types:
<code>STRUCT</code>, <code>DISTINCT</code>, and <code>JAVA_OBJECT</code>,
and named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully qualified SQL type name when specifying
a <code>NULL</code> user-defined or <code>REF</code> parameter.
In the case of a user-defined type, the name is the type name of
the parameter itself.  For a <code>REF</code> parameter, the name is
the type name of the referenced type.  If a JDBC technology-enabled
driver does not need the type code or type name information,
it may ignore it.
<P>
If the parameter does not have a user-defined or <code>REF</code> type,
the given <code>typeName</code> parameter is ignored.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setNull</code>
has been called will return an <code>Object</code> array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is <code>null</code>.
The second element is the value set for <i>sqlType</i>, and the third
element is the value set for <i>typeName</i>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the second placeholder parameter is being set to
<code>null</code>, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully qualified name of an SQL user-defined type,
                which is ignored if the parameter is not a user-defined
                type or <code>REF</code> value
@throws SQLException if an error occurs or the given parameter index
           is out of bounds
@see #getParams
"
      end

      operation 10348418 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>boolean</code> in the
Java programming language.  The driver converts this to an SQL
<code>BIT</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code>, <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10348546 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>byte</code> in the Java
programming language.  The driver converts this to an SQL
<code>TINYINT</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10348674 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>short</code> in the
Java programming language.  The driver converts this to an SQL
<code>SMALLINT</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<p>
@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10348802 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to an <code>int</code> in the Java
programming language.  The driver converts this to an SQL
<code>INTEGER</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10348930 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>long</code> in the Java
programming language.  The driver converts this to an SQL
<code>BIGINT</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349058 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>float</code> in the
Java programming language.  The driver converts this to an SQL
<code>FLOAT</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349186 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>double</code> in the
Java programming language.  The driver converts this to an SQL
<code>DOUBLE</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
S
@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349314 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.lang.BigDecimal</code> value.  The driver converts this to
an SQL <code>NUMERIC</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
Note: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349442 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>String</code>
value.  The driver converts this to an SQL
<code>VARCHAR</code> or <code>LONGVARCHAR</code> value
(depending on the argument's size relative to the driver's limits
on <code>VARCHAR</code> values) when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<p>
@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349570 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given array of bytes.
The driver converts this to an SQL
<code>VARBINARY</code> or <code>LONGVARBINARY</code> value
(depending on the argument's size relative to the driver's limits
on <code>VARBINARY</code> values) when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349698 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code>
value. The driver converts this to an SQL
<code>DATE</code> value when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version
of <code>setDate</code>
has been called will return an array with the value to be set for
placeholder parameter number <i>parameterIndex</i> being the <code>Date</code>
object supplied as the second parameter.
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the parameter value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349826 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code>
value.  The driver converts this to an SQL <code>TIME</code> value
when it sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version
of the method <code>setTime</code>
has been called will return an array of the parameters that have been set.
The parameter to be set for parameter placeholder number <i>parameterIndex</i>
will be the <code>Time</code> object that was set as the second parameter
to this method.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x a <code>java.sql.Time</code> object, which is to be set as the value
             for placeholder parameter <i>parameterIndex</i>
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10349954 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.sql.Timestamp</code> value.
The driver converts this to an SQL <code>TIMESTAMP</code> value when it
sends it to the database.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setTimestamp</code>
has been called will return an array with the value for parameter placeholder
number <i>parameterIndex</i> being the <code>Timestamp</code> object that was
supplied as the second parameter to this method.
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x a <code>java.sql.Timestamp</code> object
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10350082 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.io.InputStream</code> object,
which will have the specified number of bytes.
The contents of the stream will be read and sent to the database.
This method throws an <code>SQLException</code> object if the number of bytes
read and sent to the database is not equal to <i>length</i>.
<P>
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. A JDBC technology-enabled
driver will read the data from the stream as needed until it reaches
end-of-file. The driver will do any necessary conversion from ASCII to
the database <code>CHAR</code> format.

<P><B>Note:</B> This stream object can be either a standard
Java stream object or your own subclass that implements the
standard interface.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
Note: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after <code>setAsciiStream</code>
has been called will return an array containing the parameter values that
have been set.  The element in the array that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>java.io.InputStream</code> object.
The second element is the value set for <i>length</i>.
The third element is an internal <code>BaseRowSet</code> constant
specifying that the stream passed to this method is an ASCII stream.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the input stream being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream. This is the number of bytes
      the driver will send to the DBMS; lengths of 0 or less are
      are undefined but will cause an invalid length exception to be
      thrown in the underlying JDBC driver.
@throws SQLException if an error occurs, the parameter index is out of bounds,
      or when connected to a data source, the number of bytes the driver reads
      and sends to the database is not equal to the number of bytes specified
      in <i>length</i>
@see #getParams
"
      end

      operation 10350210 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given input stream.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setAsciiStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10350338 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.io.InputStream</code>
object, which will have the specified number of bytes.
The contents of the stream will be read and sent to the database.
This method throws an <code>SQLException</code> object if the number of bytes
read and sent to the database is not equal to <i>length</i>.
<P>
When a very large binary value is input to a
<code>LONGVARBINARY</code> parameter, it may be more practical
to send it via a <code>java.io.InputStream</code> object.
A JDBC technology-enabled driver will read the data from the
stream as needed until it reaches end-of-file.

<P><B>Note:</B> This stream object can be either a standard
Java stream object or your own subclass that implements the
standard interface.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after <code>setBinaryStream</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>java.io.InputStream</code> object.
The second element is the value set for <i>length</i>.
The third element is an internal <code>BaseRowSet</code> constant
specifying that the stream passed to this method is a binary stream.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the input stream being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the input stream that contains the binary value to be set
@param length the number of bytes in the stream; lengths of 0 or less are
        are undefined but will cause an invalid length exception to be
        thrown in the underlying JDBC driver.
@throws SQLException if an error occurs, the parameter index is out of bounds,
        or when connected to a data source, the number of bytes the driver
        reads and sends to the database is not equal to the number of bytes
        specified in <i>length</i>
@see #getParams
"
      end

      operation 10350466 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given input stream.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBinaryStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10350594 "setUnicodeStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.io.InputStream</code> object, which will have the specified
number of bytes. The contents of the stream will be read and sent
to the database.
This method throws an <code>SQLException</code> if the number of bytes
read and sent to the database is not equal to <i>length</i>.
<P>
When a very large Unicode value is input to a
<code>LONGVARCHAR</code> parameter, it may be more practical
to send it via a <code>java.io.InputStream</code> object.
A JDBC technology-enabled driver will read the data from the
stream as needed, until it reaches end-of-file.
The driver will do any necessary conversion from Unicode to the
database <code>CHAR</code> format.
The byte format of the Unicode stream must be Java UTF-8, as
defined in the Java Virtual Machine Specification.

<P><B>Note:</B> This stream object can be either a standard
Java stream object or your own subclass that implements the
standard interface.
<P>
This method is deprecated; the method <code>getCharacterStream</code>
should be used in its place.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Calls made to the method <code>getParams</code> after <code>setUnicodeStream</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>java.io.InputStream</code> object.
The second element is the value set for <i>length</i>.
The third element is an internal <code>BaseRowSet</code> constant
specifying that the stream passed to this method is a Unicode stream.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the input stream being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the <code>java.io.InputStream</code> object that contains the
         UNICODE parameter value
@param length the number of bytes in the input stream
@throws SQLException if an error occurs, the parameter index is out of bounds,
        or the number of bytes the driver reads and sends to the database is
        not equal to the number of bytes specified in <i>length</i>
@deprecated getCharacterStream should be used in its place
@see #getParams
"
      end

      operation 10350722 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.io.Reader</code>
object, which will have the specified number of characters. The
contents of the reader will be read and sent to the database.
This method throws an <code>SQLException</code> if the number of bytes
read and sent to the database is not equal to <i>length</i>.
<P>
When a very large Unicode value is input to a
<code>LONGVARCHAR</code> parameter, it may be more practical
to send it via a <code>Reader</code> object.
A JDBC technology-enabled driver will read the data from the
stream as needed until it reaches end-of-file.
The driver will do any necessary conversion from Unicode to the
database <code>CHAR</code> format.
The byte format of the Unicode stream must be Java UTF-8, as
defined in the Java Virtual Machine Specification.

<P><B>Note:</B> This stream object can be either a standard
Java stream object or your own subclass that implements the
standard interface.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after
<code>setCharacterStream</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>java.io.Reader</code> object.
The second element is the value set for <i>length</i>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the reader being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param reader the <code>Reader</code> object that contains the
       Unicode data
@param length the number of characters in the stream; lengths of 0 or
       less are undefined but will cause an invalid length exception to
       be thrown in the underlying JDBC driver.
@throws SQLException if an error occurs, the parameter index is out of bounds,
       or when connected to a data source, the number of bytes the driver
       reads and sends to the database is not equal to the number of bytes
       specified in <i>length</i>
@see #getParams
"
      end

      operation 10350850 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>Reader</code>
object.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setCharacterStream</code> which takes a length parameter.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10350978 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to an <code>Object</code> in the Java
programming language. The second parameter must be an
<code>Object</code> type.  For integral values, the
<code>java.lang</code> equivalent
objects should be used. For example, use the class <code>Integer</code>
for an <code>int</code>.
<P>
The driver converts this object to the specified
target SQL type before sending it to the database.
If the object has a custom mapping (is of a class implementing
<code>SQLData</code>), the driver should call the method
<code>SQLData.writeSQL</code> to write the object to the SQL
data stream. If, on the other hand, the object is of a class
implementing <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,
<code>Struct</code>, or <code>Array</code>,
the driver should pass it to the database as a value of the
corresponding SQL type.

<p>Note that this method may be used to pass database-
specific abstract data types.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setObject</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>Object</code> instance, and the
second element is the value set for <i>targetSqlType</i>.  The
third element is the value set for <i>scale</i>, which the driver will
ignore if the type of the object being set is not
<code>java.sql.Types.NUMERIC</code> or <code>java.sql.Types.DECIMAL</code>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the object being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.


@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the <code>Object</code> containing the input parameter value;
       must be an <code>Object</code> type
@param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
       to be sent to the database. The <code>scale</code> argument may
       further qualify this type. If a non-standard <i>targetSqlType</i>
       is supplied, this method will not throw a <code>SQLException</code>.
       This allows implicit support for non-standard SQL types.
@param scale for the types <code>java.sql.Types.DECIMAL</code> and
       <code>java.sql.Types.NUMERIC</code>, this is the number
       of digits after the decimal point.  For all other types, this
       value will be ignored.
@throws SQLException if an error occurs or the parameter index is out of bounds
@see #getParams
"
      end

      operation 10351106 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given
<code>Object</code> value.
This method is like <code>setObject(int parameterIndex, Object x, int
targetSqlType, int scale)</code> except that it assumes a scale of zero.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setObject</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>Object</code> instance.
The second element is the value set for <i>targetSqlType</i>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the object being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the <code>Object</code> containing the input parameter value;
       must be an <code>Object</code> type
@param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
       to be sent to the database. If a non-standard <i>targetSqlType</i>
       is supplied, this method will not throw a <code>SQLException</code>.
       This allows implicit support for non-standard SQL types.
@throws SQLException if an error occurs or the parameter index
       is out of bounds
@see #getParams
"
      end

      operation 10351234 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to an <code>Object</code> in the Java
programming language. The second parameter must be an
<code>Object</code>
type.  For integral values, the <code>java.lang</code> equivalent
objects should be used. For example, use the class <code>Integer</code>
for an <code>int</code>.
<P>
The JDBC specification defines a standard mapping from
Java <code>Object</code> types to SQL types.  The driver will
use this standard mapping to  convert the given object
to its corresponding SQL type before sending it to the database.
If the object has a custom mapping (is of a class implementing
<code>SQLData</code>), the driver should call the method
<code>SQLData.writeSQL</code> to write the object to the SQL
data stream.
<P>
If, on the other hand, the object is of a class
implementing <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,
<code>Struct</code>, or <code>Array</code>,
the driver should pass it to the database as a value of the
corresponding SQL type.
<P>
This method throws an exception if there
is an ambiguity, for example, if the object is of a class
implementing more than one interface.
<P>
Note that this method may be used to pass database-specific
abstract data types.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
After this method has been called, a call to the
method <code>getParams</code>
will return an object array of the current command parameters, which will
include the <code>Object</code> set for placeholder parameter number
<code>parameterIndex</code>.
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x the object containing the input parameter value
@throws SQLException if an error occurs the
                        parameter index is out of bounds, or there
                        is ambiguity in the implementation of the
                        object being set
@see #getParams
"
      end

      operation 10351362 "setRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "ref" type class_ref 1038850 // Ref
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Ref</code> object in
the Java programming language.  The driver converts this to an SQL
<code>REF</code> value when it sends it to the database. Internally, the
<code>Ref</code> is represented as a <code>SerialRef</code> to ensure
serializability.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<p>
After this method has been called, a call to the
method <code>getParams</code>
will return an object array of the current command parameters, which will
include the <code>Ref</code> object set for placeholder parameter number
<code>parameterIndex</code>.
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param ref a <code>Ref</code> object representing an SQL <code>REF</code>
        value; cannot be null
@throws SQLException if an error occurs; the parameter index is out of
        bounds or the <code>Ref</code> object is <code>null</code>; or
        the <code>Ref</code> object returns a <code>null</code> base type
        name.
@see #getParams
@see javax.sql.rowset.serial.SerialRef
"
      end

      operation 10351490 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Blob</code> object in
the Java programming language.  The driver converts this to an SQL
<code>BLOB</code> value when it sends it to the database. Internally,
the <code>Blob</code> is represented as a <code>SerialBlob</code>
to ensure serializability.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<p>
After this method has been called, a call to the
method <code>getParams</code>
will return an object array of the current command parameters, which will
include the <code>Blob</code> object set for placeholder parameter number
<code>parameterIndex</code>.
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x a <code>Blob</code> object representing an SQL
         <code>BLOB</code> value
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
@see javax.sql.rowset.serial.SerialBlob
"
      end

      operation 10351618 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Clob</code> object in
the Java programming language.  The driver converts this to an SQL
<code>CLOB</code> value when it sends it to the database. Internally, the
<code>Clob</code> is represented as a <code>SerialClob</code> to ensure
serializability.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<p>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<p>
After this method has been called, a call to the
method <code>getParams</code>
will return an object array of the current command parameters, which will
include the <code>Clob</code> object set for placeholder parameter number
<code>parameterIndex</code>.
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
    in this <code>RowSet</code> object's command that is to be set.
    The first parameter is 1, the second is 2, and so on; must be
    <code>1</code> or greater
@param x a <code>Clob</code> object representing an SQL
    <code>CLOB</code> value; cannot be null
@throws SQLException if an error occurs; the parameter index is out of
    bounds or the <code>Clob</code> is null
@see #getParams
@see javax.sql.rowset.serial.SerialBlob
"
      end

      operation 10351746 "setArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "array" type class_ref 1037058 // Array
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to an <code>Array</code> object in the
Java programming language.  The driver converts this to an SQL
<code>ARRAY</code> value when it sends it to the database. Internally,
the <code>Array</code> is represented as a <code>SerialArray</code>
to ensure serializability.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
Note: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<p>
After this method has been called, a call to the
method <code>getParams</code>
will return an object array of the current command parameters, which will
include the <code>Array</code> object set for placeholder parameter number
<code>parameterIndex</code>.
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is element number <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param array an <code>Array</code> object representing an SQL
       <code>ARRAY</code> value; cannot be null. The <code>Array</code> object
       passed to this method must return a non-null Object for all
       <code>getArray()</code> method calls. A null value will cause a
       <code>SQLException</code> to be thrown.
@throws SQLException if an error occurs; the parameter index is out of
       bounds or the <code>ARRAY</code> is null
@see #getParams
@see javax.sql.rowset.serial.SerialArray
"
      end

      operation 10351874 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038466 // Date
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code>
object.
When the DBMS does not store time zone information, the driver will use
the given <code>Calendar</code> object to construct the SQL <code>DATE</code>
value to send to the database. With a
<code>Calendar</code> object, the driver can calculate the date
taking into account a custom time zone.  If no <code>Calendar</code>
object is specified, the driver uses the time zone of the Virtual Machine
that is running the application.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setDate</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>java.sql.Date</code> object.
The second element is the value set for <i>cal</i>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the date being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x a <code>java.sql.Date</code> object representing an SQL
       <code>DATE</code> value
@param cal a <code>java.util.Calendar</code> object to use when
       when constructing the date
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10352002 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038594 // Time
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code>
object.  The driver converts this
to an SQL <code>TIME</code> value when it sends it to the database.
<P>
When the DBMS does not store time zone information, the driver will use
the given <code>Calendar</code> object to construct the SQL <code>TIME</code>
value to send to the database. With a
<code>Calendar</code> object, the driver can calculate the date
taking into account a custom time zone.  If no <code>Calendar</code>
object is specified, the driver uses the time zone of the Virtual Machine
that is running the application.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setTime</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>java.sql.Time</code> object.
The second element is the value set for <i>cal</i>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the time being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x a <code>java.sql.Time</code> object
@param cal the <code>java.util.Calendar</code> object the driver can use to
        construct the time
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10352130 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1038722 // Timestamp
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.sql.Timestamp</code> object.  The driver converts this
to an SQL <code>TIMESTAMP</code> value when it sends it to the database.
<P>
When the DBMS does not store time zone information, the driver will use
the given <code>Calendar</code> object to construct the SQL <code>TIMESTAMP</code>
value to send to the database. With a
<code>Calendar</code> object, the driver can calculate the timestamp
taking into account a custom time zone.  If no <code>Calendar</code>
object is specified, the driver uses the time zone of the Virtual Machine
that is running the application.
<P>
The parameter value set by this method is stored internally and
will be supplied as the appropriate parameter in this <code>RowSet</code>
object's command when the method <code>execute</code> is called.
Methods such as <code>execute</code> and <code>populate</code> must be
provided in any class that extends this class and implements one or
more of the standard JSR-114 <code>RowSet</code> interfaces.
<P>
NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method
as it is undefined in this class.
<P>
Calls made to the method <code>getParams</code> after this version of
<code>setTimestamp</code>
has been called will return an array containing the parameter values that
have been set.  In that array, the element that represents the values
set with this method will itself be an array. The first element of that array
is the given <code>java.sql.Timestamp</code> object.
The second element is the value set for <i>cal</i>.
The parameter number is indicated by an element's position in the array
returned by the method <code>getParams</code>,
with the first element being the value for the first placeholder parameter, the
second element being the value for the second placeholder parameter, and so on.
In other words, if the timestamp being set is the value for the second
placeholder parameter, the array containing it will be the second element in
the array returned by <code>getParams</code>.
<P>
Note that because the numbering of elements in an array starts at zero,
the array element that corresponds to placeholder parameter number
<i>parameterIndex</i> is <i>parameterIndex</i> -1.

@param parameterIndex the ordinal number of the placeholder parameter
       in this <code>RowSet</code> object's command that is to be set.
       The first parameter is 1, the second is 2, and so on; must be
       <code>1</code> or greater
@param x a <code>java.sql.Timestamp</code> object
@param cal the <code>java.util.Calendar</code> object the driver can use to
        construct the timestamp
@throws SQLException if an error occurs or the
                        parameter index is out of bounds
@see #getParams
"
      end

      operation 10352258 "clearParameters"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all of the current parameter values in this <code>RowSet</code>
object's internal representation of the parameters to be set in
this <code>RowSet</code> object's command when it is executed.
<P>
In general, parameter values remain in force for repeated use in
this <code>RowSet</code> object's command. Setting a parameter value with the
setter methods automatically clears the value of the
designated parameter and replaces it with the new specified value.
<P>
This method is called internally by the <code>setCommand</code>
method to clear all of the parameters set for the previous command.
<P>
Furthermore, this method differs from the <code>initParams</code>
method in that it maintains the schema of the <code>RowSet</code> object.

@throws SQLException if an error occurs clearing the parameters
"
      end

      operation 10352386 "getParams"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an array containing the parameter values (both Objects and
primitives) that have been set for this
<code>RowSet</code> object's command and throws an <code>SQLException</code> object
if all parameters have not been set.   Before the command is sent to the
DBMS to be executed, these parameters will be substituted
for placeholder parameters in the  <code>PreparedStatement</code> object
that is the command for a <code>RowSet</code> implementation extending
the <code>BaseRowSet</code> class.
<P>
Each element in the array that is returned is an <code>Object</code> instance
that contains the values of the parameters supplied to a setter method.
The order of the elements is determined by the value supplied for
<i>parameterIndex</i>.  If the setter method takes only the parameter index
and the value to be set (possibly null), the array element will contain the value to be set
(which will be expressed as an <code>Object</code>).  If there are additional
parameters, the array element will itself be an array containing the value to be set
plus any additional parameter values supplied to the setter method. If the method
sets a stream, the array element includes the type of stream being supplied to the
method. These additional parameters are for the use of the driver or the DBMS and may or
may not be used.
<P>
NOTE: Stored parameter values of types <code>Array</code>, <code>Blob</code>,
<code>Clob</code> and <code>Ref</code> are returned as <code>SerialArray</code>,
<code>SerialBlob</code>, <code>SerialClob</code> and <code>SerialRef</code>
respectively.

@return an array of <code>Object</code> instances that includes the
        parameter values that may be set in this <code>RowSet</code> object's
        command; an empty array if no parameters have been set
@throws SQLException if an error occurs retrieving the object array of
        parameters of this <code>RowSet</code> object or if not all parameters have
        been set
"
      end

      operation 10352514 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "end getParams

Sets the designated parameter to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterName the name of the parameter
@param sqlType the SQL type code defined in <code>java.sql.Types</code>
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10352642 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to SQL <code>NULL</code>.
This version of the method <code>setNull</code> should
be used for user-defined types and REF type parameters.  Examples
of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully-qualified SQL type name when specifying
a NULL user-defined or REF parameter.  In the case of a user-defined type
the name is the type name of the parameter itself.  For a REF
parameter, the name is the type name of the referenced type.  If
a JDBC driver does not need the type code or type name information,
it may ignore it.

Although it is intended for user-defined and Ref parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or REF type, the given
typeName is ignored.


@param parameterName the name of the parameter
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully-qualified name of an SQL user-defined type;
       ignored if the parameter is not a user-defined type or
       SQL <code>REF</code> value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10352770 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>boolean</code> value.
The driver converts this
to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10352898 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>byte</code> value.
The driver converts this
to an SQL <code>TINYINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353026 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>short</code> value.
The driver converts this
to an SQL <code>SMALLINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353154 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>int</code> value.
The driver converts this
to an SQL <code>INTEGER</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353282 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>long</code> value.
The driver converts this
to an SQL <code>BIGINT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353410 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>float</code> value.
The driver converts this
to an SQL <code>FLOAT</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353538 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>double</code> value.
The driver converts this
to an SQL <code>DOUBLE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353666 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 145794 // BigDecimal
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given
<code>java.math.BigDecimal</code> value.
The driver converts this to an SQL <code>NUMERIC</code> value when
it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353794 "setString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java <code>String</code> value.
The driver converts this
to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>VARCHAR</code> values)
when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10353922 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given Java array of bytes.
The driver converts this to an SQL <code>VARBINARY</code> or
<code>LONGVARBINARY</code> (depending on the argument's size relative
to the driver's limits on <code>VARBINARY</code> values) when it sends
it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10354050 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038722 // Timestamp
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
The driver
converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10354178 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10354306 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream, which will have
the specified number of bytes.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the stream
as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10354434 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object, which is the given number of characters long.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that
       contains the UNICODE data used as the designated parameter
@param length the number of characters in the stream
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.4
"
      end

      operation 10354562 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream.
When a very large ASCII value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code>. Data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from ASCII to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setAsciiStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param x the Java input stream that contains the ASCII parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10354690 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given input stream.
When a very large binary value is input to a <code>LONGVARBINARY</code>
parameter, it may be more practical to send it via a
<code>java.io.InputStream</code> object. The data will be read from the
stream as needed until end-of-file is reached.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBinaryStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param x the java input stream which contains the binary parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10354818 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>Reader</code>
object.
When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
parameter, it may be more practical to send it via a
<code>java.io.Reader</code> object. The data will be read from the stream
as needed until end-of-file is reached.  The JDBC driver will
do any necessary conversion from UNICODE to the database char format.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setCharacterStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader the <code>java.io.Reader</code> object that contains the
       Unicode data
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10354946 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNCharacterStream</code> which takes a length parameter.

@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; if a database access error occurs; or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10355074 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object. The second
argument must be an object type; for integral values, the
<code>java.lang</code> equivalent objects should be used.

<p>The given Java object will be converted to the given targetSqlType
before being sent to the database.

If the object has a custom mapping (is of a class implementing the
interface <code>SQLData</code>),
the JDBC driver should call the method <code>SQLData.writeSQL</code> to write it
to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
Note that this method may be used to pass datatabase-
specific abstract data types.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
sent to the database. The scale argument may further qualify this type.
@param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
         this is the number of digits after the decimal point.  For all other
         types, this value will be ignored.
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
@see Types
@see #getParams
@since 1.4
"
      end

      operation 10355202 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.
This method is like the method <code>setObject</code>
above, except that it assumes a scale of zero.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in java.sql.Types) to be
                     sent to the database
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if <code>targetSqlType</code> is
a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
<code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
<code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
 <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
or  <code>STRUCT</code> data type and the JDBC driver does not support
this data type
@see #getParams
@since 1.4
"
      end

      operation 10355330 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the designated parameter with the given object.
The second parameter must be of type <code>Object</code>; therefore, the
<code>java.lang</code> equivalent objects should be used for built-in types.

<p>The JDBC specification specifies a standard mapping from
Java <code>Object</code> types to SQL types.  The given argument
will be converted to the corresponding SQL type before being
sent to the database.

<p>Note that this method may be used to pass datatabase-
specific abstract data types, by using a driver-specific Java
type.

If the object is of a class implementing the interface <code>SQLData</code>,
the JDBC driver should call the method <code>SQLData.writeSQL</code>
to write it to the SQL data stream.
If, on the other hand, the object is of a class implementing
<code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
 <code>Struct</code>, <code>java.net.URL</code>,
or <code>Array</code>, the driver should pass it to the database as a
value of the corresponding SQL type.
<P>
This method throws an exception if there is an ambiguity, for example, if the
object is of a class implementing more than one of the interfaces named above.

@param parameterName the name of the parameter
@param x the object containing the input parameter value
@exception SQLException if a database access error occurs,
this method is called on a closed <code>CallableStatement</code> or if the given
           <code>Object</code> parameter is ambiguous
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10355458 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.  The inputstream must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
@param parameterIndex index of the first parameter is 1,
the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@throws SQLException if a database access error occurs,
this method is called on a closed <code>PreparedStatement</code>,
if parameterIndex does not correspond
to a parameter marker in the SQL statement,  if the length specified
is less than zero or if the number of bytes in the inputstream does not match
the specified length.
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10355586 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.
This method differs from the <code>setBinaryStream (int, InputStream)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBlob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1,
the second is 2, ...
@param inputStream An object that contains the data to set the parameter
value to.
@throws SQLException if a database access error occurs,
this method is called on a closed <code>PreparedStatement</code> or
if parameterIndex does not correspond
to a parameter marker in the SQL statement,
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10355714 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.  The <code>inputstream</code> must contain  the number
of characters specified by length, otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

@param parameterName the name of the parameter to be set
the second is 2, ...

@param inputStream An object that contains the data to set the parameter
value to.
@param length the number of bytes in the parameter data.
@throws SQLException  if parameterIndex does not correspond
to a parameter marker in the SQL statement,  or if the length specified
is less than zero; if the number of bytes in the inputstream does not match
the specified length; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.6
"
      end

      operation 10355842 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1037570 // Blob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Blob</code> object.
The driver converts this to an SQL <code>BLOB</code> value when it
sends it to the database.

@param parameterName the name of the parameter
@param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 10355970 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "inputStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>InputStream</code> object.
This method differs from the <code>setBinaryStream (int, InputStream)</code>
method because it informs the driver that the parameter value should be
sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
the driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setBlob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param inputStream An object that contains the data to set the parameter
value to.
@throws SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10356098 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if a database access error occurs, this method is called on
a closed <code>PreparedStatement</code>, if parameterIndex does not correspond to a parameter
marker in the SQL statement, or if the length specified is less than zero.

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10356226 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setClob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if a database access error occurs, this method is called on
a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
marker in the SQL statement

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10356354 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
@param parameterName the name of the parameter to be set
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the length specified is less than zero;
a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method

@since 1.6
"
      end

      operation 10356482 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038978 // Clob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Clob</code> object.
The driver converts this to an SQL <code>CLOB</code> value when it
sends it to the database.

@param parameterName the name of the parameter
@param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 10356610 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>

<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setClob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if a database access error occurs or this method is called on
a closed <code>CallableStatement</code>

@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10356738 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038466 // Date
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value
using the default time zone of the virtual machine that is running
the application.
The driver converts this
to an SQL <code>DATE</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10356866 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038466 // Date
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Date</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the date
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the date
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10356994 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038594 // Time
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value.
The driver converts this
to an SQL <code>TIME</code> value when it sends it to the database.

@param parameterName the name of the parameter
@param x the parameter value
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10357122 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038594 // Time
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Time</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the time
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the time
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10357250 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1038722 // Timestamp
	  param inout name "cal" type class_ref 723586 // Calendar
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
using the given <code>Calendar</code> object.  The driver uses
the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
which the driver then sends to the database.  With a
a <code>Calendar</code> object, the driver can calculate the timestamp
taking into account a custom timezone.  If no
<code>Calendar</code> object is specified, the driver uses the default
timezone, which is that of the virtual machine running the application.

@param parameterName the name of the parameter
@param x the parameter value
@param cal the <code>Calendar</code> object the driver will use
           to construct the timestamp
@exception SQLException if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@see #getParams
@since 1.4
"
      end

      operation 10357378 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an
SQL <code>XML</code> value when it sends it to the database.
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value
@throws SQLException if a database access error occurs, this method
 is called on a closed result set,
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed
for the <code>SQLXML</code> object  or
 if there is an error processing the XML value.  The <code>getCause</code> method
 of the exception may provide a more detailed exception, for example, if the
 stream does not contain valid XML.
@throws SQLFeatureNotSupportedException if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10357506 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "xmlObject" type class_ref 1039618 // SQLXML
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.SQLXML</code> object. The driver converts this to an
<code>SQL XML</code> value when it sends it to the database.
@param parameterName the name of the parameter
@param xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
@throws SQLException if a database access error occurs, this method
 is called on a closed result set,
the <code>java.xml.transform.Result</code>,
 <code>Writer</code> or <code>OutputStream</code> has not been closed
for the <code>SQLXML</code> object  or
 if there is an error processing the XML value.  The <code>getCause</code> method
 of the exception may provide a more detailed exception, for example, if the
 stream does not contain valid XML.
@throws SQLFeatureNotSupportedException if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10357634 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
driver converts this to a SQL <code>ROWID</code> value when it sends it
to the database

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@throws SQLException if a database access error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not
support this method

@since 1.6
"
      end

      operation 10357762 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "x" type class_ref 1039362 // RowId
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
driver converts this to a SQL <code>ROWID</code> when it sends it to the
database.

@param parameterName the name of the parameter
@param x the parameter value
@throws SQLException if a database access error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10357890 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>String</code> object.
The driver converts this to a SQL <code>NCHAR</code> or
<code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
(depending on the argument's
size relative to the driver's limits on <code>NVARCHAR</code> values)
when it sends it to the database.

@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; or if a database access error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10358018 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>String</code> object.
The driver converts this to a SQL <code>NCHAR</code> or
<code>NVARCHAR</code> or <code>LONGNVARCHAR</code>
@param parameterName the name of the column to be set
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; or if a database access error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10358146 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.
@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@param length the number of characters in the parameter data.
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; or if a database access error occurs
@throws SQLFeatureNotSupportedException if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10358274 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.
@param parameterName the name of the column to be set
@param value the parameter value
@param length the number of characters in the parameter data.
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; or if a database access error occurs
@throws SQLFeatureNotSupportedException  if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10358402 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object. The
<code>Reader</code> reads the data till end-of-file is reached. The
driver does the necessary conversion from Java character format to
the national character set in the database.

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNCharacterStream</code> which takes a length parameter.

@param parameterName the name of the parameter
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; if a database access error occurs; or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.6
"
      end

      operation 10358530 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "value" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>java.sql.NClob</code> object. The object
implements the <code>java.sql.NClob</code> interface. This <code>NClob</code>
object maps to a SQL <code>NCLOB</code>.
@param parameterName the name of the column to be set
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; or if a database access error occurs
@throws SQLFeatureNotSupportedException  if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10358658 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The <code>reader</code> must contain
the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>CallableStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>

@param parameterName the name of the parameter to be set
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the length specified is less than zero;
if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur; if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@exception SQLFeatureNotSupportedException if the JDBC driver does not support
this method
@since 1.6
"
      end

      operation 10358786 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 128130 // String
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNClob</code> which takes a length parameter.

@param parameterName the name of the parameter
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>CallableStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10358914 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
of characters specified by length otherwise a <code>SQLException</code> will be
generated when the <code>PreparedStatement</code> is executed.
This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@param length the number of characters in the parameter data.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement; if the length specified is less than zero;
if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not
support this method

@since 1.6
"
      end

      operation 10359042 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 1039490 // NClob
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this oa
SQL <code>NCLOB</code> value when it sends it to the database.
@param parameterIndex of the first parameter is 1, the second is 2, ...
@param value the parameter value
@throws SQLException if the driver does not support national
        character sets;  if the driver can detect that a data conversion
 error could occur ; or if a database access error occurs
@throws SQLFeatureNotSupportedException  if the JDBC driver does not
support this method
@since 1.6
"
      end

      operation 10359170 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to a <code>Reader</code> object.
This method differs from the <code>setCharacterStream (int, Reader)</code> method
because it informs the driver that the parameter value should be sent to
the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
driver may have to do extra work to determine whether the parameter
data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
<P><B>Note:</B> Consult your JDBC driver documentation to determine if
it might be more efficient to use a version of
<code>setNClob</code> which takes a length parameter.

@param parameterIndex index of the first parameter is 1, the second is 2, ...
@param reader An object that contains the data to set the parameter value to.
@throws SQLException if parameterIndex does not correspond to a parameter
marker in the SQL statement;
if the driver does not support national character sets;
if the driver can detect that a data conversion
 error could occur;  if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method

@since 1.6
"
      end

      operation 10359298 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter to the given <code>java.net.URL</code> value.
The driver converts this to an SQL <code>DATALINK</code> value
when it sends it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the <code>java.net.URL</code> object to be set
@exception SQLException if a database access error occurs or
this method is called on a closed <code>PreparedStatement</code>
@throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
@since 1.4
"
      end

      attribute 2369794 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4886719666485113312L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1258626 "CachedRowSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface that all standard implementations of
<code>CachedRowSet</code> must implement.
<P>
The reference implementation of the <code>CachedRowSet</code> interface provided
by Oracle Corporation is a standard implementation. Developers may use this implementation
just as it is, they may extend it, or they may choose to write their own implementations
of this interface.
<P>
A <code>CachedRowSet</code> object is a container for rows of data
that caches its rows in memory, which makes it possible to operate without always being
connected to its data source. Further, it is a
JavaBeans&trade; component and is scrollable,
updatable, and serializable. A <code>CachedRowSet</code> object typically
contains rows from a result set, but it can also contain rows from any file
with a tabular format, such as a spread sheet.  The reference implementation
supports getting data only from a <code>ResultSet</code> object, but
developers can extend the <code>SyncProvider</code> implementations to provide
access to other tabular data sources.
<P>
An application can modify the data in a <code>CachedRowSet</code> object, and
those modifications can then be propagated back to the source of the data.
<P>
A <code>CachedRowSet</code> object is a <i>disconnected</i> rowset, which means
that it makes use of a connection to its data source only briefly. It connects to its
data source while it is reading data to populate itself with rows and again
while it is propagating changes back to its underlying data source. The rest
of the time, a <code>CachedRowSet</code> object is disconnected, including
while its data is being modified. Being disconnected makes a <code>RowSet</code>
object much leaner and therefore much easier to pass to another component.  For
example, a disconnected <code>RowSet</code> object can be serialized and passed
over the wire to a thin client such as a personal digital assistant (PDA).


<h3>1.0 Creating a <code>CachedRowSet</code> Object</h3>
The following line of code uses the default constructor for
<code>CachedRowSet</code>
supplied in the reference implementation (RI) to create a default
<code>CachedRowSet</code> object.
<PRE>
    CachedRowSetImpl crs = new CachedRowSetImpl();
</PRE>
This new <code>CachedRowSet</code> object will have its properties set to the
default properties of a <code>BaseRowSet</code> object, and, in addition, it will
have an <code>RIOptimisticProvider</code> object as its synchronization provider.
<code>RIOptimisticProvider</code>, one of two <code>SyncProvider</code>
implementations included in the RI, is the default provider that the
<code>SyncFactory</code> singleton will supply when no synchronization
provider is specified.
<P>
A <code>SyncProvider</code> object provides a <code>CachedRowSet</code> object
with a reader (a <code>RowSetReader</code> object) for reading data from a
data source to populate itself with data. A reader can be implemented to read
data from a <code>ResultSet</code> object or from a file with a tabular format.
A <code>SyncProvider</code> object also provides
a writer (a <code>RowSetWriter</code> object) for synchronizing any
modifications to the <code>CachedRowSet</code> object's data made while it was
disconnected with the data in the underlying data source.
<P>
A writer can be implemented to exercise various degrees of care in checking
for conflicts and in avoiding them.
(A conflict occurs when a value in the data source has been changed after
the rowset populated itself with that value.)
The <code>RIOptimisticProvider</code> implementation assumes there will be
few or no conflicts and therefore sets no locks. It updates the data source
with values from the <code>CachedRowSet</code> object only if there are no
conflicts.
Other writers can be implemented so that they always write modified data to
the data source, which can be accomplished either by not checking for conflicts
or, on the other end of the spectrum, by setting locks sufficient to prevent data
in the data source from being changed. Still other writer implementations can be
somewhere in between.
<P>
A <code>CachedRowSet</code> object may use any
<code>SyncProvider</code> implementation that has been registered
with the <code>SyncFactory</code> singleton. An application
can find out which <code>SyncProvider</code> implementations have been
registered by calling the following line of code.
<PRE>
     java.util.Enumeration providers = SyncFactory.getRegisteredProviders();
</PRE>
<P>
There are two ways for a <code>CachedRowSet</code> object to specify which
<code>SyncProvider</code> object it will use.
<UL>
    <LI>Supplying the name of the implementation to the constructor<BR>
    The following line of code creates the <code>CachedRowSet</code>
    object <i>crs2</i> that is initialized with default values except that its
    <code>SyncProvider</code> object is the one specified.
    <PRE>
         CachedRowSetImpl crs2 = new CachedRowSetImpl(
                                \"com.fred.providers.HighAvailabilityProvider\");
    </PRE>
    <LI>Setting the <code>SyncProvider</code> using the <code>CachedRowSet</code>
        method <code>setSyncProvider</code><BR>
     The following line of code resets the <code>SyncProvider</code> object
     for <i>crs</i>, the <code>CachedRowSet</code> object created with the
     default constructor.
     <PRE>
          crs.setSyncProvider(\"com.fred.providers.HighAvailabilityProvider\");
     </PRE>
</UL>
See the comments for <code>SyncFactory</code> and <code>SyncProvider</code> for
more details.


<h3>2.0 Retrieving Data from a <code>CachedRowSet</code> Object</h3>
Data is retrieved from a <code>CachedRowSet</code> object by using the
getter methods inherited from the <code>ResultSet</code>
interface.  The following examples, in which <code>crs</code> is a
<code>CachedRowSet</code>
object, demonstrate how to iterate through the rows, retrieving the column
values in each row.  The first example uses the version of the
getter methods that take a column number; the second example
uses the version that takes a column name. Column numbers are generally
used when the <code>RowSet</code> object's command
is of the form <code>SELECT * FROM TABLENAME</code>; column names are most
commonly used when the command specifies columns by name.
<PRE>
   while (crs.next()) {
       String name = crs.getString(1);
       int id = crs.getInt(2);
       Clob comment = crs.getClob(3);
       short dept = crs.getShort(4);
       System.out.println(name + \"  \" + id + \"  \" + comment + \"  \" + dept);
   }
</PRE>

<PRE>
   while (crs.next()) {
       String name = crs.getString(\"NAME\");
       int id = crs.getInt(\"ID\");
       Clob comment = crs.getClob(\"COM\");
       short dept = crs.getShort(\"DEPT\");
       System.out.println(name + \"  \" + id + \"  \" + comment + \"  \" + dept);
   }
</PRE>
<h4>2.1 Retrieving <code>RowSetMetaData</code></h4>
An application can get information about the columns in a <code>CachedRowSet</code>
object by calling <code>ResultSetMetaData</code> and <code>RowSetMetaData</code>
methods on a <code>RowSetMetaData</code> object. The following code fragment,
in which <i>crs</i> is a <code>CachedRowSet</code> object, illustrates the process.
The first line creates a <code>RowSetMetaData</code> object with information
about the columns in <i>crs</i>.  The method <code>getMetaData</code>,
inherited from the <code>ResultSet</code> interface, returns a
<code>ResultSetMetaData</code> object, which is cast to a
<code>RowSetMetaData</code> object before being assigned to the variable
<i>rsmd</i>.  The second line finds out how many columns <i>jrs</i> has, and
the third line gets the JDBC type of values stored in the second column of
<code>jrs</code>.
<PRE>
    RowSetMetaData rsmd = (RowSetMetaData)crs.getMetaData();
    int count = rsmd.getColumnCount();
    int type = rsmd.getColumnType(2);
</PRE>
The <code>RowSetMetaData</code> interface differs from the
<code>ResultSetMetaData</code> interface in two ways.
<UL>
  <LI><i>It includes <code>setter</code> methods:</i> A <code>RowSet</code>
  object uses these methods internally when it is populated with data from a
  different <code>ResultSet</code> object.

  <LI><i>It contains fewer <code>getter</code> methods:</i> Some
  <code>ResultSetMetaData</code> methods to not apply to a <code>RowSet</code>
  object. For example, methods retrieving whether a column value is writable
  or read only do not apply because all of a <code>RowSet</code> object's
  columns will be writable or read only, depending on whether the rowset is
  updatable or not.
</UL>
NOTE: In order to return a <code>RowSetMetaData</code> object, implementations must
override the <code>getMetaData()</code> method defined in
<code>java.sql.ResultSet</code> and return a <code>RowSetMetaData</code> object.

<h3>3.0 Updating a <code>CachedRowSet</code> Object</h3>
Updating a <code>CachedRowSet</code> object is similar to updating a
<code>ResultSet</code> object, but because the rowset is not connected to
its data source while it is being updated, it must take an additional step
to effect changes in its underlying data source. After calling the method
<code>updateRow</code> or <code>insertRow</code>, a
<code>CachedRowSet</code>
object must also call the method <code>acceptChanges</code> to have updates
written to the data source. The following example, in which the cursor is
on a row in the <code>CachedRowSet</code> object <i>crs</i>, shows
the code required to update two column values in the current row and also
update the <code>RowSet</code> object's underlying data source.
<PRE>
    crs.updateShort(3, 58);
    crs.updateInt(4, 150000);
    crs.updateRow();
    crs.acceptChanges();
</PRE>
<P>
The next example demonstrates moving to the insert row, building a new
row on the insert row, inserting it into the rowset, and then calling the
method <code>acceptChanges</code> to add the new row to the underlying data
source.  Note that as with the getter methods, the  updater methods may take
either a column index or a column name to designate the column being acted upon.
<PRE>
    crs.moveToInsertRow();
    crs.updateString(\"Name\", \"Shakespeare\");
    crs.updateInt(\"ID\", 10098347);
    crs.updateShort(\"Age\", 58);
    crs.updateInt(\"Sal\", 150000);
    crs.insertRow();
    crs.moveToCurrentRow();
    crs.acceptChanges();
</PRE>
<P>
NOTE: Where the <code>insertRow()</code> method inserts the contents of a
<code>CachedRowSet</code> object's insert row is implementation-defined.
The reference implementation for the <code>CachedRowSet</code> interface
inserts a new row immediately following the current row, but it could be
implemented to insert new rows in any number of other places.
<P>
Another thing to note about these examples is how they use the method
<code>acceptChanges</code>.  It is this method that propagates changes in
a <code>CachedRowSet</code> object back to the underlying data source,
calling on the <code>RowSet</code> object's writer internally to write
changes to the data source. To do this, the writer has to incur the expense
of establishing a connection with that data source. The
preceding two code fragments call the method <code>acceptChanges</code>
immediately after calling <code>updateRow</code> or <code>insertRow</code>.
However, when there are multiple rows being changed, it is more efficient to call
<code>acceptChanges</code> after all calls to <code>updateRow</code>
and <code>insertRow</code> have been made.  If <code>acceptChanges</code>
is called only once, only one connection needs to be established.

<h3>4.0 Updating the Underlying Data Source</h3>
When the method <code>acceptChanges</code> is executed, the
<code>CachedRowSet</code> object's writer, a <code>RowSetWriterImpl</code>
object, is called behind the scenes to write the changes made to the
rowset to the underlying data source. The writer is implemented to make a
connection to the data source and write updates to it.
<P>
A writer is made available through an implementation of the
<code>SyncProvider</code> interface, as discussed in section 1,
\"Creating a <code>CachedRowSet</code> Object.\"
The default reference implementation provider, <code>RIOptimisticProvider</code>,
has its writer implemented to use an optimistic concurrency control
mechanism. That is, it maintains no locks in the underlying database while
the rowset is disconnected from the database and simply checks to see if there
are any conflicts before writing data to the data source.  If there are any
conflicts, it does not write anything to the data source.
<P>
The reader/writer facility
provided by the <code>SyncProvider</code> class is pluggable, allowing for the
customization of data retrieval and updating. If a different concurrency
control mechanism is desired, a different implementation of
<code>SyncProvider</code> can be plugged in using the method
<code>setSyncProvider</code>.
<P>
In order to use the optimistic concurrency control routine, the
<code>RIOptismisticProvider</code> maintains both its current
value and its original value (the value it had immediately preceding the
current value). Note that if no changes have been made to the data in a
<code>RowSet</code> object, its current values and its original values are the same,
both being the values with which the <code>RowSet</code> object was initially
populated.  However, once any values in the <code>RowSet</code> object have been
changed, the current values and the original values will be different, though at
this stage, the original values are still the initial values. With any subsequent
changes to data in a <code>RowSet</code> object, its original values and current
values will still differ, but its original values will be the values that
were previously the current values.
<P>
Keeping track of original values allows the writer to compare the <code>RowSet</code>
object's original value with the value in the database. If the values in
the database differ from the <code>RowSet</code> object's original values, which means that
the values in the database have been changed, there is a conflict.
Whether a writer checks for conflicts, what degree of checking it does, and how
it handles conflicts all depend on how it is implemented.

<h3>5.0 Registering and Notifying Listeners</h3>
Being JavaBeans components, all rowsets participate in the JavaBeans event
model, inheriting methods for registering listeners and notifying them of
changes from the <code>BaseRowSet</code> class.  A listener for a
<code>CachedRowSet</code> object is a component that wants to be notified
whenever there is a change in the rowset.  For example, if a
<code>CachedRowSet</code> object contains the results of a query and
those
results are being displayed in, say, a table and a bar graph, the table and
bar graph could be registered as listeners with the rowset so that they can
update themselves to reflect changes. To become listeners, the table and
bar graph classes must implement the <code>RowSetListener</code> interface.
Then they can be added to the <Code>CachedRowSet</code> object's list of
listeners, as is illustrated in the following lines of code.
<PRE>
   crs.addRowSetListener(table);
   crs.addRowSetListener(barGraph);
</PRE>
Each <code>CachedRowSet</code> method that moves the cursor or changes
data also notifies registered listeners of the changes, so
<code>table</code> and <code>barGraph</code> will be notified when there is
a change in <code>crs</code>.

<h3>6.0 Passing Data to Thin Clients</h3>
One of the main reasons to use a <code>CachedRowSet</code> object is to
pass data between different components of an application. Because it is
serializable, a <code>CachedRowSet</code> object can be used, for example,
to send the result of a query executed by an enterprise JavaBeans component
running in a server environment over a network to a client running in a
web browser.
<P>
While a <code>CachedRowSet</code> object is disconnected, it can be much
leaner than a <code>ResultSet</code> object with the same data.
As a result, it can be especially suitable for sending data to a thin client
such as a PDA, where it would be inappropriate to use a JDBC driver
due to resource limitations or security considerations.
Thus, a <code>CachedRowSet</code> object provides a means to \"get rows in\"
without the need to implement the full JDBC API.

<h3>7.0 Scrolling and Updating</h3>
A second major use for <code>CachedRowSet</code> objects is to provide
scrolling and updating for <code>ResultSet</code> objects that
do not provide these capabilities themselves.  In other words, a
<code>CachedRowSet</code> object can be used to augment the
capabilities of a JDBC technology-enabled driver (hereafter called a
\"JDBC driver\") when the DBMS does not provide full support for scrolling and
updating. To achieve the effect of making a non-scrollble and read-only
<code>ResultSet</code> object scrollable and updatable, a programmer
simply needs to create a <code>CachedRowSet</code> object populated
with that <code>ResultSet</code> object's data.  This is demonstrated
in the following code fragment, where <code>stmt</code> is a
<code>Statement</code> object.
<PRE>
   ResultSet rs = stmt.executeQuery(\"SELECT * FROM EMPLOYEES\");
   CachedRowSetImpl crs = new CachedRowSetImpl();
   crs.populate(rs);
</PRE>
<P>
The object <code>crs</code> now contains the data from the table
<code>EMPLOYEES</code>, just as the object <code>rs</code> does.
The difference is that the cursor for <code>crs</code> can be moved
forward, backward, or to a particular row even if the cursor for
<code>rs</code> can move only forward.  In addition, <code>crs</code> is
updatable even if <code>rs</code> is not because by default, a
<code>CachedRowSet</code> object is both scrollable and updatable.
<P>
In summary, a <code>CachedRowSet</code> object can be thought of as simply
a disconnected set of rows that are being cached outside of a data source.
Being thin and serializable, it can easily be sent across a wire,
and it is well suited to sending data to a thin client. However, a
<code>CachedRowSet</code> object does have a limitation: It is limited in
size by the amount of data it can store in memory at one time.

<h3>8.0 Getting Universal Data Access</h3>
Another advantage of the <code>CachedRowSet</code> class is that it makes it
possible to retrieve and store data from sources other than a relational
database. The reader for a rowset can be implemented to read and populate
its rowset with data from any tabular data source, including a spreadsheet
or flat file.
Because both a <code>CachedRowSet</code> object and its metadata can be
created from scratch, a component that acts as a factory for rowsets
can use this capability to create a rowset containing data from
non-SQL data sources. Nevertheless, it is expected that most of the time,
<code>CachedRowSet</code> objects will contain data that was fetched
from an SQL database using the JDBC API.

<h3>9.0 Setting Properties</h3>
All rowsets maintain a set of properties, which will usually be set using
a tool.  The number and kinds of properties a rowset has will vary,
depending on what the rowset does and how it gets its data.  For example,
rowsets that get their data from a <code>ResultSet</code> object need to
set the properties that are required for making a database connection.
If a rowset uses the <code>DriverManager</code> facility to make a
connection, it needs to set a property for the JDBC URL that identifies
the appropriate driver, and it needs to set the properties that give the
user name and password.
If, on the other hand, the rowset uses a <code>DataSource</code> object
to make the connection, which is the preferred method, it does not need to
set the property for the JDBC URL.  Instead, it needs to set
properties for the logical name of the data source, for the user name,
and for the password.
<P>
NOTE:  In order to use a <code>DataSource</code> object for making a
connection, the <code>DataSource</code> object must have been registered
with a naming service that uses the Java Naming and Directory
Interface&trade; (JNDI) API.  This registration
is usually done by a person acting in the capacity of a system
administrator.
<P>
In order to be able to populate itself with data from a database, a rowset
needs to set a command property.  This property is a query that is a
<code>PreparedStatement</code> object, which allows the query to have
parameter placeholders that are set at run time, as opposed to design time.
To set these placeholder parameters with values, a rowset provides
setter methods for setting values of each data type,
similar to the setter methods provided by the <code>PreparedStatement</code>
interface.
<P>
The following code fragment illustrates how the <code>CachedRowSet</code>
object <code>crs</code> might have its command property set.  Note that if a
tool is used to set properties, this is the code that the tool would use.
<PRE>{@code
   crs.setCommand(\"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS \" +
                  \"WHERE CREDIT_LIMIT > ? AND REGION = ?\");
} </PRE>
<P>
The values that will be used to set the command's placeholder parameters are
contained in the <code>RowSet</code> object's <code>params</code> field, which is a
<code>Vector</code> object.
The <code>CachedRowSet</code> class provides a set of setter
methods for setting the elements in its <code>params</code> field.  The
following code fragment demonstrates setting the two parameters in the
query from the previous example.
<PRE>
   crs.setInt(1, 5000);
   crs.setString(2, \"West\");
</PRE>
<P>
The <code>params</code> field now contains two elements, each of which is
an array two elements long.  The first element is the parameter number;
the second is the value to be set.
In this case, the first element of <code>params</code> is
<code>1</code>, <code>5000</code>, and the second element is <code>2</code>,
<code>\"West\"</code>.  When an application calls the method
<code>execute</code>, it will in turn call on this <code>RowSet</code> object's reader,
which will in turn invoke its <code>readData</code> method. As part of
its implementation, <code>readData</code> will get the values in
<code>params</code> and use them to set the command's placeholder
parameters.
The following code fragment gives an idea of how the reader
does this, after obtaining the <code>Connection</code> object
<code>con</code>.
<PRE>{@code
   PreparedStatement pstmt = con.prepareStatement(crs.getCommand());
   reader.decodeParams();
   // decodeParams figures out which setter methods to use and does something
   // like the following:
   //    for (i = 0; i < params.length; i++) {
   //        pstmt.setObject(i + 1, params[i]);
   //    }
}</PRE>
<P>
At this point, the command for <code>crs</code> is the query {@code \"SELECT
FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS WHERE CREDIT_LIMIT > 5000
AND REGION = \"West\"}.  After the <code>readData</code> method executes
this command with the following line of code, it will have the data from
<code>rs</code> with which to populate <code>crs</code>.
<PRE>{@code
    ResultSet rs = pstmt.executeQuery();
}</PRE>
<P>
The preceding code fragments give an idea of what goes on behind the
scenes; they would not appear in an application, which would not invoke
methods like <code>readData</code> and <code>decodeParams</code>.
In contrast, the following code fragment shows what an application might do.
It sets the rowset's command, sets the command's parameters, and executes
the command. Simply by calling the <code>execute</code> method,
<code>crs</code> populates itself with the requested data from the
table <code>CUSTOMERS</code>.
<PRE>{@code
   crs.setCommand(\"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS\" +
                  \"WHERE CREDIT_LIMIT > ? AND REGION = ?\");
   crs.setInt(1, 5000);
   crs.setString(2, \"West\");
   crs.execute();
}</PRE>

<h3>10.0 Paging Data</h3>
Because a <code>CachedRowSet</code> object stores data in memory,
the amount of data that it can contain at any one
time is determined by the amount of memory available. To get around this limitation,
a <code>CachedRowSet</code> object can retrieve data from a <code>ResultSet</code>
object in chunks of data, called <i>pages</i>. To take advantage of this mechanism,
an application sets the number of rows to be included in a page using the method
<code>setPageSize</code>. In other words, if the page size is set to five, a chunk
of five rows of
data will be fetched from the data source at one time. An application can also
optionally set the maximum number of rows that may be fetched at one time.  If the
maximum number of rows is set to zero, or no maximum number of rows is set, there is
no limit to the number of rows that may be fetched at a time.
<P>
After properties have been set,
the <code>CachedRowSet</code> object must be populated with data
using either the method <code>populate</code> or the method <code>execute</code>.
The following lines of code demonstrate using the method <code>populate</code>.
Note that this version of the method takes two parameters, a <code>ResultSet</code>
handle and the row in the <code>ResultSet</code> object from which to start
retrieving rows.
<PRE>
    CachedRowSet crs = new CachedRowSetImpl();
    crs.setMaxRows(20);
    crs.setPageSize(4);
    crs.populate(rsHandle, 10);
</PRE>
When this code runs, <i>crs</i> will be populated with four rows from
<i>rsHandle</i> starting with the tenth row.
<P>
The next code fragment shows populating a <code>CachedRowSet</code> object using the
method <code>execute</code>, which may or may not take a <code>Connection</code>
object as a parameter.  This code passes <code>execute</code> the <code>Connection</code>
object <i>conHandle</i>.
<P>
Note that there are two differences between the following code
fragment and the previous one. First, the method <code>setMaxRows</code> is not
called, so there is no limit set for the number of rows that <i>crs</i> may contain.
(Remember that <i>crs</i> always has the overriding limit of how much data it can
store in memory.) The second difference is that the you cannot pass the method
<code>execute</code> the number of the row in the <code>ResultSet</code> object
from which to start retrieving rows. This method always starts with the first row.
<PRE>
    CachedRowSet crs = new CachedRowSetImpl();
    crs.setPageSize(5);
    crs.execute(conHandle);
</PRE>
After this code has run, <i>crs</i> will contain five rows of data from the
<code>ResultSet</code> object produced by the command for <i>crs</i>. The writer
for <i>crs</i> will use <i>conHandle</i> to connect to the data source and
execute the command for <i>crs</i>. An application is then able to operate on the
data in <i>crs</i> in the same way that it would operate on data in any other
<code>CachedRowSet</code> object.
<P>
To access the next page (chunk of data), an application calls the method
<code>nextPage</code>.  This method creates a new <code>CachedRowSet</code> object
and fills it with the next page of data.  For example, assume that the
<code>CachedRowSet</code> object's command returns a <code>ResultSet</code> object
<i>rs</i> with 1000 rows of data.  If the page size has been set to 100, the first
 call to the method <code>nextPage</code> will create a <code>CachedRowSet</code> object
containing the first 100 rows of <i>rs</i>. After doing what it needs to do with the
data in these first 100 rows, the application can again call the method
<code>nextPage</code> to create another <code>CachedRowSet</code> object
with the second 100 rows from <i>rs</i>. The data from the first <code>CachedRowSet</code>
object will no longer be in memory because it is replaced with the data from the
second <code>CachedRowSet</code> object. After the tenth call to the method <code>nextPage</code>,
the tenth <code>CachedRowSet</code> object will contain the last 100 rows of data from
<i>rs</i>, which are stored in memory. At any given time, the data from only one
<code>CachedRowSet</code> object is stored in memory.
<P>
The method <code>nextPage</code> returns <code>true</code> as long as the current
page is not the last page of rows and <code>false</code> when there are no more pages.
It can therefore be used in a <code>while</code> loop to retrieve all of the pages,
as is demonstrated in the following lines of code.
<PRE>
    CachedRowSet crs = CachedRowSetImpl();
    crs.setPageSize(100);
    crs.execute(conHandle);

    while(crs.nextPage()) {
        while(crs.next()) {
            . . . // operate on chunks (of 100 rows each) in crs,
                  // row by row
        }
    }
</PRE>
After this code fragment has been run, the application will have traversed all
1000 rows, but it will have had no more than 100 rows in memory at a time.
<P>
The <code>CachedRowSet</code> interface also defines the method <code>previousPage</code>.
Just as the method <code>nextPage</code> is analogous to the <code>ResultSet</code>
method <code>next</code>, the method <code>previousPage</code> is analogous to
the <code>ResultSet</code> method <code>previous</code>.  Similar to the method
<code>nextPage</code>, <code>previousPage</code> creates a <code>CachedRowSet</code>
object containing the number of rows set as the page size.  So, for instance, the
method <code>previousPage</code> could be used in a <code>while</code> loop at
the end of the preceding code fragment to navigate back through the pages from the last
page to the first page.
The method <code>previousPage</code> is also similar to <code>nextPage</code>
in that it can be used in a <code>while</code>
loop, except that it returns <code>true</code> as long as there is another page
preceding it and <code>false</code> when there are no more pages ahead of it.
<P>
By positioning the cursor after the last row for each page,
as is done in the following code fragment, the method <code>previous</code>
navigates from the last row to the first row in each page.
The code could also have left the cursor before the first row on each page and then
used the method <code>next</code> in a <code>while</code> loop to navigate each page
from the first row to the last row.
<P>
The following code fragment assumes a continuation from the previous code fragment,
meaning that the cursor for the tenth <code>CachedRowSet</code> object is on the
last row.  The code moves the cursor to after the last row so that the first
call to the method <code>previous</code> will put the cursor back on the last row.
After going through all of the rows in the last page (the <code>CachedRowSet</code>
object <i>crs</i>), the code then enters
the <code>while</code> loop to get to the ninth page, go through the rows backwards,
go to the eighth page, go through the rows backwards, and so on to the first row
of the first page.

<PRE>
    crs.afterLast();
    while(crs.previous())  {
        . . . // navigate through the rows, last to first
    {
    while(crs.previousPage())  {
        crs.afterLast();
        while(crs.previous())  {
            . . . // go from the last row to the first row of each page
        }
    }
</PRE>

@author Jonathan Bruce
"
      classrelation 4047362 // <generalisation>
	relation 4047362 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4047362 // <generalisation>
	  b parent class_ref 1257218 // RowSet
      end

      classrelation 4047490 // <generalisation>
	relation 4047490 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4047490 // <generalisation>
	  b parent class_ref 1258754 // Joinable
      end

      operation 10360706 "populate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 1037314 // ResultSet
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates this <code>CachedRowSet</code> object with data from
the given <code>ResultSet</code> object.
<P>
This method can be used as an alternative to the <code>execute</code> method when an
application has a connection to an open <code>ResultSet</code> object.
Using the method <code>populate</code> can be more efficient than using
the version of the <code>execute</code> method that takes no parameters
because it does not open a new connection and re-execute this
<code>CachedRowSet</code> object's command. Using the <code>populate</code>
method is more a matter of convenience when compared to using the version
of <code>execute</code> that takes a <code>ResultSet</code> object.

@param data the <code>ResultSet</code> object containing the data
to be read into this <code>CachedRowSet</code> object
@throws SQLException if a null <code>ResultSet</code> object is supplied
or this <code>CachedRowSet</code> object cannot
retrieve the associated <code>ResultSetMetaData</code> object
@see #execute
@see java.sql.ResultSet
@see java.sql.ResultSetMetaData
"
      end

      operation 10360834 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "conn" type class_ref 1038338 // Connection
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates this <code>CachedRowSet</code> object with data, using the
given connection to produce the result set from which the data will be read.
This method should close any database connections that it creates to
ensure that this <code>CachedRowSet</code> object is disconnected except when
it is reading data from its data source or writing data to its data source.
<P>
The reader for this <code>CachedRowSet</code> object
will use <i>conn</i> to establish a connection to the data source
so that it can execute the rowset's command and read data from the
the resulting <code>ResultSet</code> object into this
<code>CachedRowSet</code> object. This method also closes <i>conn</i>
after it has populated this <code>CachedRowSet</code> object.
<P>
If this method is called when an implementation has already been
populated, the contents and the metadata are (re)set. Also, if this method is
called before the method <code>acceptChanges</code> has been called
to commit outstanding updates, those updates are lost.

@param conn a standard JDBC <code>Connection</code> object with valid
properties
@throws SQLException if an invalid <code>Connection</code> object is supplied
or an error occurs in establishing the connection to the
data source
@see #populate
@see java.sql.Connection
"
      end

      operation 10360962 "acceptChanges"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1258882 // SyncProviderException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Propagates row update, insert and delete changes made to this
<code>CachedRowSet</code> object to the underlying data source.
<P>
This method calls on this <code>CachedRowSet</code> object's writer
to do the work behind the scenes.
Standard <code>CachedRowSet</code> implementations should use the
<code>SyncFactory</code> singleton
to obtain a <code>SyncProvider</code> instance providing a
<code>RowSetWriter</code> object (writer).  The writer will attempt
to propagate changes made in this <code>CachedRowSet</code> object
back to the data source.
<P>
When the method <code>acceptChanges</code> executes successfully, in
addition to writing changes to the data source, it
makes the values in the current row be the values in the original row.
<P>
Depending on the synchronization level of the <code>SyncProvider</code>
implementation being used, the writer will compare the original values
with those in the data source to check for conflicts. When there is a conflict,
the <code>RIOptimisticProvider</code> implementation, for example, throws a
<code>SyncProviderException</code> and does not write anything to the
data source.
<P>
An application may choose to catch the <code>SyncProviderException</code>
object and retrieve the <code>SyncResolver</code> object it contains.
The <code>SyncResolver</code> object lists the conflicts row by row and
sets a lock on the data source to avoid further conflicts while the
current conflicts are being resolved.
Further, for each conflict, it provides methods for examining the conflict
and setting the value that should be persisted in the data source.
After all conflicts have been resolved, an application must call the
<code>acceptChanges</code> method again to write resolved values to the
data source.  If all of the values in the data source are already the
values to be persisted, the method <code>acceptChanges</code> does nothing.
<P>
Some provider implementations may use locks to ensure that there are no
conflicts.  In such cases, it is guaranteed that the writer will succeed in
writing changes to the data source when the method <code>acceptChanges</code>
is called.  This method may be called immediately after the methods
<code>updateRow</code>, <code>insertRow</code>, or <code>deleteRow</code>
have been called, but it is more efficient to call it only once after
all changes have been made so that only one connection needs to be
established.
<P>
Note: The <code>acceptChanges()</code> method will determine if the
<code>COMMIT_ON_ACCEPT_CHANGES</code> is set to true or not. If it is set
to true, all updates in the synchronization are committed to the data
source. Otherwise, the application <b>must</b> explicity call the
<code>commit()</code> or <code>rollback()</code> methods as appropriate.

@throws SyncProviderException if the underlying
synchronization provider's writer fails to write the updates
back to the data source
@see #acceptChanges(java.sql.Connection)
@see javax.sql.RowSetWriter
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncProvider
@see javax.sql.rowset.spi.SyncProviderException
@see javax.sql.rowset.spi.SyncResolver
"
      end

      operation 10361090 "acceptChanges"
	public explicit_return_type "void"
	nparams 1
	  param inout name "con" type class_ref 1038338 // Connection
	nexceptions 1
	  exception class_ref 1258882 // SyncProviderException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Propagates all row update, insert and delete changes to the
data source backing this <code>CachedRowSet</code> object
using the specified <code>Connection</code> object to establish a
connection to the data source.
<P>
The other version of the <code>acceptChanges</code> method is not passed
a connection because it uses
the <code>Connection</code> object already defined within the <code>RowSet</code>
object, which is the connection used for populating it initially.
<P>
This form of the method <code>acceptChanges</code> is similar to the
form that takes no arguments; however, unlike the other form, this form
can be used only when the underlying data source is a JDBC data source.
The updated <code>Connection</code> properties must be used by the
<code>SyncProvider</code> to reset the <code>RowSetWriter</code>
configuration to ensure that the contents of the <code>CachedRowSet</code>
object are synchronized correctly.
<P>
When the method <code>acceptChanges</code> executes successfully, in
addition to writing changes to the data source, it
makes the values in the current row be the values in the original row.
<P>
Depending on the synchronization level of the <code>SyncProvider</code>
implementation being used, the writer will compare the original values
with those in the data source to check for conflicts. When there is a conflict,
the <code>RIOptimisticProvider</code> implementation, for example, throws a
<code>SyncProviderException</code> and does not write anything to the
data source.
<P>
An application may choose to catch the <code>SyncProviderException</code>
object and retrieve the <code>SyncResolver</code> object it contains.
The <code>SyncResolver</code> object lists the conflicts row by row and
sets a lock on the data source to avoid further conflicts while the
current conflicts are being resolved.
Further, for each conflict, it provides methods for examining the conflict
and setting the value that should be persisted in the data source.
After all conflicts have been resolved, an application must call the
<code>acceptChanges</code> method again to write resolved values to the
data source.  If all of the values in the data source are already the
values to be persisted, the method <code>acceptChanges</code> does nothing.
<P>
Some provider implementations may use locks to ensure that there are no
conflicts.  In such cases, it is guaranteed that the writer will succeed in
writing changes to the data source when the method <code>acceptChanges</code>
is called.  This method may be called immediately after the methods
<code>updateRow</code>, <code>insertRow</code>, or <code>deleteRow</code>
have been called, but it is more efficient to call it only once after
all changes have been made so that only one connection needs to be
established.
<P>
Note: The <code>acceptChanges()</code> method will determine if the
<code>COMMIT_ON_ACCEPT_CHANGES</code> is set to true or not. If it is set
to true, all updates in the synchronization are committed to the data
source. Otherwise, the application <b>must</b> explicity call the
<code>commit</code> or <code>rollback</code> methods as appropriate.

@param con a standard JDBC <code>Connection</code> object
@throws SyncProviderException if the underlying
synchronization provider's writer fails to write the updates
back to the data source
@see #acceptChanges()
@see javax.sql.RowSetWriter
@see javax.sql.rowset.spi.SyncFactory
@see javax.sql.rowset.spi.SyncProvider
@see javax.sql.rowset.spi.SyncProviderException
@see javax.sql.rowset.spi.SyncResolver
"
      end

      operation 10361218 "restoreOriginal"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restores this <code>CachedRowSet</code> object to its original
value, that is, its value before the last set of changes. If there
have been no changes to the rowset or only one set of changes,
the original value is the value with which this <code>CachedRowSet</code> object
was populated; otherwise, the original value is
the value it had immediately before its current value.
<P>
When this method is called, a <code>CachedRowSet</code> implementation
must ensure that all updates, inserts, and deletes to the current
rowset instance are replaced by the previous values. In addition,
the cursor should be
reset to the first row and a <code>rowSetChanged</code> event
should be fired to notify all registered listeners.

@throws SQLException if an error occurs rolling back the current value of
      this <code>CachedRowSet</code> object to its previous value
@see javax.sql.RowSetListener#rowSetChanged
"
      end

      operation 10361346 "release"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases the current contents of this <code>CachedRowSet</code>
object and sends a <code>rowSetChanged</code> event to all
registered listeners. Any outstanding updates are discarded and
the rowset contains no rows after this method is called. There
are no interactions with the underlying data source, and any rowset
content, metadata, and content updates should be non-recoverable.
<P>
This <code>CachedRowSet</code> object should lock until its contents and
associated updates are fully cleared, thus preventing 'dirty' reads by
other components that hold a reference to this <code>RowSet</code> object.
In addition, the contents cannot be released
until all all components reading this <code>CachedRowSet</code> object
have completed their reads. This <code>CachedRowSet</code> object
should be returned to normal behavior after firing the
<code>rowSetChanged</code> event.
<P>
The metadata, including JDBC properties and Synchronization SPI
properties, are maintained for future use. It is important that
properties such as the <code>command</code> property be
relevant to the originating data source from which this <code>CachedRowSet</code>
object was originally established.
<P>
This method empties a rowset, as opposed to the <code>close</code> method,
which marks the entire rowset as recoverable to allow the garbage collector
the rowset's Java VM resources.

@throws SQLException if an error occurs flushing the contents of this
<code>CachedRowSet</code> object
@see javax.sql.RowSetListener#rowSetChanged
@see java.sql.ResultSet#close
"
      end

      operation 10361474 "undoDelete"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the deletion of the current row and notifies listeners that
a row has changed. After this method is called, the current row is
no longer marked for deletion. This method can be called at any
time during the lifetime of the rowset.
<P>
In addition, multiple cancellations of row deletions can be made
by adjusting the position of the cursor using any of the cursor
position control methods such as:
<ul>
<li><code>CachedRowSet.absolute</code>
<li><code>CachedRowSet.first</code>
<li><code>CachedRowSet.last</code>
</ul>

@throws SQLException if (1) the current row has not been deleted or
(2) the cursor is on the insert row, before the first row, or
after the last row
@see javax.sql.rowset.CachedRowSet#undoInsert
@see java.sql.ResultSet#cancelRowUpdates
"
      end

      operation 10361602 "undoInsert"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Immediately removes the current row from this <code>CachedRowSet</code>
object if the row has been inserted, and also notifies listeners that a
row has changed. This method can be called at any time during the
lifetime of a rowset and assuming the current row is within
the exception limitations (see below), it cancels the row insertion
of the current row.
<P>
In addition, multiple cancellations of row insertions can be made
by adjusting the position of the cursor using any of the cursor
position control methods such as:
<ul>
<li><code>CachedRowSet.absolute</code>
<li><code>CachedRowSet.first</code>
<li><code>CachedRowSet.last</code>
</ul>

@throws SQLException if (1) the current row has not been inserted or (2)
the cursor is before the first row, after the last row, or on the
insert row
@see javax.sql.rowset.CachedRowSet#undoDelete
@see java.sql.ResultSet#cancelRowUpdates
"
      end

      operation 10361730 "undoUpdate"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Immediately reverses the last update operation if the
row has been modified. This method can be
called to reverse updates on all columns until all updates in a row have
been rolled back to their state just prior to the last synchronization
(<code>acceptChanges</code>) or population. This method may also be called
while performing updates to the insert row.
<P>
<code>undoUpdate</code> may be called at any time during the lifetime of a
rowset; however, after a synchronization has occurred, this method has no
effect until further modification to the rowset data has occurred.

@throws SQLException if the cursor is before the first row or after the last
    row in in this <code>CachedRowSet</code> object
@see #undoDelete
@see #undoInsert
@see java.sql.ResultSet#cancelRowUpdates
"
      end

      operation 10361858 "columnUpdated"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "idx" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column in the current row of this
<code>CachedRowSet</code> object has been updated.

@param idx an <code>int</code> identifying the column to be checked for updates
@return <code>true</code> if the designated column has been visibly updated;
<code>false</code> otherwise
@throws SQLException if the cursor is on the insert row, before the first row,
    or after the last row
@see java.sql.DatabaseMetaData#updatesAreDetected
"
      end

      operation 10361986 "columnUpdated"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "columnName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column in the current row of this
<code>CachedRowSet</code> object has been updated.

@param columnName a <code>String</code> object giving the name of the
       column to be checked for updates
@return <code>true</code> if the column has been visibly updated;
<code>false</code> otherwise
@throws SQLException if the cursor is on the insert row, before the first row,
     or after the last row
@see java.sql.DatabaseMetaData#updatesAreDetected
"
      end

      operation 10362114 "toCollection"
	public return_type class_ref 184194 // Collection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this <code>CachedRowSet</code> object to a <code>Collection</code>
object that contains all of this <code>CachedRowSet</code> object's data.
Implementations have some latitude in
how they can represent this <code>Collection</code> object because of the
abstract nature of the <code>Collection</code> framework.
Each row must be fully represented in either a
general purpose <code>Collection</code> implementation or a specialized
<code>Collection</code> implementation, such as a <code>TreeMap</code>
object or a <code>Vector</code> object.
An SQL <code>NULL</code> column value must be represented as a <code>null</code>
in the Java programming language.
<P>
The standard reference implementation for the <code>CachedRowSet</code>
interface uses a <code>TreeMap</code> object for the rowset, with the
values in each row being contained in  <code>Vector</code> objects. It is
expected that most implementations will do the same.
<P>
The <code>TreeMap</code> type of collection guarantees that the map will be in
ascending key order, sorted according to the natural order for the
key's class.
Each key references a <code>Vector</code> object that corresponds to one
row of a <code>RowSet</code> object. Therefore, the size of each
<code>Vector</code> object  must be exactly equal to the number of
columns in the <code>RowSet</code> object.
The key used by the <code>TreeMap</code> collection is determined by the
implementation, which may choose to leverage a set key that is
available within the internal <code>RowSet</code> tabular structure by
virtue of a key already set either on the <code>RowSet</code> object
itself or on the underlying SQL data.
<P>

@return a <code>Collection</code> object that contains the values in
each row in this <code>CachedRowSet</code> object
@throws SQLException if an error occurs generating the collection
@see #toCollection(int)
@see #toCollection(String)
"
      end

      operation 10362242 "toCollection"
	public return_type class_ref 184194 // Collection
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the designated column in this <code>CachedRowSet</code> object
to a <code>Collection</code> object. Implementations have some latitude in
how they can represent this <code>Collection</code> object because of the
abstract nature of the <code>Collection</code> framework.
Each column value should be fully represented in either a
general purpose <code>Collection</code> implementation or a specialized
<code>Collection</code> implementation, such as a <code>Vector</code> object.
An SQL <code>NULL</code> column value must be represented as a <code>null</code>
in the Java programming language.
<P>
The standard reference implementation uses a <code>Vector</code> object
to contain the column values, and it is expected
that most implementations will do the same. If a <code>Vector</code> object
is used, it size must be exactly equal to the number of rows
in this <code>CachedRowSet</code> object.

@param column an <code>int</code> indicating the column whose values
       are to be represented in a <code>Collection</code> object
@return a <code>Collection</code> object that contains the values
stored in the specified column of this <code>CachedRowSet</code>
object
@throws SQLException if an error occurs generating the collection or
an invalid column id is provided
@see #toCollection
@see #toCollection(String)
"
      end

      operation 10362370 "toCollection"
	public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "column" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the designated column in this <code>CachedRowSet</code> object
to a <code>Collection</code> object. Implementations have some latitude in
how they can represent this <code>Collection</code> object because of the
abstract nature of the <code>Collection</code> framework.
Each column value should be fully represented in either a
general purpose <code>Collection</code> implementation or a specialized
<code>Collection</code> implementation, such as a <code>Vector</code> object.
An SQL <code>NULL</code> column value must be represented as a <code>null</code>
in the Java programming language.
<P>
The standard reference implementation uses a <code>Vector</code> object
to contain the column values, and it is expected
that most implementations will do the same. If a <code>Vector</code> object
is used, it size must be exactly equal to the number of rows
in this <code>CachedRowSet</code> object.

@param column a <code>String</code> object giving the name of the
       column whose values are to be represented in a collection
@return a <code>Collection</code> object that contains the values
stored in the specified column of this <code>CachedRowSet</code>
object
@throws SQLException if an error occurs generating the collection or
an invalid column id is provided
@see #toCollection
@see #toCollection(int)
"
      end

      operation 10362498 "getSyncProvider"
	public return_type class_ref 1259010 // SyncProvider
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>SyncProvider</code> implementation for this
<code>CachedRowSet</code> object. Internally, this method is used by a rowset
to trigger read or write actions between the rowset
and the data source. For example, a rowset may need to get a handle
on the the rowset reader (<code>RowSetReader</code> object) from the
<code>SyncProvider</code> to allow the rowset to be populated.
<pre>
    RowSetReader rowsetReader = null;
    SyncProvider provider =
        SyncFactory.getInstance(\"javax.sql.rowset.provider.RIOptimisticProvider\");
        if (provider instanceof RIOptimisticProvider) {
            rowsetReader = provider.getRowSetReader();
        }
</pre>
Assuming <i>rowsetReader</i> is a private, accessible field within
the rowset implementation, when an application calls the <code>execute</code>
method, it in turn calls on the reader's <code>readData</code> method
to populate the <code>RowSet</code> object.
<pre>
    rowsetReader.readData((RowSetInternal)this);
</pre>
<P>
In addition, an application can use the <code>SyncProvider</code> object
returned by this method to call methods that return information about the
<code>SyncProvider</code> object, including information about the
vendor, version, provider identification, synchronization grade, and locks
it currently has set.

@return the <code>SyncProvider</code> object that was set when the rowset
     was instantiated, or if none was was set, the default provider
@throws SQLException if an error occurs while returning the
<code>SyncProvider</code> object
@see #setSyncProvider
"
      end

      operation 10362626 "setSyncProvider"
	public explicit_return_type "void"
	nparams 1
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>SyncProvider</code> object for this <code>CachedRowSet</code>
object to the one specified.  This method
allows the <code>SyncProvider</code> object to be reset.
<P>
A <code>CachedRowSet</code> implementation should always be instantiated
with an available <code>SyncProvider</code> mechanism, but there are
cases where resetting the <code>SyncProvider</code> object is desirable
or necessary. For example, an application might want to use the default
<code>SyncProvider</code> object for a time and then choose to use a provider
that has more recently become available and better fits its needs.
<P>
Resetting the <code>SyncProvider</code> object causes the
<code>RowSet</code> object to request a new <code>SyncProvider</code> implementation
from the <code>SyncFactory</code>. This has the effect of resetting
all previous connections and relationships with the originating
data source and can potentially drastically change the synchronization
behavior of a disconnected rowset.

@param provider a <code>String</code> object giving the fully qualified class
       name of a <code>SyncProvider</code> implementation
@throws SQLException if an error occurs while attempting to reset the
<code>SyncProvider</code> implementation
@see #getSyncProvider
"
      end

      operation 10362754 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of rows in this <code>CachedRowSet</code>
object.

@return number of rows in the rowset
"
      end

      operation 10362882 "setMetaData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "md" type class_ref 1257730 // RowSetMetaData
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the metadata for this <code>CachedRowSet</code> object with
the given <code>RowSetMetaData</code> object. When a
<code>RowSetReader</code> object is reading the contents of a rowset,
it creates a <code>RowSetMetaData</code> object and initializes
it using the methods in the <code>RowSetMetaData</code> implementation.
The reference implementation uses the <code>RowSetMetaDataImpl</code>
class. When the reader has completed reading the rowset contents,
this method is called internally to pass the <code>RowSetMetaData</code>
object to the rowset.

@param md a <code>RowSetMetaData</code> object containing
metadata about the columns in this <code>CachedRowSet</code> object
@throws SQLException if invalid metadata is supplied to the
rowset
"
      end

      operation 10363010 "getOriginal"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>ResultSet</code> object containing the original value of this
<code>CachedRowSet</code> object.
<P>
The cursor for the <code>ResultSet</code>
object should be positioned before the first row.
In addition, the returned <code>ResultSet</code> object should have the following
properties:
<UL>
<LI>ResultSet.TYPE_SCROLL_INSENSITIVE
<LI>ResultSet.CONCUR_UPDATABLE
</UL>
<P>
The original value for a <code>RowSet</code> object is the value it had before
the last synchronization with the underlying data source.  If there have been
no synchronizations, the original value will be the value with which the
<code>RowSet</code> object was populated.  This method is called internally
when an application calls the method <code>acceptChanges</code> and the
<code>SyncProvider</code> object has been implemented to check for conflicts.
If this is the case, the writer compares the original value with the value
currently in the data source to check for conflicts.

@return a <code>ResultSet</code> object that contains the original value for
        this <code>CachedRowSet</code> object
@throws SQLException if an error occurs producing the
<code>ResultSet</code> object
"
      end

      operation 10363138 "getOriginalRow"
	public return_type class_ref 1037314 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>ResultSet</code> object containing the original value for the
current row only of this <code>CachedRowSet</code> object.
<P>
The cursor for the <code>ResultSet</code>
object should be positioned before the first row.
In addition, the returned <code>ResultSet</code> object should have the following
properties:
<UL>
<LI>ResultSet.TYPE_SCROLL_INSENSITIVE
<LI>ResultSet.CONCUR_UPDATABLE
</UL>

@return the original result set of the row
@throws SQLException if there is no current row
@see #setOriginalRow
"
      end

      operation 10363266 "setOriginalRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current row in this <code>CachedRowSet</code> object as the original
row.
<P>
This method is called internally after the any modified values in the current
row have been synchronized with the data source. The current row must be tagged
as no longer inserted, deleted or updated.
<P>
A call to <code>setOriginalRow</code> is irreversible.

@throws SQLException if there is no current row or an error is
encountered resetting the contents of the original row
@see #getOriginalRow
"
      end

      operation 10363394 "getTableName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an identifier for the object (table) that was used to
create this <code>CachedRowSet</code> object. This name may be set on multiple occasions,
and the specification imposes no limits on how many times this
may occur or whether standard implementations should keep track
of previous table names.

@return a <code>String</code> object giving the name of the table that is the
        source of data for this <code>CachedRowSet</code> object or <code>null</code>
        if no name has been set for the table
@throws SQLException if an error is encountered returning the table name
@see javax.sql.RowSetMetaData#getTableName
"
      end

      operation 10363522 "setTableName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "tabName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the identifier for the table from which this <code>CachedRowSet</code>
object was derived to the given table name. The writer uses this name to
determine which table to use when comparing the values in the data source with the
<code>CachedRowSet</code> object's values during a synchronization attempt.
The table identifier also indicates where modified values from this
<code>CachedRowSet</code> object should be written.
<P>
The implementation of this <code>CachedRowSet</code> object may obtain the
the name internally from the <code>RowSetMetaDataImpl</code> object.

@param tabName a <code>String</code> object identifying the table from which this
<code>CachedRowSet</code> object was derived; cannot be <code>null</code>
        but may be an empty string
@throws SQLException if an error is encountered naming the table or
    <i>tabName</i> is <code>null</code>
@see javax.sql.RowSetMetaData#setTableName
@see javax.sql.RowSetWriter
@see javax.sql.rowset.spi.SyncProvider
"
      end

      operation 10363650 "getKeyColumns"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing one or more column numbers indicating the columns
that form a key that uniquely
identifies a row in this <code>CachedRowSet</code> object.

@return an array containing the column number or numbers that indicate which columns
      constitute a primary key
      for a row in this <code>CachedRowSet</code> object. This array should be
      empty if no columns are representative of a primary key.
@throws SQLException if this <code>CachedRowSet</code> object is empty
@see #setKeyColumns
@see Joinable#getMatchColumnIndexes
@see Joinable#getMatchColumnNames
"
      end

      operation 10363778 "setKeyColumns"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keys" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>CachedRowSet</code> object's <code>keyCols</code>
field with the given array of column numbers, which forms a key
for uniquely identifying a row in this <code>CachedRowSet</code> object.
<p>
If a <code>CachedRowSet</code> object becomes part of a <code>JoinRowSet</code>
object, the keys defined by this method and the resulting constraints are
maintained if the columns designated as key columns also become match
columns.

@param keys an array of <code>int</code> indicating the columns that form
       a primary key for this <code>CachedRowSet</code> object; every
       element in the array must be greater than <code>0</code> and
       less than or equal to the number of columns in this rowset
@throws SQLException if any of the numbers in the given array
           are not valid for this rowset
@see #getKeyColumns
@see Joinable#setMatchColumn(String)
@see Joinable#setMatchColumn(int)

"
      end

      operation 10363906 "createShared"
	public return_type class_ref 1257218 // RowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>RowSet</code> object backed by the same data as
that of this <code>CachedRowSet</code> object. In effect, both
<code>CachedRowSet</code> objects have a cursor over the same data.
As a result, any changes made by a duplicate are visible to the original
and to any other duplicates, just as a change made by the original is visible
to all of its duplicates. If a duplicate calls a method that changes the
underlying data, the method it calls notifies all registered listeners
just as it would when it is called by the original <code>CachedRowSet</code>
object.
<P>
In addition, any <code>RowSet</code> object
created by this method will have the same properties as this
<code>CachedRowSet</code> object. For example, if this <code>CachedRowSet</code>
object is read-only, all of its duplicates will also be read-only. If it is
changed to be updatable, the duplicates also become updatable.
<P>
NOTE: If multiple threads access <code>RowSet</code> objects created from
the <code>createShared()</code> method, the following behavior is specified
to preserve shared data integrity: reads and writes of all
shared <code>RowSet</code> objects should be made serially between each
object and the single underlying tabular structure.

@return a new shared <code>RowSet</code> object that has the same properties
        as this <code>CachedRowSet</code> object and that has a cursor over
        the same data
@throws SQLException if an error occurs or cloning is not
supported in the underlying platform
@see javax.sql.RowSetEvent
@see javax.sql.RowSetListener
"
      end

      operation 10364034 "createCopy"
	public return_type class_ref 1258626 // CachedRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>RowSet</code> object that is a deep copy of the data in
this <code>CachedRowSet</code> object. In contrast to
the <code>RowSet</code> object generated from a <code>createShared</code>
call, updates made to the copy of the original <code>RowSet</code> object
must not be visible to the original <code>RowSet</code> object. Also, any
event listeners that are registered with the original
<code>RowSet</code> must not have scope over the new
<code>RowSet</code> copies. In addition, any constraint restrictions
established must be maintained.

@return a new <code>RowSet</code> object that is a deep copy
of this <code>CachedRowSet</code> object and is
completely independent of this <code>CachedRowSet</code> object
@throws SQLException if an error occurs in generating the copy of
the of this <code>CachedRowSet</code> object
@see #createShared
@see #createCopySchema
@see #createCopyNoConstraints
@see javax.sql.RowSetEvent
@see javax.sql.RowSetListener
"
      end

      operation 10364162 "createCopySchema"
	public return_type class_ref 1258626 // CachedRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CachedRowSet</code> object that is an empty copy of this
<code>CachedRowSet</code> object.  The copy
must not contain any contents but only represent the table
structure of the original <code>CachedRowSet</code> object. In addition, primary
or foreign key constraints set in the originating <code>CachedRowSet</code> object must
be equally enforced in the new empty <code>CachedRowSet</code> object.
In contrast to
the <code>RowSet</code> object generated from a <code>createShared</code> method
call, updates made to a copy of this <code>CachedRowSet</code> object with the
<code>createCopySchema</code> method must not be visible to it.
<P>
Applications can form a <code>WebRowSet</code> object from the <code>CachedRowSet</code>
object returned by this method in order
to export the <code>RowSet</code> schema definition to XML for future use.
@return An empty copy of this {@code CachedRowSet} object
@throws SQLException if an error occurs in cloning the structure of this
        <code>CachedRowSet</code> object
@see #createShared
@see #createCopySchema
@see #createCopyNoConstraints
@see javax.sql.RowSetEvent
@see javax.sql.RowSetListener
"
      end

      operation 10364290 "createCopyNoConstraints"
	public return_type class_ref 1258626 // CachedRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CachedRowSet</code> object that is a deep copy of
this <code>CachedRowSet</code> object's data but is independent of it.
In contrast to
the <code>RowSet</code> object generated from a <code>createShared</code>
method call, updates made to a copy of this <code>CachedRowSet</code> object
must not be visible to it. Also, any
event listeners that are registered with this
<code>CachedRowSet</code> object must not have scope over the new
<code>RowSet</code> object. In addition, any constraint restrictions
established for this <code>CachedRowSet</code> object must <b>not</b> be maintained
in the copy.

@return a new <code>CachedRowSet</code> object that is a deep copy
    of this <code>CachedRowSet</code> object and is
    completely independent of this  <code>CachedRowSet</code> object
@throws SQLException if an error occurs in generating the copy of
    the of this <code>CachedRowSet</code> object
@see #createCopy
@see #createShared
@see #createCopySchema
@see javax.sql.RowSetEvent
@see javax.sql.RowSetListener
"
      end

      operation 10364418 "getRowSetWarnings"
	public return_type class_ref 1259138 // RowSetWarning
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first warning reported by calls on this <code>RowSet</code> object.
Subsequent warnings on this <code>RowSet</code> object will be chained to the
<code>RowSetWarning</code> object that this method returns.

The warning chain is automatically cleared each time a new row is read.
This method may not be called on a RowSet object that has been closed;
doing so will cause a <code>SQLException</code> to be thrown.

@return RowSetWarning the first <code>RowSetWarning</code>
object reported or null if there are none
@throws SQLException if this method is called on a closed RowSet
@see RowSetWarning
"
      end

      operation 10364546 "getShowDeleted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>boolean</code> indicating whether rows marked
for deletion appear in the set of current rows. If <code>true</code> is
returned, deleted rows are visible with the current rows. If
<code>false</code> is returned, rows are not visible with the set of
current rows. The default value is <code>false</code>.
<P>
Standard rowset implementations may choose to restrict this behavior
due to security considerations or to better fit certain deployment
scenarios. This is left as implementation defined and does not
represent standard behavior.
<P>
Note: Allowing deleted rows to remain visible complicates the behavior
of some standard JDBC <code>RowSet</code> Implementations methods.
However, most rowset users can simply ignore this extra detail because
only very specialized applications will likely want to take advantage of
this feature.

@return <code>true</code> if deleted rows are visible;
        <code>false</code> otherwise
@throws SQLException if a rowset implementation is unable to
to determine whether rows marked for deletion are visible
@see #setShowDeleted
"
      end

      operation 10364674 "setShowDeleted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the property <code>showDeleted</code> to the given
<code>boolean</code> value, which determines whether
rows marked for deletion appear in the set of current rows.
If the value is set to <code>true</code>, deleted rows are immediately
visible with the set of current rows. If the value is set to
<code>false</code>, the deleted rows are set as invisible with the
current set of rows.
<P>
Standard rowset implementations may choose to restrict this behavior
due to security considerations or to better fit certain deployment
scenarios. This is left as implementations defined and does not
represent standard behavior.

@param b <code>true</code> if deleted rows should be shown;
             <code>false</code> otherwise
@exception SQLException if a rowset implementation is unable to
to reset whether deleted rows should be visible
@see #getShowDeleted
"
      end

      operation 10364802 "commit"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>CachedRowSet</code> object's <code>SyncProvider</code> contains
a <code>Connection</code> object from the <code>ResultSet</code> or JDBC
properties passed to it's constructors. This method wraps the
<code>Connection</code> commit method to allow flexible
auto commit or non auto commit transactional control support.
<p>
Makes all changes that are performed by the <code>acceptChanges()</code>
method since the previous commit/rollback permanent. This method should
be used only when auto-commit mode has been disabled.

@throws SQLException if a database access error occurs or this
Connection object within this <code>CachedRowSet</code> is in auto-commit mode
@see java.sql.Connection#setAutoCommit
"
      end

      operation 10364930 "rollback"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>CachedRowSet</code> object's <code>SyncProvider</code> contains
a <code>Connection</code> object from the original <code>ResultSet</code>
or JDBC properties passed to it.
<p>
Undoes all changes made in the current transaction.  This method
should be used only when auto-commit mode has been disabled.

@throws SQLException if a database access error occurs or this Connection
object within this <code>CachedRowSet</code> is in auto-commit mode.
"
      end

      operation 10365058 "rollback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 1040130 // Savepoint
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>CachedRowSet</code> object's <code>SyncProvider</code> contains
a <code>Connection</code> object from the original <code>ResultSet</code>
or JDBC properties passed to it.
<p>
Undoes all changes made in the current transaction back to the last
<code>Savepoint</code> transaction marker. This method should be used only
when auto-commit mode has been disabled.

@param s A <code>Savepoint</code> transaction marker
@throws SQLException if a database access error occurs or this Connection
object within this <code>CachedRowSet</code> is in auto-commit mode.
"
      end

      attribute 2369922 "COMMIT_ON_ACCEPT_CHANGES"
	class_attribute const_attribute public explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Deprecated
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Causes the <code>CachedRowSet</code> object's <code>SyncProvider</code>
to commit the changes when <code>acceptChanges()</code> is called. If
set to false, the changes will <b>not</b> be committed until one of the
<code>CachedRowSet</code> interface transaction methods is called.

@deprecated Because this field is final (it is part of an interface),
 its value cannot be changed.
@see #commit
@see #rollback

"
      end

      operation 10365186 "rowSetPopulated"
	public explicit_return_type "void"
	nparams 2
	  param inout name "event" type class_ref 1257474 // RowSetEvent
	  param in name "numRows" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies registered listeners that a RowSet object in the given RowSetEvent
object has populated a number of additional rows. The <code>numRows</code> parameter
ensures that this event will only be fired every <code>numRow</code>.
<p>
The source of the event can be retrieved with the method event.getSource.

@param event a <code>RowSetEvent</code> object that contains the
    <code>RowSet</code> object that is the source of the events
@param numRows when populating, the number of rows interval on which the
    <code>CachedRowSet</code> populated should fire; the default value
    is zero; cannot be less than <code>fetchSize</code> or zero
@throws SQLException {@code numRows < 0 or numRows < getFetchSize() }
"
      end

      operation 10365314 "populate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "rs" type class_ref 1037314 // ResultSet
	  param in name "startRow" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates this <code>CachedRowSet</code> object with data from
the given <code>ResultSet</code> object. While related to the <code>populate(ResultSet)</code>
method, an additional parameter is provided to allow starting position within
the <code>ResultSet</code> from where to populate the CachedRowSet
instance.
<P>
This method can be used as an alternative to the <code>execute</code> method when an
application has a connection to an open <code>ResultSet</code> object.
Using the method <code>populate</code> can be more efficient than using
the version of the <code>execute</code> method that takes no parameters
because it does not open a new connection and re-execute this
<code>CachedRowSet</code> object's command. Using the <code>populate</code>
 method is more a matter of convenience when compared to using the version
of <code>execute</code> that takes a <code>ResultSet</code> object.

@param startRow the position in the <code>ResultSet</code> from where to start
               populating the records in this <code>CachedRowSet</code>
@param rs the <code>ResultSet</code> object containing the data
to be read into this <code>CachedRowSet</code> object
@throws SQLException if a null <code>ResultSet</code> object is supplied
or this <code>CachedRowSet</code> object cannot
retrieve the associated <code>ResultSetMetaData</code> object
@see #execute
@see #populate(ResultSet)
@see java.sql.ResultSet
@see java.sql.ResultSetMetaData
"
      end

      operation 10365442 "setPageSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>CachedRowSet</code> object's page-size. A <code>CachedRowSet</code>
may be configured to populate itself in page-size sized batches of rows. When
either <code>populate()</code> or <code>execute()</code> are called, the
<code>CachedRowSet</code> fetches an additional page according to the
original SQL query used to populate the RowSet.

@param size the page-size of the <code>CachedRowSet</code>
@throws SQLException if an error occurs setting the <code>CachedRowSet</code>
     page size or if the page size is less than 0.
"
      end

      operation 10365570 "getPageSize"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the page-size for the <code>CachedRowSet</code> object

@return an <code>int</code> page size
"
      end

      operation 10365698 "nextPage"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the current page of the <code>CachedRowSet</code>. This causes
the <code>CachedRowSet</code> implementation to fetch the next page-size
rows and populate the RowSet, if remaining rows remain within scope of the
original SQL query used to populated the RowSet.

@return true if more pages exist; false if this is the last page
@throws SQLException if an error occurs fetching the next page, or if this
    method is called prematurely before populate or execute.
"
      end

      operation 10365826 "previousPage"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the current page of the <code>CachedRowSet</code>. This causes
the <code>CachedRowSet</code> implementation to fetch the previous page-size
rows and populate the RowSet. The amount of rows returned in the previous
page must always remain within scope of the original SQL query used to
populate the RowSet.

@return true if the previous page is successfully retrieved; false if this
    is the first page.
@throws SQLException if an error occurs fetching the previous page, or if
    this method is called prematurely before populate or execute.
"
      end
    end

    class 1258754 "Joinable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<h3>1.0 Background</h3>
The <code>Joinable</code> interface provides the methods for getting and
setting a match column, which is the basis for forming the SQL <code>JOIN</code>
formed by adding <code>RowSet</code> objects to a <code>JoinRowSet</code>
object.
<P>
Any standard <code>RowSet</code> implementation <b>may</b> implement
the <code>Joinable</code> interface in order to be
added to a <code>JoinRowSet</code> object. Implementing this interface gives
a <code>RowSet</code> object the ability to use <code>Joinable</code> methods,
which set, retrieve, and get information about match columns.  An
application may add a
<code>RowSet</code> object that has not implemented the <code>Joinable</code>
interface to a <code>JoinRowSet</code> object, but to do so it must use one
of the <code>JoinRowSet.addRowSet</code> methods that takes both a
<code>RowSet</code> object and a match column or an array of <code>RowSet</code>
objects and an array of match columns.
<P>
To get access to the methods in the <code>Joinable</code> interface, a
<code>RowSet</code> object implements at least one of the
five standard <code>RowSet</code> interfaces and also implements the
<code>Joinable</code> interface.  In addition, most <code>RowSet</code>
objects extend the <code>BaseRowSet</code> class.  For example:
<pre>
    class MyRowSetImpl extends BaseRowSet implements CachedRowSet, Joinable {
        :
        :
    }
</pre>

<h3>2.0 Usage Guidelines</h3>
<P>
The methods in the <code>Joinable</code> interface allow a <code>RowSet</code> object
to set a match column, retrieve a match column, or unset a match column, which is
the column upon which an SQL <code>JOIN</code> can be based.
An instance of a class that implements these methods can be added to a
<code>JoinRowSet</code> object to allow an SQL <code>JOIN</code> relationship to
 be established.

<pre>
    CachedRowSet crs = new MyRowSetImpl();
    crs.populate((ResultSet)rs);
    (Joinable)crs.setMatchColumnIndex(1);

    JoinRowSet jrs = new JoinRowSetImpl();
    jrs.addRowSet(crs);
</pre>
In the previous example, <i>crs</i> is a <code>CachedRowSet</code> object that
has implemented the <code>Joinable</code> interface.  In the following example,
<i>crs2</i> has not, so it must supply the match column as an argument to the
<code>addRowSet</code> method. This example assumes that column 1 is the match
column.
<PRE>
    CachedRowSet crs2 = new MyRowSetImpl();
    crs2.populate((ResultSet)rs);

    JoinRowSet jrs2 = new JoinRowSetImpl();
    jrs2.addRowSet(crs2, 1);
</PRE>
<p>
The <code>JoinRowSet</code> interface makes it possible to get data from one or
more <code>RowSet</code> objects consolidated into one table without having to incur
the expense of creating a connection to a database. It is therefore ideally suited
for use by disconnected <code>RowSet</code> objects. Nevertheless, any
<code>RowSet</code> object <b>may</b> implement this interface
regardless of whether it is connected or disconnected. Note that a
<code>JdbcRowSet</code> object, being always connected to its data source, can
become part of an SQL <code>JOIN</code> directly without having to become part
of a <code>JoinRowSet</code> object.

<h3>3.0 Managing Multiple Match Columns</h3>
The index array passed into the <code>setMatchColumn</code> methods indicates
how many match columns are being set (the length of the array) in addition to
which columns will be used for the match. For example:
<pre>
    int[] i = {1, 2, 4, 7}; // indicates four match columns, with column
                            // indexes 1, 2, 4, 7 participating in the JOIN.
    Joinable.setMatchColumn(i);
</pre>
Subsequent match columns may be added as follows to a different <code>Joinable</code>
object (a <code>RowSet</code> object that has implemented the <code>Joinable</code>
interface).
<pre>
    int[] w = {3, 2, 5, 3};
    Joinable2.setMatchColumn(w);
</pre>
When an application adds two or more <code>RowSet</code> objects to a
<code>JoinRowSet</code> object, the order of the indexes in the array is
particularly important. Each index of
the array maps directly to the corresponding index of the previously added
<code>RowSet</code> object. If overlap or underlap occurs, the match column
data is maintained in the event an additional <code>Joinable</code> RowSet is
added and needs to relate to the match column data. Therefore, applications
can set multiple match columns in any order, but
this order has a direct effect on the outcome of the <code>SQL</code> JOIN.
<p>
This assertion applies in exactly the same manner when column names are used
rather than column indexes to indicate match columns.

@see JoinRowSet
@author  Jonathan Bruce
"
      operation 10359426 "setMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnIdx" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column as the match column for this <code>RowSet</code>
object. A <code>JoinRowSet</code> object can now add this <code>RowSet</code>
object based on the match column.
<p>
Sub-interfaces such as the <code>CachedRowSet</code>&trade;
interface define the method <code>CachedRowSet.setKeyColumns</code>, which allows
primary key semantics to be enforced on specific columns.
Implementations of the <code>setMatchColumn(int columnIdx)</code> method
should ensure that the constraints on the key columns are maintained when
a <code>CachedRowSet</code> object sets a primary key column as a match column.

@param columnIdx an <code>int</code> identifying the index of the column to be
       set as the match column
@throws SQLException if an invalid column index is set
@see #setMatchColumn(int[])
@see #unsetMatchColumn(int)

"
      end

      operation 10359554 "setMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnIdxes" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated columns as the match column for this <code>RowSet</code>
object. A <code>JoinRowSet</code> object can now add this <code>RowSet</code>
object based on the match column.

@param columnIdxes an array of <code>int</code> identifying the indexes of the
     columns to be set as the match columns
@throws SQLException if an invalid column index is set
@see #setMatchColumn(int[])
@see #unsetMatchColumn(int[])
"
      end

      operation 10359682 "setMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column as the match column for this <code>RowSet</code>
object. A <code>JoinRowSet</code> object can now add this <code>RowSet</code>
object based on the match column.
<p>
Subinterfaces such as the <code>CachedRowSet</code> interface define
the method <code>CachedRowSet.setKeyColumns</code>, which allows
primary key semantics to be enforced on specific columns.
Implementations of the <code>setMatchColumn(String columnIdx)</code> method
should ensure that the constraints on the key columns are maintained when
a <code>CachedRowSet</code> object sets a primary key column as a match column.

@param columnName a <code>String</code> object giving the name of the column
     to be set as the match column
@throws SQLException if an invalid column name is set, the column name
     is a null, or the column name is an empty string
@see #unsetMatchColumn
@see #setMatchColumn(int[])
"
      end

      operation 10359810 "setMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnNames" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated columns as the match column for this <code>RowSet</code>
object. A <code>JoinRowSet</code> object can now add this <code>RowSet</code>
object based on the match column.

@param columnNames an array of <code>String</code> objects giving the names
    of the column to be set as the match columns
@throws SQLException if an invalid column name is set, the column name
     is a null, or the column name is an empty string
@see #unsetMatchColumn
@see #setMatchColumn(int[])
"
      end

      operation 10359938 "getMatchColumnIndexes"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the indexes of the match columns that were set for this
<code>RowSet</code> object with the method
<code>setMatchColumn(int[] columnIdxes)</code>.

@return an <code>int</code> array identifying the indexes of the columns
        that were set as the match columns for this <code>RowSet</code> object
@throws SQLException if no match column has been set
@see #setMatchColumn
@see #unsetMatchColumn
"
      end

      operation 10360066 "getMatchColumnNames"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the names of the match columns that were set for this
<code>RowSet</code> object with the method
<code>setMatchColumn(String [] columnNames)</code>.

@return an array of <code>String</code> objects giving the names of the columns
        set as the match columns for this <code>RowSet</code> object
@throws SQLException if no match column has been set
@see #setMatchColumn
@see #unsetMatchColumn

"
      end

      operation 10360194 "unsetMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnIdx" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unsets the designated column as the match column for this <code>RowSet</code>
object.
<P>
<code>RowSet</code> objects that implement the <code>Joinable</code> interface
must ensure that a key-like constraint continues to be enforced until the
method <code>CachedRowSet.unsetKeyColumns</code> has been called on the
designated column.

@param columnIdx an <code>int</code> that identifies the index of the column
         that is to be unset as a match column
@throws SQLException if an invalid column index is designated or if
         the designated column was not previously set as a match
         column
@see #setMatchColumn
"
      end

      operation 10360322 "unsetMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnIdxes" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unsets the designated columns as the match column for this <code>RowSet</code>
object.

@param columnIdxes an array of <code>int</code> that identifies the indexes
    of the columns that are to be unset as match columns
@throws SQLException if an invalid column index is designated or if
         the designated column was not previously set as a match
         column
@see #setMatchColumn
"
      end

      operation 10360450 "unsetMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unsets the designated column as the match column for this <code>RowSet</code>
object.
<P>
<code>RowSet</code> objects that implement the <code>Joinable</code> interface
must ensure that a key-like constraint continues to be enforced until the
method <code>CachedRowSet.unsetKeyColumns</code> has been called on the
designated column.

@param columnName a <code>String</code> object giving the name of the column
         that is to be unset as a match column
@throws SQLException if an invalid column name is designated or
         the designated column was not previously set as a match
         column
@see #setMatchColumn
"
      end

      operation 10360578 "unsetMatchColumn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnName" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unsets the designated columns as the match columns for this <code>RowSet</code>
object.

@param columnName an array of <code>String</code> objects giving the names of
    the columns that are to be unset as the match columns
@throws SQLException if an invalid column name is designated or the
    designated column was not previously set as a match column
@see #setMatchColumn
"
      end
    end

    class 1259138 "RowSetWarning"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An extension of <code>SQLException</code> that provides information
about database warnings set on <code>RowSet</code> objects.
Warnings are silently chained to the object whose method call
caused it to be reported.
This class complements the <code>SQLWarning</code> class.
<P>
Rowset warnings may be retrieved from <code>JdbcRowSet</code>,
<code>CachedRowSet</code>&trade;,
<code>WebRowSet</code>, <code>FilteredRowSet</code>, or <code>JoinRowSet</code>
implementations. To retrieve the first warning reported on any
<code>RowSet</code>
implementation,  use the method <code>getRowSetWarnings</code> defined
in the <code>JdbcRowSet</code> interface or the <code>CachedRowSet</code>
interface. To retrieve a warning chained to the first warning, use the
<code>RowSetWarning</code> method
<code>getNextWarning</code>. To retrieve subsequent warnings, call
<code>getNextWarning</code> on each <code>RowSetWarning</code> object that is
returned.
<P>
The inherited methods <code>getMessage</code>, <code>getSQLState</code>,
and <code>getErrorCode</code> retrieve information contained in a
<code>RowSetWarning</code> object.

@since 1.5
"
      classrelation 4050178 // <generalisation>
	relation 4050178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4050178 // <generalisation>
	  b parent class_ref 1037186 // SQLException
      end

      operation 10377474 "RowSetWarning"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RowSetWarning</code> object
with the given value for the reason; SQLState defaults to null,
and vendorCode defaults to 0.

@param reason a <code>String</code> object giving a description
       of the warning; if the <code>String</code> is <code>null</code>,
       this constructor behaves like the default (zero parameter)
       <code>RowSetWarning</code> constructor
"
      end

      operation 10377602 "RowSetWarning"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a default <code>RowSetWarning</code> object. The reason
defaults to <code>null</code>, SQLState defaults to null and vendorCode
defaults to 0.
"
      end

      operation 10377730 "RowSetWarning"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RowSetWarning</code> object initialized with the
given values for the reason and SQLState. The vendor code defaults to 0.

If the <code>reason</code> or <code>SQLState</code> parameters are <code>null</code>,
this constructor behaves like the default (zero parameter)
<code>RowSetWarning</code> constructor.

@param reason a <code>String</code> giving a description of the
       warning;
@param SQLState an XOPEN code identifying the warning; if a non standard
       XOPEN <i>SQLState</i> is supplied, no exception is thrown.
"
      end

      operation 10377858 "RowSetWarning"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "SQLState" type class_ref 128130 // String
	  param in name "vendorCode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a fully specified <code>RowSetWarning</code> object initialized
with the given values for the reason, SQLState and vendorCode.

If the <code>reason</code>, or the  <code>SQLState</code>
parameters are <code>null</code>, this constructor behaves like the default
(zero parameter) <code>RowSetWarning</code> constructor.

@param reason a <code>String</code> giving a description of the
       warning;
@param SQLState an XOPEN code identifying the warning; if a non standard
       XOPEN <i>SQLState</i> is supplied, no exception is thrown.
@param vendorCode a database vendor-specific warning code
"
      end

      operation 10377986 "getNextWarning"
	public return_type class_ref 1259138 // RowSetWarning
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the warning chained to this <code>RowSetWarning</code>
object.

@return the <code>RowSetWarning</code> object chained to this one; if no
        <code>RowSetWarning</code> object is chained to this one,
        <code>null</code> is returned (default value)
@see #setNextWarning
"
      end

      operation 10378114 "setNextWarning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "warning" type class_ref 1259138 // RowSetWarning
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets <i>warning</i> as the next warning, that is, the warning chained
to this <code>RowSetWarning</code> object.

@param warning the <code>RowSetWarning</code> object to be set as the
    next warning; if the <code>RowSetWarning</code> is null, this
    represents the finish point in the warning chain
@see #getNextWarning
"
      end

      attribute 2372738 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 6678332766434564774L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1259266 "FilteredRowSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The standard interface that all standard implementations of
<code>FilteredRowSet</code> must implement. The <code>FilteredRowSetImpl</code> class
provides the reference implementation which may be extended if required.
Alternatively, a vendor is free to implement its own version
by implementing this interface.

<h3>1.0 Background</h3>

There are occasions when a <code>RowSet</code> object has a need to provide a degree
of filtering to its contents. One possible solution is to provide
a query language for all standard <code>RowSet</code> implementations; however,
this is an impractical approach for lightweight components such as disconnected
<code>RowSet</code>
objects. The <code>FilteredRowSet</code> interface seeks to address this need
without supplying a heavyweight query language along with the processing that
such a query language would require.
<p>
A JDBC <code>FilteredRowSet</code> standard implementation implements the
<code>RowSet</code> interfaces and extends the
<code>CachedRowSet</code>&trade; class. The
<code>CachedRowSet</code> class provides a set of protected cursor manipulation
methods, which a <code>FilteredRowSet</code> implementation can override
to supply filtering support.

<h3>2.0 Predicate Sharing</h3>

If a <code>FilteredRowSet</code> implementation is shared using the
inherited <code>createShared</code> method in parent interfaces, the
<code>Predicate</code> should be shared without modification by all
<code>FilteredRowSet</code> instance clones.

<h3>3.0 Usage</h3>
<p>
By implementing a <code>Predicate</code> (see example in <a href=\"Predicate.html\">Predicate</a>
class JavaDoc), a <code>FilteredRowSet</code> could then be used as described
below.

<pre>
{@code
    FilteredRowSet frs = new FilteredRowSetImpl();
    frs.populate(rs);

    Range name = new Range(\"Alpha\", \"Bravo\", \"columnName\");
    frs.setFilter(name);

    frs.next() // only names from \"Alpha\" to \"Bravo\" will be returned
}
</pre>
In the example above, we initialize a <code>Range</code> object which
implements the <code>Predicate</code> interface. This object expresses
the following constraints: All rows outputted or modified from this
<code>FilteredRowSet</code> object must fall between the values 'Alpha' and
'Bravo' both values inclusive, in the column 'columnName'. If a filter is
applied to a <code>FilteredRowSet</code> object that contains no data that
falls within the range of the filter, no rows are returned.
<p>
This framework allows multiple classes implementing predicates to be
used in combination to achieved the required filtering result with
out the need for query language processing.

<h3>4.0 Updating a <code>FilteredRowSet</code> Object</h3>
The predicate set on a <code>FilteredRowSet</code> object
applies a criterion on all rows in a
<code>RowSet</code> object to manage a subset of rows in a <code>RowSet</code>
object. This criterion governs the subset of rows that are visible and also
defines which rows can be modified, deleted or inserted.
<p>
Therefore, the predicate set on a <code>FilteredRowSet</code> object must be
considered as bi-directional and the set criterion as the gating mechanism
for all views and updates to the <code>FilteredRowSet</code> object. Any attempt
to update the <code>FilteredRowSet</code> that violates the criterion will
result in a <code>SQLException</code> object being thrown.
<p>
The <code>FilteredRowSet</code> range criterion can be modified by applying
a new <code>Predicate</code> object to the <code>FilteredRowSet</code>
instance at any time. This is  possible if no additional references to the
<code>FilteredRowSet</code> object are detected. A new filter has has an
immediate effect on criterion enforcement within the
<code>FilteredRowSet</code> object, and all subsequent views and updates will be
subject to similar enforcement.

<h3>5.0 Behavior of Rows Outside the Filter</h3>
Rows that fall outside of the filter set on a <code>FilteredRowSet</code>
object cannot be modified until the filter is removed or a
new filter is applied.
<p>
Furthermore, only rows that fall within the bounds of a filter will be
synchronized with the data source.

@author Jonathan Bruce
"
      classrelation 4048002 // <generalisation>
	relation 4048002 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4048002 // <generalisation>
	  b parent class_ref 1259394 // WebRowSet
      end

      operation 10366722 "setFilter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 1259522 // Predicate
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the given <code>Predicate</code> object to this
<code>FilteredRowSet</code>
object. The filter applies controls both to inbound and outbound views,
constraining which rows are visible and which
rows can be manipulated.
<p>
A new <code>Predicate</code> object may be set at any time. This has the
effect of changing constraints on the <code>RowSet</code> object's data.
In addition, modifying the filter at runtime presents issues whereby
multiple components may be operating on one <code>FilteredRowSet</code> object.
Application developers must take responsibility for managing multiple handles
to <code>FilteredRowSet</code> objects when their underling <code>Predicate</code>
objects change.

@param p a <code>Predicate</code> object defining the filter for this
<code>FilteredRowSet</code> object. Setting a <b>null</b> value
will clear the predicate, allowing all rows to become visible.

@throws SQLException if an error occurs when setting the
    <code>Predicate</code> object
"
      end

      operation 10366850 "getFilter"
	public return_type class_ref 1259522 // Predicate
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the active filter for this <code>FilteredRowSet</code> object.

@return p the <code>Predicate</code> for this <code>FilteredRowSet</code>
object; <code>null</code> if no filter has been set.
"
      end
    end

    class 1259394 "WebRowSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The standard interface that all implementations of a {@code WebRowSet}
must implement.

<h3>1.0 Overview</h3>
The {@code WebRowSetImpl} provides the standard
reference implementation, which may be extended if required.
<P>
The standard WebRowSet XML Schema definition is available at the following
URI:
<ul>
<li>
<a href=\"http://java.sun.com/xml/ns/jdbc/webrowset.xsd\">http://java.sun.com/xml/ns/jdbc/webrowset.xsd</a>
</li>
</ul>
It describes the standard XML document format required when describing a
{@code RowSet} object in XML and must be used be all standard implementations
of the {@code WebRowSet} interface to ensure interoperability. In addition,
the {@code WebRowSet} schema uses specific SQL/XML Schema annotations,
thus ensuring greater cross
platform inter-operability. This is an effort currently under way at the ISO
organization. The SQL/XML definition is available at the following URI:
<ul>
<li>
<a href=\"http://standards.iso.org/iso/9075/2002/12/sqlxml\">http://standards.iso.org/iso/9075/2002/12/sqlxml</a>
</li>
</ul>
The schema definition describes the internal data of a {@code RowSet} object
in three distinct areas:
<UL>
<li>properties - These properties describe the standard synchronization
provider properties in addition to the more general {@code RowSet} properties.
</li>
<li>metadata - This describes the metadata associated with the tabular structure governed by a
{@code WebRowSet} object. The metadata described is closely aligned with the
metadata accessible in the underlying {@code java.sql.ResultSet} interface.
</li>
<li>data - This describes the original data (the state of data since the
last population
or last synchronization of the {@code WebRowSet} object) and the current
data. By keeping track of the delta between the original data and the current data,
a {@code WebRowSet} maintains the ability to synchronize changes
in its data back to the originating data source.
</li>
</ul>

<h3>2.0 WebRowSet States</h3>
The following sections demonstrates how a {@code WebRowSet} implementation
should use the XML Schema to describe update, insert, and delete operations
and to describe the state of a {@code WebRowSet} object in XML.

<h4>2.1 State 1 - Outputting a {@code WebRowSet} Object to XML</h4>
In this example, a {@code WebRowSet} object is created and populated with a simple 2 column,
5 row table from a data source. Having the 5 rows in a {@code WebRowSet} object
makes it possible to describe them in XML. The
metadata describing the various standard JavaBeans properties as defined
in the RowSet interface plus the standard properties defined in
the {@code CachedRowSet}&trade; interface
provide key details that describe WebRowSet
properties. Outputting the WebRowSet object to XML using the standard
{@code writeXml} methods describes the internal properties as follows:
<PRE>
{@code
<properties>
      <command>select co1, col2 from test_table</command>
     <concurrency>1</concurrency>
     <datasource/>
     <escape-processing>true</escape-processing>
     <fetch-direction>0</fetch-direction>
     <fetch-size>0</fetch-size>
     <isolation-level>1</isolation-level>
     <key-columns/>
     <map/>
     <max-field-size>0</max-field-size>
     <max-rows>0</max-rows>
     <query-timeout>0</query-timeout>
     <read-only>false</read-only>
     <rowset-type>TRANSACTION_READ_UNCOMMITED</rowset-type>
     <show-deleted>false</show-deleted>
     <table-name/>
     <url>jdbc:thin:oracle</url>
     <sync-provider>
             <sync-provider-name>.com.rowset.provider.RIOptimisticProvider</sync-provider-name>
             <sync-provider-vendor>Oracle Corporation</sync-provider-vendor>
             <sync-provider-version>1.0</sync-provider-name>
             <sync-provider-grade>LOW</sync-provider-grade>
             <data-source-lock>NONE</data-source-lock>
     </sync-provider>
</properties>
} </PRE>
The meta-data describing the make up of the WebRowSet is described
in XML as detailed below. Note both columns are described between the
{@code column-definition} tags.
<PRE>
{@code
<metadata>
     <column-count>2</column-count>
     <column-definition>
             <column-index>1</column-index>
             <auto-increment>false</auto-increment>
             <case-sensitive>true</case-sensitive>
             <currency>false</currency>
             <nullable>1</nullable>
             <signed>false</signed>
             <searchable>true</searchable>
             <column-display-size>10</column-display-size>
             <column-label>COL1</column-label>
             <column-name>COL1</column-name>
             <schema-name/>
             <column-precision>10</column-precision>
             <column-scale>0</column-scale>
             <table-name/>
             <catalog-name/>
             <column-type>1</column-type>
             <column-type-name>CHAR</column-type-name>
     </column-definition>
     <column-definition>
             <column-index>2</column-index>
             <auto-increment>false</auto-increment>
             <case-sensitive>false</case-sensitive>
             <currency>false</currency>
             <nullable>1</nullable>
             <signed>true</signed>
             <searchable>true</searchable>
             <column-display-size>39</column-display-size>
             <column-label>COL2</column-label>
             <column-name>COL2</column-name>
             <schema-name/>
             <column-precision>38</column-precision>
             <column-scale>0</column-scale>
             <table-name/>
             <catalog-name/>
             <column-type>3</column-type>
             <column-type-name>NUMBER</column-type-name>
     </column-definition>
</metadata>
}</PRE>
Having detailed how the properties and metadata are described, the following details
how the contents of a {@code WebRowSet} object is described in XML. Note, that
this describes a {@code WebRowSet} object that has not undergone any
modifications since its instantiation.
A {@code currentRow} tag is mapped to each row of the table structure that the
{@code WebRowSet} object provides. A {@code columnValue} tag may contain
either the {@code stringData} or {@code binaryData} tag, according to
the SQL type that
the XML value is mapping back to. The {@code binaryData} tag contains data in the
Base64 encoding and is typically used for {@code BLOB} and {@code CLOB} type data.
<PRE>
{@code
<data>
     <currentRow>
             <columnValue>
                     firstrow
             </columnValue>
             <columnValue>
                     1
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     secondrow
             </columnValue>
             <columnValue>
                     2
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     thirdrow
             </columnValue>
             <columnValue>
                     3
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     fourthrow
             </columnValue>
             <columnValue>
                     4
             </columnValue>
     </currentRow>
</data>
}</PRE>
<h4>2.2 State 2 - Deleting a Row</h4>
Deleting a row in a {@code WebRowSet} object involves simply moving to the row
to be deleted and then calling the method {@code deleteRow}, as in any other
{@code RowSet} object.  The following
two lines of code, in which <i>wrs</i> is a {@code WebRowSet} object, delete
the third row.
<PRE>
    wrs.absolute(3);
    wrs.deleteRow();
</PRE>
The XML description shows the third row is marked as a {@code deleteRow},
 which eliminates the third row in the {@code WebRowSet} object.
<PRE>
{@code
<data>
     <currentRow>
             <columnValue>
                     firstrow
             </columnValue>
             <columnValue>
                     1
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     secondrow
             </columnValue>
             <columnValue>
                     2
             </columnValue>
     </currentRow>
     <deleteRow>
             <columnValue>
                     thirdrow
             </columnValue>
             <columnValue>
                     3
             </columnValue>
     </deleteRow>
     <currentRow>
             <columnValue>
                     fourthrow
             </columnValue>
             <columnValue>
                     4
             </columnValue>
     </currentRow>
</data>
} </PRE>
<h4>2.3 State 3 - Inserting a Row</h4>
A {@code WebRowSet} object can insert a new row by moving to the insert row,
calling the appropriate updater methods for each column in the row, and then
calling the method {@code insertRow}.
<PRE>
{@code
wrs.moveToInsertRow();
wrs.updateString(1, \"fifththrow\");
wrs.updateString(2, \"5\");
wrs.insertRow();
}</PRE>
The following code fragment changes the second column value in the row just inserted.
Note that this code applies when new rows are inserted right after the current row,
which is why the method {@code next} moves the cursor to the correct row.
Calling the method {@code acceptChanges} writes the change to the data source.

<PRE>
{@code wrs.moveToCurrentRow();
wrs.next();
wrs.updateString(2, \"V\");
wrs.acceptChanges();
}</PRE>
Describing this in XML demonstrates where the Java code inserts a new row and then
performs an update on the newly inserted row on an individual field.
<PRE>
{@code
<data>
     <currentRow>
             <columnValue>
                     firstrow
             </columnValue>
             <columnValue>
                     1
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     secondrow
             </columnValue>
             <columnValue>
                     2
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     newthirdrow
             </columnValue>
             <columnValue>
                     III
             </columnValue>
     </currentRow>
     <insertRow>
             <columnValue>
                     fifthrow
             </columnValue>
             <columnValue>
                     5
             </columnValue>
             <updateValue>
                     V
             </updateValue>
     </insertRow>
     <currentRow>
             <columnValue>
                     fourthrow
             </columnValue>
             <columnValue>
                     4
             </columnValue>
     </currentRow>
</date>
} </PRE>
<h4>2.4 State 4 - Modifying a Row</h4>
Modifying a row produces specific XML that records both the new value and the
value that was replaced.  The value that was replaced becomes the original value,
and the new value becomes the current value. The following
code moves the cursor to a specific row, performs some modifications, and updates
the row when complete.
<PRE>
{@code
wrs.absolute(5);
wrs.updateString(1, \"new4thRow\");
wrs.updateString(2, \"IV\");
wrs.updateRow();
}</PRE>
In XML, this is described by the {@code modifyRow} tag. Both the original and new
values are contained within the tag for original row tracking purposes.
<PRE>
{@code
<data>
     <currentRow>
             <columnValue>
                     firstrow
             </columnValue>
             <columnValue>
                     1
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     secondrow
             </columnValue>
             <columnValue>
                     2
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     newthirdrow
             </columnValue>
             <columnValue>
                     III
             </columnValue>
     </currentRow>
     <currentRow>
             <columnValue>
                     fifthrow
             </columnValue>
             <columnValue>
                     5
             </columnValue>
     </currentRow>
     <modifyRow>
             <columnValue>
                     fourthrow
             </columnValue>
             <updateValue>
                     new4thRow
             </updateValue>
             <columnValue>
                     4
             </columnValue>
             <updateValue>
                     IV
             </updateValue>
     </modifyRow>
</data>
}</PRE>

@see javax.sql.rowset.JdbcRowSet
@see javax.sql.rowset.CachedRowSet
@see javax.sql.rowset.FilteredRowSet
@see javax.sql.rowset.JoinRowSet
"
      classrelation 4047618 // <generalisation>
	relation 4047618 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4047618 // <generalisation>
	  b parent class_ref 1258626 // CachedRowSet
      end

      operation 10365954 "readXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 407298 // Reader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a {@code WebRowSet} object in its XML format from the given
{@code Reader} object.

@param reader the {@code java.io.Reader} stream from which this
       {@code WebRowSet} object will be populated

@throws SQLException if a database access error occurs
"
      end

      operation 10366082 "readXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "iStream" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 1037186 // SQLException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a stream based XML input to populate this {@code WebRowSet}
object.

@param iStream the {@code java.io.InputStream} from which this
       {@code WebRowSet} object will be populated
@throws SQLException if a data source access error occurs
@throws IOException if an IO exception occurs
"
      end

      operation 10366210 "writeXml"
	public explicit_return_type "void"
	nparams 2
	  param inout name "rs" type class_ref 1037314 // ResultSet
	  param inout name "writer" type class_ref 428034 // Writer
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates this {@code WebRowSet} object with
the contents of the given {@code ResultSet} object and writes its
data, properties, and metadata
to the given {@code Writer} object in XML format.
<p>
NOTE: The {@code WebRowSet} cursor may be moved to write out the
contents to the XML data source. If implemented in this way, the cursor <b>must</b>
be returned to its position just prior to the {@code writeXml()} call.

@param rs the {@code ResultSet} object with which to populate this
       {@code WebRowSet} object
@param writer the {@code java.io.Writer} object to write to.
@throws SQLException if an error occurs writing out the rowset
         contents in XML format
"
      end

      operation 10366338 "writeXml"
	public explicit_return_type "void"
	nparams 2
	  param inout name "rs" type class_ref 1037314 // ResultSet
	  param inout name "oStream" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 1037186 // SQLException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates this {@code WebRowSet} object with
the contents of the given {@code ResultSet} object and writes its
data, properties, and metadata
to the given {@code OutputStream} object in XML format.
<p>
NOTE: The {@code WebRowSet} cursor may be moved to write out the
contents to the XML data source. If implemented in this way, the cursor <b>must</b>
be returned to its position just prior to the {@code writeXml()} call.

@param rs the {@code ResultSet} object with which to populate this
       {@code WebRowSet} object
@param oStream the {@code java.io.OutputStream} to write to
@throws SQLException if a data source access error occurs
@throws IOException if a IO exception occurs
"
      end

      operation 10366466 "writeXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "writer" type class_ref 428034 // Writer
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the data, properties, and metadata for this {@code WebRowSet} object
to the given {@code Writer} object in XML format.

@param writer the {@code java.io.Writer} stream to write to
@throws SQLException if an error occurs writing out the rowset
         contents to XML
"
      end

      operation 10366594 "writeXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "oStream" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 1037186 // SQLException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the data, properties, and metadata for this {@code WebRowSet} object
to the given {@code OutputStream} object in XML format.

@param oStream the {@code java.io.OutputStream} stream to write to
@throws SQLException if a data source access error occurs
@throws IOException if a IO exception occurs
"
      end

      classrelation 4047746 // PUBLIC_XML_SCHEMA (<unidirectional association>)
	relation 4047746 --->
	  a role_name "PUBLIC_XML_SCHEMA" init_value "
        \"--//Oracle Corporation//XSD Schema//EN\"" class_relation public
	    comment "
The public identifier for the XML Schema definition that defines the XML
tags and their valid values for a {@code WebRowSet} implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4047746 // PUBLIC_XML_SCHEMA (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4047874 // SCHEMA_SYSTEM_ID (<unidirectional association>)
	relation 4047874 --->
	  a role_name "SCHEMA_SYSTEM_ID" init_value " \"http://java.sun.com/xml/ns/jdbc/webrowset.xsd\"" class_relation public
	    comment "
The URL for the XML Schema definition file that defines the XML tags and
their valid values for a {@code WebRowSet} implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4047874 // SCHEMA_SYSTEM_ID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 1259522 "Predicate"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The standard interface that provides the framework for all
<code>FilteredRowSet</code> objects to describe their filters.

<h3>1.0 Background</h3>
The <code>Predicate</code> interface is a standard interface that
applications can implement to define the filter they wish to apply to a
a <code>FilteredRowSet</code> object. A <code>FilteredRowSet</code>
object consumes implementations of this interface and enforces the
constraints defined in the implementation of the method <code>evaluate</code>.
A <code>FilteredRowSet</code> object enforces the filter constraints in a
bi-directional manner: It outputs only rows that are within
the constraints of the filter; and conversely, it inserts, modifies, or updates
only rows that are within the constraints of the filter.

<h3>2.0 Implementation Guidelines</h3>
In order to supply a predicate for the <code>FilteredRowSet</code>.
this interface must be implemented.  At this time, the JDBC RowSet
Implementations (JSR-114) does not specify any standard filters definitions.
By specifying a standard means and mechanism for a range of filters to be
defined and deployed with both the reference and vendor implementations
of the <code>FilteredRowSet</code> interface, this allows for a flexible
and application motivated implementations of <code>Predicate</code> to emerge.
<p>
A sample implementation would look something like this:
<pre>{@code
   public class Range implements Predicate {

      private int[] lo;
      private int[] hi;
      private int[] idx;

      public Range(int[] lo, int[] hi, int[] idx) {
         this.lo = lo;
         this.hi = hi;
         this.idx = idx;
      }

     public boolean evaluate(RowSet rs) {

         // Check the present row determine if it lies
         // within the filtering criteria.

         for (int i = 0; i < idx.length; i++) {
            int value;
            try {
                value = (Integer) rs.getObject(idx[i]);
            } catch (SQLException ex) {
                Logger.getLogger(Range.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            }

            if (value < lo[i] && value > hi[i]) {
                // outside of filter constraints
                return false;
            }
        }
        // Within filter constraints
       return true;
     }
  }
}</pre>
<P>
The example above implements a simple range predicate. Note, that
implementations should but are not required to provide <code>String</code>
and integer index based constructors to provide for JDBC RowSet Implementation
applications that use both column identification conventions.

@author Jonathan Bruce, Amit Handa


 <h3>3.0 FilteredRowSet Internals</h3>
 internalNext, Frist, Last. Discuss guidelines on how to approach this
 and cite examples in reference implementations."
      operation 10370050 "evaluate"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rs" type class_ref 1257218 // RowSet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is typically called a <code>FilteredRowSet</code> object
internal methods (not public) that control the <code>RowSet</code> object's
cursor moving  from row to the next. In addition, if this internal method
moves the cursor onto a row that has been deleted, the internal method will
continue to ove the cursor until a valid row is found.
@param rs The {@code RowSet} to be evaluated
@return <code>true</code> if there are more rows in the filter;
    <code>false</code> otherwise
"
      end

      operation 10370178 "evaluate"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "value" type class_ref 129538 // Object
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by a <code>FilteredRowSet</code> object
to check whether the value lies between the filtering criterion (or criteria
if multiple constraints exist) set using the <code>setFilter()</code> method.
<P>
The <code>FilteredRowSet</code> object will use this method internally
while inserting new rows to a <code>FilteredRowSet</code> instance.

@param value An <code>Object</code> value which needs to be checked,
       whether it can be part of this <code>FilterRowSet</code> object.
@param column a <code>int</code> object that must match the
       SQL index of a column in this <code>RowSet</code> object. This must
       have been passed to <code>Predicate</code> as one of the columns
       for filtering while initializing a <code>Predicate</code>
@return <code>true</code> if row value lies within the filter;
    <code>false</code> otherwise
@throws SQLException if the column is not part of filtering criteria
"
      end

      operation 10370306 "evaluate"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "columnName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by the <code>FilteredRowSet</code> object
to check whether the value lies between the filtering criteria set
using the setFilter method.
<P>
The <code>FilteredRowSet</code> object will use this method internally
while inserting new rows to a <code>FilteredRowSet</code> instance.

@param value An <code>Object</code> value which needs to be checked,
whether it can be part of this <code>FilterRowSet</code>.

@param columnName a <code>String</code> object that must match the
       SQL name of a column in this <code>RowSet</code>, ignoring case. This must
       have been passed to <code>Predicate</code> as one of the columns for filtering
       while initializing a <code>Predicate</code>

@return <code>true</code> if value lies within the filter; <code>false</code> otherwise

@throws SQLException if the column is not part of filtering criteria
"
      end
    end

    class 1259650 "JdbcRowSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The standard interface that all standard implementations of
<code>JdbcRowSet</code> must implement.

<h3>1.0 Overview</h3>
A wrapper around a <code>ResultSet</code> object that makes it possible
to use the result set as a JavaBeans&trade;
component.  Thus, a <code>JdbcRowSet</code> object can be one of the Beans that
a tool makes available for composing an application.  Because
a <code>JdbcRowSet</code> is a connected rowset, that is, it continually
maintains its connection to a database using a JDBC technology-enabled
driver, it also effectively makes the driver a JavaBeans component.
<P>
Because it is always connected to its database, an instance of
<code>JdbcRowSet</code>
can simply take calls invoked on it and in turn call them on its
<code>ResultSet</code> object. As a consequence, a result set can, for
example, be a component in a Swing application.
<P>
Another advantage of a <code>JdbcRowSet</code> object is that it can be
used to make a <code>ResultSet</code> object scrollable and updatable.  All
<code>RowSet</code> objects are by default scrollable and updatable. If
the driver and database being used do not support scrolling and/or updating
of result sets, an application can populate a <code>JdbcRowSet</code> object
with the data of a <code>ResultSet</code> object and then operate on the
<code>JdbcRowSet</code> object as if it were the <code>ResultSet</code>
object.

<h3>2.0 Creating a <code>JdbcRowSet</code> Object</h3>
The reference implementation of the <code>JdbcRowSet</code> interface,
<code>JdbcRowSetImpl</code>, provides an implementation of
the default constructor.  A new instance is initialized with
default values, which can be set with new values as needed. A
new instance is not really functional until its <code>execute</code>
method is called. In general, this method does the following:
<UL>
  <LI> establishes a connection with a database
  <LI> creates a <code>PreparedStatement</code> object and sets any of its
       placeholder parameters
  <LI> executes the statement to create a <code>ResultSet</code> object
</UL>
If the <code>execute</code> method is successful, it will set the
appropriate private <code>JdbcRowSet</code> fields with the following:
<UL>
 <LI> a <code>Connection</code> object -- the connection between the rowset
      and the database
 <LI> a <code>PreparedStatement</code> object -- the query that produces
      the result set
 <LI> a <code>ResultSet</code> object -- the result set that the rowset's
      command produced and that is being made, in effect, a JavaBeans
      component
</UL>
If these fields have not been set, meaning that the <code>execute</code>
method has not executed successfully, no methods other than
<code>execute</code> and <code>close</code> may be called on the
rowset.  All other public methods will throw an exception.
<P>
Before calling the <code>execute</code> method, however, the command
and properties needed for establishing a connection must be set.
The following code fragment creates a <code>JdbcRowSetImpl</code> object,
sets the command and connection properties, sets the placeholder parameter,
and then invokes the method <code>execute</code>.
<PRE>
    JdbcRowSetImpl jrs = new JdbcRowSetImpl();
    jrs.setCommand(\"SELECT * FROM TITLES WHERE TYPE = ?\");
    jrs.setURL(\"jdbc:myDriver:myAttribute\");
    jrs.setUsername(\"cervantes\");
    jrs.setPassword(\"sancho\");
    jrs.setString(1, \"BIOGRAPHY\");
    jrs.execute();
</PRE>
The variable <code>jrs</code> now represents an instance of
<code>JdbcRowSetImpl</code> that is a thin wrapper around the
<code>ResultSet</code> object containing all the rows in the
table <code>TITLES</code> where the type of book is biography.
At this point, operations called on <code>jrs</code> will
affect the rows in the result set, which is effectively a JavaBeans
component.
<P>
The implementation of the <code>RowSet</code> method <code>execute</code> in the
<code>JdbcRowSet</code> reference implementation differs from that in the
<code>CachedRowSet</code>&trade;
reference implementation to account for the different
requirements of connected and disconnected <code>RowSet</code> objects.
<p>

@author Jonathan Bruce
"
      classrelation 4048130 // <generalisation>
	relation 4048130 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4048130 // <generalisation>
	  b parent class_ref 1257218 // RowSet
      end

      classrelation 4048258 // <generalisation>
	relation 4048258 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4048258 // <generalisation>
	  b parent class_ref 1258754 // Joinable
      end

      operation 10366978 "getShowDeleted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>boolean</code> indicating whether rows marked
for deletion appear in the set of current rows. If <code>true</code> is
returned, deleted rows are visible with the current rows. If
<code>false</code> is returned, rows are not visible with the set of
current rows. The default value is <code>false</code>.
<P>
Standard rowset implementations may choose to restrict this behavior
for security considerations or for certain deployment
scenarios. The visibility of deleted rows is implementation-defined
and does not represent standard behavior.
<P>
Note: Allowing deleted rows to remain visible complicates the behavior
of some standard JDBC <code>RowSet</code> implementations methods.
However, most rowset users can simply ignore this extra detail because
only very specialized applications will likely want to take advantage of
this feature.

@return <code>true</code> if deleted rows are visible;
        <code>false</code> otherwise
@exception SQLException if a rowset implementation is unable to
         to determine whether rows marked for deletion remain visible
@see #setShowDeleted
"
      end

      operation 10367106 "setShowDeleted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the property <code>showDeleted</code> to the given
<code>boolean</code> value. This property determines whether
rows marked for deletion continue to appear in the set of current rows.
If the value is set to <code>true</code>, deleted rows are immediately
visible with the set of current rows. If the value is set to
<code>false</code>, the deleted rows are set as invisible with the
current set of rows.
<P>
Standard rowset implementations may choose to restrict this behavior
for security considerations or for certain deployment
scenarios. This is left as implementation-defined and does not
represent standard behavior.

@param b <code>true</code> if deleted rows should be shown;
             <code>false</code> otherwise
@exception SQLException if a rowset implementation is unable to
         to reset whether deleted rows should be visible
@see #getShowDeleted
"
      end

      operation 10367234 "getRowSetWarnings"
	public return_type class_ref 1259138 // RowSetWarning
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first warning reported by calls on this <code>JdbcRowSet</code>
object.
If a second warning was reported on this <code>JdbcRowSet</code> object,
it will be chained to the first warning and can be retrieved by
calling the method <code>RowSetWarning.getNextWarning</code> on the
first warning. Subsequent warnings on this <code>JdbcRowSet</code>
object will be chained to the <code>RowSetWarning</code> objects
returned by the method <code>RowSetWarning.getNextWarning</code>.

The warning chain is automatically cleared each time a new row is read.
This method may not be called on a <code>RowSet</code> object
that has been closed;
doing so will cause an <code>SQLException</code> to be thrown.
<P>
Because it is always connected to its data source, a <code>JdbcRowSet</code>
object can rely on the presence of active
<code>Statement</code>, <code>Connection</code>, and <code>ResultSet</code>
instances. This means that  applications can obtain additional
<code>SQLWarning</code>
notifications by calling the <code>getNextWarning</code> methods that
they provide.
Disconnected <code>Rowset</code> objects, such as a
<code>CachedRowSet</code> object, do not have access to
these <code>getNextWarning</code> methods.

@return the first <code>RowSetWarning</code>
object reported on this <code>JdbcRowSet</code> object
or <code>null</code> if there are none
@throws SQLException if this method is called on a closed
<code>JdbcRowSet</code> object
@see RowSetWarning
"
      end

      operation 10367362 "commit"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from
the <code>ResultSet</code> or JDBC properties passed to it's constructors.
This method wraps the <code>Connection</code> commit method to allow flexible
auto commit or non auto commit transactional control support.
<p>
Makes all changes made since the previous commit/rollback permanent
and releases any database locks currently held by this Connection
object. This method should be used only when auto-commit mode has
been disabled.

@throws SQLException if a database access error occurs or this
Connection object within this <code>JdbcRowSet</code> is in auto-commit mode
@see java.sql.Connection#setAutoCommit
"
      end

      operation 10367490 "getAutoCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from
the original <code>ResultSet</code> or JDBC properties passed to it. This
method wraps the <code>Connection</code>'s <code>getAutoCommit</code> method
to allow an application to determine the <code>JdbcRowSet</code> transaction
behavior.
<p>
Sets this connection's auto-commit mode to the given state. If a
connection is in auto-commit mode, then all its SQL statements will
be executed and committed as individual transactions. Otherwise, its
SQL statements are grouped into transactions that are terminated by a
call to either the method commit or the method rollback. By default,
new connections are in auto-commit mode.

@return {@code true} if auto-commit is enabled; {@code false} otherwise
@throws SQLException if a database access error occurs
@see java.sql.Connection#getAutoCommit()
"
      end

      operation 10367618 "setAutoCommit"
	public explicit_return_type "void"
	nparams 1
	  param inout name "autoCommit" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from
the original <code>ResultSet</code> or JDBC properties passed to it. This
method wraps the <code>Connection</code>'s <code>getAutoCommit</code> method
to allow an application to set the <code>JdbcRowSet</code> transaction behavior.
<p>
Sets the current auto-commit mode for this <code>Connection</code> object.
@param autoCommit {@code true} to enable auto-commit; {@code false} to
disable auto-commit
@throws SQLException if a database access error occurs
@see java.sql.Connection#setAutoCommit(boolean)
"
      end

      operation 10367746 "rollback"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from
the original <code>ResultSet</code> or JDBC properties passed to it.
Undoes all changes made in the current transaction and releases any
database locks currently held by this <code>Connection</code> object. This method
should be used only when auto-commit mode has been disabled.

@throws SQLException if a database access error occurs or this <code>Connection</code>
object within this <code>JdbcRowSet</code> is in auto-commit mode.
@see #rollback(Savepoint)
"
      end

      operation 10367874 "rollback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 1040130 // Savepoint
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from
the original <code>ResultSet</code> or JDBC properties passed to it.
Undoes all changes made in the current transaction to the last set savepoint
and releases any database locks currently held by this <code>Connection</code>
object. This method should be used only when auto-commit mode has been disabled.
@param s The {@code Savepoint} to rollback to
@throws SQLException if a database access error occurs or this <code>Connection</code>
object within this <code>JdbcRowSet</code> is in auto-commit mode.
@see #rollback
"
      end
    end

    class 1259778 "JoinRowSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>JoinRowSet</code> interface provides a mechanism for combining related
data from different <code>RowSet</code> objects into one <code>JoinRowSet</code>
object, which represents an SQL <code>JOIN</code>.
In other words, a <code>JoinRowSet</code> object acts as a
container for the data from <code>RowSet</code> objects that form an SQL
<code>JOIN</code> relationship.
<P>
The <code>Joinable</code> interface provides the methods for setting,
retrieving, and unsetting a match column, the basis for
establishing an SQL <code>JOIN</code> relationship. The match column may
alternatively be set by supplying it to the appropriate version of the
<code>JointRowSet</code> method <code>addRowSet</code>.

<h3>1.0 Overview</h3>
Disconnected <code>RowSet</code> objects (<code>CachedRowSet</code> objects
and implementations extending the <code>CachedRowSet</code> interface)
do not have a standard way to establish an SQL <code>JOIN</code> between
<code>RowSet</code> objects without the expensive operation of
reconnecting to the data source. The <code>JoinRowSet</code>
interface is specifically designed to address this need.
<P>
Any <code>RowSet</code> object
can be added to a <code>JoinRowSet</code> object to become
part of an SQL <code>JOIN</code> relationship. This means that both connected
and disconnected <code>RowSet</code> objects can be part of a <code>JOIN</code>.
<code>RowSet</code> objects operating in a connected environment
(<code>JdbcRowSet</code> objects) are
encouraged to use the database to which they are already
connected to establish SQL <code>JOIN</code> relationships between
tables directly. However, it is possible for a
<code>JdbcRowSet</code> object to be added to a <code>JoinRowSet</code> object
if necessary.
<P>
Any number of <code>RowSet</code> objects can be added to an
instance of <code>JoinRowSet</code> provided that they
can be related in an SQL <code>JOIN</code>.
By definition, the SQL <code>JOIN</code> statement is used to
combine the data contained in two or more relational database tables based
upon a common attribute. The <code>Joinable</code> interface provides the methods
for establishing a common attribute, which is done by setting a
<i>match column</i>. The match column commonly coincides with
the primary key, but there is
no requirement that the match column be the same as the primary key.
By establishing and then enforcing column matches,
a <code>JoinRowSet</code> object establishes <code>JOIN</code> relationships
between <code>RowSet</code> objects without the assistance of an available
relational database.
<P>
The type of <code>JOIN</code> to be established is determined by setting
one of the <code>JoinRowSet</code> constants using the method
<code>setJoinType</code>. The following SQL <code>JOIN</code> types can be set:
<UL>
 <LI><code>CROSS_JOIN</code>
 <LI><code>FULL_JOIN</code>
 <LI><code>INNER_JOIN</code> - the default if no <code>JOIN</code> type has been set
 <LI><code>LEFT_OUTER_JOIN</code>
 <LI><code>RIGHT_OUTER_JOIN</code>
</UL>
Note that if no type is set, the <code>JOIN</code> will automatically be an
inner join. The comments for the fields in the
<code>JoinRowSet</code> interface explain these <code>JOIN</code> types, which are
standard SQL <code>JOIN</code> types.

<h3>2.0 Using a <code>JoinRowSet</code> Object for Creating a <code>JOIN</code></h3>
When a <code>JoinRowSet</code> object is created, it is empty.
The first <code>RowSet</code> object to be added becomes the basis for the
<code>JOIN</code> relationship.
Applications must determine which column in each of the
<code>RowSet</code> objects to be added to the <code>JoinRowSet</code> object
should be the match column. All of the
<code>RowSet</code> objects must contain a match column, and the values in
each match column must be ones that can be compared to values in the other match
columns. The columns do not have to have the same name, though they often do,
and they do not have to store the exact same data type as long as the data types
can be compared.
<P>
A match column can be be set in two ways:
<ul>
 <li>By calling the <code>Joinable</code> method <code>setMatchColumn</code><br>
 This is the only method that can set the match column before a <code>RowSet</code>
 object is added to a <code>JoinRowSet</code> object. The <code>RowSet</code> object
 must have implemented the <code>Joinable</code> interface in order to use the method
 <code>setMatchColumn</code>. Once the match column value
 has been set, this method can be used to reset the match column at any time.
 <li>By calling one of the versions of the <code>JoinRowSet</code> method
 <code>addRowSet</code> that takes a column name or number (or an array of
 column names or numbers)<BR>
 Four of the five <code>addRowSet</code> methods take a match column as a parameter.
 These four methods set or reset the match column at the time a <code>RowSet</code>
 object is being added to a <code>JoinRowSet</code> object.
</ul>
<h3>3.0 Sample Usage</h3>
<p>
The following code fragment adds two <code>CachedRowSet</code>
objects to a <code>JoinRowSet</code> object. Note that in this example,
no SQL <code>JOIN</code> type is set, so the default <code>JOIN</code> type,
which is <i>INNER_JOIN</i>, is established.
<p>
In the following code fragment, the table <code>EMPLOYEES</code>, whose match
column is set to the first column (<code>EMP_ID</code>), is added to the
<code>JoinRowSet</code> object <i>jrs</i>. Then
the table <code>ESSP_BONUS_PLAN</code>, whose match column is likewise
the <code>EMP_ID</code> column, is added. When this second
table is added to <i>jrs</i>, only the rows in
<code>ESSP_BONUS_PLAN</code> whose <code>EMP_ID</code> value matches an
<code>EMP_ID</code> value in the <code>EMPLOYEES</code> table are added.
In this case, everyone in the bonus plan is an employee, so all of the rows
in the table <code>ESSP_BONUS_PLAN</code> are added to the <code>JoinRowSet</code>
object.  In this example, both <code>CachedRowSet</code> objects being added
have implemented the <code>Joinable</code> interface and can therefore call
the <code>Joinable</code> method <code>setMatchColumn</code>.
<PRE>
    JoinRowSet jrs = new JoinRowSetImpl();

    ResultSet rs1 = stmt.executeQuery(\"SELECT * FROM EMPLOYEES\");
    CachedRowSet empl = new CachedRowSetImpl();
    empl.populate(rs1);
    empl.setMatchColumn(1);
    jrs.addRowSet(empl);

    ResultSet rs2 = stmt.executeQuery(\"SELECT * FROM ESSP_BONUS_PLAN\");
    CachedRowSet bonus = new CachedRowSetImpl();
    bonus.populate(rs2);
    bonus.setMatchColumn(1); // EMP_ID is the first column
    jrs.addRowSet(bonus);
</PRE>
<P>
At this point, <i>jrs</i> is an inside JOIN of the two <code>RowSet</code> objects
based on their <code>EMP_ID</code> columns. The application can now browse the
combined data as if it were browsing one single <code>RowSet</code> object.
Because <i>jrs</i> is itself a <code>RowSet</code> object, an application can
navigate or modify it using <code>RowSet</code> methods.
<PRE>
    jrs.first();
    int employeeID = jrs.getInt(1);
    String employeeName = jrs.getString(2);
</PRE>
<P>
Note that because the SQL <code>JOIN</code> must be enforced when an application
adds a second or subsequent <code>RowSet</code> object, there
may be an initial degradation in performance while the <code>JOIN</code> is
being performed.
<P>
The following code fragment adds an additional <code>CachedRowSet</code> object.
In this case, the match column (<code>EMP_ID</code>) is set when the
<code>CachedRowSet</code> object is added to the <code>JoinRowSet</code> object.
<PRE>
    ResultSet rs3 = stmt.executeQuery(\"SELECT * FROM 401K_CONTRIB\");
    CachedRowSet fourO1k = new CachedRowSetImpl();
    four01k.populate(rs3);
    jrs.addRowSet(four01k, 1);
</PRE>
<P>
The <code>JoinRowSet</code> object <i>jrs</i> now contains values from all three
tables. The data in each row in <i>four01k</i> in which the value for the
<code>EMP_ID</code> column matches a value for the <code>EMP_ID</code> column
in <i>jrs</i> has been added to <i>jrs</i>.

<h3>4.0 <code>JoinRowSet</code> Methods</h3>
The <code>JoinRowSet</code> interface supplies several methods for adding
<code>RowSet</code> objects and for getting information about the
<code>JoinRowSet</code> object.
<UL>
  <LI>Methods for adding one or more <code>RowSet</code> objects<BR>
      These methods allow an application to add one <code>RowSet</code> object
      at a time or to add multiple <code>RowSet</code> objects at one time. In
      either case, the methods may specify the match column for each
      <code>RowSet</code> object being added.
  <LI>Methods for getting information<BR>
      One method retrieves the <code>RowSet</code> objects in the
      <code>JoinRowSet</code> object, and another method retrieves the
      <code>RowSet</code> names.  A third method retrieves either the SQL
      <code>WHERE</code> clause used behind the scenes to form the
      <code>JOIN</code> or a text description of what the <code>WHERE</code>
      clause does.
  <LI>Methods related to the type of <code>JOIN</code><BR>
      One method sets the <code>JOIN</code> type, and five methods find out whether
      the <code>JoinRowSet</code> object supports a given type.
  <LI>A method to make a separate copy of the <code>JoinRowSet</code> object<BR>
      This method creates a copy that can be persisted to the data source.
</UL>

"
      classrelation 4048386 // <generalisation>
	relation 4048386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4048386 // <generalisation>
	  b parent class_ref 1259394 // WebRowSet
      end

      operation 10368002 "addRowSet"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rowset" type class_ref 1258754 // Joinable
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given <code>RowSet</code> object to this <code>JoinRowSet</code>
object. If the <code>RowSet</code> object
is the first to be added to this <code>JoinRowSet</code>
object, it forms the basis of the <code>JOIN</code> relationship to be
established.
<P>
This method should be used only when the given <code>RowSet</code>
object already has a match column that was set with the <code>Joinable</code>
method <code>setMatchColumn</code>.
<p>
Note: A <code>Joinable</code> object is any <code>RowSet</code> object
that has implemented the <code>Joinable</code> interface.

@param rowset the <code>RowSet</code> object that is to be added to this
       <code>JoinRowSet</code> object; it must implement the
       <code>Joinable</code> interface and have a match column set
@throws SQLException if (1) an empty rowset is added to the to this
        <code>JoinRowSet</code> object, (2) a match column has not been
        set for <i>rowset</i>, or (3) <i>rowset</i>
        violates the active <code>JOIN</code>
@see Joinable#setMatchColumn
"
      end

      operation 10368130 "addRowSet"
	public explicit_return_type "void"
	nparams 2
	  param inout name "rowset" type class_ref 1257218 // RowSet
	  param in name "columnIdx" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given <code>RowSet</code> object to this <code>JoinRowSet</code>
object and sets the designated column as the match column for
the <code>RowSet</code> object. If the <code>RowSet</code> object
is the first to be added to this <code>JoinRowSet</code>
object, it forms the basis of the <code>JOIN</code> relationship to be
established.
<P>
This method should be used when <i>RowSet</i> does not already have a match
column set.

@param rowset the <code>RowSet</code> object that is to be added to this
       <code>JoinRowSet</code> object; it may implement the
       <code>Joinable</code> interface
@param columnIdx an <code>int</code> that identifies the column to become the
        match column
@throws SQLException if (1) <i>rowset</i> is an empty rowset or
        (2) <i>rowset</i> violates the active <code>JOIN</code>
@see Joinable#unsetMatchColumn
"
      end

      operation 10368258 "addRowSet"
	public explicit_return_type "void"
	nparams 2
	  param inout name "rowset" type class_ref 1257218 // RowSet
	  param inout name "columnName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds <i>rowset</i> to this <code>JoinRowSet</code> object and
sets the designated column as the match column. If <i>rowset</i>
is the first to be added to this <code>JoinRowSet</code>
object, it forms the basis for the <code>JOIN</code> relationship to be
established.
<P>
This method should be used when the given <code>RowSet</code> object
does not already have a match column.

@param rowset the <code>RowSet</code> object that is to be added to this
       <code>JoinRowSet</code> object; it may implement the
       <code>Joinable</code> interface
@param columnName the <code>String</code> object giving the name of the
       column to be set as the match column
@throws SQLException if (1) <i>rowset</i> is an empty rowset or
        (2) the match column for <i>rowset</i> does not satisfy the
        conditions of the <code>JOIN</code>
"
      end

      operation 10368386 "addRowSet"
	public explicit_return_type "void"
	nparams 2
	  param inout name "rowset" type class_ref 1257218 // RowSet
	multiplicity "[]"
	  param inout name "columnIdx" explicit_type "int"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds one or more <code>RowSet</code> objects contained in the given
array of <code>RowSet</code> objects to this <code>JoinRowSet</code>
object and sets the match column for
each of the <code>RowSet</code> objects to the match columns
in the given array of column indexes. The first element in
<i>columnIdx</i> is set as the match column for the first
<code>RowSet</code> object in <i>rowset</i>, the second element of
<i>columnIdx</i> is set as the match column for the second element
in <i>rowset</i>, and so on.
<P>
The first <code>RowSet</code> object added to this <code>JoinRowSet</code>
object forms the basis for the <code>JOIN</code> relationship.
<P>
This method should be used when the given <code>RowSet</code> object
does not already have a match column.

@param rowset an array of one or more <code>RowSet</code> objects
       to be added to the <code>JOIN</code>; it may implement the
       <code>Joinable</code> interface
@param columnIdx an array of <code>int</code> values indicating the index(es)
       of the columns to be set as the match columns for the <code>RowSet</code>
       objects in <i>rowset</i>
@throws SQLException if (1) an empty rowset is added to this
        <code>JoinRowSet</code> object, (2) a match column is not set
        for a <code>RowSet</code> object in <i>rowset</i>, or (3)
        a <code>RowSet</code> object being added violates the active
        <code>JOIN</code>
"
      end

      operation 10368514 "addRowSet"
	public explicit_return_type "void"
	nparams 2
	  param inout name "rowset" type class_ref 1257218 // RowSet
	multiplicity "[]"
	  param inout name "columnName" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds one or more <code>RowSet</code> objects contained in the given
array of <code>RowSet</code> objects to this <code>JoinRowSet</code>
object and sets the match column for
each of the <code>RowSet</code> objects to the match columns
in the given array of column names. The first element in
<i>columnName</i> is set as the match column for the first
<code>RowSet</code> object in <i>rowset</i>, the second element of
<i>columnName</i> is set as the match column for the second element
in <i>rowset</i>, and so on.
<P>
The first <code>RowSet</code> object added to this <code>JoinRowSet</code>
object forms the basis for the <code>JOIN</code> relationship.
<P>
This method should be used when the given <code>RowSet</code> object(s)
does not already have a match column.

@param rowset an array of one or more <code>RowSet</code> objects
       to be added to the <code>JOIN</code>; it may implement the
       <code>Joinable</code> interface
@param columnName an array of <code>String</code> values indicating the
       names of the columns to be set as the match columns for the
       <code>RowSet</code> objects in <i>rowset</i>
@throws SQLException if (1) an empty rowset is added to this
        <code>JoinRowSet</code> object, (2) a match column is not set
        for a <code>RowSet</code> object in <i>rowset</i>, or (3)
        a <code>RowSet</code> object being added violates the active
        <code>JOIN</code>
"
      end

      operation 10368642 "getRowSets"
	public return_type class_ref 184194 // Collection
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Collection</code> object containing the
<code>RowSet</code> objects that have been added to this
<code>JoinRowSet</code> object.
This should return the 'n' number of RowSet contained
within the <code>JOIN</code> and maintain any updates that have occurred while in
this union.

@return a <code>Collection</code> object consisting of the
       <code>RowSet</code> objects added to this <code>JoinRowSet</code>
       object
@throws SQLException if an error occurs generating the
        <code>Collection</code> object to be returned
"
      end

      operation 10368770 "getRowSetNames"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> array containing the names of the
        <code>RowSet</code> objects added to this <code>JoinRowSet</code>
        object.

@return a <code>String</code> array of the names of the
        <code>RowSet</code> objects in this <code>JoinRowSet</code>
        object
@throws SQLException if an error occurs retrieving the names of
        the <code>RowSet</code> objects
@see CachedRowSet#setTableName
"
      end

      operation 10368898 "toCachedRowSet"
	public return_type class_ref 1258626 // CachedRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>CachedRowSet</code> object containing the
data in this <code>JoinRowSet</code> object, which can be saved
to a data source using the <code>SyncProvider</code> object for
the <code>CachedRowSet</code> object.
<P>
If any updates or modifications have been applied to the JoinRowSet
the CachedRowSet returned by the method will not be able to persist
it's changes back to the originating rows and tables in the
in the datasource. The CachedRowSet instance returned should not
contain modification data and it should clear all properties of
it's originating SQL statement. An application should reset the
SQL statement using the <code>RowSet.setCommand</code> method.
<p>
In order to allow changes to be persisted back to the datasource
to the originating tables, the <code>acceptChanges</code> method
should be used and called on a JoinRowSet object instance. Implementations
can leverage the internal data and update tracking in their
implementations to interact with the SyncProvider to persist any
changes.

@return a CachedRowSet containing the contents of the JoinRowSet
@throws SQLException if an error occurs assembling the CachedRowSet
object
@see javax.sql.RowSet
@see javax.sql.rowset.CachedRowSet
@see javax.sql.rowset.spi.SyncProvider
"
      end

      operation 10369026 "supportsCrossJoin"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if CROSS_JOIN is supported by a JoinRowSet
implementation

@return true if the CROSS_JOIN is supported; false otherwise
"
      end

      operation 10369154 "supportsInnerJoin"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if INNER_JOIN is supported by a JoinRowSet
implementation

@return true is the INNER_JOIN is supported; false otherwise
"
      end

      operation 10369282 "supportsLeftOuterJoin"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if LEFT_OUTER_JOIN is supported by a JoinRowSet
implementation

@return true is the LEFT_OUTER_JOIN is supported; false otherwise
"
      end

      operation 10369410 "supportsRightOuterJoin"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if RIGHT_OUTER_JOIN is supported by a JoinRowSet
implementation

@return true is the RIGHT_OUTER_JOIN is supported; false otherwise
"
      end

      operation 10369538 "supportsFullJoin"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if FULL_JOIN is supported by a JoinRowSet
implementation

@return true is the FULL_JOIN is supported; false otherwise
"
      end

      operation 10369666 "setJoinType"
	public explicit_return_type "void"
	nparams 1
	  param in name "joinType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allow the application to adjust the type of <code>JOIN</code> imposed
on tables contained within the JoinRowSet object instance.
Implementations should throw a SQLException if they do
not support a given <code>JOIN</code> type.

@param joinType the standard JoinRowSet.XXX static field definition
of a SQL <code>JOIN</code> to re-configure a JoinRowSet instance on
the fly.
@throws SQLException if an unsupported <code>JOIN</code> type is set
@see #getJoinType
"
      end

      operation 10369794 "getWhereClause"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a SQL-like description of the WHERE clause being used
in a JoinRowSet object. An implementation can describe
the WHERE clause of the SQL <code>JOIN</code> by supplying a SQL
strings description of <code>JOIN</code> or provide a textual
description to assist applications using a <code>JoinRowSet</code>

@return whereClause a textual or SQL description of the logical
WHERE clause used in the JoinRowSet instance
@throws SQLException if an error occurs in generating a representation
of the WHERE clause.
"
      end

      operation 10369922 "getJoinType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>int</code> describing the set SQL <code>JOIN</code> type
governing this JoinRowSet instance. The returned type will be one of
standard JoinRowSet types: <code>CROSS_JOIN</code>, <code>INNER_JOIN</code>,
<code>LEFT_OUTER_JOIN</code>, <code>RIGHT_OUTER_JOIN</code> or
<code>FULL_JOIN</code>.

@return joinType one of the standard JoinRowSet static field
    definitions of a SQL <code>JOIN</code>. <code>JoinRowSet.INNER_JOIN</code>
    is returned as the default <code>JOIN</code> type is no type has been
    explicitly set.
@throws SQLException if an error occurs determining the SQL <code>JOIN</code>
    type supported by the JoinRowSet instance.
@see #setJoinType
"
      end

      attribute 2370050 "CROSS_JOIN"
	class_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An ANSI-style <code>JOIN</code> providing a cross product of two tables

"
      end

      attribute 2370178 "INNER_JOIN"
	class_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An ANSI-style <code>JOIN</code> providing a inner join between two tables. Any
unmatched rows in either table of the join should be discarded.

"
      end

      attribute 2370306 "LEFT_OUTER_JOIN"
	class_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An ANSI-style <code>JOIN</code> providing a left outer join between two
tables. In SQL, this is described where all records should be
returned from the left side of the JOIN statement.

"
      end

      attribute 2370434 "RIGHT_OUTER_JOIN"
	class_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An ANSI-style <code>JOIN</code> providing a right outer join between
two tables. In SQL, this is described where all records from the
table on the right side of the JOIN statement even if the table
on the left has no matching record.

"
      end

      attribute 2370562 "FULL_JOIN"
	class_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An ANSI-style <code>JOIN</code> providing a a full JOIN. Specifies that all
rows from either table be returned regardless of matching
records on the other table.

"
      end
    end

    class 1259906 "RowSetFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface that defines the implementation of a factory that is used
to obtain different types of {@code RowSet} implementations.

@author Lance Andersen
@since 1.7
"
      operation 10370434 "createCachedRowSet"
	public return_type class_ref 1258626 // CachedRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new instance of a CachedRowSet.</p>

@return A new instance of a CachedRowSet.

@throws SQLException if a CachedRowSet cannot
  be created.

@since 1.7
"
      end

      operation 10370562 "createFilteredRowSet"
	public return_type class_ref 1259266 // FilteredRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new instance of a FilteredRowSet.</p>

@return A new instance of a FilteredRowSet.

@throws SQLException if a FilteredRowSet cannot
  be created.

@since 1.7
"
      end

      operation 10370690 "createJdbcRowSet"
	public return_type class_ref 1259650 // JdbcRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new instance of a JdbcRowSet.</p>

@return A new instance of a JdbcRowSet.

@throws SQLException if a JdbcRowSet cannot
  be created.

@since 1.7
"
      end

      operation 10370818 "createJoinRowSet"
	public return_type class_ref 1259778 // JoinRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new instance of a JoinRowSet.</p>

@return A new instance of a JoinRowSet.

@throws SQLException if a JoinRowSet cannot
  be created.

@since 1.7
"
      end

      operation 10370946 "createWebRowSet"
	public return_type class_ref 1259394 // WebRowSet
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new instance of a WebRowSet.</p>

@return A new instance of a WebRowSet.

@throws SQLException if a WebRowSet cannot
  be created.

@since 1.7
"
      end
    end

    class 1260034 "RowSetMetaDataImpl"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides implementations for the methods that set and get
metadata information about a <code>RowSet</code> object's columns.
A <code>RowSetMetaDataImpl</code> object keeps track of the
number of columns in the rowset and maintains an internal array
of column attributes for each column.
<P>
A <code>RowSet</code> object creates a <code>RowSetMetaDataImpl</code>
object internally in order to set and retrieve information about
its columns.
<P>
NOTE: All metadata in a <code>RowSetMetaDataImpl</code> object
should be considered as unavailable until the <code>RowSet</code> object
that it describes is populated.
Therefore, any <code>RowSetMetaDataImpl</code> method that retrieves information
is defined as having unspecified behavior when it is called
before the <code>RowSet</code> object contains data.

@since 1.5
"
      classrelation 4048514 // <realization>
	relation 4048514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4048514 // <realization>
	  b parent class_ref 1257730 // RowSetMetaData
      end

      classrelation 4048642 // <realization>
	relation 4048642 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4048642 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2370690 "colCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of columns in the <code>RowSet</code> object that created
this <code>RowSetMetaDataImpl</code> object.
@serial

"
      end

      class 1260162 "ColInfo"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4048898 // <realization>
	  relation 4048898 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 4048898 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2370946 "autoIncrement"
	  public explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that indicates whether the value in this column is a number
that is incremented automatically, which makes the value read-only.
<code>true</code> means that the value in this column
is automatically numbered; <code>false</code> means that it is not.

@serial

"
	end

	attribute 2371074 "caseSensitive"
	  public explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that indicates whether the value in this column is case sensitive.
<code>true</code> means that it is; <code>false</code> that it is not.

@serial

"
	end

	attribute 2371202 "currency"
	  public explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that indicates whether the value in this column is a cash value
<code>true</code> means that it is; <code>false</code> that it is not.

@serial

"
	end

	attribute 2371330 "nullable"
	  public explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that indicates whether the value in this column is nullable.
The possible values are the <code>ResultSet</code> constants
<code>columnNoNulls</code>, <code>columnNullable</code>, and
<code>columnNullableUnknown</code>.

@serial

"
	end

	attribute 2371458 "signed"
	  public explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that indicates whether the value in this column is a signed number.
<code>true</code> means that it is; <code>false</code> that it is not.

@serial

"
	end

	attribute 2371586 "searchable"
	  public explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that indicates whether the value in this column can be used in
a <code>WHERE</code> clause.
<code>true</code> means that it can; <code>false</code> that it cannot.

@serial

"
	end

	attribute 2371714 "columnDisplaySize"
	  public explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that indicates the normal maximum width in characters for
this column.

@serial

"
	end

	classrelation 4049026 // columnLabel (<unidirectional association>)
	  relation 4049026 --->
	    a role_name "columnLabel" public
	      comment "
The field that holds the suggested column title for this column, to be
used in printing and displays.

@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4049026 // columnLabel (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 4049154 // columnName (<unidirectional association>)
	  relation 4049154 --->
	    a role_name "columnName" public
	      comment "
The field that holds the name of this column.

@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4049154 // columnName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 4049282 // schemaName (<unidirectional association>)
	  relation 4049282 --->
	    a role_name "schemaName" public
	      comment "
The field that holds the schema name for the table from which this column
was derived.

@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4049282 // schemaName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 2371842 "colPrecision"
	  public explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that holds the precision of the value in this column.  For number
types, the precision is the total number of decimal digits; for character types,
it is the maximum number of characters; for binary types, it is the maximum
length in bytes.

@serial

"
	end

	attribute 2371970 "colScale"
	  public explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that holds the scale (number of digits to the right of the decimal
point) of the value in this column.

@serial

"
	end

	classrelation 4049410 // tableName (<unidirectional association>)
	  relation 4049410 --->
	    a role_name "tableName" init_value "\"\"" public
	      comment "
The field that holds the name of the table from which this column
was derived.  This value may be the empty string if there is no
table name, such as when this column is produced by a join.

@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4049410 // tableName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 4049538 // catName (<unidirectional association>)
	  relation 4049538 --->
	    a role_name "catName" public
	      comment "
The field that holds the catalog name for the table from which this column
was derived.  If the DBMS does not support catalogs, the value may be the
empty string.

@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4049538 // catName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 2372098 "colType"
	  public explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that holds the type code from the class <code>java.sql.Types</code>
indicating the type of the value in this column.

@serial

"
	end

	classrelation 4049666 // colTypeName (<unidirectional association>)
	  relation 4049666 --->
	    a role_name "colTypeName" public
	      comment "
The field that holds the type name used by this particular data source
for the value stored in this column.

@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4049666 // colTypeName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 2372226 "readOnly"
	  public explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that holds the updatability boolean per column of a RowSet

@serial

"
	end

	attribute 2372354 "writable"
	  public explicit_type "boolean"
	  init_value " true"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The field that hold the writable boolean per column of a RowSet

@serial

"
	end

	attribute 2372482 "serialVersionUID"
	  class_attribute const_attribute package explicit_type "long"
	  init_value " 5490834817919311283L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 4048770 // colInfo (<unidirectional association>)
	relation 4048770 --->
	  a role_name "colInfo" multiplicity "[]" private
	    comment "
An array of <code>ColInfo</code> objects used to store information
about each column in the <code>RowSet</code> object for which
this <code>RowSetMetaDataImpl</code> object was created. The first
<code>ColInfo</code> object in this array contains information about
the first column in the <code>RowSet</code> object, the second element
contains information about the second column, and so on.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 4048770 // colInfo (<unidirectional association>)
	  b parent class_ref 1260162 // ColInfo
      end

      operation 10371074 "checkColRange"
	private explicit_return_type "void"
	nparams 1
	  param in name "col" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to see that the designated column is a valid column number for
the <code>RowSet</code> object for which this <code>RowSetMetaDataImpl</code>
was created. To be valid, a column number must be greater than
<code>0</code> and less than or equal to the number of columns in a row.
@throws <code>SQLException</code> with the message \"Invalid column index\"
       if the given column number is out of the range of valid column
       numbers for the <code>RowSet</code> object
"
      end

      operation 10371202 "checkColType"
	private explicit_return_type "void"
	nparams 1
	  param in name "SQLType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to see that the given SQL type is a valid column type and throws an
<code>SQLException</code> object if it is not.
To be valid, a SQL type must be one of the constant values
in the <code><a href=\"../../sql/Types.html\">java.sql.Types</a></code>
class.

@param SQLType an <code>int</code> defined in the class <code>java.sql.Types</code>
@throws SQLException if the given <code>int</code> is not a constant defined in the
        class <code>java.sql.Types</code>
"
      end

      operation 10371330 "setColumnCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given number the number of columns in the <code>RowSet</code>
object for which this <code>RowSetMetaDataImpl</code> object was created.

@param columnCount an <code>int</code> giving the number of columns in the
       <code>RowSet</code> object
@throws SQLException if the given number is equal to or less than zero
"
      end

      operation 10371458 "setAutoIncrement"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is automatically
numbered, thus read-only, to the given <code>boolean</code>
value.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns
       in the rowset, inclusive
@param property <code>true</code> if the given column is
                automatically incremented; <code>false</code>
                otherwise
@throws SQLException if a database access error occurs or
        the given index is out of bounds
"
      end

      operation 10371586 "setCaseSensitive"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the name of the designated column is case sensitive to
the given <code>boolean</code>.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns
       in the rowset, inclusive
@param property <code>true</code> to indicate that the column
                name is case sensitive; <code>false</code> otherwise
@throws SQLException if a database access error occurs or
        the given column number is out of bounds
"
      end

      operation 10371714 "setSearchable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether a value stored in the designated column can be used
in a <code>WHERE</code> clause to the given <code>boolean</code> value.

@param columnIndex the first column is 1, the second is 2, and so on;
                   must be between <code>1</code> and the number
                   of columns in the rowset, inclusive
@param property <code>true</code> to indicate that a column
                value can be used in a <code>WHERE</code> clause;
                <code>false</code> otherwise

@throws SQLException if a database access error occurs or
        the given column number is out of bounds
"
      end

      operation 10371842 "setCurrency"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether a value stored in the designated column is a cash
value to the given <code>boolean</code>.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns,
inclusive between <code>1</code> and the number of columns, inclusive
@param property true if the value is a cash value; false otherwise.
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10371970 "setNullable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "property" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether a value stored in the designated column can be set
to <code>NULL</code> to the given constant from the interface
<code>ResultSetMetaData</code>.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param property one of the following <code>ResultSetMetaData</code> constants:
                <code>columnNoNulls</code>,
                <code>columnNullable</code>, or
                <code>columnNullableUnknown</code>

@throws SQLException if a database access error occurs,
        the given column number is out of bounds, or the value supplied
        for the <i>property</i> parameter is not one of the following
        constants:
          <code>ResultSetMetaData.columnNoNulls</code>,
          <code>ResultSetMetaData.columnNullable</code>, or
          <code>ResultSetMetaData.columnNullableUnknown</code>
"
      end

      operation 10372098 "setSigned"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether a value stored in the designated column is a signed
number to the given <code>boolean</code>.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param property <code>true</code> to indicate that a column
                value is a signed number;
                <code>false</code> to indicate that it is not
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10372226 "setColumnDisplaySize"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the normal maximum number of chars in the designated column
to the given number.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param size the maximum size of the column in chars; must be
       <code>0</code> or more
@throws SQLException if a database access error occurs,
       the given column number is out of bounds, or <i>size</i> is
       less than <code>0</code>
"
      end

      operation 10372354 "setColumnLabel"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "label" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the suggested column label for use in printouts and
displays, if any, to <i>label</i>. If <i>label</i> is
<code>null</code>, the column label is set to an empty string
(\"\").

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param label the column label to be used in printouts and displays; if the
       column label is <code>null</code>, an empty <code>String</code> is
       set
@throws SQLException if a database access error occurs
        or the given column index is out of bounds
"
      end

      operation 10372482 "setColumnName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "columnName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the column name of the designated column to the given name.

@param columnIndex the first column is 1, the second is 2, and so on;
     must be between <code>1</code> and the number of columns, inclusive
@param columnName a <code>String</code> object indicating the column name;
     if the given name is <code>null</code>, an empty <code>String</code>
     is set
@throws SQLException if a database access error occurs or the given column
     index is out of bounds
"
      end

      operation 10372610 "setSchemaName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "schemaName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's table's schema name, if any, to
<i>schemaName</i>. If <i>schemaName</i> is <code>null</code>,
the schema name is set to an empty string (\"\").

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param schemaName the schema name for the table from which a value in the
       designated column was derived; may be an empty <code>String</code>
       or <code>null</code>
@throws SQLException if a database access error occurs
       or the given column number is out of bounds
"
      end

      operation 10372738 "setPrecision"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "precision" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the total number of decimal digits in a value stored in the
designated column to the given number.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param precision the total number of decimal digits; must be <code>0</code>
       or more
@throws SQLException if a database access error occurs,
        <i>columnIndex</i> is out of bounds, or <i>precision</i>
        is less than <code>0</code>
"
      end

      operation 10372866 "setScale"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of digits to the right of the decimal point in a value
stored in the designated column to the given number.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param scale the number of digits to the right of the decimal point; must be
       zero or greater
@throws SQLException if a database access error occurs,
        <i>columnIndex</i> is out of bounds, or <i>scale</i>
        is less than <code>0</code>
"
      end

      operation 10372994 "setTableName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "tableName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the table from which the designated column
was derived to the given table name.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param tableName the column's table name; may be <code>null</code> or an
       empty string
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10373122 "setCatalogName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "catalogName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the catalog name of the table from which the designated
column was derived to <i>catalogName</i>. If <i>catalogName</i>
is <code>null</code>, the catalog name is set to an empty string.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param catalogName the column's table's catalog name; if the catalogName
       is <code>null</code>, an empty <code>String</code> is set
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10373250 "setColumnType"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "SQLType" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SQL type code for values stored in the designated column
to the given type code from the class <code>java.sql.Types</code>.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@param SQLType the designated column's SQL type, which must be one of the
               constants in the class <code>java.sql.Types</code>
@throws SQLException if a database access error occurs,
        the given column number is out of bounds, or the column type
        specified is not one of the constants in
        <code>java.sql.Types</code>
@see java.sql.Types
"
      end

      operation 10373378 "setColumnTypeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "typeName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type name used by the data source for values stored in the
designated column to the given type name.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@param typeName the data source-specific type name; if <i>typeName</i> is
       <code>null</code>, an empty <code>String</code> is set
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10373506 "getColumnCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of columns in the <code>RowSet</code> object
for which this <code>RowSetMetaDataImpl</code> object was created.

@return the number of columns
@throws SQLException if an error occurs determining the column count
"
      end

      operation 10373634 "isAutoIncrement"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether a value stored in the designated column is
automatically numbered, and thus readonly.

@param columnIndex the first column is 1, the second is 2, and so on;
        must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if the column is automatically numbered;
        <code>false</code> otherwise
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10373762 "isCaseSensitive"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the case of the designated column's name
matters.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if the column name is case sensitive;
         <code>false</code> otherwise
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10373890 "isSearchable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a value stored in the designated column
can be used in a <code>WHERE</code> clause.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if a value in the designated column can be used in a
        <code>WHERE</code> clause; <code>false</code> otherwise
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10374018 "isCurrency"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a value stored in the designated column
is a cash value.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if a value in the designated column is a cash value;
        <code>false</code> otherwise
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10374146 "isNullable"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a constant indicating whether it is possible
to store a <code>NULL</code> value in the designated column.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@return a constant from the <code>ResultSetMetaData</code> interface;
        either <code>columnNoNulls</code>,
        <code>columnNullable</code>, or
        <code>columnNullableUnknown</code>
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10374274 "isSigned"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a value stored in the designated column is
a signed number.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if a value in the designated column is a signed
        number; <code>false</code> otherwise
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10374402 "getColumnDisplaySize"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the normal maximum width in chars of the designated column.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@return the maximum number of chars that can be displayed in the designated
        column
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10374530 "getColumnLabel"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the suggested column title for the designated
column for use in printouts and displays.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@return the suggested column name to use in printouts and displays
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10374658 "getColumnName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the designated column.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return the column name of the designated column
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10374786 "getSchemaName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the schema name of the table from which the value
in the designated column was derived.

@param columnIndex the first column is 1, the second is 2, and so on;
        must be between <code>1</code> and the number of columns,
        inclusive
@return the schema name or an empty <code>String</code> if no schema
        name is available
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10374914 "getPrecision"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the total number of digits for values stored in
the designated column.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return the precision for values stored in the designated column
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10375042 "getScale"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of digits to the right of the decimal point
for values stored in the designated column.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return the scale for values stored in the designated column
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10375170 "getTableName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the table from which the value
in the designated column was derived.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return the table name or an empty <code>String</code> if no table name
        is available
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10375298 "getCatalogName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the catalog name of the table from which the value
in the designated column was derived.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return the catalog name of the column's table or an empty
        <code>String</code> if no catalog name is available
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10375426 "getColumnType"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type code (one of the <code>java.sql.Types</code>
constants) for the SQL type of the value stored in the
designated column.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return an <code>int</code> representing the SQL type of values
stored in the designated column
@throws SQLException if a database access error occurs
or the given column number is out of bounds
@see java.sql.Types
"
      end

      operation 10375554 "getColumnTypeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the DBMS-specific type name for values stored in the
designated column.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return the type name used by the data source
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10375682 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the designated column is definitely
not writable, thus readonly.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if this <code>RowSet</code> object is read-Only
and thus not updatable; <code>false</code> otherwise
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10375810 "isWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether it is possible for a write operation on
the designated column to succeed. A return value of
<code>true</code> means that a write operation may or may
not succeed.

@param columnIndex the first column is 1, the second is 2, and so on;
        must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if a write operation on the designated column may
         will succeed; <code>false</code> otherwise
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10375938 "isDefinitelyWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a write operation on the designated column
will definitely succeed.

@param columnIndex the first column is 1, the second is 2, and so on;
must be between <code>1</code> and the number of columns, inclusive
@return <code>true</code> if a write operation on the designated column will
        definitely succeed; <code>false</code> otherwise
@throws SQLException if a database access error occurs
or the given column number is out of bounds
"
      end

      operation 10376066 "getColumnClassName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the fully-qualified name of the class in the Java
programming language to which a value in the designated column
will be mapped.  For example, if the value is an <code>int</code>,
the class name returned by this method will be
<code>java.lang.Integer</code>.
<P>
If the value in the designated column has a custom mapping,
this method returns the name of the class that implements
<code>SQLData</code>. When the method <code>ResultSet.getObject</code>
is called to retrieve a value from the designated column, it will
create an instance of this class or one of its subclasses.

@param columnIndex the first column is 1, the second is 2, and so on;
       must be between <code>1</code> and the number of columns, inclusive
@return the fully-qualified name of the class in the Java programming
       language that would be used by the method <code>RowSet.getObject</code> to
       retrieve the value in the specified column. This is the class
       name used for custom mapping when there is a custom mapping.
@throws SQLException if a database access error occurs
        or the given column number is out of bounds
"
      end

      operation 10376194 "unwrap"
	public explicit_return_type "T"
	nparams 1
	  param inout name "iface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that implements the given interface to allow access to non-standard methods,
or standard methods not exposed by the proxy.
The result may be either the object found to implement the interface or a proxy for that object.
If the receiver implements the interface then that is the object. If the receiver is a wrapper
and the wrapped object implements the interface then that is the object. Otherwise the object is
 the result of calling <code>unwrap</code> recursively on the wrapped object. If the receiver is not a
wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.

@param iface A Class defining an interface that the result must implement.
@return an object that implements the interface. May be a proxy for the actual implementing object.
@throws java.sql.SQLException If no object found that implements the interface
@since 1.6
"
      end

      operation 10376322 "isWrapperFor"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "interfaces" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this either implements the interface argument or is directly or indirectly a wrapper
for an object that does. Returns false otherwise. If this implements the interface then return true,
else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
object. If this does not implement the interface and is not a wrapper, return false.
This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
returns true then calling <code>unwrap</code> with the same argument should succeed.

@param interfaces a Class defining an interface.
@return true if this implements the interface or directly or indirectly wraps an object that does.
@throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
for an object with the given interface.
@since 1.6
"
      end

      attribute 2370818 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 6893806403181801867L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1260290 "RowSetProvider"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A factory API that enables applications to obtain a
{@code RowSetFactory} implementation  that can be used to create different
types of {@code RowSet} implementations.
<p>
Example:
</p>
<pre>
RowSetFactory aFactory = RowSetProvider.newFactory();
CachedRowSet crs = aFactory.createCachedRowSet();
...
RowSetFactory rsf = RowSetProvider.newFactory(\"com.sun.rowset.RowSetFactoryImpl\", null);
WebRowSet wrs = rsf.createWebRowSet();
</pre>
<p>
Tracing of this class may be enabled by setting the System property
{@code javax.sql.rowset.RowSetFactory.debug} to any value but {@code false}.
</p>

@author Lance Andersen
@since 1.7
"
      classrelation 4049794 // ROWSET_DEBUG_PROPERTY (<unidirectional association>)
	relation 4049794 --->
	  a role_name "ROWSET_DEBUG_PROPERTY" init_value " \"javax.sql.rowset.RowSetProvider.debug\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4049794 // ROWSET_DEBUG_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4049922 // ROWSET_FACTORY_IMPL (<unidirectional association>)
	relation 4049922 --->
	  a role_name "ROWSET_FACTORY_IMPL" init_value " \"com.sun.rowset.RowSetFactoryImpl\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4049922 // ROWSET_FACTORY_IMPL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4050050 // ROWSET_FACTORY_NAME (<unidirectional association>)
	relation 4050050 --->
	  a role_name "ROWSET_FACTORY_NAME" init_value " \"javax.sql.rowset.RowSetFactory\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4050050 // ROWSET_FACTORY_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2372610 "debug"
	class_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internal debug flag.

"
      end

      extra_member 184450 "initialization"
	
	cpp "" ""
	java "  static {
        // Check to see if the debug property is set
        String val = getSystemProperty(ROWSET_DEBUG_PROPERTY);
        // Allow simply setting the prop to turn on debug
        debug = val != null && !\"false\".equals(val);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 10376450 "RowSetProvider"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "RowSetProvider constructor
"
      end

      operation 10376578 "newFactory"
	class_operation public return_type class_ref 1259906 // RowSetFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new instance of a <code>RowSetFactory</code>
implementation.  This method uses the following
look up order to determine
the <code>RowSetFactory</code> implementation class to load:</p>
<ul>
<li>
The System property {@code javax.sql.rowset.RowSetFactory}.  For example:
<ul>
<li>
-Djavax.sql.rowset.RowSetFactory=com.sun.rowset.RowSetFactoryImpl
</li>
</ul>
<li>
The {@link ServiceLoader} API. The {@code ServiceLoader} API will look
for a class name in the file
{@code META-INF/services/javax.sql.rowset.RowSetFactory}
in jars available to the runtime. For example, to have the the RowSetFactory
implementation {@code com.sun.rowset.RowSetFactoryImpl } loaded, the
entry in {@code META-INF/services/javax.sql.rowset.RowSetFactory} would be:
 <ul>
<li>
{@code com.sun.rowset.RowSetFactoryImpl }
</li>
</ul>
</li>
<li>
Platform default <code>RowSetFactory</code> instance.
</li>
</ul>

<p>Once an application has obtained a reference to a {@code RowSetFactory},
it can use the factory to obtain RowSet instances.</p>

@return New instance of a <code>RowSetFactory</code>

@throws SQLException if the default factory class cannot be loaded,
instantiated. The cause will be set to actual Exception

@see ServiceLoader
@since 1.7
"
      end

      operation 10376706 "newFactory"
	class_operation public return_type class_ref 1259906 // RowSetFactory
	nparams 2
	  param inout name "factoryClassName" type class_ref 128130 // String
	  param inout name "cl" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates  a new instance of a <code>RowSetFactory</code> from the
specified factory class name.
This function is useful when there are multiple providers in the classpath.
It gives more control to the application as it can specify which provider
should be loaded.</p>

<p>Once an application has obtained a reference to a <code>RowSetFactory</code>
it can use the factory to obtain RowSet instances.</p>

@param factoryClassName fully qualified factory class name that
provides  an implementation of <code>javax.sql.rowset.RowSetFactory</code>.

@param cl <code>ClassLoader</code> used to load the factory
class. If <code>null</code> current <code>Thread</code>'s context
classLoader is used to load the factory class.

@return New instance of a <code>RowSetFactory</code>

@throws SQLException if <code>factoryClassName</code> is
<code>null</code>, or the factory class cannot be loaded, instantiated.

@see #newFactory()

@since 1.7
"
      end

      operation 10376834 "getContextClassLoader"
	class_operation private return_type class_ref 129026 // ClassLoader
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class loader to be used.
@return The ClassLoader to use.

"
      end

      operation 10376962 "getFactoryClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 3
	  param inout name "factoryClassName" type class_ref 128130 // String
	  param inout name "cl" type class_ref 129026 // ClassLoader
	  param inout name "doFallback" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to load a class using the class loader supplied. If that fails
and fall back is enabled, the current (i.e. bootstrap) class loader is
tried.

If the class loader supplied is <code>null</code>, first try using the
context class loader followed by the current class loader.
 @return The class which was loaded
"
      end

      operation 10377090 "loadViaServiceLoader"
	class_operation private return_type class_ref 1259906 // RowSetFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1037186 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Use the ServiceLoader mechanism to load  the default RowSetFactory
@return default RowSetFactory Implementation
"
      end

      operation 10377218 "getSystemProperty"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "propName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested System Property.  If a {@code SecurityException}
occurs, just return NULL
@param propName - System property to retrieve
@return The System property value or NULL if the property does not exist
or a {@code SecurityException} occurs.
"
      end

      operation 10377346 "trace"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Debug routine which will output tracing if the System Property
-Djavax.sql.rowset.RowSetFactory.debug is set
@param msg - The debug message to display
"
      end
    end
  end

  deploymentview 175874 "rowset"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 919042 "BaseRowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import javax.sql.*;
import java.util.*;
import java.io.*;
import java.math.*;
import java.io.Serializable;
import javax.sql.rowset.serial.*;
${definition}"
      associated_elems
	class_ref 1258498 // BaseRowSet
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 919170 "Joinable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_elems
	class_ref 1258754 // Joinable
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 919298 "CachedRowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import java.io.*;
import java.math.*;
import java.util.*;
import javax.sql.rowset.spi.*;
${definition}"
      associated_elems
	class_ref 1258626 // CachedRowSet
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 919426 "WebRowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import java.io.*;
import java.math.*;
import org.xml.sax.*;
${definition}"
      associated_elems
	class_ref 1259394 // WebRowSet
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 919554 "FilteredRowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import java.io.*;
import java.math.*;
${definition}"
      associated_elems
	class_ref 1259266 // FilteredRowSet
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 919682 "JdbcRowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import java.io.*;
import java.math.*;
import java.io.*;
${definition}"
      associated_elems
	class_ref 1259650 // JdbcRowSet
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 919810 "JoinRowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import java.io.*;
import java.math.*;
import java.util.*;
import javax.sql.rowset.*;
${definition}"
      associated_elems
	class_ref 1259778 // JoinRowSet
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 919938 "Predicate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.sql.*;
import java.sql.*;
${definition}"
      associated_elems
	class_ref 1259522 // Predicate
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 920066 "RowSetFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_elems
	class_ref 1259906 // RowSetFactory
      end
      comment "Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 920194 "RowSetMetaDataImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import javax.sql.*;
import java.io.*;
import java.lang.reflect.*;
${definition}"
      associated_elems
	class_ref 1260034 // RowSetMetaDataImpl
      end
      comment "Copyright (c) 2003, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 920322 "RowSetProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.sql.SQLException;
import java.util.PropertyPermission;
import java.util.ServiceConfigurationError;
import java.util.ServiceLoader;
import javax.sql.rowset.spi.SyncFactoryException;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 1260290 // RowSetProvider
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 920450 "RowSetWarning"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_elems
	class_ref 1259138 // RowSetWarning
      end
      comment "Copyright (c) 2003, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 186498 // spi

  package_ref 186626 // serial
end
