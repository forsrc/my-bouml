class ResolutionForwarder
!!!4973826.java!!!	ResolutionForwarder(inout entityResolver : LSResourceResolver)
            setEntityResolver(entityResolver);
!!!4973954.java!!!	setEntityResolver(inout entityResolver : LSResourceResolver) : void
            fEntityResolver = entityResolver;
!!!4974082.java!!!	getEntityResolver() : LSResourceResolver
            return fEntityResolver;
!!!4974210.java!!!	getExternalSubset(inout name : String, inout baseURI : String) : InputSource
            return null;
!!!4974338.java!!!	resolveEntity(inout name : String, inout publicId : String, inout baseURI : String, inout systemId : String) : InputSource
            if (fEntityResolver != null) {
                LSInput lsInput = fEntityResolver.resolveResource(XML_TYPE, null, publicId, systemId, baseURI);
                if (lsInput != null) {
                    final String pubId = lsInput.getPublicId();
                    final String sysId = lsInput.getSystemId();
                    final String baseSystemId = lsInput.getBaseURI();
                    final Reader charStream = lsInput.getCharacterStream();
                    final InputStream byteStream = lsInput.getByteStream();
                    final String data = lsInput.getStringData();
                    final String encoding = lsInput.getEncoding();

                    /**
                     * An LSParser looks at inputs specified in LSInput in
                     * the following order: characterStream, byteStream,
                     * stringData, systemId, publicId. For consistency
                     * with the DOM Level 3 Load and Save Recommendation
                     * use the same lookup order here.
                     */
                    InputSource inputSource = new InputSource();
                    inputSource.setPublicId(pubId);
                    inputSource.setSystemId((baseSystemId != null) ? resolveSystemId(systemId, baseSystemId) : systemId);

                    if (charStream != null) {
                        inputSource.setCharacterStream(charStream);
                    }
                    else if (byteStream != null) {
                        inputSource.setByteStream(byteStream);
                    }
                    else if (data != null && data.length() != 0) {
                        inputSource.setCharacterStream(new StringReader(data));
                    }
                    inputSource.setEncoding(encoding);
                    return inputSource;
                }
            }
            return null;
!!!4974466.java!!!	resolveEntity(inout publicId : String, inout systemId : String) : InputSource
            return resolveEntity(null, publicId, null, systemId);
!!!4974594.java!!!	resolveSystemId(inout systemId : String, inout baseURI : String) : String
            try {
                return XMLEntityManager.expandSystemId(systemId, baseURI, false);
            }
            // In the event that resolution failed against the
            // base URI, just return the system id as is. There's not
            // much else we can do.
            catch (URI.MalformedURIException ex) {
                return systemId;
            }
