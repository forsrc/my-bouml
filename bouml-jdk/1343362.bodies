class GradientPainter
!!!11141890.java!!!	GradientPainter(in count : int)
            super(count);
!!!11142018.java!!!	paint(inout c : Component, inout g : Graphics2D, inout gradient : List, in x : int, in y : int, in w : int, in h : int, inout isVertical : boolean) : void
            int imageWidth;
            int imageHeight;
            if (isVertical) {
                imageWidth = IMAGE_SIZE;
                imageHeight = h;
            }
            else {
                imageWidth = w;
                imageHeight = IMAGE_SIZE;
            }
            synchronized(c.getTreeLock()) {
                this.w = w;
                this.h = h;
                paint(c, g, x, y, imageWidth, imageHeight,
                      gradient, isVertical);
            }
!!!11142146.java!!!	paintToImage(inout c : Component, inout image : Image, inout g : Graphics, in w : int, in h : int, inout args : Object [[]]) : void
            Graphics2D g2 = (Graphics2D)g;
            java.util.List gradient = (java.util.List)args[0];
            boolean isVertical = ((Boolean)args[1]).booleanValue();
            // Render to the VolatileImage
            if (isVertical) {
                drawVerticalGradient(g2,
                                     ((Number)gradient.get(0)).floatValue(),
                                     ((Number)gradient.get(1)).floatValue(),
                                     (Color)gradient.get(2),
                                     (Color)gradient.get(3),
                                     (Color)gradient.get(4), w, h);
            }
            else {
                drawHorizontalGradient(g2,
                                      ((Number)gradient.get(0)).floatValue(),
                                      ((Number)gradient.get(1)).floatValue(),
                                      (Color)gradient.get(2),
                                      (Color)gradient.get(3),
                                      (Color)gradient.get(4), w, h);
            }
!!!11142274.java!!!	paintImage(inout c : Component, inout g : Graphics, in x : int, in y : int, in imageW : int, in imageH : int, inout image : Image, inout args : Object [[]]) : void
            boolean isVertical = ((Boolean)args[1]).booleanValue();
            // Render to the screen
            g.translate(x, y);
            if (isVertical) {
                for (int counter = 0; counter < w; counter += IMAGE_SIZE) {
                    int tileSize = Math.min(IMAGE_SIZE, w - counter);
                    g.drawImage(image, counter, 0, counter + tileSize, h,
                                0, 0, tileSize, h, null);
                }
            }
            else {
                for (int counter = 0; counter < h; counter += IMAGE_SIZE) {
                    int tileSize = Math.min(IMAGE_SIZE, h - counter);
                    g.drawImage(image, 0, counter, w, counter + tileSize,
                                0, 0, w, tileSize, null);
                }
            }
            g.translate(-x, -y);
!!!11142402.java!!!	drawVerticalGradient(inout g : Graphics2D, in ratio1 : float, in ratio2 : float, inout c1 : Color, inout c2 : Color, inout c3 : Color, in w : int, in h : int) : void
            int mid = (int)(ratio1 * h);
            int mid2 = (int)(ratio2 * h);
            if (mid > 0) {
                g.setPaint(getGradient((float)0, (float)0, c1, (float)0,
                                       (float)mid, c2));
                g.fillRect(0, 0, w, mid);
            }
            if (mid2 > 0) {
                g.setColor(c2);
                g.fillRect(0, mid, w, mid2);
            }
            if (mid > 0) {
                g.setPaint(getGradient((float)0, (float)mid + mid2, c2,
                                       (float)0, (float)mid * 2 + mid2, c1));
                g.fillRect(0, mid + mid2, w, mid);
            }
            if (h - mid * 2 - mid2 > 0) {
                g.setPaint(getGradient((float)0, (float)mid * 2 + mid2, c1,
                                       (float)0, (float)h, c3));
                g.fillRect(0, mid * 2 + mid2, w, h - mid * 2 - mid2);
            }
!!!11142530.java!!!	drawHorizontalGradient(inout g : Graphics2D, in ratio1 : float, in ratio2 : float, inout c1 : Color, inout c2 : Color, inout c3 : Color, in w : int, in h : int) : void
            int mid = (int)(ratio1 * w);
            int mid2 = (int)(ratio2 * w);
            if (mid > 0) {
                g.setPaint(getGradient((float)0, (float)0, c1,
                                       (float)mid, (float)0, c2));
                g.fillRect(0, 0, mid, h);
            }
            if (mid2 > 0) {
                g.setColor(c2);
                g.fillRect(mid, 0, mid2, h);
            }
            if (mid > 0) {
                g.setPaint(getGradient((float)mid + mid2, (float)0, c2,
                                       (float)mid * 2 + mid2, (float)0, c1));
                g.fillRect(mid + mid2, 0, mid, h);
            }
            if (w - mid * 2 - mid2 > 0) {
                g.setPaint(getGradient((float)mid * 2 + mid2, (float)0, c1,
                                       w, (float)0, c3));
                g.fillRect(mid * 2 + mid2, 0, w - mid * 2 - mid2, h);
            }
!!!11142658.java!!!	getGradient(in x1 : float, in y1 : float, inout c1 : Color, in x2 : float, in y2 : float, inout c2 : Color) : GradientPaint
            return new GradientPaint(x1, y1, c1, x2, y2, c2, true);
