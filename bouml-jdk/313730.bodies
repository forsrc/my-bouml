class IIOMetadata
!!!1703810.java!!!	IIOMetadata(inout standardMetadataFormatSupported : boolean, inout nativeMetadataFormatName : String, inout nativeMetadataFormatClassName : String, inout extraMetadataFormatNames : String [[]], inout extraMetadataFormatClassNames : String [[]])
        this.standardFormatSupported = standardMetadataFormatSupported;
        this.nativeMetadataFormatName = nativeMetadataFormatName;
        this.nativeMetadataFormatClassName = nativeMetadataFormatClassName;
        if (extraMetadataFormatNames != null) {
            if (extraMetadataFormatNames.length == 0) {
                throw new IllegalArgumentException
                    ("extraMetadataFormatNames.length == 0!");
            }
            if (extraMetadataFormatClassNames == null) {
                throw new IllegalArgumentException
                    ("extraMetadataFormatNames != null && extraMetadataFormatClassNames == null!");
            }
            if (extraMetadataFormatClassNames.length !=
                extraMetadataFormatNames.length) {
                throw new IllegalArgumentException
                    ("extraMetadataFormatClassNames.length != extraMetadataFormatNames.length!");
            }
            this.extraMetadataFormatNames =
                (String[]) extraMetadataFormatNames.clone();
            this.extraMetadataFormatClassNames =
                (String[]) extraMetadataFormatClassNames.clone();
        } else {
            if (extraMetadataFormatClassNames != null) {
                throw new IllegalArgumentException
                    ("extraMetadataFormatNames == null && extraMetadataFormatClassNames != null!");
            }
        }
!!!1703938.java!!!	isStandardMetadataFormatSupported() : boolean
        return standardFormatSupported;
!!!1704194.java!!!	getNativeMetadataFormatName() : String
        return nativeMetadataFormatName;
!!!1704322.java!!!	getExtraMetadataFormatNames() : String
        if (extraMetadataFormatNames == null) {
            return null;
        }
        return (String[])extraMetadataFormatNames.clone();
!!!1704450.java!!!	getMetadataFormatNames() : String
        String nativeName = getNativeMetadataFormatName();
        String standardName = isStandardMetadataFormatSupported() ?
            IIOMetadataFormatImpl.standardMetadataFormatName : null;
        String[] extraNames = getExtraMetadataFormatNames();

        int numFormats = 0;
        if (nativeName != null) {
            ++numFormats;
        }
        if (standardName != null) {
            ++numFormats;
        }
        if (extraNames != null) {
            numFormats += extraNames.length;
        }
        if (numFormats == 0) {
            return null;
        }

        String[] formats = new String[numFormats];
        int index = 0;
        if (nativeName != null) {
            formats[index++] = nativeName;
        }
        if (standardName != null) {
            formats[index++] = standardName;
        }
        if (extraNames != null) {
            for (int i = 0; i < extraNames.length; i++) {
                formats[index++] = extraNames[i];
            }
        }

        return formats;
!!!1704578.java!!!	getMetadataFormat(inout formatName : String) : IIOMetadataFormat
        if (formatName == null) {
            throw new IllegalArgumentException("formatName == null!");
        }
        if (standardFormatSupported
            && formatName.equals
                (IIOMetadataFormatImpl.standardMetadataFormatName)) {
            return IIOMetadataFormatImpl.getStandardFormatInstance();
        }
        String formatClassName = null;
        if (formatName.equals(nativeMetadataFormatName)) {
            formatClassName = nativeMetadataFormatClassName;
        } else if (extraMetadataFormatNames != null) {
            for (int i = 0; i < extraMetadataFormatNames.length; i++) {
                if (formatName.equals(extraMetadataFormatNames[i])) {
                    formatClassName = extraMetadataFormatClassNames[i];
                    break;  // out of for
                }
            }
        }
        if (formatClassName == null) {
            throw new IllegalArgumentException("Unsupported format name");
        }
        try {
            Class cls = null;
            final Object o = this;

            // firstly we try to use classloader used for loading
            // the IIOMetadata implemantation for this plugin.
            ClassLoader loader = (ClassLoader)
                java.security.AccessController.doPrivileged(
                    new java.security.PrivilegedAction() {
                            public Object run() {
                                return o.getClass().getClassLoader();
                            }
                        });

            try {
                cls = Class.forName(formatClassName, true,
                                    loader);
            } catch (ClassNotFoundException e) {
                // we failed to load IIOMetadataFormat class by
                // using IIOMetadata classloader.Next try is to
                // use thread context classloader.
                loader = (ClassLoader)
                    java.security.AccessController.doPrivileged(
                        new java.security.PrivilegedAction() {
                                public Object run() {
                                    return Thread.currentThread().getContextClassLoader();
                                }
                        });
                try {
                    cls = Class.forName(formatClassName, true,
                                        loader);
                } catch (ClassNotFoundException e1) {
                    // finally we try to use system classloader in case
                    // if we failed to load IIOMetadataFormat implementation
                    // class above.
                    cls = Class.forName(formatClassName, true,
                                        ClassLoader.getSystemClassLoader());
                }
            }

            Method meth = cls.getMethod("getInstance");
            return (IIOMetadataFormat) meth.invoke(null);
        } catch (Exception e) {
            RuntimeException ex =
                new IllegalStateException ("Can't obtain format");
            ex.initCause(e);
            throw ex;
        }

!!!1704962.java!!!	getStandardChromaNode() : IIOMetadataNode
        return null;
!!!1705090.java!!!	getStandardCompressionNode() : IIOMetadataNode
        return null;
!!!1705218.java!!!	getStandardDataNode() : IIOMetadataNode
        return null;
!!!1705346.java!!!	getStandardDimensionNode() : IIOMetadataNode
        return null;
!!!1705474.java!!!	getStandardDocumentNode() : IIOMetadataNode
        return null;
!!!1705602.java!!!	getStandardTextNode() : IIOMetadataNode
        return null;
!!!1705730.java!!!	getStandardTileNode() : IIOMetadataNode
        return null;
!!!1705858.java!!!	getStandardTransparencyNode() : IIOMetadataNode
        return null;
!!!1705986.java!!!	append(inout root : IIOMetadataNode, inout node : IIOMetadataNode) : void
        if (node != null) {
            root.appendChild(node);
        }
!!!1706114.java!!!	getStandardTree() : IIOMetadataNode
        IIOMetadataNode root = new IIOMetadataNode
                (IIOMetadataFormatImpl.standardMetadataFormatName);
        append(root, getStandardChromaNode());
        append(root, getStandardCompressionNode());
        append(root, getStandardDataNode());
        append(root, getStandardDimensionNode());
        append(root, getStandardDocumentNode());
        append(root, getStandardTextNode());
        append(root, getStandardTileNode());
        append(root, getStandardTransparencyNode());
        return root;
!!!1706242.java!!!	setFromTree(inout formatName : String, inout root : Node) : void
        reset();
        mergeTree(formatName, root);
!!!1706498.java!!!	setController(inout controller : IIOMetadataController) : void
        this.controller = controller;
!!!1706626.java!!!	getController() : IIOMetadataController
        return controller;
!!!1706754.java!!!	getDefaultController() : IIOMetadataController
        return defaultController;
!!!1706882.java!!!	hasController() : boolean
        return (getController() != null);
!!!1707010.java!!!	activateController() : boolean
        if (!hasController()) {
            throw new IllegalStateException("hasController() == false!");
        }
        return getController().activate(this);
