class OpenMBeanInfoSupport
!!!9890562.java!!!	OpenMBeanInfoSupport(inout className : String, inout description : String, inout openAttributes : OpenMBeanAttributeInfo [[]], inout openConstructors : OpenMBeanConstructorInfo [[]], inout openOperations : OpenMBeanOperationInfo [[]], inout notifications : MBeanNotificationInfo [[]])
        this(className, description,
             openAttributes, openConstructors, openOperations, notifications,
             (Descriptor) null);
!!!9890690.java!!!	OpenMBeanInfoSupport(inout className : String, inout description : String, inout openAttributes : OpenMBeanAttributeInfo [[]], inout openConstructors : OpenMBeanConstructorInfo [[]], inout openOperations : OpenMBeanOperationInfo [[]], inout notifications : MBeanNotificationInfo [[]], inout descriptor : Descriptor)
        super(className,
              description,
              attributeArray(openAttributes),
              constructorArray(openConstructors),
              operationArray(openOperations),
              (notifications == null) ? null : notifications.clone(),
              descriptor);
!!!9890818.java!!!	attributeArray(inout src : OpenMBeanAttributeInfo [[]]) : MBeanAttributeInfo
        if (src == null)
            return null;
        MBeanAttributeInfo[] dst = new MBeanAttributeInfo[src.length];
        System.arraycopy(src, 0, dst, 0, src.length);
        // may throw an ArrayStoreException
        return dst;
!!!9890946.java!!!	constructorArray(inout src : OpenMBeanConstructorInfo [[]]) : MBeanConstructorInfo
        if (src == null)
            return null;
        MBeanConstructorInfo[] dst = new MBeanConstructorInfo[src.length];
        System.arraycopy(src, 0, dst, 0, src.length);
        // may throw an ArrayStoreException
        return dst;
!!!9891074.java!!!	operationArray(inout src : OpenMBeanOperationInfo [[]]) : MBeanOperationInfo
        if (src == null)
            return null;
        MBeanOperationInfo[] dst = new MBeanOperationInfo[src.length];
        System.arraycopy(src, 0, dst, 0, src.length);
        return dst;
!!!9891202.java!!!	equals(inout obj : Object) : boolean

        // if obj is null, return false
        //
        if (obj == null) {
            return false;
        }

        // if obj is not a OpenMBeanInfo, return false
        //
        OpenMBeanInfo other;
        try {
            other = (OpenMBeanInfo) obj;
        } catch (ClassCastException e) {
            return false;
        }

        // Now, really test for equality between this OpenMBeanInfo
        // implementation and the other:
        //

        // their MBean className should be equal
        if (!Objects.equals(this.getClassName(), other.getClassName())) {
            return false;
        }

        // their infos on attributes should be equal (order not
        // significant => equality between sets, not arrays or lists)
        if (!sameArrayContents(this.getAttributes(), other.getAttributes()))
            return false;

        // their infos on constructors should be equal (order not
        // significant => equality between sets, not arrays or lists)
        if (!sameArrayContents(this.getConstructors(), other.getConstructors()))
            return false;

        // their infos on operations should be equal (order not
        // significant => equality between sets, not arrays or lists)
        if (!sameArrayContents(this.getOperations(), other.getOperations()))

            return false;

        // their infos on notifications should be equal (order not
        // significant => equality between sets, not arrays or lists)
        if (!sameArrayContents(this.getNotifications(), other.getNotifications()))
            return false;

        // All tests for equality were successful
        //
        return true;
!!!9891330.java!!!	sameArrayContents(inout a1 : T [[]], inout a2 : T [[]]) : boolean
        return (new HashSet<T>(Arrays.asList(a1))
                .equals(new HashSet<T>(Arrays.asList(a2))));
!!!9891458.java!!!	hashCode() : int

        // Calculate the hash code value if it has not yet been done
        // (ie 1st call to hashCode())
        //
        if (myHashCode == null) {
            int value = 0;
            if (this.getClassName() != null) {
                value += this.getClassName().hashCode();
            }
            value += arraySetHash(this.getAttributes());
            value += arraySetHash(this.getConstructors());
            value += arraySetHash(this.getOperations());
            value += arraySetHash(this.getNotifications());
            myHashCode = Integer.valueOf(value);
        }

        // return always the same hash code for this instance (immutable)
        //
        return myHashCode.intValue();
!!!9891586.java!!!	arraySetHash(inout a : T [[]]) : int
        return new HashSet<T>(Arrays.asList(a)).hashCode();
!!!9891714.java!!!	toString() : String

        // Calculate the string value if it has not yet been done (ie
        // 1st call to toString())
        //
        if (myToString == null) {
            myToString = new StringBuilder()
                .append(this.getClass().getName())
                .append("(mbean_class_name=")
                .append(this.getClassName())
                .append(",attributes=")
                .append(Arrays.asList(this.getAttributes()).toString())
                .append(",constructors=")
                .append(Arrays.asList(this.getConstructors()).toString())
                .append(",operations=")
                .append(Arrays.asList(this.getOperations()).toString())
                .append(",notifications=")
                .append(Arrays.asList(this.getNotifications()).toString())
                .append(",descriptor=")
                .append(this.getDescriptor())
                .append(")")
                .toString();
        }

        // return always the same string representation for this
        // instance (immutable)
        //
        return myToString;
