class Character
!!!6584066.java!!!	Character(in value : char)
        this.value = value;
!!!6584322.java!!!	valueOf(in c : char) : Character
        if (c <= 127) { // must cache
            return CharacterCache.cache[(int)c];
        }
        return new Character(c);
!!!6584450.java!!!	charValue() : char
        return value;
!!!6584578.java!!!	hashCode() : int
        return Character.hashCode(value);
!!!6584706.java!!!	hashCode(in value : char) : int
        return (int)value;
!!!6584834.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof Character) {
            return value == ((Character)obj).charValue();
        }
        return false;
!!!6584962.java!!!	toString() : String
        char buf[] = {value};
        return String.valueOf(buf);
!!!6585090.java!!!	toString(in c : char) : String
        return String.valueOf(c);
!!!6585218.java!!!	isValidCodePoint(in codePoint : int) : boolean
        // Optimized form of:
        //     codePoint >= MIN_CODE_POINT && codePoint <= MAX_CODE_POINT
        int plane = codePoint >>> 16;
        return plane < ((MAX_CODE_POINT + 1) >>> 16);
!!!6585346.java!!!	isBmpCodePoint(in codePoint : int) : boolean
        return codePoint >>> 16 == 0;
        // Optimized form of:
        //     codePoint >= MIN_VALUE && codePoint <= MAX_VALUE
        // We consistently use logical shift (>>>) to facilitate
        // additional runtime optimizations.
!!!6585474.java!!!	isSupplementaryCodePoint(in codePoint : int) : boolean
        return codePoint >= MIN_SUPPLEMENTARY_CODE_POINT
            && codePoint <  MAX_CODE_POINT + 1;
!!!6585602.java!!!	isHighSurrogate(in ch : char) : boolean
        // Help VM constant-fold; MAX_HIGH_SURROGATE + 1 == MIN_LOW_SURROGATE
        return ch >= MIN_HIGH_SURROGATE && ch < (MAX_HIGH_SURROGATE + 1);
!!!6585730.java!!!	isLowSurrogate(in ch : char) : boolean
        return ch >= MIN_LOW_SURROGATE && ch < (MAX_LOW_SURROGATE + 1);
!!!6585858.java!!!	isSurrogate(in ch : char) : boolean
        return ch >= MIN_SURROGATE && ch < (MAX_SURROGATE + 1);
!!!6585986.java!!!	isSurrogatePair(in high : char, in low : char) : boolean
        return isHighSurrogate(high) && isLowSurrogate(low);
!!!6586114.java!!!	charCount(in codePoint : int) : int
        return codePoint >= MIN_SUPPLEMENTARY_CODE_POINT ? 2 : 1;
!!!6586242.java!!!	toCodePoint(in high : char, in low : char) : int
        // Optimized form of:
        // return ((high - MIN_HIGH_SURROGATE) << 10)
        //         + (low - MIN_LOW_SURROGATE)
        //         + MIN_SUPPLEMENTARY_CODE_POINT;
        return ((high << 10) + low) + (MIN_SUPPLEMENTARY_CODE_POINT
                                       - (MIN_HIGH_SURROGATE << 10)
                                       - MIN_LOW_SURROGATE);
!!!6586370.java!!!	codePointAt(inout seq : CharSequence, in index : int) : int
        char c1 = seq.charAt(index);
        if (isHighSurrogate(c1) && ++index < seq.length()) {
            char c2 = seq.charAt(index);
            if (isLowSurrogate(c2)) {
                return toCodePoint(c1, c2);
            }
        }
        return c1;
!!!6586498.java!!!	codePointAt(inout a : char [[]], in index : int) : int
        return codePointAtImpl(a, index, a.length);
!!!6586626.java!!!	codePointAt(inout a : char [[]], in index : int, in limit : int) : int
        if (index >= limit || limit < 0 || limit > a.length) {
            throw new IndexOutOfBoundsException();
        }
        return codePointAtImpl(a, index, limit);
!!!6586754.java!!!	codePointAtImpl(inout a : char [[]], in index : int, in limit : int) : int
        char c1 = a[index];
        if (isHighSurrogate(c1) && ++index < limit) {
            char c2 = a[index];
            if (isLowSurrogate(c2)) {
                return toCodePoint(c1, c2);
            }
        }
        return c1;
!!!6586882.java!!!	codePointBefore(inout seq : CharSequence, in index : int) : int
        char c2 = seq.charAt(--index);
        if (isLowSurrogate(c2) && index > 0) {
            char c1 = seq.charAt(--index);
            if (isHighSurrogate(c1)) {
                return toCodePoint(c1, c2);
            }
        }
        return c2;
!!!6587010.java!!!	codePointBefore(inout a : char [[]], in index : int) : int
        return codePointBeforeImpl(a, index, 0);
!!!6587138.java!!!	codePointBefore(inout a : char [[]], in index : int, in start : int) : int
        if (index <= start || start < 0 || start >= a.length) {
            throw new IndexOutOfBoundsException();
        }
        return codePointBeforeImpl(a, index, start);
!!!6587266.java!!!	codePointBeforeImpl(inout a : char [[]], in index : int, in start : int) : int
        char c2 = a[--index];
        if (isLowSurrogate(c2) && index > start) {
            char c1 = a[--index];
            if (isHighSurrogate(c1)) {
                return toCodePoint(c1, c2);
            }
        }
        return c2;
!!!6587394.java!!!	highSurrogate(in codePoint : int) : char
        return (char) ((codePoint >>> 10)
            + (MIN_HIGH_SURROGATE - (MIN_SUPPLEMENTARY_CODE_POINT >>> 10)));
!!!6587522.java!!!	lowSurrogate(in codePoint : int) : char
        return (char) ((codePoint & 0x3ff) + MIN_LOW_SURROGATE);
!!!6587650.java!!!	toChars(in codePoint : int, inout dst : char [[]], in dstIndex : int) : int
        if (isBmpCodePoint(codePoint)) {
            dst[dstIndex] = (char) codePoint;
            return 1;
        } else if (isValidCodePoint(codePoint)) {
            toSurrogates(codePoint, dst, dstIndex);
            return 2;
        } else {
            throw new IllegalArgumentException();
        }
!!!6587778.java!!!	toChars(in codePoint : int) : char
        if (isBmpCodePoint(codePoint)) {
            return new char[] { (char) codePoint };
        } else if (isValidCodePoint(codePoint)) {
            char[] result = new char[2];
            toSurrogates(codePoint, result, 0);
            return result;
        } else {
            throw new IllegalArgumentException();
        }
!!!6587906.java!!!	toSurrogates(in codePoint : int, inout dst : char [[]], in index : int) : void
        // We write elements "backwards" to guarantee all-or-nothing
        dst[index+1] = lowSurrogate(codePoint);
        dst[index] = highSurrogate(codePoint);
!!!6588034.java!!!	codePointCount(inout seq : CharSequence, in beginIndex : int, in endIndex : int) : int
        int length = seq.length();
        if (beginIndex < 0 || endIndex > length || beginIndex > endIndex) {
            throw new IndexOutOfBoundsException();
        }
        int n = endIndex - beginIndex;
        for (int i = beginIndex; i < endIndex; ) {
            if (isHighSurrogate(seq.charAt(i++)) && i < endIndex &&
                isLowSurrogate(seq.charAt(i))) {
                n--;
                i++;
            }
        }
        return n;
!!!6588162.java!!!	codePointCount(inout a : char [[]], in offset : int, in count : int) : int
        if (count > a.length - offset || offset < 0 || count < 0) {
            throw new IndexOutOfBoundsException();
        }
        return codePointCountImpl(a, offset, count);
!!!6588290.java!!!	codePointCountImpl(inout a : char [[]], in offset : int, in count : int) : int
        int endIndex = offset + count;
        int n = count;
        for (int i = offset; i < endIndex; ) {
            if (isHighSurrogate(a[i++]) && i < endIndex &&
                isLowSurrogate(a[i])) {
                n--;
                i++;
            }
        }
        return n;
!!!6588418.java!!!	offsetByCodePoints(inout seq : CharSequence, in index : int, in codePointOffset : int) : int
        int length = seq.length();
        if (index < 0 || index > length) {
            throw new IndexOutOfBoundsException();
        }

        int x = index;
        if (codePointOffset >= 0) {
            int i;
            for (i = 0; x < length && i < codePointOffset; i++) {
                if (isHighSurrogate(seq.charAt(x++)) && x < length &&
                    isLowSurrogate(seq.charAt(x))) {
                    x++;
                }
            }
            if (i < codePointOffset) {
                throw new IndexOutOfBoundsException();
            }
        } else {
            int i;
            for (i = codePointOffset; x > 0 && i < 0; i++) {
                if (isLowSurrogate(seq.charAt(--x)) && x > 0 &&
                    isHighSurrogate(seq.charAt(x-1))) {
                    x--;
                }
            }
            if (i < 0) {
                throw new IndexOutOfBoundsException();
            }
        }
        return x;
!!!6588546.java!!!	offsetByCodePoints(inout a : char [[]], in start : int, in count : int, in index : int, in codePointOffset : int) : int
        if (count > a.length-start || start < 0 || count < 0
            || index < start || index > start+count) {
            throw new IndexOutOfBoundsException();
        }
        return offsetByCodePointsImpl(a, start, count, index, codePointOffset);
!!!6588674.java!!!	offsetByCodePointsImpl(inout a : char [[]], in start : int, in count : int, in index : int, in codePointOffset : int) : int
        int x = index;
        if (codePointOffset >= 0) {
            int limit = start + count;
            int i;
            for (i = 0; x < limit && i < codePointOffset; i++) {
                if (isHighSurrogate(a[x++]) && x < limit &&
                    isLowSurrogate(a[x])) {
                    x++;
                }
            }
            if (i < codePointOffset) {
                throw new IndexOutOfBoundsException();
            }
        } else {
            int i;
            for (i = codePointOffset; x > start && i < 0; i++) {
                if (isLowSurrogate(a[--x]) && x > start &&
                    isHighSurrogate(a[x-1])) {
                    x--;
                }
            }
            if (i < 0) {
                throw new IndexOutOfBoundsException();
            }
        }
        return x;
!!!6588802.java!!!	isLowerCase(in ch : char) : boolean
        return isLowerCase((int)ch);
!!!6588930.java!!!	isLowerCase(in codePoint : int) : boolean
        return getType(codePoint) == Character.LOWERCASE_LETTER ||
               CharacterData.of(codePoint).isOtherLowercase(codePoint);
!!!6589058.java!!!	isUpperCase(in ch : char) : boolean
        return isUpperCase((int)ch);
!!!6589186.java!!!	isUpperCase(in codePoint : int) : boolean
        return getType(codePoint) == Character.UPPERCASE_LETTER ||
               CharacterData.of(codePoint).isOtherUppercase(codePoint);
!!!6589314.java!!!	isTitleCase(in ch : char) : boolean
        return isTitleCase((int)ch);
!!!6589442.java!!!	isTitleCase(in codePoint : int) : boolean
        return getType(codePoint) == Character.TITLECASE_LETTER;
!!!6589570.java!!!	isDigit(in ch : char) : boolean
        return isDigit((int)ch);
!!!6589698.java!!!	isDigit(in codePoint : int) : boolean
        return getType(codePoint) == Character.DECIMAL_DIGIT_NUMBER;
!!!6589826.java!!!	isDefined(in ch : char) : boolean
        return isDefined((int)ch);
!!!6589954.java!!!	isDefined(in codePoint : int) : boolean
        return getType(codePoint) != Character.UNASSIGNED;
!!!6590082.java!!!	isLetter(in ch : char) : boolean
        return isLetter((int)ch);
!!!6590210.java!!!	isLetter(in codePoint : int) : boolean
        return ((((1 << Character.UPPERCASE_LETTER) |
            (1 << Character.LOWERCASE_LETTER) |
            (1 << Character.TITLECASE_LETTER) |
            (1 << Character.MODIFIER_LETTER) |
            (1 << Character.OTHER_LETTER)) >> getType(codePoint)) & 1)
            != 0;
!!!6590338.java!!!	isLetterOrDigit(in ch : char) : boolean
        return isLetterOrDigit((int)ch);
!!!6590466.java!!!	isLetterOrDigit(in codePoint : int) : boolean
        return ((((1 << Character.UPPERCASE_LETTER) |
            (1 << Character.LOWERCASE_LETTER) |
            (1 << Character.TITLECASE_LETTER) |
            (1 << Character.MODIFIER_LETTER) |
            (1 << Character.OTHER_LETTER) |
            (1 << Character.DECIMAL_DIGIT_NUMBER)) >> getType(codePoint)) & 1)
            != 0;
!!!6590594.java!!!	isJavaLetter(in ch : char) : boolean
        return isJavaIdentifierStart(ch);
!!!6590722.java!!!	isJavaLetterOrDigit(in ch : char) : boolean
        return isJavaIdentifierPart(ch);
!!!6590850.java!!!	isAlphabetic(in codePoint : int) : boolean
        return (((((1 << Character.UPPERCASE_LETTER) |
            (1 << Character.LOWERCASE_LETTER) |
            (1 << Character.TITLECASE_LETTER) |
            (1 << Character.MODIFIER_LETTER) |
            (1 << Character.OTHER_LETTER) |
            (1 << Character.LETTER_NUMBER)) >> getType(codePoint)) & 1) != 0) ||
            CharacterData.of(codePoint).isOtherAlphabetic(codePoint);
!!!6590978.java!!!	isIdeographic(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isIdeographic(codePoint);
!!!6591106.java!!!	isJavaIdentifierStart(in ch : char) : boolean
        return isJavaIdentifierStart((int)ch);
!!!6591234.java!!!	isJavaIdentifierStart(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isJavaIdentifierStart(codePoint);
!!!6591362.java!!!	isJavaIdentifierPart(in ch : char) : boolean
        return isJavaIdentifierPart((int)ch);
!!!6591490.java!!!	isJavaIdentifierPart(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isJavaIdentifierPart(codePoint);
!!!6591618.java!!!	isUnicodeIdentifierStart(in ch : char) : boolean
        return isUnicodeIdentifierStart((int)ch);
!!!6591746.java!!!	isUnicodeIdentifierStart(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isUnicodeIdentifierStart(codePoint);
!!!6591874.java!!!	isUnicodeIdentifierPart(in ch : char) : boolean
        return isUnicodeIdentifierPart((int)ch);
!!!6592002.java!!!	isUnicodeIdentifierPart(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isUnicodeIdentifierPart(codePoint);
!!!6592130.java!!!	isIdentifierIgnorable(in ch : char) : boolean
        return isIdentifierIgnorable((int)ch);
!!!6592258.java!!!	isIdentifierIgnorable(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);
!!!6592386.java!!!	toLowerCase(in ch : char) : char
        return (char)toLowerCase((int)ch);
!!!6592514.java!!!	toLowerCase(in codePoint : int) : int
        return CharacterData.of(codePoint).toLowerCase(codePoint);
!!!6592642.java!!!	toUpperCase(in ch : char) : char
        return (char)toUpperCase((int)ch);
!!!6592770.java!!!	toUpperCase(in codePoint : int) : int
        return CharacterData.of(codePoint).toUpperCase(codePoint);
!!!6592898.java!!!	toTitleCase(in ch : char) : char
        return (char)toTitleCase((int)ch);
!!!6593026.java!!!	toTitleCase(in codePoint : int) : int
        return CharacterData.of(codePoint).toTitleCase(codePoint);
!!!6593154.java!!!	digit(in ch : char, in radix : int) : int
        return digit((int)ch, radix);
!!!6593282.java!!!	digit(in codePoint : int, in radix : int) : int
        return CharacterData.of(codePoint).digit(codePoint, radix);
!!!6593410.java!!!	getNumericValue(in ch : char) : int
        return getNumericValue((int)ch);
!!!6593538.java!!!	getNumericValue(in codePoint : int) : int
        return CharacterData.of(codePoint).getNumericValue(codePoint);
!!!6593666.java!!!	isSpace(in ch : char) : boolean
        return (ch <= 0x0020) &&
            (((((1L << 0x0009) |
            (1L << 0x000A) |
            (1L << 0x000C) |
            (1L << 0x000D) |
            (1L << 0x0020)) >> ch) & 1L) != 0);
!!!6593794.java!!!	isSpaceChar(in ch : char) : boolean
        return isSpaceChar((int)ch);
!!!6593922.java!!!	isSpaceChar(in codePoint : int) : boolean
        return ((((1 << Character.SPACE_SEPARATOR) |
                  (1 << Character.LINE_SEPARATOR) |
                  (1 << Character.PARAGRAPH_SEPARATOR)) >> getType(codePoint)) & 1)
            != 0;
!!!6594050.java!!!	isWhitespace(in ch : char) : boolean
        return isWhitespace((int)ch);
!!!6594178.java!!!	isWhitespace(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isWhitespace(codePoint);
!!!6594306.java!!!	isISOControl(in ch : char) : boolean
        return isISOControl((int)ch);
!!!6594434.java!!!	isISOControl(in codePoint : int) : boolean
        // Optimized form of:
        //     (codePoint >= 0x00 && codePoint <= 0x1F) ||
        //     (codePoint >= 0x7F && codePoint <= 0x9F);
        return codePoint <= 0x9F &&
            (codePoint >= 0x7F || (codePoint >>> 5 == 0));
!!!6594562.java!!!	getType(in ch : char) : int
        return getType((int)ch);
!!!6594690.java!!!	getType(in codePoint : int) : int
        return CharacterData.of(codePoint).getType(codePoint);
!!!6594818.java!!!	forDigit(in digit : int, in radix : int) : char
        if ((digit >= radix) || (digit < 0)) {
            return '\0';
        }
        if ((radix < Character.MIN_RADIX) || (radix > Character.MAX_RADIX)) {
            return '\0';
        }
        if (digit < 10) {
            return (char)('0' + digit);
        }
        return (char)('a' - 10 + digit);
!!!6594946.java!!!	getDirectionality(in ch : char) : byte
        return getDirectionality((int)ch);
!!!6595074.java!!!	getDirectionality(in codePoint : int) : byte
        return CharacterData.of(codePoint).getDirectionality(codePoint);
!!!6595202.java!!!	isMirrored(in ch : char) : boolean
        return isMirrored((int)ch);
!!!6595330.java!!!	isMirrored(in codePoint : int) : boolean
        return CharacterData.of(codePoint).isMirrored(codePoint);
!!!6595458.java!!!	compareTo(inout anotherCharacter : Character) : int
        return compare(this.value, anotherCharacter.value);
!!!6595586.java!!!	compare(in x : char, in y : char) : int
        return x - y;
!!!6595714.java!!!	toUpperCaseEx(in codePoint : int) : int
        assert isValidCodePoint(codePoint);
        return CharacterData.of(codePoint).toUpperCaseEx(codePoint);
!!!6595842.java!!!	toUpperCaseCharArray(in codePoint : int) : char
        // As of Unicode 6.0, 1:M uppercasings only happen in the BMP.
        assert isBmpCodePoint(codePoint);
        return CharacterData.of(codePoint).toUpperCaseCharArray(codePoint);
!!!6595970.java!!!	reverseBytes(in ch : char) : char
        return (char) (((ch & 0xFF00) >> 8) | (ch << 8));
!!!6596098.java!!!	getName(in codePoint : int) : String
        if (!isValidCodePoint(codePoint)) {
            throw new IllegalArgumentException();
        }
        String name = CharacterName.get(codePoint);
        if (name != null)
            return name;
        if (getType(codePoint) == UNASSIGNED)
            return null;
        UnicodeBlock block = UnicodeBlock.of(codePoint);
        if (block != null)
            return block.toString().replace('_', ' ') + " "
                   + Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH);
        // should never come here
        return Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH);
