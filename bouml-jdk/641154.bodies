class SAX2DOM
!!!4095362.java!!!	SAX2DOM(inout useServicesMechanism : boolean)
        _document = createDocument(useServicesMechanism);
        _root = _document;
!!!4095490.java!!!	SAX2DOM(inout root : Node, inout nextSibling : Node, inout useServicesMechanism : boolean)
        _root = root;
        if (root instanceof Document) {
          _document = (Document)root;
        }
        else if (root != null) {
          _document = root.getOwnerDocument();
        }
        else {
          _document = createDocument(useServicesMechanism);
          _root = _document;
        }

        _nextSibling = nextSibling;
!!!4095618.java!!!	SAX2DOM(inout root : Node, inout useServicesMechanism : boolean)
        this(root, null, useServicesMechanism);
!!!4095746.java!!!	getDOM() : Node
        return _root;
!!!4095874.java!!!	characters(inout ch : char [[]], in start : int, in length : int) : void
        // Ignore text nodes of length 0
        if (length == 0) {
            return;
        }

        final Node last = (Node)_nodeStk.peek();

        // No text nodes can be children of root (DOM006 exception)
        if (last != _document) {
            _nextSiblingCache = _nextSibling;
            _textBuffer.append(ch, start, length);
        }
!!!4096002.java!!!	appendTextNode() : void
        if (_textBuffer.length() > 0) {
            final Node last = (Node)_nodeStk.peek();
            if (last == _root && _nextSiblingCache != null) {
                _lastSibling = last.insertBefore(_document.createTextNode(_textBuffer.toString()), _nextSiblingCache);
            }
            else {
                _lastSibling = last.appendChild(_document.createTextNode(_textBuffer.toString()));
            }
            _textBuffer.setLength(0);
        }
!!!4096130.java!!!	startDocument() : void
        _nodeStk.push(_root);
!!!4096258.java!!!	endDocument() : void
        _nodeStk.pop();
!!!4096386.java!!!	setDocumentInfo() : void
        //try to set document version
        if (locator == null) return;
        try{
            _document.setXmlVersion(((Locator2)locator).getXMLVersion());
        }catch(ClassCastException e){}

!!!4096514.java!!!	startElement(inout namespace : String, inout localName : String, inout qName : String, inout attrs : Attributes) : void
        appendTextNode();
        if (needToSetDocumentInfo) {
            setDocumentInfo();
            needToSetDocumentInfo = false;
        }

        final Element tmp = (Element)_document.createElementNS(namespace, qName);

        // Add namespace declarations first
        if (_namespaceDecls != null) {
            final int nDecls = _namespaceDecls.size();
            for (int i = 0; i < nDecls; i++) {
                final String prefix = (String) _namespaceDecls.elementAt(i++);

                if (prefix == null || prefix.equals(EMPTYSTRING)) {
                    tmp.setAttributeNS(XMLNS_URI, XMLNS_PREFIX,
                        (String) _namespaceDecls.elementAt(i));
                }
                else {
                    tmp.setAttributeNS(XMLNS_URI, XMLNS_STRING + prefix,
                        (String) _namespaceDecls.elementAt(i));
                }
            }
            _namespaceDecls.clear();
        }

        // Add attributes to element
/*      final int nattrs = attrs.getLength();
        for (int i = 0; i < nattrs; i++) {
            if (attrs.getLocalName(i) == null) {
                tmp.setAttribute(attrs.getQName(i), attrs.getValue(i));
            }
            else {
                tmp.setAttributeNS(attrs.getURI(i), attrs.getQName(i),
                    attrs.getValue(i));
            }
        } */


        // Add attributes to element
        final int nattrs = attrs.getLength();
        for (int i = 0; i < nattrs; i++) {
            // checking if Namespace processing is being done
            String attQName = attrs.getQName(i);
            String attURI = attrs.getURI(i);
            if (attrs.getLocalName(i).equals("")) {
                tmp.setAttribute(attQName, attrs.getValue(i));
                if (attrs.getType(i).equals("ID")) {
                    tmp.setIdAttribute(attQName, true);
                }
            } else {
                tmp.setAttributeNS(attURI, attQName, attrs.getValue(i));
                if (attrs.getType(i).equals("ID")) {
                    tmp.setIdAttributeNS(attURI, attrs.getLocalName(i), true);
                }
            }
        }


        // Append this new node onto current stack node
        Node last = (Node)_nodeStk.peek();

        // If the SAX2DOM is created with a non-null next sibling node,
        // insert the result nodes before the next sibling under the root.
        if (last == _root && _nextSibling != null)
            last.insertBefore(tmp, _nextSibling);
        else
            last.appendChild(tmp);

        // Push this node onto stack
        _nodeStk.push(tmp);
        _lastSibling = null;
!!!4096642.java!!!	endElement(inout namespace : String, inout localName : String, inout qName : String) : void
        appendTextNode();
        _nodeStk.pop();
        _lastSibling = null;
!!!4096770.java!!!	startPrefixMapping(inout prefix : String, inout uri : String) : void
        if (_namespaceDecls == null) {
            _namespaceDecls = new Vector(2);
        }
        _namespaceDecls.addElement(prefix);
        _namespaceDecls.addElement(uri);
!!!4096898.java!!!	endPrefixMapping(inout prefix : String) : void
        // do nothing
!!!4097154.java!!!	processingInstruction(inout target : String, inout data : String) : void
        appendTextNode();
        final Node last = (Node)_nodeStk.peek();
        ProcessingInstruction pi = _document.createProcessingInstruction(
                target, data);
        if (pi != null){
          if (last == _root && _nextSibling != null)
              last.insertBefore(pi, _nextSibling);
          else
              last.appendChild(pi);

          _lastSibling = pi;
        }
!!!4097282.java!!!	setDocumentLocator(inout locator : Locator) : void
        this.locator = locator;
!!!4097538.java!!!	comment(inout ch : char [[]], in start : int, in length : int) : void
        appendTextNode();
        final Node last = (Node)_nodeStk.peek();
        Comment comment = _document.createComment(new String(ch,start,length));
        if (comment != null){
          if (last == _root && _nextSibling != null)
              last.insertBefore(comment, _nextSibling);
          else
              last.appendChild(comment);

          _lastSibling = comment;
        }
!!!4098434.java!!!	createDocument(inout useServicesMechanism : boolean) : Document
        if (_factory == null) {
            if (useServicesMechanism) {
                _factory = DocumentBuilderFactory.newInstance();
                if (!(_factory instanceof com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl)) {
                    _internal = false;
                }
            } else {
                _factory = DocumentBuilderFactory.newInstance(
                  "com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl",
                  SAX2DOM.class.getClassLoader()
                  );
            }
        }
        Document doc;
        if (_internal) {
            //default implementation is thread safe
            doc = _factory.newDocumentBuilder().newDocument();
        } else {
            synchronized(SAX2DOM.class) {
                doc = _factory.newDocumentBuilder().newDocument();
            }
        }
        return doc;
