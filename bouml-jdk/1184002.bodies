class ElementKindVisitor6
!!!9718914.java!!!	ElementKindVisitor6()
        super(null);
!!!9719042.java!!!	ElementKindVisitor6(inout defaultValue : R)
        super(defaultValue);
!!!9719170.java!!!	visitPackage(inout e : PackageElement, inout p : P) : R
        assert e.getKind() == PACKAGE: "Bad kind on PackageElement";
        return defaultAction(e, p);
!!!9719298.java!!!	visitType(inout e : TypeElement, inout p : P) : R
        ElementKind k = e.getKind();
        switch(k) {
        case ANNOTATION_TYPE:
            return visitTypeAsAnnotationType(e, p);

        case CLASS:
            return visitTypeAsClass(e, p);

        case ENUM:
            return visitTypeAsEnum(e, p);

        case INTERFACE:
            return visitTypeAsInterface(e, p);

        default:
            throw new AssertionError("Bad kind " + k + " for TypeElement" + e);
        }
!!!9719426.java!!!	visitTypeAsAnnotationType(inout e : TypeElement, inout p : P) : R
        return defaultAction(e, p);
!!!9719554.java!!!	visitTypeAsClass(inout e : TypeElement, inout p : P) : R
        return defaultAction(e, p);
!!!9719682.java!!!	visitTypeAsEnum(inout e : TypeElement, inout p : P) : R
        return defaultAction(e, p);
!!!9719810.java!!!	visitTypeAsInterface(inout e : TypeElement, inout p : P) : R
        return defaultAction(e, p);
!!!9719938.java!!!	visitVariable(inout e : VariableElement, inout p : P) : R
        ElementKind k = e.getKind();
        switch(k) {
        case ENUM_CONSTANT:
            return visitVariableAsEnumConstant(e, p);

        case EXCEPTION_PARAMETER:
            return visitVariableAsExceptionParameter(e, p);

        case FIELD:
            return visitVariableAsField(e, p);

        case LOCAL_VARIABLE:
            return visitVariableAsLocalVariable(e, p);

        case PARAMETER:
            return visitVariableAsParameter(e, p);

        case RESOURCE_VARIABLE:
            return visitVariableAsResourceVariable(e, p);

        default:
            throw new AssertionError("Bad kind " + k + " for VariableElement" + e);
        }
!!!9720066.java!!!	visitVariableAsEnumConstant(inout e : VariableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9720194.java!!!	visitVariableAsExceptionParameter(inout e : VariableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9720322.java!!!	visitVariableAsField(inout e : VariableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9720450.java!!!	visitVariableAsLocalVariable(inout e : VariableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9720578.java!!!	visitVariableAsParameter(inout e : VariableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9720706.java!!!	visitVariableAsResourceVariable(inout e : VariableElement, inout p : P) : R
        return visitUnknown(e, p);
!!!9720834.java!!!	visitExecutable(inout e : ExecutableElement, inout p : P) : R
        ElementKind k = e.getKind();
        switch(k) {
        case CONSTRUCTOR:
            return visitExecutableAsConstructor(e, p);

        case INSTANCE_INIT:
            return visitExecutableAsInstanceInit(e, p);

        case METHOD:
            return visitExecutableAsMethod(e, p);

        case STATIC_INIT:
            return visitExecutableAsStaticInit(e, p);

        default:
            throw new AssertionError("Bad kind " + k + " for ExecutableElement" + e);
        }
!!!9720962.java!!!	visitExecutableAsConstructor(inout e : ExecutableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9721090.java!!!	visitExecutableAsInstanceInit(inout e : ExecutableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9721218.java!!!	visitExecutableAsMethod(inout e : ExecutableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9721346.java!!!	visitExecutableAsStaticInit(inout e : ExecutableElement, inout p : P) : R
        return defaultAction(e, p);
!!!9721474.java!!!	visitTypeParameter(inout e : TypeParameterElement, inout p : P) : R
        assert e.getKind() == TYPE_PARAMETER: "Bad kind on TypeParameterElement";
        return defaultAction(e, p);
