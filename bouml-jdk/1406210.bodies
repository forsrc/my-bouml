class DatatypeConverterImpl
!!!11947522.java!!!	parseString(inout lexicalXSDString : String) : String
        return lexicalXSDString;
!!!11947650.java!!!	parseInteger(inout lexicalXSDInteger : String) : BigInteger
        return _parseInteger(lexicalXSDInteger);
!!!11947778.java!!!	_parseInteger(inout s : CharSequence) : BigInteger
        return new BigInteger(removeOptionalPlus(WhiteSpaceProcessor.trim(s)).toString());
!!!11947906.java!!!	printInteger(inout val : BigInteger) : String
        return _printInteger(val);
!!!11948034.java!!!	_printInteger(inout val : BigInteger) : String
        return val.toString();
!!!11948162.java!!!	parseInt(inout s : String) : int
        return _parseInt(s);
!!!11948290.java!!!	_parseInt(inout s : CharSequence) : int
        int len = s.length();
        int sign = 1;

        int r = 0;

        for (int i = 0; i < len; i++) {
            char ch = s.charAt(i);
            if (WhiteSpaceProcessor.isWhiteSpace(ch)) {
                // skip whitespace
            } else if ('0' <= ch && ch <= '9') {
                r = r * 10 + (ch - '0');
            } else if (ch == '-') {
                sign = -1;
            } else if (ch == '+') {
                // noop
            } else {
                throw new NumberFormatException("Not a number: " + s);
            }
        }

        return r * sign;
!!!11948418.java!!!	parseLong(inout lexicalXSLong : String) : long
        return _parseLong(lexicalXSLong);
!!!11948546.java!!!	_parseLong(inout s : CharSequence) : long
        return Long.valueOf(removeOptionalPlus(WhiteSpaceProcessor.trim(s)).toString());
!!!11948674.java!!!	parseShort(inout lexicalXSDShort : String) : short
        return _parseShort(lexicalXSDShort);
!!!11948802.java!!!	_parseShort(inout s : CharSequence) : short
        return (short) _parseInt(s);
!!!11948930.java!!!	printShort(in val : short) : String
        return _printShort(val);
!!!11949058.java!!!	_printShort(in val : short) : String
        return String.valueOf(val);
!!!11949186.java!!!	parseDecimal(inout content : String) : BigDecimal
        return _parseDecimal(content);
!!!11949314.java!!!	_parseDecimal(inout content : CharSequence) : BigDecimal
        content = WhiteSpaceProcessor.trim(content);

        if (content.length() <= 0) {
            return null;
        }

        return new BigDecimal(content.toString());

        // from purely XML Schema perspective,
        // this implementation has a problem, since
        // in xs:decimal "1.0" and "1" is equal whereas the above
        // code will return different values for those two forms.
        //
        // the code was originally using com.sun.msv.datatype.xsd.NumberType.load,
        // but a profiling showed that the process of normalizing "1.0" into "1"
        // could take non-trivial time.
        //
        // also, from the user's point of view, one might be surprised if
        // 1 (not 1.0) is returned from "1.000"
!!!11949442.java!!!	parseFloat(inout lexicalXSDFloat : String) : float
        return _parseFloat(lexicalXSDFloat);
!!!11949570.java!!!	_parseFloat(inout _val : CharSequence) : float
        String s = WhiteSpaceProcessor.trim(_val).toString();
        /* Incompatibilities of XML Schema's float "xfloat" and Java's float "jfloat"

         * jfloat.valueOf ignores leading and trailing whitespaces,
        whereas this is not allowed in xfloat.
         * jfloat.valueOf allows "float type suffix" (f, F) to be
        appended after float literal (e.g., 1.52e-2f), whereare
        this is not the case of xfloat.

        gray zone
        ---------
         * jfloat allows ".523". And there is no clear statement that mentions
        this case in xfloat. Although probably this is allowed.
         *
         */

        if (s.equals("NaN")) {
            return Float.NaN;
        }
        if (s.equals("INF")) {
            return Float.POSITIVE_INFINITY;
        }
        if (s.equals("-INF")) {
            return Float.NEGATIVE_INFINITY;
        }

        if (s.length() == 0
                || !isDigitOrPeriodOrSign(s.charAt(0))
                || !isDigitOrPeriodOrSign(s.charAt(s.length() - 1))) {
            throw new NumberFormatException();
        }

        // these screening process is necessary due to the wobble of Float.valueOf method
        return Float.parseFloat(s);
!!!11949698.java!!!	printFloat(in v : float) : String
        return _printFloat(v);
!!!11949826.java!!!	_printFloat(in v : float) : String
        if (Float.isNaN(v)) {
            return "NaN";
        }
        if (v == Float.POSITIVE_INFINITY) {
            return "INF";
        }
        if (v == Float.NEGATIVE_INFINITY) {
            return "-INF";
        }
        return String.valueOf(v);
!!!11949954.java!!!	parseDouble(inout lexicalXSDDouble : String) : double
        return _parseDouble(lexicalXSDDouble);
!!!11950082.java!!!	_parseDouble(inout _val : CharSequence) : double
        String val = WhiteSpaceProcessor.trim(_val).toString();

        if (val.equals("NaN")) {
            return Double.NaN;
        }
        if (val.equals("INF")) {
            return Double.POSITIVE_INFINITY;
        }
        if (val.equals("-INF")) {
            return Double.NEGATIVE_INFINITY;
        }

        if (val.length() == 0
                || !isDigitOrPeriodOrSign(val.charAt(0))
                || !isDigitOrPeriodOrSign(val.charAt(val.length() - 1))) {
            throw new NumberFormatException(val);
        }


        // these screening process is necessary due to the wobble of Float.valueOf method
        return Double.parseDouble(val);
!!!11950210.java!!!	parseBoolean(inout lexicalXSDBoolean : String) : boolean
        Boolean b = _parseBoolean(lexicalXSDBoolean);
        return (b == null) ? false : b.booleanValue();
!!!11950338.java!!!	_parseBoolean(inout literal : CharSequence) : Boolean
        if (literal == null) {
            return null;
        }

        int i = 0;
        int len = literal.length();
        char ch;
        boolean value = false;

        if (literal.length() <= 0) {
            return null;
        }

        do {
            ch = literal.charAt(i++);
        } while (WhiteSpaceProcessor.isWhiteSpace(ch) && i < len);

        int strIndex = 0;

        switch (ch) {
            case '1':
                value = true;
                break;
            case '0':
                value = false;
                break;
            case 't':
                String strTrue = "rue";
                do {
                    ch = literal.charAt(i++);
                } while ((strTrue.charAt(strIndex++) == ch) && i < len && strIndex < 3);

                if (strIndex == 3) {
                    value = true;
                } else {
                    return false;
                }
//                    throw new IllegalArgumentException("String \"" + literal + "\" is not valid boolean value.");

                break;
            case 'f':
                String strFalse = "alse";
                do {
                    ch = literal.charAt(i++);
                } while ((strFalse.charAt(strIndex++) == ch) && i < len && strIndex < 4);


                if (strIndex == 4) {
                    value = false;
                } else {
                    return false;
                }
//                    throw new IllegalArgumentException("String \"" + literal + "\" is not valid boolean value.");

                break;
        }

        if (i < len) {
            do {
                ch = literal.charAt(i++);
            } while (WhiteSpaceProcessor.isWhiteSpace(ch) && i < len);
        }

        if (i == len) {
            return value;
        } else {
            return null;
        }
//            throw new IllegalArgumentException("String \"" + literal + "\" is not valid boolean value.");
!!!11950466.java!!!	printBoolean(inout val : boolean) : String
        return val ? "true" : "false";
!!!11950594.java!!!	_printBoolean(inout val : boolean) : String
        return val ? "true" : "false";
!!!11950722.java!!!	parseByte(inout lexicalXSDByte : String) : byte
        return _parseByte(lexicalXSDByte);
!!!11950850.java!!!	_parseByte(inout literal : CharSequence) : byte
        return (byte) _parseInt(literal);
!!!11950978.java!!!	printByte(in val : byte) : String
        return _printByte(val);
!!!11951106.java!!!	_printByte(in val : byte) : String
        return String.valueOf(val);
!!!11951234.java!!!	parseQName(inout lexicalXSDQName : String, inout nsc : NamespaceContext) : QName
        return _parseQName(lexicalXSDQName, nsc);
!!!11951362.java!!!	_parseQName(inout text : CharSequence, inout nsc : NamespaceContext) : QName
        int length = text.length();

        // trim whitespace
        int start = 0;
        while (start < length && WhiteSpaceProcessor.isWhiteSpace(text.charAt(start))) {
            start++;
        }

        int end = length;
        while (end > start && WhiteSpaceProcessor.isWhiteSpace(text.charAt(end - 1))) {
            end--;
        }

        if (end == start) {
            throw new IllegalArgumentException("input is empty");
        }


        String uri;
        String localPart;
        String prefix;

        // search ':'
        int idx = start + 1;    // no point in searching the first char. that's not valid.
        while (idx < end && text.charAt(idx) != ':') {
            idx++;
        }

        if (idx == end) {
            uri = nsc.getNamespaceURI("");
            localPart = text.subSequence(start, end).toString();
            prefix = "";
        } else {
            // Prefix exists, check everything
            prefix = text.subSequence(start, idx).toString();
            localPart = text.subSequence(idx + 1, end).toString();
            uri = nsc.getNamespaceURI(prefix);
            // uri can never be null according to javadoc,
            // but some users reported that there are implementations that return null.
            if (uri == null || uri.length() == 0) // crap. the NamespaceContext interface is broken.
            // error: unbound prefix
            {
                throw new IllegalArgumentException("prefix " + prefix + " is not bound to a namespace");
            }
        }

        return new QName(uri, localPart, prefix);
!!!11951490.java!!!	parseDateTime(inout lexicalXSDDateTime : String) : Calendar
        return _parseDateTime(lexicalXSDDateTime);
!!!11951618.java!!!	_parseDateTime(inout s : CharSequence) : GregorianCalendar
        String val = WhiteSpaceProcessor.trim(s).toString();
        return datatypeFactory.newXMLGregorianCalendar(val).toGregorianCalendar();
!!!11951746.java!!!	printDateTime(inout val : Calendar) : String
        return _printDateTime(val);
!!!11951874.java!!!	_printDateTime(inout val : Calendar) : String
        return CalendarFormatter.doFormat("%Y-%M-%DT%h:%m:%s%z", val);
!!!11952002.java!!!	parseBase64Binary(inout lexicalXSDBase64Binary : String) : byte
        return _parseBase64Binary(lexicalXSDBase64Binary);
!!!11952130.java!!!	parseHexBinary(inout s : String) : byte
        final int len = s.length();

        // "111" is not a valid hex encoding.
        if (len % 2 != 0) {
            throw new IllegalArgumentException("hexBinary needs to be even-length: " + s);
        }

        byte[] out = new byte[len / 2];

        for (int i = 0; i < len; i += 2) {
            int h = hexToBin(s.charAt(i));
            int l = hexToBin(s.charAt(i + 1));
            if (h == -1 || l == -1) {
                throw new IllegalArgumentException("contains illegal character for hexBinary: " + s);
            }

            out[i / 2] = (byte) (h * 16 + l);
        }

        return out;
!!!11952258.java!!!	hexToBin(in ch : char) : int
        if ('0' <= ch && ch <= '9') {
            return ch - '0';
        }
        if ('A' <= ch && ch <= 'F') {
            return ch - 'A' + 10;
        }
        if ('a' <= ch && ch <= 'f') {
            return ch - 'a' + 10;
        }
        return -1;
!!!11952386.java!!!	printHexBinary(inout data : byte [[]]) : String
        StringBuilder r = new StringBuilder(data.length * 2);
        for (byte b : data) {
            r.append(hexCode[(b >> 4) & 0xF]);
            r.append(hexCode[(b & 0xF)]);
        }
        return r.toString();
!!!11952514.java!!!	parseUnsignedInt(inout lexicalXSDUnsignedInt : String) : long
        return _parseLong(lexicalXSDUnsignedInt);
!!!11952642.java!!!	printUnsignedInt(in val : long) : String
        return _printLong(val);
!!!11952770.java!!!	parseUnsignedShort(inout lexicalXSDUnsignedShort : String) : int
        return _parseInt(lexicalXSDUnsignedShort);
!!!11952898.java!!!	parseTime(inout lexicalXSDTime : String) : Calendar
        return datatypeFactory.newXMLGregorianCalendar(lexicalXSDTime).toGregorianCalendar();
!!!11953026.java!!!	printTime(inout val : Calendar) : String
        return CalendarFormatter.doFormat("%h:%m:%s%z", val);
!!!11953154.java!!!	parseDate(inout lexicalXSDDate : String) : Calendar
        return datatypeFactory.newXMLGregorianCalendar(lexicalXSDDate).toGregorianCalendar();
!!!11953282.java!!!	printDate(inout val : Calendar) : String
        return _printDate(val);
!!!11953410.java!!!	_printDate(inout val : Calendar) : String
        return CalendarFormatter.doFormat((new StringBuilder("%Y-%M-%D").append("%z")).toString(),val);
!!!11953538.java!!!	parseAnySimpleType(inout lexicalXSDAnySimpleType : String) : String
        return lexicalXSDAnySimpleType;
//        return (String)SimpleURType.theInstance._createValue( lexicalXSDAnySimpleType, null );
!!!11953666.java!!!	printString(inout val : String) : String
//        return StringType.theInstance.convertToLexicalValue( val, null );
        return val;
!!!11953794.java!!!	printInt(in val : int) : String
        return _printInt(val);
!!!11953922.java!!!	_printInt(in val : int) : String
        return String.valueOf(val);
!!!11954050.java!!!	printLong(in val : long) : String
        return _printLong(val);
!!!11954178.java!!!	_printLong(in val : long) : String
        return String.valueOf(val);
!!!11954306.java!!!	printDecimal(inout val : BigDecimal) : String
        return _printDecimal(val);
!!!11954434.java!!!	_printDecimal(inout val : BigDecimal) : String
        return val.toPlainString();
!!!11954562.java!!!	printDouble(in v : double) : String
        return _printDouble(v);
!!!11954690.java!!!	_printDouble(in v : double) : String
        if (Double.isNaN(v)) {
            return "NaN";
        }
        if (v == Double.POSITIVE_INFINITY) {
            return "INF";
        }
        if (v == Double.NEGATIVE_INFINITY) {
            return "-INF";
        }
        return String.valueOf(v);
!!!11954818.java!!!	printQName(inout val : QName, inout nsc : NamespaceContext) : String
        return _printQName(val, nsc);
!!!11954946.java!!!	_printQName(inout val : QName, inout nsc : NamespaceContext) : String
        // Double-check
        String qname;
        String prefix = nsc.getPrefix(val.getNamespaceURI());
        String localPart = val.getLocalPart();

        if (prefix == null || prefix.length() == 0) { // be defensive
            qname = localPart;
        } else {
            qname = prefix + ':' + localPart;
        }

        return qname;
!!!11955074.java!!!	printBase64Binary(inout val : byte [[]]) : String
        return _printBase64Binary(val);
!!!11955202.java!!!	printUnsignedShort(in val : int) : String
        return String.valueOf(val);
!!!11955330.java!!!	printAnySimpleType(inout val : String) : String
        return val;
!!!11955458.java!!!	installHook(inout s : String) : String
        DatatypeConverter.setDatatypeConverter(theInstance);
        return s;
!!!11955586.java!!!	initDecodeMap() : byte
        byte[] map = new byte[128];
        int i;
        for (i = 0; i < 128; i++) {
            map[i] = -1;
        }

        for (i = 'A'; i <= 'Z'; i++) {
            map[i] = (byte) (i - 'A');
        }
        for (i = 'a'; i <= 'z'; i++) {
            map[i] = (byte) (i - 'a' + 26);
        }
        for (i = '0'; i <= '9'; i++) {
            map[i] = (byte) (i - '0' + 52);
        }
        map['+'] = 62;
        map['/'] = 63;
        map['='] = PADDING;

        return map;
!!!11955714.java!!!	guessLength(inout text : String) : int
        final int len = text.length();

        // compute the tail '=' chars
        int j = len - 1;
        for (; j >= 0; j--) {
            byte code = decodeMap[text.charAt(j)];
            if (code == PADDING) {
                continue;
            }
            if (code == -1) // most likely this base64 text is indented. go with the upper bound
            {
                return text.length() / 4 * 3;
            }
            break;
        }

        j++;    // text.charAt(j) is now at some base64 char, so +1 to make it the size
        int padSize = len - j;
        if (padSize > 2) // something is wrong with base64. be safe and go with the upper bound
        {
            return text.length() / 4 * 3;
        }

        // so far this base64 looks like it's unindented tightly packed base64.
        // take a chance and create an array with the expected size
        return text.length() / 4 * 3 - padSize;
!!!11955842.java!!!	_parseBase64Binary(inout text : String) : byte
        final int buflen = guessLength(text);
        final byte[] out = new byte[buflen];
        int o = 0;

        final int len = text.length();
        int i;

        final byte[] quadruplet = new byte[4];
        int q = 0;

        // convert each quadruplet to three bytes.
        for (i = 0; i < len; i++) {
            char ch = text.charAt(i);
            byte v = decodeMap[ch];

            if (v != -1) {
                quadruplet[q++] = v;
            }

            if (q == 4) {
                // quadruplet is now filled.
                out[o++] = (byte) ((quadruplet[0] << 2) | (quadruplet[1] >> 4));
                if (quadruplet[2] != PADDING) {
                    out[o++] = (byte) ((quadruplet[1] << 4) | (quadruplet[2] >> 2));
                }
                if (quadruplet[3] != PADDING) {
                    out[o++] = (byte) ((quadruplet[2] << 6) | (quadruplet[3]));
                }
                q = 0;
            }
        }

        if (buflen == o) // speculation worked out to be OK
        {
            return out;
        }

        // we overestimated, so need to create a new buffer
        byte[] nb = new byte[o];
        System.arraycopy(out, 0, nb, 0, o);
        return nb;
!!!11955970.java!!!	initEncodeMap() : char
        char[] map = new char[64];
        int i;
        for (i = 0; i < 26; i++) {
            map[i] = (char) ('A' + i);
        }
        for (i = 26; i < 52; i++) {
            map[i] = (char) ('a' + (i - 26));
        }
        for (i = 52; i < 62; i++) {
            map[i] = (char) ('0' + (i - 52));
        }
        map[62] = '+';
        map[63] = '/';

        return map;
!!!11956098.java!!!	encode(in i : int) : char
        return encodeMap[i & 0x3F];
!!!11956226.java!!!	encodeByte(in i : int) : byte
        return (byte) encodeMap[i & 0x3F];
!!!11956354.java!!!	_printBase64Binary(inout input : byte [[]]) : String
        return _printBase64Binary(input, 0, input.length);
!!!11956482.java!!!	_printBase64Binary(inout input : byte [[]], in offset : int, in len : int) : String
        char[] buf = new char[((len + 2) / 3) * 4];
        int ptr = _printBase64Binary(input, offset, len, buf, 0);
        assert ptr == buf.length;
        return new String(buf);
!!!11956610.java!!!	_printBase64Binary(inout input : byte [[]], in offset : int, in len : int, inout buf : char [[]], in ptr : int) : int
        // encode elements until only 1 or 2 elements are left to encode
        int remaining = len;
        int i;
        for (i = offset;remaining >= 3; remaining -= 3, i += 3) {
            buf[ptr++] = encode(input[i] >> 2);
            buf[ptr++] = encode(
                    ((input[i] & 0x3) << 4)
                    | ((input[i + 1] >> 4) & 0xF));
            buf[ptr++] = encode(
                    ((input[i + 1] & 0xF) << 2)
                    | ((input[i + 2] >> 6) & 0x3));
            buf[ptr++] = encode(input[i + 2] & 0x3F);
        }
        // encode when exactly 1 element (left) to encode
        if (remaining == 1) {
            buf[ptr++] = encode(input[i] >> 2);
            buf[ptr++] = encode(((input[i]) & 0x3) << 4);
            buf[ptr++] = '=';
            buf[ptr++] = '=';
        }
        // encode when exactly 2 elements (left) to encode
        if (remaining == 2) {
            buf[ptr++] = encode(input[i] >> 2);
            buf[ptr++] = encode(((input[i] & 0x3) << 4)
                    | ((input[i + 1] >> 4) & 0xF));
            buf[ptr++] = encode((input[i + 1] & 0xF) << 2);
            buf[ptr++] = '=';
        }
        return ptr;
!!!11956738.java!!!	_printBase64Binary(inout input : byte [[]], in offset : int, in len : int, inout out : byte [[]], in ptr : int) : int
        byte[] buf = out;
        int remaining = len;
        int i;
        for (i=offset; remaining >= 3; remaining -= 3, i += 3 ) {
            buf[ptr++] = encodeByte(input[i]>>2);
            buf[ptr++] = encodeByte(
                        ((input[i]&0x3)<<4) |
                        ((input[i+1]>>4)&0xF));
            buf[ptr++] = encodeByte(
                        ((input[i+1]&0xF)<<2)|
                        ((input[i+2]>>6)&0x3));
            buf[ptr++] = encodeByte(input[i+2]&0x3F);
        }
        // encode when exactly 1 element (left) to encode
        if (remaining == 1) {
            buf[ptr++] = encodeByte(input[i]>>2);
            buf[ptr++] = encodeByte(((input[i])&0x3)<<4);
            buf[ptr++] = '=';
            buf[ptr++] = '=';
        }
        // encode when exactly 2 elements (left) to encode
        if (remaining == 2) {
            buf[ptr++] = encodeByte(input[i]>>2);
            buf[ptr++] = encodeByte(
                        ((input[i]&0x3)<<4) |
                        ((input[i+1]>>4)&0xF));
            buf[ptr++] = encodeByte((input[i+1]&0xF)<<2);
            buf[ptr++] = '=';
        }

        return ptr;
!!!11956866.java!!!	removeOptionalPlus(inout s : CharSequence) : CharSequence
        int len = s.length();

        if (len <= 1 || s.charAt(0) != '+') {
            return s;
        }

        s = s.subSequence(1, len);
        char ch = s.charAt(0);
        if ('0' <= ch && ch <= '9') {
            return s;
        }
        if ('.' == ch) {
            return s;
        }

        throw new NumberFormatException();
!!!11956994.java!!!	isDigitOrPeriodOrSign(in ch : char) : boolean
        if ('0' <= ch && ch <= '9') {
            return true;
        }
        if (ch == '+' || ch == '-' || ch == '.') {
            return true;
        }
        return false;
