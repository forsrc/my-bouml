class DefaultTreeCellRenderer
!!!2694530.java!!!	DefaultTreeCellRenderer()
        inited = true;
!!!2694658.java!!!	updateUI() : void
        super.updateUI();
        // To avoid invoking new methods from the constructor, the
        // inited field is first checked. If inited is false, the constructor
        // has not run and there is no point in checking the value. As
        // all look and feels have a non-null value for these properties,
        // a null value means the developer has specifically set it to
        // null. As such, if the value is null, this does not reset the
        // value.
        if (!inited || (getLeafIcon() instanceof UIResource)) {
            setLeafIcon(DefaultLookup.getIcon(this, ui, "Tree.leafIcon"));
        }
        if (!inited || (getClosedIcon() instanceof UIResource)) {
            setClosedIcon(DefaultLookup.getIcon(this, ui, "Tree.closedIcon"));
        }
        if (!inited || (getOpenIcon() instanceof UIManager)) {
            setOpenIcon(DefaultLookup.getIcon(this, ui, "Tree.openIcon"));
        }
        if (!inited || (getTextSelectionColor() instanceof UIResource)) {
            setTextSelectionColor(
                    DefaultLookup.getColor(this, ui, "Tree.selectionForeground"));
        }
        if (!inited || (getTextNonSelectionColor() instanceof UIResource)) {
            setTextNonSelectionColor(
                    DefaultLookup.getColor(this, ui, "Tree.textForeground"));
        }
        if (!inited || (getBackgroundSelectionColor() instanceof UIResource)) {
            setBackgroundSelectionColor(
                    DefaultLookup.getColor(this, ui, "Tree.selectionBackground"));
        }
        if (!inited ||
                (getBackgroundNonSelectionColor() instanceof UIResource)) {
            setBackgroundNonSelectionColor(
                    DefaultLookup.getColor(this, ui, "Tree.textBackground"));
        }
        if (!inited || (getBorderSelectionColor() instanceof UIResource)) {
            setBorderSelectionColor(
                    DefaultLookup.getColor(this, ui, "Tree.selectionBorderColor"));
        }
        drawsFocusBorderAroundIcon = DefaultLookup.getBoolean(
                this, ui, "Tree.drawsFocusBorderAroundIcon", false);
        drawDashedFocusIndicator = DefaultLookup.getBoolean(
                this, ui, "Tree.drawDashedFocusIndicator", false);

        fillBackground = DefaultLookup.getBoolean(this, ui, "Tree.rendererFillBackground", true);
        Insets margins = DefaultLookup.getInsets(this, ui, "Tree.rendererMargins");
        if (margins != null) {
            setBorder(new EmptyBorder(margins.top, margins.left,
                    margins.bottom, margins.right));
        }

        setName("Tree.cellRenderer");
!!!2694786.java!!!	getDefaultOpenIcon() : Icon
        return DefaultLookup.getIcon(this, ui, "Tree.openIcon");
!!!2694914.java!!!	getDefaultClosedIcon() : Icon
        return DefaultLookup.getIcon(this, ui, "Tree.closedIcon");
!!!2695042.java!!!	getDefaultLeafIcon() : Icon
        return DefaultLookup.getIcon(this, ui, "Tree.leafIcon");
!!!2695170.java!!!	setOpenIcon(inout newIcon : Icon) : void
        openIcon = newIcon;
!!!2695298.java!!!	getOpenIcon() : Icon
        return openIcon;
!!!2695426.java!!!	setClosedIcon(inout newIcon : Icon) : void
        closedIcon = newIcon;
!!!2695554.java!!!	getClosedIcon() : Icon
        return closedIcon;
!!!2695682.java!!!	setLeafIcon(inout newIcon : Icon) : void
        leafIcon = newIcon;
!!!2695810.java!!!	getLeafIcon() : Icon
        return leafIcon;
!!!2695938.java!!!	setTextSelectionColor(inout newColor : Color) : void
        textSelectionColor = newColor;
!!!2696066.java!!!	getTextSelectionColor() : Color
        return textSelectionColor;
!!!2696194.java!!!	setTextNonSelectionColor(inout newColor : Color) : void
        textNonSelectionColor = newColor;
!!!2696322.java!!!	getTextNonSelectionColor() : Color
        return textNonSelectionColor;
!!!2696450.java!!!	setBackgroundSelectionColor(inout newColor : Color) : void
        backgroundSelectionColor = newColor;
!!!2696578.java!!!	getBackgroundSelectionColor() : Color
        return backgroundSelectionColor;
!!!2696706.java!!!	setBackgroundNonSelectionColor(inout newColor : Color) : void
        backgroundNonSelectionColor = newColor;
!!!2696834.java!!!	getBackgroundNonSelectionColor() : Color
        return backgroundNonSelectionColor;
!!!2696962.java!!!	setBorderSelectionColor(inout newColor : Color) : void
        borderSelectionColor = newColor;
!!!2697090.java!!!	getBorderSelectionColor() : Color
        return borderSelectionColor;
!!!2697218.java!!!	setFont(inout font : Font) : void
        if(font instanceof FontUIResource)
            font = null;
        super.setFont(font);
!!!2697346.java!!!	getFont() : Font
        Font font = super.getFont();

        if (font == null && tree != null) {
            // Strive to return a non-null value, otherwise the html support
            // will typically pick up the wrong font in certain situations.
            font = tree.getFont();
        }
        return font;
!!!2697474.java!!!	setBackground(inout color : Color) : void
        if(color instanceof ColorUIResource)
            color = null;
        super.setBackground(color);
!!!2697602.java!!!	getTreeCellRendererComponent(inout tree : JTree, inout value : Object, inout sel : boolean, inout expanded : boolean, inout leaf : boolean, in row : int, inout hasFocus : boolean) : Component
        String         stringValue = tree.convertValueToText(value, sel,
                                          expanded, leaf, row, hasFocus);

        this.tree = tree;
        this.hasFocus = hasFocus;
        setText(stringValue);

        Color fg = null;
        isDropCell = false;

        JTree.DropLocation dropLocation = tree.getDropLocation();
        if (dropLocation != null
                && dropLocation.getChildIndex() == -1
                && tree.getRowForPath(dropLocation.getPath()) == row) {

            Color col = DefaultLookup.getColor(this, ui, "Tree.dropCellForeground");
            if (col != null) {
                fg = col;
            } else {
                fg = getTextSelectionColor();
            }

            isDropCell = true;
        } else if (sel) {
            fg = getTextSelectionColor();
        } else {
            fg = getTextNonSelectionColor();
        }

        setForeground(fg);

        Icon icon = null;
        if (leaf) {
            icon = getLeafIcon();
        } else if (expanded) {
            icon = getOpenIcon();
        } else {
            icon = getClosedIcon();
        }

        if (!tree.isEnabled()) {
            setEnabled(false);
            LookAndFeel laf = UIManager.getLookAndFeel();
            Icon disabledIcon = laf.getDisabledIcon(tree, icon);
            if (disabledIcon != null) icon = disabledIcon;
            setDisabledIcon(icon);
        } else {
            setEnabled(true);
            setIcon(icon);
        }
        setComponentOrientation(tree.getComponentOrientation());

        selected = sel;

        return this;
!!!2697730.java!!!	paint(inout g : Graphics) : void
        Color bColor;

        if (isDropCell) {
            bColor = DefaultLookup.getColor(this, ui, "Tree.dropCellBackground");
            if (bColor == null) {
                bColor = getBackgroundSelectionColor();
            }
        } else if (selected) {
            bColor = getBackgroundSelectionColor();
        } else {
            bColor = getBackgroundNonSelectionColor();
            if (bColor == null) {
                bColor = getBackground();
            }
        }

        int imageOffset = -1;
        if (bColor != null && fillBackground) {
            imageOffset = getLabelStart();
            g.setColor(bColor);
            if(getComponentOrientation().isLeftToRight()) {
                g.fillRect(imageOffset, 0, getWidth() - imageOffset,
                           getHeight());
            } else {
                g.fillRect(0, 0, getWidth() - imageOffset,
                           getHeight());
            }
        }

        if (hasFocus) {
            if (drawsFocusBorderAroundIcon) {
                imageOffset = 0;
            }
            else if (imageOffset == -1) {
                imageOffset = getLabelStart();
            }
            if(getComponentOrientation().isLeftToRight()) {
                paintFocus(g, imageOffset, 0, getWidth() - imageOffset,
                           getHeight(), bColor);
            } else {
                paintFocus(g, 0, 0, getWidth() - imageOffset, getHeight(), bColor);
            }
        }
        super.paint(g);
!!!2697858.java!!!	paintFocus(inout g : Graphics, in x : int, in y : int, in w : int, in h : int, inout notColor : Color) : void
        Color       bsColor = getBorderSelectionColor();

        if (bsColor != null && (selected || !drawDashedFocusIndicator)) {
            g.setColor(bsColor);
            g.drawRect(x, y, w - 1, h - 1);
        }
        if (drawDashedFocusIndicator && notColor != null) {
            if (treeBGColor != notColor) {
                treeBGColor = notColor;
                focusBGColor = new Color(~notColor.getRGB());
            }
            g.setColor(focusBGColor);
            BasicGraphicsUtils.drawDashedRect(g, x, y, w, h);
        }
!!!2697986.java!!!	getLabelStart() : int
        Icon currentI = getIcon();
        if(currentI != null && getText() != null) {
            return currentI.getIconWidth() + Math.max(0, getIconTextGap() - 1);
        }
        return 0;
!!!2698114.java!!!	getPreferredSize() : Dimension
        Dimension        retDimension = super.getPreferredSize();

        if(retDimension != null)
            retDimension = new Dimension(retDimension.width + 3,
                                         retDimension.height);
        return retDimension;
!!!2699010.java!!!	firePropertyChange(inout propertyName : String, inout oldValue : Object, inout newValue : Object) : void
        // Strings get interned...
        if (propertyName == "text"
                || ((propertyName == "font" || propertyName == "foreground")
                    && oldValue != newValue
                    && getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey) != null)) {

            super.firePropertyChange(propertyName, oldValue, newValue);
        }
