class CountedCompleter
!!!8613378.java!!!	CountedCompleter(inout completer : CountedCompleter, in initialPendingCount : int)
        this.completer = completer;
        this.pending = initialPendingCount;
!!!8613506.java!!!	CountedCompleter(inout completer : CountedCompleter)
        this.completer = completer;
!!!8613634.java!!!	CountedCompleter()
        this.completer = null;
!!!8614018.java!!!	onExceptionalCompletion(inout ex : Throwable, inout caller : CountedCompleter) : boolean
        return true;
!!!8614146.java!!!	getCompleter() : CountedCompleter
        return completer;
!!!8614274.java!!!	getPendingCount() : int
        return pending;
!!!8614402.java!!!	setPendingCount(in count : int) : void
        pending = count;
!!!8614530.java!!!	addToPendingCount(in delta : int) : void
        U.getAndAddInt(this, PENDING, delta);
!!!8614658.java!!!	compareAndSetPendingCount(in expected : int, in count : int) : boolean
        return U.compareAndSwapInt(this, PENDING, expected, count);
!!!8614786.java!!!	decrementPendingCountUnlessZero() : int
        int c;
        do {} while ((c = pending) != 0 &&
                     !U.compareAndSwapInt(this, PENDING, c, c - 1));
        return c;
!!!8614914.java!!!	getRoot() : CountedCompleter
        CountedCompleter<?> a = this, p;
        while ((p = a.completer) != null)
            a = p;
        return a;
!!!8615042.java!!!	tryComplete() : void
        CountedCompleter<?> a = this, s = a;
        for (int c;;) {
            if ((c = a.pending) == 0) {
                a.onCompletion(s);
                if ((a = (s = a).completer) == null) {
                    s.quietlyComplete();
                    return;
                }
            }
            else if (U.compareAndSwapInt(a, PENDING, c, c - 1))
                return;
        }
!!!8615170.java!!!	propagateCompletion() : void
        CountedCompleter<?> a = this, s = a;
        for (int c;;) {
            if ((c = a.pending) == 0) {
                if ((a = (s = a).completer) == null) {
                    s.quietlyComplete();
                    return;
                }
            }
            else if (U.compareAndSwapInt(a, PENDING, c, c - 1))
                return;
        }
!!!8615298.java!!!	complete(inout rawResult : T) : void
        CountedCompleter<?> p;
        setRawResult(rawResult);
        onCompletion(this);
        quietlyComplete();
        if ((p = completer) != null)
            p.tryComplete();
!!!8615426.java!!!	firstComplete() : CountedCompleter
        for (int c;;) {
            if ((c = pending) == 0)
                return this;
            else if (U.compareAndSwapInt(this, PENDING, c, c - 1))
                return null;
        }
!!!8615554.java!!!	nextComplete() : CountedCompleter
        CountedCompleter<?> p;
        if ((p = completer) != null)
            return p.firstComplete();
        else {
            quietlyComplete();
            return null;
        }
!!!8615682.java!!!	quietlyCompleteRoot() : void
        for (CountedCompleter<?> a = this, p;;) {
            if ((p = a.completer) == null) {
                a.quietlyComplete();
                return;
            }
            a = p;
        }
!!!8615810.java!!!	helpComplete(in maxTasks : int) : void
        Thread t; ForkJoinWorkerThread wt;
        if (maxTasks > 0 && status >= 0) {
            if ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread)
                (wt = (ForkJoinWorkerThread)t).pool.
                    helpComplete(wt.workQueue, this, maxTasks);
            else
                ForkJoinPool.common.externalHelpComplete(this, maxTasks);
        }
!!!8615938.java!!!	internalPropagateException(inout ex : Throwable) : void
        CountedCompleter<?> a = this, s = a;
        while (a.onExceptionalCompletion(ex, s) &&
               (a = (s = a).completer) != null && a.status >= 0 &&
               a.recordExceptionalCompletion(ex) == EXCEPTIONAL)
            ;
!!!8616066.java!!!	exec() : boolean
        compute();
        return false;
!!!8616194.java!!!	getRawResult() : T
 return null;
