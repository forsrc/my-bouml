class AccessibleObject
!!!7326466.java!!!	setAccessible(inout array : AccessibleObject [[]], inout flag : boolean) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) sm.checkPermission(ACCESS_PERMISSION);
        for (int i = 0; i < array.length; i++) {
            setAccessible0(array[i], flag);
        }
!!!7326594.java!!!	setAccessible(inout flag : boolean) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) sm.checkPermission(ACCESS_PERMISSION);
        setAccessible0(this, flag);
!!!7326722.java!!!	setAccessible0(inout obj : AccessibleObject, inout flag : boolean) : void
        if (obj instanceof Constructor && flag == true) {
            Constructor<?> c = (Constructor<?>)obj;
            if (c.getDeclaringClass() == Class.class) {
                throw new SecurityException("Cannot make a java.lang.Class" +
                                            " constructor accessible");
            }
        }
        obj.override = flag;
!!!7326850.java!!!	isAccessible() : boolean
        return override;
!!!7327106.java!!!	getAnnotation(inout annotationClass : Class) : T
        throw new AssertionError("All subclasses should override this method");
!!!7327234.java!!!	isAnnotationPresent(inout annotationClass : Class) : boolean
        return AnnotatedElement.super.isAnnotationPresent(annotationClass);
!!!7327362.java!!!	getAnnotationsByType(inout annotationClass : Class) : T
        throw new AssertionError("All subclasses should override this method");
!!!7327490.java!!!	getAnnotations() : Annotation
        return getDeclaredAnnotations();
!!!7327618.java!!!	getDeclaredAnnotation(inout annotationClass : Class) : T
        // Only annotations on classes are inherited, for all other
        // objects getDeclaredAnnotation is the same as
        // getAnnotation.
        return getAnnotation(annotationClass);
!!!7327746.java!!!	getDeclaredAnnotationsByType(inout annotationClass : Class) : T
        // Only annotations on classes are inherited, for all other
        // objects getDeclaredAnnotationsByType is the same as
        // getAnnotationsByType.
        return getAnnotationsByType(annotationClass);
!!!7327874.java!!!	getDeclaredAnnotations() : Annotation
        throw new AssertionError("All subclasses should override this method");
!!!7328002.java!!!	checkAccess(inout caller : Class, inout clazz : Class, inout obj : Object, in modifiers : int) : void
        if (caller == clazz) {  // quick check
            return;             // ACCESS IS OK
        }
        Object cache = securityCheckCache;  // read volatile
        Class<?> targetClass = clazz;
        if (obj != null
            && Modifier.isProtected(modifiers)
            && ((targetClass = obj.getClass()) != clazz)) {
            // Must match a 2-list of { caller, targetClass }.
            if (cache instanceof Class[]) {
                Class<?>[] cache2 = (Class<?>[]) cache;
                if (cache2[1] == targetClass &&
                    cache2[0] == caller) {
                    return;     // ACCESS IS OK
                }
                // (Test cache[1] first since range check for [1]
                // subsumes range check for [0].)
            }
        } else if (cache == caller) {
            // Non-protected case (or obj.class == this.clazz).
            return;             // ACCESS IS OK
        }

        // If no return, fall through to the slow path.
        slowCheckMemberAccess(caller, clazz, obj, modifiers, targetClass);
!!!7328130.java!!!	slowCheckMemberAccess(inout caller : Class, inout clazz : Class, inout obj : Object, in modifiers : int, inout targetClass : Class) : void
        Reflection.ensureMemberAccess(caller, clazz, obj, modifiers);

        // Success: Update the cache.
        Object cache = ((targetClass == clazz)
                        ? caller
                        : new Class<?>[] { caller, targetClass });

        // Note:  The two cache elements are not volatile,
        // but they are effectively final.  The Java memory model
        // guarantees that the initializing stores for the cache
        // elements will occur before the volatile write.
        securityCheckCache = cache;         // write volatile
