class MethodArray
!!!6998146.java!!!	MethodArray()
            this(20);
!!!6998274.java!!!	MethodArray(in initialSize : int)
            if (initialSize < 2)
                throw new IllegalArgumentException("Size should be 2 or more");

            methods = new Method[initialSize];
            length = 0;
            defaults = 0;
!!!6998402.java!!!	hasDefaults() : boolean
            return defaults != 0;
!!!6998530.java!!!	add(inout m : Method) : void
            if (length == methods.length) {
                methods = Arrays.copyOf(methods, 2 * methods.length);
            }
            methods[length++] = m;

            if (m != null && m.isDefault())
                defaults++;
!!!6998658.java!!!	addAll(inout ma : Method [[]]) : void
            for (int i = 0; i < ma.length; i++) {
                add(ma[i]);
            }
!!!6998786.java!!!	addAll(inout ma : Class::MethodArray) : void
            for (int i = 0; i < ma.length(); i++) {
                add(ma.get(i));
            }
!!!6998914.java!!!	addIfNotPresent(inout newMethod : Method) : void
            for (int i = 0; i < length; i++) {
                Method m = methods[i];
                if (m == newMethod || (m != null && m.equals(newMethod))) {
                    return;
                }
            }
            add(newMethod);
!!!6999042.java!!!	addAllIfNotPresent(inout newMethods : Class::MethodArray) : void
            for (int i = 0; i < newMethods.length(); i++) {
                Method m = newMethods.get(i);
                if (m != null) {
                    addIfNotPresent(m);
                }
            }
!!!6999170.java!!!	addInterfaceMethods(inout methods : Method [[]]) : void
            for (Method candidate : methods) {
                if (!Modifier.isStatic(candidate.getModifiers())) {
                    add(candidate);
                }
            }
!!!6999298.java!!!	length() : int
            return length;
!!!6999426.java!!!	get(in i : int) : Method
            return methods[i];
!!!6999554.java!!!	getFirst() : Method
            for (Method m : methods)
                if (m != null)
                    return m;
            return null;
!!!6999682.java!!!	removeByNameAndDescriptor(inout toRemove : Method) : void
            for (int i = 0; i < length; i++) {
                Method m = methods[i];
                if (m != null && matchesNameAndDescriptor(m, toRemove)) {
                    remove(i);
                }
            }
!!!6999810.java!!!	remove(in i : int) : void
            if (methods[i] != null && methods[i].isDefault())
                defaults--;
            methods[i] = null;
!!!6999938.java!!!	matchesNameAndDescriptor(inout m1 : Method, inout m2 : Method) : boolean
            return m1.getReturnType() == m2.getReturnType() &&
                   m1.getName() == m2.getName() && // name is guaranteed to be interned
                   arrayContentsEq(m1.getParameterTypes(),
                           m2.getParameterTypes());
!!!7000066.java!!!	compactAndTrim() : void
            int newPos = 0;
            // Get rid of null slots
            for (int pos = 0; pos < length; pos++) {
                Method m = methods[pos];
                if (m != null) {
                    if (pos != newPos) {
                        methods[newPos] = m;
                    }
                    newPos++;
                }
            }
            if (newPos != methods.length) {
                methods = Arrays.copyOf(methods, newPos);
            }
!!!7000194.java!!!	removeLessSpecifics() : void
            if (!hasDefaults())
                return;

            for (int i = 0; i < length; i++) {
                Method m = get(i);
                if  (m == null || !m.isDefault())
                    continue;

                for (int j  = 0; j < length; j++) {
                    if (i == j)
                        continue;

                    Method candidate = get(j);
                    if (candidate == null)
                        continue;

                    if (!matchesNameAndDescriptor(m, candidate))
                        continue;

                    if (hasMoreSpecificClass(m, candidate))
                        remove(j);
                }
            }
!!!7000322.java!!!	getArray() : Method
            return methods;
!!!7000450.java!!!	hasMoreSpecificClass(inout m1 : Method, inout m2 : Method) : boolean
            Class<?> m1Class = m1.getDeclaringClass();
            Class<?> m2Class = m2.getDeclaringClass();
            return m1Class != m2Class && m2Class.isAssignableFrom(m1Class);
