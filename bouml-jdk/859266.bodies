class CheckboxMenuItem
!!!6128642.java!!!	CheckboxMenuItem()
        this("", false);
!!!6128770.java!!!	CheckboxMenuItem(inout label : String)
        this(label, false);
!!!6128898.java!!!	CheckboxMenuItem(inout label : String, inout state : boolean)
        super(label);
        this.state = state;
!!!6129026.java!!!	constructComponentName() : String
        synchronized (CheckboxMenuItem.class) {
            return base + nameCounter++;
        }
!!!6129154.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = Toolkit.getDefaultToolkit().createCheckboxMenuItem(this);
            super.addNotify();
        }
!!!6129282.java!!!	getState() : boolean
        return state;
!!!6129410.java!!!	setState(inout b : boolean) : void
        state = b;
        CheckboxMenuItemPeer peer = (CheckboxMenuItemPeer)this.peer;
        if (peer != null) {
            peer.setState(b);
        }
!!!6129538.java!!!	getSelectedObjects() : Object
        if (state) {
            Object[] items = new Object[1];
            items[0] = label;
            return items;
        }
        return null;
!!!6129666.java!!!	addItemListener(inout l : ItemListener) : void
        if (l == null) {
            return;
        }
        itemListener = AWTEventMulticaster.add(itemListener, l);
        newEventsOnly = true;
!!!6129794.java!!!	removeItemListener(inout l : ItemListener) : void
        if (l == null) {
            return;
        }
        itemListener = AWTEventMulticaster.remove(itemListener, l);
!!!6129922.java!!!	getItemListeners() : ItemListener
        return getListeners(ItemListener.class);
!!!6130050.java!!!	getListeners(inout listenerType : Class) : T
        EventListener l = null;
        if  (listenerType == ItemListener.class) {
            l = itemListener;
        } else {
            return super.getListeners(listenerType);
        }
        return AWTEventMulticaster.getListeners(l, listenerType);
!!!6130178.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == ItemEvent.ITEM_STATE_CHANGED) {
            if ((eventMask & AWTEvent.ITEM_EVENT_MASK) != 0 ||
                itemListener != null) {
                return true;
            }
            return false;
        }
        return super.eventEnabled(e);
!!!6130306.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof ItemEvent) {
            processItemEvent((ItemEvent)e);
            return;
        }
        super.processEvent(e);
!!!6130434.java!!!	processItemEvent(inout e : ItemEvent) : void
        ItemListener listener = itemListener;
        if (listener != null) {
            listener.itemStateChanged(e);
        }
!!!6130562.java!!!	doMenuEvent(in when : long, in modifiers : int) : void
        setState(!state);
        Toolkit.getEventQueue().postEvent(
            new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED,
                          getLabel(),
                          state ? ItemEvent.SELECTED :
                                  ItemEvent.DESELECTED));
!!!6130690.java!!!	paramString() : String
        return super.paramString() + ",state=" + state;
!!!6130818.java!!!	writeObject(inout s : ObjectOutputStream) : void
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, itemListenerK, itemListener);
      s.writeObject(null);
!!!6130946.java!!!	readObject(inout s : ObjectInputStream) : void
      s.defaultReadObject();

      Object keyOrNull;
      while(null != (keyOrNull = s.readObject())) {
        String key = ((String)keyOrNull).intern();

        if (itemListenerK == key)
          addItemListener((ItemListener)(s.readObject()));

        else // skip value for unrecognized key
          s.readObject();
      }
!!!6131202.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTCheckboxMenuItem();
        }
        return accessibleContext;
