class Label
!!!6255106.java!!!	Label()
        this("", LEFT);
!!!6255234.java!!!	Label(inout text : String)
        this(text, LEFT);
!!!6255362.java!!!	Label(inout text : String, in alignment : int)
        GraphicsEnvironment.checkHeadless();
        this.text = text;
        setAlignment(alignment);
!!!6255490.java!!!	readObject(inout s : ObjectInputStream) : void
        GraphicsEnvironment.checkHeadless();
        s.defaultReadObject();
!!!6255618.java!!!	constructComponentName() : String
        synchronized (Label.class) {
            return base + nameCounter++;
        }
!!!6255746.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = getToolkit().createLabel(this);
            super.addNotify();
        }
!!!6255874.java!!!	getAlignment() : int
        return alignment;
!!!6256002.java!!!	setAlignment(in alignment : int) : void
        switch (alignment) {
          case LEFT:
          case CENTER:
          case RIGHT:
            this.alignment = alignment;
            LabelPeer peer = (LabelPeer)this.peer;
            if (peer != null) {
                peer.setAlignment(alignment);
            }
            return;
        }
        throw new IllegalArgumentException("improper alignment: " + alignment);
!!!6256130.java!!!	getText() : String
        return text;
!!!6256258.java!!!	setText(inout text : String) : void
        boolean testvalid = false;
        synchronized (this) {
            if (text != this.text && (this.text == null ||
                                      !this.text.equals(text))) {
                this.text = text;
                LabelPeer peer = (LabelPeer)this.peer;
                if (peer != null) {
                    peer.setText(text);
                }
                testvalid = true;
            }
        }

        // This could change the preferred size of the Component.
        if (testvalid) {
            invalidateIfValid();
        }
!!!6256386.java!!!	paramString() : String
        String align = "";
        switch (alignment) {
            case LEFT:   align = "left"; break;
            case CENTER: align = "center"; break;
            case RIGHT:  align = "right"; break;
        }
        return super.paramString() + ",align=" + align + ",text=" + text;
!!!6256642.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTLabel();
        }
        return accessibleContext;
