class AbstractInterruptibleChannel
!!!7778178.java!!!	close() : void
        synchronized (closeLock) {
            if (!open)
                return;
            open = false;
            implCloseChannel();
        }
!!!7778434.java!!!	isOpen() : boolean
        return open;
!!!7778562.java!!!	begin() : void
        if (interruptor == null) {
            interruptor = new Interruptible() {
                    public void interrupt(Thread target) {
                        synchronized (closeLock) {
                            if (!open)
                                return;
                            open = false;
                            interrupted = target;
                            try {
                                AbstractInterruptibleChannel.this.implCloseChannel();
                            } catch (IOException x) { }
                        }
                    }};
        }
        blockedOn(interruptor);
        Thread me = Thread.currentThread();
        if (me.isInterrupted())
            interruptor.interrupt(me);
!!!7778690.java!!!	end(inout completed : boolean) : void
        blockedOn(null);
        Thread interrupted = this.interrupted;
        if (interrupted != null && interrupted == Thread.currentThread()) {
            interrupted = null;
            throw new ClosedByInterruptException();
        }
        if (!completed && !open)
            throw new AsynchronousCloseException();
!!!7778818.java!!!	blockedOn(inout intr : Interruptible) : void
         // package-private
        sun.misc.SharedSecrets.getJavaLangAccess().blockedOn(Thread.currentThread(),
                                                             intr);
