class BasicAttribute
!!!10038914.java!!!	clone() : Object
        BasicAttribute attr;
        try {
            attr = (BasicAttribute)super.clone();
        } catch (CloneNotSupportedException e) {
            attr = new BasicAttribute(attrID, ordered);
        }
        attr.values = (Vector<Object>)values.clone();
        return attr;
!!!10039042.java!!!	equals(inout obj : Object) : boolean
        if ((obj != null) && (obj instanceof Attribute)) {
            Attribute target = (Attribute)obj;

            // Check order first
            if (isOrdered() != target.isOrdered()) {
                return false;
            }
            int len;
            if (attrID.equals(target.getID()) &&
                (len=size()) == target.size()) {
                try {
                    if (isOrdered()) {
                        // Go through both list of values
                        for (int i = 0; i < len; i++) {
                            if (!valueEquals(get(i), target.get(i))) {
                                return false;
                            }
                        }
                    } else {
                        // order is not relevant; check for existence
                        Enumeration<?> theirs = target.getAll();
                        while (theirs.hasMoreElements()) {
                            if (find(theirs.nextElement()) < 0)
                                return false;
                        }
                    }
                } catch (NamingException e) {
                    return false;
                }
                return true;
            }
        }
        return false;
!!!10039170.java!!!	hashCode() : int
        int hash = attrID.hashCode();
        int num = values.size();
        Object val;
        for (int i = 0; i < num; i ++) {
            val = values.elementAt(i);
            if (val != null) {
                if (val.getClass().isArray()) {
                    Object it;
                    int len = Array.getLength(val);
                    for (int j = 0 ; j < len ; j++) {
                        it = Array.get(val, j);
                        if (it != null) {
                            hash += it.hashCode();
                        }
                    }
                } else {
                    hash += val.hashCode();
                }
            }
        }
        return hash;
!!!10039298.java!!!	toString() : String
        StringBuffer answer = new StringBuffer(attrID + ": ");
        if (values.size() == 0) {
            answer.append("No values");
        } else {
            boolean start = true;
            for (Enumeration<Object> e = values.elements(); e.hasMoreElements(); ) {
                if (!start)
                    answer.append(", ");
                answer.append(e.nextElement());
                start = false;
            }
        }
        return answer.toString();
!!!10039426.java!!!	BasicAttribute(inout id : String)
        this(id, false);
!!!10039554.java!!!	BasicAttribute(inout id : String, inout value : Object)
        this(id, value, false);
!!!10039682.java!!!	BasicAttribute(inout id : String, inout ordered : boolean)
        attrID = id;
        values = new Vector<>();
        this.ordered = ordered;
!!!10039810.java!!!	BasicAttribute(inout id : String, inout value : Object, inout ordered : boolean)
        this(id, ordered);
        values.addElement(value);
!!!10039938.java!!!	getAll() : NamingEnumeration
      return new ValuesEnumImpl();
!!!10040066.java!!!	get() : Object
        if (values.size() == 0) {
            throw new
        NoSuchElementException("Attribute " + getID() + " has no value");
        } else {
            return values.elementAt(0);
        }
!!!10040194.java!!!	size() : int
      return values.size();
!!!10040322.java!!!	getID() : String
        return attrID;
!!!10040450.java!!!	contains(inout attrVal : Object) : boolean
        return (find(attrVal) >= 0);
!!!10040578.java!!!	find(inout target : Object) : int
        Class<?> cl;
        if (target == null) {
            int ct = values.size();
            for (int i = 0 ; i < ct ; i++) {
                if (values.elementAt(i) == null)
                    return i;
            }
        } else if ((cl=target.getClass()).isArray()) {
            int ct = values.size();
            Object it;
            for (int i = 0 ; i < ct ; i++) {
                it = values.elementAt(i);
                if (it != null && cl == it.getClass()
                    && arrayEquals(target, it))
                    return i;
            }
        } else {
            return values.indexOf(target, 0);
        }
        return -1;  // not found
!!!10040706.java!!!	valueEquals(inout obj1 : Object, inout obj2 : Object) : boolean
        if (obj1 == obj2) {
            return true; // object references are equal
        }
        if (obj1 == null) {
            return false; // obj2 was not false
        }
        if (obj1.getClass().isArray() &&
            obj2.getClass().isArray()) {
            return arrayEquals(obj1, obj2);
        }
        return (obj1.equals(obj2));
!!!10040834.java!!!	arrayEquals(inout a1 : Object, inout a2 : Object) : boolean
        int len;
        if ((len = Array.getLength(a1)) != Array.getLength(a2))
            return false;

        for (int j = 0; j < len; j++) {
            Object i1 = Array.get(a1, j);
            Object i2 = Array.get(a2, j);
            if (i1 == null || i2 == null) {
                if (i1 != i2)
                    return false;
            } else if (!i1.equals(i2)) {
                return false;
            }
        }
        return true;
!!!10040962.java!!!	add(inout attrVal : Object) : boolean
        if (isOrdered() || (find(attrVal) < 0)) {
            values.addElement(attrVal);
            return true;
        } else {
            return false;
        }
!!!10041090.java!!!	remove(inout attrval : Object) : boolean
        // For the Java 2 platform, can just use "return removeElement(attrval);"
        // Need to do the following to handle null case

        int i = find(attrval);
        if (i >= 0) {
            values.removeElementAt(i);
            return true;
        }
        return false;
!!!10041218.java!!!	clear() : void
        values.setSize(0);
!!!10041346.java!!!	isOrdered() : boolean
        return ordered;
!!!10041474.java!!!	get(in ix : int) : Object
        return values.elementAt(ix);
!!!10041602.java!!!	remove(in ix : int) : Object
        Object answer = values.elementAt(ix);
        values.removeElementAt(ix);
        return answer;
!!!10041730.java!!!	add(in ix : int, inout attrVal : Object) : void
        if (!isOrdered() && contains(attrVal)) {
            throw new IllegalStateException(
                "Cannot add duplicate to unordered attribute");
        }
        values.insertElementAt(attrVal, ix);
!!!10041858.java!!!	set(in ix : int, inout attrVal : Object) : Object
        if (!isOrdered() && contains(attrVal)) {
            throw new IllegalStateException(
                "Cannot add duplicate to unordered attribute");
        }

        Object answer = values.elementAt(ix);
        values.setElementAt(attrVal, ix);
        return answer;
!!!10041986.java!!!	getAttributeSyntaxDefinition() : DirContext
            throw new OperationNotSupportedException("attribute syntax");
!!!10042114.java!!!	getAttributeDefinition() : DirContext
        throw new OperationNotSupportedException("attribute definition");
!!!10042242.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject(); // write out the attrID
        s.writeInt(values.size());
        for (int i = 0; i < values.size(); i++) {
            s.writeObject(values.elementAt(i));
        }
!!!10042370.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();  // read in the attrID
        int n = s.readInt();    // number of values
        values = new Vector<>(Math.min(1024, n));
        while (--n >= 0) {
            values.addElement(s.readObject());
        }
