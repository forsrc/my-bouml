class CharsetDecoder
!!!7813250.java!!!	CharsetDecoder(inout cs : Charset, in averageCharsPerByte : float, in maxCharsPerByte : float, inout replacement : String)
        this.charset = cs;
        if (averageCharsPerByte <= 0.0f)
            throw new IllegalArgumentException("Non-positive "
                                               + "averageCharsPerByte");
        if (maxCharsPerByte <= 0.0f)
            throw new IllegalArgumentException("Non-positive "
                                               + "maxCharsPerByte");
        if (!Charset.atBugLevel("1.4")) {
            if (averageCharsPerByte > maxCharsPerByte)
                throw new IllegalArgumentException("averageCharsPerByte"
                                                   + " exceeds "
                                                   + "maxCharsPerByte");
        }
        this.replacement = replacement;
        this.averageCharsPerByte = averageCharsPerByte;
        this.maxCharsPerByte = maxCharsPerByte;
        replaceWith(replacement);
!!!7813378.java!!!	CharsetDecoder(inout cs : Charset, in averageCharsPerByte : float, in maxCharsPerByte : float)
        this(cs,
             averageCharsPerByte, maxCharsPerByte,
             "\uFFFD");
!!!7813506.java!!!	charset() : Charset
        return charset;
!!!7813634.java!!!	replacement() : String

        return replacement;




!!!7813762.java!!!	replaceWith(inout newReplacement : String) : CharsetDecoder
        if (newReplacement == null)
            throw new IllegalArgumentException("Null replacement");
        int len = newReplacement.length();
        if (len == 0)
            throw new IllegalArgumentException("Empty replacement");
        if (len > maxCharsPerByte)
            throw new IllegalArgumentException("Replacement too long");

        this.replacement = newReplacement;






        implReplaceWith(this.replacement);
        return this;
!!!7814018.java!!!	malformedInputAction() : CodingErrorAction
        return malformedInputAction;
!!!7814146.java!!!	onMalformedInput(inout newAction : CodingErrorAction) : CharsetDecoder
        if (newAction == null)
            throw new IllegalArgumentException("Null action");
        malformedInputAction = newAction;
        implOnMalformedInput(newAction);
        return this;
!!!7814402.java!!!	unmappableCharacterAction() : CodingErrorAction
        return unmappableCharacterAction;
!!!7814530.java!!!	onUnmappableCharacter(inout newAction : CodingErrorAction) : CharsetDecoder
        if (newAction == null)
            throw new IllegalArgumentException("Null action");
        unmappableCharacterAction = newAction;
        implOnUnmappableCharacter(newAction);
        return this;
!!!7814786.java!!!	averageCharsPerByte() : float
        return averageCharsPerByte;
!!!7814914.java!!!	maxCharsPerByte() : float
        return maxCharsPerByte;
!!!7815042.java!!!	decode(inout in : ByteBuffer, inout out : CharBuffer, inout endOfInput : boolean) : CoderResult
        int newState = endOfInput ? ST_END : ST_CODING;
        if ((state != ST_RESET) && (state != ST_CODING)
            && !(endOfInput && (state == ST_END)))
            throwIllegalStateException(state, newState);
        state = newState;

        for (;;) {

            CoderResult cr;
            try {
                cr = decodeLoop(in, out);
            } catch (BufferUnderflowException x) {
                throw new CoderMalfunctionError(x);
            } catch (BufferOverflowException x) {
                throw new CoderMalfunctionError(x);
            }

            if (cr.isOverflow())
                return cr;

            if (cr.isUnderflow()) {
                if (endOfInput && in.hasRemaining()) {
                    cr = CoderResult.malformedForLength(in.remaining());
                    // Fall through to malformed-input case
                } else {
                    return cr;
                }
            }

            CodingErrorAction action = null;
            if (cr.isMalformed())
                action = malformedInputAction;
            else if (cr.isUnmappable())
                action = unmappableCharacterAction;
            else
                assert false : cr.toString();

            if (action == CodingErrorAction.REPORT)
                return cr;

            if (action == CodingErrorAction.REPLACE) {
                if (out.remaining() < replacement.length())
                    return CoderResult.OVERFLOW;
                out.put(replacement);
            }

            if ((action == CodingErrorAction.IGNORE)
                || (action == CodingErrorAction.REPLACE)) {
                // Skip erroneous input either way
                in.position(in.position() + cr.length());
                continue;
            }

            assert false;
        }

!!!7815170.java!!!	flush(inout out : CharBuffer) : CoderResult
        if (state == ST_END) {
            CoderResult cr = implFlush(out);
            if (cr.isUnderflow())
                state = ST_FLUSHED;
            return cr;
        }

        if (state != ST_FLUSHED)
            throwIllegalStateException(state, ST_FLUSHED);

        return CoderResult.UNDERFLOW; // Already flushed
!!!7815298.java!!!	implFlush(inout out : CharBuffer) : CoderResult
        return CoderResult.UNDERFLOW;
!!!7815426.java!!!	reset() : CharsetDecoder
        implReset();
        state = ST_RESET;
        return this;
!!!7815810.java!!!	decode(inout in : ByteBuffer) : CharBuffer
        int n = (int)(in.remaining() * averageCharsPerByte());
        CharBuffer out = CharBuffer.allocate(n);

        if ((n == 0) && (in.remaining() == 0))
            return out;
        reset();
        for (;;) {
            CoderResult cr = in.hasRemaining() ?
                decode(in, out, true) : CoderResult.UNDERFLOW;
            if (cr.isUnderflow())
                cr = flush(out);

            if (cr.isUnderflow())
                break;
            if (cr.isOverflow()) {
                n = 2*n + 1;    // Ensure progress; n might be 0!
                CharBuffer o = CharBuffer.allocate(n);
                out.flip();
                o.put(out);
                out = o;
                continue;
            }
            cr.throwException();
        }
        out.flip();
        return out;
!!!7815938.java!!!	isAutoDetecting() : boolean
        return false;
!!!7816066.java!!!	isCharsetDetected() : boolean
        throw new UnsupportedOperationException();
!!!7816194.java!!!	detectedCharset() : Charset
        throw new UnsupportedOperationException();
!!!7816322.java!!!	throwIllegalStateException(in from : int, in to : int) : void
        throw new IllegalStateException("Current state = " + stateNames[from]
                                        + ", new state = " + stateNames[to]);
