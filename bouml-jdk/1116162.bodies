class SubMapIter
!!!9131522.java!!!	SubMapIter()
                Comparator<? super K> cmp = m.comparator;
                for (;;) {
                    next = isDescending ? hiNode(cmp) : loNode(cmp);
                    if (next == null)
                        break;
                    Object x = next.value;
                    if (x != null && x != next) {
                        if (! inBounds(next.key, cmp))
                            next = null;
                        else {
                            @SuppressWarnings("unchecked") V vv = (V)x;
                            nextValue = vv;
                        }
                        break;
                    }
                }
!!!9131650.java!!!	hasNext() : boolean
                return next != null;
!!!9131778.java!!!	advance() : void
                if (next == null)
                    throw new NoSuchElementException();
                lastReturned = next;
                if (isDescending)
                    descend();
                else
                    ascend();
!!!9131906.java!!!	ascend() : void
                Comparator<? super K> cmp = m.comparator;
                for (;;) {
                    next = next.next;
                    if (next == null)
                        break;
                    Object x = next.value;
                    if (x != null && x != next) {
                        if (tooHigh(next.key, cmp))
                            next = null;
                        else {
                            @SuppressWarnings("unchecked") V vv = (V)x;
                            nextValue = vv;
                        }
                        break;
                    }
                }
!!!9132034.java!!!	descend() : void
                Comparator<? super K> cmp = m.comparator;
                for (;;) {
                    next = m.findNear(lastReturned.key, LT, cmp);
                    if (next == null)
                        break;
                    Object x = next.value;
                    if (x != null && x != next) {
                        if (tooLow(next.key, cmp))
                            next = null;
                        else {
                            @SuppressWarnings("unchecked") V vv = (V)x;
                            nextValue = vv;
                        }
                        break;
                    }
                }
!!!9132162.java!!!	remove() : void
                Node<K,V> l = lastReturned;
                if (l == null)
                    throw new IllegalStateException();
                m.remove(l.key);
                lastReturned = null;
!!!9132290.java!!!	trySplit() : Spliterator
                return null;
!!!9132418.java!!!	tryAdvance(inout action : Consumer) : boolean
                if (hasNext()) {
                    action.accept(next());
                    return true;
                }
                return false;
!!!9132546.java!!!	forEachRemaining(inout action : Consumer) : void
                while (hasNext())
                    action.accept(next());
!!!9132674.java!!!	estimateSize() : long
                return Long.MAX_VALUE;
