class AtomicStampedReference
!!!9282050.java!!!	AtomicStampedReference(inout initialRef : V, in initialStamp : int)
        pair = Pair.of(initialRef, initialStamp);
!!!9282178.java!!!	getReference() : V
        return pair.reference;
!!!9282306.java!!!	getStamp() : int
        return pair.stamp;
!!!9282434.java!!!	get(inout stampHolder : int [[]]) : V
        Pair<V> pair = this.pair;
        stampHolder[0] = pair.stamp;
        return pair.reference;
!!!9282562.java!!!	weakCompareAndSet(inout expectedReference : V, inout newReference : V, in expectedStamp : int, in newStamp : int) : boolean
        return compareAndSet(expectedReference, newReference,
                             expectedStamp, newStamp);
!!!9282690.java!!!	compareAndSet(inout expectedReference : V, inout newReference : V, in expectedStamp : int, in newStamp : int) : boolean
        Pair<V> current = pair;
        return
            expectedReference == current.reference &&
            expectedStamp == current.stamp &&
            ((newReference == current.reference &&
              newStamp == current.stamp) ||
             casPair(current, Pair.of(newReference, newStamp)));
!!!9282818.java!!!	set(inout newReference : V, in newStamp : int) : void
        Pair<V> current = pair;
        if (newReference != current.reference || newStamp != current.stamp)
            this.pair = Pair.of(newReference, newStamp);
!!!9282946.java!!!	attemptStamp(inout expectedReference : V, in newStamp : int) : boolean
        Pair<V> current = pair;
        return
            expectedReference == current.reference &&
            (newStamp == current.stamp ||
             casPair(current, Pair.of(expectedReference, newStamp)));
!!!9283074.java!!!	casPair(inout cmp : AtomicStampedReference::Pair, inout val : AtomicStampedReference::Pair) : boolean
        return UNSAFE.compareAndSwapObject(this, pairOffset, cmp, val);
!!!9283202.java!!!	objectFieldOffset(inout UNSAFE : sun.misc.Unsafe, inout field : String, inout klazz : Class) : long
        try {
            return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
        } catch (NoSuchFieldException e) {
            // Convert Exception to corresponding Error
            NoSuchFieldError error = new NoSuchFieldError(field);
            error.initCause(e);
            throw error;
        }
