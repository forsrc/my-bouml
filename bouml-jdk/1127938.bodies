class AtomicLongArray
!!!9264130.java!!!	checkedByteOffset(in i : int) : long
        if (i < 0 || i >= array.length)
            throw new IndexOutOfBoundsException("index " + i);

        return byteOffset(i);
!!!9264258.java!!!	byteOffset(in i : int) : long
        return ((long) i << shift) + base;
!!!9264386.java!!!	AtomicLongArray(in length : int)
        array = new long[length];
!!!9264514.java!!!	AtomicLongArray(inout array : long [[]])
        // Visibility guaranteed by final field guarantees
        this.array = array.clone();
!!!9264642.java!!!	length() : int
        return array.length;
!!!9264770.java!!!	get(in i : int) : long
        return getRaw(checkedByteOffset(i));
!!!9264898.java!!!	getRaw(in offset : long) : long
        return unsafe.getLongVolatile(array, offset);
!!!9265026.java!!!	set(in i : int, in newValue : long) : void
        unsafe.putLongVolatile(array, checkedByteOffset(i), newValue);
!!!9265154.java!!!	lazySet(in i : int, in newValue : long) : void
        unsafe.putOrderedLong(array, checkedByteOffset(i), newValue);
!!!9265282.java!!!	getAndSet(in i : int, in newValue : long) : long
        return unsafe.getAndSetLong(array, checkedByteOffset(i), newValue);
!!!9265410.java!!!	compareAndSet(in i : int, in expect : long, in update : long) : boolean
        return compareAndSetRaw(checkedByteOffset(i), expect, update);
!!!9265538.java!!!	compareAndSetRaw(in offset : long, in expect : long, in update : long) : boolean
        return unsafe.compareAndSwapLong(array, offset, expect, update);
!!!9265666.java!!!	weakCompareAndSet(in i : int, in expect : long, in update : long) : boolean
        return compareAndSet(i, expect, update);
!!!9265794.java!!!	getAndIncrement(in i : int) : long
        return getAndAdd(i, 1);
!!!9265922.java!!!	getAndDecrement(in i : int) : long
        return getAndAdd(i, -1);
!!!9266050.java!!!	getAndAdd(in i : int, in delta : long) : long
        return unsafe.getAndAddLong(array, checkedByteOffset(i), delta);
!!!9266178.java!!!	incrementAndGet(in i : int) : long
        return getAndAdd(i, 1) + 1;
!!!9266306.java!!!	decrementAndGet(in i : int) : long
        return getAndAdd(i, -1) - 1;
!!!9266434.java!!!	addAndGet(in i : int, in delta : long) : long
        return getAndAdd(i, delta) + delta;
!!!9266562.java!!!	getAndUpdate(in i : int, inout updateFunction : LongUnaryOperator) : long
        long offset = checkedByteOffset(i);
        long prev, next;
        do {
            prev = getRaw(offset);
            next = updateFunction.applyAsLong(prev);
        } while (!compareAndSetRaw(offset, prev, next));
        return prev;
!!!9266690.java!!!	updateAndGet(in i : int, inout updateFunction : LongUnaryOperator) : long
        long offset = checkedByteOffset(i);
        long prev, next;
        do {
            prev = getRaw(offset);
            next = updateFunction.applyAsLong(prev);
        } while (!compareAndSetRaw(offset, prev, next));
        return next;
!!!9266818.java!!!	getAndAccumulate(in i : int, in x : long, inout accumulatorFunction : LongBinaryOperator) : long
        long offset = checkedByteOffset(i);
        long prev, next;
        do {
            prev = getRaw(offset);
            next = accumulatorFunction.applyAsLong(prev, x);
        } while (!compareAndSetRaw(offset, prev, next));
        return prev;
!!!9266946.java!!!	accumulateAndGet(in i : int, in x : long, inout accumulatorFunction : LongBinaryOperator) : long
        long offset = checkedByteOffset(i);
        long prev, next;
        do {
            prev = getRaw(offset);
            next = accumulatorFunction.applyAsLong(prev, x);
        } while (!compareAndSetRaw(offset, prev, next));
        return next;
!!!9267074.java!!!	toString() : String
        int iMax = array.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(getRaw(byteOffset(i)));
            if (i == iMax)
                return b.append(']').toString();
            b.append(',').append(' ');
        }
