class CoreDOMImplementationImpl
!!!4222850.java!!!	getDOMImplementation() : DOMImplementation
                return singleton;
!!!4222978.java!!!	hasFeature(inout feature : String, inout version : String) : boolean

            boolean anyVersion = version == null || version.length() == 0;

            // check if Xalan implementation is around and if yes report true for supporting
            // XPath API
            // if a plus sign "+" is prepended to any feature name, implementations
            // are considered in which the specified feature may not be directly
            // castable DOMImplementation.getFeature(feature, version). Without a
            // plus, only features whose interfaces are directly castable are considered.
            if ((feature.equalsIgnoreCase("+XPath"))
                && (anyVersion || version.equals("3.0"))) {
                try {
                    Class xpathClass = ObjectFactory.findProviderClass(
                        "com.sun.org.apache.xpath.internal.domapi.XPathEvaluatorImpl", true);

                // Check if the DOM XPath implementation implements
                // the interface org.w3c.dom.XPathEvaluator
                Class interfaces[] = xpathClass.getInterfaces();
                for (int i = 0; i < interfaces.length; i++) {
                    if (interfaces[i].getName().equals(
                        "org.w3c.dom.xpath.XPathEvaluator")) {
                        return true;
                    }
                }
                } catch (Exception e) {
                    return false;
                }
                return true;
            }
            if (feature.startsWith("+")) {
                feature = feature.substring(1);
            }
            return (
                feature.equalsIgnoreCase("Core")
                    && (anyVersion
                        || version.equals("1.0")
                        || version.equals("2.0")
                        || version.equals("3.0")))
                        || (feature.equalsIgnoreCase("XML")
                    && (anyVersion
                        || version.equals("1.0")
                        || version.equals("2.0")
                        || version.equals("3.0")))
                        || (feature.equalsIgnoreCase("LS")
                    && (anyVersion || version.equals("3.0")));
!!!4223106.java!!!	createDocumentType(inout qualifiedName : String, inout publicID : String, inout systemID : String) : DocumentType
                // REVISIT: this might allow creation of invalid name for DOCTYPE
                //          xmlns prefix.
                //          also there is no way for a user to turn off error checking.
                checkQName(qualifiedName);
                return new DocumentTypeImpl(null, qualifiedName, publicID, systemID);
!!!4223234.java!!!	checkQName(inout qname : String) : void
        int index = qname.indexOf(':');
        int lastIndex = qname.lastIndexOf(':');
        int length = qname.length();

        // it is an error for NCName to have more than one ':'
        // check if it is valid QName [Namespace in XML production 6]
        if (index == 0 || index == length - 1 || lastIndex != index) {
            String msg =
                DOMMessageFormatter.formatMessage(
                    DOMMessageFormatter.DOM_DOMAIN,
                    "NAMESPACE_ERR",
                    null);
            throw new DOMException(DOMException.NAMESPACE_ERR, msg);
        }
        int start = 0;
        // Namespace in XML production [6]
        if (index > 0) {
            // check that prefix is NCName
            if (!XMLChar.isNCNameStart(qname.charAt(start))) {
                String msg =
                    DOMMessageFormatter.formatMessage(
                        DOMMessageFormatter.DOM_DOMAIN,
                        "INVALID_CHARACTER_ERR",
                        null);
                throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
            }
            for (int i = 1; i < index; i++) {
                if (!XMLChar.isNCName(qname.charAt(i))) {
                    String msg =
                        DOMMessageFormatter.formatMessage(
                            DOMMessageFormatter.DOM_DOMAIN,
                            "INVALID_CHARACTER_ERR",
                            null);
                    throw new DOMException(
                        DOMException.INVALID_CHARACTER_ERR,
                        msg);
                }
            }
            start = index + 1;
        }

        // check local part
        if (!XMLChar.isNCNameStart(qname.charAt(start))) {
            // REVISIT: add qname parameter to the message
            String msg =
                DOMMessageFormatter.formatMessage(
                    DOMMessageFormatter.DOM_DOMAIN,
                    "INVALID_CHARACTER_ERR",
                    null);
            throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
        }
        for (int i = start + 1; i < length; i++) {
            if (!XMLChar.isNCName(qname.charAt(i))) {
                String msg =
                    DOMMessageFormatter.formatMessage(
                        DOMMessageFormatter.DOM_DOMAIN,
                        "INVALID_CHARACTER_ERR",
                        null);
                throw new DOMException(DOMException.INVALID_CHARACTER_ERR, msg);
            }
        }
!!!4223362.java!!!	createDocument(inout namespaceURI : String, inout qualifiedName : String, inout doctype : DocumentType) : Document
                if (doctype != null && doctype.getOwnerDocument() != null) {
                        String msg =
                                DOMMessageFormatter.formatMessage(
                                        DOMMessageFormatter.DOM_DOMAIN,
                                        "WRONG_DOCUMENT_ERR",
                                        null);
                        throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
                }
                CoreDocumentImpl doc = new CoreDocumentImpl(doctype);
                Element e = doc.createElementNS(namespaceURI, qualifiedName);
                doc.appendChild(e);
                return doc;
!!!4223490.java!!!	getFeature(inout feature : String, inout version : String) : Object
            if (singleton.hasFeature(feature, version)) {
                if ((feature.equalsIgnoreCase("+XPath"))) {
                    try {
                        Class xpathClass = ObjectFactory.findProviderClass(
                            "com.sun.org.apache.xpath.internal.domapi.XPathEvaluatorImpl", true);
                        // Check if the DOM XPath implementation implements
                        // the interface org.w3c.dom.XPathEvaluator
                        Class interfaces[] = xpathClass.getInterfaces();
                        for (int i = 0; i < interfaces.length; i++) {
                            if (interfaces[i].getName().equals(
                                "org.w3c.dom.xpath.XPathEvaluator")) {
                                return xpathClass.newInstance();
                            }
                        }
                    } catch (Exception e) {
                        return null;
                    }
                } else {
                    return singleton;
                }
            }
            return null;
!!!4223618.java!!!	createLSParser(in mode : short, inout schemaType : String) : LSParser
                if (mode != DOMImplementationLS.MODE_SYNCHRONOUS || (schemaType !=null &&
                   !"http://www.w3.org/2001/XMLSchema".equals(schemaType) &&
                        !"http://www.w3.org/TR/REC-xml".equals(schemaType))) {
                        String msg =
                                DOMMessageFormatter.formatMessage(
                                        DOMMessageFormatter.DOM_DOMAIN,
                                        "NOT_SUPPORTED_ERR",
                                        null);
                        throw new DOMException(DOMException.NOT_SUPPORTED_ERR, msg);
                }
                if (schemaType != null
                        && schemaType.equals("http://www.w3.org/TR/REC-xml")) {
                        return new DOMParserImpl(new DTDConfiguration(),
                                schemaType);
                }
                else {
                        // create default parser configuration validating against XMLSchemas
                        return new DOMParserImpl(new XIncludeAwareParserConfiguration(),
                                schemaType);
                }
!!!4223746.java!!!	createLSSerializer() : LSSerializer
        return new DOMSerializerImpl();
!!!4223874.java!!!	createLSInput() : LSInput
                return new DOMInputImpl();
!!!4224002.java!!!	getValidator(inout schemaType : String) : RevalidationHandler
                // REVISIT: implement retrieving DTD validator
        if (schemaType == XMLGrammarDescription.XML_SCHEMA) {
            // create new validator - we should not attempt
            // to restrict the number of validation handlers being
            // requested
            if(freeValidatorIndex < 0) {
                return (RevalidationHandler) (ObjectFactory
                            .newInstance(
                                "com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator",
                                ObjectFactory.findClassLoader(),
                                true));
            }
            // return first available validator
            RevalidationHandler val = validators[freeValidatorIndex];
            validators[freeValidatorIndex--] = null;
            return val;
        }
        else if(schemaType == XMLGrammarDescription.XML_DTD) {
            if(freeDTDValidatorIndex < 0) {
                return (RevalidationHandler) (ObjectFactory
                            .newInstance(
                                "com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator",
                                ObjectFactory.findClassLoader(),
                                true));
            }
            // return first available validator
            RevalidationHandler val = dtdValidators[freeDTDValidatorIndex];
            dtdValidators[freeDTDValidatorIndex--] = null;
            return val;
        }
        return null;
!!!4224130.java!!!	releaseValidator(inout schemaType : String, inout validator : RevalidationHandler) : void
       // REVISIT: implement support for DTD validators as well
       if(schemaType == XMLGrammarDescription.XML_SCHEMA) {
           ++freeValidatorIndex;
           if (validators.length == freeValidatorIndex ){
                // resize size of the validators
                currentSize+=SIZE;
                RevalidationHandler newarray[] =  new RevalidationHandler[currentSize];
                System.arraycopy(validators, 0, newarray, 0, validators.length);
                validators = newarray;
           }
           validators[freeValidatorIndex]=validator;
       }
       else if(schemaType == XMLGrammarDescription.XML_DTD) {
           ++freeDTDValidatorIndex;
           if (dtdValidators.length == freeDTDValidatorIndex ){
                // resize size of the validators
                currentSize+=SIZE;
                RevalidationHandler newarray[] =  new RevalidationHandler[currentSize];
                System.arraycopy(dtdValidators, 0, newarray, 0, dtdValidators.length);
                dtdValidators = newarray;
           }
           dtdValidators[freeDTDValidatorIndex]=validator;
       }
!!!4224258.java!!!	assignDocumentNumber() : int
            return ++docAndDoctypeCounter;
!!!4224386.java!!!	assignDocTypeNumber() : int
            return ++docAndDoctypeCounter;
!!!4224514.java!!!	createLSOutput() : LSOutput
           return new DOMOutputImpl();
