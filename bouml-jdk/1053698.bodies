class ChronoZonedDateTime
!!!8421762.java!!!	timeLineOrder() : Comparator
        return AbstractChronology.INSTANT_ORDER;
!!!8421890.java!!!	from(inout temporal : TemporalAccessor) : ChronoZonedDateTime
        if (temporal instanceof ChronoZonedDateTime) {
            return (ChronoZonedDateTime<?>) temporal;
        }
        Objects.requireNonNull(temporal, "temporal");
        Chronology chrono = temporal.query(TemporalQueries.chronology());
        if (chrono == null) {
            throw new DateTimeException("Unable to obtain ChronoZonedDateTime from TemporalAccessor: " + temporal.getClass());
        }
        return chrono.zonedDateTime(temporal);
!!!8422018.java!!!	range(inout field : TemporalField) : ValueRange
        if (field instanceof ChronoField) {
            if (field == INSTANT_SECONDS || field == OFFSET_SECONDS) {
                return field.range();
            }
            return toLocalDateTime().range(field);
        }
        return field.rangeRefinedBy(this);
!!!8422146.java!!!	get(inout field : TemporalField) : int
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case INSTANT_SECONDS:
                    throw new UnsupportedTemporalTypeException("Invalid field 'InstantSeconds' for get() method, use getLong() instead");
                case OFFSET_SECONDS:
                    return getOffset().getTotalSeconds();
            }
            return toLocalDateTime().get(field);
        }
        return Temporal.super.get(field);
!!!8422274.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case INSTANT_SECONDS: return toEpochSecond();
                case OFFSET_SECONDS: return getOffset().getTotalSeconds();
            }
            return toLocalDateTime().getLong(field);
        }
        return field.getFrom(this);
!!!8422402.java!!!	toLocalDate() : D
        return toLocalDateTime().toLocalDate();
!!!8422530.java!!!	toLocalTime() : LocalTime
        return toLocalDateTime().toLocalTime();
!!!8422786.java!!!	getChronology() : Chronology
        return toLocalDate().getChronology();
!!!8423810.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit != FOREVER;
        }
        return unit != null && unit.isSupportedBy(this);
!!!8423938.java!!!	with(inout adjuster : TemporalAdjuster) : ChronoZonedDateTime
        return ChronoZonedDateTimeImpl.ensureValid(getChronology(), Temporal.super.with(adjuster));
!!!8424194.java!!!	plus(inout amount : TemporalAmount) : ChronoZonedDateTime
        return ChronoZonedDateTimeImpl.ensureValid(getChronology(), Temporal.super.plus(amount));
!!!8424450.java!!!	minus(inout amount : TemporalAmount) : ChronoZonedDateTime
        return ChronoZonedDateTimeImpl.ensureValid(getChronology(), Temporal.super.minus(amount));
!!!8424578.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : ChronoZonedDateTime
        return ChronoZonedDateTimeImpl.ensureValid(getChronology(), Temporal.super.minus(amountToSubtract, unit));
!!!8424706.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.zone() || query == TemporalQueries.zoneId()) {
            return (R) getZone();
        } else if (query == TemporalQueries.offset()) {
            return (R) getOffset();
        } else if (query == TemporalQueries.localTime()) {
            return (R) toLocalTime();
        } else if (query == TemporalQueries.chronology()) {
            return (R) getChronology();
        } else if (query == TemporalQueries.precision()) {
            return (R) NANOS;
        }
        // inline TemporalAccessor.super.query(query) as an optimization
        // non-JDK classes are not permitted to make this optimization
        return query.queryFrom(this);
!!!8424834.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8424962.java!!!	toInstant() : Instant
        return Instant.ofEpochSecond(toEpochSecond(), toLocalTime().getNano());
!!!8425090.java!!!	toEpochSecond() : long
        long epochDay = toLocalDate().toEpochDay();
        long secs = epochDay * 86400 + toLocalTime().toSecondOfDay();
        secs -= getOffset().getTotalSeconds();
        return secs;
!!!8425218.java!!!	compareTo(inout other : ChronoZonedDateTime) : int
        int cmp = Long.compare(toEpochSecond(), other.toEpochSecond());
        if (cmp == 0) {
            cmp = toLocalTime().getNano() - other.toLocalTime().getNano();
            if (cmp == 0) {
                cmp = toLocalDateTime().compareTo(other.toLocalDateTime());
                if (cmp == 0) {
                    cmp = getZone().getId().compareTo(other.getZone().getId());
                    if (cmp == 0) {
                        cmp = getChronology().compareTo(other.getChronology());
                    }
                }
            }
        }
        return cmp;
!!!8425346.java!!!	isBefore(inout other : ChronoZonedDateTime) : boolean
        long thisEpochSec = toEpochSecond();
        long otherEpochSec = other.toEpochSecond();
        return thisEpochSec < otherEpochSec ||
            (thisEpochSec == otherEpochSec && toLocalTime().getNano() < other.toLocalTime().getNano());
!!!8425474.java!!!	isAfter(inout other : ChronoZonedDateTime) : boolean
        long thisEpochSec = toEpochSecond();
        long otherEpochSec = other.toEpochSecond();
        return thisEpochSec > otherEpochSec ||
            (thisEpochSec == otherEpochSec && toLocalTime().getNano() > other.toLocalTime().getNano());
!!!8425602.java!!!	isEqual(inout other : ChronoZonedDateTime) : boolean
        return toEpochSecond() == other.toEpochSecond() &&
                toLocalTime().getNano() == other.toLocalTime().getNano();
