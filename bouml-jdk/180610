format 222
"renderable" // jdk1.8::java::awt::image::renderable
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/image/renderable/"
  java_package "java.awt.image.renderable"
  classview 173314 "renderable"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 867330 "RenderableImage"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RenderableImage is a common interface for rendering-independent
images (a notion which subsumes resolution independence).  That is,
images which are described and have operations applied to them
independent of any specific rendering of the image.  For example, a
RenderableImage can be rotated and cropped in
resolution-independent terms.  Then, it can be rendered for various
specific contexts, such as a draft preview, a high-quality screen
display, or a printer, each in an optimal fashion.

<p> A RenderedImage is returned from a RenderableImage via the
createRendering() method, which takes a RenderContext.  The
RenderContext specifies how the RenderedImage should be
constructed.  Note that it is not possible to extract pixels
directly from a RenderableImage.

<p> The createDefaultRendering() and createScaledRendering() methods are
convenience methods that construct an appropriate RenderContext
internally.  All of the rendering methods may return a reference to a
previously produced rendering.
"
      classrelation 3077890 // HINTS_OBSERVED (<unidirectional association>)
	relation 3077890 --->
	  a role_name "HINTS_OBSERVED" init_value " \"HINTS_OBSERVED\"" class_relation const_relation public
	    comment "
String constant that can be used to identify a property on
a RenderedImage obtained via the createRendering or
createScaledRendering methods.  If such a property exists,
the value of the property will be a RenderingHints object
specifying which hints were observed in creating the rendering.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3077890 // HINTS_OBSERVED (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6709762 "getSources"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RenderableImage> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a vector of RenderableImages that are the sources of
image data for this RenderableImage. Note that this method may
return an empty vector, to indicate that the image has no sources,
or null, to indicate that no information is available.

@return a (possibly empty) Vector of RenderableImages, or null.
"
      end

      operation 6709890 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a property from the property set of this image.
If the property name is not recognized, java.awt.Image.UndefinedProperty
will be returned.

@param name the name of the property to get, as a String.
@return a reference to the property Object, or the value
        java.awt.Image.UndefinedProperty.
"
      end

      operation 6710018 "getPropertyNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of names recognized by getProperty.
@return a list of property names.
"
      end

      operation 6710146 "isDynamic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if successive renderings (that is, calls to
createRendering() or createScaledRendering()) with the same arguments
may produce different results.  This method may be used to
determine whether an existing rendering may be cached and
reused.  It is always safe to return true.
@return <code>true</code> if successive renderings with the
        same arguments might produce different results;
        <code>false</code> otherwise.
"
      end

      operation 6710274 "getWidth"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the width in user coordinate space.  By convention, the
usual width of a RenderableImage is equal to the image's aspect
ratio (width divided by height).

@return the width of the image in user coordinates.
"
      end

      operation 6710402 "getHeight"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the height in user coordinate space.  By convention, the
usual height of a RenderedImage is equal to 1.0F.

@return the height of the image in user coordinates.
"
      end

      operation 6710530 "getMinX"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimum X coordinate of the rendering-independent image data.
@return the minimum X coordinate of the rendering-independent image
data.
"
      end

      operation 6710658 "getMinY"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimum Y coordinate of the rendering-independent image data.
@return the minimum Y coordinate of the rendering-independent image
data.
"
      end

      operation 6710786 "createScaledRendering"
	public return_type class_ref 313986 // RenderedImage
	nparams 3
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a RenderedImage instance of this image with width w, and
height h in pixels.  The RenderContext is built automatically
with an appropriate usr2dev transform and an area of interest
of the full image.  All the rendering hints come from hints
passed in.

<p> If w == 0, it will be taken to equal
Math.round(h*(getWidth()/getHeight())).
Similarly, if h == 0, it will be taken to equal
Math.round(w*(getHeight()/getWidth())).  One of
w or h must be non-zero or else an IllegalArgumentException
will be thrown.

<p> The created RenderedImage may have a property identified
by the String HINTS_OBSERVED to indicate which RenderingHints
were used to create the image.  In addition any RenderedImages
that are obtained via the getSources() method on the created
RenderedImage may have such a property.

@param w the width of rendered image in pixels, or 0.
@param h the height of rendered image in pixels, or 0.
@param hints a RenderingHints object containing hints.
@return a RenderedImage containing the rendered data.
"
      end

      operation 6710914 "createDefaultRendering"
	public return_type class_ref 313986 // RenderedImage
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returnd a RenderedImage instance of this image with a default
width and height in pixels.  The RenderContext is built
automatically with an appropriate usr2dev transform and an area
of interest of the full image.  The rendering hints are
empty.  createDefaultRendering may make use of a stored
rendering for speed.

@return a RenderedImage containing the rendered data.
"
      end

      operation 6711042 "createRendering"
	public return_type class_ref 313986 // RenderedImage
	nparams 1
	  param inout name "renderContext" type class_ref 900866 // RenderContext
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a RenderedImage that represented a rendering of this image
using a given RenderContext.  This is the most general way to obtain a
rendering of a RenderableImage.

<p> The created RenderedImage may have a property identified
by the String HINTS_OBSERVED to indicate which RenderingHints
(from the RenderContext) were used to create the image.
In addition any RenderedImages
that are obtained via the getSources() method on the created
RenderedImage may have such a property.

@param renderContext the RenderContext to use to produce the rendering.
@return a RenderedImage containing the rendered data.
"
      end
    end

    class 900482 "ContextualRenderedImageFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ContextualRenderedImageFactory provides an interface for the
functionality that may differ between instances of
RenderableImageOp.  Thus different operations on RenderableImages
may be performed by a single class such as RenderedImageOp through
the use of multiple instances of ContextualRenderedImageFactory.
The name ContextualRenderedImageFactory is commonly shortened to
\"CRIF.\"

<p> All operations that are to be used in a rendering-independent
chain must implement ContextualRenderedImageFactory.

<p> Classes that implement this interface must provide a
constructor with no arguments.
"
      classrelation 3077250 // <generalisation>
	relation 3077250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3077250 // <generalisation>
	  b parent class_ref 900610 // RenderedImageFactory
      end

      operation 6703490 "mapRenderContext"
	public return_type class_ref 900866 // RenderContext
	nparams 4
	  param in name "i" explicit_type "int"
	  param inout name "renderContext" type class_ref 900866 // RenderContext
	  param inout name "paramBlock" type class_ref 900738 // ParameterBlock
	  param inout name "image" type class_ref 867330 // RenderableImage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps the operation's output RenderContext into a RenderContext
for each of the operation's sources.  This is useful for
operations that can be expressed in whole or in part simply as
alterations in the RenderContext, such as an affine mapping, or
operations that wish to obtain lower quality renderings of
their sources in order to save processing effort or
transmission bandwith.  Some operations, such as blur, can also
use this mechanism to avoid obtaining sources of higher quality
than necessary.

@param i the index of the source image.
@param renderContext the RenderContext being applied to the operation.
@param paramBlock a ParameterBlock containing the operation's
       sources and parameters.
@param image the RenderableImage being rendered.
@return a <code>RenderContext</code> for
        the source at the specified index of the parameters
        Vector contained in the specified ParameterBlock.
"
      end

      operation 6703618 "create"
	public return_type class_ref 313986 // RenderedImage
	nparams 2
	  param inout name "renderContext" type class_ref 900866 // RenderContext
	  param inout name "paramBlock" type class_ref 900738 // ParameterBlock
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a rendering, given a RenderContext and a ParameterBlock
containing the operation's sources and parameters.  The output
is a RenderedImage that takes the RenderContext into account to
determine its dimensions and placement on the image plane.
This method houses the \"intelligence\" that allows a
rendering-independent operation to adapt to a specific
RenderContext.

@param renderContext The RenderContext specifying the rendering
@param paramBlock a ParameterBlock containing the operation's
       sources and parameters
@return a <code>RenderedImage</code> from the sources and parameters
        in the specified ParameterBlock and according to the
        rendering instructions in the specified RenderContext.
"
      end

      operation 6703746 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "paramBlock" type class_ref 900738 // ParameterBlock
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box for the output of the operation,
performed on a given set of sources, in rendering-independent
space.  The bounds are returned as a Rectangle2D, that is, an
axis-aligned rectangle with floating-point corner coordinates.

@param paramBlock a ParameterBlock containing the operation's
       sources and parameters.
@return a Rectangle2D specifying the rendering-independent
        bounding box of the output.
"
      end

      operation 6703874 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "paramBlock" type class_ref 900738 // ParameterBlock
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the appropriate instance of the property specified by the name
parameter.  This method must determine which instance of a property to
return when there are multiple sources that each specify the property.

@param paramBlock a ParameterBlock containing the operation's
       sources and parameters.
@param name a String naming the desired property.
@return an object reference to the value of the property requested.
"
      end

      operation 6704002 "getPropertyNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of names recognized by getProperty.
@return the list of property names.
"
      end

      operation 6704130 "isDynamic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if successive renderings (that is, calls to
create(RenderContext, ParameterBlock)) with the same arguments
may produce different results.  This method may be used to
determine whether an existing rendering may be cached and
reused.  It is always safe to return true.
@return <code>true</code> if successive renderings with the
        same arguments might produce different results;
        <code>false</code> otherwise.
"
      end
    end

    class 900610 "RenderedImageFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The RenderedImageFactory interface (often abbreviated RIF) is
intended to be implemented by classes that wish to act as factories
to produce different renderings, for example by executing a series
of BufferedImageOps on a set of sources, depending on a specific
set of parameters, properties, and rendering hints.
"
      operation 6703362 "create"
	public return_type class_ref 313986 // RenderedImage
	nparams 2
	  param inout name "paramBlock" type class_ref 900738 // ParameterBlock
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a RenderedImage representing the results of an imaging
operation (or chain of operations) for a given ParameterBlock and
RenderingHints.  The RIF may also query any source images
referenced by the ParameterBlock for their dimensions,
SampleModels, properties, etc., as necessary.

<p> The create() method can return null if the
RenderedImageFactory is not capable of producing output for the
given set of source images and parameters.  For example, if a
RenderedImageFactory is only capable of performing a 3x3
convolution on single-banded image data, and the source image has
multiple bands or the convolution Kernel is 5x5, null should be
returned.

<p> Hints should be taken into account, but can be ignored.
The created RenderedImage may have a property identified
by the String HINTS_OBSERVED to indicate which RenderingHints
were used to create the image.  In addition any RenderedImages
that are obtained via the getSources() method on the created
RenderedImage may have such a property.

@param paramBlock a ParameterBlock containing sources and parameters
       for the RenderedImage to be created.
@param hints a RenderingHints object containing hints.
@return A RenderedImage containing the desired output.
"
      end
    end

    class 900738 "ParameterBlock"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>ParameterBlock</code> encapsulates all the information about sources and
parameters (Objects) required by a RenderableImageOp, or other
classes that process images.

<p> Although it is possible to place arbitrary objects in the
source Vector, users of this class may impose semantic constraints
such as requiring all sources to be RenderedImages or
RenderableImage.  <code>ParameterBlock</code> itself is merely a container and
performs no checking on source or parameter types.

<p> All parameters in a <code>ParameterBlock</code> are objects; convenience
add and set methods are available that take arguments of base type and
construct the appropriate subclass of Number (such as
Integer or Float).  Corresponding get methods perform a
downward cast and have return values of base type; an exception
will be thrown if the stored values do not have the correct type.
There is no way to distinguish between the results of
\"short s; add(s)\" and \"add(new Short(s))\".

<p> Note that the get and set methods operate on references.
Therefore, one must be careful not to share references between
<code>ParameterBlock</code>s when this is inappropriate.  For example, to create
a new <code>ParameterBlock</code> that is equal to an old one except for an
added source, one might be tempted to write:

<pre>
ParameterBlock addSource(ParameterBlock pb, RenderableImage im) {
    ParameterBlock pb1 = new ParameterBlock(pb.getSources());
    pb1.addSource(im);
    return pb1;
}
</pre>

<p> This code will have the side effect of altering the original
<code>ParameterBlock</code>, since the getSources operation returned a reference
to its source Vector.  Both pb and pb1 share their source Vector,
and a change in either is visible to both.

<p> A correct way to write the addSource function is to clone
the source Vector:

<pre>
ParameterBlock addSource (ParameterBlock pb, RenderableImage im) {
    ParameterBlock pb1 = new ParameterBlock(pb.getSources().clone());
    pb1.addSource(im);
    return pb1;
}
</pre>

<p> The clone method of <code>ParameterBlock</code> has been defined to
perform a clone of both the source and parameter Vectors for
this reason.  A standard, shallow clone is available as
shallowClone.

<p> The addSource, setSource, add, and set methods are
defined to return 'this' after adding their argument.  This allows
use of syntax like:

<pre>
ParameterBlock pb = new ParameterBlock();
op = new RenderableImageOp(\"operation\", pb.add(arg1).add(arg2));
</pre>
"
      classrelation 3077378 // <realization>
	relation 3077378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3077378 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3077506 // <realization>
	relation 3077506 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3077506 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3077634 // sources (<unidirectional association>)
	relation 3077634 --->
	  a role_name "sources" init_value " new Vector<Object>()" protected
	    comment " A Vector of sources, stored as arbitrary Objects. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3077634 // sources (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 3077762 // parameters (<unidirectional association>)
	relation 3077762 --->
	  a role_name "parameters" init_value " new Vector<Object>()" protected
	    comment " A Vector of non-source parameters, stored as arbitrary Objects. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3077762 // parameters (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 6704258 "ParameterBlock"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A dummy constructor. "
      end

      operation 6704386 "ParameterBlock"
	public explicit_return_type ""
	nparams 1
	  param inout name "sources" type class_ref 141442 // Vector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ParameterBlock</code> with a given Vector
of sources.
@param sources a <code>Vector</code> of source images
"
      end

      operation 6704514 "ParameterBlock"
	public explicit_return_type ""
	nparams 2
	  param inout name "sources" type class_ref 141442 // Vector
	  param inout name "parameters" type class_ref 141442 // Vector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Object> ${p0}, ${t1}<Object> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ParameterBlock</code> with a given Vector of sources and
Vector of parameters.
@param sources a <code>Vector</code> of source images
@param parameters a <code>Vector</code> of parameters to be used in the
       rendering operation
"
      end

      operation 6704642 "shallowClone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a shallow copy of a <code>ParameterBlock</code>.  The source and
parameter Vectors are copied by reference -- additions or
changes will be visible to both versions.

@return an Object clone of the <code>ParameterBlock</code>.
"
      end

      operation 6704770 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of a <code>ParameterBlock</code>.  The source and parameter
Vectors are cloned, but the actual sources and parameters are
copied by reference.  This allows modifications to the order
and number of sources and parameters in the clone to be invisible
to the original <code>ParameterBlock</code>.  Changes to the shared sources or
parameters themselves will still be visible.

@return an Object clone of the <code>ParameterBlock</code>.
"
      end

      operation 6704898 "addSource"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param inout name "source" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an image to end of the list of sources.  The image is
stored as an object in order to allow new node types in the
future.

@param source an image object to be stored in the source list.
@return a new <code>ParameterBlock</code> containing the specified
        <code>source</code>.
"
      end

      operation 6705026 "getSource"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a source as a general Object.  The caller must cast it into
an appropriate type.

@param index the index of the source to be returned.
@return an <code>Object</code> that represents the source located
        at the specified index in the <code>sources</code>
        <code>Vector</code>.
@see #setSource(Object, int)
"
      end

      operation 6705154 "setSource"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param inout name "source" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an entry in the list of source with a new source.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param source the specified source image
@param index the index into the <code>sources</code>
             <code>Vector</code> at which to
             insert the specified <code>source</code>
@return a new <code>ParameterBlock</code> that contains the
        specified <code>source</code> at the specified
        <code>index</code>.
@see #getSource(int)
"
      end

      operation 6705282 "getRenderedSource"
	public return_type class_ref 313986 // RenderedImage
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a source as a <code>RenderedImage</code>.  This method is
a convenience method.
An exception will be thrown if the source is not a RenderedImage.

@param index the index of the source to be returned
@return a <code>RenderedImage</code> that represents the source
        image that is at the specified index in the
        <code>sources</code> <code>Vector</code>.
"
      end

      operation 6705410 "getRenderableSource"
	public return_type class_ref 867330 // RenderableImage
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a source as a RenderableImage.  This method is a
convenience method.
An exception will be thrown if the sources is not a RenderableImage.

@param index the index of the source to be returned
@return a <code>RenderableImage</code> that represents the source
        image that is at the specified index in the
        <code>sources</code> <code>Vector</code>.
"
      end

      operation 6705538 "getNumSources"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of source images.
@return the number of source images in the <code>sources</code>
        <code>Vector</code>.
"
      end

      operation 6705666 "getSources"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the entire Vector of sources.
@return the <code>sources</code> <code>Vector</code>.
@see #setSources(Vector)
"
      end

      operation 6705794 "setSources"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sources" type class_ref 141442 // Vector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the entire Vector of sources to a given Vector.
@param sources the <code>Vector</code> of source images
@see #getSources
"
      end

      operation 6705922 "removeSources"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears the list of source images. "
      end

      operation 6706050 "getNumParameters"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parameters (not including source images).
@return the number of parameters in the <code>parameters</code>
        <code>Vector</code>.
"
      end

      operation 6706178 "getParameters"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the entire Vector of parameters.
@return the <code>parameters</code> <code>Vector</code>.
@see #setParameters(Vector)
"
      end

      operation 6706306 "setParameters"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parameters" type class_ref 141442 // Vector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the entire Vector of parameters to a given Vector.
@param parameters the specified <code>Vector</code> of
       parameters
@see #getParameters
"
      end

      operation 6706434 "removeParameters"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears the list of parameters. "
      end

      operation 6706562 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an object to the list of parameters.
@param obj the <code>Object</code> to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6706690 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param in name "b" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Byte to the list of parameters.
@param b the byte to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6706818 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Character to the list of parameters.
@param c the char to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6706946 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param in name "s" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Short to the list of parameters.
@param s the short to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6707074 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Integer to the list of parameters.
@param i the int to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6707202 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Long to the list of parameters.
@param l the long to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6707330 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Float to the list of parameters.
@param f the float to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6707458 "add"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Double to the list of parameters.
@param d the double to add to the
           <code>parameters</code> <code>Vector</code>
@return a new <code>ParameterBlock</code> containing
        the specified parameter.
"
      end

      operation 6707586 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param obj the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6707714 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param in name "b" explicit_type "byte"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters with a Byte.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param b the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6707842 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param in name "c" explicit_type "char"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters with a Character.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param c the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6707970 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param in name "s" explicit_type "short"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters with a Short.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param s the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6708098 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters with an Integer.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param i the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6708226 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param in name "l" explicit_type "long"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters with a Long.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param l the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6708354 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param in name "f" explicit_type "float"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters with a Float.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param f the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6708482 "set"
	public return_type class_ref 900738 // ParameterBlock
	nparams 2
	  param in name "d" explicit_type "double"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces an Object in the list of parameters with a Double.
If the index lies beyond the current source list,
the list is extended with nulls as needed.
@param d the parameter that replaces the
       parameter at the specified index in the
       <code>parameters</code> <code>Vector</code>
@param index the index of the parameter to be
       replaced with the specified parameter
@return a new <code>ParameterBlock</code> containing
       the specified parameter.
"
      end

      operation 6708610 "getObjectParameter"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a parameter as an object.
@param index the index of the parameter to get
@return an <code>Object</code> representing the
        the parameter at the specified index
        into the <code>parameters</code>
        <code>Vector</code>.
"
      end

      operation 6708738 "getByteParameter"
	public explicit_return_type "byte"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to return a parameter as a byte.  An
exception is thrown if the parameter is
<code>null</code> or not a <code>Byte</code>.

@param index the index of the parameter to be returned.
@return the parameter at the specified index
        as a <code>byte</code> value.
@throws ClassCastException if the parameter at the
        specified index is not a <code>Byte</code>
@throws NullPointerException if the parameter at the specified
        index is <code>null</code>
@throws ArrayIndexOutOfBoundsException if <code>index</code>
        is negative or not less than the current size of this
        <code>ParameterBlock</code> object
"
      end

      operation 6708866 "getCharParameter"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to return a parameter as a char.  An
exception is thrown if the parameter is
<code>null</code> or not a <code>Character</code>.

@param index the index of the parameter to be returned.
@return the parameter at the specified index
        as a <code>char</code> value.
@throws ClassCastException if the parameter at the
        specified index is not a <code>Character</code>
@throws NullPointerException if the parameter at the specified
        index is <code>null</code>
@throws ArrayIndexOutOfBoundsException if <code>index</code>
        is negative or not less than the current size of this
        <code>ParameterBlock</code> object
"
      end

      operation 6708994 "getShortParameter"
	public explicit_return_type "short"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to return a parameter as a short.  An
exception is thrown if the parameter is
<code>null</code> or not a <code>Short</code>.

@param index the index of the parameter to be returned.
@return the parameter at the specified index
        as a <code>short</code> value.
@throws ClassCastException if the parameter at the
        specified index is not a <code>Short</code>
@throws NullPointerException if the parameter at the specified
        index is <code>null</code>
@throws ArrayIndexOutOfBoundsException if <code>index</code>
        is negative or not less than the current size of this
        <code>ParameterBlock</code> object
"
      end

      operation 6709122 "getIntParameter"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to return a parameter as an int.  An
exception is thrown if the parameter is
<code>null</code> or not an <code>Integer</code>.

@param index the index of the parameter to be returned.
@return the parameter at the specified index
        as a <code>int</code> value.
@throws ClassCastException if the parameter at the
        specified index is not a <code>Integer</code>
@throws NullPointerException if the parameter at the specified
        index is <code>null</code>
@throws ArrayIndexOutOfBoundsException if <code>index</code>
        is negative or not less than the current size of this
        <code>ParameterBlock</code> object
"
      end

      operation 6709250 "getLongParameter"
	public explicit_return_type "long"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to return a parameter as a long.  An
exception is thrown if the parameter is
<code>null</code> or not a <code>Long</code>.

@param index the index of the parameter to be returned.
@return the parameter at the specified index
        as a <code>long</code> value.
@throws ClassCastException if the parameter at the
        specified index is not a <code>Long</code>
@throws NullPointerException if the parameter at the specified
        index is <code>null</code>
@throws ArrayIndexOutOfBoundsException if <code>index</code>
        is negative or not less than the current size of this
        <code>ParameterBlock</code> object
"
      end

      operation 6709378 "getFloatParameter"
	public explicit_return_type "float"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to return a parameter as a float.  An
exception is thrown if the parameter is
<code>null</code> or not a <code>Float</code>.

@param index the index of the parameter to be returned.
@return the parameter at the specified index
        as a <code>float</code> value.
@throws ClassCastException if the parameter at the
        specified index is not a <code>Float</code>
@throws NullPointerException if the parameter at the specified
        index is <code>null</code>
@throws ArrayIndexOutOfBoundsException if <code>index</code>
        is negative or not less than the current size of this
        <code>ParameterBlock</code> object
"
      end

      operation 6709506 "getDoubleParameter"
	public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to return a parameter as a double.  An
exception is thrown if the parameter is
<code>null</code> or not a <code>Double</code>.

@param index the index of the parameter to be returned.
@return the parameter at the specified index
        as a <code>double</code> value.
@throws ClassCastException if the parameter at the
        specified index is not a <code>Double</code>
@throws NullPointerException if the parameter at the specified
        index is <code>null</code>
@throws ArrayIndexOutOfBoundsException if <code>index</code>
        is negative or not less than the current size of this
        <code>ParameterBlock</code> object
"
      end

      operation 6709634 "getParamClasses"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of Class objects describing the types
of the parameters.
@return an array of <code>Class</code> objects.
"
      end
    end

    class 900866 "RenderContext"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RenderContext encapsulates the information needed to produce a
specific rendering from a RenderableImage.  It contains the area to
be rendered specified in rendering-independent terms, the
resolution at which the rendering is to be performed, and hints
used to control the rendering process.

<p> Users create RenderContexts and pass them to the
RenderableImage via the createRendering method.  Most of the methods of
RenderContexts are not meant to be used directly by applications,
but by the RenderableImage and operator classes to which it is
passed.

<p> The AffineTransform parameter passed into and out of this class
are cloned.  The RenderingHints and Shape parameters are not
necessarily cloneable and are therefore only reference copied.
Altering RenderingHints or Shape instances that are in use by
instances of RenderContext may have undesired side effects.
"
      classrelation 3079170 // <realization>
	relation 3079170 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3079170 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3079298 // hints (<unidirectional association>)
	relation 3079298 --->
	  a role_name "hints" package
	    comment " Table of hints. May be null. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3079298 // hints (<unidirectional association>)
	  b parent class_ref 856578 // RenderingHints
      end

      classrelation 3079426 // usr2dev (<unidirectional association>)
	relation 3079426 --->
	  a role_name "usr2dev" package
	    comment " Transform to convert user coordinates to device coordinates.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3079426 // usr2dev (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      classrelation 3079554 // aoi (<unidirectional association>)
	relation 3079554 --->
	  a role_name "aoi" package
	    comment " The area of interest.  May be null. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3079554 // aoi (<unidirectional association>)
	  b parent class_ref 379394 // Shape
      end

      operation 6714114 "RenderContext"
	public explicit_return_type ""
	nparams 3
	  param inout name "usr2dev" type class_ref 381058 // AffineTransform
	  param inout name "aoi" type class_ref 379394 // Shape
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Various constructors that allow different levels of
 specificity. If the Shape is missing the whole renderable area
 is assumed. If hints is missing no hints are assumed.

Constructs a RenderContext with a given transform.
The area of interest is supplied as a Shape,
and the rendering hints are supplied as a RenderingHints object.

@param usr2dev an AffineTransform.
@param aoi a Shape representing the area of interest.
@param hints a RenderingHints object containing rendering hints.
"
      end

      operation 6714242 "RenderContext"
	public explicit_return_type ""
	nparams 1
	  param inout name "usr2dev" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RenderContext with a given transform.
The area of interest is taken to be the entire renderable area.
No rendering hints are used.

@param usr2dev an AffineTransform.
"
      end

      operation 6714370 "RenderContext"
	public explicit_return_type ""
	nparams 2
	  param inout name "usr2dev" type class_ref 381058 // AffineTransform
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RenderContext with a given transform and rendering hints.
The area of interest is taken to be the entire renderable area.

@param usr2dev an AffineTransform.
@param hints a RenderingHints object containing rendering hints.
"
      end

      operation 6714498 "RenderContext"
	public explicit_return_type ""
	nparams 2
	  param inout name "usr2dev" type class_ref 381058 // AffineTransform
	  param inout name "aoi" type class_ref 379394 // Shape
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RenderContext with a given transform and area of interest.
The area of interest is supplied as a Shape.
No rendering hints are used.

@param usr2dev an AffineTransform.
@param aoi a Shape representing the area of interest.
"
      end

      operation 6714626 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the rendering hints of this <code>RenderContext</code>.
@return a <code>RenderingHints</code> object that represents
the rendering hints of this <code>RenderContext</code>.
@see #setRenderingHints(RenderingHints)
"
      end

      operation 6714754 "setRenderingHints"
	public explicit_return_type "void"
	nparams 1
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the rendering hints of this <code>RenderContext</code>.
@param hints a <code>RenderingHints</code> object that represents
the rendering hints to assign to this <code>RenderContext</code>.
@see #getRenderingHints
"
      end

      operation 6714882 "setTransform"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newTransform" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current user-to-device AffineTransform contained
in the RenderContext to a given transform.

@param newTransform the new AffineTransform.
@see #getTransform
"
      end

      operation 6715010 "preConcatenateTransform"
	public explicit_return_type "void"
	nparams 1
	  param inout name "modTransform" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies the current user-to-device transform by prepending another
transform.  In matrix notation the operation is:
<pre>
[this] = [modTransform] x [this]
</pre>

@param modTransform the AffineTransform to prepend to the
       current usr2dev transform.
@since 1.3
"
      end

      operation 6715138 "preConcetenateTransform"
	public explicit_return_type "void"
	nparams 1
	  param inout name "modTransform" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Modifies the current user-to-device transform by prepending another
transform.  In matrix notation the operation is:
<pre>
[this] = [modTransform] x [this]
</pre>
This method does the same thing as the preConcatenateTransform
method.  It is here for backward compatibility with previous releases
which misspelled the method name.

@param modTransform the AffineTransform to prepend to the
       current usr2dev transform.
@deprecated     replaced by
                <code>preConcatenateTransform(AffineTransform)</code>.
"
      end

      operation 6715266 "concatenateTransform"
	public explicit_return_type "void"
	nparams 1
	  param inout name "modTransform" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies the current user-to-device transform by appending another
transform.  In matrix notation the operation is:
<pre>
[this] = [this] x [modTransform]
</pre>

@param modTransform the AffineTransform to append to the
       current usr2dev transform.
@since 1.3
"
      end

      operation 6715394 "concetenateTransform"
	public explicit_return_type "void"
	nparams 1
	  param inout name "modTransform" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Modifies the current user-to-device transform by appending another
transform.  In matrix notation the operation is:
<pre>
[this] = [this] x [modTransform]
</pre>
This method does the same thing as the concatenateTransform
method.  It is here for backward compatibility with previous releases
which misspelled the method name.

@param modTransform the AffineTransform to append to the
       current usr2dev transform.
@deprecated     replaced by
                <code>concatenateTransform(AffineTransform)</code>.
"
      end

      operation 6715522 "getTransform"
	public return_type class_ref 381058 // AffineTransform
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current user-to-device AffineTransform.

@return a reference to the current AffineTransform.
@see #setTransform(AffineTransform)
"
      end

      operation 6715650 "setAreaOfInterest"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newAoi" type class_ref 379394 // Shape
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current area of interest.  The old area is discarded.

@param newAoi The new area of interest.
@see #getAreaOfInterest
"
      end

      operation 6715778 "getAreaOfInterest"
	public return_type class_ref 379394 // Shape
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the ares of interest currently contained in the
RenderContext.

@return a reference to the area of interest of the RenderContext,
        or null if none is specified.
@see #setAreaOfInterest(Shape)
"
      end

      operation 6715906 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of a RenderContext. The area of interest is copied
by reference.  The usr2dev AffineTransform and hints are cloned,
while the area of interest is copied by reference.

@return the new cloned RenderContext.
"
      end
    end

    class 900994 "RenderableImageOp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class handles the renderable aspects of an operation with help
from its associated instance of a ContextualRenderedImageFactory.
"
      classrelation 3078018 // <realization>
	relation 3078018 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3078018 // <realization>
	  b parent class_ref 867330 // RenderableImage
      end

      classrelation 3078146 // paramBlock (<unidirectional association>)
	relation 3078146 --->
	  a role_name "paramBlock" package
	    comment " A ParameterBlock containing source and parameters. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3078146 // paramBlock (<unidirectional association>)
	  b parent class_ref 900738 // ParameterBlock
      end

      classrelation 3078274 // myCRIF (<unidirectional association>)
	relation 3078274 --->
	  a role_name "myCRIF" package
	    comment " The associated ContextualRenderedImageFactory. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3078274 // myCRIF (<unidirectional association>)
	  b parent class_ref 900482 // ContextualRenderedImageFactory
      end

      classrelation 3078402 // boundingBox (<unidirectional association>)
	relation 3078402 --->
	  a role_name "boundingBox" package
	    comment " The bounding box of the results of this RenderableImageOp. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3078402 // boundingBox (<unidirectional association>)
	  b parent class_ref 380674 // Rectangle2D
      end

      operation 6711170 "RenderableImageOp"
	public explicit_return_type ""
	nparams 2
	  param inout name "CRIF" type class_ref 900482 // ContextualRenderedImageFactory
	  param inout name "paramBlock" type class_ref 900738 // ParameterBlock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RenderedImageOp given a
ContextualRenderedImageFactory object, and
a ParameterBlock containing RenderableImage sources and other
parameters.  Any RenderedImage sources referenced by the
ParameterBlock will be ignored.

@param CRIF a ContextualRenderedImageFactory object
@param paramBlock a ParameterBlock containing this operation's source
       images and other parameters necessary for the operation
       to run.
"
      end

      operation 6711298 "getSources"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RenderableImage> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a vector of RenderableImages that are the sources of
image data for this RenderableImage. Note that this method may
return an empty vector, to indicate that the image has no sources,
or null, to indicate that no information is available.

@return a (possibly empty) Vector of RenderableImages, or null.
"
      end

      operation 6711426 "getRenderableSources"
	private return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6711554 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a property from the property set of this image.
If the property name is not recognized, java.awt.Image.UndefinedProperty
will be returned.

@param name the name of the property to get, as a String.
@return a reference to the property Object, or the value
        java.awt.Image.UndefinedProperty.
"
      end

      operation 6711682 "getPropertyNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a list of names recognized by getProperty.
@return a list of property names.
"
      end

      operation 6711810 "isDynamic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if successive renderings (that is, calls to
createRendering() or createScaledRendering()) with the same arguments
may produce different results.  This method may be used to
determine whether an existing rendering may be cached and
reused.  The CRIF's isDynamic method will be called.
@return <code>true</code> if successive renderings with the
        same arguments might produce different results;
        <code>false</code> otherwise.
"
      end

      operation 6711938 "getWidth"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the width in user coordinate space.  By convention, the
usual width of a RenderableImage is equal to the image's aspect
ratio (width divided by height).

@return the width of the image in user coordinates.
"
      end

      operation 6712066 "getHeight"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the height in user coordinate space.  By convention, the
usual height of a RenderedImage is equal to 1.0F.

@return the height of the image in user coordinates.
"
      end

      operation 6712194 "getMinX"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimum X coordinate of the rendering-independent image data.
"
      end

      operation 6712322 "getMinY"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimum Y coordinate of the rendering-independent image data.
"
      end

      operation 6712450 "setParameterBlock"
	public return_type class_ref 900738 // ParameterBlock
	nparams 1
	  param inout name "paramBlock" type class_ref 900738 // ParameterBlock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change the current ParameterBlock of the operation, allowing
editing of image rendering chains.  The effects of such a
change will be visible when a new rendering is created from
this RenderableImageOp or any dependent RenderableImageOp.

@param paramBlock the new ParameterBlock.
@return the old ParameterBlock.
@see #getParameterBlock
"
      end

      operation 6712578 "getParameterBlock"
	public return_type class_ref 900738 // ParameterBlock
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the current parameter block.
@return the <code>ParameterBlock</code> of this
        <code>RenderableImageOp</code>.
@see #setParameterBlock(ParameterBlock)
"
      end

      operation 6712706 "createScaledRendering"
	public return_type class_ref 313986 // RenderedImage
	nparams 3
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a RenderedImage instance of this image with width w, and
height h in pixels.  The RenderContext is built automatically
with an appropriate usr2dev transform and an area of interest
of the full image.  All the rendering hints come from hints
passed in.

<p> If w == 0, it will be taken to equal
Math.round(h*(getWidth()/getHeight())).
Similarly, if h == 0, it will be taken to equal
Math.round(w*(getHeight()/getWidth())).  One of
w or h must be non-zero or else an IllegalArgumentException
will be thrown.

<p> The created RenderedImage may have a property identified
by the String HINTS_OBSERVED to indicate which RenderingHints
were used to create the image.  In addition any RenderedImages
that are obtained via the getSources() method on the created
RenderedImage may have such a property.

@param w the width of rendered image in pixels, or 0.
@param h the height of rendered image in pixels, or 0.
@param hints a RenderingHints object containing hints.
@return a RenderedImage containing the rendered data.
"
      end

      operation 6712834 "createDefaultRendering"
	public return_type class_ref 313986 // RenderedImage
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a RenderedImage instance of this image with a default
width and height in pixels.  The RenderContext is built
automatically with an appropriate usr2dev transform and an area
of interest of the full image.  All the rendering hints come
from hints passed in.  Implementors of this interface must be
sure that there is a defined default width and height.

@return a RenderedImage containing the rendered data.
"
      end

      operation 6712962 "createRendering"
	public return_type class_ref 313986 // RenderedImage
	nparams 1
	  param inout name "renderContext" type class_ref 900866 // RenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a RenderedImage which represents this
RenderableImageOp (including its Renderable sources) rendered
according to the given RenderContext.

<p> This method supports chaining of either Renderable or
RenderedImage operations.  If sources in
the ParameterBlock used to construct the RenderableImageOp are
RenderableImages, then a three step process is followed:

<ol>
<li> mapRenderContext() is called on the associated CRIF for
each RenderableImage source;
<li> createRendering() is called on each of the RenderableImage sources
using the backwards-mapped RenderContexts obtained in step 1,
resulting in a rendering of each source;
<li> ContextualRenderedImageFactory.create() is called
with a new ParameterBlock containing the parameters of
the RenderableImageOp and the RenderedImages that were created by the
createRendering() calls.
</ol>

<p> If the elements of the source Vector of
the ParameterBlock used to construct the RenderableImageOp are
instances of RenderedImage, then the CRIF.create() method is
called immediately using the original ParameterBlock.
This provides a basis case for the recursion.

<p> The created RenderedImage may have a property identified
by the String HINTS_OBSERVED to indicate which RenderingHints
(from the RenderContext) were used to create the image.
In addition any RenderedImages
that are obtained via the getSources() method on the created
RenderedImage may have such a property.

@param renderContext The RenderContext to use to perform the rendering.
@return a RenderedImage containing the desired output image.
"
      end
    end

    class 901122 "RenderableImageProducer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An adapter class that implements ImageProducer to allow the
asynchronous production of a RenderableImage.  The size of the
ImageConsumer is determined by the scale factor of the usr2dev
transform in the RenderContext.  If the RenderContext is null, the
default rendering of the RenderableImage is used.  This class
implements an asynchronous production that produces the image in
one thread at one resolution.  This class may be subclassed to
implement versions that will render the image using several
threads.  These threads could render either the same image at
progressively better quality, or different sections of the image at
a single resolution.
"
      classrelation 3078530 // <realization>
	relation 3078530 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3078530 // <realization>
	  b parent class_ref 344066 // ImageProducer
      end

      classrelation 3078658 // <realization>
	relation 3078658 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3078658 // <realization>
	  b parent class_ref 128770 // Runnable
      end

      classrelation 3078786 // rdblImage (<unidirectional association>)
	relation 3078786 --->
	  a role_name "rdblImage" package
	    comment " The RenderableImage source for the producer. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3078786 // rdblImage (<unidirectional association>)
	  b parent class_ref 867330 // RenderableImage
      end

      classrelation 3078914 // rc (<unidirectional association>)
	relation 3078914 --->
	  a role_name "rc" package
	    comment " The RenderContext to use for producing the image. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3078914 // rc (<unidirectional association>)
	  b parent class_ref 900866 // RenderContext
      end

      classrelation 3079042 // ics (<unidirectional association>)
	relation 3079042 --->
	  a role_name "ics" init_value " new Vector()" package
	    comment " A Vector of image consumers. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3079042 // ics (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 6713090 "RenderableImageProducer"
	public explicit_return_type ""
	nparams 2
	  param inout name "rdblImage" type class_ref 867330 // RenderableImage
	  param inout name "rc" type class_ref 900866 // RenderContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new RenderableImageProducer from a RenderableImage
and a RenderContext.

@param rdblImage the RenderableImage to be rendered.
@param rc the RenderContext to use for producing the pixels.
"
      end

      operation 6713218 "setRenderContext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rc" type class_ref 900866 // RenderContext
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new RenderContext to use for the next startProduction() call.

@param rc the new RenderContext.
"
      end

      operation 6713346 "addConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an ImageConsumer to the list of consumers interested in
data for this image.

@param ic an ImageConsumer to be added to the interest list.
"
      end

      operation 6713474 "isConsumer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if an ImageConsumer is on the list of consumers
currently interested in data for this image.

@param ic the ImageConsumer to be checked.
@return true if the ImageConsumer is on the list; false otherwise.
"
      end

      operation 6713602 "removeConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an ImageConsumer from the list of consumers interested in
data for this image.

@param ic the ImageConsumer to be removed.
"
      end

      operation 6713730 "startProduction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an ImageConsumer to the list of consumers interested in
data for this image, and immediately starts delivery of the
image data through the ImageConsumer interface.

@param ic the ImageConsumer to be added to the list of consumers.
"
      end

      operation 6713858 "requestTopDownLeftRightResend"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that a given ImageConsumer have the image data delivered
one more time in top-down, left-right order.

@param ic the ImageConsumer requesting the resend.
"
      end

      operation 6713986 "run"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The runnable method for this class. This will produce an image using
the current RenderableImage and RenderContext and send it to all the
ImageConsumer currently registered with this class.
"
      end
    end
  end

  deploymentview 166402 "renderable"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 651650 "RenderedImageFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.RenderedImage;
import java.awt.RenderingHints;
${definition}"
      associated_elems
	class_ref 900610 // RenderedImageFactory
      end
      comment "Copyright (c) 1998, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 651778 "ContextualRenderedImageFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.Rectangle2D;
import java.awt.image.RenderedImage;
${definition}"
      associated_elems
	class_ref 900482 // ContextualRenderedImageFactory
      end
      comment "Copyright (c) 1998, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 651906 "ParameterBlock"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.RenderedImage;
import java.io.Serializable;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 900738 // ParameterBlock
      end
      comment "Copyright (c) 1998, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 652034 "RenderableImage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.awt.RenderingHints;
import java.awt.image.*;
${definition}"
      associated_elems
	class_ref 867330 // RenderableImage
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 652162 "RenderableImageOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.RenderedImage;
import java.awt.RenderingHints;
import java.util.Hashtable;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 900994 // RenderableImageOp
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 652290 "RenderableImageProducer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.color.ColorSpace;
import java.awt.image.ColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageConsumer;
import java.awt.image.ImageProducer;
import java.awt.image.Raster;
import java.awt.image.RenderedImage;
import java.awt.image.SampleModel;
import java.util.Enumeration;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 901122 // RenderableImageProducer
      end
      comment "Copyright (c) 1998, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 652418 "RenderContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.awt.geom.*;
import java.awt.*;
import java.awt.image.*;
${definition}"
      associated_elems
	class_ref 900866 // RenderContext
      end
      comment "Copyright (c) 1998, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end
  end
end
