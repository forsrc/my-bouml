class ImageReadParam
!!!9657346.java!!!	setDestinationType(inout destinationType : ImageTypeSpecifier) : void
        super.setDestinationType(destinationType);
        setDestination(null);
!!!9657474.java!!!	setDestination(inout destination : BufferedImage) : void
        this.destination = destination;
!!!9657602.java!!!	getDestination() : BufferedImage
        return destination;
!!!9657730.java!!!	setDestinationBands(inout destinationBands : int [[]]) : void
        if (destinationBands == null) {
            this.destinationBands = null;
        } else {
            int numBands = destinationBands.length;
            for (int i = 0; i < numBands; i++) {
                int band = destinationBands[i];
                if (band < 0) {
                    throw new IllegalArgumentException("Band value < 0!");
                }
                for (int j = i + 1; j < numBands; j++) {
                    if (band == destinationBands[j]) {
                        throw new IllegalArgumentException("Duplicate band value!");
                    }
                }
            }
            this.destinationBands = (int[])destinationBands.clone();
        }
!!!9657858.java!!!	getDestinationBands() : int
        if (destinationBands == null) {
            return null;
        } else {
            return (int[])(destinationBands.clone());
        }
!!!9657986.java!!!	canSetSourceRenderSize() : boolean
        return canSetSourceRenderSize;
!!!9658114.java!!!	setSourceRenderSize(inout size : Dimension) : void
        if (!canSetSourceRenderSize()) {
            throw new UnsupportedOperationException
                ("Can't set source render size!");
        }

        if (size == null) {
            this.sourceRenderSize = null;
        } else {
            if (size.width <= 0 || size.height <= 0) {
                throw new IllegalArgumentException("width or height <= 0!");
            }
            this.sourceRenderSize = (Dimension)size.clone();
        }
!!!9658242.java!!!	getSourceRenderSize() : Dimension
        return (sourceRenderSize == null) ?
            null : (Dimension)sourceRenderSize.clone();
!!!9658370.java!!!	setSourceProgressivePasses(in minPass : int, in numPasses : int) : void
        if (minPass < 0) {
            throw new IllegalArgumentException("minPass < 0!");
        }
        if (numPasses <= 0) {
            throw new IllegalArgumentException("numPasses <= 0!");
        }
        if ((numPasses != Integer.MAX_VALUE) &&
            (((minPass + numPasses - 1) & 0x80000000) != 0)) {
            throw new IllegalArgumentException
                ("minPass + numPasses - 1 > INTEGER.MAX_VALUE!");
        }

        this.minProgressivePass = minPass;
        this.numProgressivePasses = numPasses;
!!!9658498.java!!!	getSourceMinProgressivePass() : int
        return minProgressivePass;
!!!9658626.java!!!	getSourceMaxProgressivePass() : int
        if (numProgressivePasses == Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        } else {
            return minProgressivePass + numProgressivePasses - 1;
        }
!!!9658754.java!!!	getSourceNumProgressivePasses() : int
        return numProgressivePasses;
