class ChronoLocalDateTime
!!!8353794.java!!!	timeLineOrder() : Comparator
        return AbstractChronology.DATE_TIME_ORDER;
!!!8353922.java!!!	from(inout temporal : TemporalAccessor) : ChronoLocalDateTime
        if (temporal instanceof ChronoLocalDateTime) {
            return (ChronoLocalDateTime<?>) temporal;
        }
        Objects.requireNonNull(temporal, "temporal");
        Chronology chrono = temporal.query(TemporalQueries.chronology());
        if (chrono == null) {
            throw new DateTimeException("Unable to obtain ChronoLocalDateTime from TemporalAccessor: " + temporal.getClass());
        }
        return chrono.localDateTime(temporal);
!!!8354050.java!!!	getChronology() : Chronology
        return toLocalDate().getChronology();
!!!8354562.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit != FOREVER;
        }
        return unit != null && unit.isSupportedBy(this);
!!!8354690.java!!!	with(inout adjuster : TemporalAdjuster) : ChronoLocalDateTime
        return ChronoLocalDateTimeImpl.ensureValid(getChronology(), Temporal.super.with(adjuster));
!!!8354946.java!!!	plus(inout amount : TemporalAmount) : ChronoLocalDateTime
        return ChronoLocalDateTimeImpl.ensureValid(getChronology(), Temporal.super.plus(amount));
!!!8355202.java!!!	minus(inout amount : TemporalAmount) : ChronoLocalDateTime
        return ChronoLocalDateTimeImpl.ensureValid(getChronology(), Temporal.super.minus(amount));
!!!8355330.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : ChronoLocalDateTime
        return ChronoLocalDateTimeImpl.ensureValid(getChronology(), Temporal.super.minus(amountToSubtract, unit));
!!!8355458.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.zoneId() || query == TemporalQueries.zone() || query == TemporalQueries.offset()) {
            return null;
        } else if (query == TemporalQueries.localTime()) {
            return (R) toLocalTime();
        } else if (query == TemporalQueries.chronology()) {
            return (R) getChronology();
        } else if (query == TemporalQueries.precision()) {
            return (R) NANOS;
        }
        // inline TemporalAccessor.super.query(query) as an optimization
        // non-JDK classes are not permitted to make this optimization
        return query.queryFrom(this);
!!!8355586.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        return temporal
                .with(EPOCH_DAY, toLocalDate().toEpochDay())
                .with(NANO_OF_DAY, toLocalTime().toNanoOfDay());
!!!8355714.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8355970.java!!!	toInstant(inout offset : ZoneOffset) : Instant
        return Instant.ofEpochSecond(toEpochSecond(offset), toLocalTime().getNano());
!!!8356098.java!!!	toEpochSecond(inout offset : ZoneOffset) : long
        Objects.requireNonNull(offset, "offset");
        long epochDay = toLocalDate().toEpochDay();
        long secs = epochDay * 86400 + toLocalTime().toSecondOfDay();
        secs -= offset.getTotalSeconds();
        return secs;
!!!8356226.java!!!	compareTo(inout other : ChronoLocalDateTime) : int
        int cmp = toLocalDate().compareTo(other.toLocalDate());
        if (cmp == 0) {
            cmp = toLocalTime().compareTo(other.toLocalTime());
            if (cmp == 0) {
                cmp = getChronology().compareTo(other.getChronology());
            }
        }
        return cmp;
!!!8356354.java!!!	isAfter(inout other : ChronoLocalDateTime) : boolean
        long thisEpDay = this.toLocalDate().toEpochDay();
        long otherEpDay = other.toLocalDate().toEpochDay();
        return thisEpDay > otherEpDay ||
            (thisEpDay == otherEpDay && this.toLocalTime().toNanoOfDay() > other.toLocalTime().toNanoOfDay());
!!!8356482.java!!!	isBefore(inout other : ChronoLocalDateTime) : boolean
        long thisEpDay = this.toLocalDate().toEpochDay();
        long otherEpDay = other.toLocalDate().toEpochDay();
        return thisEpDay < otherEpDay ||
            (thisEpDay == otherEpDay && this.toLocalTime().toNanoOfDay() < other.toLocalTime().toNanoOfDay());
!!!8356610.java!!!	isEqual(inout other : ChronoLocalDateTime) : boolean
        // Do the time check first, it is cheaper than computing EPOCH day.
        return this.toLocalTime().toNanoOfDay() == other.toLocalTime().toNanoOfDay() &&
               this.toLocalDate().toEpochDay() == other.toLocalDate().toEpochDay();
