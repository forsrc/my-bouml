class TextArea
!!!6343170.java!!!	TextArea()
        this("", 0, 0, SCROLLBARS_BOTH);
!!!6343298.java!!!	TextArea(inout text : String)
        this(text, 0, 0, SCROLLBARS_BOTH);
!!!6343426.java!!!	TextArea(in rows : int, in columns : int)
        this("", rows, columns, SCROLLBARS_BOTH);
!!!6343554.java!!!	TextArea(inout text : String, in rows : int, in columns : int)
        this(text, rows, columns, SCROLLBARS_BOTH);
!!!6343682.java!!!	TextArea(inout text : String, in rows : int, in columns : int, in scrollbars : int)
        super(text);

        this.rows = (rows >= 0) ? rows : 0;
        this.columns = (columns >= 0) ? columns : 0;

        if (scrollbars >= SCROLLBARS_BOTH && scrollbars <= SCROLLBARS_NONE) {
            this.scrollbarVisibility = scrollbars;
        } else {
            this.scrollbarVisibility = SCROLLBARS_BOTH;
        }

        setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                              forwardTraversalKeys);
        setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
                              backwardTraversalKeys);
!!!6343810.java!!!	constructComponentName() : String
        synchronized (TextArea.class) {
            return base + nameCounter++;
        }
!!!6343938.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
            if (peer == null)
                peer = getToolkit().createTextArea(this);
            super.addNotify();
        }
!!!6344066.java!!!	insert(inout str : String, in pos : int) : void
        insertText(str, pos);
!!!6344194.java!!!	insertText(inout str : String, in pos : int) : void
        TextAreaPeer peer = (TextAreaPeer)this.peer;
        if (peer != null) {
            peer.insert(str, pos);
        } else {
            text = text.substring(0, pos) + str + text.substring(pos);
        }
!!!6344322.java!!!	append(inout str : String) : void
        appendText(str);
!!!6344450.java!!!	appendText(inout str : String) : void
        if (peer != null) {
            insertText(str, getText().length());
        } else {
            text = text + str;
        }
!!!6344578.java!!!	replaceRange(inout str : String, in start : int, in end : int) : void
        replaceText(str, start, end);
!!!6344706.java!!!	replaceText(inout str : String, in start : int, in end : int) : void
        TextAreaPeer peer = (TextAreaPeer)this.peer;
        if (peer != null) {
            peer.replaceRange(str, start, end);
        } else {
            text = text.substring(0, start) + str + text.substring(end);
        }
!!!6344834.java!!!	getRows() : int
        return rows;
!!!6344962.java!!!	setRows(in rows : int) : void
        int oldVal = this.rows;
        if (rows < 0) {
            throw new IllegalArgumentException("rows less than zero.");
        }
        if (rows != oldVal) {
            this.rows = rows;
            invalidate();
        }
!!!6345090.java!!!	getColumns() : int
        return columns;
!!!6345218.java!!!	setColumns(in columns : int) : void
        int oldVal = this.columns;
        if (columns < 0) {
            throw new IllegalArgumentException("columns less than zero.");
        }
        if (columns != oldVal) {
            this.columns = columns;
            invalidate();
        }
!!!6345346.java!!!	getScrollbarVisibility() : int
        return scrollbarVisibility;
!!!6345474.java!!!	getPreferredSize(in rows : int, in columns : int) : Dimension
        return preferredSize(rows, columns);
!!!6345602.java!!!	preferredSize(in rows : int, in columns : int) : Dimension
        synchronized (getTreeLock()) {
            TextAreaPeer peer = (TextAreaPeer)this.peer;
            return (peer != null) ?
                       peer.getPreferredSize(rows, columns) :
                       super.preferredSize();
        }
!!!6345730.java!!!	getPreferredSize() : Dimension
        return preferredSize();
!!!6345858.java!!!	preferredSize() : Dimension
        synchronized (getTreeLock()) {
            return ((rows > 0) && (columns > 0)) ?
                        preferredSize(rows, columns) :
                        super.preferredSize();
        }
!!!6345986.java!!!	getMinimumSize(in rows : int, in columns : int) : Dimension
        return minimumSize(rows, columns);
!!!6346114.java!!!	minimumSize(in rows : int, in columns : int) : Dimension
        synchronized (getTreeLock()) {
            TextAreaPeer peer = (TextAreaPeer)this.peer;
            return (peer != null) ?
                       peer.getMinimumSize(rows, columns) :
                       super.minimumSize();
        }
!!!6346242.java!!!	getMinimumSize() : Dimension
        return minimumSize();
!!!6346370.java!!!	minimumSize() : Dimension
        synchronized (getTreeLock()) {
            return ((rows > 0) && (columns > 0)) ?
                        minimumSize(rows, columns) :
                        super.minimumSize();
        }
!!!6346498.java!!!	paramString() : String
        String sbVisStr;
        switch (scrollbarVisibility) {
            case SCROLLBARS_BOTH:
                sbVisStr = "both";
                break;
            case SCROLLBARS_VERTICAL_ONLY:
                sbVisStr = "vertical-only";
                break;
            case SCROLLBARS_HORIZONTAL_ONLY:
                sbVisStr = "horizontal-only";
                break;
            case SCROLLBARS_NONE:
                sbVisStr = "none";
                break;
            default:
                sbVisStr = "invalid display policy";
        }

        return super.paramString() + ",rows=" + rows +
            ",columns=" + columns +
          ",scrollbarVisibility=" + sbVisStr;
!!!6346626.java!!!	readObject(inout s : ObjectInputStream) : void
        // HeadlessException will be thrown by TextComponent's readObject
        s.defaultReadObject();

        // Make sure the state we just read in for columns, rows,
        // and scrollbarVisibility has legal values
        if (columns < 0) {
            columns = 0;
        }
        if (rows < 0) {
            rows = 0;
        }

        if ((scrollbarVisibility < SCROLLBARS_BOTH) ||
            (scrollbarVisibility > SCROLLBARS_NONE)) {
            this.scrollbarVisibility = SCROLLBARS_BOTH;
        }

        if (textAreaSerializedDataVersion < 2) {
            setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                                  forwardTraversalKeys);
            setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
                                  backwardTraversalKeys);
        }
!!!6346754.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTTextArea();
        }
        return accessibleContext;
