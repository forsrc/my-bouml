class Ser
!!!8570626.java!!!	Ser(in type : byte, inout object : Object)
        this.type = type;
        this.object = object;
!!!8570754.java!!!	writeExternal(inout out : ObjectOutput) : void
        writeInternal(type, object, out);
!!!8570882.java!!!	write(inout object : Object, inout out : DataOutput) : void
        writeInternal(ZRULES, object, out);
!!!8571010.java!!!	writeInternal(in type : byte, inout object : Object, inout out : DataOutput) : void
        out.writeByte(type);
        switch (type) {
            case ZRULES:
                ((ZoneRules) object).writeExternal(out);
                break;
            case ZOT:
                ((ZoneOffsetTransition) object).writeExternal(out);
                break;
            case ZOTRULE:
                ((ZoneOffsetTransitionRule) object).writeExternal(out);
                break;
            default:
                throw new InvalidClassException("Unknown serialized type");
        }
!!!8571138.java!!!	readExternal(inout in : ObjectInput) : void
        type = in.readByte();
        object = readInternal(type, in);
!!!8571266.java!!!	read(inout in : DataInput) : Object
        byte type = in.readByte();
        return readInternal(type, in);
!!!8571394.java!!!	readInternal(in type : byte, inout in : DataInput) : Object
        switch (type) {
            case ZRULES:
                return ZoneRules.readExternal(in);
            case ZOT:
                return ZoneOffsetTransition.readExternal(in);
            case ZOTRULE:
                return ZoneOffsetTransitionRule.readExternal(in);
            default:
                throw new StreamCorruptedException("Unknown serialized type");
        }
!!!8571522.java!!!	readResolve() : Object
         return object;
!!!8571650.java!!!	writeOffset(inout offset : ZoneOffset, inout out : DataOutput) : void
        final int offsetSecs = offset.getTotalSeconds();
        int offsetByte = offsetSecs % 900 == 0 ? offsetSecs / 900 : 127;  // compress to -72 to +72
        out.writeByte(offsetByte);
        if (offsetByte == 127) {
            out.writeInt(offsetSecs);
        }
!!!8571778.java!!!	readOffset(inout in : DataInput) : ZoneOffset
        int offsetByte = in.readByte();
        return (offsetByte == 127 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(offsetByte * 900));
!!!8571906.java!!!	writeEpochSec(in epochSec : long, inout out : DataOutput) : void
        if (epochSec >= -4575744000L && epochSec < 10413792000L && epochSec % 900 == 0) {  // quarter hours between 1825 and 2300
            int store = (int) ((epochSec + 4575744000L) / 900);
            out.writeByte((store >>> 16) & 255);
            out.writeByte((store >>> 8) & 255);
            out.writeByte(store & 255);
        } else {
            out.writeByte(255);
            out.writeLong(epochSec);
        }
!!!8572034.java!!!	readEpochSec(inout in : DataInput) : long
        int hiByte = in.readByte() & 255;
        if (hiByte == 255) {
            return in.readLong();
        } else {
            int midByte = in.readByte() & 255;
            int loByte = in.readByte() & 255;
            long tot = ((hiByte << 16) + (midByte << 8) + loByte);
            return (tot * 900) - 4575744000L;
        }
