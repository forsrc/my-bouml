class PushbackInputStream
!!!6921346.java!!!	ensureOpen() : void
        if (in == null)
            throw new IOException("Stream closed");
!!!6921474.java!!!	PushbackInputStream(inout in : InputStream, in size : int)
        super(in);
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
        this.buf = new byte[size];
        this.pos = size;
!!!6921602.java!!!	PushbackInputStream(inout in : InputStream)
        this(in, 1);
!!!6921730.java!!!	read() : int
        ensureOpen();
        if (pos < buf.length) {
            return buf[pos++] & 0xff;
        }
        return super.read();
!!!6921858.java!!!	read(inout b : byte [[]], in off : int, in len : int) : int
        ensureOpen();
        if (b == null) {
            throw new NullPointerException();
        } else if (off < 0 || len < 0 || len > b.length - off) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return 0;
        }

        int avail = buf.length - pos;
        if (avail > 0) {
            if (len < avail) {
                avail = len;
            }
            System.arraycopy(buf, pos, b, off, avail);
            pos += avail;
            off += avail;
            len -= avail;
        }
        if (len > 0) {
            len = super.read(b, off, len);
            if (len == -1) {
                return avail == 0 ? -1 : avail;
            }
            return avail + len;
        }
        return avail;
!!!6921986.java!!!	unread(in b : int) : void
        ensureOpen();
        if (pos == 0) {
            throw new IOException("Push back buffer is full");
        }
        buf[--pos] = (byte)b;
!!!6922114.java!!!	unread(inout b : byte [[]], in off : int, in len : int) : void
        ensureOpen();
        if (len > pos) {
            throw new IOException("Push back buffer is full");
        }
        pos -= len;
        System.arraycopy(b, off, buf, pos, len);
!!!6922242.java!!!	unread(inout b : byte [[]]) : void
        unread(b, 0, b.length);
!!!6922370.java!!!	available() : int
        ensureOpen();
        int n = buf.length - pos;
        int avail = super.available();
        return n > (Integer.MAX_VALUE - avail)
                    ? Integer.MAX_VALUE
                    : n + avail;
!!!6922498.java!!!	skip(in n : long) : long
        ensureOpen();
        if (n <= 0) {
            return 0;
        }

        long pskip = buf.length - pos;
        if (pskip > 0) {
            if (n < pskip) {
                pskip = n;
            }
            pos += pskip;
            n -= pskip;
        }
        if (n > 0) {
            pskip += super.skip(n);
        }
        return pskip;
!!!6922626.java!!!	markSupported() : boolean
        return false;
!!!6922882.java!!!	reset() : void
        throw new IOException("mark/reset not supported");
!!!6923010.java!!!	close() : void
        if (in == null)
            return;
        in.close();
        in = null;
        buf = null;
