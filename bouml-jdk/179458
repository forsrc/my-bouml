format 222
"element" // jdk1.8::javax::lang::model::element
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/lang/model/element/"
  java_package "javax.lang.model.element"
  classview 172162 "element"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 838018 "Name"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An immutable sequence of characters.  When created by the same
implementation, objects implementing this interface must obey the
general {@linkplain Object#equals equals contract} when compared
with each other.  Therefore, {@code Name} objects from the same
implementation are usable in collections while {@code Name}s from
different implementations may not work properly in collections.

<p>An empty {@code Name} has a length of zero.

<p>In the context of {@linkplain
javax.annotation.processing.ProcessingEnvironment annotation
processing}, the guarantees for \"the same\" implementation must
include contexts where the {@linkplain javax.annotation.processing
API mediated} side effects of {@linkplain
javax.annotation.processing.Processor processors} could be visible
to each other, including successive annotation processing
{@linkplain javax.annotation.processing.RoundEnvironment rounds}.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see javax.lang.model.util.Elements#getName
@since 1.6
"
      classrelation 3770882 // <generalisation>
	relation 3770882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3770882 // <generalisation>
	  b parent class_ref 429442 // CharSequence
      end

      operation 9703682 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the argument represents the same
name as {@code this}, and {@code false} otherwise.

<p>Note that the identity of a {@code Name} is a function both
of its content in terms of a sequence of characters as well as
the implementation which created it.

@param obj  the object to be compared with this element
@return {@code true} if the specified object represents the same
         name as this
@see Element#equals
"
      end

      operation 9703810 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obeys the general contract of {@link Object#hashCode Object.hashCode}.

@see #equals
"
      end

      operation 9703938 "contentEquals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 429442 // CharSequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this name to the specified {@code CharSequence}. The result
is {@code true} if and only if this name represents the same sequence
of {@code char} values as the specified sequence.

@return {@code true} if this name represents the same sequence
of {@code char} values as the specified sequence, {@code false}
otherwise

@param cs The sequence to compare this name against
@see String#contentEquals(CharSequence)
"
      end
    end

    class 847746 "Modifier"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a modifier on a program element such
as a class, method, or field.

<p>Not all modifiers are applicable to all kinds of elements.
When two or more modifiers appear in the source code of an element
then it is customary, though not required, that they appear in the same
order as the constants listed in the detail section below.

<p>Note that it is possible additional modifiers will be added in
future versions of the platform.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      attribute 2255618 "PUBLIC"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " See JLS sections 8.1.1, 8.3.1, 8.4.3, 8.8.3, and 9.1.1.
 java.lang.reflect.Modifier includes INTERFACE, but that's a VMism.
 The modifier {@code public} 
"
      end

      attribute 2255746 "PROTECTED"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code protected} 
"
      end

      attribute 2255874 "PRIVATE"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code private} 
"
      end

      attribute 2256002 "ABSTRACT"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code abstract} 
"
      end

      attribute 2256130 "DEFAULT"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The modifier {@code default}
@since 1.8

"
      end

      attribute 2256258 "STATIC"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code static} 
"
      end

      attribute 2256386 "FINAL"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code final} 
"
      end

      attribute 2256514 "TRANSIENT"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code transient} 
"
      end

      attribute 2256642 "VOLATILE"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code volatile} 
"
      end

      attribute 2256770 "SYNCHRONIZED"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code synchronized} 
"
      end

      attribute 2256898 "NATIVE"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code native} 
"
      end

      attribute 2257026 "STRICTFP"
	public type class_ref 847746 // Modifier
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The modifier {@code strictfp} "
      end

      operation 9703554 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this modifier's name in lowercase.
"
      end
    end

    class 848898 "TypeElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a class or interface program element.  Provides access
to information about the type and its members.  Note that an enum
type is a kind of class and an annotation type is a kind of
interface.

<p> <a name=\"ELEM_VS_TYPE\"></a>
While a {@code TypeElement} represents a class or interface
<i>element</i>, a {@link DeclaredType} represents a class
or interface <i>type</i>, the latter being a use
(or <i>invocation</i>) of the former.
The distinction is most apparent with generic types,
for which a single element can define a whole
family of types.  For example, the element
{@code java.util.Set} corresponds to the parameterized types
{@code java.util.Set<String>} and {@code java.util.Set<Number>}
(and many others), and to the raw type {@code java.util.Set}.

<p> Each method of this interface that returns a list of elements
will return them in the order that is natural for the underlying
source of program information.  For example, if the underlying
source of information is Java source code, then the elements will be
returned in source code order.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see DeclaredType
@since 1.6
"
      classrelation 3771394 // <generalisation>
	relation 3771394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771394 // <generalisation>
	  b parent class_ref 851842 // Element
      end

      classrelation 3771522 // <generalisation>
	relation 3771522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771522 // <generalisation>
	  b parent class_ref 1180290 // Parameterizable
      end

      classrelation 3771650 // <generalisation>
	relation 3771650 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771650 // <generalisation>
	  b parent class_ref 1180546 // QualifiedNameable
      end

      operation 9704962 "getEnclosedElements"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Element> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the fields, methods, constructors, and member types
that are directly declared in this class or interface.

This includes any (implicit) default constructor and
the implicit {@code values} and {@code valueOf} methods of an
enum type.

<p> Note that as a particular instance of the {@linkplain
javax.lang.model.element general accuracy requirements} and the
ordering behavior required of this interface, the list of
enclosed elements will be returned in the natural order for the
originating source of information about the type.  For example,
if the information about the type is originating from a source
file, the elements will be returned in source code order.
(However, in that case the the ordering of synthesized
elements, such as a default constructor, is not specified.)

@return the enclosed elements in proper order, or an empty list if none
"
      end

      operation 9705090 "getNestingKind"
	public return_type class_ref 1180418 // NestingKind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>nesting kind</i> of this type element.

@return the nesting kind of this type element
"
      end

      operation 9705218 "getQualifiedName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully qualified name of this type element.
More precisely, it returns the <i>canonical</i> name.
For local and anonymous classes, which do not have canonical names,
an empty name is returned.

<p>The name of a generic type does not include any reference
to its formal type parameters.
For example, the fully qualified name of the interface
{@code java.util.Set<E>} is \"{@code java.util.Set}\".
Nested types use \"{@code .}\" as a separator, as in
\"{@code java.util.Map.Entry}\".

@return the fully qualified name of this class or interface, or
an empty name if none

@see Elements#getBinaryName
@jls 6.7 Fully Qualified Names and Canonical Names
"
      end

      operation 9705346 "getSimpleName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the simple name of this type element.

For an anonymous class, an empty name is returned.

@return the simple name of this class or interface,
an empty name for an anonymous class

"
      end

      operation 9705474 "getSuperclass"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the direct superclass of this type element.
If this type element represents an interface or the class
{@code java.lang.Object}, then a {@link NoType}
with kind {@link TypeKind#NONE NONE} is returned.

@return the direct superclass, or a {@code NoType} if there is none
"
      end

      operation 9705602 "getInterfaces"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the interface types directly implemented by this class
or extended by this interface.

@return the interface types directly implemented by this class
or extended by this interface, or an empty list if there are none
"
      end

      operation 9705730 "getTypeParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeParameterElement> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the formal type parameters of this type element
in declaration order.

@return the formal type parameters, or an empty list
if there are none
"
      end

      operation 9705858 "getEnclosingElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the package of a top-level type and returns the
immediately lexically enclosing element for a {@linkplain
NestingKind#isNested nested} type.

@return the package of a top-level type, the immediately
lexically enclosing element for a nested type
"
      end
    end

    class 849026 "ExecutableElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a method, constructor, or initializer (static or
instance) of a class or interface, including annotation type
elements.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see ExecutableType
@since 1.6
"
      classrelation 3770498 // <generalisation>
	relation 3770498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3770498 // <generalisation>
	  b parent class_ref 851842 // Element
      end

      classrelation 3770754 // <generalisation>
	relation 3770754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3770754 // <generalisation>
	  b parent class_ref 1180290 // Parameterizable
      end

      operation 9702402 "getTypeParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeParameterElement> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the formal type parameters of this executable
in declaration order.

@return the formal type parameters, or an empty list
if there are none
"
      end

      operation 9702530 "getReturnType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the return type of this executable.
Returns a {@link NoType} with kind {@link TypeKind#VOID VOID}
if this executable is not a method, or is a method that does not
return a value.

@return the return type of this executable
"
      end

      operation 9702658 "getParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends VariableElement> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the formal parameters of this executable.
They are returned in declaration order.

@return the formal parameters,
or an empty list if there are none
"
      end

      operation 9702786 "getReceiverType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the receiver type of this executable,
or {@link javax.lang.model.type.NoType NoType} with
kind {@link javax.lang.model.type.TypeKind#NONE NONE}
if the executable has no receiver type.

An executable which is an instance method, or a constructor of an
inner class, has a receiver type derived from the {@linkplain
#getEnclosingElement declaring type}.

An executable which is a static method, or a constructor of a
non-inner class, or an initializer (static or instance), has no
receiver type.

@return the receiver type of this executable
@since 1.8
"
      end

      operation 9702914 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this method or constructor accepts a variable
number of arguments and returns {@code false} otherwise.

@return {@code true} if this method or constructor accepts a variable
number of arguments and {@code false} otherwise
"
      end

      operation 9703042 "isDefault"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this method is a default method and
returns {@code false} otherwise.

@return {@code true} if this method is a default method and
{@code false} otherwise
@since 1.8
"
      end

      operation 9703170 "getThrownTypes"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exceptions and other throwables listed in this
method or constructor's {@code throws} clause in declaration
order.

@return the exceptions and other throwables listed in the
{@code throws} clause, or an empty list if there are none
"
      end

      operation 9703298 "getDefaultValue"
	public return_type class_ref 852098 // AnnotationValue
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value if this executable is an annotation
type element.  Returns {@code null} if this method is not an
annotation type element, or if it is an annotation type element
with no default value.

@return the default value, or {@code null} if none
"
      end

      operation 9703426 "getSimpleName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the simple name of a constructor, method, or
initializer.  For a constructor, the name {@code \"<init>\"} is
returned, for a static initializer, the name {@code \"<clinit>\"}
is returned, and for an anonymous class or instance
initializer, an empty name is returned.

@return the simple name of a constructor, method, or
initializer
"
      end
    end

    class 851842 "Element"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a program element such as a package, class, or method.
Each element represents a static, language-level construct
(and not, for example, a runtime construct of the virtual machine).

<p> Elements should be compared using the {@link #equals(Object)}
method.  There is no guarantee that any particular element will
always be represented by the same object.

<p> To implement operations based on the class of an {@code
Element} object, either use a {@linkplain ElementVisitor visitor} or
use the result of the {@link #getKind} method.  Using {@code
instanceof} is <em>not</em> necessarily a reliable idiom for
determining the effective class of an object in this modeling
hierarchy since an implementation may choose to have a single object
implement multiple {@code Element} subinterfaces.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see Elements
@see TypeMirror
@since 1.6
"
      classrelation 3770370 // <generalisation>
	relation 3770370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3770370 // <generalisation>
	  b parent class_ref 1179266 // AnnotatedConstruct
      end

      operation 9699458 "asType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type defined by this element.

<p> A generic element defines a family of types, not just one.
If this is a generic element, a <i>prototypical</i> type is
returned.  This is the element's invocation on the
type variables corresponding to its own formal type parameters.
For example,
for the generic class element {@code C<N extends Number>},
the parameterized type {@code C<N>} is returned.
The {@link Types} utility interface has more general methods
for obtaining the full range of types defined by an element.

@see Types

@return the type defined by this element
"
      end

      operation 9699586 "getKind"
	public return_type class_ref 1179778 // ElementKind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code kind} of this element.

@return the kind of this element
"
      end

      operation 9699714 "getModifiers"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Modifier> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modifiers of this element, excluding annotations.
Implicit modifiers, such as the {@code public} and {@code static}
modifiers of interface members, are included.

@return the modifiers of this element, or an empty set if there are none
"
      end

      operation 9699842 "getSimpleName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the simple (unqualified) name of this element.  The
name of a generic type does not include any reference to its
formal type parameters.

For example, the simple name of the type element {@code
java.util.Set<E>} is {@code \"Set\"}.

If this element represents an unnamed {@linkplain
PackageElement#getSimpleName package}, an empty name is
returned.

If it represents a {@linkplain ExecutableElement#getSimpleName
constructor}, the name \"{@code <init>}\" is returned.  If it
represents a {@linkplain ExecutableElement#getSimpleName static
initializer}, the name \"{@code <clinit>}\" is returned.

If it represents an {@linkplain TypeElement#getSimpleName
anonymous class} or {@linkplain ExecutableElement#getSimpleName
instance initializer}, an empty name is returned.

@return the simple name of this element
@see PackageElement#getSimpleName
@see ExecutableElement#getSimpleName
@see TypeElement#getSimpleName
@see VariableElement#getSimpleName
"
      end

      operation 9699970 "getEnclosingElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the innermost element
within which this element is, loosely speaking, enclosed.
<ul>
<li> If this element is one whose declaration is lexically enclosed
immediately within the declaration of another element, that other
element is returned.

<li> If this is a {@linkplain TypeElement#getEnclosingElement
top-level type}, its package is returned.

<li> If this is a {@linkplain
PackageElement#getEnclosingElement package}, {@code null} is
returned.

<li> If this is a {@linkplain
TypeParameterElement#getEnclosingElement type parameter},
{@linkplain TypeParameterElement#getGenericElement the
generic element} of the type parameter is returned.

<li> If this is a {@linkplain
VariableElement#getEnclosingElement method or constructor
parameter}, {@linkplain ExecutableElement the executable
element} which declares the parameter is returned.

</ul>

@return the enclosing element, or {@code null} if there is none
@see Elements#getPackageOf
"
      end

      operation 9700098 "getEnclosedElements"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Element> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the elements that are, loosely speaking, directly
enclosed by this element.

A {@linkplain TypeElement#getEnclosedElements class or
interface} is considered to enclose the fields, methods,
constructors, and member types that it directly declares.

A {@linkplain PackageElement#getEnclosedElements package}
encloses the top-level classes and interfaces within it, but is
not considered to enclose subpackages.

Other kinds of elements are not currently considered to enclose
any elements; however, that may change as this API or the
programming language evolves.

<p>Note that elements of certain kinds can be isolated using
methods in {@link ElementFilter}.

@return the enclosed elements, or an empty list if none
@see PackageElement#getEnclosedElements
@see TypeElement#getEnclosedElements
@see Elements#getAllMembers
@jls 8.8.9 Default Constructor
@jls 8.9 Enums
"
      end

      operation 9700226 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns {@code true} if the argument represents the same
element as {@code this}, or {@code false} otherwise.

<p>Note that the identity of an element involves implicit state
not directly accessible from the element's methods, including
state about the presence of unrelated types.  Element objects
created by different implementations of these interfaces should
<i>not</i> be expected to be equal even if &quot;the same&quot;
element is being modeled; this is analogous to the inequality
of {@code Class} objects for the same class file loaded through
different class loaders.

@param obj  the object to be compared with this element
@return {@code true} if the specified object represents the same
         element as this
"
      end

      operation 9700354 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obeys the general contract of {@link Object#hashCode Object.hashCode}.

@see #equals
"
      end

      operation 9700482 "getAnnotationMirrors"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

<p> To get inherited annotations as well, use {@link
Elements#getAllAnnotationMirrors(Element)
getAllAnnotationMirrors}.

@since 1.6
"
      end

      operation 9700610 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationType" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.6
"
      end

      operation 9700738 "accept"
	public explicit_return_type "R"
	nparams 2
	  param inout name "v" type class_ref 1179906 // ElementVisitor
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R, P> ${type} ${name}${(}${t0}<R, P> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a visitor to this element.

@param <R> the return type of the visitor's methods
@param <P> the type of the additional parameter to the visitor's methods
@param v   the visitor operating on this element
@param p   additional parameter to the visitor
@return a visitor-specified result
"
      end
    end

    class 851970 "AnnotationMirror"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an annotation.  An annotation associates a value with
each element of an annotation type.

<p> Annotations should be compared using the {@code equals}
method.  There is no guarantee that any particular annotation will
always be represented by the same object.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      operation 9696770 "getAnnotationType"
	public return_type class_ref 852354 // DeclaredType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this annotation.

@return the type of this annotation
"
      end

      operation 9696898 "getElementValues"
	public return_type class_ref 130178 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExecutableElement, ? extends AnnotationValue> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the values of this annotation's elements.
This is returned in the form of a map that associates elements
with their corresponding values.
Only those elements with values explicitly present in the
annotation are included, not those that are implicitly assuming
their default values.
The order of the map matches the order in which the
values appear in the annotation's source.

<p>Note that an annotation mirror of a marker annotation type
will by definition have an empty map.

<p>To fill in default values, use {@link
javax.lang.model.util.Elements#getElementValuesWithDefaults
getElementValuesWithDefaults}.

@return the values of this annotation's elements,
         or an empty map if there are none
"
      end
    end

    class 852098 "AnnotationValue"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a value of an annotation type element.
A value is of one of the following types:
<ul><li> a wrapper class (such as {@link Integer}) for a primitive type
    <li> {@code String}
    <li> {@code TypeMirror}
    <li> {@code VariableElement} (representing an enum constant)
    <li> {@code AnnotationMirror}
    <li> {@code List<? extends AnnotationValue>}
             (representing the elements, in declared order, if the value is an array)
</ul>

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      operation 9697026 "getValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value.

@return the value
"
      end

      operation 9697154 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this value.
This is returned in a form suitable for representing this value
in the source code of an annotation.

@return a string representation of this value
"
      end

      operation 9697282 "accept"
	public explicit_return_type "R"
	nparams 2
	  param inout name "v" type class_ref 1179522 // AnnotationValueVisitor
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R, P> ${type} ${name}${(}${t0}<R, P> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a visitor to this value.

@param <R> the return type of the visitor's methods
@param <P> the type of the additional parameter to the visitor's methods
@param v   the visitor operating on this value
@param p   additional parameter to the visitor
@return a visitor-specified result
"
      end
    end

    class 1179522 "AnnotationValueVisitor"
      visibility public stereotype "interface"
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of the values of annotation type elements, using a
variant of the visitor design pattern.  Unlike a standard visitor
which dispatches based on the concrete type of a member of a type
hierarchy, this visitor dispatches based on the type of data
stored; there are no distinct subclasses for storing, for example,
{@code boolean} values versus {@code int} values.  Classes
implementing this interface are used to operate on a value when the
type of that value is unknown at compile time.  When a visitor is
passed to a value's {@link AnnotationValue#accept accept} method,
the <tt>visit<i>XYZ</i></tt> method applicable to that value is
invoked.

<p> Classes implementing this interface may or may not throw a
{@code NullPointerException} if the additional parameter {@code p}
is {@code null}; see documentation of the implementing class for
details.

<p> <b>WARNING:</b> It is possible that methods will be added to
this interface to accommodate new, currently unknown, language
structures added to future versions of the Java&trade; programming
language.  Therefore, visitor classes directly implementing this
interface may be source incompatible with future versions of the
platform.  To avoid this source incompatibility, visitor
implementations are encouraged to instead extend the appropriate
abstract visitor class that implements this interface.  However, an
API should generally use this visitor interface as the type for
parameters, return type, etc. rather than one of the abstract
classes.

<p>Note that methods to accommodate new language constructs could
be added in a source <em>compatible</em> way if they were added as
<em>default methods</em>.  However, default methods are only
available on Java SE 8 and higher releases and the {@code
javax.lang.model.*} packages bundled in Java SE 8 are required to
also be runnable on Java SE 7.  Therefore, default methods
<em>cannot</em> be used when extending {@code javax.lang.model.*}
to cover Java SE 8 language features.  However, default methods may
be used in subsequent revisions of the {@code javax.lang.model.*}
packages that are only required to run on Java SE 8 and higher
platform versions.

@param <R> the return type of this visitor's methods
@param <P> the type of the additional parameter to this visitor's methods.
@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      operation 9697410 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "av" type class_ref 852098 // AnnotationValue
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an annotation value.
@param av the value to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9697538 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "av" type class_ref 852098 // AnnotationValue
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method equivalent to {@code v.visit(av, null)}.
@param av the value to visit
@return  a visitor-specified result
"
      end

      operation 9697666 "visitBoolean"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "b" explicit_type "boolean"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code boolean} value in an annotation.
@param b the value being visited
@param p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9697794 "visitByte"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "b" explicit_type "byte"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code byte} value in an annotation.
@param  b the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9697922 "visitChar"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "c" explicit_type "char"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code char} value in an annotation.
@param  c the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698050 "visitDouble"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "d" explicit_type "double"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code double} value in an annotation.
@param  d the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698178 "visitFloat"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "f" explicit_type "float"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code float} value in an annotation.
@param  f the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698306 "visitInt"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code int} value in an annotation.
@param  i the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698434 "visitLong"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "i" explicit_type "long"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code long} value in an annotation.
@param  i the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698562 "visitShort"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param in name "s" explicit_type "short"
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@code short} value in an annotation.
@param  s the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698690 "visitString"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a string value in an annotation.
@param  s the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698818 "visitType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852226 // TypeMirror
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a type value in an annotation.
@param  t the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9698946 "visitEnumConstant"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "c" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an {@code enum} value in an annotation.
@param  c the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9699074 "visitAnnotation"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "a" type class_ref 851970 // AnnotationMirror
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an annotation value in an annotation.
@param  a the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9699202 "visitArray"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "vals" type class_ref 175362 // List
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends AnnotationValue> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an array value in an annotation.
@param  vals the value being visited
@param  p a visitor-specified parameter
@return the result of the visit
"
      end

      operation 9699330 "visitUnknown"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "av" type class_ref 852098 // AnnotationValue
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an unknown kind of annotation value.
This can occur if the language evolves and new kinds
of value can be stored in an annotation.
@param  av the unknown value being visited
@param  p a visitor-specified parameter
@return the result of the visit
@throws UnknownAnnotationValueException
 a visitor implementation may optionally throw this exception
"
      end
    end

    class 1179650 "VariableElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a field, {@code enum} constant, method or constructor
parameter, local variable, resource variable, or exception
parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 3772674 // <generalisation>
	relation 3772674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3772674 // <generalisation>
	  b parent class_ref 851842 // Element
      end

      operation 9707138 "getConstantValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this variable if this is a {@code final}
field initialized to a compile-time constant.  Returns {@code
null} otherwise.  The value will be of a primitive type or a
{@code String}.  If the value is of a primitive type, it is
wrapped in the appropriate wrapper class (such as {@link
Integer}).

<p>Note that not all {@code final} fields will have
constant values.  In particular, {@code enum} constants are
<em>not</em> considered to be compile-time constants.  To have a
constant value, a field's type must be either a primitive type
or {@code String}.

@return the value of this variable if this is a {@code final}
field initialized to a compile-time constant, or {@code null}
otherwise

@see Elements#getConstantExpression(Object)
@jls 15.28 Constant Expression
@jls 4.12.4 final Variables
"
      end

      operation 9707266 "getSimpleName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the simple name of this variable element.

<p>For method and constructor parameters, the name of each
parameter must be distinct from the names of all other
parameters of the same executable.  If the original source
names are not available, an implementation may synthesize names
subject to the distinctness requirement above.

@return the simple name of this variable element
"
      end

      operation 9707394 "getEnclosingElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the enclosing element of this variable.

The enclosing element of a method or constructor parameter is
the executable declaring the parameter.

@return the enclosing element of this variable
"
      end
    end

    class 1179778 "ElementKind"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code kind} of an element.

<p>Note that it is possible additional element kinds will be added
to accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see Element
@since 1.6
"
      attribute 2253442 "PACKAGE"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A package. 
"
      end

      attribute 2253570 "ENUM"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Declared types
 An enum type. 
"
      end

      attribute 2253698 "CLASS"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A class not described by a more specific kind (like {@code ENUM}). 
"
      end

      attribute 2253826 "ANNOTATION_TYPE"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " An annotation type. 
"
      end

      attribute 2253954 "INTERFACE"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An interface not described by a more specific kind (like
{@code ANNOTATION_TYPE}).

"
      end

      attribute 2254082 "ENUM_CONSTANT"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Variables
 An enum constant. 
"
      end

      attribute 2254210 "FIELD"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A field not described by a more specific kind (like
{@code ENUM_CONSTANT}).

"
      end

      attribute 2254338 "PARAMETER"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A parameter of a method or constructor. 
"
      end

      attribute 2254466 "LOCAL_VARIABLE"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A local variable. 
"
      end

      attribute 2254594 "EXCEPTION_PARAMETER"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A parameter of an exception handler. 
"
      end

      attribute 2254722 "METHOD"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Executables
 A method. 
"
      end

      attribute 2254850 "CONSTRUCTOR"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A constructor. 
"
      end

      attribute 2254978 "STATIC_INIT"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A static initializer. 
"
      end

      attribute 2255106 "INSTANCE_INIT"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " An instance initializer. 
"
      end

      attribute 2255234 "TYPE_PARAMETER"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A type parameter. 
"
      end

      attribute 2255362 "OTHER"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An implementation-reserved element.  This is not the element
you are looking for.

"
      end

      attribute 2255490 "RESOURCE_VARIABLE"
	public type class_ref 1179778 // ElementKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A resource variable.
@since 1.7
"
      end

      operation 9700866 "isClass"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this is a kind of class:
either {@code CLASS} or {@code ENUM}.

@return {@code true} if this is a kind of class
"
      end

      operation 9700994 "isInterface"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this is a kind of interface:
either {@code INTERFACE} or {@code ANNOTATION_TYPE}.

@return {@code true} if this is a kind of interface
"
      end

      operation 9701122 "isField"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this is a kind of field:
either {@code FIELD} or {@code ENUM_CONSTANT}.

@return {@code true} if this is a kind of field
"
      end
    end

    class 1179906 "ElementVisitor"
      visibility public stereotype "interface"
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of program elements, in the style of the visitor design
pattern.  Classes implementing this interface are used to operate
on an element when the kind of element is unknown at compile time.
When a visitor is passed to an element's {@link Element#accept
accept} method, the <tt>visit<i>XYZ</i></tt> method most applicable
to that element is invoked.

<p> Classes implementing this interface may or may not throw a
{@code NullPointerException} if the additional parameter {@code p}
is {@code null}; see documentation of the implementing class for
details.

<p> <b>WARNING:</b> It is possible that methods will be added to
this interface to accommodate new, currently unknown, language
structures added to future versions of the Java&trade; programming
language.  Therefore, visitor classes directly implementing this
interface may be source incompatible with future versions of the
platform.  To avoid this source incompatibility, visitor
implementations are encouraged to instead extend the appropriate
abstract visitor class that implements this interface.  However, an
API should generally use this visitor interface as the type for
parameters, return type, etc. rather than one of the abstract
classes.

<p>Note that methods to accommodate new language constructs could
be added in a source <em>compatible</em> way if they were added as
<em>default methods</em>.  However, default methods are only
available on Java SE 8 and higher releases and the {@code
javax.lang.model.*} packages bundled in Java SE 8 are required to
also be runnable on Java SE 7.  Therefore, default methods
<em>cannot</em> be used when extending {@code javax.lang.model.*}
to cover Java SE 8 language features.  However, default methods may
be used in subsequent revisions of the {@code javax.lang.model.*}
packages that are only required to run on Java SE 8 and higher
platform versions.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see AbstractElementVisitor6
@see AbstractElementVisitor7
@since 1.6
"
      operation 9701250 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 851842 // Element
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an element.
@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9701378 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "e" type class_ref 851842 // Element
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method equivalent to {@code v.visit(e, null)}.
@param e  the element to visit
@return a visitor-specified result
"
      end

      operation 9701506 "visitPackage"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180034 // PackageElement
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a package element.
@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9701634 "visitType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 848898 // TypeElement
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a type element.
@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9701762 "visitVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1179650 // VariableElement
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a variable element.
@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9701890 "visitExecutable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 849026 // ExecutableElement
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an executable element.
@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9702018 "visitTypeParameter"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 1180162 // TypeParameterElement
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a type parameter element.
@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
"
      end

      operation 9702146 "visitUnknown"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "e" type class_ref 851842 // Element
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an unknown kind of element.
This can occur if the language evolves and new kinds
of elements are added to the {@code Element} hierarchy.

@param e  the element to visit
@param p  a visitor-specified parameter
@return a visitor-specified result
@throws UnknownElementException
 a visitor implementation may optionally throw this exception
"
      end
    end

    class 1180034 "PackageElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a package program element.  Provides access to information
about the package and its members.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see javax.lang.model.util.Elements#getPackageOf
@since 1.6
"
      classrelation 3771010 // <generalisation>
	relation 3771010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771010 // <generalisation>
	  b parent class_ref 851842 // Element
      end

      classrelation 3771266 // <generalisation>
	relation 3771266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771266 // <generalisation>
	  b parent class_ref 1180546 // QualifiedNameable
      end

      operation 9704322 "getQualifiedName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully qualified name of this package.
This is also known as the package's <i>canonical</i> name.

@return the fully qualified name of this package, or an
empty name if this is an unnamed package
@jls 6.7 Fully Qualified Names and Canonical Names
"
      end

      operation 9704450 "getSimpleName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the simple name of this package.  For an unnamed
package, an empty name is returned.

@return the simple name of this package or an empty name if
this is an unnamed package
"
      end

      operation 9704578 "getEnclosedElements"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Element> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the {@linkplain NestingKind#TOP_LEVEL top-level}
classes and interfaces within this package.  Note that
subpackages are <em>not</em> considered to be enclosed by a
package.

@return the top-level classes and interfaces within this
package
"
      end

      operation 9704706 "isUnnamed"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} is this is an unnamed package and {@code
false} otherwise.

@return {@code true} is this is an unnamed package and {@code
false} otherwise
@jls 7.4.2 Unnamed Packages
"
      end

      operation 9704834 "getEnclosingElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns {@code null} since a package is not enclosed by another
element.

@return {@code null}
"
      end
    end

    class 1180162 "TypeParameterElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a formal type parameter of a generic class, interface, method,
or constructor element.
A type parameter declares a {@link TypeVariable}.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see TypeVariable
@since 1.6
"
      classrelation 3771778 // <generalisation>
	relation 3771778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771778 // <generalisation>
	  b parent class_ref 851842 // Element
      end

      operation 9705986 "getGenericElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the generic class, interface, method, or constructor that is
parameterized by this type parameter.

@return the generic class, interface, method, or constructor that is
parameterized by this type parameter
"
      end

      operation 9706114 "getBounds"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounds of this type parameter.
These are the types given by the {@code extends} clause
used to declare this type parameter.
If no explicit {@code extends} clause was used,
then {@code java.lang.Object} is considered to be the sole bound.

@return the bounds of this type parameter, or an empty list if
there are none
"
      end

      operation 9706242 "getEnclosingElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the {@linkplain TypeParameterElement#getGenericElement generic element} of this type parameter.

@return the generic element of this type parameter
"
      end
    end

    class 1180290 "Parameterizable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A mixin interface for an element that has type parameters.

@author Joseph D. Darcy
@since 1.7
"
      classrelation 3770626 // <generalisation>
	relation 3770626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3770626 // <generalisation>
	  b parent class_ref 851842 // Element
      end

      operation 9702274 "getTypeParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeParameterElement> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the formal type parameters of the type element in
declaration order.

@return the formal type parameters, or an empty list
if there are none
"
      end
    end

    class 1180418 "NestingKind"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <i>nesting kind</i> of a type element.
Type elements come in four varieties:
top-level, member, local, and anonymous.
<i>Nesting kind</i> is a non-standard term used here to denote this
classification.

<p>Note that it is possible additional nesting kinds will be added
in future versions of the platform.

<p><b>Example:</b> The classes below are annotated with their nesting kind.
<blockquote><pre>

import java.lang.annotation.*;
import static java.lang.annotation.RetentionPolicy.*;
import javax.lang.model.element.*;
import static javax.lang.model.element.NestingKind.*;

&#64;Nesting(TOP_LEVEL)
public class NestingExamples {
    &#64;Nesting(MEMBER)
    static class MemberClass1{}

    &#64;Nesting(MEMBER)
    class MemberClass2{}

    public static void main(String... argv) {
        &#64;Nesting(LOCAL)
        class LocalClass{};

        Class&lt;?&gt;[] classes = {
            NestingExamples.class,
            MemberClass1.class,
            MemberClass2.class,
            LocalClass.class
        };

        for(Class&lt;?&gt; clazz : classes) {
            System.out.format(\"%s is %s%n\",
                              clazz.getName(),
                              clazz.getAnnotation(Nesting.class).value());
        }
    }
}

&#64;Retention(RUNTIME)
&#64;interface Nesting {
    NestingKind value();
}
</pre></blockquote>

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      attribute 2257154 "TOP_LEVEL"
	public type class_ref 1180418 // NestingKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A top-level type, not contained within another type.

"
      end

      attribute 2257282 "MEMBER"
	public type class_ref 1180418 // NestingKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A type that is a named member of another type.

"
      end

      attribute 2257410 "LOCAL"
	public type class_ref 1180418 // NestingKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A named type declared within a construct other than a type.

"
      end

      attribute 2257538 "ANONYMOUS"
	public type class_ref 1180418 // NestingKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A type without a name.
"
      end

      operation 9704066 "isNested"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does this constant correspond to a nested type element?
A <i>nested</i> type element is any that is not top-level.
An <i>inner</i> type element is any nested type element that
is not {@linkplain Modifier#STATIC static}.
@return whether or not the constant is nested
"
      end
    end

    class 1180546 "QualifiedNameable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A mixin interface for an element that has a qualified name.

@author Joseph D. Darcy
@since 1.7
"
      classrelation 3771138 // <generalisation>
	relation 3771138 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771138 // <generalisation>
	  b parent class_ref 851842 // Element
      end

      operation 9704194 "getQualifiedName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully qualified name of an element.

@return the fully qualified name of an element
"
      end
    end

    class 1180674 "UnknownAnnotationValueException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates that an unknown kind of annotation value was encountered.
This can occur if the language evolves and new kinds of annotation
values can be stored in an annotation.  May be thrown by an
{@linkplain AnnotationValueVisitor annotation value visitor} to
indicate that the visitor was created for a prior version of the
language.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see AnnotationValueVisitor#visitUnknown
@since 1.6
"
      classrelation 3771906 // <generalisation>
	relation 3771906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3771906 // <generalisation>
	  b parent class_ref 1179394 // UnknownEntityException
      end

      attribute 2257666 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 269L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3772034 // av (<unidirectional association>)
	relation 3772034 --->
	  a role_name "av" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3772034 // av (<unidirectional association>)
	  b parent class_ref 852098 // AnnotationValue
      end

      classrelation 3772162 // parameter (<unidirectional association>)
	relation 3772162 --->
	  a role_name "parameter" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3772162 // parameter (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9706370 "UnknownAnnotationValueException"
	public explicit_return_type ""
	nparams 2
	  param inout name "av" type class_ref 852098 // AnnotationValue
	  param inout name "p" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code UnknownAnnotationValueException}.  The
{@code p} parameter may be used to pass in an additional
argument with information about the context in which the
unknown annotation value was encountered; for example, the
visit methods of {@link AnnotationValueVisitor} may pass in
their additional parameter.

@param av the unknown annotation value, may be {@code null}
@param p an additional parameter, may be {@code null}
"
      end

      operation 9706498 "getUnknownAnnotationValue"
	public return_type class_ref 852098 // AnnotationValue
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unknown annotation value.
The value may be unavailable if this exception has been
serialized and then read back in.

@return the unknown element, or {@code null} if unavailable
"
      end

      operation 9706626 "getArgument"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the additional argument.

@return the additional argument
"
      end
    end

    class 1180802 "UnknownElementException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates that an unknown kind of element was encountered.  This
can occur if the language evolves and new kinds of elements are
added to the {@code Element} hierarchy.  May be thrown by an
{@linkplain ElementVisitor element visitor} to indicate that the
visitor was created for a prior version of the language.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see ElementVisitor#visitUnknown
@since 1.6
"
      classrelation 3772290 // <generalisation>
	relation 3772290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3772290 // <generalisation>
	  b parent class_ref 1179394 // UnknownEntityException
      end

      attribute 2257794 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 269L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3772418 // element (<unidirectional association>)
	relation 3772418 --->
	  a role_name "element" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3772418 // element (<unidirectional association>)
	  b parent class_ref 851842 // Element
      end

      classrelation 3772546 // parameter (<unidirectional association>)
	relation 3772546 --->
	  a role_name "parameter" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3772546 // parameter (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9706754 "UnknownElementException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 851842 // Element
	  param inout name "p" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code UnknownElementException}.  The {@code p}
parameter may be used to pass in an additional argument with
information about the context in which the unknown element was
encountered; for example, the visit methods of {@link
ElementVisitor} may pass in their additional parameter.

@param e the unknown element, may be {@code null}
@param p an additional parameter, may be {@code null}
"
      end

      operation 9706882 "getUnknownElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unknown element.
The value may be unavailable if this exception has been
serialized and then read back in.

@return the unknown element, or {@code null} if unavailable
"
      end

      operation 9707010 "getArgument"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the additional argument.

@return the additional argument
"
      end
    end
  end

  deploymentview 172418 "element"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 840834 "AnnotationMirror"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import javax.lang.model.type.DeclaredType;
${definition}"
      associated_elems
	class_ref 851970 // AnnotationMirror
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 840962 "AnnotationValue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 852098 // AnnotationValue
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841090 "AnnotationValueVisitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.type.TypeMirror;
${definition}"
      associated_elems
	class_ref 1179522 // AnnotationValueVisitor
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841218 "Element"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.lang.annotation.AnnotationTypeMismatchException;
import java.lang.annotation.IncompleteAnnotationException;
import java.util.List;
import java.util.Set;
import javax.lang.model.type.*;
import javax.lang.model.util.*;
${definition}"
      associated_elems
	class_ref 851842 // Element
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841346 "ElementKind"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1179778 // ElementKind
      end
      comment "Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841474 "ElementVisitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.util.*;
${definition}"
      associated_elems
	class_ref 1179906 // ElementVisitor
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841602 "Parameterizable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 1180290 // Parameterizable
      end
      comment "Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841730 "ExecutableElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.type.*;
${definition}"
      associated_elems
	class_ref 849026 // ExecutableElement
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841858 "Modifier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 847746 // Modifier
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 841986 "Name"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 838018 // Name
      end
      comment "Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 842114 "NestingKind"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1180418 // NestingKind
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 842242 "QualifiedNameable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1180546 // QualifiedNameable
      end
      comment "Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 842370 "PackageElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 1180034 // PackageElement
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 842498 "TypeElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.type.*;
import javax.lang.model.util.*;
${definition}"
      associated_elems
	class_ref 848898 // TypeElement
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 842626 "TypeParameterElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.type.TypeVariable;
${definition}"
      associated_elems
	class_ref 1180162 // TypeParameterElement
      end
      comment "Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 842754 "UnknownAnnotationValueException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.UnknownEntityException;
${definition}"
      associated_elems
	class_ref 1180674 // UnknownAnnotationValueException
      end
      comment "Copyright (c) 2005, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 842882 "UnknownElementException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.UnknownEntityException;
${definition}"
      associated_elems
	class_ref 1180802 // UnknownElementException
      end
      comment "Copyright (c) 2005, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 843010 "VariableElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.util.Elements;
${definition}"
      associated_elems
	class_ref 1179650 // VariableElement
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
