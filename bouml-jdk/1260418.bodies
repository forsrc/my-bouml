class SerialArray
!!!10378242.java!!!	SerialArray(inout array : Array, inout map : Map)

        if ((array == null) || (map == null)) {
            throw new SQLException("Cannot instantiate a SerialArray " +
            "object with null parameters");
        }

        if ((elements = (Object[])array.getArray()) == null) {
             throw new SQLException("Invalid Array object. Calls to Array.getArray() " +
                 "return null value which cannot be serialized");
         }

        elements = (Object[])array.getArray(map);
        baseType = array.getBaseType();
        baseTypeName = array.getBaseTypeName();
        len = elements.length;

        switch (baseType) {
            case java.sql.Types.STRUCT:
                for (int i = 0; i < len; i++) {
                    elements[i] = new SerialStruct((Struct)elements[i], map);
                }
            break;

            case java.sql.Types.ARRAY:
                for (int i = 0; i < len; i++) {
                    elements[i] = new SerialArray((Array)elements[i], map);
                }
            break;

            case java.sql.Types.BLOB:
            for (int i = 0; i < len; i++) {
                elements[i] = new SerialBlob((Blob)elements[i]);
            }
            break;

            case java.sql.Types.CLOB:
                for (int i = 0; i < len; i++) {
                    elements[i] = new SerialClob((Clob)elements[i]);
                }
            break;

            case java.sql.Types.DATALINK:
                for (int i = 0; i < len; i++) {
                    elements[i] = new SerialDatalink((URL)elements[i]);
                }
            break;

            case java.sql.Types.JAVA_OBJECT:
                for (int i = 0; i < len; i++) {
                elements[i] = new SerialJavaObject(elements[i]);
            }
        }
!!!10378370.java!!!	free() : void
        if (elements != null) {
            elements = null;
            baseTypeName= null;
        }
!!!10378498.java!!!	SerialArray(inout array : Array)
         if (array == null) {
             throw new SQLException("Cannot instantiate a SerialArray " +
                 "object with a null Array object");
         }

         if ((elements = (Object[])array.getArray()) == null) {
             throw new SQLException("Invalid Array object. Calls to Array.getArray() " +
                 "return null value which cannot be serialized");
         }

         //elements = (Object[])array.getArray();
         baseType = array.getBaseType();
         baseTypeName = array.getBaseTypeName();
         len = elements.length;

        switch (baseType) {

        case java.sql.Types.BLOB:
            for (int i = 0; i < len; i++) {
                elements[i] = new SerialBlob((Blob)elements[i]);
            }
            break;

        case java.sql.Types.CLOB:
            for (int i = 0; i < len; i++) {
                elements[i] = new SerialClob((Clob)elements[i]);
            }
            break;

        case java.sql.Types.DATALINK:
            for (int i = 0; i < len; i++) {
                elements[i] = new SerialDatalink((URL)elements[i]);
            }
            break;

        case java.sql.Types.JAVA_OBJECT:
            for (int i = 0; i < len; i++) {
                elements[i] = new SerialJavaObject(elements[i]);
            }
            break;

        }


!!!10378626.java!!!	getArray() : Object
        isValid();
        Object dst = new Object[len];
        System.arraycopy((Object)elements, 0, dst, 0, len);
        return dst;
!!!10378754.java!!!	getArray(inout map : Map) : Object
        isValid();
        Object dst[] = new Object[len];
        System.arraycopy((Object)elements, 0, dst, 0, len);
        return dst;
!!!10378882.java!!!	getArray(in index : long, in count : int) : Object
        isValid();
        Object dst = new Object[count];
        System.arraycopy((Object)elements, (int)index, dst, 0, count);
        return dst;
!!!10379010.java!!!	getArray(in index : long, in count : int, inout map : Map) : Object
        isValid();
        Object dst = new Object[count];
        System.arraycopy((Object)elements, (int)index, dst, 0, count);
        return dst;
!!!10379138.java!!!	getBaseType() : int
        isValid();
        return baseType;
!!!10379266.java!!!	getBaseTypeName() : String
        isValid();
        return baseTypeName;
!!!10379394.java!!!	getResultSet(in index : long, in count : int) : ResultSet
        SerialException se = new SerialException();
        se.initCause(new UnsupportedOperationException());
        throw  se;
!!!10379522.java!!!	getResultSet(inout map : Map) : ResultSet
        SerialException se = new SerialException();
        se.initCause(new UnsupportedOperationException());
        throw  se;
!!!10379650.java!!!	getResultSet() : ResultSet
        SerialException se = new SerialException();
        se.initCause(new UnsupportedOperationException());
        throw  se;
!!!10379778.java!!!	getResultSet(in index : long, in count : int, inout map : Map) : ResultSet
        SerialException se = new SerialException();
        se.initCause(new UnsupportedOperationException());
        throw  se;
!!!10379906.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }

        if (obj instanceof SerialArray) {
            SerialArray sa = (SerialArray)obj;
            return baseType == sa.baseType &&
                    baseTypeName.equals(sa.baseTypeName) &&
                    Arrays.equals(elements, sa.elements);
        }
        return false;
!!!10380034.java!!!	hashCode() : int
        return (((31 + Arrays.hashCode(elements)) * 31 + len)  * 31 +
                baseType) * 31 + baseTypeName.hashCode();
!!!10380162.java!!!	clone() : Object
        try {
            SerialArray sa = (SerialArray) super.clone();
            sa.elements = (elements != null) ? Arrays.copyOf(elements, len) : null;
            return sa;
        } catch (CloneNotSupportedException ex) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError();
        }

!!!10380290.java!!!	readObject(inout s : ObjectInputStream) : void

       ObjectInputStream.GetField fields = s.readFields();
       Object[] tmp = (Object[])fields.get("elements", null);
       if (tmp == null)
           throw new InvalidObjectException("elements is null and should not be!");
       elements = tmp.clone();
       len = fields.get("len", 0);
       if(elements.length != len)
           throw new InvalidObjectException("elements is not the expected size");

       baseType = fields.get("baseType", 0);
       baseTypeName = (String)fields.get("baseTypeName", null);
!!!10380418.java!!!	writeObject(inout s : ObjectOutputStream) : void

        ObjectOutputStream.PutField fields = s.putFields();
        fields.put("elements", elements);
        fields.put("len", len);
        fields.put("baseType", baseType);
        fields.put("baseTypeName", baseTypeName);
        s.writeFields();
!!!10380546.java!!!	isValid() : void
        if (elements == null) {
            throw new SerialException("Error: You cannot call a method on a "
                    + "SerialArray instance once free() has been called.");
        }
