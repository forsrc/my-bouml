class BranchInstruction
!!!3435906.java!!!	BranchInstruction(in opcode : short, inout target : InstructionHandle)
    super(opcode, (short)3);
    setTarget(target);
!!!3436034.java!!!	dump(inout out : DataOutputStream) : void
    out.writeByte(opcode);

    index = getTargetOffset();

    if(Math.abs(index) >= 32767) // too large for short
      throw new ClassGenException("Branch target offset too large for short");

    out.writeShort(index); // May be negative, i.e., point backwards
!!!3436162.java!!!	getTargetOffset(inout target : InstructionHandle) : int
    if(target == null)
      throw new ClassGenException("Target of " + super.toString(true) +
                                  " is invalid null handle");

    int t = target.getPosition();

    if(t < 0)
      throw new ClassGenException("Invalid branch target position offset for " +
                                  super.toString(true) + ":" + t + ":" + target);

    return t - position;
!!!3436290.java!!!	getTargetOffset() : int
 return getTargetOffset(target);
!!!3436418.java!!!	updatePosition(in offset : int, in max_offset : int) : int
    position += offset;
    return 0;
!!!3436546.java!!!	toString(inout verbose : boolean) : String
    String s = super.toString(verbose);
    String t = "null";

    if(verbose) {
      if(target != null) {
        if(target.getInstruction() == this)
          t = "<points to itself>";
        else if(target.getInstruction() == null)
          t = "<null instruction!!!?>";
        else
          t = target.getInstruction().toString(false); // Avoid circles
      }
    } else {
      if(target != null) {
        index = getTargetOffset();
        t = "" + (index + position);
      }
    }

    return s + " -> " + t;
!!!3436674.java!!!	initFromFile(inout bytes : ByteSequence, inout wide : boolean) : void
    length = 3;
    index  = bytes.readShort();
!!!3436802.java!!!	getIndex() : int
 return index;
!!!3436930.java!!!	getTarget() : InstructionHandle
 return target;
!!!3437058.java!!!	setTarget(inout target : InstructionHandle) : void
    notifyTargetChanging(this.target, this);
    this.target = target;
    notifyTargetChanged(this.target, this);
!!!3437186.java!!!	notifyTargetChanging(inout old_ih : InstructionHandle, inout t : InstructionTargeter) : void
    if(old_ih != null) {
      old_ih.removeTargeter(t);
    }
!!!3437314.java!!!	notifyTargetChanged(inout new_ih : InstructionHandle, inout t : InstructionTargeter) : void
    if(new_ih != null) {
      new_ih.addTargeter(t);
    }
!!!3437442.java!!!	updateTarget(inout old_ih : InstructionHandle, inout new_ih : InstructionHandle) : void
    if(target == old_ih)
      setTarget(new_ih);
    else
      throw new ClassGenException("Not targeting " + old_ih + ", but " + target);
!!!3437570.java!!!	containsTarget(inout ih : InstructionHandle) : boolean
    return (target == ih);
!!!3437698.java!!!	dispose() : void
    setTarget(null);
    index=-1;
    position=-1;
