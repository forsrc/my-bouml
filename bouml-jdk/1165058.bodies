class OfLong
!!!9576706.java!!!	OfLong(in initialCapacity : int)
            super(initialCapacity);
!!!9576834.java!!!	forEach(inout consumer : Consumer) : void
            if (consumer instanceof LongConsumer) {
                forEach((LongConsumer) consumer);
            }
            else {
                if (Tripwire.ENABLED)
                    Tripwire.trip(getClass(), "{0} calling SpinedBuffer.OfLong.forEach(Consumer)");
                spliterator().forEachRemaining(consumer);
            }
!!!9576962.java!!!	newArrayArray(in size : int) : long
            return new long[size][];
!!!9577090.java!!!	newArray(in size : int) : long
            return new long[size];
!!!9577218.java!!!	arrayLength(inout array : long [[]]) : int
            return array.length;
!!!9577346.java!!!	arrayForEach(inout array : long [[]], in from : int, in to : int, inout consumer : LongConsumer) : void
            for (int i = from; i < to; i++)
                consumer.accept(array[i]);
!!!9577474.java!!!	accept(in i : long) : void
            preAccept();
            curChunk[elementIndex++] = i;
!!!9577602.java!!!	get(in index : long) : long
            // Casts to int are safe since the spine array index is the index minus
            // the prior element count from the current spine
            int ch = chunkFor(index);
            if (spineIndex == 0 && ch == 0)
                return curChunk[(int) index];
            else
                return spine[ch][(int) (index - priorElementCount[ch])];
!!!9577730.java!!!	iterator() : PrimitiveIterator::OfLong
            return Spliterators.iterator(spliterator());
!!!9577858.java!!!	spliterator() : Spliterator::OfLong
            class Splitr extends BaseSpliterator<Spliterator.OfLong>
                    implements Spliterator.OfLong {
                Splitr(int firstSpineIndex, int lastSpineIndex,
                       int firstSpineElementIndex, int lastSpineElementFence) {
                    super(firstSpineIndex, lastSpineIndex,
                          firstSpineElementIndex, lastSpineElementFence);
                }

                @Override
                Splitr newSpliterator(int firstSpineIndex, int lastSpineIndex,
                                      int firstSpineElementIndex, int lastSpineElementFence) {
                    return new Splitr(firstSpineIndex, lastSpineIndex,
                                      firstSpineElementIndex, lastSpineElementFence);
                }

                @Override
                void arrayForOne(long[] array, int index, LongConsumer consumer) {
                    consumer.accept(array[index]);
                }

                @Override
                Spliterator.OfLong arraySpliterator(long[] array, int offset, int len) {
                    return Arrays.spliterator(array, offset, offset+len);
                }
            }
            return new Splitr(0, spineIndex, 0, elementIndex);
!!!9577986.java!!!	toString() : String
            long[] array = asPrimitiveArray();
            if (array.length < 200) {
                return String.format("%s[length=%d, chunks=%d]%s",
                                     getClass().getSimpleName(), array.length,
                                     spineIndex, Arrays.toString(array));
            }
            else {
                long[] array2 = Arrays.copyOf(array, 200);
                return String.format("%s[length=%d, chunks=%d]%s...",
                                     getClass().getSimpleName(), array.length,
                                     spineIndex, Arrays.toString(array2));
            }
