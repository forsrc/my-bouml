class PriorityQueue
!!!8872066.java!!!	PriorityQueue()
        this(DEFAULT_INITIAL_CAPACITY, null);
!!!8872194.java!!!	PriorityQueue(in initialCapacity : int)
        this(initialCapacity, null);
!!!8872322.java!!!	PriorityQueue(inout comparator : Comparator)
        this(DEFAULT_INITIAL_CAPACITY, comparator);
!!!8872450.java!!!	PriorityQueue(in initialCapacity : int, inout comparator : Comparator)
        // Note: This restriction of at least one is not actually needed,
        // but continues for 1.5 compatibility
        if (initialCapacity < 1)
            throw new IllegalArgumentException();
        this.queue = new Object[initialCapacity];
        this.comparator = comparator;
!!!8872578.java!!!	PriorityQueue(inout c : Collection)
        if (c instanceof SortedSet<?>) {
            SortedSet<? extends E> ss = (SortedSet<? extends E>) c;
            this.comparator = (Comparator<? super E>) ss.comparator();
            initElementsFromCollection(ss);
        }
        else if (c instanceof PriorityQueue<?>) {
            PriorityQueue<? extends E> pq = (PriorityQueue<? extends E>) c;
            this.comparator = (Comparator<? super E>) pq.comparator();
            initFromPriorityQueue(pq);
        }
        else {
            this.comparator = null;
            initFromCollection(c);
        }
!!!8872706.java!!!	PriorityQueue(inout c : PriorityQueue)
        this.comparator = (Comparator<? super E>) c.comparator();
        initFromPriorityQueue(c);
!!!8872834.java!!!	PriorityQueue(inout c : SortedSet)
        this.comparator = (Comparator<? super E>) c.comparator();
        initElementsFromCollection(c);
!!!8872962.java!!!	initFromPriorityQueue(inout c : PriorityQueue) : void
        if (c.getClass() == PriorityQueue.class) {
            this.queue = c.toArray();
            this.size = c.size();
        } else {
            initFromCollection(c);
        }
!!!8873090.java!!!	initElementsFromCollection(inout c : Collection) : void
        Object[] a = c.toArray();
        // If c.toArray incorrectly doesn't return Object[], copy it.
        if (a.getClass() != Object[].class)
            a = Arrays.copyOf(a, a.length, Object[].class);
        int len = a.length;
        if (len == 1 || this.comparator != null)
            for (int i = 0; i < len; i++)
                if (a[i] == null)
                    throw new NullPointerException();
        this.queue = a;
        this.size = a.length;
!!!8873218.java!!!	initFromCollection(inout c : Collection) : void
        initElementsFromCollection(c);
        heapify();
!!!8873346.java!!!	grow(in minCapacity : int) : void
        int oldCapacity = queue.length;
        // Double size if small; else grow by 50%
        int newCapacity = oldCapacity + ((oldCapacity < 64) ?
                                         (oldCapacity + 2) :
                                         (oldCapacity >> 1));
        // overflow-conscious code
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        queue = Arrays.copyOf(queue, newCapacity);
!!!8873474.java!!!	hugeCapacity(in minCapacity : int) : int
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
!!!8873602.java!!!	add(inout e : E) : boolean
        return offer(e);
!!!8873730.java!!!	offer(inout e : E) : boolean
        if (e == null)
            throw new NullPointerException();
        modCount++;
        int i = size;
        if (i >= queue.length)
            grow(i + 1);
        size = i + 1;
        if (i == 0)
            queue[0] = e;
        else
            siftUp(i, e);
        return true;
!!!8873858.java!!!	peek() : E
        return (size == 0) ? null : (E) queue[0];
!!!8873986.java!!!	indexOf(inout o : Object) : int
        if (o != null) {
            for (int i = 0; i < size; i++)
                if (o.equals(queue[i]))
                    return i;
        }
        return -1;
!!!8874114.java!!!	remove(inout o : Object) : boolean
        int i = indexOf(o);
        if (i == -1)
            return false;
        else {
            removeAt(i);
            return true;
        }
!!!8874242.java!!!	removeEq(inout o : Object) : boolean
        for (int i = 0; i < size; i++) {
            if (o == queue[i]) {
                removeAt(i);
                return true;
            }
        }
        return false;
!!!8874370.java!!!	contains(inout o : Object) : boolean
        return indexOf(o) != -1;
!!!8874498.java!!!	toArray() : Object
        return Arrays.copyOf(queue, size);
!!!8874626.java!!!	toArray(inout a : T [[]]) : T
        final int size = this.size;
        if (a.length < size)
            // Make a new array of a's runtime type, but my contents:
            return (T[]) Arrays.copyOf(queue, size, a.getClass());
        System.arraycopy(queue, 0, a, 0, size);
        if (a.length > size)
            a[size] = null;
        return a;
!!!8874754.java!!!	iterator() : Iterator
        return new Itr();
!!!8875266.java!!!	size() : int
        return size;
!!!8875394.java!!!	clear() : void
        modCount++;
        for (int i = 0; i < size; i++)
            queue[i] = null;
        size = 0;
!!!8875522.java!!!	poll() : E
        if (size == 0)
            return null;
        int s = --size;
        modCount++;
        E result = (E) queue[0];
        E x = (E) queue[s];
        queue[s] = null;
        if (s != 0)
            siftDown(0, x);
        return result;
!!!8875650.java!!!	removeAt(in i : int) : E
        // assert i >= 0 && i < size;
        modCount++;
        int s = --size;
        if (s == i) // removed last element
            queue[i] = null;
        else {
            E moved = (E) queue[s];
            queue[s] = null;
            siftDown(i, moved);
            if (queue[i] == moved) {
                siftUp(i, moved);
                if (queue[i] != moved)
                    return moved;
            }
        }
        return null;
!!!8875778.java!!!	siftUp(in k : int, inout x : E) : void
        if (comparator != null)
            siftUpUsingComparator(k, x);
        else
            siftUpComparable(k, x);
!!!8875906.java!!!	siftUpComparable(in k : int, inout x : E) : void
        Comparable<? super E> key = (Comparable<? super E>) x;
        while (k > 0) {
            int parent = (k - 1) >>> 1;
            Object e = queue[parent];
            if (key.compareTo((E) e) >= 0)
                break;
            queue[k] = e;
            k = parent;
        }
        queue[k] = key;
!!!8876034.java!!!	siftUpUsingComparator(in k : int, inout x : E) : void
        while (k > 0) {
            int parent = (k - 1) >>> 1;
            Object e = queue[parent];
            if (comparator.compare(x, (E) e) >= 0)
                break;
            queue[k] = e;
            k = parent;
        }
        queue[k] = x;
!!!8876162.java!!!	siftDown(in k : int, inout x : E) : void
        if (comparator != null)
            siftDownUsingComparator(k, x);
        else
            siftDownComparable(k, x);
!!!8876290.java!!!	siftDownComparable(in k : int, inout x : E) : void
        Comparable<? super E> key = (Comparable<? super E>)x;
        int half = size >>> 1;        // loop while a non-leaf
        while (k < half) {
            int child = (k << 1) + 1; // assume left child is least
            Object c = queue[child];
            int right = child + 1;
            if (right < size &&
                ((Comparable<? super E>) c).compareTo((E) queue[right]) > 0)
                c = queue[child = right];
            if (key.compareTo((E) c) <= 0)
                break;
            queue[k] = c;
            k = child;
        }
        queue[k] = key;
!!!8876418.java!!!	siftDownUsingComparator(in k : int, inout x : E) : void
        int half = size >>> 1;
        while (k < half) {
            int child = (k << 1) + 1;
            Object c = queue[child];
            int right = child + 1;
            if (right < size &&
                comparator.compare((E) c, (E) queue[right]) > 0)
                c = queue[child = right];
            if (comparator.compare(x, (E) c) <= 0)
                break;
            queue[k] = c;
            k = child;
        }
        queue[k] = x;
!!!8876546.java!!!	heapify() : void
        for (int i = (size >>> 1) - 1; i >= 0; i--)
            siftDown(i, (E) queue[i]);
!!!8876674.java!!!	comparator() : Comparator
        return comparator;
!!!8876802.java!!!	writeObject(inout s : ObjectOutputStream) : void
        // Write out element count, and any hidden stuff
        s.defaultWriteObject();

        // Write out array length, for compatibility with 1.5 version
        s.writeInt(Math.max(2, size + 1));

        // Write out all elements in the "proper order".
        for (int i = 0; i < size; i++)
            s.writeObject(queue[i]);
!!!8876930.java!!!	readObject(inout s : ObjectInputStream) : void
        // Read in size, and any hidden stuff
        s.defaultReadObject();

        // Read in (and discard) array length
        s.readInt();

        queue = new Object[size];

        // Read in all elements.
        for (int i = 0; i < size; i++)
            queue[i] = s.readObject();

        // Elements are guaranteed to be in "proper order", but the
        // spec has never explained what that might be.
        heapify();
!!!8877058.java!!!	spliterator() : Spliterator
        return new PriorityQueueSpliterator<E>(this, 0, -1, 0);
