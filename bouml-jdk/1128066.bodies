class AtomicLongFieldUpdater
!!!9267202.java!!!	newUpdater(inout tclass : Class, inout fieldName : String) : AtomicLongFieldUpdater
        Class<?> caller = Reflection.getCallerClass();
        if (AtomicLong.VM_SUPPORTS_LONG_CAS)
            return new CASUpdater<U>(tclass, fieldName, caller);
        else
            return new LockedUpdater<U>(tclass, fieldName, caller);
!!!9268098.java!!!	getAndSet(inout obj : T, in newValue : long) : long
        long prev;
        do {
            prev = get(obj);
        } while (!compareAndSet(obj, prev, newValue));
        return prev;
!!!9268226.java!!!	getAndIncrement(inout obj : T) : long
        long prev, next;
        do {
            prev = get(obj);
            next = prev + 1;
        } while (!compareAndSet(obj, prev, next));
        return prev;
!!!9268354.java!!!	getAndDecrement(inout obj : T) : long
        long prev, next;
        do {
            prev = get(obj);
            next = prev - 1;
        } while (!compareAndSet(obj, prev, next));
        return prev;
!!!9268482.java!!!	getAndAdd(inout obj : T, in delta : long) : long
        long prev, next;
        do {
            prev = get(obj);
            next = prev + delta;
        } while (!compareAndSet(obj, prev, next));
        return prev;
!!!9268610.java!!!	incrementAndGet(inout obj : T) : long
        long prev, next;
        do {
            prev = get(obj);
            next = prev + 1;
        } while (!compareAndSet(obj, prev, next));
        return next;
!!!9268738.java!!!	decrementAndGet(inout obj : T) : long
        long prev, next;
        do {
            prev = get(obj);
            next = prev - 1;
        } while (!compareAndSet(obj, prev, next));
        return next;
!!!9268866.java!!!	addAndGet(inout obj : T, in delta : long) : long
        long prev, next;
        do {
            prev = get(obj);
            next = prev + delta;
        } while (!compareAndSet(obj, prev, next));
        return next;
!!!9268994.java!!!	getAndUpdate(inout obj : T, inout updateFunction : LongUnaryOperator) : long
        long prev, next;
        do {
            prev = get(obj);
            next = updateFunction.applyAsLong(prev);
        } while (!compareAndSet(obj, prev, next));
        return prev;
!!!9269122.java!!!	updateAndGet(inout obj : T, inout updateFunction : LongUnaryOperator) : long
        long prev, next;
        do {
            prev = get(obj);
            next = updateFunction.applyAsLong(prev);
        } while (!compareAndSet(obj, prev, next));
        return next;
!!!9269250.java!!!	getAndAccumulate(inout obj : T, in x : long, inout accumulatorFunction : LongBinaryOperator) : long
        long prev, next;
        do {
            prev = get(obj);
            next = accumulatorFunction.applyAsLong(prev, x);
        } while (!compareAndSet(obj, prev, next));
        return prev;
!!!9269378.java!!!	accumulateAndGet(inout obj : T, in x : long, inout accumulatorFunction : LongBinaryOperator) : long
        long prev, next;
        do {
            prev = get(obj);
            next = accumulatorFunction.applyAsLong(prev, x);
        } while (!compareAndSet(obj, prev, next));
        return next;
!!!9272450.java!!!	isAncestor(inout first : ClassLoader, inout second : ClassLoader) : boolean
        ClassLoader acl = first;
        do {
            acl = acl.getParent();
            if (second == acl) {
                return true;
            }
        } while (acl != null);
        return false;
!!!9272578.java!!!	isSamePackage(inout class1 : Class, inout class2 : Class) : boolean
        return class1.getClassLoader() == class2.getClassLoader()
               && Objects.equals(getPackageName(class1), getPackageName(class2));
!!!9272706.java!!!	getPackageName(inout cls : Class) : String
        String cn = cls.getName();
        int dot = cn.lastIndexOf('.');
        return (dot != -1) ? cn.substring(0, dot) : "";
