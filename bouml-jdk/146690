format 222
"image" // jdk1.8::java::awt::image
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/image/"
  java_package "java.awt.image"
  classview 143362 "image"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 311554 "BufferedImage"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
The <code>BufferedImage</code> subclass describes an {@link
java.awt.Image Image} with an accessible buffer of image data.
A <code>BufferedImage</code> is comprised of a {@link ColorModel} and a
{@link Raster} of image data.
The number and types of bands in the {@link SampleModel} of the
<code>Raster</code> must match the number and types required by the
<code>ColorModel</code> to represent its color and alpha components.
All <code>BufferedImage</code> objects have an upper left corner
coordinate of (0,&nbsp;0).  Any <code>Raster</code> used to construct a
<code>BufferedImage</code> must therefore have minX=0 and minY=0.

<p>
This class relies on the data fetching and setting methods
of <code>Raster</code>,
and on the color characterization methods of <code>ColorModel</code>.

@see ColorModel
@see Raster
@see WritableRaster
"
      classrelation 3067650 // <generalisation>
	relation 3067650 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3067650 // <generalisation>
	  b parent class_ref 340098 // Image
      end

      classrelation 3067906 // <realization>
	relation 3067906 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3067906 // <realization>
	  b parent class_ref 897154 // WritableRenderedImage
      end

      classrelation 3068034 // <realization>
	relation 3068034 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3068034 // <realization>
	  b parent class_ref 860546 // Transparency
      end

      attribute 1598722 "imageType"
	private explicit_type "int"
	init_value " TYPE_CUSTOM"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3068162 // colorModel (<unidirectional association>)
	relation 3068162 --->
	  a role_name "colorModel" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3068162 // colorModel (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      classrelation 3068290 // raster (<unidirectional association>)
	relation 3068290 --->
	  a role_name "raster" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3068290 // raster (<unidirectional association>)
	  b parent class_ref 322690 // WritableRaster
      end

      attribute 1598850 "osis"
	private explicit_type "OffScreenImageSource"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3068418 // properties (<unidirectional association>)
	relation 3068418 --->
	  a role_name "properties" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 3068418 // properties (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      attribute 1598978 "TYPE_CUSTOM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Image Type Constants


Image type is not recognized so it must be a customized
image.  This type is only used as a return value for the getType()
method.

"
      end

      attribute 1599106 "TYPE_INT_RGB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 8-bit RGB color components packed into
integer pixels.  The image has a {@link DirectColorModel} without
alpha.
When data with non-opaque alpha is stored
in an image of this type,
the color data must be adjusted to a non-premultiplied form
and the alpha discarded,
as described in the
{@link java.awt.AlphaComposite} documentation.

"
      end

      attribute 1599234 "TYPE_INT_ARGB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 8-bit RGBA color components packed into
integer pixels.  The image has a <code>DirectColorModel</code>
with alpha. The color data in this image is considered not to be
premultiplied with alpha.  When this type is used as the
<code>imageType</code> argument to a <code>BufferedImage</code>
constructor, the created image is consistent with images
created in the JDK1.1 and earlier releases.

"
      end

      attribute 1599362 "TYPE_INT_ARGB_PRE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 8-bit RGBA color components packed into
integer pixels.  The image has a <code>DirectColorModel</code>
with alpha.  The color data in this image is considered to be
premultiplied with alpha.

"
      end

      attribute 1599490 "TYPE_INT_BGR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 8-bit RGB color components, corresponding
to a Windows- or Solaris- style BGR color model, with the colors
Blue, Green, and Red packed into integer pixels.  There is no alpha.
The image has a {@link DirectColorModel}.
When data with non-opaque alpha is stored
in an image of this type,
the color data must be adjusted to a non-premultiplied form
and the alpha discarded,
as described in the
{@link java.awt.AlphaComposite} documentation.

"
      end

      attribute 1599618 "TYPE_3BYTE_BGR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 8-bit RGB color components, corresponding
to a Windows-style BGR color model) with the colors Blue, Green,
and Red stored in 3 bytes.  There is no alpha.  The image has a
<code>ComponentColorModel</code>.
When data with non-opaque alpha is stored
in an image of this type,
the color data must be adjusted to a non-premultiplied form
and the alpha discarded,
as described in the
{@link java.awt.AlphaComposite} documentation.

"
      end

      attribute 1599746 "TYPE_4BYTE_ABGR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 8-bit RGBA color components with the colors
Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The
image has a <code>ComponentColorModel</code> with alpha.  The
color data in this image is considered not to be premultiplied with
alpha.  The byte data is interleaved in a single
byte array in the order A, B, G, R
from lower to higher byte addresses within each pixel.

"
      end

      attribute 1599874 "TYPE_4BYTE_ABGR_PRE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 8-bit RGBA color components with the colors
Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The
image has a <code>ComponentColorModel</code> with alpha. The color
data in this image is considered to be premultiplied with alpha.
The byte data is interleaved in a single byte array in the order
A, B, G, R from lower to higher byte addresses within each pixel.

"
      end

      attribute 1600002 "TYPE_USHORT_565_RGB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 5-6-5 RGB color components (5-bits red,
6-bits green, 5-bits blue) with no alpha.  This image has
a <code>DirectColorModel</code>.
When data with non-opaque alpha is stored
in an image of this type,
the color data must be adjusted to a non-premultiplied form
and the alpha discarded,
as described in the
{@link java.awt.AlphaComposite} documentation.

"
      end

      attribute 1600130 "TYPE_USHORT_555_RGB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an image with 5-5-5 RGB color components (5-bits red,
5-bits green, 5-bits blue) with no alpha.  This image has
a <code>DirectColorModel</code>.
When data with non-opaque alpha is stored
in an image of this type,
the color data must be adjusted to a non-premultiplied form
and the alpha discarded,
as described in the
{@link java.awt.AlphaComposite} documentation.

"
      end

      attribute 1600258 "TYPE_BYTE_GRAY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents a unsigned byte grayscale image, non-indexed.  This
image has a <code>ComponentColorModel</code> with a CS_GRAY
{@link ColorSpace}.
When data with non-opaque alpha is stored
in an image of this type,
the color data must be adjusted to a non-premultiplied form
and the alpha discarded,
as described in the
{@link java.awt.AlphaComposite} documentation.

"
      end

      attribute 1600386 "TYPE_USHORT_GRAY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an unsigned short grayscale image, non-indexed).  This
image has a <code>ComponentColorModel</code> with a CS_GRAY
<code>ColorSpace</code>.
When data with non-opaque alpha is stored
in an image of this type,
the color data must be adjusted to a non-premultiplied form
and the alpha discarded,
as described in the
{@link java.awt.AlphaComposite} documentation.

"
      end

      attribute 1600514 "TYPE_BYTE_BINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an opaque byte-packed 1, 2, or 4 bit image.  The
image has an {@link IndexColorModel} without alpha.  When this
type is used as the <code>imageType</code> argument to the
<code>BufferedImage</code> constructor that takes an
<code>imageType</code> argument but no <code>ColorModel</code>
argument, a 1-bit image is created with an
<code>IndexColorModel</code> with two colors in the default
sRGB <code>ColorSpace</code>: {0,&nbsp;0,&nbsp;0} and
{255,&nbsp;255,&nbsp;255}.

<p> Images with 2 or 4 bits per pixel may be constructed via
the <code>BufferedImage</code> constructor that takes a
<code>ColorModel</code> argument by supplying a
<code>ColorModel</code> with an appropriate map size.

<p> Images with 8 bits per pixel should use the image types
<code>TYPE_BYTE_INDEXED</code> or <code>TYPE_BYTE_GRAY</code>
depending on their <code>ColorModel</code>.

<p> When color data is stored in an image of this type,
the closest color in the colormap is determined
by the <code>IndexColorModel</code> and the resulting index is stored.
Approximation and loss of alpha or color components
can result, depending on the colors in the
<code>IndexColorModel</code> colormap.

"
      end

      attribute 1600642 "TYPE_BYTE_INDEXED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents an indexed byte image.  When this type is used as the
<code>imageType</code> argument to the <code>BufferedImage</code>
constructor that takes an <code>imageType</code> argument
but no <code>ColorModel</code> argument, an
<code>IndexColorModel</code> is created with
a 256-color 6/6/6 color cube palette with the rest of the colors
from 216-255 populated by grayscale values in the
default sRGB ColorSpace.

<p> When color data is stored in an image of this type,
the closest color in the colormap is determined
by the <code>IndexColorModel</code> and the resulting index is stored.
Approximation and loss of alpha or color components
can result, depending on the colors in the
<code>IndexColorModel</code> colormap.

"
      end

      attribute 1600770 "DCM_RED_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00ff0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1600898 "DCM_GREEN_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x0000ff00"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601026 "DCM_BLUE_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x000000ff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601154 "DCM_ALPHA_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xff000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601282 "DCM_565_RED_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xf800"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601410 "DCM_565_GRN_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x07E0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601538 "DCM_565_BLU_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x001F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601666 "DCM_555_RED_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x7C00"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601794 "DCM_555_GRN_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x03E0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1601922 "DCM_555_BLU_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x001F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1602050 "DCM_BGR_RED_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x0000ff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1602178 "DCM_BGR_GRN_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00ff00"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1602306 "DCM_BGR_BLU_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xff0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6621186 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 153730 "initialization"
	
	cpp "" ""
	java "  static {
        ColorModel.loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6621314 "BufferedImage"
	public explicit_return_type ""
	nparams 3
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "imageType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BufferedImage</code> of one of the predefined
image types.  The <code>ColorSpace</code> for the image is the
default sRGB space.
@param width     width of the created image
@param height    height of the created image
@param imageType type of the created image
@see ColorSpace
@see #TYPE_INT_RGB
@see #TYPE_INT_ARGB
@see #TYPE_INT_ARGB_PRE
@see #TYPE_INT_BGR
@see #TYPE_3BYTE_BGR
@see #TYPE_4BYTE_ABGR
@see #TYPE_4BYTE_ABGR_PRE
@see #TYPE_BYTE_GRAY
@see #TYPE_USHORT_GRAY
@see #TYPE_BYTE_BINARY
@see #TYPE_BYTE_INDEXED
@see #TYPE_USHORT_565_RGB
@see #TYPE_USHORT_555_RGB
"
      end

      operation 6621442 "BufferedImage"
	public explicit_return_type ""
	nparams 4
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "imageType" explicit_type "int"
	  param inout name "cm" type class_ref 317058 // IndexColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BufferedImage</code> of one of the predefined
image types:
TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED.

<p> If the image type is TYPE_BYTE_BINARY, the number of
entries in the color model is used to determine whether the
image should have 1, 2, or 4 bits per pixel.  If the color model
has 1 or 2 entries, the image will have 1 bit per pixel.  If it
has 3 or 4 entries, the image with have 2 bits per pixel.  If
it has between 5 and 16 entries, the image will have 4 bits per
pixel.  Otherwise, an IllegalArgumentException will be thrown.

@param width     width of the created image
@param height    height of the created image
@param imageType type of the created image
@param cm        <code>IndexColorModel</code> of the created image
@throws IllegalArgumentException   if the imageType is not
TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED or if the imageType is
TYPE_BYTE_BINARY and the color map has more than 16 entries.
@see #TYPE_BYTE_BINARY
@see #TYPE_BYTE_INDEXED
"
      end

      operation 6621570 "BufferedImage"
	public explicit_return_type ""
	nparams 4
	  param inout name "cm" type class_ref 312066 // ColorModel
	  param inout name "raster" type class_ref 322690 // WritableRaster
	  param inout name "isRasterPremultiplied" explicit_type "boolean"
	  param inout name "properties" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?,?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>BufferedImage</code> with a specified
<code>ColorModel</code> and <code>Raster</code>.  If the number and
types of bands in the <code>SampleModel</code> of the
<code>Raster</code> do not match the number and types required by
the <code>ColorModel</code> to represent its color and alpha
components, a {@link RasterFormatException} is thrown.  This
method can multiply or divide the color <code>Raster</code> data by
alpha to match the <code>alphaPremultiplied</code> state
in the <code>ColorModel</code>.  Properties for this
<code>BufferedImage</code> can be established by passing
in a {@link Hashtable} of <code>String</code>/<code>Object</code>
pairs.
@param cm <code>ColorModel</code> for the new image
@param raster     <code>Raster</code> for the image data
@param isRasterPremultiplied   if <code>true</code>, the data in
                 the raster has been premultiplied with alpha.
@param properties <code>Hashtable</code> of
                 <code>String</code>/<code>Object</code> pairs.
@exception RasterFormatException if the number and
types of bands in the <code>SampleModel</code> of the
<code>Raster</code> do not match the number and types required by
the <code>ColorModel</code> to represent its color and alpha
components.
@exception IllegalArgumentException if
         <code>raster</code> is incompatible with <code>cm</code>
@see ColorModel
@see Raster
@see WritableRaster



 FOR NOW THE CODE WHICH DEFINES THE RASTER TYPE IS DUPLICATED BY DVF
 SEE THE METHOD DEFINERASTERTYPE @ RASTEROUTPUTMANAGER

"
      end

      operation 6621698 "isStandard"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "cm" type class_ref 312066 // ColorModel
	  param inout name "wr" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6621826 "getType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the image type.  If it is not one of the known types,
TYPE_CUSTOM is returned.
@return the image type of this <code>BufferedImage</code>.
@see #TYPE_INT_RGB
@see #TYPE_INT_ARGB
@see #TYPE_INT_ARGB_PRE
@see #TYPE_INT_BGR
@see #TYPE_3BYTE_BGR
@see #TYPE_4BYTE_ABGR
@see #TYPE_4BYTE_ABGR_PRE
@see #TYPE_BYTE_GRAY
@see #TYPE_BYTE_BINARY
@see #TYPE_BYTE_INDEXED
@see #TYPE_USHORT_GRAY
@see #TYPE_USHORT_565_RGB
@see #TYPE_USHORT_555_RGB
@see #TYPE_CUSTOM
"
      end

      operation 6621954 "getColorModel"
	public return_type class_ref 312066 // ColorModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ColorModel</code>.
@return the <code>ColorModel</code> of this
 <code>BufferedImage</code>.
"
      end

      operation 6622082 "getRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link WritableRaster}.
@return the <code>WriteableRaster</code> of this
 <code>BufferedImage</code>.
"
      end

      operation 6622210 "getAlphaRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>WritableRaster</code> representing the alpha
channel for <code>BufferedImage</code> objects
with <code>ColorModel</code> objects that support a separate
spatial alpha channel, such as <code>ComponentColorModel</code> and
<code>DirectColorModel</code>.  Returns <code>null</code> if there
is no alpha channel associated with the <code>ColorModel</code> in
this image.  This method assumes that for all
<code>ColorModel</code> objects other than
<code>IndexColorModel</code>, if the <code>ColorModel</code>
supports alpha, there is a separate alpha channel
which is stored as the last band of image data.
If the image uses an <code>IndexColorModel</code> that
has alpha in the lookup table, this method returns
<code>null</code> since there is no spatially discrete alpha
channel.  This method creates a new
<code>WritableRaster</code>, but shares the data array.
@return a <code>WritableRaster</code> or <code>null</code> if this
         <code>BufferedImage</code> has no alpha channel associated
         with its <code>ColorModel</code>.
"
      end

      operation 6622338 "getRGB"
	public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an integer pixel in the default RGB color model
(TYPE_INT_ARGB) and default sRGB colorspace.  Color
conversion takes place if this default model does not match
the image <code>ColorModel</code>.  There are only 8-bits of
precision for each color component in the returned data when using
this method.

<p>

An <code>ArrayOutOfBoundsException</code> may be thrown
if the coordinates are not in bounds.
However, explicit bounds checking is not guaranteed.

@param x the X coordinate of the pixel from which to get
         the pixel in the default RGB color model and sRGB
         color space
@param y the Y coordinate of the pixel from which to get
         the pixel in the default RGB color model and sRGB
         color space
@return an integer pixel in the default RGB color model and
         default sRGB colorspace.
@see #setRGB(int, int, int)
@see #setRGB(int, int, int, int, int[], int, int)
"
      end

      operation 6622466 "getRGB"
	public explicit_return_type "int"
	nparams 7
	  param in name "startX" explicit_type "int"
	  param in name "startY" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "rgbArray" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of integer pixels in the default RGB color model
(TYPE_INT_ARGB) and default sRGB color space,
from a portion of the image data.  Color conversion takes
place if the default model does not match the image
<code>ColorModel</code>.  There are only 8-bits of precision for
each color component in the returned data when
using this method.  With a specified coordinate (x,&nbsp;y) in the
image, the ARGB pixel can be accessed in this way:

<pre>
   pixel   = rgbArray[offset + (y-startY)*scansize + (x-startX)]; </pre>

<p>

An <code>ArrayOutOfBoundsException</code> may be thrown
if the region is not in bounds.
However, explicit bounds checking is not guaranteed.

@param startX      the starting X coordinate
@param startY      the starting Y coordinate
@param w           width of region
@param h           height of region
@param rgbArray    if not <code>null</code>, the rgb pixels are
         written here
@param offset      offset into the <code>rgbArray</code>
@param scansize    scanline stride for the <code>rgbArray</code>
@return            array of RGB pixels.
@see #setRGB(int, int, int)
@see #setRGB(int, int, int, int, int[], int, int)
"
      end

      operation 6622594 "setRGB"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "rgb" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in this <code>BufferedImage</code> to the specified
RGB value. The pixel is assumed to be in the default RGB color
model, TYPE_INT_ARGB, and default sRGB color space.  For images
with an <code>IndexColorModel</code>, the index with the nearest
color is chosen.

<p>

An <code>ArrayOutOfBoundsException</code> may be thrown
if the coordinates are not in bounds.
However, explicit bounds checking is not guaranteed.

@param x the X coordinate of the pixel to set
@param y the Y coordinate of the pixel to set
@param rgb the RGB value
@see #getRGB(int, int)
@see #getRGB(int, int, int, int, int[], int, int)
"
      end

      operation 6622722 "setRGB"
	public explicit_return_type "void"
	nparams 7
	  param in name "startX" explicit_type "int"
	  param in name "startY" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "rgbArray" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets an array of integer pixels in the default RGB color model
(TYPE_INT_ARGB) and default sRGB color space,
into a portion of the image data.  Color conversion takes place
if the default model does not match the image
<code>ColorModel</code>.  There are only 8-bits of precision for
each color component in the returned data when
using this method.  With a specified coordinate (x,&nbsp;y) in the
this image, the ARGB pixel can be accessed in this way:
<pre>
   pixel   = rgbArray[offset + (y-startY)*scansize + (x-startX)];
</pre>
WARNING: No dithering takes place.

<p>

An <code>ArrayOutOfBoundsException</code> may be thrown
if the region is not in bounds.
However, explicit bounds checking is not guaranteed.

@param startX      the starting X coordinate
@param startY      the starting Y coordinate
@param w           width of the region
@param h           height of the region
@param rgbArray    the rgb pixels
@param offset      offset into the <code>rgbArray</code>
@param scansize    scanline stride for the <code>rgbArray</code>
@see #getRGB(int, int)
@see #getRGB(int, int, int, int, int[], int, int)
"
      end

      operation 6622850 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of the <code>BufferedImage</code>.
@return the width of this <code>BufferedImage</code>
"
      end

      operation 6622978 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of the <code>BufferedImage</code>.
@return the height of this <code>BufferedImage</code>
"
      end

      operation 6623106 "getWidth"
	public explicit_return_type "int"
	nparams 1
	  param inout name "observer" type class_ref 339970 // ImageObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of the <code>BufferedImage</code>.
@param observer ignored
@return the width of this <code>BufferedImage</code>
"
      end

      operation 6623234 "getHeight"
	public explicit_return_type "int"
	nparams 1
	  param inout name "observer" type class_ref 339970 // ImageObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of the <code>BufferedImage</code>.
@param observer ignored
@return the height of this <code>BufferedImage</code>
"
      end

      operation 6623362 "getSource"
	public return_type class_ref 344066 // ImageProducer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object that produces the pixels for the image.
@return the {@link ImageProducer} that is used to produce the
pixels for this image.
@see ImageProducer
"
      end

      operation 6623490 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "observer" type class_ref 339970 // ImageObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a property of the image by name.  Individual property names
are defined by the various image formats.  If a property is not
defined for a particular image, this method returns the
<code>UndefinedProperty</code> field.  If the properties
for this image are not yet known, then this method returns
<code>null</code> and the <code>ImageObserver</code> object is
notified later.  The property name \"comment\" should be used to
store an optional comment that can be presented to the user as a
description of the image, its source, or its author.
@param name the property name
@param observer the <code>ImageObserver</code> that receives
 notification regarding image information
@return an {@link Object} that is the property referred to by the
         specified <code>name</code> or <code>null</code> if the
         properties of this image are not yet known.
@throws NullPointerException if the property name is null.
@see ImageObserver
@see java.awt.Image#UndefinedProperty
"
      end

      operation 6623618 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a property of the image by name.
@param name the property name
@return an <code>Object</code> that is the property referred to by
         the specified <code>name</code>.
@throws NullPointerException if the property name is null.
"
      end

      operation 6623746 "getGraphics"
	public return_type class_ref 343682 // Graphics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns a {@link Graphics2D}, but is here
for backwards compatibility.  {@link #createGraphics() createGraphics} is more
convenient, since it is declared to return a
<code>Graphics2D</code>.
@return a <code>Graphics2D</code>, which can be used to draw into
         this image.
"
      end

      operation 6623874 "createGraphics"
	public return_type class_ref 338178 // Graphics2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Graphics2D</code>, which can be used to draw into
this <code>BufferedImage</code>.
@return a <code>Graphics2D</code>, used for drawing into this
         image.
"
      end

      operation 6624002 "getSubimage"
	public return_type class_ref 311554 // BufferedImage
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a subimage defined by a specified rectangular region.
The returned <code>BufferedImage</code> shares the same
data array as the original image.
@param x the X coordinate of the upper-left corner of the
         specified rectangular region
@param y the Y coordinate of the upper-left corner of the
         specified rectangular region
@param w the width of the specified rectangular region
@param h the height of the specified rectangular region
@return a <code>BufferedImage</code> that is the subimage of this
         <code>BufferedImage</code>.
@exception RasterFormatException if the specified
area is not contained within this <code>BufferedImage</code>.
"
      end

      operation 6624130 "isAlphaPremultiplied"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the alpha has been premultiplied.  It
returns <code>false</code> if there is no alpha.
@return <code>true</code> if the alpha has been premultiplied;
         <code>false</code> otherwise.
"
      end

      operation 6624258 "coerceData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces the data to match the state specified in the
<code>isAlphaPremultiplied</code> variable.  It may multiply or
divide the color raster data by alpha, or do nothing if the data is
in the correct state.
@param isAlphaPremultiplied <code>true</code> if the alpha has been
         premultiplied; <code>false</code> otherwise.
"
      end

      operation 6624386 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> representation of this
<code>BufferedImage</code> object and its values.
@return a <code>String</code> representing this
         <code>BufferedImage</code>.
"
      end

      operation 6624514 "getSources"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RenderedImage> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Vector} of {@link RenderedImage} objects that are
the immediate sources, not the sources of these immediate sources,
of image data for this <code>BufferedImage</code>.  This
method returns <code>null</code> if the <code>BufferedImage</code>
has no information about its immediate sources.  It returns an
empty <code>Vector</code> if the <code>BufferedImage</code> has no
immediate sources.
@return a <code>Vector</code> containing immediate sources of
         this <code>BufferedImage</code> object's image date, or
         <code>null</code> if this <code>BufferedImage</code> has
         no information about its immediate sources, or an empty
         <code>Vector</code> if this <code>BufferedImage</code>
         has no immediate sources.
"
      end

      operation 6624642 "getPropertyNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of names recognized by
{@link #getProperty(String) getProperty(String)}
or <code>null</code>, if no property names are recognized.
@return a <code>String</code> array containing all of the property
         names that <code>getProperty(String)</code> recognizes;
         or <code>null</code> if no property names are recognized.
"
      end

      operation 6624770 "getMinX"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum x coordinate of this
<code>BufferedImage</code>.  This is always zero.
@return the minimum x coordinate of this
         <code>BufferedImage</code>.
"
      end

      operation 6624898 "getMinY"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum y coordinate of this
<code>BufferedImage</code>.  This is always zero.
@return the minimum y coordinate of this
         <code>BufferedImage</code>.
"
      end

      operation 6625026 "getSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>SampleModel</code> associated with this
<code>BufferedImage</code>.
@return the <code>SampleModel</code> of this
         <code>BufferedImage</code>.
"
      end

      operation 6625154 "getNumXTiles"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of tiles in the x direction.
This is always one.
@return the number of tiles in the x direction.
"
      end

      operation 6625282 "getNumYTiles"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of tiles in the y direction.
This is always one.
@return the number of tiles in the y direction.
"
      end

      operation 6625410 "getMinTileX"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum tile index in the x direction.
This is always zero.
@return the minimum tile index in the x direction.
"
      end

      operation 6625538 "getMinTileY"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum tile index in the y direction.
This is always zero.
@return the minimum tile index in the y direction.
"
      end

      operation 6625666 "getTileWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the tile width in pixels.
@return the tile width in pixels.
"
      end

      operation 6625794 "getTileHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the tile height in pixels.
@return the tile height in pixels.
"
      end

      operation 6625922 "getTileGridXOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the x offset of the tile grid relative to the origin,
For example, the x coordinate of the location of tile
(0,&nbsp;0).  This is always zero.
@return the x offset of the tile grid.
"
      end

      operation 6626050 "getTileGridYOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the y offset of the tile grid relative to the origin,
For example, the y coordinate of the location of tile
(0,&nbsp;0).  This is always zero.
@return the y offset of the tile grid.
"
      end

      operation 6626178 "getTile"
	public return_type class_ref 311682 // Raster
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns tile (<code>tileX</code>,&nbsp;<code>tileY</code>).  Note
that <code>tileX</code> and <code>tileY</code> are indices
into the tile array, not pixel locations.  The <code>Raster</code>
that is returned is live, which means that it is updated if the
image is changed.
@param tileX the x index of the requested tile in the tile array
@param tileY the y index of the requested tile in the tile array
@return a <code>Raster</code> that is the tile defined by the
         arguments <code>tileX</code> and <code>tileY</code>.
@exception ArrayIndexOutOfBoundsException if both
         <code>tileX</code> and <code>tileY</code> are not
         equal to 0
"
      end

      operation 6626306 "getData"
	public return_type class_ref 311682 // Raster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the image as one large tile.  The <code>Raster</code>
returned is a copy of the image data is not updated if the
image is changed.
@return a <code>Raster</code> that is a copy of the image data.
@see #setData(Raster)
"
      end

      operation 6626434 "getData"
	public return_type class_ref 311682 // Raster
	nparams 1
	  param inout name "rect" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes and returns an arbitrary region of the
<code>BufferedImage</code>.  The <code>Raster</code> returned is a
copy of the image data and is not updated if the image is
changed.
@param rect the region of the <code>BufferedImage</code> to be
returned.
@return a <code>Raster</code> that is a copy of the image data of
         the specified region of the <code>BufferedImage</code>
@see #setData(Raster)
"
      end

      operation 6626562 "copyData"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "outRaster" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes an arbitrary rectangular region of the
<code>BufferedImage</code> and copies it into a specified
<code>WritableRaster</code>.  The region to be computed is
determined from the bounds of the specified
<code>WritableRaster</code>.  The specified
<code>WritableRaster</code> must have a
<code>SampleModel</code> that is compatible with this image.  If
<code>outRaster</code> is <code>null</code>,
an appropriate <code>WritableRaster</code> is created.
@param outRaster a <code>WritableRaster</code> to hold the returned
         part of the image, or <code>null</code>
@return a reference to the supplied or created
         <code>WritableRaster</code>.
"
      end

      operation 6626690 "setData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a rectangular region of the image to the contents of the
specified <code>Raster</code> <code>r</code>, which is
assumed to be in the same coordinate space as the
<code>BufferedImage</code>. The operation is clipped to the bounds
of the <code>BufferedImage</code>.
@param r the specified <code>Raster</code>
@see #getData
@see #getData(Rectangle)
"
      end

      operation 6626818 "addTileObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "to" type class_ref 897282 // TileObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a tile observer.  If the observer is already present,
it receives multiple notifications.
@param to the specified {@link TileObserver}
"
      end

      operation 6626946 "removeTileObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "to" type class_ref 897282 // TileObserver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a tile observer.  If the observer was not registered,
nothing happens.  If the observer was registered for multiple
notifications, it is now registered for one fewer notification.
@param to the specified <code>TileObserver</code>.
"
      end

      operation 6627074 "isTileWritable"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not a tile is currently checked out for writing.
@param tileX the x index of the tile.
@param tileY the y index of the tile.
@return <code>true</code> if the tile specified by the specified
         indices is checked out for writing; <code>false</code>
         otherwise.
@exception ArrayIndexOutOfBoundsException if both
         <code>tileX</code> and <code>tileY</code> are not equal
         to 0
"
      end

      operation 6627202 "getWritableTileIndices"
	public return_type class_ref 323714 // Point
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@link Point} objects indicating which tiles
are checked out for writing.  Returns <code>null</code> if none are
checked out.
@return a <code>Point</code> array that indicates the tiles that
         are checked out for writing, or <code>null</code> if no
         tiles are checked out for writing.
"
      end

      operation 6627330 "hasTileWriters"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not any tile is checked out for writing.
Semantically equivalent to
<pre>
(getWritableTileIndices() != null).
</pre>
@return <code>true</code> if any tile is checked out for writing;
         <code>false</code> otherwise.
"
      end

      operation 6627458 "getWritableTile"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks out a tile for writing.  All registered
<code>TileObservers</code> are notified when a tile goes from having
no writers to having one writer.
@param tileX the x index of the tile
@param tileY the y index of the tile
@return a <code>WritableRaster</code> that is the tile, indicated by
           the specified indices, to be checked out for writing.
"
      end

      operation 6627586 "releaseWritableTile"
	public explicit_return_type "void"
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Relinquishes permission to write to a tile.  If the caller
continues to write to the tile, the results are undefined.
Calls to this method should only appear in matching pairs
with calls to {@link #getWritableTile(int, int) getWritableTile(int, int)}.  Any other leads
to undefined results.  All registered <code>TileObservers</code>
are notified when a tile goes from having one writer to having no
writers.
@param tileX the x index of the tile
@param tileY the y index of the tile
"
      end

      operation 6627714 "getTransparency"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transparency.  Returns either OPAQUE, BITMASK,
or TRANSLUCENT.
@return the transparency of this <code>BufferedImage</code>.
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT
@since 1.5
"
      end
    end

    class 311682 "Raster"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class representing a rectangular array of pixels.  A Raster
encapsulates a DataBuffer that stores the sample values and a
SampleModel that describes how to locate a given sample value in a
DataBuffer.
<p>
A Raster defines values for pixels occupying a particular
rectangular area of the plane, not necessarily including (0, 0).
The rectangle, known as the Raster's bounding rectangle and
available by means of the getBounds method, is defined by minX,
minY, width, and height values.  The minX and minY values define
the coordinate of the upper left corner of the Raster.  References
to pixels outside of the bounding rectangle may result in an
exception being thrown, or may result in references to unintended
elements of the Raster's associated DataBuffer.  It is the user's
responsibility to avoid accessing such pixels.
<p>
A SampleModel describes how samples of a Raster
are stored in the primitive array elements of a DataBuffer.
Samples may be stored one per data element, as in a
PixelInterleavedSampleModel or BandedSampleModel, or packed several to
an element, as in a SinglePixelPackedSampleModel or
MultiPixelPackedSampleModel.  The SampleModel is also
controls whether samples are sign extended, allowing unsigned
data to be stored in signed Java data types such as byte, short, and
int.
<p>
Although a Raster may live anywhere in the plane, a SampleModel
makes use of a simple coordinate system that starts at (0, 0).  A
Raster therefore contains a translation factor that allows pixel
locations to be mapped between the Raster's coordinate system and
that of the SampleModel.  The translation from the SampleModel
coordinate system to that of the Raster may be obtained by the
getSampleModelTranslateX and getSampleModelTranslateY methods.
<p>
A Raster may share a DataBuffer with another Raster either by
explicit construction or by the use of the createChild and
createTranslatedChild methods.  Rasters created by these methods
can return a reference to the Raster they were created from by
means of the getParent method.  For a Raster that was not
constructed by means of a call to createTranslatedChild or
createChild, getParent will return null.
<p>
The createTranslatedChild method returns a new Raster that
shares all of the data of the current Raster, but occupies a
bounding rectangle of the same width and height but with a
different starting point.  For example, if the parent Raster
occupied the region (10, 10) to (100, 100), and the translated
Raster was defined to start at (50, 50), then pixel (20, 20) of the
parent and pixel (60, 60) of the child occupy the same location in
the DataBuffer shared by the two Rasters.  In the first case, (-10,
-10) should be added to a pixel coordinate to obtain the
corresponding SampleModel coordinate, and in the second case (-50,
-50) should be added.
<p>
The translation between a parent and child Raster may be
determined by subtracting the child's sampleModelTranslateX and
sampleModelTranslateY values from those of the parent.
<p>
The createChild method may be used to create a new Raster
occupying only a subset of its parent's bounding rectangle
(with the same or a translated coordinate system) or
with a subset of the bands of its parent.
<p>
All constructors are protected.  The correct way to create a
Raster is to use one of the static create methods defined in this
class.  These methods create instances of Raster that use the
standard Interleaved, Banded, and Packed SampleModels and that may
be processed more efficiently than a Raster created by combining
an externally generated SampleModel and DataBuffer.
@see java.awt.image.DataBuffer
@see java.awt.image.SampleModel
@see java.awt.image.PixelInterleavedSampleModel
@see java.awt.image.BandedSampleModel
@see java.awt.image.SinglePixelPackedSampleModel
@see java.awt.image.MultiPixelPackedSampleModel
"
      classrelation 3075714 // sampleModel (<unidirectional association>)
	relation 3075714 --->
	  a role_name "sampleModel" protected
	    comment "
The SampleModel that describes how pixels from this Raster
are stored in the DataBuffer.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3075714 // sampleModel (<unidirectional association>)
	  b parent class_ref 314370 // SampleModel
      end

      classrelation 3075842 // dataBuffer (<unidirectional association>)
	relation 3075842 --->
	  a role_name "dataBuffer" protected
	    comment " The DataBuffer that stores the image data. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3075842 // dataBuffer (<unidirectional association>)
	  b parent class_ref 897026 // DataBuffer
      end

      attribute 1620610 "minX"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The X coordinate of the upper-left pixel of this Raster. 
"
      end

      attribute 1620738 "minY"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The Y coordinate of the upper-left pixel of this Raster. 
"
      end

      attribute 1620866 "width"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The width of this Raster. 
"
      end

      attribute 1620994 "height"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The height of this Raster. 
"
      end

      attribute 1621122 "sampleModelTranslateX"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The X translation from the coordinate space of the
Raster's SampleModel to that of the Raster.

"
      end

      attribute 1621250 "sampleModelTranslateY"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Y translation from the coordinate space of the
Raster's SampleModel to that of the Raster.

"
      end

      attribute 1621378 "numBands"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of bands in the Raster. 
"
      end

      attribute 1621506 "numDataElements"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of DataBuffer data elements per pixel. 
"
      end

      classrelation 3075970 // parent (<unidirectional association>)
	relation 3075970 --->
	  a role_name "parent" protected
	    comment " The parent of this Raster, or null. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3075970 // parent (<unidirectional association>)
	  b parent class_ref 311682 // Raster
      end

      operation 6686466 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 154498 "initialization"
	
	cpp "" ""
	java "  static {
        ColorModel.loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6686594 "createInterleavedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 5
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "bands" explicit_type "int"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a PixelInterleavedSampleModel with the
specified data type, width, height, and number of bands.

<p> The upper left corner of the Raster is given by the
location argument.  If location is null, (0, 0) will be used.
The dataType parameter should be one of the enumerated values
defined in the DataBuffer class.

<p> Note that interleaved <code>DataBuffer.TYPE_INT</code>
Rasters are not supported.  To create a 1-band Raster of type
<code>DataBuffer.TYPE_INT</code>, use
Raster.createPackedRaster().
<p> The only dataTypes supported currently are TYPE_BYTE
and TYPE_USHORT.
@param dataType  the data type for storing samples
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param bands     the number of bands
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified data type,
        width, height and number of bands.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
"
      end

      operation 6686722 "createInterleavedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 7
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param in name "pixelStride" explicit_type "int"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a PixelInterleavedSampleModel with the
specified data type, width, height, scanline stride, pixel
stride, and band offsets.  The number of bands is inferred from
bandOffsets.length.

<p> The upper left corner of the Raster is given by the
location argument.  If location is null, (0, 0) will be used.
The dataType parameter should be one of the enumerated values
defined in the DataBuffer class.

<p> Note that interleaved <code>DataBuffer.TYPE_INT</code>
Rasters are not supported.  To create a 1-band Raster of type
<code>DataBuffer.TYPE_INT</code>, use
Raster.createPackedRaster().
<p> The only dataTypes supported currently are TYPE_BYTE
and TYPE_USHORT.
@param dataType  the data type for storing samples
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param scanlineStride the line stride of the image data
@param pixelStride the pixel stride of the image data
@param bandOffsets the offsets of all bands
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified data type,
        width, height, scanline stride, pixel stride and band
        offsets.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>, or
        <code>DataBuffer.TYPE_USHORT</code>.
"
      end

      operation 6686850 "createBandedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 5
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "bands" explicit_type "int"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a BandedSampleModel with the
specified data type, width, height, and number of bands.

<p> The upper left corner of the Raster is given by the
location argument.  If location is null, (0, 0) will be used.
The dataType parameter should be one of the enumerated values
defined in the DataBuffer class.

<p> The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
and TYPE_INT.
@param dataType  the data type for storing samples
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param bands     the number of bands
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified data type,
        width, height and number of bands.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws ArrayIndexOutOfBoundsException if <code>bands</code>
        is less than 1
"
      end

      operation 6686978 "createBandedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 7
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bankIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a BandedSampleModel with the
specified data type, width, height, scanline stride, bank
indices and band offsets.  The number of bands is inferred from
bankIndices.length and bandOffsets.length, which must be the
same.

<p> The upper left corner of the Raster is given by the
location argument.  The dataType parameter should be one of the
enumerated values defined in the DataBuffer class.

<p> The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
and TYPE_INT.
@param dataType  the data type for storing samples
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param scanlineStride the line stride of the image data
@param bankIndices the bank indices for each band
@param bandOffsets the offsets of all bands
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified data type,
        width, height, scanline stride, bank indices and band
        offsets.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>
        or <code>DataBuffer.TYPE_INT</code>
@throws ArrayIndexOutOfBoundsException if <code>bankIndices</code>
        or <code>bandOffsets</code> is <code>null</code>
"
      end

      operation 6687106 "createPackedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 5
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "bandMasks" explicit_type "int"
	multiplicity "[]"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a SinglePixelPackedSampleModel with
the specified data type, width, height, and band masks.
The number of bands is inferred from bandMasks.length.

<p> The upper left corner of the Raster is given by the
location argument.  If location is null, (0, 0) will be used.
The dataType parameter should be one of the enumerated values
defined in the DataBuffer class.

<p> The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
and TYPE_INT.
@param dataType  the data type for storing samples
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param bandMasks an array containing an entry for each band
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified data type,
        width, height, and band masks.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>
        or <code>DataBuffer.TYPE_INT</code>
"
      end

      operation 6687234 "createPackedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 6
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "bands" explicit_type "int"
	  param in name "bitsPerBand" explicit_type "int"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a packed SampleModel with the
specified data type, width, height, number of bands, and bits
per band.  If the number of bands is one, the SampleModel will
be a MultiPixelPackedSampleModel.

<p> If the number of bands is more than one, the SampleModel
will be a SinglePixelPackedSampleModel, with each band having
bitsPerBand bits.  In either case, the requirements on dataType
and bitsPerBand imposed by the corresponding SampleModel must
be met.

<p> The upper left corner of the Raster is given by the
location argument.  If location is null, (0, 0) will be used.
The dataType parameter should be one of the enumerated values
defined in the DataBuffer class.

<p> The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
and TYPE_INT.
@param dataType  the data type for storing samples
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param bands     the number of bands
@param bitsPerBand the number of bits per band
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified data type,
        width, height, number of bands, and bits per band.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if the product of
        <code>bitsPerBand</code> and <code>bands</code> is
        greater than the number of bits held by
        <code>dataType</code>
@throws IllegalArgumentException if <code>bitsPerBand</code> or
        <code>bands</code> is not greater than zero
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>
        or <code>DataBuffer.TYPE_INT</code>
"
      end

      operation 6687362 "createInterleavedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 7
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param in name "pixelStride" explicit_type "int"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a PixelInterleavedSampleModel with the
specified DataBuffer, width, height, scanline stride, pixel
stride, and band offsets.  The number of bands is inferred from
bandOffsets.length.  The upper left corner of the Raster
is given by the location argument.  If location is null, (0, 0)
will be used.
<p> Note that interleaved <code>DataBuffer.TYPE_INT</code>
Rasters are not supported.  To create a 1-band Raster of type
<code>DataBuffer.TYPE_INT</code>, use
Raster.createPackedRaster().
@param dataBuffer the <code>DataBuffer</code> that contains the
       image data
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param scanlineStride the line stride of the image data
@param pixelStride the pixel stride of the image data
@param bandOffsets the offsets of all bands
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified
        <code>DataBuffer</code>, width, height, scanline stride,
        pixel stride and band offsets.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>
@throws RasterFormatException if <code>dataBuffer</code> has more
        than one bank.
@throws NullPointerException if <code>dataBuffer</code> is null
"
      end

      operation 6687490 "createBandedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 7
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bankIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a BandedSampleModel with the
specified DataBuffer, width, height, scanline stride, bank
indices, and band offsets.  The number of bands is inferred
from bankIndices.length and bandOffsets.length, which must be
the same.  The upper left corner of the Raster is given by the
location argument.  If location is null, (0, 0) will be used.
@param dataBuffer the <code>DataBuffer</code> that contains the
       image data
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param scanlineStride the line stride of the image data
@param bankIndices the bank indices for each band
@param bandOffsets the offsets of all bands
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified
        <code>DataBuffer</code>, width, height, scanline stride,
        bank indices and band offsets.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>
        or <code>DataBuffer.TYPE_INT</code>
@throws NullPointerException if <code>dataBuffer</code> is null
"
      end

      operation 6687618 "createPackedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 6
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bandMasks" explicit_type "int"
	multiplicity "[]"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a SinglePixelPackedSampleModel with
the specified DataBuffer, width, height, scanline stride, and
band masks.  The number of bands is inferred from bandMasks.length.
The upper left corner of the Raster is given by
the location argument.  If location is null, (0, 0) will be used.
@param dataBuffer the <code>DataBuffer</code> that contains the
       image data
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param scanlineStride the line stride of the image data
@param bandMasks an array containing an entry for each band
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified
        <code>DataBuffer</code>, width, height, scanline stride,
        and band masks.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>
        or <code>DataBuffer.TYPE_INT</code>
@throws RasterFormatException if <code>dataBuffer</code> has more
        than one bank.
@throws NullPointerException if <code>dataBuffer</code> is null
"
      end

      operation 6687746 "createPackedRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 5
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "bitsPerPixel" explicit_type "int"
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Raster based on a MultiPixelPackedSampleModel with the
specified DataBuffer, width, height, and bits per pixel.  The upper
left corner of the Raster is given by the location argument.  If
location is null, (0, 0) will be used.
@param dataBuffer the <code>DataBuffer</code> that contains the
       image data
@param w         the width in pixels of the image data
@param h         the height in pixels of the image data
@param bitsPerPixel the number of bits for each pixel
@param location  the upper-left corner of the <code>Raster</code>
@return a WritableRaster object with the specified
        <code>DataBuffer</code>, width, height, and
        bits per pixel.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>location.x + w</code> or
        <code>location.y + h</code> results in integer
        overflow
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types, which are
        <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>
        or <code>DataBuffer.TYPE_INT</code>
@throws RasterFormatException if <code>dataBuffer</code> has more
        than one bank.
@throws NullPointerException if <code>dataBuffer</code> is null
"
      end

      operation 6687874 "createRaster"
	class_operation public return_type class_ref 311682 // Raster
	nparams 3
	  param inout name "sm" type class_ref 314370 // SampleModel
	  param inout name "db" type class_ref 897026 // DataBuffer
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a Raster with the specified SampleModel and DataBuffer.
 The upper left corner of the Raster is given by the location argument.
 If location is null, (0, 0) will be used.
 @param sm the specified <code>SampleModel</code>
 @param db the specified <code>DataBuffer</code>
 @param location the upper-left corner of the <code>Raster</code>
 @return a <code>Raster</code> with the specified
         <code>SampleModel</code>, <code>DataBuffer</code>, and
         location.
@throws RasterFormatException if computing either
        <code>location.x + sm.getWidth()</code> or
        <code>location.y + sm.getHeight()</code> results in integer
        overflow
@throws RasterFormatException if <code>db</code> has more
        than one bank and <code>sm</code> is a
        PixelInterleavedSampleModel, SinglePixelPackedSampleModel,
        or MultiPixelPackedSampleModel.
 @throws NullPointerException if either SampleModel or DataBuffer is
         null
"
      end

      operation 6688002 "createWritableRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "sm" type class_ref 314370 // SampleModel
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a WritableRaster with the specified SampleModel.
 The upper left corner of the Raster is given by the location argument.
 If location is null, (0, 0) will be used.
 @param sm the specified <code>SampleModel</code>
 @param location the upper-left corner of the
        <code>WritableRaster</code>
 @return a <code>WritableRaster</code> with the specified
         <code>SampleModel</code> and location.
 @throws RasterFormatException if computing either
         <code>location.x + sm.getWidth()</code> or
         <code>location.y + sm.getHeight()</code> results in integer
         overflow
"
      end

      operation 6688130 "createWritableRaster"
	class_operation public return_type class_ref 322690 // WritableRaster
	nparams 3
	  param inout name "sm" type class_ref 314370 // SampleModel
	  param inout name "db" type class_ref 897026 // DataBuffer
	  param inout name "location" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a WritableRaster with the specified SampleModel and DataBuffer.
 The upper left corner of the Raster is given by the location argument.
 If location is null, (0, 0) will be used.
 @param sm the specified <code>SampleModel</code>
 @param db the specified <code>DataBuffer</code>
 @param location the upper-left corner of the
        <code>WritableRaster</code>
 @return a <code>WritableRaster</code> with the specified
         <code>SampleModel</code>, <code>DataBuffer</code>, and
         location.
@throws RasterFormatException if computing either
        <code>location.x + sm.getWidth()</code> or
        <code>location.y + sm.getHeight()</code> results in integer
        overflow
@throws RasterFormatException if <code>db</code> has more
        than one bank and <code>sm</code> is a
        PixelInterleavedSampleModel, SinglePixelPackedSampleModel,
        or MultiPixelPackedSampleModel.
@throws NullPointerException if either SampleModel or DataBuffer is null
"
      end

      operation 6688258 "Raster"
	protected explicit_return_type ""
	nparams 2
	  param inout name "sampleModel" type class_ref 314370 // SampleModel
	  param inout name "origin" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a Raster with the given SampleModel.  The Raster's
 upper left corner is origin and it is the same size as the
 SampleModel.  A DataBuffer large enough to describe the
 Raster is automatically created.
 @param sampleModel     The SampleModel that specifies the layout
 @param origin          The Point that specified the origin
 @throws RasterFormatException if computing either
         <code>origin.x + sampleModel.getWidth()</code> or
         <code>origin.y + sampleModel.getHeight()</code> results in
         integer overflow
 @throws NullPointerException either <code>sampleModel</code> or
         <code>origin</code> is null
"
      end

      operation 6688386 "Raster"
	protected explicit_return_type ""
	nparams 3
	  param inout name "sampleModel" type class_ref 314370 // SampleModel
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param inout name "origin" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a Raster with the given SampleModel and DataBuffer.
 The Raster's upper left corner is origin and it is the same size
 as the SampleModel.  The DataBuffer is not initialized and must
 be compatible with SampleModel.
 @param sampleModel     The SampleModel that specifies the layout
 @param dataBuffer      The DataBuffer that contains the image data
 @param origin          The Point that specifies the origin
 @throws RasterFormatException if computing either
         <code>origin.x + sampleModel.getWidth()</code> or
         <code>origin.y + sampleModel.getHeight()</code> results in
         integer overflow
 @throws NullPointerException either <code>sampleModel</code> or
         <code>origin</code> is null
"
      end

      operation 6688514 "Raster"
	protected explicit_return_type ""
	nparams 5
	  param inout name "sampleModel" type class_ref 314370 // SampleModel
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param inout name "aRegion" type class_ref 314114 // Rectangle
	  param inout name "sampleModelTranslate" type class_ref 323714 // Point
	  param inout name "parent" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Raster with the given SampleModel, DataBuffer, and
parent.  aRegion specifies the bounding rectangle of the new
Raster.  When translated into the base Raster's coordinate
system, aRegion must be contained by the base Raster.
(The base Raster is the Raster's ancestor which has no parent.)
sampleModelTranslate specifies the sampleModelTranslateX and
sampleModelTranslateY values of the new Raster.

Note that this constructor should generally be called by other
constructors or create methods, it should not be used directly.
@param sampleModel     The SampleModel that specifies the layout
@param dataBuffer      The DataBuffer that contains the image data
@param aRegion         The Rectangle that specifies the image area
@param sampleModelTranslate  The Point that specifies the translation
                       from SampleModel to Raster coordinates
@param parent          The parent (if any) of this raster
@throws NullPointerException if any of <code>sampleModel</code>,
        <code>dataBuffer</code>, <code>aRegion</code> or
        <code>sampleModelTranslate</code> is null
@throws RasterFormatException if <code>aRegion</code> has width
        or height less than or equal to zero, or computing either
        <code>aRegion.x + aRegion.width</code> or
        <code>aRegion.y + aRegion.height</code> results in integer
        overflow
"
      end

      operation 6688642 "getParent"
	public return_type class_ref 311682 // Raster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent Raster (if any) of this Raster or null.
@return the parent Raster or <code>null</code>.
"
      end

      operation 6688770 "getSampleModelTranslateX"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X translation from the coordinate system of the
SampleModel to that of the Raster.  To convert a pixel's X
coordinate from the Raster coordinate system to the SampleModel
coordinate system, this value must be subtracted.
@return the X translation from the coordinate space of the
        Raster's SampleModel to that of the Raster.
"
      end

      operation 6688898 "getSampleModelTranslateY"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y translation from the coordinate system of the
SampleModel to that of the Raster.  To convert a pixel's Y
coordinate from the Raster coordinate system to the SampleModel
coordinate system, this value must be subtracted.
@return the Y translation from the coordinate space of the
        Raster's SampleModel to that of the Raster.
"
      end

      operation 6689026 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a compatible WritableRaster the same size as this Raster with
the same SampleModel and a new initialized DataBuffer.
@return a compatible <code>WritableRaster</code> with the same sample
        model and a new data buffer.
"
      end

      operation 6689154 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a compatible WritableRaster with the specified size, a new
SampleModel, and a new initialized DataBuffer.
@param w the specified width of the new <code>WritableRaster</code>
@param h the specified height of the new <code>WritableRaster</code>
@return a compatible <code>WritableRaster</code> with the specified
        size and a new sample model and data buffer.
@exception RasterFormatException if the width or height is less than
                              or equal to zero.
"
      end

      operation 6689282 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "rect" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a compatible WritableRaster with location (minX, minY)
and size (width, height) specified by rect, a
new SampleModel, and a new initialized DataBuffer.
@param rect a <code>Rectangle</code> that specifies the size and
       location of the <code>WritableRaster</code>
@return a compatible <code>WritableRaster</code> with the specified
        size and location and a new sample model and data buffer.
@throws RasterFormatException if <code>rect</code> has width
        or height less than or equal to zero, or computing either
        <code>rect.x + rect.width</code> or
        <code>rect.y + rect.height</code> results in integer
        overflow
@throws NullPointerException if <code>rect</code> is null
"
      end

      operation 6689410 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a compatible WritableRaster with the specified
location (minX, minY) and size (width, height), a
new SampleModel, and a new initialized DataBuffer.
@param x the X coordinate of the upper-left corner of
       the <code>WritableRaster</code>
@param y the Y coordinate of the upper-left corner of
       the <code>WritableRaster</code>
@param w the specified width of the <code>WritableRaster</code>
@param h the specified height of the <code>WritableRaster</code>
@return a compatible <code>WritableRaster</code> with the specified
        size and location and a new sample model and data buffer.
@throws RasterFormatException if <code>w</code> or <code>h</code>
        is less than or equal to zero, or computing either
        <code>x + w</code> or
        <code>y + h</code> results in integer
        overflow
"
      end

      operation 6689538 "createTranslatedChild"
	public return_type class_ref 311682 // Raster
	nparams 2
	  param in name "childMinX" explicit_type "int"
	  param in name "childMinY" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Raster with the same size, SampleModel and DataBuffer
as this one, but with a different location.  The new Raster
will possess a reference to the current Raster, accessible
through its getParent() method.

@param childMinX the X coordinate of the upper-left
       corner of the new <code>Raster</code>
@param childMinY the Y coordinate of the upper-left
       corner of the new <code>Raster</code>
@return a new <code>Raster</code> with the same size, SampleModel,
        and DataBuffer as this <code>Raster</code>, but with the
        specified location.
@throws RasterFormatException if  computing either
        <code>childMinX + this.getWidth()</code> or
        <code>childMinY + this.getHeight()</code> results in integer
        overflow
"
      end

      operation 6689666 "createChild"
	public return_type class_ref 311682 // Raster
	nparams 7
	  param in name "parentX" explicit_type "int"
	  param in name "parentY" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "childMinX" explicit_type "int"
	  param in name "childMinY" explicit_type "int"
	  param inout name "bandList" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new Raster which shares all or part of this Raster's
DataBuffer.  The new Raster will possess a reference to the
current Raster, accessible through its getParent() method.

<p> The parentX, parentY, width and height parameters
form a Rectangle in this Raster's coordinate space,
indicating the area of pixels to be shared.  An error will
be thrown if this Rectangle is not contained with the bounds
of the current Raster.

<p> The new Raster may additionally be translated to a
different coordinate system for the plane than that used by the current
Raster.  The childMinX and childMinY parameters give the new
(x, y) coordinate of the upper-left pixel of the returned
Raster; the coordinate (childMinX, childMinY) in the new Raster
will map to the same pixel as the coordinate (parentX, parentY)
in the current Raster.

<p> The new Raster may be defined to contain only a subset of
the bands of the current Raster, possibly reordered, by means
of the bandList parameter.  If bandList is null, it is taken to
include all of the bands of the current Raster in their current
order.

<p> To create a new Raster that contains a subregion of the current
Raster, but shares its coordinate system and bands,
this method should be called with childMinX equal to parentX,
childMinY equal to parentY, and bandList equal to null.

@param parentX The X coordinate of the upper-left corner
       in this Raster's coordinates
@param parentY The Y coordinate of the upper-left corner
       in this Raster's coordinates
@param width      Width of the region starting at (parentX, parentY)
@param height     Height of the region starting at (parentX, parentY).
@param childMinX The X coordinate of the upper-left corner
                  of the returned Raster
@param childMinY The Y coordinate of the upper-left corner
                  of the returned Raster
@param bandList   Array of band indices, or null to use all bands
@return a new <code>Raster</code>.
@exception RasterFormatException if the specified subregion is outside
                              of the raster bounds.
@throws RasterFormatException if <code>width</code> or
        <code>height</code>
        is less than or equal to zero, or computing any of
        <code>parentX + width</code>, <code>parentY + height</code>,
        <code>childMinX + width</code>, or
        <code>childMinY + height</code> results in integer
        overflow
"
      end

      operation 6689794 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding Rectangle of this Raster. This function returns
the same information as getMinX/MinY/Width/Height.
@return the bounding box of this <code>Raster</code>.
"
      end

      operation 6689922 "getMinX"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the minimum valid X coordinate of the Raster.
 @return the minimum x coordinate of this <code>Raster</code>.
"
      end

      operation 6690050 "getMinY"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the minimum valid Y coordinate of the Raster.
 @return the minimum y coordinate of this <code>Raster</code>.
"
      end

      operation 6690178 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the width in pixels of the Raster.
 @return the width of this <code>Raster</code>.
"
      end

      operation 6690306 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the height in pixels of the Raster.
 @return the height of this <code>Raster</code>.
"
      end

      operation 6690434 "getNumBands"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of bands (samples per pixel) in this Raster.
 @return the number of bands of this <code>Raster</code>.
"
      end

      operation 6690562 "getNumDataElements"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of data elements needed to transfer one pixel
 via the getDataElements and setDataElements methods.  When pixels
 are transferred via these methods, they may be transferred in a
 packed or unpacked format, depending on the implementation of the
 underlying SampleModel.  Using these methods, pixels are transferred
 as an array of getNumDataElements() elements of a primitive type given
 by getTransferType().  The TransferType may or may not be the same
 as the storage data type of the DataBuffer.
 @return the number of data elements.
"
      end

      operation 6690690 "getTransferType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the TransferType used to transfer pixels via the
 getDataElements and setDataElements methods.  When pixels
 are transferred via these methods, they may be transferred in a
 packed or unpacked format, depending on the implementation of the
 underlying SampleModel.  Using these methods, pixels are transferred
 as an array of getNumDataElements() elements of a primitive type given
 by getTransferType().  The TransferType may or may not be the same
 as the storage data type of the DataBuffer.  The TransferType will
 be one of the types defined in DataBuffer.
 @return this transfer type.
"
      end

      operation 6690818 "getDataBuffer"
	public return_type class_ref 897026 // DataBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the DataBuffer associated with this Raster.
 @return the <code>DataBuffer</code> of this <code>Raster</code>.
"
      end

      operation 6690946 "getSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the SampleModel that describes the layout of the image data.
 @return the <code>SampleModel</code> of this <code>Raster</code>.
"
      end

      operation 6691074 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "outData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns data for a single pixel in a primitive array of type
TransferType.  For image data supported by the Java 2D(tm) API,
this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
thus increasing efficiency for data transfers.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
A ClassCastException will be thrown if the input object is non null
and references anything other than an array of TransferType.
@see java.awt.image.SampleModel#getDataElements(int, int, Object, DataBuffer)
@param x        The X coordinate of the pixel location
@param y        The Y coordinate of the pixel location
@param outData  An object reference to an array of type defined by
                getTransferType() and length getNumDataElements().
                If null, an array of appropriate type and size will be
                allocated
@return         An object reference to an array of type defined by
                getTransferType() with the requested pixel data.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if outData is too small to hold the output.
"
      end

      operation 6691202 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "outData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pixel data for the specified rectangle of pixels in a
primitive array of type TransferType.
For image data supported by the Java 2D API, this
will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
thus increasing efficiency for data transfers.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
A ClassCastException will be thrown if the input object is non null
and references anything other than an array of TransferType.
@see java.awt.image.SampleModel#getDataElements(int, int, int, int, Object, DataBuffer)
@param x    The X coordinate of the upper-left pixel location
@param y    The Y coordinate of the upper-left pixel location
@param w    Width of the pixel rectangle
@param h   Height of the pixel rectangle
@param outData  An object reference to an array of type defined by
                getTransferType() and length w*h*getNumDataElements().
                If null, an array of appropriate type and size will be
                allocated.
@return         An object reference to an array of type defined by
                getTransferType() with the requested pixel data.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if outData is too small to hold the output.
"
      end

      operation 6691330 "getPixel"
	public explicit_return_type "int"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples in an array of int for the specified pixel.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x The X coordinate of the pixel location
@param y The Y coordinate of the pixel location
@param iArray An optionally preallocated int array
@return the samples for the specified pixel.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if iArray is too small to hold the output.
"
      end

      operation 6691458 "getPixel"
	public explicit_return_type "float"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples in an array of float for the
specified pixel.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x The X coordinate of the pixel location
@param y The Y coordinate of the pixel location
@param fArray An optionally preallocated float array
@return the samples for the specified pixel.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if fArray is too small to hold the output.
"
      end

      operation 6691586 "getPixel"
	public explicit_return_type "double"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples in an array of double for the specified pixel.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x The X coordinate of the pixel location
@param y The Y coordinate of the pixel location
@param dArray An optionally preallocated double array
@return the samples for the specified pixel.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if dArray is too small to hold the output.
"
      end

      operation 6691714 "getPixels"
	public explicit_return_type "int"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an int array containing all samples for a rectangle of pixels,
one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x      The X coordinate of the upper-left pixel location
@param y      The Y coordinate of the upper-left pixel location
@param w      Width of the pixel rectangle
@param h      Height of the pixel rectangle
@param iArray An optionally pre-allocated int array
@return the samples for the specified rectangle of pixels.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if iArray is too small to hold the output.
"
      end

      operation 6691842 "getPixels"
	public explicit_return_type "float"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a float array containing all samples for a rectangle of pixels,
one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the pixel location
@param y        The Y coordinate of the pixel location
@param w        Width of the pixel rectangle
@param h        Height of the pixel rectangle
@param fArray   An optionally pre-allocated float array
@return the samples for the specified rectangle of pixels.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if fArray is too small to hold the output.
"
      end

      operation 6691970 "getPixels"
	public explicit_return_type "double"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a double array containing all samples for a rectangle of pixels,
one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the upper-left pixel location
@param y        The Y coordinate of the upper-left pixel location
@param w        Width of the pixel rectangle
@param h        Height of the pixel rectangle
@param dArray   An optionally pre-allocated double array
@return the samples for the specified rectangle of pixels.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if dArray is too small to hold the output.
"
      end

      operation 6692098 "getSample"
	public explicit_return_type "int"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band for the pixel located
at (x,y) as an int.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the pixel location
@param y        The Y coordinate of the pixel location
@param b        The band to return
@return the sample in the specified band for the pixel at the
        specified coordinate.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6692226 "getSampleFloat"
	public explicit_return_type "float"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for the pixel located at (x,y) as a float.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the pixel location
@param y        The Y coordinate of the pixel location
@param b        The band to return
@return the sample in the specified band for the pixel at the
        specified coordinate.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6692354 "getSampleDouble"
	public explicit_return_type "double"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for a pixel located at (x,y) as a double.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the pixel location
@param y        The Y coordinate of the pixel location
@param b        The band to return
@return the sample in the specified band for the pixel at the
        specified coordinate.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6692482 "getSamples"
	public explicit_return_type "int"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified band for the specified rectangle
of pixels in an int array, one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the upper-left pixel location
@param y        The Y coordinate of the upper-left pixel location
@param w        Width of the pixel rectangle
@param h        Height of the pixel rectangle
@param b        The band to return
@param iArray   An optionally pre-allocated int array
@return the samples for the specified band for the specified
        rectangle of pixels.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if iArray is too small to
hold the output.
"
      end

      operation 6692610 "getSamples"
	public explicit_return_type "float"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified band for the specified rectangle
of pixels in a float array, one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the upper-left pixel location
@param y        The Y coordinate of the upper-left pixel location
@param w        Width of the pixel rectangle
@param h        Height of the pixel rectangle
@param b        The band to return
@param fArray   An optionally pre-allocated float array
@return the samples for the specified band for the specified
        rectangle of pixels.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if fArray is too small to
hold the output.
"
      end

      operation 6692738 "getSamples"
	public explicit_return_type "double"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified band for a specified rectangle
of pixels in a double array, one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown
if the coordinates are not in bounds.  However, explicit bounds
checking is not guaranteed.
@param x        The X coordinate of the upper-left pixel location
@param y        The Y coordinate of the upper-left pixel location
@param w        Width of the pixel rectangle
@param h        Height of the pixel rectangle
@param b        The band to return
@param dArray   An optionally pre-allocated double array
@return the samples for the specified band for the specified
        rectangle of pixels.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if dArray is too small to
hold the output.
"
      end
    end

    class 312066 "ColorModel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ColorModel</code> abstract class encapsulates the
methods for translating a pixel value to color components
(for example, red, green, and blue) and an alpha component.
In order to render an image to the screen, a printer, or another
image, pixel values must be converted to color and alpha components.
As arguments to or return values from methods of this class,
pixels are represented as 32-bit ints or as arrays of primitive types.
The number, order, and interpretation of color components for a
<code>ColorModel</code> is specified by its <code>ColorSpace</code>.
A <code>ColorModel</code> used with pixel data that does not include
alpha information treats all pixels as opaque, which is an alpha
value of 1.0.
<p>
This <code>ColorModel</code> class supports two representations of
pixel values.  A pixel value can be a single 32-bit int or an
array of primitive types.  The Java(tm) Platform 1.0 and 1.1 APIs
represented pixels as single <code>byte</code> or single
<code>int</code> values.  For purposes of the <code>ColorModel</code>
class, pixel value arguments were passed as ints.  The Java(tm) 2
Platform API introduced additional classes for representing images.
With {@link BufferedImage} or {@link RenderedImage}
objects, based on {@link Raster} and {@link SampleModel} classes, pixel
values might not be conveniently representable as a single int.
Consequently, <code>ColorModel</code> now has methods that accept
pixel values represented as arrays of primitive types.  The primitive
type used by a particular <code>ColorModel</code> object is called its
transfer type.
<p>
<code>ColorModel</code> objects used with images for which pixel values
are not conveniently representable as a single int throw an
{@link IllegalArgumentException} when methods taking a single int pixel
argument are called.  Subclasses of <code>ColorModel</code> must
specify the conditions under which this occurs.  This does not
occur with {@link DirectColorModel} or {@link IndexColorModel} objects.
<p>
Currently, the transfer types supported by the Java 2D(tm) API are
DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT,
DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, and DataBuffer.TYPE_DOUBLE.
Most rendering operations will perform much faster when using ColorModels
and images based on the first three of these types.  In addition, some
image filtering operations are not supported for ColorModels and
images based on the latter three types.
The transfer type for a particular <code>ColorModel</code> object is
specified when the object is created, either explicitly or by default.
All subclasses of <code>ColorModel</code> must specify what the
possible transfer types are and how the number of elements in the
primitive arrays representing pixels is determined.
<p>
For <code>BufferedImages</code>, the transfer type of its
<code>Raster</code> and of the <code>Raster</code> object's
<code>SampleModel</code> (available from the
<code>getTransferType</code> methods of these classes) must match that
of the <code>ColorModel</code>.  The number of elements in an array
representing a pixel for the <code>Raster</code> and
<code>SampleModel</code> (available from the
<code>getNumDataElements</code> methods of these classes) must match
that of the <code>ColorModel</code>.
<p>
The algorithm used to convert from pixel values to color and alpha
components varies by subclass.  For example, there is not necessarily
a one-to-one correspondence between samples obtained from the
<code>SampleModel</code> of a <code>BufferedImage</code> object's
<code>Raster</code> and color/alpha components.  Even when
there is such a correspondence, the number of bits in a sample is not
necessarily the same as the number of bits in the corresponding color/alpha
component.  Each subclass must specify how the translation from
pixel values to color/alpha components is done.
<p>
Methods in the <code>ColorModel</code> class use two different
representations of color and alpha components - a normalized form
and an unnormalized form.  In the normalized form, each component is a
<code>float</code> value between some minimum and maximum values.  For
the alpha component, the minimum is 0.0 and the maximum is 1.0.  For
color components the minimum and maximum values for each component can
be obtained from the <code>ColorSpace</code> object.  These values
will often be 0.0 and 1.0 (e.g. normalized component values for the
default sRGB color space range from 0.0 to 1.0), but some color spaces
have component values with different upper and lower limits.  These
limits can be obtained using the <code>getMinValue</code> and
<code>getMaxValue</code> methods of the <code>ColorSpace</code>
class.  Normalized color component values are not premultiplied.
All <code>ColorModels</code> must support the normalized form.
<p>
In the unnormalized
form, each component is an unsigned integral value between 0 and
2<sup>n</sup> - 1, where n is the number of significant bits for a
particular component.  If pixel values for a particular
<code>ColorModel</code> represent color samples premultiplied by
the alpha sample, unnormalized color component values are
also premultiplied.  The unnormalized form is used only with instances
of <code>ColorModel</code> whose <code>ColorSpace</code> has minimum
component values of 0.0 for all components and maximum values of
1.0 for all components.
The unnormalized form for color and alpha components can be a convenient
representation for <code>ColorModels</code> whose normalized component
values all lie
between 0.0 and 1.0.  In such cases the integral value 0 maps to 0.0 and
the value 2<sup>n</sup> - 1 maps to 1.0.  In other cases, such as
when the normalized component values can be either negative or positive,
the unnormalized form is not convenient.  Such <code>ColorModel</code>
objects throw an {@link IllegalArgumentException} when methods involving
an unnormalized argument are called.  Subclasses of <code>ColorModel</code>
must specify the conditions under which this occurs.

@see IndexColorModel
@see ComponentColorModel
@see PackedColorModel
@see DirectColorModel
@see java.awt.Image
@see BufferedImage
@see RenderedImage
@see java.awt.color.ColorSpace
@see SampleModel
@see Raster
@see DataBuffer
"
      classrelation 3070210 // <realization>
	relation 3070210 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3070210 // <realization>
	  b parent class_ref 860546 // Transparency
      end

      attribute 1604354 "pData"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Placeholder for data for native functions"
      end

      attribute 1604482 "pixel_bits"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The total number of bits in the pixel.

"
      end

      attribute 1604610 "nBits"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1604738 "transparency"
	package explicit_type "int"
	init_value " Transparency.TRANSLUCENT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1604866 "supportsAlpha"
	package explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1604994 "isAlphaPremultiplied"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1605122 "numComponents"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1605250 "numColorComponents"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3070338 // colorSpace (<unidirectional association>)
	relation 3070338 --->
	  a role_name "colorSpace" init_value " ColorSpace.getInstance(ColorSpace.CS_sRGB)" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3070338 // colorSpace (<unidirectional association>)
	  b parent class_ref 322178 // ColorSpace
      end

      attribute 1605378 "colorSpaceType"
	package explicit_type "int"
	init_value " ColorSpace.TYPE_RGB"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1605506 "maxBits"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1605634 "is_sRGB"
	package explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1605762 "transferType"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Data type of the array used to represent pixel values.

"
      end

      attribute 1605890 "loaded"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is copied from java.awt.Toolkit since we need the library
loaded in java.awt.image also:

WARNING: This is a temporary workaround for a problem in the
way the AWT loads native libraries. A number of classes in the
AWT package have a native method, initIDs(), which initializes
the JNI field and method ids used in the native portion of
their implementation.

Since the use and storage of these ids is done by the
implementation libraries, the implementation of these method is
provided by the particular AWT implementations (for example,
\"Toolkit\"s/Peer), such as Motif, Microsoft Windows, or Tiny. The
problem is that this means that the native libraries must be
loaded by the java.* classes, which do not necessarily know the
names of the libraries to load. A better way of doing this
would be to provide a separate library which defines java.awt.*
initIDs, and exports the relevant symbols out to the
implementation libraries.

For now, we know it's done by the implementation, and we assume
that the name of the library is \"awt\".  -br.

"
      end

      operation 6632962 "loadLibraries"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6633090 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 153986 "initialization"
	
	cpp "" ""
	java "  static {
        /* ensure that the proper libraries are loaded */
        loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3070466 // RGBdefault (<unidirectional association>)
	relation 3070466 --->
	  a role_name "RGBdefault" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3070466 // RGBdefault (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      operation 6633218 "getRGBdefault"
	class_operation public return_type class_ref 312066 // ColorModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>DirectColorModel</code> that describes the default
format for integer RGB values used in many of the methods in the
AWT image interfaces for the convenience of the programmer.
The color space is the default {@link ColorSpace}, sRGB.
The format for the RGB values is an integer with 8 bits
each of alpha, red, green, and blue color components ordered
correspondingly from the most significant byte to the least
significant byte, as in:  0xAARRGGBB.  Color components are
not premultiplied by the alpha component.  This format does not
necessarily represent the native or the most efficient
<code>ColorModel</code> for a particular device or for all images.
It is merely used as a common color model format.
@return a <code>DirectColorModel</code>object describing default
         RGB values.
"
      end

      operation 6633346 "ColorModel"
	public explicit_return_type ""
	nparams 1
	  param in name "bits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ColorModel</code> that translates pixels of the
specified number of bits to color/alpha components.  The color
space is the default RGB <code>ColorSpace</code>, which is sRGB.
Pixel values are assumed to include alpha information.  If color
and alpha information are represented in the pixel value as
separate spatial bands, the color bands are assumed not to be
premultiplied with the alpha value. The transparency type is
java.awt.Transparency.TRANSLUCENT.  The transfer type will be the
smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
or DataBuffer.TYPE_INT that can hold a single pixel
(or DataBuffer.TYPE_UNDEFINED if bits is greater
than 32).  Since this constructor has no information about the
number of bits per color and alpha component, any subclass calling
this constructor should override any method that requires this
information.
@param bits the number of bits of a pixel
@throws IllegalArgumentException if the number
         of bits in <code>bits</code> is less than 1
"
      end

      operation 6633474 "ColorModel"
	protected explicit_return_type ""
	nparams 7
	  param in name "pixel_bits" explicit_type "int"
	  param inout name "bits" explicit_type "int"
	multiplicity "[]"
	  param inout name "cspace" type class_ref 322178 // ColorSpace
	  param inout name "hasAlpha" explicit_type "boolean"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  param in name "transparency" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ColorModel</code> that translates pixel values
to color/alpha components.  Color components will be in the
specified <code>ColorSpace</code>. <code>pixel_bits</code> is the
number of bits in the pixel values.  The bits array
specifies the number of significant bits per color and alpha component.
Its length should be the number of components in the
<code>ColorSpace</code> if there is no alpha information in the
pixel values, or one more than this number if there is alpha
information.  <code>hasAlpha</code> indicates whether or not alpha
information is present.  The <code>boolean</code>
<code>isAlphaPremultiplied</code> specifies how to interpret pixel
values in which color and alpha information are represented as
separate spatial bands.  If the <code>boolean</code>
is <code>true</code>, color samples are assumed to have been
multiplied by the alpha sample.  The <code>transparency</code>
specifies what alpha values can be represented by this color model.
The transfer type is the type of primitive array used to represent
pixel values.  Note that the bits array contains the number of
significant bits per color/alpha component after the translation
from pixel values.  For example, for an
<code>IndexColorModel</code> with <code>pixel_bits</code> equal to
16, the bits array might have four elements with each element set
to 8.
@param pixel_bits the number of bits in the pixel values
@param bits array that specifies the number of significant bits
         per color and alpha component
@param cspace the specified <code>ColorSpace</code>
@param hasAlpha <code>true</code> if alpha information is present;
         <code>false</code> otherwise
@param isAlphaPremultiplied <code>true</code> if color samples are
         assumed to be premultiplied by the alpha samples;
         <code>false</code> otherwise
@param transparency what alpha values can be represented by this
         color model
@param transferType the type of the array used to represent pixel
         values
@throws IllegalArgumentException if the length of
         the bit array is less than the number of color or alpha
         components in this <code>ColorModel</code>, or if the
         transparency is not a valid value.
@throws IllegalArgumentException if the sum of the number
         of bits in <code>bits</code> is less than 1 or if
         any of the elements in <code>bits</code> is less than 0.
@see java.awt.Transparency
"
      end

      operation 6633602 "hasAlpha"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not alpha is supported in this
<code>ColorModel</code>.
@return <code>true</code> if alpha is supported in this
<code>ColorModel</code>; <code>false</code> otherwise.
"
      end

      operation 6633730 "isAlphaPremultiplied"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the alpha has been premultiplied in the
pixel values to be translated by this <code>ColorModel</code>.
If the boolean is <code>true</code>, this <code>ColorModel</code>
is to be used to interpret pixel values in which color and alpha
information are represented as separate spatial bands, and color
samples are assumed to have been multiplied by the
alpha sample.
@return <code>true</code> if the alpha values are premultiplied
         in the pixel values to be translated by this
         <code>ColorModel</code>; <code>false</code> otherwise.
"
      end

      operation 6633858 "getTransferType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transfer type of this <code>ColorModel</code>.
The transfer type is the type of primitive array used to represent
pixel values as arrays.
@return the transfer type.
@since 1.3
"
      end

      operation 6633986 "getPixelSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits per pixel described by this
<code>ColorModel</code>.
@return the number of bits per pixel.
"
      end

      operation 6634114 "getComponentSize"
	public explicit_return_type "int"
	nparams 1
	  param in name "componentIdx" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits for the specified color/alpha component.
Color components are indexed in the order specified by the
<code>ColorSpace</code>.  Typically, this order reflects the name
of the color space type. For example, for TYPE_RGB, index 0
corresponds to red, index 1 to green, and index 2
to blue.  If this <code>ColorModel</code> supports alpha, the alpha
component corresponds to the index following the last color
component.
@param componentIdx the index of the color/alpha component
@return the number of bits for the color/alpha component at the
         specified index.
@throws ArrayIndexOutOfBoundsException if <code>componentIdx</code>
        is greater than the number of components or
        less than zero
@throws NullPointerException if the number of bits array is
        <code>null</code>
"
      end

      operation 6634242 "getComponentSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the number of bits per color/alpha component.
The array contains the color components in the order specified by the
<code>ColorSpace</code>, followed by the alpha component, if
present.
@return an array of the number of bits per color/alpha component
"
      end

      operation 6634370 "getTransparency"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transparency.  Returns either OPAQUE, BITMASK,
or TRANSLUCENT.
@return the transparency of this <code>ColorModel</code>.
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT
"
      end

      operation 6634498 "getNumComponents"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of components, including alpha, in this
<code>ColorModel</code>.  This is equal to the number of color
components, optionally plus one, if there is an alpha component.
@return the number of components in this <code>ColorModel</code>
"
      end

      operation 6634626 "getNumColorComponents"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of color components in this
<code>ColorModel</code>.
This is the number of components returned by
{@link ColorSpace#getNumComponents}.
@return the number of color components in this
<code>ColorModel</code>.
@see ColorSpace#getNumComponents
"
      end

      operation 6634754 "getRed"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the red color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
is done if necessary.  The pixel value is specified as an int.
An <code>IllegalArgumentException</code> is thrown if pixel
values for this <code>ColorModel</code> are not conveniently
representable as a single int.  The returned value is not a
pre-multiplied value.  For example, if the
alpha is premultiplied, this method divides it out before returning
the value.  If the alpha value is 0, the red value is 0.
@param pixel a specified pixel
@return the value of the red component of the specified pixel.
"
      end

      operation 6634882 "getGreen"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the green color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
is done if necessary.  The pixel value is specified as an int.
An <code>IllegalArgumentException</code> is thrown if pixel
values for this <code>ColorModel</code> are not conveniently
representable as a single int.  The returned value is a non
pre-multiplied value.  For example, if the alpha is premultiplied,
this method divides it out before returning
the value.  If the alpha value is 0, the green value is 0.
@param pixel the specified pixel
@return the value of the green component of the specified pixel.
"
      end

      operation 6635010 "getBlue"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the blue color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
is done if necessary.  The pixel value is specified as an int.
An <code>IllegalArgumentException</code> is thrown if pixel values
for this <code>ColorModel</code> are not conveniently representable
as a single int.  The returned value is a non pre-multiplied
value, for example, if the alpha is premultiplied, this method
divides it out before returning the value.  If the alpha value is
0, the blue value is 0.
@param pixel the specified pixel
@return the value of the blue component of the specified pixel.
"
      end

      operation 6635138 "getAlpha"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alpha component for the specified pixel, scaled
from 0 to 255.  The pixel value is specified as an int.
An <code>IllegalArgumentException</code> is thrown if pixel
values for this <code>ColorModel</code> are not conveniently
representable as a single int.
@param pixel the specified pixel
@return the value of alpha component of the specified pixel.
"
      end

      operation 6635266 "getRGB"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color/alpha components of the pixel in the default
RGB color model format.  A color conversion is done if necessary.
The pixel value is specified as an int.
An <code>IllegalArgumentException</code> thrown if pixel values
for this <code>ColorModel</code> are not conveniently representable
as a single int.  The returned value is in a non
pre-multiplied format. For example, if the alpha is premultiplied,
this method divides it out of the color components.  If the alpha
value is 0, the color values are 0.
@param pixel the specified pixel
@return the RGB value of the color/alpha components of the
         specified pixel.
@see ColorModel#getRGBdefault
"
      end

      operation 6635394 "getRed"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the red color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is
specified by an array of data elements of type transferType passed
in as an object reference.  The returned value is a non
pre-multiplied value.  For example, if alpha is premultiplied,
this method divides it out before returning
the value.  If the alpha value is 0, the red value is 0.
If <code>inData</code> is not a primitive array of type
transferType, a <code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>inData</code> is not large enough to hold a pixel value for
this <code>ColorModel</code>.
If this <code>transferType</code> is not supported, a
<code>UnsupportedOperationException</code> will be
thrown.  Since
<code>ColorModel</code> is an abstract class, any instance
must be an instance of a subclass.  Subclasses inherit the
implementation of this method and if they don't override it, this
method throws an exception if the subclass uses a
<code>transferType</code> other than
<code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_USHORT</code>, or
<code>DataBuffer.TYPE_INT</code>.
@param inData an array of pixel values
@return the value of the red component of the specified pixel.
@throws ClassCastException if <code>inData</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>inData</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@throws UnsupportedOperationException if this
 <code>tranferType</code> is not supported by this
 <code>ColorModel</code>
"
      end

      operation 6635522 "getGreen"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the green color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is
specified by an array of data elements of type transferType passed
in as an object reference.  The returned value will be a non
pre-multiplied value.  For example, if the alpha is premultiplied,
this method divides it out before returning the value.  If the
alpha value is 0, the green value is 0.  If <code>inData</code> is
not a primitive array of type transferType, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>inData</code> is not large enough to hold a pixel value for
this <code>ColorModel</code>.
If this <code>transferType</code> is not supported, a
<code>UnsupportedOperationException</code> will be
thrown.  Since
<code>ColorModel</code> is an abstract class, any instance
must be an instance of a subclass.  Subclasses inherit the
implementation of this method and if they don't override it, this
method throws an exception if the subclass uses a
<code>transferType</code> other than
<code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_USHORT</code>, or
<code>DataBuffer.TYPE_INT</code>.
@param inData an array of pixel values
@return the value of the green component of the specified pixel.
@throws ClassCastException if <code>inData</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>inData</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@throws UnsupportedOperationException if this
 <code>tranferType</code> is not supported by this
 <code>ColorModel</code>
"
      end

      operation 6635650 "getBlue"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the blue color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is
specified by an array of data elements of type transferType passed
in as an object reference.  The returned value is a non
pre-multiplied value.  For example, if the alpha is premultiplied,
this method divides it out before returning the value.  If the
alpha value is 0, the blue value will be 0.  If
<code>inData</code> is not a primitive array of type transferType,
a <code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>inData</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.
If this <code>transferType</code> is not supported, a
<code>UnsupportedOperationException</code> will be
thrown.  Since
<code>ColorModel</code> is an abstract class, any instance
must be an instance of a subclass.  Subclasses inherit the
implementation of this method and if they don't override it, this
method throws an exception if the subclass uses a
<code>transferType</code> other than
<code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_USHORT</code>, or
<code>DataBuffer.TYPE_INT</code>.
@param inData an array of pixel values
@return the value of the blue component of the specified pixel.
@throws ClassCastException if <code>inData</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>inData</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@throws UnsupportedOperationException if this
 <code>tranferType</code> is not supported by this
 <code>ColorModel</code>
"
      end

      operation 6635778 "getAlpha"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alpha component for the specified pixel, scaled
from 0 to 255.  The pixel value is specified by an array of data
elements of type transferType passed in as an object reference.
If inData is not a primitive array of type transferType, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>inData</code> is not large enough to hold a pixel value for
this <code>ColorModel</code>.
If this <code>transferType</code> is not supported, a
<code>UnsupportedOperationException</code> will be
thrown.  Since
<code>ColorModel</code> is an abstract class, any instance
must be an instance of a subclass.  Subclasses inherit the
implementation of this method and if they don't override it, this
method throws an exception if the subclass uses a
<code>transferType</code> other than
<code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_USHORT</code>, or
<code>DataBuffer.TYPE_INT</code>.
@param inData the specified pixel
@return the alpha component of the specified pixel, scaled from
0 to 255.
@throws ClassCastException if <code>inData</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>inData</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@throws UnsupportedOperationException if this
 <code>tranferType</code> is not supported by this
 <code>ColorModel</code>
"
      end

      operation 6635906 "getRGB"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color/alpha components for the specified pixel in the
default RGB color model format.  A color conversion is done if
necessary.  The pixel value is specified by an array of data
elements of type transferType passed in as an object reference.
If inData is not a primitive array of type transferType, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>inData</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.
The returned value will be in a non pre-multiplied format, i.e. if
the alpha is premultiplied, this method will divide it out of the
color components (if the alpha value is 0, the color values will be 0).
@param inData the specified pixel
@return the color and alpha components of the specified pixel.
@see ColorModel#getRGBdefault
"
      end

      operation 6636034 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "rgb" explicit_type "int"
	  param inout name "pixel" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<code>ColorModel</code>, given an integer pixel representation in
the default RGB color model.
This array can then be passed to the
{@link WritableRaster#setDataElements} method of
a {@link WritableRaster} object.  If the pixel variable is
<code>null</code>, a new array will be allocated.  If
<code>pixel</code> is not
<code>null</code>, it must be a primitive array of type
<code>transferType</code>; otherwise, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>pixel</code> is
not large enough to hold a pixel value for this
<code>ColorModel</code>. The pixel array is returned.
If this <code>transferType</code> is not supported, a
<code>UnsupportedOperationException</code> will be
thrown.  Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param rgb the integer pixel representation in the default RGB
color model
@param pixel the specified pixel
@return an array representation of the specified pixel in this
 <code>ColorModel</code>.
@throws ClassCastException if <code>pixel</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>pixel</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@throws UnsupportedOperationException if this
 method is not supported by this <code>ColorModel</code>
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6636162 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param in name "pixel" explicit_type "int"
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of unnormalized color/alpha components given a pixel
in this <code>ColorModel</code>.  The pixel value is specified as
an <code>int</code>.  An <code>IllegalArgumentException</code>
will be thrown if pixel values for this <code>ColorModel</code> are
not conveniently representable as a single <code>int</code> or if
color component values for this <code>ColorModel</code> are not
conveniently representable in the unnormalized form.
For example, this method can be used to retrieve the
components for a specific pixel value in a
<code>DirectColorModel</code>.  If the components array is
<code>null</code>, a new array will be allocated.  The
components array will be returned.  Color/alpha components are
stored in the components array starting at <code>offset</code>
(even if the array is allocated by this method).  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if  the
components array is not <code>null</code> and is not large
enough to hold all the color and alpha components (starting at offset).
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param pixel the specified pixel
@param components the array to receive the color and alpha
components of the specified pixel
@param offset the offset into the <code>components</code> array at
which to start storing the color and alpha components
@return an array containing the color and alpha components of the
specified pixel starting at the specified offset.
@throws UnsupportedOperationException if this
         method is not supported by this <code>ColorModel</code>
"
      end

      operation 6636290 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param inout name "pixel" type class_ref 129538 // Object
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of unnormalized color/alpha components given a pixel
in this <code>ColorModel</code>.  The pixel value is specified by
an array of data elements of type transferType passed in as an
object reference.  If <code>pixel</code> is not a primitive array
of type transferType, a <code>ClassCastException</code> is thrown.
An <code>IllegalArgumentException</code> will be thrown if color
component values for this <code>ColorModel</code> are not
conveniently representable in the unnormalized form.
An <code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>pixel</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.
This method can be used to retrieve the components for a specific
pixel value in any <code>ColorModel</code>.  If the components
array is <code>null</code>, a new array will be allocated.  The
components array will be returned.  Color/alpha components are
stored in the <code>components</code> array starting at
<code>offset</code> (even if the array is allocated by this
method).  An <code>ArrayIndexOutOfBoundsException</code>
is thrown if  the components array is not <code>null</code> and is
not large enough to hold all the color and alpha components
(starting at <code>offset</code>).
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param pixel the specified pixel
@param components an array that receives the color and alpha
components of the specified pixel
@param offset the index into the <code>components</code> array at
which to begin storing the color and alpha components of the
specified pixel
@return an array containing the color and alpha components of the
specified pixel starting at the specified offset.
@throws UnsupportedOperationException if this
         method is not supported by this <code>ColorModel</code>
"
      end

      operation 6636418 "getUnnormalizedComponents"
	public explicit_return_type "int"
	nparams 4
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all of the color/alpha components in unnormalized
form, given a normalized component array.  Unnormalized components
are unsigned integral values between 0 and 2<sup>n</sup> - 1, where
n is the number of bits for a particular component.  Normalized
components are float values between a per component minimum and
maximum specified by the <code>ColorSpace</code> object for this
<code>ColorModel</code>.  An <code>IllegalArgumentException</code>
will be thrown if color component values for this
<code>ColorModel</code> are not conveniently representable in the
unnormalized form.  If the
<code>components</code> array is <code>null</code>, a new array
will be allocated.  The <code>components</code> array will
be returned.  Color/alpha components are stored in the
<code>components</code> array starting at <code>offset</code> (even
if the array is allocated by this method). An
<code>ArrayIndexOutOfBoundsException</code> is thrown if the
<code>components</code> array is not <code>null</code> and is not
large enough to hold all the color and alpha
components (starting at <code>offset</code>).  An
<code>IllegalArgumentException</code> is thrown if the
<code>normComponents</code> array is not large enough to hold
all the color and alpha components starting at
<code>normOffset</code>.
@param normComponents an array containing normalized components
@param normOffset the offset into the <code>normComponents</code>
array at which to start retrieving normalized components
@param components an array that receives the components from
<code>normComponents</code>
@param offset the index into <code>components</code> at which to
begin storing normalized components from
<code>normComponents</code>
@return an array containing unnormalized color and alpha
components.
@throws IllegalArgumentException If the component values for this
<CODE>ColorModel</CODE> are not conveniently representable in the
unnormalized form.
@throws IllegalArgumentException if the length of
         <code>normComponents</code> minus <code>normOffset</code>
         is less than <code>numComponents</code>
@throws UnsupportedOperationException if the
         constructor of this <code>ColorModel</code> called the
         <code>super(bits)</code> constructor, but did not
         override this method.  See the constructor,
         {@link #ColorModel(int)}.
"
      end

      operation 6636546 "getNormalizedComponents"
	public explicit_return_type "float"
	nparams 4
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all of the color/alpha components in normalized
form, given an unnormalized component array.  Unnormalized components
are unsigned integral values between 0 and 2<sup>n</sup> - 1, where
n is the number of bits for a particular component.  Normalized
components are float values between a per component minimum and
maximum specified by the <code>ColorSpace</code> object for this
<code>ColorModel</code>.  An <code>IllegalArgumentException</code>
will be thrown if color component values for this
<code>ColorModel</code> are not conveniently representable in the
unnormalized form.  If the
<code>normComponents</code> array is <code>null</code>, a new array
will be allocated.  The <code>normComponents</code> array
will be returned.  Color/alpha components are stored in the
<code>normComponents</code> array starting at
<code>normOffset</code> (even if the array is allocated by this
method).  An <code>ArrayIndexOutOfBoundsException</code> is thrown
if the <code>normComponents</code> array is not <code>null</code>
and is not large enough to hold all the color and alpha components
(starting at <code>normOffset</code>).  An
<code>IllegalArgumentException</code> is thrown if the
<code>components</code> array is not large enough to hold all the
color and alpha components starting at <code>offset</code>.
<p>
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  The default implementation
of this method in this abstract class assumes that component values
for this class are conveniently representable in the unnormalized
form.  Therefore, subclasses which may
have instances which do not support the unnormalized form must
override this method.
@param components an array containing unnormalized components
@param offset the offset into the <code>components</code> array at
which to start retrieving unnormalized components
@param normComponents an array that receives the normalized components
@param normOffset the index into <code>normComponents</code> at
which to begin storing normalized components
@return an array containing normalized color and alpha
components.
@throws IllegalArgumentException If the component values for this
<CODE>ColorModel</CODE> are not conveniently representable in the
unnormalized form.
@throws UnsupportedOperationException if the
         constructor of this <code>ColorModel</code> called the
         <code>super(bits)</code> constructor, but did not
         override this method.  See the constructor,
         {@link #ColorModel(int)}.
@throws UnsupportedOperationException if this method is unable
         to determine the number of bits per component
"
      end

      operation 6636674 "getDataElement"
	public explicit_return_type "int"
	nparams 2
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pixel value represented as an <code>int</code> in this
<code>ColorModel</code>, given an array of unnormalized color/alpha
components.  This method will throw an
<code>IllegalArgumentException</code> if component values for this
<code>ColorModel</code> are not conveniently representable as a
single <code>int</code> or if color component values for this
<code>ColorModel</code> are not conveniently representable in the
unnormalized form.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if  the
<code>components</code> array is not large enough to hold all the
color and alpha components (starting at <code>offset</code>).
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param components an array of unnormalized color and alpha
components
@param offset the index into <code>components</code> at which to
begin retrieving the color and alpha components
@return an <code>int</code> pixel value in this
<code>ColorModel</code> corresponding to the specified components.
@throws IllegalArgumentException if
 pixel values for this <code>ColorModel</code> are not
 conveniently representable as a single <code>int</code>
@throws IllegalArgumentException if
 component values for this <code>ColorModel</code> are not
 conveniently representable in the unnormalized form
@throws ArrayIndexOutOfBoundsException if
 the <code>components</code> array is not large enough to
 hold all of the color and alpha components starting at
 <code>offset</code>
@throws UnsupportedOperationException if this
 method is not supported by this <code>ColorModel</code>
"
      end

      operation 6636802 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<code>ColorModel</code>, given an array of unnormalized color/alpha
components.  This array can then be passed to the
<code>setDataElements</code> method of a <code>WritableRaster</code>
object.  This method will throw an <code>IllegalArgumentException</code>
if color component values for this <code>ColorModel</code> are not
conveniently representable in the unnormalized form.
An <code>ArrayIndexOutOfBoundsException</code> is thrown
if the <code>components</code> array is not large enough to hold
all the color and alpha components (starting at
<code>offset</code>).  If the <code>obj</code> variable is
<code>null</code>, a new array will be allocated.  If
<code>obj</code> is not <code>null</code>, it must be a primitive
array of type transferType; otherwise, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>obj</code> is not large enough to hold a pixel value for this
<code>ColorModel</code>.
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param components an array of unnormalized color and alpha
components
@param offset the index into <code>components</code> at which to
begin retrieving color and alpha components
@param obj the <code>Object</code> representing an array of color
and alpha components
@return an <code>Object</code> representing an array of color and
alpha components.
@throws ClassCastException if <code>obj</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>obj</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code> or the <code>components</code>
 array is not large enough to hold all of the color and alpha
 components starting at <code>offset</code>
@throws IllegalArgumentException if
 component values for this <code>ColorModel</code> are not
 conveniently representable in the unnormalized form
@throws UnsupportedOperationException if this
 method is not supported by this <code>ColorModel</code>
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6636930 "getDataElement"
	public explicit_return_type "int"
	nparams 2
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pixel value represented as an <code>int</code> in this
<code>ColorModel</code>, given an array of normalized color/alpha
components.  This method will throw an
<code>IllegalArgumentException</code> if pixel values for this
<code>ColorModel</code> are not conveniently representable as a
single <code>int</code>.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if  the
<code>normComponents</code> array is not large enough to hold all the
color and alpha components (starting at <code>normOffset</code>).
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  The default implementation
of this method in this abstract class first converts from the
normalized form to the unnormalized form and then calls
<code>getDataElement(int[], int)</code>.  Subclasses which may
have instances which do not support the unnormalized form must
override this method.
@param normComponents an array of normalized color and alpha
components
@param normOffset the index into <code>normComponents</code> at which to
begin retrieving the color and alpha components
@return an <code>int</code> pixel value in this
<code>ColorModel</code> corresponding to the specified components.
@throws IllegalArgumentException if
 pixel values for this <code>ColorModel</code> are not
 conveniently representable as a single <code>int</code>
@throws ArrayIndexOutOfBoundsException if
 the <code>normComponents</code> array is not large enough to
 hold all of the color and alpha components starting at
 <code>normOffset</code>
@since 1.4
"
      end

      operation 6637058 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<code>ColorModel</code>, given an array of normalized color/alpha
components.  This array can then be passed to the
<code>setDataElements</code> method of a <code>WritableRaster</code>
object.  An <code>ArrayIndexOutOfBoundsException</code> is thrown
if the <code>normComponents</code> array is not large enough to hold
all the color and alpha components (starting at
<code>normOffset</code>).  If the <code>obj</code> variable is
<code>null</code>, a new array will be allocated.  If
<code>obj</code> is not <code>null</code>, it must be a primitive
array of type transferType; otherwise, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>obj</code> is not large enough to hold a pixel value for this
<code>ColorModel</code>.
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  The default implementation
of this method in this abstract class first converts from the
normalized form to the unnormalized form and then calls
<code>getDataElement(int[], int, Object)</code>.  Subclasses which may
have instances which do not support the unnormalized form must
override this method.
@param normComponents an array of normalized color and alpha
components
@param normOffset the index into <code>normComponents</code> at which to
begin retrieving color and alpha components
@param obj a primitive data array to hold the returned pixel
@return an <code>Object</code> which is a primitive data array
representation of a pixel
@throws ClassCastException if <code>obj</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>obj</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code> or the <code>normComponents</code>
 array is not large enough to hold all of the color and alpha
 components starting at <code>normOffset</code>
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
@since 1.4
"
      end

      operation 6637186 "getNormalizedComponents"
	public explicit_return_type "float"
	nparams 3
	  param inout name "pixel" type class_ref 129538 // Object
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all of the color/alpha components in normalized
form, given a pixel in this <code>ColorModel</code>.  The pixel
value is specified by an array of data elements of type transferType
passed in as an object reference.  If pixel is not a primitive array
of type transferType, a <code>ClassCastException</code> is thrown.
An <code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>pixel</code> is not large enough to hold a pixel value for this
<code>ColorModel</code>.
Normalized components are float values between a per component minimum
and maximum specified by the <code>ColorSpace</code> object for this
<code>ColorModel</code>.  If the
<code>normComponents</code> array is <code>null</code>, a new array
will be allocated.  The <code>normComponents</code> array
will be returned.  Color/alpha components are stored in the
<code>normComponents</code> array starting at
<code>normOffset</code> (even if the array is allocated by this
method).  An <code>ArrayIndexOutOfBoundsException</code> is thrown
if the <code>normComponents</code> array is not <code>null</code>
and is not large enough to hold all the color and alpha components
(starting at <code>normOffset</code>).
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  The default implementation
of this method in this abstract class first retrieves color and alpha
components in the unnormalized form using
<code>getComponents(Object, int[], int)</code> and then calls
<code>getNormalizedComponents(int[], int, float[], int)</code>.
Subclasses which may
have instances which do not support the unnormalized form must
override this method.
@param pixel the specified pixel
@param normComponents an array to receive the normalized components
@param normOffset the offset into the <code>normComponents</code>
array at which to start storing normalized components
@return an array containing normalized color and alpha
components.
@throws ClassCastException if <code>pixel</code> is not a primitive
         array of type transferType
@throws ArrayIndexOutOfBoundsException if
         <code>normComponents</code> is not large enough to hold all
         color and alpha components starting at <code>normOffset</code>
@throws ArrayIndexOutOfBoundsException if
         <code>pixel</code> is not large enough to hold a pixel
         value for this <code>ColorModel</code>.
@throws UnsupportedOperationException if the
         constructor of this <code>ColorModel</code> called the
         <code>super(bits)</code> constructor, but did not
         override this method.  See the constructor,
         {@link #ColorModel(int)}.
@throws UnsupportedOperationException if this method is unable
         to determine the number of bits per component
@since 1.4
"
      end

      operation 6637314 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified <code>Object</code> is an instance of
<code>ColorModel</code> and if it equals this
<code>ColorModel</code>.
@param obj the <code>Object</code> to test for equality
@return <code>true</code> if the specified <code>Object</code>
is an instance of <code>ColorModel</code> and equals this
<code>ColorModel</code>; <code>false</code> otherwise.
"
      end

      operation 6637442 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code for this ColorModel.

@return    a hash code for this ColorModel.
"
      end

      operation 6637570 "getColorSpace"
	public return_type class_ref 322178 // ColorSpace
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ColorSpace</code> associated with this
<code>ColorModel</code>.
@return the <code>ColorSpace</code> of this
<code>ColorModel</code>.
"
      end

      operation 6637698 "coerceData"
	public return_type class_ref 312066 // ColorModel
	nparams 2
	  param inout name "raster" type class_ref 322690 // WritableRaster
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces the raster data to match the state specified in the
<code>isAlphaPremultiplied</code> variable, assuming the data is
currently correctly described by this <code>ColorModel</code>.  It
may multiply or divide the color raster data by alpha, or do
nothing if the data is in the correct state.  If the data needs to
be coerced, this method will also return an instance of this
<code>ColorModel</code> with the <code>isAlphaPremultiplied</code>
flag set appropriately.  This method will throw a
<code>UnsupportedOperationException</code> if it is not supported
by this <code>ColorModel</code>.
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param raster the <code>WritableRaster</code> data
@param isAlphaPremultiplied <code>true</code> if the alpha is
premultiplied; <code>false</code> otherwise
@return a <code>ColorModel</code> object that represents the
coerced data.
"
      end

      operation 6637826 "isCompatibleRaster"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "raster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if <code>raster</code> is compatible
with this <code>ColorModel</code> and <code>false</code> if it is
not.
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param raster the {@link Raster} object to test for compatibility
@return <code>true</code> if <code>raster</code> is compatible
with this <code>ColorModel</code>.
@throws UnsupportedOperationException if this
        method has not been implemented for this
        <code>ColorModel</code>
"
      end

      operation 6637954 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>WritableRaster</code> with the specified width and
height that has a data layout (<code>SampleModel</code>) compatible
with this <code>ColorModel</code>.
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param w the width to apply to the new <code>WritableRaster</code>
@param h the height to apply to the new <code>WritableRaster</code>
@return a <code>WritableRaster</code> object with the specified
width and height.
@throws UnsupportedOperationException if this
         method is not supported by this <code>ColorModel</code>
@see WritableRaster
@see SampleModel
"
      end

      operation 6638082 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SampleModel</code> with the specified width and
height that has a data layout compatible with this
<code>ColorModel</code>.
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param w the width to apply to the new <code>SampleModel</code>
@param h the height to apply to the new <code>SampleModel</code>
@return a <code>SampleModel</code> object with the specified
width and height.
@throws UnsupportedOperationException if this
         method is not supported by this <code>ColorModel</code>
@see SampleModel
"
      end

      operation 6638210 "isCompatibleSampleModel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sm" type class_ref 314370 // SampleModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks if the <code>SampleModel</code> is compatible with this
<code>ColorModel</code>.
Since <code>ColorModel</code> is an abstract class,
any instance is an instance of a subclass.  Subclasses must
override this method since the implementation in this abstract
class throws an <code>UnsupportedOperationException</code>.
@param sm the specified <code>SampleModel</code>
@return <code>true</code> if the specified <code>SampleModel</code>
is compatible with this <code>ColorModel</code>; <code>false</code>
otherwise.
@throws UnsupportedOperationException if this
         method is not supported by this <code>ColorModel</code>
@see SampleModel
"
      end

      operation 6638338 "finalize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disposes of system resources associated with this
<code>ColorModel</code> once this <code>ColorModel</code> is no
longer referenced.
"
      end

      operation 6638466 "getAlphaRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "raster" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Raster</code> representing the alpha channel of an
image, extracted from the input <code>Raster</code>, provided that
pixel values of this <code>ColorModel</code> represent color and
alpha information as separate spatial bands (e.g.
{@link ComponentColorModel} and <code>DirectColorModel</code>).
This method assumes that <code>Raster</code> objects associated
with such a <code>ColorModel</code> store the alpha band, if
present, as the last band of image data.  Returns <code>null</code>
if there is no separate spatial alpha channel associated with this
<code>ColorModel</code>.  If this is an
<code>IndexColorModel</code> which has alpha in the lookup table,
this method will return <code>null</code> since
there is no spatially discrete alpha channel.
This method will create a new <code>Raster</code> (but will share
the data array).
Since <code>ColorModel</code> is an abstract class, any instance
is an instance of a subclass.  Subclasses must override this
method to get any behavior other than returning <code>null</code>
because the implementation in this abstract class returns
<code>null</code>.
@param raster the specified <code>Raster</code>
@return a <code>Raster</code> representing the alpha channel of
an image, obtained from the specified <code>Raster</code>.
"
      end

      operation 6638594 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>String</code> representation of the contents of
this <code>ColorModel</code>object.
@return a <code>String</code> representing the contents of this
<code>ColorModel</code> object.
"
      end

      operation 6638722 "getDefaultTransferType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "pixel_bits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1606018 "l8Tos8"
	class_attribute package explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 8-bit linear to 8-bit non-linear sRGB LUT"
      end

      attribute 1606146 "s8Tol8"
	class_attribute package explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 8-bit non-linear sRGB to 8-bit linear LUT"
      end

      attribute 1606274 "l16Tos8"
	class_attribute package explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 16-bit linear to 8-bit non-linear sRGB LUT"
      end

      attribute 1606402 "s8Tol16"
	class_attribute package explicit_type "short"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 8-bit non-linear sRGB to 16-bit linear LUT"
      end

      classrelation 3070594 // g8Tos8Map (<unidirectional association>)
	relation 3070594 --->
	  a role_name "g8Tos8Map" init_value " null" class_relation package
	    comment " Maps to hold LUTs for grayscale conversions
 8-bit gray values to 8-bit sRGB values"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ICC_ColorSpace, byte[]> ${name}${value};
"
	    classrelation_ref 3070594 // g8Tos8Map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3070722 // lg16Toog8Map (<unidirectional association>)
	relation 3070722 --->
	  a role_name "lg16Toog8Map" init_value " null" class_relation package
	    comment " 16-bit linear to 8-bit \"other\" gray"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ICC_ColorSpace, byte[]> ${name}${value};
"
	    classrelation_ref 3070722 // lg16Toog8Map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3070850 // g16Tos8Map (<unidirectional association>)
	relation 3070850 --->
	  a role_name "g16Tos8Map" init_value " null" class_relation package
	    comment " 16-bit gray values to 8-bit sRGB values"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ICC_ColorSpace, byte[]> ${name}${value};
"
	    classrelation_ref 3070850 // g16Tos8Map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3070978 // lg16Toog16Map (<unidirectional association>)
	relation 3070978 --->
	  a role_name "lg16Toog16Map" init_value " null" class_relation package
	    comment " 16-bit linear to 16-bit \"other\" gray"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ICC_ColorSpace, short[]> ${name}${value};
"
	    classrelation_ref 3070978 // lg16Toog16Map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 6638850 "isLinearRGBspace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 322178 // ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6638978 "isLinearGRAYspace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 322178 // ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6639106 "getLinearRGB8TosRGB8LUT"
	class_operation package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6639234 "getsRGB8ToLinearRGB8LUT"
	class_operation package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6639362 "getLinearRGB16TosRGB8LUT"
	class_operation package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6639490 "getsRGB8ToLinearRGB16LUT"
	class_operation package explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6639618 "getGray8TosRGB8LUT"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param inout name "grayCS" type class_ref 328706 // ICC_ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a byte LUT that converts 8-bit gray values in the grayCS
ColorSpace to the appropriate 8-bit sRGB value.  I.e., if lut
is the byte array returned by this method and sval = lut[gval],
then the sRGB triple (sval,sval,sval) is the best match to gval.
Cache references to any computed LUT in a Map.
"
      end

      operation 6639746 "getLinearGray16ToOtherGray8LUT"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param inout name "grayCS" type class_ref 328706 // ICC_ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a byte LUT that converts 16-bit gray values in the CS_GRAY
linear gray ColorSpace to the appropriate 8-bit value in the
grayCS ColorSpace.  Cache references to any computed LUT in a Map.
"
      end

      operation 6639874 "getGray16TosRGB8LUT"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param inout name "grayCS" type class_ref 328706 // ICC_ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a byte LUT that converts 16-bit gray values in the grayCS
ColorSpace to the appropriate 8-bit sRGB value.  I.e., if lut
is the byte array returned by this method and sval = lut[gval],
then the sRGB triple (sval,sval,sval) is the best match to gval.
Cache references to any computed LUT in a Map.
"
      end

      operation 6640002 "getLinearGray16ToOtherGray16LUT"
	class_operation package explicit_return_type "short"
	nparams 1
	  param inout name "grayCS" type class_ref 328706 // ICC_ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a short LUT that converts 16-bit gray values in the CS_GRAY
linear gray ColorSpace to the appropriate 16-bit value in the
grayCS ColorSpace.  Cache references to any computed LUT in a Map.
"
      end
    end

    class 313986 "RenderedImage"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "RenderedImage is a common interface for objects which contain
or can produce image data in the form of Rasters.  The image
data may be stored/produced as a single tile or a regular array
of tiles.
"
      operation 6617474 "getSources"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RenderedImage> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a vector of RenderedImages that are the immediate sources of
image data for this RenderedImage.  This method returns null if
the RenderedImage object has no information about its immediate
sources.  It returns an empty Vector if the RenderedImage object has
no immediate sources.
@return a Vector of <code>RenderedImage</code> objects.
"
      end

      operation 6617602 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a property from the property set of this image.  The set of
properties and whether it is immutable is determined by the
implementing class.  This method returns
java.awt.Image.UndefinedProperty if the specified property is
not defined for this RenderedImage.
@param name the name of the property
@return the property indicated by the specified name.
@see java.awt.Image#UndefinedProperty
"
      end

      operation 6617730 "getPropertyNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of names recognized by
{@link #getProperty(String) getProperty(String)}
or <code>null</code>, if no property names are recognized.
@return a <code>String</code> array containing all of the
property names that <code>getProperty(String)</code> recognizes;
or <code>null</code> if no property names are recognized.
"
      end

      operation 6617858 "getColorModel"
	public return_type class_ref 312066 // ColorModel
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ColorModel associated with this image.  All Rasters
returned from this image will have this as their ColorModel.  This
can return null.
@return the <code>ColorModel</code> of this image.
"
      end

      operation 6617986 "getSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the SampleModel associated with this image.  All Rasters
returned from this image will have this as their SampleModel.
@return the <code>SampleModel</code> of this image.
"
      end

      operation 6618114 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of the RenderedImage.
@return the width of this <code>RenderedImage</code>.
"
      end

      operation 6618242 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of the RenderedImage.
@return the height of this <code>RenderedImage</code>.
"
      end

      operation 6618370 "getMinX"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum X coordinate (inclusive) of the RenderedImage.
@return the X coordinate of this <code>RenderedImage</code>.
"
      end

      operation 6618498 "getMinY"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum Y coordinate (inclusive) of the RenderedImage.
@return the Y coordinate of this <code>RenderedImage</code>.
"
      end

      operation 6618626 "getNumXTiles"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of tiles in the X direction.
@return the number of tiles in the X direction.
"
      end

      operation 6618754 "getNumYTiles"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of tiles in the Y direction.
@return the number of tiles in the Y direction.
"
      end

      operation 6618882 "getMinTileX"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the minimum tile index in the X direction.
 @return the minimum tile index in the X direction.
"
      end

      operation 6619010 "getMinTileY"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the minimum tile index in the Y direction.
 @return the minimum tile index in the X direction.
"
      end

      operation 6619138 "getTileWidth"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the tile width in pixels.  All tiles must have the same
 width.
 @return the tile width in pixels.
"
      end

      operation 6619266 "getTileHeight"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the tile height in pixels.  All tiles must have the same
 height.
 @return the tile height in pixels.
"
      end

      operation 6619394 "getTileGridXOffset"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X offset of the tile grid relative to the origin,
i.e., the X coordinate of the upper-left pixel of tile (0, 0).
(Note that tile (0, 0) may not actually exist.)
@return the X offset of the tile grid relative to the origin.
"
      end

      operation 6619522 "getTileGridYOffset"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y offset of the tile grid relative to the origin,
i.e., the Y coordinate of the upper-left pixel of tile (0, 0).
(Note that tile (0, 0) may not actually exist.)
@return the Y offset of the tile grid relative to the origin.
"
      end

      operation 6619650 "getTile"
	public return_type class_ref 311682 // Raster
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns tile (tileX, tileY).  Note that tileX and tileY are indices
into the tile array, not pixel locations.  The Raster that is returned
is live and will be updated if the image is changed.
@param tileX the X index of the requested tile in the tile array
@param tileY the Y index of the requested tile in the tile array
@return the tile given the specified indices.
"
      end

      operation 6619778 "getData"
	public return_type class_ref 311682 // Raster
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the image as one large tile (for tile based
images this will require fetching the whole image
and copying the image data over).  The Raster returned is
a copy of the image data and will not be updated if the image
is changed.
@return the image as one large tile.
"
      end

      operation 6619906 "getData"
	public return_type class_ref 311682 // Raster
	nparams 1
	  param inout name "rect" type class_ref 314114 // Rectangle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes and returns an arbitrary region of the RenderedImage.
The Raster returned is a copy of the image data and will not
be updated if the image is changed.
@param rect the region of the RenderedImage to be returned.
@return the region of the <code>RenderedImage</code>
indicated by the specified <code>Rectangle</code>.
"
      end

      operation 6620034 "copyData"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "raster" type class_ref 322690 // WritableRaster
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes an arbitrary rectangular region of the RenderedImage
and copies it into a caller-supplied WritableRaster.  The region
to be computed is determined from the bounds of the supplied
WritableRaster.  The supplied WritableRaster must have a
SampleModel that is compatible with this image.  If raster is null,
an appropriate WritableRaster is created.
@param raster a WritableRaster to hold the returned portion of the
              image, or null.
@return a reference to the supplied or created WritableRaster.
"
      end
    end

    class 314370 "SampleModel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This abstract class defines an interface for extracting samples of pixels
 in an image.  All image data is expressed as a collection of pixels.
 Each pixel consists of a number of samples. A sample is a datum
 for one band of an image and a band consists of all samples of a
 particular type in an image.  For example, a pixel might contain
 three samples representing its red, green and blue components.
 There are three bands in the image containing this pixel.  One band
 consists of all the red samples from all pixels in the
 image.  The second band consists of all the green samples and
 the remaining band consists of all of the blue samples.  The pixel
 can be stored in various formats.  For example, all samples from
 a particular band can be stored contiguously or all samples from a
 single pixel can be stored contiguously.
 <p>
 Subclasses of SampleModel specify the types of samples they can
 represent (e.g. unsigned 8-bit byte, signed 16-bit short, etc.)
 and may specify how the samples are organized in memory.
 In the Java 2D(tm) API, built-in image processing operators may
 not operate on all possible sample types, but generally will work
 for unsigned integral samples of 16 bits or less.  Some operators
 support a wider variety of sample types.
 <p>
 A collection of pixels is represented as a Raster, which consists of
 a DataBuffer and a SampleModel.  The SampleModel allows access to
 samples in the DataBuffer and may provide low-level information that
 a programmer can use to directly manipulate samples and pixels in the
 DataBuffer.
 <p>
 This class is generally a fall back method for dealing with
 images.  More efficient code will cast the SampleModel to the
 appropriate subclass and extract the information needed to directly
 manipulate pixels in the DataBuffer.

 @see java.awt.image.DataBuffer
 @see java.awt.image.Raster
 @see java.awt.image.ComponentSampleModel
 @see java.awt.image.PixelInterleavedSampleModel
 @see java.awt.image.BandedSampleModel
 @see java.awt.image.MultiPixelPackedSampleModel
 @see java.awt.image.SinglePixelPackedSampleModel
"
      attribute 1597442 "width"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Width in pixels of the region of image data that this SampleModel
 describes.

"
      end

      attribute 1597570 "height"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Height in pixels of the region of image data that this SampleModel
 describes.

"
      end

      attribute 1597698 "numBands"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of bands of the image data that this SampleModel describes. 
"
      end

      attribute 1597826 "dataType"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Data type of the DataBuffer storing the pixel data.
 @see java.awt.image.DataBuffer

"
      end

      operation 6605058 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 153474 "initialization"
	
	cpp "" ""
	java "  static {
        ColorModel.loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6605186 "SampleModel"
	public explicit_return_type ""
	nparams 4
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "numBands" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SampleModel with the specified parameters.
@param dataType  The data type of the DataBuffer storing the pixel data.
@param w         The width (in pixels) of the region of image data.
@param h         The height (in pixels) of the region of image data.
@param numBands  The number of bands of the image data.
@throws IllegalArgumentException if <code>w</code> or <code>h</code>
        is not greater than 0
@throws IllegalArgumentException if the product of <code>w</code>
        and <code>h</code> is greater than
        <code>Integer.MAX_VALUE</code>
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6605314 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the width in pixels.
 @return the width in pixels of the region of image data
         that this <code>SampleModel</code> describes.
"
      end

      operation 6605442 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the height in pixels.
 @return the height in pixels of the region of image data
         that this <code>SampleModel</code> describes.
"
      end

      operation 6605570 "getNumBands"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the total number of bands of image data.
 @return the number of bands of image data that this
         <code>SampleModel</code> describes.
"
      end

      operation 6605698 "getNumDataElements"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of data elements needed to transfer a pixel
 via the getDataElements and setDataElements methods.  When pixels
 are transferred via these methods, they may be transferred in a
 packed or unpacked format, depending on the implementation of the
 SampleModel.  Using these methods, pixels are transferred as an
 array of getNumDataElements() elements of a primitive type given
 by getTransferType().  The TransferType may or may not be the same
 as the storage DataType.
 @return the number of data elements.
 @see #getDataElements(int, int, Object, DataBuffer)
 @see #getDataElements(int, int, int, int, Object, DataBuffer)
 @see #setDataElements(int, int, Object, DataBuffer)
 @see #setDataElements(int, int, int, int, Object, DataBuffer)
 @see #getTransferType
"
      end

      operation 6605826 "getDataType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the data type of the DataBuffer storing the pixel data.
 @return the data type.
"
      end

      operation 6605954 "getTransferType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the TransferType used to transfer pixels via the
 getDataElements and setDataElements methods.  When pixels
 are transferred via these methods, they may be transferred in a
 packed or unpacked format, depending on the implementation of the
 SampleModel.  Using these methods, pixels are transferred as an
 array of getNumDataElements() elements of a primitive type given
 by getTransferType().  The TransferType may or may not be the same
 as the storage DataType.  The TransferType will be one of the types
 defined in DataBuffer.
 @return the transfer type.
 @see #getDataElements(int, int, Object, DataBuffer)
 @see #getDataElements(int, int, int, int, Object, DataBuffer)
 @see #setDataElements(int, int, Object, DataBuffer)
 @see #setDataElements(int, int, int, int, Object, DataBuffer)
 @see #getNumDataElements
 @see java.awt.image.DataBuffer
"
      end

      operation 6606082 "getPixel"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified pixel in an int array,
one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param iArray    If non-null, returns the samples in this array
@param data      The DataBuffer containing the image data
@return the samples for the specified pixel.
@see #setPixel(int, int, int[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if iArray is too small to hold the output.
"
      end

      operation 6606210 "getDataElements"
	abstract public return_type class_ref 129538 // Object
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns data for a single pixel in a primitive array of type
TransferType.  For image data supported by the Java 2D API, this
will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
thus increasing efficiency for data transfers. Generally, obj
should be passed in as null, so that the Object will be created
automatically and will be of the right primitive data type.
<p>
The following code illustrates transferring data for one pixel from
DataBuffer <code>db1</code>, whose storage layout is described by
SampleModel <code>sm1</code>, to DataBuffer <code>db2</code>, whose
storage layout is described by SampleModel <code>sm2</code>.
The transfer will generally be more efficient than using
getPixel/setPixel.
<pre>
      SampleModel sm1, sm2;
      DataBuffer db1, db2;
      sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1), db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
If obj is non-null, it should be a primitive array of type TransferType.
Otherwise, a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is non-null and is not large enough to hold
the pixel data.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param obj       If non-null, a primitive array in which to return
                 the pixel data.
@param data      The DataBuffer containing the image data.
@return the data elements for the specified pixel.
@see #getNumDataElements
@see #getTransferType
@see java.awt.image.DataBuffer
@see #setDataElements(int, int, Object, DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if obj is too small to hold the output.
"
      end

      operation 6606338 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pixel data for the specified rectangle of pixels in a
primitive array of type TransferType.
For image data supported by the Java 2D API, this
will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
thus increasing efficiency for data transfers. Generally, obj
should be passed in as null, so that the Object will be created
automatically and will be of the right primitive data type.
<p>
The following code illustrates transferring data for a rectangular
region of pixels from
DataBuffer <code>db1</code>, whose storage layout is described by
SampleModel <code>sm1</code>, to DataBuffer <code>db2</code>, whose
storage layout is described by SampleModel <code>sm2</code>.
The transfer will generally be more efficient than using
getPixels/setPixels.
<pre>
      SampleModel sm1, sm2;
      DataBuffer db1, db2;
      sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w,
                          h, null, db1), db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
If obj is non-null, it should be a primitive array of type TransferType.
Otherwise, a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is non-null and is not large enough to hold
the pixel data.
@param x         The minimum X coordinate of the pixel rectangle.
@param y         The minimum Y coordinate of the pixel rectangle.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param obj       If non-null, a primitive array in which to return
                 the pixel data.
@param data      The DataBuffer containing the image data.
@return the data elements for the specified region of pixels.
@see #getNumDataElements
@see #getTransferType
@see #setDataElements(int, int, int, int, Object, DataBuffer)
@see java.awt.image.DataBuffer

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if obj is too small to hold the output.
"
      end

      operation 6606466 "setDataElements"
	abstract public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a single pixel in the specified DataBuffer from a
primitive array of type TransferType.  For image data supported by
the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
may be in a packed format, thus increasing efficiency for data
transfers.
<p>
The following code illustrates transferring data for one pixel from
DataBuffer <code>db1</code>, whose storage layout is described by
SampleModel <code>sm1</code>, to DataBuffer <code>db2</code>, whose
storage layout is described by SampleModel <code>sm2</code>.
The transfer will generally be more efficient than using
getPixel/setPixel.
<pre>
      SampleModel sm1, sm2;
      DataBuffer db1, db2;
      sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1),
                          db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
obj must be a primitive array of type TransferType.  Otherwise,
a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is not large enough to hold the pixel data.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param obj       A primitive array containing pixel data.
@param data      The DataBuffer containing the image data.
@see #getNumDataElements
@see #getTransferType
@see #getDataElements(int, int, Object, DataBuffer)
@see java.awt.image.DataBuffer

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if obj is too small to hold the input.
"
      end

      operation 6606594 "setDataElements"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a rectangle of pixels in the specified DataBuffer
from a primitive array of type TransferType.  For image data supported
by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
may be in a packed format, thus increasing efficiency for data
transfers.
<p>
The following code illustrates transferring data for a rectangular
region of pixels from
DataBuffer <code>db1</code>, whose storage layout is described by
SampleModel <code>sm1</code>, to DataBuffer <code>db2</code>, whose
storage layout is described by SampleModel <code>sm2</code>.
The transfer will generally be more efficient than using
getPixels/setPixels.
<pre>
      SampleModel sm1, sm2;
      DataBuffer db1, db2;
      sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w, h,
                          null, db1), db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
obj must be a primitive array of type TransferType.  Otherwise,
a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is not large enough to hold the pixel data.
@param x         The minimum X coordinate of the pixel rectangle.
@param y         The minimum Y coordinate of the pixel rectangle.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param obj       A primitive array containing pixel data.
@param data      The DataBuffer containing the image data.
@see #getNumDataElements
@see #getTransferType
@see #getDataElements(int, int, int, int, Object, DataBuffer)
@see java.awt.image.DataBuffer

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if obj is too small to hold the input.
"
      end

      operation 6606722 "getPixel"
	public explicit_return_type "float"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for the specified pixel in an array of float.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param fArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified pixel.
@see #setPixel(int, int, float[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if fArray is too small to hold the output.
"
      end

      operation 6606850 "getPixel"
	public explicit_return_type "double"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for the specified pixel in an array of double.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param dArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified pixel.
@see #setPixel(int, int, double[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if dArray is too small to hold the output.
"
      end

      operation 6606978 "getPixels"
	public explicit_return_type "int"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for a rectangle of pixels in an
int array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param iArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified region of pixels.
@see #setPixels(int, int, int, int, int[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if iArray is too small to hold the output.
"
      end

      operation 6607106 "getPixels"
	public explicit_return_type "float"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for a rectangle of pixels in a float
array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param fArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified region of pixels.
@see #setPixels(int, int, int, int, float[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if fArray is too small to hold the output.
"
      end

      operation 6607234 "getPixels"
	public explicit_return_type "double"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for a rectangle of pixels in a double
array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param dArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified region of pixels.
@see #setPixels(int, int, int, int, double[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if dArray is too small to hold the output.
"
      end

      operation 6607362 "getSample"
	abstract public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band for the pixel located
at (x,y) as an int.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to return.
@param data      The DataBuffer containing the image data.
@return the sample in a specified band for the specified pixel.
@see #setSample(int, int, int, int, DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6607490 "getSampleFloat"
	public explicit_return_type "float"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for the pixel located at (x,y) as a float.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to return.
@param data      The DataBuffer containing the image data.
@return the sample in a specified band for the specified pixel.

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6607618 "getSampleDouble"
	public explicit_return_type "double"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for a pixel located at (x,y) as a double.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to return.
@param data      The DataBuffer containing the image data.
@return the sample in a specified band for the specified pixel.

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6607746 "getSamples"
	public explicit_return_type "int"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified band for the specified rectangle
of pixels in an int array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to return.
@param iArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified band for the specified region
        of pixels.
@see #setSamples(int, int, int, int, int, int[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if iArray is too small to
hold the output.
"
      end

      operation 6607874 "getSamples"
	public explicit_return_type "float"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified band for the specified rectangle
of pixels in a float array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to return.
@param fArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified band for the specified region
        of pixels.
@see #setSamples(int, int, int, int, int, float[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if fArray is too small to
hold the output.
"
      end

      operation 6608002 "getSamples"
	public explicit_return_type "double"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified band for a specified rectangle
of pixels in a double array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to return.
@param dArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified band for the specified region
        of pixels.
@see #setSamples(int, int, int, int, int, double[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if dArray is too small to
hold the output.
"
      end

      operation 6608130 "setPixel"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in  the DataBuffer using an int array of samples for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param iArray    The input samples in an int array.
@param data      The DataBuffer containing the image data.
@see #getPixel(int, int, int[], DataBuffer)

@throws NullPointerException if iArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if iArray is too small to hold the input.
"
      end

      operation 6608258 "setPixel"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the DataBuffer using a float array of samples for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param fArray    The input samples in a float array.
@param data      The DataBuffer containing the image data.
@see #getPixel(int, int, float[], DataBuffer)

@throws NullPointerException if fArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if fArray is too small to hold the input.
"
      end

      operation 6608386 "setPixel"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the DataBuffer using a double array of samples
for input.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param dArray    The input samples in a double array.
@param data      The DataBuffer containing the image data.
@see #getPixel(int, int, double[], DataBuffer)

@throws NullPointerException if dArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if fArray is too small to hold the input.
"
      end

      operation 6608514 "setPixels"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from an int array containing
one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param iArray    The input samples in an int array.
@param data      The DataBuffer containing the image data.
@see #getPixels(int, int, int, int, int[], DataBuffer)

@throws NullPointerException if iArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if iArray is too small to hold the input.
"
      end

      operation 6608642 "setPixels"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from a float array containing
one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param fArray    The input samples in a float array.
@param data      The DataBuffer containing the image data.
@see #getPixels(int, int, int, int, float[], DataBuffer)

@throws NullPointerException if fArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if fArray is too small to hold the input.
"
      end

      operation 6608770 "setPixels"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from a double array
containing one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param dArray    The input samples in a double array.
@param data      The DataBuffer containing the image data.
@see #getPixels(int, int, int, int, double[], DataBuffer)

@throws NullPointerException if dArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if dArray is too small to hold the input.
"
      end

      operation 6608898 "setSample"
	abstract public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using an int for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to set.
@param s         The input sample as an int.
@param data      The DataBuffer containing the image data.
@see #getSample(int, int, int,  DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6609026 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "float"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using a float for input.
The default implementation of this method casts the input
float sample to an int and then calls the
<code>setSample(int, int, int, DataBuffer)</code> method using
that int value.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to set.
@param s         The input sample as a float.
@param data      The DataBuffer containing the image data.
@see #getSample(int, int, int, DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6609154 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "double"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using a double for input.
The default implementation of this method casts the input
double sample to an int and then calls the
<code>setSample(int, int, int, DataBuffer)</code> method using
that int value.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to set.
@param s         The input sample as a double.
@param data      The DataBuffer containing the image data.
@see #getSample(int, int, int, DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6609282 "setSamples"
	public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from an int array containing one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to set.
@param iArray    The input samples in an int array.
@param data      The DataBuffer containing the image data.
@see #getSamples(int, int, int, int, int, int[], DataBuffer)

@throws NullPointerException if iArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if iArray is too small to
hold the input.
"
      end

      operation 6609410 "setSamples"
	public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from a float array containing one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to set.
@param fArray    The input samples in a float array.
@param data      The DataBuffer containing the image data.
@see #getSamples(int, int, int, int, int, float[], DataBuffer)

@throws NullPointerException if fArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if fArray is too small to
hold the input.
"
      end

      operation 6609538 "setSamples"
	public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from a double array containing one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to set.
@param dArray    The input samples in a double array.
@param data      The DataBuffer containing the image data.
@see #getSamples(int, int, int, int, int, double[], DataBuffer)

@throws NullPointerException if dArray or data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if dArray is too small to
hold the input.
"
      end

      operation 6609666 "createCompatibleSampleModel"
	abstract public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a SampleModel which describes data in this SampleModel's
 format, but with a different width and height.
 @param w the width of the image data
 @param h the height of the image data
 @return a <code>SampleModel</code> describing the same image
         data as this <code>SampleModel</code>, but with a
         different size.
"
      end

      operation 6609794 "createSubsetSampleModel"
	abstract public return_type class_ref 314370 // SampleModel
	nparams 1
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SampleModel
with a subset of the bands of this
SampleModel.
@param bands the subset of bands of this <code>SampleModel</code>
@return a <code>SampleModel</code> with a subset of bands of this
        <code>SampleModel</code>.
"
      end

      operation 6609922 "createDataBuffer"
	abstract public return_type class_ref 897026 // DataBuffer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DataBuffer that corresponds to this SampleModel.
The DataBuffer's width and height will match this SampleModel's.
@return a <code>DataBuffer</code> corresponding to this
        <code>SampleModel</code>.
"
      end

      operation 6610050 "getSampleSize"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the size in bits of samples for all bands.
 @return the size of samples for all bands.
"
      end

      operation 6610178 "getSampleSize"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "band" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the size in bits of samples for the specified band.
 @param band the specified band
 @return the size of the samples of the specified band.
"
      end
    end

    class 317058 "IndexColorModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>IndexColorModel</code> class is a <code>ColorModel</code>
class that works with pixel values consisting of a
single sample that is an index into a fixed colormap in the default
sRGB color space.  The colormap specifies red, green, blue, and
optional alpha components corresponding to each index.  All components
are represented in the colormap as 8-bit unsigned integral values.
Some constructors allow the caller to specify \"holes\" in the colormap
by indicating which colormap entries are valid and which represent
unusable colors via the bits set in a <code>BigInteger</code> object.
This color model is similar to an X11 PseudoColor visual.
<p>
Some constructors provide a means to specify an alpha component
for each pixel in the colormap, while others either provide no
such means or, in some cases, a flag to indicate whether the
colormap data contains alpha values.  If no alpha is supplied to
the constructor, an opaque alpha component (alpha = 1.0) is
assumed for each entry.
An optional transparent pixel value can be supplied that indicates a
pixel to be made completely transparent, regardless of any alpha
component supplied or assumed for that pixel value.
Note that the color components in the colormap of an
<code>IndexColorModel</code> objects are never pre-multiplied with
the alpha components.
<p>
<a name=\"transparency\">
The transparency of an <code>IndexColorModel</code> object is
determined by examining the alpha components of the colors in the
colormap and choosing the most specific value after considering
the optional alpha values and any transparent index specified.
The transparency value is <code>Transparency.OPAQUE</code>
only if all valid colors in
the colormap are opaque and there is no valid transparent pixel.
If all valid colors
in the colormap are either completely opaque (alpha = 1.0) or
completely transparent (alpha = 0.0), which typically occurs when
a valid transparent pixel is specified,
the value is <code>Transparency.BITMASK</code>.
Otherwise, the value is <code>Transparency.TRANSLUCENT</code>, indicating
that some valid color has an alpha component that is
neither completely transparent nor completely opaque
(0.0 &lt; alpha &lt; 1.0).
</a>

<p>
If an <code>IndexColorModel</code> object has
a transparency value of <code>Transparency.OPAQUE</code>,
then the <code>hasAlpha</code>
and <code>getNumComponents</code> methods
(both inherited from <code>ColorModel</code>)
return false and 3, respectively.
For any other transparency value,
<code>hasAlpha</code> returns true
and <code>getNumComponents</code> returns 4.

<p>
<a name=\"index_values\">
The values used to index into the colormap are taken from the least
significant <em>n</em> bits of pixel representations where
<em>n</em> is based on the pixel size specified in the constructor.
For pixel sizes smaller than 8 bits, <em>n</em> is rounded up to a
power of two (3 becomes 4 and 5,6,7 become 8).
For pixel sizes between 8 and 16 bits, <em>n</em> is equal to the
pixel size.
Pixel sizes larger than 16 bits are not supported by this class.
Higher order bits beyond <em>n</em> are ignored in pixel representations.
Index values greater than or equal to the map size, but less than
2<sup><em>n</em></sup>, are undefined and return 0 for all color and
alpha components.
</a>
<p>
For those methods that use a primitive array pixel representation of
type <code>transferType</code>, the array length is always one.
The transfer types supported are <code>DataBuffer.TYPE_BYTE</code> and
<code>DataBuffer.TYPE_USHORT</code>.  A single int pixel
representation is valid for all objects of this class, since it is
always possible to represent pixel values used with this class in a
single int.  Therefore, methods that use this representation do
not throw an <code>IllegalArgumentException</code> due to an invalid
pixel value.
<p>
Many of the methods in this class are final.  The reason for
this is that the underlying native graphics code makes assumptions
about the layout and operation of this class and those assumptions
are reflected in the implementations of the methods here that are
marked final.  You can subclass this class for other reasons, but
you cannot override or modify the behaviour of those methods.

@see ColorModel
@see ColorSpace
@see DataBuffer

"
      classrelation 3073538 // <generalisation>
	relation 3073538 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3073538 // <generalisation>
	  b parent class_ref 312066 // ColorModel
      end

      attribute 1615490 "rgb"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1615618 "map_size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1615746 "pixel_mask"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1615874 "transparent_index"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1616002 "allgrayopaque"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3073666 // validBits (<unidirectional association>)
	relation 3073666 --->
	  a role_name "validBits" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3073666 // validBits (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      attribute 1616130 "colorData"
	private explicit_type "sun.awt.image.BufImgSurfaceData.ICMColorData"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1616258 "opaqueBits"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {8, 8, 8}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1616386 "alphaBits"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {8, 8, 8, 8}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6669442 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 154242 "initialization"
	
	cpp "" ""
	java "  static {
        ColorModel.loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6669570 "IndexColorModel"
	public explicit_return_type ""
	nparams 5
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param inout name "r" explicit_type "byte"
	multiplicity "[]"
	  param inout name "g" explicit_type "byte"
	multiplicity "[]"
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexColorModel</code> from the specified
arrays of red, green, and blue components.  Pixels described
by this color model all have alpha components of 255
unnormalized (1.0&nbsp;normalized), which means they
are fully opaque.  All of the arrays specifying the color
components must have at least the specified number of entries.
The <code>ColorSpace</code> is the default sRGB space.
Since there is no alpha information in any of the arguments
to this constructor, the transparency value is always
<code>Transparency.OPAQUE</code>.
The transfer type is the smallest of <code>DataBuffer.TYPE_BYTE</code>
or <code>DataBuffer.TYPE_USHORT</code> that can hold a single pixel.
@param bits      the number of bits each pixel occupies
@param size      the size of the color component arrays
@param r         the array of red color components
@param g         the array of green color components
@param b         the array of blue color components
@throws IllegalArgumentException if <code>bits</code> is less
        than 1 or greater than 16
@throws IllegalArgumentException if <code>size</code> is less
        than 1
"
      end

      operation 6669698 "IndexColorModel"
	public explicit_return_type ""
	nparams 6
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param inout name "r" explicit_type "byte"
	multiplicity "[]"
	  param inout name "g" explicit_type "byte"
	multiplicity "[]"
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "trans" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexColorModel</code> from the given arrays
of red, green, and blue components.  Pixels described by this color
model all have alpha components of 255 unnormalized
(1.0&nbsp;normalized), which means they are fully opaque, except
for the indicated pixel to be made transparent.  All of the arrays
specifying the color components must have at least the specified
number of entries.
The <code>ColorSpace</code> is the default sRGB space.
The transparency value may be <code>Transparency.OPAQUE</code> or
<code>Transparency.BITMASK</code> depending on the arguments, as
specified in the <a href=\"#transparency\">class description</a> above.
The transfer type is the smallest of <code>DataBuffer.TYPE_BYTE</code>
or <code>DataBuffer.TYPE_USHORT</code> that can hold a
single pixel.
@param bits      the number of bits each pixel occupies
@param size      the size of the color component arrays
@param r         the array of red color components
@param g         the array of green color components
@param b         the array of blue color components
@param trans     the index of the transparent pixel
@throws IllegalArgumentException if <code>bits</code> is less than
         1 or greater than 16
@throws IllegalArgumentException if <code>size</code> is less than
         1
"
      end

      operation 6669826 "IndexColorModel"
	public explicit_return_type ""
	nparams 6
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param inout name "r" explicit_type "byte"
	multiplicity "[]"
	  param inout name "g" explicit_type "byte"
	multiplicity "[]"
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexColorModel</code> from the given
arrays of red, green, blue and alpha components.  All of the
arrays specifying the components must have at least the specified
number of entries.
The <code>ColorSpace</code> is the default sRGB space.
The transparency value may be any of <code>Transparency.OPAQUE</code>,
<code>Transparency.BITMASK</code>,
or <code>Transparency.TRANSLUCENT</code>
depending on the arguments, as specified
in the <a href=\"#transparency\">class description</a> above.
The transfer type is the smallest of <code>DataBuffer.TYPE_BYTE</code>
or <code>DataBuffer.TYPE_USHORT</code> that can hold a single pixel.
@param bits      the number of bits each pixel occupies
@param size      the size of the color component arrays
@param r         the array of red color components
@param g         the array of green color components
@param b         the array of blue color components
@param a         the array of alpha value components
@throws IllegalArgumentException if <code>bits</code> is less
          than 1 or greater than 16
@throws IllegalArgumentException if <code>size</code> is less
          than 1
"
      end

      operation 6669954 "IndexColorModel"
	public explicit_return_type ""
	nparams 5
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param inout name "cmap" explicit_type "byte"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param inout name "hasalpha" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexColorModel</code> from a single
array of interleaved red, green, blue and optional alpha
components.  The array must have enough values in it to
fill all of the needed component arrays of the specified
size.  The <code>ColorSpace</code> is the default sRGB space.
The transparency value may be any of <code>Transparency.OPAQUE</code>,
<code>Transparency.BITMASK</code>,
or <code>Transparency.TRANSLUCENT</code>
depending on the arguments, as specified
in the <a href=\"#transparency\">class description</a> above.
The transfer type is the smallest of
<code>DataBuffer.TYPE_BYTE</code> or <code>DataBuffer.TYPE_USHORT</code>
that can hold a single pixel.

@param bits      the number of bits each pixel occupies
@param size      the size of the color component arrays
@param cmap      the array of color components
@param start     the starting offset of the first color component
@param hasalpha  indicates whether alpha values are contained in
                 the <code>cmap</code> array
@throws IllegalArgumentException if <code>bits</code> is less
          than 1 or greater than 16
@throws IllegalArgumentException if <code>size</code> is less
          than 1
"
      end

      operation 6670082 "IndexColorModel"
	public explicit_return_type ""
	nparams 6
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param inout name "cmap" explicit_type "byte"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param inout name "hasalpha" explicit_type "boolean"
	  param in name "trans" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexColorModel</code> from a single array of
interleaved red, green, blue and optional alpha components.  The
specified transparent index represents a pixel that is made
entirely transparent regardless of any alpha value specified
for it.  The array must have enough values in it to fill all
of the needed component arrays of the specified size.
The <code>ColorSpace</code> is the default sRGB space.
The transparency value may be any of <code>Transparency.OPAQUE</code>,
<code>Transparency.BITMASK</code>,
or <code>Transparency.TRANSLUCENT</code>
depending on the arguments, as specified
in the <a href=\"#transparency\">class description</a> above.
The transfer type is the smallest of
<code>DataBuffer.TYPE_BYTE</code> or <code>DataBuffer.TYPE_USHORT</code>
that can hold a single pixel.
@param bits      the number of bits each pixel occupies
@param size      the size of the color component arrays
@param cmap      the array of color components
@param start     the starting offset of the first color component
@param hasalpha  indicates whether alpha values are contained in
                 the <code>cmap</code> array
@param trans     the index of the fully transparent pixel
@throws IllegalArgumentException if <code>bits</code> is less than
              1 or greater than 16
@throws IllegalArgumentException if <code>size</code> is less than
              1
"
      end

      operation 6670210 "IndexColorModel"
	public explicit_return_type ""
	nparams 7
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param inout name "cmap" explicit_type "int"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param inout name "hasalpha" explicit_type "boolean"
	  param in name "trans" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexColorModel</code> from an array of
ints where each int is comprised of red, green, blue, and
optional alpha components in the default RGB color model format.
The specified transparent index represents a pixel that is made
entirely transparent regardless of any alpha value specified
for it.  The array must have enough values in it to fill all
of the needed component arrays of the specified size.
The <code>ColorSpace</code> is the default sRGB space.
The transparency value may be any of <code>Transparency.OPAQUE</code>,
<code>Transparency.BITMASK</code>,
or <code>Transparency.TRANSLUCENT</code>
depending on the arguments, as specified
in the <a href=\"#transparency\">class description</a> above.
@param bits      the number of bits each pixel occupies
@param size      the size of the color component arrays
@param cmap      the array of color components
@param start     the starting offset of the first color component
@param hasalpha  indicates whether alpha values are contained in
                 the <code>cmap</code> array
@param trans     the index of the fully transparent pixel
@param transferType the data type of the array used to represent
          pixel values.  The data type must be either
          <code>DataBuffer.TYPE_BYTE</code> or
          <code>DataBuffer.TYPE_USHORT</code>.
@throws IllegalArgumentException if <code>bits</code> is less
          than 1 or greater than 16
@throws IllegalArgumentException if <code>size</code> is less
          than 1
@throws IllegalArgumentException if <code>transferType</code> is not
          one of <code>DataBuffer.TYPE_BYTE</code> or
          <code>DataBuffer.TYPE_USHORT</code>
"
      end

      operation 6670338 "IndexColorModel"
	public explicit_return_type ""
	nparams 6
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param inout name "cmap" explicit_type "int"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	  param inout name "validBits" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexColorModel</code> from an
<code>int</code> array where each <code>int</code> is
comprised of red, green, blue, and alpha
components in the default RGB color model format.
The array must have enough values in it to fill all
of the needed component arrays of the specified size.
The <code>ColorSpace</code> is the default sRGB space.
The transparency value may be any of <code>Transparency.OPAQUE</code>,
<code>Transparency.BITMASK</code>,
or <code>Transparency.TRANSLUCENT</code>
depending on the arguments, as specified
in the <a href=\"#transparency\">class description</a> above.
The transfer type must be one of <code>DataBuffer.TYPE_BYTE</code>
<code>DataBuffer.TYPE_USHORT</code>.
The <code>BigInteger</code> object specifies the valid/invalid pixels
in the <code>cmap</code> array.  A pixel is valid if the
<code>BigInteger</code> value at that index is set, and is invalid
if the <code>BigInteger</code> bit  at that index is not set.
@param bits the number of bits each pixel occupies
@param size the size of the color component array
@param cmap the array of color components
@param start the starting offset of the first color component
@param transferType the specified data type
@param validBits a <code>BigInteger</code> object.  If a bit is
   set in the BigInteger, the pixel at that index is valid.
   If a bit is not set, the pixel at that index
   is considered invalid.  If null, all pixels are valid.
   Only bits from 0 to the map size are considered.
@throws IllegalArgumentException if <code>bits</code> is less
          than 1 or greater than 16
@throws IllegalArgumentException if <code>size</code> is less
          than 1
@throws IllegalArgumentException if <code>transferType</code> is not
          one of <code>DataBuffer.TYPE_BYTE</code> or
          <code>DataBuffer.TYPE_USHORT</code>

@since 1.3
"
      end

      operation 6670466 "setRGBs"
	private explicit_return_type "void"
	nparams 5
	  param in name "size" explicit_type "int"
	  param inout name "r" explicit_type "byte"
	multiplicity "[]"
	  param inout name "g" explicit_type "byte"
	multiplicity "[]"
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6670594 "setRGBs"
	private explicit_return_type "void"
	nparams 4
	  param in name "size" explicit_type "int"
	  param inout name "cmap" explicit_type "int"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param inout name "hasalpha" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6670722 "calcRealMapSize"
	private explicit_return_type "int"
	nparams 2
	  param in name "bits" explicit_type "int"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6670850 "getAllValid"
	private return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6670978 "getTransparency"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transparency.  Returns either OPAQUE, BITMASK,
or TRANSLUCENT
@return the transparency of this <code>IndexColorModel</code>
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT
"
      end

      operation 6671106 "getComponentSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the number of bits for each color/alpha component.
The array contains the color components in the order red, green,
blue, followed by the alpha component, if present.
@return an array containing the number of bits of each color
        and alpha component of this <code>IndexColorModel</code>
"
      end

      operation 6671234 "getMapSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the color/alpha component arrays in this
<code>IndexColorModel</code>.
@return the size of the color and alpha component arrays.
"
      end

      operation 6671362 "getTransparentPixel"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of a transparent pixel in this
<code>IndexColorModel</code> or -1 if there is no pixel
with an alpha value of 0.  If a transparent pixel was
explicitly specified in one of the constructors by its
index, then that index will be preferred, otherwise,
the index of any pixel which happens to be fully transparent
may be returned.
@return the index of a transparent pixel in this
        <code>IndexColorModel</code> object, or -1 if there
        is no such pixel
"
      end

      operation 6671490 "getReds"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies the array of red color components into the specified array.
Only the initial entries of the array as specified by
{@link #getMapSize() getMapSize} are written.
@param r the specified array into which the elements of the
     array of red color components are copied
"
      end

      operation 6671618 "getGreens"
	public explicit_return_type "void"
	nparams 1
	  param inout name "g" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies the array of green color components into the specified array.
Only the initial entries of the array as specified by
<code>getMapSize</code> are written.
@param g the specified array into which the elements of the
     array of green color components are copied
"
      end

      operation 6671746 "getBlues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies the array of blue color components into the specified array.
Only the initial entries of the array as specified by
<code>getMapSize</code> are written.
@param b the specified array into which the elements of the
     array of blue color components are copied
"
      end

      operation 6671874 "getAlphas"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies the array of alpha transparency components into the
specified array.  Only the initial entries of the array as specified
by <code>getMapSize</code> are written.
@param a the specified array into which the elements of the
     array of alpha components are copied
"
      end

      operation 6672002 "getRGBs"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rgb" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts data for each index from the color and alpha component
arrays to an int in the default RGB ColorModel format and copies
the resulting 32-bit ARGB values into the specified array.  Only
the initial entries of the array as specified by
<code>getMapSize</code> are
written.
@param rgb the specified array into which the converted ARGB
       values from this array of color and alpha components
       are copied.
"
      end

      operation 6672130 "setTransparentPixel"
	private explicit_return_type "void"
	nparams 1
	  param in name "trans" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6672258 "setTransparency"
	private explicit_return_type "void"
	nparams 1
	  param in name "transparency" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6672386 "calculatePixelMask"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called from the constructors to set the pixel_mask
value, which is based on the value of pixel_bits.  The pixel_mask
value is used to mask off the pixel parameters for methods such
as getRed(), getGreen(), getBlue(), getAlpha(), and getRGB().
"
      end

      operation 6672514 "getRed"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the red color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
is specified as an int.
Only the lower <em>n</em> bits of the pixel value, as specified in the
<a href=\"#index_values\">class description</a> above, are used to
calculate the returned value.
The returned value is a non pre-multiplied value.
@param pixel the specified pixel
@return the value of the red color component for the specified pixel
"
      end

      operation 6672642 "getGreen"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the green color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
is specified as an int.
Only the lower <em>n</em> bits of the pixel value, as specified in the
<a href=\"#index_values\">class description</a> above, are used to
calculate the returned value.
The returned value is a non pre-multiplied value.
@param pixel the specified pixel
@return the value of the green color component for the specified pixel
"
      end

      operation 6672770 "getBlue"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the blue color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
is specified as an int.
Only the lower <em>n</em> bits of the pixel value, as specified in the
<a href=\"#index_values\">class description</a> above, are used to
calculate the returned value.
The returned value is a non pre-multiplied value.
@param pixel the specified pixel
@return the value of the blue color component for the specified pixel
"
      end

      operation 6672898 "getAlpha"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alpha component for the specified pixel, scaled
from 0 to 255.  The pixel value is specified as an int.
Only the lower <em>n</em> bits of the pixel value, as specified in the
<a href=\"#index_values\">class description</a> above, are used to
calculate the returned value.
@param pixel the specified pixel
@return the value of the alpha component for the specified pixel
"
      end

      operation 6673026 "getRGB"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color/alpha components of the pixel in the default
RGB color model format.  The pixel value is specified as an int.
Only the lower <em>n</em> bits of the pixel value, as specified in the
<a href=\"#index_values\">class description</a> above, are used to
calculate the returned value.
The returned value is in a non pre-multiplied format.
@param pixel the specified pixel
@return the color and alpha components of the specified pixel
@see ColorModel#getRGBdefault
"
      end

      attribute 1616514 "CACHESIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1616642 "lookupcache"
	private explicit_type "int"
	multiplicity "[]"
	init_value " new int[CACHESIZE]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6673154 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "rgb" explicit_type "int"
	  param inout name "pixel" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
ColorModel, given an integer pixel representation in the
default RGB color model.  This array can then be passed to the
{@link WritableRaster#setDataElements(int, int, java.lang.Object) setDataElements}
method of a {@link WritableRaster} object.  If the pixel variable is
<code>null</code>, a new array is allocated.  If <code>pixel</code>
is not <code>null</code>, it must be
a primitive array of type <code>transferType</code>; otherwise, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>pixel</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.  The pixel array is returned.
<p>
Since <code>IndexColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then they throw an exception if they use an
unsupported <code>transferType</code>.

@param rgb the integer pixel representation in the default RGB
color model
@param pixel the specified pixel
@return an array representation of the specified pixel in this
 <code>IndexColorModel</code>.
@throws ClassCastException if <code>pixel</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>pixel</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@throws UnsupportedOperationException if <code>transferType</code>
        is invalid
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6673282 "installpixel"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "pixel" type class_ref 129538 // Object
	  param in name "pix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6673410 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param in name "pixel" explicit_type "int"
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of unnormalized color/alpha components for a
specified pixel in this <code>ColorModel</code>.  The pixel value
is specified as an int.  If the <code>components</code> array is <code>null</code>,
a new array is allocated that contains
<code>offset + getNumComponents()</code> elements.
The <code>components</code> array is returned,
with the alpha component included
only if <code>hasAlpha</code> returns true.
Color/alpha components are stored in the <code>components</code> array starting
at <code>offset</code> even if the array is allocated by this method.
An <code>ArrayIndexOutOfBoundsException</code>
is thrown if  the <code>components</code> array is not <code>null</code> and is
not large enough to hold all the color and alpha components
starting at <code>offset</code>.
@param pixel the specified pixel
@param components the array to receive the color and alpha
components of the specified pixel
@param offset the offset into the <code>components</code> array at
which to start storing the color and alpha components
@return an array containing the color and alpha components of the
specified pixel starting at the specified offset.
@see ColorModel#hasAlpha
@see ColorModel#getNumComponents
"
      end

      operation 6673538 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param inout name "pixel" type class_ref 129538 // Object
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of unnormalized color/alpha components for
a specified pixel in this <code>ColorModel</code>.  The pixel
value is specified by an array of data elements of type
<code>transferType</code> passed in as an object reference.
If <code>pixel</code> is not a primitive array of type
<code>transferType</code>, a <code>ClassCastException</code>
is thrown.  An <code>ArrayIndexOutOfBoundsException</code>
is thrown if <code>pixel</code> is not large enough to hold
a pixel value for this <code>ColorModel</code>.  If the
<code>components</code> array is <code>null</code>, a new array
is allocated that contains
<code>offset + getNumComponents()</code> elements.
The <code>components</code> array is returned,
with the alpha component included
only if <code>hasAlpha</code> returns true.
Color/alpha components are stored in the <code>components</code>
array starting at <code>offset</code> even if the array is
allocated by this method.  An
<code>ArrayIndexOutOfBoundsException</code> is also
thrown if  the <code>components</code> array is not
<code>null</code> and is not large enough to hold all the color
and alpha components starting at <code>offset</code>.
<p>
Since <code>IndexColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then they throw an exception if they use an
unsupported <code>transferType</code>.

@param pixel the specified pixel
@param components an array that receives the color and alpha
components of the specified pixel
@param offset the index into the <code>components</code> array at
which to begin storing the color and alpha components of the
specified pixel
@return an array containing the color and alpha components of the
specified pixel starting at the specified offset.
@throws ArrayIndexOutOfBoundsException if <code>pixel</code>
           is not large enough to hold a pixel value for this
           <code>ColorModel</code> or if the
           <code>components</code> array is not <code>null</code>
           and is not large enough to hold all the color
           and alpha components starting at <code>offset</code>
@throws ClassCastException if <code>pixel</code> is not a
           primitive array of type <code>transferType</code>
@throws UnsupportedOperationException if <code>transferType</code>
        is not one of the supported transfer types
@see ColorModel#hasAlpha
@see ColorModel#getNumComponents
"
      end

      operation 6673666 "getDataElement"
	public explicit_return_type "int"
	nparams 2
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pixel value represented as an int in this
<code>ColorModel</code> given an array of unnormalized
color/alpha components.  An
<code>ArrayIndexOutOfBoundsException</code>
is thrown if the <code>components</code> array is not large
enough to hold all of the color and alpha components starting
at <code>offset</code>.  Since
<code>ColorModel</code> can be subclassed, subclasses inherit the
implementation of this method and if they don't override it then
they throw an exception if they use an unsupported transferType.
@param components an array of unnormalized color and alpha
components
@param offset the index into <code>components</code> at which to
begin retrieving the color and alpha components
@return an <code>int</code> pixel value in this
<code>ColorModel</code> corresponding to the specified components.
@throws ArrayIndexOutOfBoundsException if
 the <code>components</code> array is not large enough to
 hold all of the color and alpha components starting at
 <code>offset</code>
@throws UnsupportedOperationException if <code>transferType</code>
        is invalid
"
      end

      operation 6673794 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param inout name "pixel" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<code>ColorModel</code> given an array of unnormalized color/alpha
components.  This array can then be passed to the
<code>setDataElements</code> method of a <code>WritableRaster</code>
object.  An <code>ArrayIndexOutOfBoundsException</code> is
thrown if the
<code>components</code> array is not large enough to hold all of the
color and alpha components starting at <code>offset</code>.
If the pixel variable is <code>null</code>, a new array
is allocated.  If <code>pixel</code> is not <code>null</code>,
it must be a primitive array of type <code>transferType</code>;
otherwise, a <code>ClassCastException</code> is thrown.
An <code>ArrayIndexOutOfBoundsException</code> is thrown if pixel
is not large enough to hold a pixel value for this
<code>ColorModel</code>.
<p>
Since <code>IndexColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then they throw an exception if they use an
unsupported <code>transferType</code>

@param components an array of unnormalized color and alpha
components
@param offset the index into <code>components</code> at which to
begin retrieving color and alpha components
@param pixel the <code>Object</code> representing an array of color
and alpha components
@return an <code>Object</code> representing an array of color and
alpha components.
@throws ClassCastException if <code>pixel</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>pixel</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code> or the <code>components</code>
 array is not large enough to hold all of the color and alpha
 components starting at <code>offset</code>
@throws UnsupportedOperationException if <code>transferType</code>
        is not one of the supported transfer types
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6673922 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>WritableRaster</code> with the specified width
and height that has a data layout (<code>SampleModel</code>)
compatible with this <code>ColorModel</code>.  This method
only works for color models with 16 or fewer bits per pixel.
<p>
Since <code>IndexColorModel</code> can be subclassed, any
subclass that supports greater than 16 bits per pixel must
override this method.

@param w the width to apply to the new <code>WritableRaster</code>
@param h the height to apply to the new <code>WritableRaster</code>
@return a <code>WritableRaster</code> object with the specified
width and height.
@throws UnsupportedOperationException if the number of bits in a
        pixel is greater than 16
@see WritableRaster
@see SampleModel
"
      end

      operation 6674050 "isCompatibleRaster"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "raster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if <code>raster</code> is compatible
with this <code>ColorModel</code> or <code>false</code> if it
is not compatible with this <code>ColorModel</code>.
@param raster the {@link Raster} object to test for compatibility
@return <code>true</code> if <code>raster</code> is compatible
with this <code>ColorModel</code>; <code>false</code> otherwise.

"
      end

      operation 6674178 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SampleModel</code> with the specified
width and height that has a data layout compatible with
this <code>ColorModel</code>.
@param w the width to apply to the new <code>SampleModel</code>
@param h the height to apply to the new <code>SampleModel</code>
@return a <code>SampleModel</code> object with the specified
width and height.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
@see SampleModel
"
      end

      operation 6674306 "isCompatibleSampleModel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sm" type class_ref 314370 // SampleModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified <code>SampleModel</code> is compatible
with this <code>ColorModel</code>.  If <code>sm</code> is
<code>null</code>, this method returns <code>false</code>.
@param sm the specified <code>SampleModel</code>,
          or <code>null</code>
@return <code>true</code> if the specified <code>SampleModel</code>
is compatible with this <code>ColorModel</code>; <code>false</code>
otherwise.
@see SampleModel
"
      end

      operation 6674434 "convertToIntDiscrete"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "raster" type class_ref 311682 // Raster
	  param inout name "forceARGB" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BufferedImage</code> of TYPE_INT_ARGB or
TYPE_INT_RGB that has a <code>Raster</code> with pixel data
computed by expanding the indices in the source <code>Raster</code>
using the color/alpha component arrays of this <code>ColorModel</code>.
Only the lower <em>n</em> bits of each index value in the source
<code>Raster</code>, as specified in the
<a href=\"#index_values\">class description</a> above, are used to
compute the color/alpha values in the returned image.
If <code>forceARGB</code> is <code>true</code>, a TYPE_INT_ARGB image is
returned regardless of whether or not this <code>ColorModel</code>
has an alpha component array or a transparent pixel.
@param raster the specified <code>Raster</code>
@param forceARGB if <code>true</code>, the returned
    <code>BufferedImage</code> is TYPE_INT_ARGB; otherwise it is
    TYPE_INT_RGB
@return a <code>BufferedImage</code> created with the specified
    <code>Raster</code>
@throws IllegalArgumentException if the raster argument is not
          compatible with this IndexColorModel
"
      end

      operation 6674562 "isValid"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the pixel is valid.
@param pixel the specified pixel value
@return <code>true</code> if <code>pixel</code>
is valid; <code>false</code> otherwise.
@since 1.3
"
      end

      operation 6674690 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not all of the pixels are valid.
@return <code>true</code> if all pixels are valid;
<code>false</code> otherwise.
@since 1.3
"
      end

      operation 6674818 "getValidPixels"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>BigInteger</code> that indicates the valid/invalid
pixels in the colormap.  A bit is valid if the
<code>BigInteger</code> value at that index is set, and is invalid
if the <code>BigInteger</code> value at that index is not set.
The only valid ranges to query in the <code>BigInteger</code> are
between 0 and the map size.
@return a <code>BigInteger</code> indicating the valid/invalid pixels.
@since 1.3
"
      end

      operation 6674946 "finalize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disposes of system resources associated with this
<code>ColorModel</code> once this <code>ColorModel</code> is no
longer referenced.
"
      end

      operation 6675074 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>String</code> representation of the contents of
this <code>ColorModel</code>object.
@return a <code>String</code> representing the contents of this
<code>ColorModel</code> object.
"
      end
    end

    class 322690 "WritableRaster"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends Raster to provide pixel writing capabilities.
Refer to the class comment for Raster for descriptions of how
a Raster stores pixels.

<p> The constructors of this class are protected.  To instantiate
a WritableRaster, use one of the createWritableRaster factory methods
in the Raster class.
"
      classrelation 3077122 // <generalisation>
	relation 3077122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3077122 // <generalisation>
	  b parent class_ref 311682 // Raster
      end

      operation 6700418 "WritableRaster"
	protected explicit_return_type ""
	nparams 2
	  param inout name "sampleModel" type class_ref 314370 // SampleModel
	  param inout name "origin" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a WritableRaster with the given SampleModel.  The
 WritableRaster's upper left corner is origin and it is the
 same size as the  SampleModel.  A DataBuffer large enough to
 describe the WritableRaster is automatically created.
 @param sampleModel     The SampleModel that specifies the layout.
 @param origin          The Point that specifies the origin.
 @throws RasterFormatException if computing either
         <code>origin.x + sampleModel.getWidth()</code> or
         <code>origin.y + sampleModel.getHeight()</code> results
         in integer overflow
"
      end

      operation 6700546 "WritableRaster"
	protected explicit_return_type ""
	nparams 3
	  param inout name "sampleModel" type class_ref 314370 // SampleModel
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param inout name "origin" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a WritableRaster with the given SampleModel and DataBuffer.
 The WritableRaster's upper left corner is origin and it is the same
 size as the SampleModel.  The DataBuffer is not initialized and must
 be compatible with SampleModel.
 @param sampleModel     The SampleModel that specifies the layout.
 @param dataBuffer      The DataBuffer that contains the image data.
 @param origin          The Point that specifies the origin.
 @throws RasterFormatException if computing either
         <code>origin.x + sampleModel.getWidth()</code> or
         <code>origin.y + sampleModel.getHeight()</code> results
         in integer overflow
"
      end

      operation 6700674 "WritableRaster"
	protected explicit_return_type ""
	nparams 5
	  param inout name "sampleModel" type class_ref 314370 // SampleModel
	  param inout name "dataBuffer" type class_ref 897026 // DataBuffer
	  param inout name "aRegion" type class_ref 314114 // Rectangle
	  param inout name "sampleModelTranslate" type class_ref 323714 // Point
	  param inout name "parent" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a WritableRaster with the given SampleModel, DataBuffer,
and parent.  aRegion specifies the bounding rectangle of the new
Raster.  When translated into the base Raster's coordinate
system, aRegion must be contained by the base Raster.
(The base Raster is the Raster's ancestor which has no parent.)
sampleModelTranslate specifies the sampleModelTranslateX and
sampleModelTranslateY values of the new Raster.

Note that this constructor should generally be called by other
constructors or create methods, it should not be used directly.
@param sampleModel     The SampleModel that specifies the layout.
@param dataBuffer      The DataBuffer that contains the image data.
@param aRegion         The Rectangle that specifies the image area.
@param sampleModelTranslate  The Point that specifies the translation
                       from SampleModel to Raster coordinates.
@param parent          The parent (if any) of this raster.
@throws RasterFormatException if <code>aRegion</code> has width
        or height less than or equal to zero, or computing either
        <code>aRegion.x + aRegion.width</code> or
        <code>aRegion.y + aRegion.height</code> results in integer
        overflow
"
      end

      operation 6700802 "getWritableParent"
	public return_type class_ref 322690 // WritableRaster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the parent WritableRaster (if any) of this WritableRaster,
 or else null.
 @return the parent of this <code>WritableRaster</code>, or
         <code>null</code>.
"
      end

      operation 6700930 "createWritableTranslatedChild"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "childMinX" explicit_type "int"
	  param in name "childMinY" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a WritableRaster with the same size, SampleModel and DataBuffer
as this one, but with a different location.  The new WritableRaster
will possess a reference to the current WritableRaster, accessible
through its getParent() and getWritableParent() methods.

@param childMinX X coord of the upper left corner of the new Raster.
@param childMinY Y coord of the upper left corner of the new Raster.
@return a <code>WritableRaster</code> the same as this one except
        for the specified location.
@throws RasterFormatException if  computing either
        <code>childMinX + this.getWidth()</code> or
        <code>childMinY + this.getHeight()</code> results in integer
        overflow
"
      end

      operation 6701058 "createWritableChild"
	public return_type class_ref 322690 // WritableRaster
	nparams 7
	  param in name "parentX" explicit_type "int"
	  param in name "parentY" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "childMinX" explicit_type "int"
	  param in name "childMinY" explicit_type "int"
	  param inout name "bandList" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new WritableRaster which shares all or part of this
WritableRaster's DataBuffer.  The new WritableRaster will
possess a reference to the current WritableRaster, accessible
through its getParent() and getWritableParent() methods.

<p> The parentX, parentY, width and height parameters form a
Rectangle in this WritableRaster's coordinate space, indicating
the area of pixels to be shared.  An error will be thrown if
this Rectangle is not contained with the bounds of the current
WritableRaster.

<p> The new WritableRaster may additionally be translated to a
different coordinate system for the plane than that used by the current
WritableRaster.  The childMinX and childMinY parameters give
the new (x, y) coordinate of the upper-left pixel of the
returned WritableRaster; the coordinate (childMinX, childMinY)
in the new WritableRaster will map to the same pixel as the
coordinate (parentX, parentY) in the current WritableRaster.

<p> The new WritableRaster may be defined to contain only a
subset of the bands of the current WritableRaster, possibly
reordered, by means of the bandList parameter.  If bandList is
null, it is taken to include all of the bands of the current
WritableRaster in their current order.

<p> To create a new WritableRaster that contains a subregion of
the current WritableRaster, but shares its coordinate system
and bands, this method should be called with childMinX equal to
parentX, childMinY equal to parentY, and bandList equal to
null.

@param parentX    X coordinate of the upper left corner in this
                  WritableRaster's coordinates.
@param parentY    Y coordinate of the upper left corner in this
                  WritableRaster's coordinates.
@param w          Width of the region starting at (parentX, parentY).
@param h          Height of the region starting at (parentX, parentY).
@param childMinX  X coordinate of the upper left corner of
                  the returned WritableRaster.
@param childMinY  Y coordinate of the upper left corner of
                  the returned WritableRaster.
@param bandList   Array of band indices, or null to use all bands.
@return a <code>WritableRaster</code> sharing all or part of the
        <code>DataBuffer</code> of this <code>WritableRaster</code>.
@exception RasterFormatException if the subregion is outside of the
                              raster bounds.
@throws RasterFormatException if <code>w</code> or
        <code>h</code>
        is less than or equal to zero, or computing any of
        <code>parentX + w</code>, <code>parentY + h</code>,
        <code>childMinX + w</code>, or
        <code>childMinY + h</code> results in integer
        overflow
"
      end

      operation 6701186 "setDataElements"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a single pixel from a
primitive array of type TransferType.  For image data supported by
the Java 2D(tm) API, this will be one of DataBuffer.TYPE_BYTE,
DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
may be in a packed format, thus increasing efficiency for data
transfers.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if inData is not large enough to hold the pixel data.
However, explicit bounds checking is not guaranteed.
A ClassCastException will be thrown if the input object is not null
and references anything other than an array of TransferType.
@see java.awt.image.SampleModel#setDataElements(int, int, Object, DataBuffer)
@param x        The X coordinate of the pixel location.
@param y        The Y coordinate of the pixel location.
@param inData   An object reference to an array of type defined by
                getTransferType() and length getNumDataElements()
                containing the pixel data to place at x,y.

@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if inData is too small to hold the input.
"
      end

      operation 6701314 "setDataElements"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "inRaster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a rectangle of pixels from an input Raster.
The input Raster must be compatible with this WritableRaster
in that they must have the same number of bands, corresponding bands
must have the same number of bits per sample, the TransferTypes
and NumDataElements must be the same, and the packing used by
the getDataElements/setDataElements must be identical.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the pixel location.
@param y        The Y coordinate of the pixel location.
@param inRaster Raster containing data to place at x,y.

@throws NullPointerException if inRaster is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds.
"
      end

      operation 6701442 "setDataElements"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a rectangle of pixels from a
primitive array of type TransferType.  For image data supported by
the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
may be in a packed format, thus increasing efficiency for data
transfers.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if inData is not large enough to hold the pixel data.
However, explicit bounds checking is not guaranteed.
A ClassCastException will be thrown if the input object is not null
and references anything other than an array of TransferType.
@see java.awt.image.SampleModel#setDataElements(int, int, int, int, Object, DataBuffer)
@param x        The X coordinate of the upper left pixel location.
@param y        The Y coordinate of the upper left pixel location.
@param w        Width of the pixel rectangle.
@param h        Height of the pixel rectangle.
@param inData   An object reference to an array of type defined by
                getTransferType() and length w*h*getNumDataElements()
                containing the pixel data to place between x,y and
                x+w-1, y+h-1.

@throws NullPointerException if inData is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if inData is too small to hold the input.
"
      end

      operation 6701570 "setRect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "srcRaster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies pixels from Raster srcRaster to this WritableRaster.  Each pixel
in srcRaster is copied to the same x,y address in this raster, unless
the address falls outside the bounds of this raster.  srcRaster
must have the same number of bands as this WritableRaster.  The
copy is a simple copy of source samples to the corresponding destination
samples.
<p>
If all samples of both source and destination Rasters are of
integral type and less than or equal to 32 bits in size, then calling
this method is equivalent to executing the following code for all
<code>x,y</code> addresses valid in both Rasters.
<pre>{@code
      Raster srcRaster;
      WritableRaster dstRaster;
      for (int b = 0; b < srcRaster.getNumBands(); b++) {
          dstRaster.setSample(x, y, b, srcRaster.getSample(x, y, b));
      }
}</pre>
Thus, when copying an integral type source to an integral type
destination, if the source sample size is greater than the destination
sample size for a particular band, the high order bits of the source
sample are truncated.  If the source sample size is less than the
destination size for a particular band, the high order bits of the
destination are zero-extended or sign-extended depending on whether
srcRaster's SampleModel treats the sample as a signed or unsigned
quantity.
<p>
When copying a float or double source to an integral type destination,
each source sample is cast to the destination type.  When copying an
integral type source to a float or double destination, the source
is first converted to a 32-bit int (if necessary), using the above
rules for integral types, and then the int is cast to float or
double.
<p>
@param srcRaster  The  Raster from which to copy pixels.

@throws NullPointerException if srcRaster is null.
"
      end

      operation 6701698 "setRect"
	public explicit_return_type "void"
	nparams 3
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	  param inout name "srcRaster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies pixels from Raster srcRaster to this WritableRaster.
For each (x, y) address in srcRaster, the corresponding pixel
is copied to address (x+dx, y+dy) in this WritableRaster,
unless (x+dx, y+dy) falls outside the bounds of this raster.
srcRaster must have the same number of bands as this WritableRaster.
The copy is a simple copy of source samples to the corresponding
destination samples.  For details, see
{@link WritableRaster#setRect(Raster)}.

@param dx        The X translation factor from src space to dst space
                 of the copy.
@param dy        The Y translation factor from src space to dst space
                 of the copy.
@param srcRaster The Raster from which to copy pixels.

@throws NullPointerException if srcRaster is null.
"
      end

      operation 6701826 "setPixel"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the DataBuffer using an int array of samples for input.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x      The X coordinate of the pixel location.
@param y      The Y coordinate of the pixel location.
@param iArray The input samples in a int array.

@throws NullPointerException if iArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if iArray is too small to hold the input.
"
      end

      operation 6701954 "setPixel"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the DataBuffer using a float array of samples for input.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x      The X coordinate of the pixel location.
@param y      The Y coordinate of the pixel location.
@param fArray The input samples in a float array.

@throws NullPointerException if fArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if fArray is too small to hold the input.
"
      end

      operation 6702082 "setPixel"
	public explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the DataBuffer using a double array of samples for input.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x      The X coordinate of the pixel location.
@param y      The Y coordinate of the pixel location.
@param dArray The input samples in a double array.

@throws NullPointerException if dArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if dArray is too small to hold the input.
"
      end

      operation 6702210 "setPixels"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from an int array containing
one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the upper left pixel location.
@param y        The Y coordinate of the upper left pixel location.
@param w        Width of the pixel rectangle.
@param h        Height of the pixel rectangle.
@param iArray   The input int pixel array.

@throws NullPointerException if iArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if iArray is too small to hold the input.
"
      end

      operation 6702338 "setPixels"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from a float array containing
one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the upper left pixel location.
@param y        The Y coordinate of the upper left pixel location.
@param w        Width of the pixel rectangle.
@param h        Height of the pixel rectangle.
@param fArray   The input float pixel array.

@throws NullPointerException if fArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if fArray is too small to hold the input.
"
      end

      operation 6702466 "setPixels"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from a double array containing
one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the upper left pixel location.
@param y        The Y coordinate of the upper left pixel location.
@param w        Width of the pixel rectangle.
@param h        Height of the pixel rectangle.
@param dArray   The input double pixel array.

@throws NullPointerException if dArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are not
in bounds, or if dArray is too small to hold the input.
"
      end

      operation 6702594 "setSample"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using an int for input.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the pixel location.
@param y        The Y coordinate of the pixel location.
@param b        The band to set.
@param s        The input sample.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6702722 "setSample"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using a float for input.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the pixel location.
@param y        The Y coordinate of the pixel location.
@param b        The band to set.
@param s        The input sample as a float.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6702850 "setSample"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using a double for input.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the pixel location.
@param y        The Y coordinate of the pixel location.
@param b        The band to set.
@param s        The input sample as a double.

@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds.
"
      end

      operation 6702978 "setSamples"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from an int array containing one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the upper left pixel location.
@param y        The Y coordinate of the upper left pixel location.
@param w        Width of the pixel rectangle.
@param h        Height of the pixel rectangle.
@param b        The band to set.
@param iArray   The input int sample array.

@throws NullPointerException if iArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if iArray is too small to
hold the input.
"
      end

      operation 6703106 "setSamples"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "fArray" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from a float array containing one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the upper left pixel location.
@param y        The Y coordinate of the upper left pixel location.
@param w        Width of the pixel rectangle.
@param h        Height of the pixel rectangle.
@param b        The band to set.
@param fArray   The input float sample array.

@throws NullPointerException if fArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if fArray is too small to
hold the input.
"
      end

      operation 6703234 "setSamples"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "dArray" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from a double array containing one sample per array element.
An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
However, explicit bounds checking is not guaranteed.
@param x        The X coordinate of the upper left pixel location.
@param y        The Y coordinate of the upper left pixel location.
@param w        Width of the pixel rectangle.
@param h        Height of the pixel rectangle.
@param b        The band to set.
@param dArray   The input double sample array.

@throws NullPointerException if dArray is null.
@throws ArrayIndexOutOfBoundsException if the coordinates or
the band index are not in bounds, or if dArray is too small to
hold the input.
"
      end
    end

    class 330882 "ColorConvertOp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class performs a pixel-by-pixel color conversion of the data in
the source image.  The resulting color values are scaled to the precision
of the destination image.  Color conversion can be specified
via an array of ColorSpace objects or an array of ICC_Profile objects.
<p>
If the source is a BufferedImage with premultiplied alpha, the
color components are divided by the alpha component before color conversion.
If the destination is a BufferedImage with premultiplied alpha, the
color components are multiplied by the alpha component after conversion.
Rasters are treated as having no alpha channel, i.e. all bands are
color bands.
<p>
If a RenderingHints object is specified in the constructor, the
color rendering hint and the dithering hint may be used to control
color conversion.
<p>
Note that Source and Destination may be the same object.
@see java.awt.RenderingHints#KEY_COLOR_RENDERING
@see java.awt.RenderingHints#KEY_DITHERING
"
      classrelation 3069314 // <realization>
	relation 3069314 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3069314 // <realization>
	  b parent class_ref 867202 // BufferedImageOp
      end

      classrelation 3069442 // <realization>
	relation 3069442 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3069442 // <realization>
	  b parent class_ref 896258 // RasterOp
      end

      classrelation 3069570 // profileList (<unidirectional association>)
	relation 3069570 --->
	  a role_name "profileList" multiplicity "[]" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3069570 // profileList (<unidirectional association>)
	  b parent class_ref 329218 // ICC_Profile
      end

      classrelation 3069698 // CSList (<unidirectional association>)
	relation 3069698 --->
	  a role_name "CSList" multiplicity "[]" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3069698 // CSList (<unidirectional association>)
	  b parent class_ref 322178 // ColorSpace
      end

      attribute 1603458 "thisTransform"
	package explicit_type "ColorTransform"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1603586 "thisRasterTransform"
	package explicit_type "ColorTransform"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3069826 // thisSrcProfile (<unidirectional association>)
	relation 3069826 --->
	  a role_name "thisSrcProfile" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3069826 // thisSrcProfile (<unidirectional association>)
	  b parent class_ref 329218 // ICC_Profile
      end

      classrelation 3069954 // thisDestProfile (<unidirectional association>)
	relation 3069954 --->
	  a role_name "thisDestProfile" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3069954 // thisDestProfile (<unidirectional association>)
	  b parent class_ref 329218 // ICC_Profile
      end

      classrelation 3070082 // hints (<unidirectional association>)
	relation 3070082 --->
	  a role_name "hints" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3070082 // hints (<unidirectional association>)
	  b parent class_ref 856578 // RenderingHints
      end

      attribute 1603714 "gotProfiles"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1603842 "srcMinVals"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1603970 "srcMaxVals"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1604098 "dstMinVals"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1604226 "dstMaxVals"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 153858 "initialization"
	
	cpp "" ""
	java "  static {
        if (ProfileDeferralMgr.deferring) {
            ProfileDeferralMgr.activateProfiles();
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6630146 "ColorConvertOp"
	public explicit_return_type ""
	nparams 1
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ColorConvertOp which will convert
from a source color space to a destination color space.
The RenderingHints argument may be null.
This Op can be used only with BufferedImages, and will convert
directly from the ColorSpace of the source image to that of the
destination.  The destination argument of the filter method
cannot be specified as null.
@param hints the <code>RenderingHints</code> object used to control
       the color conversion, or <code>null</code>
"
      end

      operation 6630274 "ColorConvertOp"
	public explicit_return_type ""
	nparams 2
	  param inout name "cspace" type class_ref 322178 // ColorSpace
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ColorConvertOp from a ColorSpace object.
The RenderingHints argument may be null.  This
Op can be used only with BufferedImages, and is primarily useful
when the {@link #filter(BufferedImage, BufferedImage) filter}
method is invoked with a destination argument of null.
In that case, the ColorSpace defines the destination color space
for the destination created by the filter method.  Otherwise, the
ColorSpace defines an intermediate space to which the source is
converted before being converted to the destination space.
@param cspace defines the destination <code>ColorSpace</code> or an
       intermediate <code>ColorSpace</code>
@param hints the <code>RenderingHints</code> object used to control
       the color conversion, or <code>null</code>
@throws NullPointerException if cspace is null
"
      end

      operation 6630402 "ColorConvertOp"
	public explicit_return_type ""
	nparams 3
	  param inout name "srcCspace" type class_ref 322178 // ColorSpace
	  param inout name "dstCspace" type class_ref 322178 // ColorSpace
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ColorConvertOp from two ColorSpace objects.
The RenderingHints argument may be null.
This Op is primarily useful for calling the filter method on
Rasters, in which case the two ColorSpaces define the operation
to be performed on the Rasters.  In that case, the number of bands
in the source Raster must match the number of components in
srcCspace, and the number of bands in the destination Raster
must match the number of components in dstCspace.  For BufferedImages,
the two ColorSpaces define intermediate spaces through which the
source is converted before being converted to the destination space.
@param srcCspace the source <code>ColorSpace</code>
@param dstCspace the destination <code>ColorSpace</code>
@param hints the <code>RenderingHints</code> object used to control
       the color conversion, or <code>null</code>
@throws NullPointerException if either srcCspace or dstCspace is null
"
      end

      operation 6630530 "ColorConvertOp"
	public explicit_return_type ""
	nparams 2
	  param inout name "profiles" type class_ref 329218 // ICC_Profile
	multiplicity "[]"
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ColorConvertOp from an array of ICC_Profiles.
The RenderingHints argument may be null.
The sequence of profiles may include profiles that represent color
spaces, profiles that represent effects, etc.  If the whole sequence
does not represent a well-defined color conversion, an exception is
thrown.
<p>For BufferedImages, if the ColorSpace
of the source BufferedImage does not match the requirements of the
first profile in the array,
the first conversion is to an appropriate ColorSpace.
If the requirements of the last profile in the array are not met
by the ColorSpace of the destination BufferedImage,
the last conversion is to the destination's ColorSpace.
<p>For Rasters, the number of bands in the source Raster must match
the requirements of the first profile in the array, and the
number of bands in the destination Raster must match the requirements
of the last profile in the array.  The array must have at least two
elements or calling the filter method for Rasters will throw an
IllegalArgumentException.
@param profiles the array of <code>ICC_Profile</code> objects
@param hints the <code>RenderingHints</code> object used to control
       the color conversion, or <code>null</code>
@exception IllegalArgumentException when the profile sequence does not
            specify a well-defined color conversion
@exception NullPointerException if profiles is null
"
      end

      operation 6630658 "getICC_Profiles"
	public return_type class_ref 329218 // ICC_Profile
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of ICC_Profiles used to construct this ColorConvertOp.
Returns null if the ColorConvertOp was not constructed from such an
array.
@return the array of <code>ICC_Profile</code> objects of this
        <code>ColorConvertOp</code>, or <code>null</code> if this
        <code>ColorConvertOp</code> was not constructed with an
        array of <code>ICC_Profile</code> objects.
"
      end

      operation 6630786 "filter"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "dest" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ColorConverts the source BufferedImage.
If the destination image is null,
a BufferedImage will be created with an appropriate ColorModel.
@param src the source <code>BufferedImage</code> to be converted
@param dest the destination <code>BufferedImage</code>,
       or <code>null</code>
@return <code>dest</code> color converted from <code>src</code>
        or a new, converted <code>BufferedImage</code>
        if <code>dest</code> is <code>null</code>
@exception IllegalArgumentException if dest is null and this op was
            constructed using the constructor which takes only a
            RenderingHints argument, since the operation is ill defined.
"
      end

      operation 6630914 "ICCBIFilter"
	private return_type class_ref 311554 // BufferedImage
	nparams 4
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "srcColorSpace" type class_ref 322178 // ColorSpace
	  param inout name "dest" type class_ref 311554 // BufferedImage
	  param inout name "destColorSpace" type class_ref 322178 // ColorSpace
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6631042 "updateBITransform"
	private explicit_return_type "void"
	nparams 2
	  param inout name "srcProfile" type class_ref 329218 // ICC_Profile
	  param inout name "destProfile" type class_ref 329218 // ICC_Profile
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6631170 "filter"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dest" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ColorConverts the image data in the source Raster.
If the destination Raster is null, a new Raster will be created.
The number of bands in the source and destination Rasters must
meet the requirements explained above.  The constructor used to
create this ColorConvertOp must have provided enough information
to define both source and destination color spaces.  See above.
Otherwise, an exception is thrown.
@param src the source <code>Raster</code> to be converted
@param dest the destination <code>WritableRaster</code>,
       or <code>null</code>
@return <code>dest</code> color converted from <code>src</code>
        or a new, converted <code>WritableRaster</code>
        if <code>dest</code> is <code>null</code>
@exception IllegalArgumentException if the number of source or
            destination bands is incorrect, the source or destination
            color spaces are undefined, or this op was constructed
            with one of the constructors that applies only to
            operations on BufferedImages.
"
      end

      operation 6631298 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the destination, given this source.
Note that this will be the same as the the bounding box of the
source.
@param src the source <code>BufferedImage</code>
@return a <code>Rectangle2D</code> that is the bounding box
        of the destination, given the specified <code>src</code>
"
      end

      operation 6631426 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the destination, given this source.
Note that this will be the same as the the bounding box of the
source.
@param src the source <code>Raster</code>
@return a <code>Rectangle2D</code> that is the bounding box
        of the destination, given the specified <code>src</code>
"
      end

      operation 6631554 "createCompatibleDestImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "destCM" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination image with the correct size and number of
bands, given this source.
@param src       Source image for the filter operation.
@param destCM    ColorModel of the destination.  If null, an
                 appropriate ColorModel will be used.
@return a <code>BufferedImage</code> with the correct size and
number of bands from the specified <code>src</code>.
@throws IllegalArgumentException if <code>destCM</code> is
        <code>null</code> and this <code>ColorConvertOp</code> was
        created without any <code>ICC_Profile</code> or
        <code>ColorSpace</code> defined for the destination
"
      end

      operation 6631682 "createCompatibleDestImage"
	private return_type class_ref 311554 // BufferedImage
	nparams 3
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "destCM" type class_ref 312066 // ColorModel
	  param inout name "destCS" type class_ref 322178 // ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6631810 "createCompatibleDestRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination Raster with the correct size and number of
bands, given this source.
@param src the specified <code>Raster</code>
@return a <code>WritableRaster</code> with the correct size and number
        of bands from the specified <code>src</code>
@throws IllegalArgumentException if this <code>ColorConvertOp</code>
        was created without sufficient information to define the
        <code>dst</code> and <code>src</code> color spaces
"
      end

      operation 6631938 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the destination point given a
point in the source.  If <code>dstPt</code> is non-null,
it will be used to hold the return value.  Note that
for this class, the destination point will be the same
as the source point.
@param srcPt the specified source <code>Point2D</code>
@param dstPt the destination <code>Point2D</code>
@return <code>dstPt</code> after setting its location to be
        the same as <code>srcPt</code>
"
      end

      operation 6632066 "getRenderingIntent"
	private explicit_return_type "int"
	nparams 1
	  param inout name "profile" type class_ref 329218 // ICC_Profile
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the RenderingIntent from the specified ICC Profile.
"
      end

      operation 6632194 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints used by this op.
@return the <code>RenderingHints</code> object of this
        <code>ColorConvertOp</code>
"
      end

      operation 6632322 "nonICCBIFilter"
	private return_type class_ref 311554 // BufferedImage
	nparams 4
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "srcColorSpace" type class_ref 322178 // ColorSpace
	  param inout name "dst" type class_ref 311554 // BufferedImage
	  param inout name "dstColorSpace" type class_ref 322178 // ColorSpace
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6632450 "nonICCRasterFilter"
	private return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " color convert a Raster - handles byte, ushort, int, short, float,
or double transferTypes "
      end

      operation 6632578 "getMinMaxValsFromProfiles"
	private explicit_return_type "void"
	nparams 2
	  param inout name "srcProfile" type class_ref 329218 // ICC_Profile
	  param inout name "dstProfile" type class_ref 329218 // ICC_Profile
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6632706 "setMinMax"
	private explicit_return_type "void"
	nparams 4
	  param in name "type" explicit_type "int"
	  param in name "nc" explicit_type "int"
	  param inout name "minVals" explicit_type "float"
	multiplicity "[]"
	  param inout name "maxVals" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6632834 "getMinMaxValsFromColorSpaces"
	private explicit_return_type "void"
	nparams 2
	  param inout name "srcCspace" type class_ref 322178 // ColorSpace
	  param inout name "dstCspace" type class_ref 322178 // ColorSpace
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 331010 "DataBufferByte"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends <CODE>DataBuffer</CODE> and stores data internally as bytes.
Values stored in the byte array(s) of this <CODE>DataBuffer</CODE> are treated as
unsigned values.
<p>
<a name=\"optimizations\">
Note that some implementations may function more efficiently
if they can maintain control over how the data for an image is
stored.
For example, optimizations such as caching an image in video
memory require that the implementation track all modifications
to that data.
Other implementations may operate better if they can store the
data in locations other than a Java array.
To maintain optimum compatibility with various optimizations
it is best to avoid constructors and methods which expose the
underlying storage as a Java array, as noted below in the
documentation for those methods.
</a>
"
      classrelation 3071874 // <generalisation>
	relation 3071874 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3071874 // <generalisation>
	  b parent class_ref 897026 // DataBuffer
      end

      attribute 1611394 "data"
	package explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The default data bank. 
"
      end

      attribute 1611522 "bankdata"
	package explicit_type "byte"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All data banks 
"
      end

      operation 6650498 "DataBufferByte"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a byte-based <CODE>DataBuffer</CODE> with a single bank and the
specified size.

@param size The size of the <CODE>DataBuffer</CODE>.
"
      end

      operation 6650626 "DataBufferByte"
	public explicit_return_type ""
	nparams 2
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a byte based <CODE>DataBuffer</CODE> with the specified number of
banks all of which are the specified size.

@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param numBanks The number of banks in the a<CODE>DataBuffer</CODE>.
"
      end

      operation 6650754 "DataBufferByte"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "byte"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a byte-based <CODE>DataBuffer</CODE> with a single bank using the
specified array.
Only the first <CODE>size</CODE> elements should be used by accessors of
this <CODE>DataBuffer</CODE>.  <CODE>dataArray</CODE> must be large enough to
hold <CODE>size</CODE> elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The byte array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
"
      end

      operation 6650882 "DataBufferByte"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "byte"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a byte-based <CODE>DataBuffer</CODE> with a single bank using the
specified array, size, and offset.  <CODE>dataArray</CODE> must have at least
<CODE>offset</CODE> + <CODE>size</CODE> elements.  Only elements <CODE>offset</CODE>
through <CODE>offset</CODE> + <CODE>size</CODE> - 1
should be used by accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The byte array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
@param offset The offset into the <CODE>dataArray</CODE>. <CODE>dataArray</CODE>
must have at least <CODE>offset</CODE> + <CODE>size</CODE> elements.
"
      end

      operation 6651010 "DataBufferByte"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "byte"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a byte-based <CODE>DataBuffer</CODE> with the specified arrays.
The number of banks is equal to <CODE>dataArray.length</CODE>.
Only the first <CODE>size</CODE> elements of each array should be used by
accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The byte arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
"
      end

      operation 6651138 "DataBufferByte"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "byte"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a byte-based <CODE>DataBuffer</CODE> with the specified arrays, size,
and offsets.
The number of banks is equal to <CODE>dataArray.length</CODE>.  Each array must
be at least as large as <CODE>size</CODE> + the corresponding <CODE>offset</CODE>.
There must be an entry in the <CODE>offset</CODE> array for each <CODE>dataArray</CODE>
entry.  For each bank, only elements <CODE>offset</CODE> through
<CODE>offset</CODE> + <CODE>size</CODE> - 1 should be used by accessors of this
<CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The byte arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param offsets The offsets into each array.
"
      end

      operation 6651266 "getData"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default (first) byte data array.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return The first byte data array.
"
      end

      operation 6651394 "getData"
	public explicit_return_type "byte"
	nparams 1
	  param in name "bank" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for the specified bank.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param bank The bank whose data array you want to get.
@return The data array for the specified bank.
"
      end

      operation 6651522 "getBankData"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data arrays for all banks.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return All of the data arrays.
"
      end

      operation 6651650 "getElem"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first (default) bank.

@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6651778 "getElem"
	public explicit_return_type "int"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified bank.

@param bank The bank from which you want to get a data array element.
@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6651906 "setElem"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default) bank
to the specified value.

@param i The data array element you want to set.
@param val The integer value to which you want to set the data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6652034 "setElem"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
from the given integer.
@param bank The bank in which you want to set the data array element.
@param i The data array element you want to set.
@param val The integer value to which you want to set the specified data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end
    end

    class 339970 "ImageObserver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An asynchronous update interface for receiving notifications about
Image information as the Image is constructed.

@author      Jim Graham
"
      operation 1882242 "imageUpdate"
	public explicit_return_type "boolean"
	nparams 6
	  param inout name "img" type class_ref 340098 // Image
	  param in name "infoflags" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when information about an image which was
previously requested using an asynchronous interface becomes
available.  Asynchronous interfaces are method calls such as
getWidth(ImageObserver) and drawImage(img, x, y, ImageObserver)
which take an ImageObserver object as an argument.  Those methods
register the caller as interested either in information about
the overall image itself (in the case of getWidth(ImageObserver))
or about an output version of an image (in the case of the
drawImage(img, x, y, [w, h,] ImageObserver) call).

<p>This method
should return true if further updates are needed or false if the
required information has been acquired.  The image which was being
tracked is passed in using the img argument.  Various constants
are combined to form the infoflags argument which indicates what
information about the image is now available.  The interpretation
of the x, y, width, and height arguments depends on the contents
of the infoflags argument.
<p>
The <code>infoflags</code> argument should be the bitwise inclusive
<b>OR</b> of the following flags: <code>WIDTH</code>,
<code>HEIGHT</code>, <code>PROPERTIES</code>, <code>SOMEBITS</code>,
<code>FRAMEBITS</code>, <code>ALLBITS</code>, <code>ERROR</code>,
<code>ABORT</code>.

@param     img   the image being observed.
@param     infoflags   the bitwise inclusive OR of the following
              flags:  <code>WIDTH</code>, <code>HEIGHT</code>,
              <code>PROPERTIES</code>, <code>SOMEBITS</code>,
              <code>FRAMEBITS</code>, <code>ALLBITS</code>,
              <code>ERROR</code>, <code>ABORT</code>.
@param     x   the <i>x</i> coordinate.
@param     y   the <i>y</i> coordinate.
@param     width    the width.
@param     height   the height.
@return    <code>false</code> if the infoflags indicate that the
           image is completely loaded; <code>true</code> otherwise.

@see #WIDTH
@see #HEIGHT
@see #PROPERTIES
@see #SOMEBITS
@see #FRAMEBITS
@see #ALLBITS
@see #ERROR
@see #ABORT
@see Image#getWidth
@see Image#getHeight
@see java.awt.Graphics#drawImage
"
      end

      attribute 442370 "WIDTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
the width of the base image is now available and can be taken
from the width argument to the imageUpdate callback method.
@see Image#getWidth
@see #imageUpdate

"
      end

      attribute 442498 "HEIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
the height of the base image is now available and can be taken
from the height argument to the imageUpdate callback method.
@see Image#getHeight
@see #imageUpdate

"
      end

      attribute 442626 "PROPERTIES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
the properties of the image are now available.
@see Image#getProperty
@see #imageUpdate

"
      end

      attribute 442754 "SOMEBITS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
more pixels needed for drawing a scaled variation of the image
are available.  The bounding box of the new pixels can be taken
from the x, y, width, and height arguments to the imageUpdate
callback method.
@see java.awt.Graphics#drawImage
@see #imageUpdate

"
      end

      attribute 442882 "FRAMEBITS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
another complete frame of a multi-frame image which was previously
drawn is now available to be drawn again.  The x, y, width, and height
arguments to the imageUpdate callback method should be ignored.
@see java.awt.Graphics#drawImage
@see #imageUpdate

"
      end

      attribute 443010 "ALLBITS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
a static image which was previously drawn is now complete and can
be drawn again in its final form.  The x, y, width, and height
arguments to the imageUpdate callback method should be ignored.
@see java.awt.Graphics#drawImage
@see #imageUpdate

"
      end

      attribute 443138 "ERROR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
an image which was being tracked asynchronously has encountered
an error.  No further information will become available and
drawing the image will fail.
As a convenience, the ABORT flag will be indicated at the same
time to indicate that the image production was aborted.
@see #imageUpdate

"
      end

      attribute 443266 "ABORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 128"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag in the infoflags argument to imageUpdate indicates that
an image which was being tracked asynchronously was aborted before
production was complete.  No more information will become available
without further action to trigger another image production sequence.
If the ERROR flag was not also set in this image update, then
accessing any of the data in the image will restart the production
again, probably from the beginning.
@see #imageUpdate

"
      end
    end

    class 341122 "BufferStrategy"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>BufferStrategy</code> class represents the mechanism with which
to organize complex memory on a particular <code>Canvas</code> or
<code>Window</code>.  Hardware and software limitations determine whether and
how a particular buffer strategy can be implemented.  These limitations
are detectable through the capabilities of the
<code>GraphicsConfiguration</code> used when creating the
<code>Canvas</code> or <code>Window</code>.
<p>
It is worth noting that the terms <i>buffer</i> and <i>surface</i> are meant
to be synonymous: an area of contiguous memory, either in video device
memory or in system memory.
<p>
There are several types of complex buffer strategies, including
sequential ring buffering and blit buffering.
Sequential ring buffering (i.e., double or triple
buffering) is the most common; an application draws to a single <i>back
buffer</i> and then moves the contents to the front (display) in a single
step, either by copying the data or moving the video pointer.
Moving the video pointer exchanges the buffers so that the first buffer
drawn becomes the <i>front buffer</i>, or what is currently displayed on the
device; this is called <i>page flipping</i>.
<p>
Alternatively, the contents of the back buffer can be copied, or
<i>blitted</i> forward in a chain instead of moving the video pointer.
<pre>{@code
Double buffering:

                   ***********         ***********
                   *         * ------> *         *
[To display] <---- * Front B *   Show  * Back B. * <---- Rendering
                   *         * <------ *         *
                   ***********         ***********

Triple buffering:

[To      ***********         ***********        ***********
display] *         * --------+---------+------> *         *
   <---- * Front B *   Show  * Mid. B. *        * Back B. * <---- Rendering
         *         * <------ *         * <----- *         *
         ***********         ***********        ***********

}</pre>
<p>
Here is an example of how buffer strategies can be created and used:
<pre><code>

// Check the capabilities of the GraphicsConfiguration
...

// Create our component
Window w = new Window(gc);

// Show our window
w.setVisible(true);

// Create a general double-buffering strategy
w.createBufferStrategy(2);
BufferStrategy strategy = w.getBufferStrategy();

// Main loop
while (!done) {
    // Prepare for rendering the next frame
    // ...

    // Render single frame
    do {
        // The following loop ensures that the contents of the drawing buffer
        // are consistent in case the underlying surface was recreated
        do {
            // Get a new graphics context every time through the loop
            // to make sure the strategy is validated
            Graphics graphics = strategy.getDrawGraphics();

            // Render to graphics
            // ...

            // Dispose the graphics
            graphics.dispose();

            // Repeat the rendering if the drawing buffer contents
            // were restored
        } while (strategy.contentsRestored());

        // Display the buffer
        strategy.show();

        // Repeat the rendering if the drawing buffer was lost
    } while (strategy.contentsLost());
}

// Dispose the window
w.setVisible(false);
w.dispose();
</code></pre>

@see java.awt.Window
@see java.awt.Canvas
@see java.awt.GraphicsConfiguration
@see VolatileImage
@author Michael Martak
@since 1.4
"
      operation 1902338 "getCapabilities"
	abstract public return_type class_ref 344578 // BufferCapabilities
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>BufferCapabilities</code> for this
<code>BufferStrategy</code>.

@return the buffering capabilities of this strategy
"
      end

      operation 1902466 "getDrawGraphics"
	abstract public return_type class_ref 343682 // Graphics
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a graphics context for the drawing buffer.  This method may not
be synchronized for performance reasons; use of this method by multiple
threads should be handled at the application level.  Disposal of the
graphics object obtained must be handled by the application.

@return a graphics context for the drawing buffer
"
      end

      operation 1902594 "contentsLost"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the drawing buffer was lost since the last call to
<code>getDrawGraphics</code>.  Since the buffers in a buffer strategy
are usually type <code>VolatileImage</code>, they may become lost.
For a discussion on lost buffers, see <code>VolatileImage</code>.

@return Whether or not the drawing buffer was lost since the last call
to <code>getDrawGraphics</code>.
@see java.awt.image.VolatileImage
"
      end

      operation 1902722 "contentsRestored"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the drawing buffer was recently restored from a lost
state and reinitialized to the default background color (white).
Since the buffers in a buffer strategy are usually type
<code>VolatileImage</code>, they may become lost.  If a surface has
been recently restored from a lost state since the last call to
<code>getDrawGraphics</code>, it may require repainting.
For a discussion on lost buffers, see <code>VolatileImage</code>.

@return Whether or not the drawing buffer was restored since the last
        call to <code>getDrawGraphics</code>.
@see java.awt.image.VolatileImage
"
      end

      operation 1902850 "show"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes the next available buffer visible by either copying the memory
(blitting) or changing the display pointer (flipping).
"
      end

      operation 1902978 "dispose"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases system resources currently consumed by this
<code>BufferStrategy</code> and
removes it from the associated Component.  After invoking this
method, <code>getBufferStrategy</code> will return null.  Trying
to use a <code>BufferStrategy</code> after it has been disposed will
result in undefined behavior.

@see java.awt.Window#createBufferStrategy
@see java.awt.Canvas#createBufferStrategy
@see java.awt.Window#getBufferStrategy
@see java.awt.Canvas#getBufferStrategy
@since 1.6
"
      end
    end

    class 344066 "ImageProducer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface for objects which can produce the image data for Images.
Each image contains an ImageProducer which is used to reconstruct
the image whenever it is needed, for example, when a new size of the
Image is scaled, or when the width or height of the Image is being
requested.

@see ImageConsumer

@author      Jim Graham
"
      operation 6667906 "addConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers an <code>ImageConsumer</code> with the
<code>ImageProducer</code> for access to the image data
during a later reconstruction of the <code>Image</code>.
The <code>ImageProducer</code> may, at its discretion,
start delivering the image data to the consumer
using the <code>ImageConsumer</code> interface immediately,
or when the next available image reconstruction is triggered
by a call to the <code>startProduction</code> method.
@param ic the specified <code>ImageConsumer</code>
@see #startProduction
"
      end

      operation 6668034 "isConsumer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if a specified <code>ImageConsumer</code>
object is currently registered with this
<code>ImageProducer</code> as one of its consumers.
@param ic the specified <code>ImageConsumer</code>
@return <code>true</code> if the specified
        <code>ImageConsumer</code> is registered with
        this <code>ImageProducer</code>;
        <code>false</code> otherwise.
"
      end

      operation 6668162 "removeConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified <code>ImageConsumer</code> object
from the list of consumers currently registered to
receive image data.  It is not considered an error
to remove a consumer that is not currently registered.
The <code>ImageProducer</code> should stop sending data
to this consumer as soon as is feasible.
@param ic the specified <code>ImageConsumer</code>
"
      end

      operation 6668290 "startProduction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the specified <code>ImageConsumer</code> object
as a consumer and starts an immediate reconstruction of
the image data which will then be delivered to this
consumer and any other consumer which might have already
been registered with the producer.  This method differs
from the addConsumer method in that a reproduction of
the image data should be triggered as soon as possible.
@param ic the specified <code>ImageConsumer</code>
@see #addConsumer
"
      end

      operation 6668418 "requestTopDownLeftRightResend"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests, on behalf of the <code>ImageConsumer</code>,
that the <code>ImageProducer</code> attempt to resend
the image data one more time in TOPDOWNLEFTRIGHT order
so that higher quality conversion algorithms which
depend on receiving pixels in order can be used to
produce a better output version of the image.  The
<code>ImageProducer</code> is free to
ignore this call if it cannot resend the data in that
order.  If the data can be resent, the
<code>ImageProducer</code> should respond by executing
the following minimum set of <code>ImageConsumer</code>
method calls:
<pre>{@code
 ic.setHints(TOPDOWNLEFTRIGHT | < otherhints >);
 ic.setPixels(...);      // As many times as needed
 ic.imageComplete();
}</pre>
@param ic the specified <code>ImageConsumer</code>
@see ImageConsumer#setHints
"
      end
    end

    class 344194 "VolatileImage"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "VolatileImage is an image which can lose its
contents at any time due to circumstances beyond the control of the
application (e.g., situations caused by the operating system or by
other applications). Because of the potential for hardware acceleration,
a VolatileImage object can have significant performance benefits on
some platforms.
<p>
The drawing surface of an image (the memory where the image contents
actually reside) can be lost or invalidated, causing the contents of that
memory to go away.  The drawing surface thus needs to be restored
or recreated and the contents of that surface need to be
re-rendered.  VolatileImage provides an interface for
allowing the user to detect these problems and fix them
when they occur.
<p>
When a VolatileImage object is created, limited system resources
such as video memory (VRAM) may be allocated in order to support
the image.
When a VolatileImage object is no longer used, it may be
garbage-collected and those system resources will be returned,
but this process does not happen at guaranteed times.
Applications that create many VolatileImage objects (for example,
a resizing window may force recreation of its back buffer as the
size changes) may run out of optimal system resources for new
VolatileImage objects simply because the old objects have not
yet been removed from the system.
(New VolatileImage objects may still be created, but they
may not perform as well as those created in accelerated
memory).
The flush method may be called at any time to proactively release
the resources used by a VolatileImage so that it does not prevent
subsequent VolatileImage objects from being accelerated.
In this way, applications can have more control over the state
of the resources taken up by obsolete VolatileImage objects.
<p>
This image should not be subclassed directly but should be created
by using the {@link java.awt.Component#createVolatileImage(int, int)
Component.createVolatileImage} or
{@link java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int, int)
GraphicsConfiguration.createCompatibleVolatileImage(int, int)} methods.
<P>
An example of using a VolatileImage object follows:
<pre>
// image creation
VolatileImage vImg = createVolatileImage(w, h);


// rendering to the image
void renderOffscreen() {
     do {
         if (vImg.validate(getGraphicsConfiguration()) ==
             VolatileImage.IMAGE_INCOMPATIBLE)
         {
             // old vImg doesn't work with new GraphicsConfig; re-create it
             vImg = createVolatileImage(w, h);
         }
         Graphics2D g = vImg.createGraphics();
         //
         // miscellaneous rendering commands...
         //
         g.dispose();
     } while (vImg.contentsLost());
}


// copying from the image (here, gScreen is the Graphics
// object for the onscreen window)
do {
     int returnCode = vImg.validate(getGraphicsConfiguration());
     if (returnCode == VolatileImage.IMAGE_RESTORED) {
         // Contents need to be restored
         renderOffscreen();      // restore contents
     } else if (returnCode == VolatileImage.IMAGE_INCOMPATIBLE) {
         // old vImg doesn't work with new GraphicsConfig; re-create it
         vImg = createVolatileImage(w, h);
         renderOffscreen();
     }
     gScreen.drawImage(vImg, 0, 0, this);
} while (vImg.contentsLost());
</pre>
<P>
Note that this class subclasses from the {@link Image} class, which
includes methods that take an {@link ImageObserver} parameter for
asynchronous notifications as information is received from
a potential {@link ImageProducer}.  Since this <code>VolatileImage</code>
is not loaded from an asynchronous source, the various methods that take
an <code>ImageObserver</code> parameter will behave as if the data has
already been obtained from the <code>ImageProducer</code>.
Specifically, this means that the return values from such methods
will never indicate that the information is not yet available and
the <code>ImageObserver</code> used in such methods will never
need to be recorded for an asynchronous callback notification.
@since 1.4
"
      classrelation 3076866 // <generalisation>
	relation 3076866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3076866 // <generalisation>
	  b parent class_ref 340098 // Image
      end

      classrelation 3076994 // <realization>
	relation 3076994 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3076994 // <realization>
	  b parent class_ref 860546 // Transparency
      end

      attribute 1623042 "IMAGE_OK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Return codes for validate() method

Validated image is ready to use as-is.

"
      end

      attribute 1623170 "IMAGE_RESTORED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Validated image has been restored and is now ready to use.
Note that restoration causes contents of the image to be lost.

"
      end

      attribute 1623298 "IMAGE_INCOMPATIBLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Validated image is incompatible with supplied
<code>GraphicsConfiguration</code> object and should be
re-created as appropriate.  Usage of the image as-is
after receiving this return code from <code>validate</code>
is undefined.

"
      end

      operation 6699138 "getSnapshot"
	abstract public return_type class_ref 311554 // BufferedImage
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a static snapshot image of this object.  The
<code>BufferedImage</code> returned is only current with
the <code>VolatileImage</code> at the time of the request
and will not be updated with any future changes to the
<code>VolatileImage</code>.
@return a {@link BufferedImage} representation of this
         <code>VolatileImage</code>
@see BufferedImage
"
      end

      operation 6699266 "getWidth"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of the <code>VolatileImage</code>.
@return the width of this <code>VolatileImage</code>.
"
      end

      operation 6699394 "getHeight"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of the <code>VolatileImage</code>.
@return the height of this <code>VolatileImage</code>.
"
      end

      operation 6699522 "getSource"
	public return_type class_ref 344066 // ImageProducer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Image overrides

This returns an ImageProducer for this VolatileImage.
Note that the VolatileImage object is optimized for
rendering operations and blitting to the screen or other
VolatileImage objects, as opposed to reading back the
pixels of the image.  Therefore, operations such as
<code>getSource</code> may not perform as fast as
operations that do not rely on reading the pixels.
Note also that the pixel values read from the image are current
with those in the image only at the time that they are
retrieved. This method takes a snapshot
of the image at the time the request is made and the
ImageProducer object returned works with
that static snapshot image, not the original VolatileImage.
Calling getSource()
is equivalent to calling getSnapshot().getSource().
@return an {@link ImageProducer} that can be used to produce the
pixels for a <code>BufferedImage</code> representation of
this Image.
@see ImageProducer
@see #getSnapshot()
"
      end

      operation 6699650 "getGraphics"
	public return_type class_ref 343682 // Graphics
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " REMIND: if we want any decent performance for getScaledInstance(),
 we should override the Image implementation of it...

This method returns a {@link Graphics2D}, but is here
for backwards compatibility.  {@link #createGraphics() createGraphics} is more
convenient, since it is declared to return a
<code>Graphics2D</code>.
@return a <code>Graphics2D</code>, which can be used to draw into
         this image.
"
      end

      operation 6699778 "createGraphics"
	abstract public return_type class_ref 338178 // Graphics2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Graphics2D</code>, which can be used to draw into
this <code>VolatileImage</code>.
@return a <code>Graphics2D</code>, used for drawing into this
         image.
"
      end

      operation 6699906 "validate"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "gc" type class_ref 340994 // GraphicsConfiguration
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Volatile management methods

Attempts to restore the drawing surface of the image if the surface
had been lost since the last <code>validate</code> call.  Also
validates this image against the given GraphicsConfiguration
parameter to see whether operations from this image to the
GraphicsConfiguration are compatible.  An example of an
incompatible combination might be a situation where a VolatileImage
object was created on one graphics device and then was used
to render to a different graphics device.  Since VolatileImage
objects tend to be very device-specific, this operation might
not work as intended, so the return code from this validate
call would note that incompatibility.  A null or incorrect
value for gc may cause incorrect values to be returned from
<code>validate</code> and may cause later problems with rendering.

@param   gc   a <code>GraphicsConfiguration</code> object for this
         image to be validated against.  A null gc implies that the
         validate method should skip the compatibility test.
@return  <code>IMAGE_OK</code> if the image did not need validation<BR>
         <code>IMAGE_RESTORED</code> if the image needed restoration.
         Restoration implies that the contents of the image may have
         been affected and the image may need to be re-rendered.<BR>
         <code>IMAGE_INCOMPATIBLE</code> if the image is incompatible
         with the <code>GraphicsConfiguration</code> object passed
         into the <code>validate</code> method.  Incompatibility
         implies that the image may need to be recreated with a
         new <code>Component</code> or
         <code>GraphicsConfiguration</code> in order to get an image
         that can be used successfully with this
         <code>GraphicsConfiguration</code>.
         An incompatible image is not checked for whether restoration
         was necessary, so the state of the image is unchanged
         after a return value of <code>IMAGE_INCOMPATIBLE</code>
         and this return value implies nothing about whether the
         image needs to be restored.
@see java.awt.GraphicsConfiguration
@see java.awt.Component
@see #IMAGE_OK
@see #IMAGE_RESTORED
@see #IMAGE_INCOMPATIBLE
"
      end

      operation 6700034 "contentsLost"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if rendering data was lost since last
<code>validate</code> call.  This method should be called by the
application at the end of any series of rendering operations to
or from the image to see whether
the image needs to be validated and the rendering redone.
@return <code>true</code> if the drawing surface needs to be restored;
<code>false</code> otherwise.
"
      end

      operation 6700162 "getCapabilities"
	abstract public return_type class_ref 344322 // ImageCapabilities
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an ImageCapabilities object which can be
inquired as to the specific capabilities of this
VolatileImage.  This would allow programmers to find
out more runtime information on the specific VolatileImage
object that they have created.  For example, the user
might create a VolatileImage but the system may have
no video memory left for creating an image of that
size, so although the object is a VolatileImage, it is
not as accelerated as other VolatileImage objects on
this platform might be.  The user might want that
information to find other solutions to their problem.
@return an <code>ImageCapabilities</code> object that contains
        the capabilities of this <code>VolatileImage</code>.
@since 1.4
"
      end

      attribute 1623426 "transparency"
	protected explicit_type "int"
	init_value " TRANSLUCENT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The transparency value with which this image was created.
@see java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int,
     int,int)
@see java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int,
     int,ImageCapabilities,int)
@see Transparency
@since 1.5

"
      end

      operation 6700290 "getTransparency"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transparency.  Returns either OPAQUE, BITMASK,
or TRANSLUCENT.
@return the transparency of this <code>VolatileImage</code>.
@see Transparency#OPAQUE
@see Transparency#BITMASK
@see Transparency#TRANSLUCENT
@since 1.5
"
      end
    end

    class 379778 "RGBImageFilter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides an easy way to create an ImageFilter which modifies
the pixels of an image in the default RGB ColorModel.  It is meant to
be used in conjunction with a FilteredImageSource object to produce
filtered versions of existing images.  It is an abstract class that
provides the calls needed to channel all of the pixel data through a
single method which converts pixels one at a time in the default RGB
ColorModel regardless of the ColorModel being used by the ImageProducer.
The only method which needs to be defined to create a useable image
filter is the filterRGB method.  Here is an example of a definition
of a filter which swaps the red and blue components of an image:
<pre>{@code

     class RedBlueSwapFilter extends RGBImageFilter {
         public RedBlueSwapFilter() {
             // The filter's operation does not depend on the
             // pixel's location, so IndexColorModels can be
             // filtered directly.
             canFilterIndexColorModel = true;
         }

         public int filterRGB(int x, int y, int rgb) {
             return ((rgb & 0xff00ff00)
                     | ((rgb & 0xff0000) >> 16)
                     | ((rgb & 0xff) << 16));
         }
     }

}</pre>

@see FilteredImageSource
@see ImageFilter
@see ColorModel#getRGBdefault

@author      Jim Graham
"
      classrelation 678018 // <generalisation>
	relation 678018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 678018 // <generalisation>
	  b parent class_ref 379906 // ImageFilter
      end

      classrelation 678146 // origmodel (<unidirectional association>)
	relation 678146 --->
	  a role_name "origmodel" protected
	    comment "
The <code>ColorModel</code> to be replaced by
<code>newmodel</code> when the user calls
{@link #substituteColorModel(ColorModel, ColorModel) substituteColorModel}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 678146 // origmodel (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      classrelation 678274 // newmodel (<unidirectional association>)
	relation 678274 --->
	  a role_name "newmodel" protected
	    comment "
The <code>ColorModel</code> with which to
replace <code>origmodel</code> when the user calls
<code>substituteColorModel</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 678274 // newmodel (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      attribute 496898 "canFilterIndexColorModel"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This boolean indicates whether or not it is acceptable to apply
the color filtering of the filterRGB method to the color table
entries of an IndexColorModel object in lieu of pixel by pixel
filtering.  Subclasses should set this variable to true in their
constructor if their filterRGB method does not depend on the
coordinate of the pixel being filtered.
@see #substituteColorModel
@see #filterRGB
@see IndexColorModel

"
      end

      operation 2155522 "setColorModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "model" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the ColorModel is an IndexColorModel and the subclass has
set the canFilterIndexColorModel flag to true, we substitute
a filtered version of the color model here and wherever
that original ColorModel object appears in the setPixels methods.
If the ColorModel is not an IndexColorModel or is null, this method
overrides the default ColorModel used by the ImageProducer and
specifies the default RGB ColorModel instead.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer
@see ColorModel#getRGBdefault
"
      end

      operation 2155650 "substituteColorModel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "oldcm" type class_ref 312066 // ColorModel
	  param inout name "newcm" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers two ColorModel objects for substitution.  If the oldcm
is encountered during any of the setPixels methods, the newcm
is substituted and the pixels passed through
untouched (but with the new ColorModel object).
@param oldcm the ColorModel object to be replaced on the fly
@param newcm the ColorModel object to replace oldcm on the fly
"
      end

      operation 2155778 "filterIndexColorModel"
	public return_type class_ref 317058 // IndexColorModel
	nparams 1
	  param inout name "icm" type class_ref 317058 // IndexColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters an IndexColorModel object by running each entry in its
color tables through the filterRGB function that RGBImageFilter
subclasses must provide.  Uses coordinates of -1 to indicate that
a color table entry is being filtered rather than an actual
pixel value.
@param icm the IndexColorModel object to be filtered
@exception NullPointerException if <code>icm</code> is null
@return a new IndexColorModel representing the filtered colors
"
      end

      operation 2155906 "filterRGBPixels"
	public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters a buffer of pixels in the default RGB ColorModel by passing
them one by one through the filterRGB method.
@param x the X coordinate of the upper-left corner of the region
         of pixels
@param y the Y coordinate of the upper-left corner of the region
         of pixels
@param w the width of the region of pixels
@param h the height of the region of pixels
@param pixels the array of pixels
@param off the offset into the <code>pixels</code> array
@param scansize the distance from one row of pixels to the next
       in the array
@see ColorModel#getRGBdefault
@see #filterRGB
"
      end

      operation 2156034 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the ColorModel object is the same one that has already
been converted, then simply passes the pixels through with the
converted ColorModel. Otherwise converts the buffer of byte
pixels to the default RGB ColorModel and passes the converted
buffer to the filterRGBPixels method to be converted one by one.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ColorModel#getRGBdefault
@see #filterRGBPixels
"
      end

      operation 2156162 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the ColorModel object is the same one that has already
been converted, then simply passes the pixels through with the
converted ColorModel, otherwise converts the buffer of integer
pixels to the default RGB ColorModel and passes the converted
buffer to the filterRGBPixels method to be converted one by one.
Converts a buffer of integer pixels to the default RGB ColorModel
and passes the converted buffer to the filterRGBPixels method.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ColorModel#getRGBdefault
@see #filterRGBPixels
"
      end

      operation 2156290 "filterRGB"
	abstract public explicit_return_type "int"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "rgb" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclasses must specify a method to convert a single input pixel
in the default RGB ColorModel to a single output pixel.
@param x the X coordinate of the pixel
@param y the Y coordinate of the pixel
@param rgb the integer pixel representation in the default RGB
           color model
@return a filtered pixel in the default RGB color model.
@see ColorModel#getRGBdefault
@see #filterRGBPixels
"
      end
    end

    class 379906 "ImageFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements a filter for the set of interface methods that
are used to deliver data from an ImageProducer to an ImageConsumer.
It is meant to be used in conjunction with a FilteredImageSource
object to produce filtered versions of existing images.  It is a
base class that provides the calls needed to implement a \"Null filter\"
which has no effect on the data being passed through.  Filters should
subclass this class and override the methods which deal with the
data that needs to be filtered and modify it as necessary.

@see FilteredImageSource
@see ImageConsumer

@author      Jim Graham
"
      classrelation 677634 // <realization>
	relation 677634 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 677634 // <realization>
	  b parent class_ref 380034 // ImageConsumer
      end

      classrelation 677762 // <realization>
	relation 677762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 677762 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 677890 // consumer (<unidirectional association>)
	relation 677890 --->
	  a role_name "consumer" protected
	    comment "
The consumer of the particular image data stream for which this
instance of the ImageFilter is filtering data.  It is not
initialized during the constructor, but rather during the
getFilterInstance() method call when the FilteredImageSource
is creating a unique instance of this object for a particular
image data stream.
@see #getFilterInstance
@see ImageConsumer

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 677890 // consumer (<unidirectional association>)
	  b parent class_ref 380034 // ImageConsumer
      end

      operation 2154242 "getFilterInstance"
	public return_type class_ref 379906 // ImageFilter
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a unique instance of an ImageFilter object which will
actually perform the filtering for the specified ImageConsumer.
The default implementation just clones this object.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@param ic the specified <code>ImageConsumer</code>
@return an <code>ImageFilter</code> used to perform the
        filtering for the specified <code>ImageConsumer</code>.
"
      end

      operation 2154370 "setDimensions"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the setDimensions method
of the ImageConsumer interface.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer#setDimensions
"
      end

      operation 2154498 "setProperties"
	public explicit_return_type "void"
	nparams 1
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Passes the properties from the source object along after adding a
property indicating the stream of filters it has been run through.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.

@param props the properties from the source object
@exception NullPointerException if <code>props</code> is null
"
      end

      operation 2154626 "setColorModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "model" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filter the information provided in the setColorModel method
of the ImageConsumer interface.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer#setColorModel
"
      end

      operation 2154754 "setHints"
	public explicit_return_type "void"
	nparams 1
	  param in name "hints" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the setHints method
of the ImageConsumer interface.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer#setHints
"
      end

      operation 2154882 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the setPixels method of the
ImageConsumer interface which takes an array of bytes.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer#setPixels
"
      end

      operation 2155010 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the setPixels method of the
ImageConsumer interface which takes an array of integers.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer#setPixels
"
      end

      operation 2155138 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the imageComplete method of
the ImageConsumer interface.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer#imageComplete
"
      end

      operation 2155266 "resendTopDownLeftRight"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ip" type class_ref 344066 // ImageProducer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Responds to a request for a TopDownLeftRight (TDLR) ordered resend
of the pixel data from an <code>ImageConsumer</code>.
When an <code>ImageConsumer</code> being fed
by an instance of this <code>ImageFilter</code>
requests a resend of the data in TDLR order,
the <code>FilteredImageSource</code>
invokes this method of the <code>ImageFilter</code>.

<p>

An <code>ImageFilter</code> subclass might override this method or not,
depending on if and how it can send data in TDLR order.
Three possibilities exist:

<ul>
<li>
Do not override this method.
This makes the subclass use the default implementation,
which is to
forward the request
to the indicated <code>ImageProducer</code>
using this filter as the requesting <code>ImageConsumer</code>.
This behavior
is appropriate if the filter can determine
that it will forward the pixels
in TDLR order if its upstream producer object
sends them in TDLR order.

<li>
Override the method to simply send the data.
This is appropriate if the filter can handle the request itself &#151;
for example,
if the generated pixels have been saved in some sort of buffer.

<li>
Override the method to do nothing.
This is appropriate
if the filter cannot produce filtered data in TDLR order.
</ul>

@see ImageProducer#requestTopDownLeftRightResend
@param ip the ImageProducer that is feeding this instance of
the filter - also the ImageProducer that the request should be
forwarded to if necessary
@exception NullPointerException if <code>ip</code> is null
"
      end

      operation 2155394 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones this object.
"
      end
    end

    class 380034 "ImageConsumer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The interface for objects expressing interest in image data through
the ImageProducer interfaces.  When a consumer is added to an image
producer, the producer delivers all of the data about the image
using the method calls defined in this interface.

@see ImageProducer

@author      Jim Graham
"
      operation 2153346 "setDimensions"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dimensions of the source image are reported using the
setDimensions method call.
@param width the width of the source image
@param height the height of the source image
"
      end

      operation 2153474 "setProperties"
	public explicit_return_type "void"
	nparams 1
	  param inout name "props" type class_ref 137090 // Hashtable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the extensible list of properties associated with this image.
@param props the list of properties to be associated with this
       image
"
      end

      operation 2153602 "setColorModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "model" type class_ref 312066 // ColorModel
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ColorModel object used for the majority of
the pixels reported using the setPixels method
calls.  Note that each set of pixels delivered using setPixels
contains its own ColorModel object, so no assumption should
be made that this model will be the only one used in delivering
pixel values.  A notable case where multiple ColorModel objects
may be seen is a filtered image when for each set of pixels
that it filters, the filter
determines  whether the
pixels can be sent on untouched, using the original ColorModel,
or whether the pixels should be modified (filtered) and passed
on using a ColorModel more convenient for the filtering process.
@param model the specified <code>ColorModel</code>
@see ColorModel
"
      end

      operation 2153730 "setHints"
	public explicit_return_type "void"
	nparams 1
	  param in name "hintflags" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the hints that the ImageConsumer uses to process the
pixels delivered by the ImageProducer.
The ImageProducer can deliver the pixels in any order, but
the ImageConsumer may be able to scale or convert the pixels
to the destination ColorModel more efficiently or with higher
quality if it knows some information about how the pixels will
be delivered up front.  The setHints method should be called
before any calls to any of the setPixels methods with a bit mask
of hints about the manner in which the pixels will be delivered.
If the ImageProducer does not follow the guidelines for the
indicated hint, the results are undefined.
@param hintflags a set of hints that the ImageConsumer uses to
       process the pixels
"
      end

      attribute 495746 "RANDOMPIXELORDER"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pixels will be delivered in a random order.  This tells the
ImageConsumer not to use any optimizations that depend on the
order of pixel delivery, which should be the default assumption
in the absence of any call to the setHints method.
@see #setHints

"
      end

      attribute 495874 "TOPDOWNLEFTRIGHT"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pixels will be delivered in top-down, left-to-right order.
@see #setHints

"
      end

      attribute 496002 "COMPLETESCANLINES"
	public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pixels will be delivered in (multiples of) complete scanlines
at a time.
@see #setHints

"
      end

      attribute 496130 "SINGLEPASS"
	public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pixels will be delivered in a single pass.  Each pixel will
appear in only one call to any of the setPixels methods.  An
example of an image format which does not meet this criterion
is a progressive JPEG image which defines pixels in multiple
passes, each more refined than the previous.
@see #setHints

"
      end

      attribute 496258 "SINGLEFRAME"
	public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The image contain a single static image.  The pixels will be defined
in calls to the setPixels methods and then the imageComplete method
will be called with the STATICIMAGEDONE flag after which no more
image data will be delivered.  An example of an image type which
would not meet these criteria would be the output of a video feed,
or the representation of a 3D rendering being manipulated
by the user.  The end of each frame in those types of images will
be indicated by calling imageComplete with the SINGLEFRAMEDONE flag.
@see #setHints
@see #imageComplete

"
      end

      operation 2153858 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delivers the pixels of the image with one or more calls
to this method.  Each call specifies the location and
size of the rectangle of source pixels that are contained in
the array of pixels.  The specified ColorModel object should
be used to convert the pixels into their corresponding color
and alpha components.  Pixel (m,n) is stored in the pixels array
at index (n * scansize + m + off).  The pixels delivered using
this method are all stored as bytes.
@param x the X coordinate of the upper-left corner of the
       area of pixels to be set
@param y the Y coordinate of the upper-left corner of the
       area of pixels to be set
@param w the width of the area of pixels
@param h the height of the area of pixels
@param model the specified <code>ColorModel</code>
@param pixels the array of pixels
@param off the offset into the <code>pixels</code> array
@param scansize the distance from one row of pixels to the next in
the <code>pixels</code> array
@see ColorModel
"
      end

      operation 2153986 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The pixels of the image are delivered using one or more calls
to the setPixels method.  Each call specifies the location and
size of the rectangle of source pixels that are contained in
the array of pixels.  The specified ColorModel object should
be used to convert the pixels into their corresponding color
and alpha components.  Pixel (m,n) is stored in the pixels array
at index (n * scansize + m + off).  The pixels delivered using
this method are all stored as ints.
this method are all stored as ints.
@param x the X coordinate of the upper-left corner of the
       area of pixels to be set
@param y the Y coordinate of the upper-left corner of the
       area of pixels to be set
@param w the width of the area of pixels
@param h the height of the area of pixels
@param model the specified <code>ColorModel</code>
@param pixels the array of pixels
@param off the offset into the <code>pixels</code> array
@param scansize the distance from one row of pixels to the next in
the <code>pixels</code> array
@see ColorModel
"
      end

      operation 2154114 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The imageComplete method is called when the ImageProducer is
finished delivering all of the pixels that the source image
contains, or when a single frame of a multi-frame animation has
been completed, or when an error in loading or producing the
image has occurred.  The ImageConsumer should remove itself from the
list of consumers registered with the ImageProducer at this time,
unless it is interested in successive frames.
@param status the status of image loading
@see ImageProducer#removeConsumer
"
      end

      attribute 496386 "IMAGEERROR"
	public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An error was encountered while producing the image.
@see #imageComplete

"
      end

      attribute 496514 "SINGLEFRAMEDONE"
	public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "One frame of the image is complete but there are more frames
to be delivered.
@see #imageComplete

"
      end

      attribute 496642 "STATICIMAGEDONE"
	public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The image is complete and there are no more pixels or frames
to be delivered.
@see #imageComplete

"
      end

      attribute 496770 "IMAGEABORTED"
	public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The image creation process was deliberately aborted.
@see #imageComplete

"
      end
    end

    class 867202 "BufferedImageOp"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface describes single-input/single-output
operations performed on <CODE>BufferedImage</CODE> objects.
It is implemented by <CODE>AffineTransformOp</CODE>,
<CODE>ConvolveOp</CODE>, <CODE>ColorConvertOp</CODE>, <CODE>RescaleOp</CODE>,
and <CODE>LookupOp</CODE>.  These objects can be passed into
a <CODE>BufferedImageFilter</CODE> to operate on a
<CODE>BufferedImage</CODE> in the
ImageProducer-ImageFilter-ImageConsumer paradigm.
<p>
Classes that implement this
interface must specify whether or not they allow in-place filtering--
filter operations where the source object is equal to the destination
object.
<p>
This interface cannot be used to describe more sophisticated operations
such as those that take multiple sources. Note that this restriction also
means that the values of the destination pixels prior to the operation are
not used as input to the filter operation.

@see BufferedImage
@see BufferedImageFilter
@see AffineTransformOp
@see BandCombineOp
@see ColorConvertOp
@see ConvolveOp
@see LookupOp
@see RescaleOp
"
      operation 6599554 "filter"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "dest" type class_ref 311554 // BufferedImage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a single-input/single-output operation on a
<CODE>BufferedImage</CODE>.
If the color models for the two images do not match, a color
conversion into the destination color model is performed.
If the destination image is null,
a <CODE>BufferedImage</CODE> with an appropriate <CODE>ColorModel</CODE>
is created.
<p>
An <CODE>IllegalArgumentException</CODE> may be thrown if the source
and/or destination image is incompatible with the types of images       $
allowed by the class implementing this filter.

@param src The <CODE>BufferedImage</CODE> to be filtered
@param dest The <CODE>BufferedImage</CODE> in which to store the results$

@return The filtered <CODE>BufferedImage</CODE>.

@throws IllegalArgumentException If the source and/or destination
image is not compatible with the types of images allowed by the class
implementing this filter.
"
      end

      operation 6599682 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311554 // BufferedImage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the filtered destination image.
An <CODE>IllegalArgumentException</CODE> may be thrown if the source
image is incompatible with the types of images allowed
by the class implementing this filter.

@param src The <CODE>BufferedImage</CODE> to be filtered

@return The <CODE>Rectangle2D</CODE> representing the destination
image's bounding box.
"
      end

      operation 6599810 "createCompatibleDestImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "destCM" type class_ref 312066 // ColorModel
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination image with the correct size and number of
bands.
An <CODE>IllegalArgumentException</CODE> may be thrown if the source
image is incompatible with the types of images allowed
by the class implementing this filter.

@param src The <CODE>BufferedImage</CODE> to be filtered
@param destCM <CODE>ColorModel</CODE> of the destination.  If null,
the <CODE>ColorModel</CODE> of the source is used.

@return The zeroed destination image.
"
      end

      operation 6599938 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the corresponding destination point given a
point in the source image.  If <CODE>dstPt</CODE> is specified, it
is used to hold the return value.
@param srcPt the <code>Point2D</code> that represents the point in
the source image
@param dstPt The <CODE>Point2D</CODE> in which to store the result

@return The <CODE>Point2D</CODE> in the destination image that
corresponds to the specified point in the source image.
"
      end

      operation 6600066 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints for this operation.

@return The <CODE>RenderingHints</CODE> object for this
<CODE>BufferedImageOp</CODE>.  Returns
null if no hints have been set.
"
      end
    end

    class 874882 "DirectColorModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>DirectColorModel</code> class is a <code>ColorModel</code>
class that works with pixel values that represent RGB
color and alpha information as separate samples and that pack all
samples for a single pixel into a single int, short, or byte quantity.
This class can be used only with ColorSpaces of type ColorSpace.TYPE_RGB.
In addition, for each component of the ColorSpace, the minimum
normalized component value obtained via the <code>getMinValue()</code>
method of ColorSpace must be 0.0, and the maximum value obtained via
the <code>getMaxValue()</code> method must be 1.0 (these min/max
values are typical for RGB spaces).
There must be three color samples in the pixel values and there can
be a single alpha sample.  For those methods that use a primitive array
pixel representation of type <code>transferType</code>, the array
length is always one.  The transfer
types supported are DataBuffer.TYPE_BYTE,
DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT.
Color and alpha samples are stored in the single
element of the array in bits indicated by bit masks.  Each bit mask
must be contiguous and masks must not overlap.  The same masks apply to
the single int pixel representation used by other methods.  The
correspondence of masks and color/alpha samples is as follows:
<ul>
<li> Masks are identified by indices running from 0 through 2
if no alpha is present, or 3 if an alpha is present.
<li> The first three indices refer to color samples;
index 0 corresponds to red, index 1 to green, and index 2 to blue.
<li> Index 3 corresponds to the alpha sample, if present.
</ul>
<p>
The translation from pixel values to color/alpha components for
display or processing purposes is a one-to-one correspondence of
samples to components.  A <code>DirectColorModel</code> is
typically used with image data which uses masks to define packed
samples.  For example, a <code>DirectColorModel</code> can be used in
conjunction with a <code>SinglePixelPackedSampleModel</code> to
construct a {@link BufferedImage}.  Normally the masks used by the
{@link SampleModel} and the <code>ColorModel</code> would be the
same.  However, if they are different, the color interpretation
of pixel data will be done according to the masks of the
<code>ColorModel</code>.
<p>
A single int pixel representation is valid for all objects of this
class, since it is always possible to represent pixel values used with
this class in a single int.  Therefore, methods which use this
representation will not throw an <code>IllegalArgumentException</code>
due to an invalid pixel value.
<p>
This color model is similar to an X11 TrueColor visual.
The default RGB ColorModel specified by the
{@link ColorModel#getRGBdefault() getRGBdefault} method is a
<code>DirectColorModel</code> with the following parameters:
<pre>
Number of bits:        32
Red mask:              0x00ff0000
Green mask:            0x0000ff00
Blue mask:             0x000000ff
Alpha mask:            0xff000000
Color space:           sRGB
isAlphaPremultiplied:  False
Transparency:          Transparency.TRANSLUCENT
transferType:          DataBuffer.TYPE_INT
</pre>
<p>
Many of the methods in this class are final. This is because the
underlying native graphics code makes assumptions about the layout
and operation of this class and those assumptions are reflected in
the implementations of the methods here that are marked final.  You
can subclass this class for other reasons, but you cannot override
or modify the behavior of those methods.

@see ColorModel
@see ColorSpace
@see SinglePixelPackedSampleModel
@see BufferedImage
@see ColorModel#getRGBdefault

"
      classrelation 3072770 // <generalisation>
	relation 3072770 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3072770 // <generalisation>
	  b parent class_ref 898946 // PackedColorModel
      end

      attribute 1613314 "red_mask"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1613442 "green_mask"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1613570 "blue_mask"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1613698 "alpha_mask"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1613826 "red_offset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1613954 "green_offset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614082 "blue_offset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614210 "alpha_offset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614338 "red_scale"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614466 "green_scale"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614594 "blue_scale"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614722 "alpha_scale"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614850 "is_LinearRGB"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1614978 "lRGBprecision"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1615106 "tosRGB8LUT"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1615234 "fromsRGB8LUT8"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1615362 "fromsRGB8LUT16"
	private explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6664066 "DirectColorModel"
	public explicit_return_type ""
	nparams 4
	  param in name "bits" explicit_type "int"
	  param in name "rmask" explicit_type "int"
	  param in name "gmask" explicit_type "int"
	  param in name "bmask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DirectColorModel</code> from the specified masks
that indicate which bits in an <code>int</code> pixel representation
contain the red, green and blue color samples.  As pixel values do not
contain alpha information, all pixels are treated as opaque, which
means that alpha&nbsp;=&nbsp;1.0.  All of the bits
in each mask must be contiguous and fit in the specified number
of least significant bits of an <code>int</code> pixel representation.
 The <code>ColorSpace</code> is the default sRGB space. The
transparency value is Transparency.OPAQUE.  The transfer type
is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
or DataBuffer.TYPE_INT that can hold a single pixel.
@param bits the number of bits in the pixel values; for example,
        the sum of the number of bits in the masks.
@param rmask specifies a mask indicating which bits in an
        integer pixel contain the red component
@param gmask specifies a mask indicating which bits in an
        integer pixel contain the green component
@param bmask specifies a mask indicating which bits in an
        integer pixel contain the blue component

"
      end

      operation 6664194 "DirectColorModel"
	public explicit_return_type ""
	nparams 5
	  param in name "bits" explicit_type "int"
	  param in name "rmask" explicit_type "int"
	  param in name "gmask" explicit_type "int"
	  param in name "bmask" explicit_type "int"
	  param in name "amask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DirectColorModel</code> from the specified masks
that indicate which bits in an <code>int</code> pixel representation
contain the red, green and blue color samples and the alpha sample,
if present.  If <code>amask</code> is 0, pixel values do not contain
alpha information and all pixels are treated as opaque, which means
that alpha&nbsp;=&nbsp;1.0.  All of the bits in each mask must
be contiguous and fit in the specified number of least significant bits
of an <code>int</code> pixel representation.  Alpha, if present, is not
premultiplied.  The <code>ColorSpace</code> is the default sRGB space.
The transparency value is Transparency.OPAQUE if no alpha is
present, or Transparency.TRANSLUCENT otherwise.  The transfer type
is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
or DataBuffer.TYPE_INT that can hold a single pixel.
@param bits the number of bits in the pixel values; for example,
        the sum of the number of bits in the masks.
@param rmask specifies a mask indicating which bits in an
        integer pixel contain the red component
@param gmask specifies a mask indicating which bits in an
        integer pixel contain the green component
@param bmask specifies a mask indicating which bits in an
        integer pixel contain the blue component
@param amask specifies a mask indicating which bits in an
        integer pixel contain the alpha component
"
      end

      operation 6664322 "DirectColorModel"
	public explicit_return_type ""
	nparams 8
	  param inout name "space" type class_ref 322178 // ColorSpace
	  param in name "bits" explicit_type "int"
	  param in name "rmask" explicit_type "int"
	  param in name "gmask" explicit_type "int"
	  param in name "bmask" explicit_type "int"
	  param in name "amask" explicit_type "int"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  param in name "transferType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DirectColorModel</code> from the specified
parameters.  Color components are in the specified
<code>ColorSpace</code>, which must be of type ColorSpace.TYPE_RGB
and have minimum normalized component values which are all 0.0
and maximum values which are all 1.0.
The masks specify which bits in an <code>int</code> pixel
representation contain the red, green and blue color samples and
the alpha sample, if present.  If <code>amask</code> is 0, pixel
values do not contain alpha information and all pixels are treated
as opaque, which means that alpha&nbsp;=&nbsp;1.0.  All of the
bits in each mask must be contiguous and fit in the specified number
of least significant bits of an <code>int</code> pixel
representation.  If there is alpha, the <code>boolean</code>
<code>isAlphaPremultiplied</code> specifies how to interpret
color and alpha samples in pixel values.  If the <code>boolean</code>
is <code>true</code>, color samples are assumed to have been
multiplied by the alpha sample.  The transparency value is
Transparency.OPAQUE, if no alpha is present, or
Transparency.TRANSLUCENT otherwise.  The transfer type
is the type of primitive array used to represent pixel values and
must be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or
DataBuffer.TYPE_INT.
@param space the specified <code>ColorSpace</code>
@param bits the number of bits in the pixel values; for example,
        the sum of the number of bits in the masks.
@param rmask specifies a mask indicating which bits in an
        integer pixel contain the red component
@param gmask specifies a mask indicating which bits in an
        integer pixel contain the green component
@param bmask specifies a mask indicating which bits in an
        integer pixel contain the blue component
@param amask specifies a mask indicating which bits in an
        integer pixel contain the alpha component
@param isAlphaPremultiplied <code>true</code> if color samples are
       premultiplied by the alpha sample; <code>false</code> otherwise
@param transferType the type of array used to represent pixel values
@throws IllegalArgumentException if <code>space</code> is not a
        TYPE_RGB space or if the min/max normalized component
        values are not 0.0/1.0.
"
      end

      operation 6664450 "getRedMask"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mask indicating which bits in an <code>int</code> pixel
representation contain the red color component.
@return the mask, which indicates which bits of the <code>int</code>
        pixel representation contain the red color sample.
"
      end

      operation 6664578 "getGreenMask"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mask indicating which bits in an <code>int</code> pixel
representation contain the green color component.
@return the mask, which indicates which bits of the <code>int</code>
        pixel representation contain the green color sample.
"
      end

      operation 6664706 "getBlueMask"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mask indicating which bits in an <code>int</code> pixel
representation contain the blue color component.
@return the mask, which indicates which bits of the <code>int</code>
        pixel representation contain the blue color sample.
"
      end

      operation 6664834 "getAlphaMask"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mask indicating which bits in an <code>int</code> pixel
representation contain the alpha component.
@return the mask, which indicates which bits of the <code>int</code>
        pixel representation contain the alpha sample.
"
      end

      operation 6664962 "getDefaultRGBComponents"
	private explicit_return_type "float"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an int pixel in this ColorModel's ColorSpace, converts
it to the default sRGB ColorSpace and returns the R, G, and B
components as float values between 0.0 and 1.0.
"
      end

      operation 6665090 "getsRGBComponentFromsRGB"
	private explicit_return_type "int"
	nparams 2
	  param in name "pixel" explicit_type "int"
	  param in name "idx" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6665218 "getsRGBComponentFromLinearRGB"
	private explicit_return_type "int"
	nparams 2
	  param in name "pixel" explicit_type "int"
	  param in name "idx" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6665346 "getRed"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the red color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is specified
as an <code>int</code>.
The returned value is a non pre-multiplied value.  Thus, if the
alpha is premultiplied, this method divides it out before returning
the value.  If the alpha value is 0, for example, the red value
is 0.
@param pixel the specified pixel
@return the red color component for the specified pixel, from
        0 to 255 in the sRGB <code>ColorSpace</code>.
"
      end

      operation 6665474 "getGreen"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the green color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is specified
as an <code>int</code>.
The returned value is a non pre-multiplied value.  Thus, if the
alpha is premultiplied, this method divides it out before returning
the value.  If the alpha value is 0, for example, the green value
is 0.
@param pixel the specified pixel
@return the green color component for the specified pixel, from
        0 to 255 in the sRGB <code>ColorSpace</code>.
"
      end

      operation 6665602 "getBlue"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the blue color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is specified
as an <code>int</code>.
The returned value is a non pre-multiplied value.  Thus, if the
alpha is premultiplied, this method divides it out before returning
the value.  If the alpha value is 0, for example, the blue value
is 0.
@param pixel the specified pixel
@return the blue color component for the specified pixel, from
        0 to 255 in the sRGB <code>ColorSpace</code>.
"
      end

      operation 6665730 "getAlpha"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alpha component for the specified pixel, scaled
from 0 to 255.  The pixel value is specified as an <code>int</code>.
@param pixel the specified pixel
@return the value of the alpha component of <code>pixel</code>
        from 0 to 255.
"
      end

      operation 6665858 "getRGB"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color/alpha components of the pixel in the default
RGB color model format.  A color conversion is done if necessary.
The pixel value is specified as an <code>int</code>.
The returned value is in a non pre-multiplied format.  Thus, if
the alpha is premultiplied, this method divides it out of the
color components.  If the alpha value is 0, for example, the color
values are each 0.
@param pixel the specified pixel
@return the RGB value of the color/alpha components of the specified
        pixel.
@see ColorModel#getRGBdefault
"
      end

      operation 6665986 "getRed"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the red color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is specified
by an array of data elements of type <code>transferType</code> passed
in as an object reference.
The returned value is a non pre-multiplied value.  Thus, if the
alpha is premultiplied, this method divides it out before returning
the value.  If the alpha value is 0, for example, the red value
is 0.
If <code>inData</code> is not a primitive array of type
<code>transferType</code>, a <code>ClassCastException</code> is
thrown.  An <code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>inData</code> is not large enough to hold a
pixel value for this <code>ColorModel</code>.  Since
<code>DirectColorModel</code> can be subclassed, subclasses inherit
the implementation of this method and if they don't override it
then they throw an exception if they use an unsupported
<code>transferType</code>.
An <code>UnsupportedOperationException</code> is thrown if this
<code>transferType</code> is not supported by this
<code>ColorModel</code>.
@param inData the array containing the pixel value
@return the value of the red component of the specified pixel.
@throws ArrayIndexOutOfBoundsException if <code>inData</code> is not
        large enough to hold a pixel value for this color model
@throws ClassCastException if <code>inData</code> is not a
        primitive array of type <code>transferType</code>
@throws UnsupportedOperationException if this <code>transferType</code>
        is not supported by this color model
"
      end

      operation 6666114 "getGreen"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the green color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is specified
by an array of data elements of type <code>transferType</code> passed
in as an object reference.
The returned value is a non pre-multiplied value.  Thus, if the
alpha is premultiplied, this method divides it out before returning
the value.  If the alpha value is 0, for example, the green value
is 0.  If <code>inData</code> is not a primitive array of type
<code>transferType</code>, a <code>ClassCastException</code> is thrown.
 An <code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>inData</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.  Since
<code>DirectColorModel</code> can be subclassed, subclasses inherit
the implementation of this method and if they don't override it
then they throw an exception if they use an unsupported
<code>transferType</code>.
An <code>UnsupportedOperationException</code> is
thrown if this <code>transferType</code> is not supported by this
<code>ColorModel</code>.
@param inData the array containing the pixel value
@return the value of the green component of the specified pixel.
@throws ArrayIndexOutOfBoundsException if <code>inData</code> is not
        large enough to hold a pixel value for this color model
@throws ClassCastException if <code>inData</code> is not a
        primitive array of type <code>transferType</code>
@throws UnsupportedOperationException if this <code>transferType</code>
        is not supported by this color model
"
      end

      operation 6666242 "getBlue"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the blue color component for the specified pixel, scaled
from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.  A
color conversion is done if necessary.  The pixel value is specified
by an array of data elements of type <code>transferType</code> passed
in as an object reference.
The returned value is a non pre-multiplied value.  Thus, if the
alpha is premultiplied, this method divides it out before returning
the value.  If the alpha value is 0, for example, the blue value
is 0.  If <code>inData</code> is not a primitive array of type
<code>transferType</code>, a <code>ClassCastException</code> is thrown.
 An <code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>inData</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.  Since
<code>DirectColorModel</code> can be subclassed, subclasses inherit
the implementation of this method and if they don't override it
then they throw an exception if they use an unsupported
<code>transferType</code>.
An <code>UnsupportedOperationException</code> is
thrown if this <code>transferType</code> is not supported by this
<code>ColorModel</code>.
@param inData the array containing the pixel value
@return the value of the blue component of the specified pixel.
@throws ArrayIndexOutOfBoundsException if <code>inData</code> is not
        large enough to hold a pixel value for this color model
@throws ClassCastException if <code>inData</code> is not a
        primitive array of type <code>transferType</code>
@throws UnsupportedOperationException if this <code>transferType</code>
        is not supported by this color model
"
      end

      operation 6666370 "getAlpha"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alpha component for the specified pixel, scaled
from 0 to 255.  The pixel value is specified by an array of data
elements of type <code>transferType</code> passed in as an object
reference.
If <code>inData</code> is not a primitive array of type
<code>transferType</code>, a <code>ClassCastException</code> is
thrown.  An <code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>inData</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.  Since
<code>DirectColorModel</code> can be subclassed, subclasses inherit
the implementation of this method and if they don't override it
then they throw an exception if they use an unsupported
<code>transferType</code>.
If this <code>transferType</code> is not supported, an
<code>UnsupportedOperationException</code> is thrown.
@param inData the specified pixel
@return the alpha component of the specified pixel, scaled from
        0 to 255.
@exception ClassCastException if <code>inData</code>
 is not a primitive array of type <code>transferType</code>
@exception ArrayIndexOutOfBoundsException if
 <code>inData</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@exception UnsupportedOperationException if this
 <code>tranferType</code> is not supported by this
 <code>ColorModel</code>
"
      end

      operation 6666498 "getRGB"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color/alpha components for the specified pixel in the
default RGB color model format.  A color conversion is done if
necessary.  The pixel value is specified by an array of data
elements of type <code>transferType</code> passed in as an object
reference.  If <code>inData</code> is not a primitive array of type
<code>transferType</code>, a <code>ClassCastException</code> is
thrown.  An <code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>inData</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.
The returned value is in a non pre-multiplied format.  Thus, if
the alpha is premultiplied, this method divides it out of the
color components.  If the alpha value is 0, for example, the color
values is 0.  Since <code>DirectColorModel</code> can be
subclassed, subclasses inherit the implementation of this method
and if they don't override it then
they throw an exception if they use an unsupported
<code>transferType</code>.

@param inData the specified pixel
@return the color and alpha components of the specified pixel.
@exception UnsupportedOperationException if this
           <code>transferType</code> is not supported by this
           <code>ColorModel</code>
@see ColorModel#getRGBdefault
"
      end

      operation 6666626 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "rgb" explicit_type "int"
	  param inout name "pixel" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<code>ColorModel</code>, given an integer pixel representation in the
default RGB color model.
This array can then be passed to the <code>setDataElements</code>
method of a <code>WritableRaster</code> object.  If the pixel variable
is <code>null</code>, a new array is allocated.  If <code>pixel</code>
is not <code>null</code>, it must be a primitive array of type
<code>transferType</code>; otherwise, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>pixel</code> is not large enough to hold a pixel
value for this <code>ColorModel</code>.  The pixel array is returned.
Since <code>DirectColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then they throw an exception if they use an unsupported
<code>transferType</code>.

@param rgb the integer pixel representation in the default RGB
           color model
@param pixel the specified pixel
@return an array representation of the specified pixel in this
        <code>ColorModel</code>
@exception ClassCastException if <code>pixel</code>
 is not a primitive array of type <code>transferType</code>
@exception ArrayIndexOutOfBoundsException if
 <code>pixel</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>
@exception UnsupportedOperationException if this
 <code>transferType</code> is not supported by this
 <code>ColorModel</code>
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6666754 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param in name "pixel" explicit_type "int"
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of unnormalized color/alpha components given a pixel
in this <code>ColorModel</code>.  The pixel value is specified as an
<code>int</code>.  If the <code>components</code> array is
<code>null</code>, a new array is allocated.  The
<code>components</code> array is returned.  Color/alpha components are
stored in the <code>components</code> array starting at
<code>offset</code>, even if the array is allocated by this method.
An <code>ArrayIndexOutOfBoundsException</code> is thrown if the
<code>components</code> array is not <code>null</code> and is not large
enough to hold all the color and alpha components, starting at
<code>offset</code>.
@param pixel the specified pixel
@param components the array to receive the color and alpha
components of the specified pixel
@param offset the offset into the <code>components</code> array at
which to start storing the color and alpha components
@return an array containing the color and alpha components of the
specified pixel starting at the specified offset.
"
      end

      operation 6666882 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param inout name "pixel" type class_ref 129538 // Object
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of unnormalized color/alpha components given a pixel
in this <code>ColorModel</code>.  The pixel value is specified by an
array of data elements of type <code>transferType</code> passed in as
an object reference.  If <code>pixel</code> is not a primitive array
of type <code>transferType</code>, a <code>ClassCastException</code>
is thrown.  An <code>ArrayIndexOutOfBoundsException</code> is
thrown if <code>pixel</code> is not large enough to hold a
pixel value for this <code>ColorModel</code>.  If the
<code>components</code> array is <code>null</code>, a new
array is allocated.  The <code>components</code> array is returned.
Color/alpha components are stored in the <code>components</code> array
starting at <code>offset</code>, even if the array is allocated by
this method.  An <code>ArrayIndexOutOfBoundsException</code>
is thrown if the <code>components</code> array is not
<code>null</code> and is not large enough to hold all the color and
alpha components, starting at <code>offset</code>.
Since <code>DirectColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then they throw an exception if they use an unsupported
<code>transferType</code>.
@param pixel the specified pixel
@param components the array to receive the color and alpha
       components of the specified pixel
@param offset the offset into the <code>components</code> array at
       which to start storing the color and alpha components
@return an array containing the color and alpha components of the
specified pixel starting at the specified offset.
@exception ClassCastException if <code>pixel</code>
 is not a primitive array of type <code>transferType</code>
@exception ArrayIndexOutOfBoundsException if
 <code>pixel</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code>, or if <code>components</code>
 is not <code>null</code> and is not large enough to hold all the
 color and alpha components, starting at <code>offset</code>
@exception UnsupportedOperationException if this
           <code>transferType</code> is not supported by this
           color model
"
      end

      operation 6667010 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>WritableRaster</code> with the specified width and
height that has a data layout (<code>SampleModel</code>) compatible
with this <code>ColorModel</code>.
@param w the width to apply to the new <code>WritableRaster</code>
@param h the height to apply to the new <code>WritableRaster</code>
@return a <code>WritableRaster</code> object with the specified
width and height.
@throws IllegalArgumentException if <code>w</code> or <code>h</code>
        is less than or equal to zero
@see WritableRaster
@see SampleModel
"
      end

      operation 6667138 "getDataElement"
	public explicit_return_type "int"
	nparams 2
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pixel value represented as an <code>int</code> in this
<code>ColorModel</code>, given an array of unnormalized color/alpha
components.   An <code>ArrayIndexOutOfBoundsException</code> is
thrown if the <code>components</code> array is
not large enough to hold all the color and alpha components, starting
at <code>offset</code>.
@param components an array of unnormalized color and alpha
components
@param offset the index into <code>components</code> at which to
begin retrieving the color and alpha components
@return an <code>int</code> pixel value in this
<code>ColorModel</code> corresponding to the specified components.
@exception ArrayIndexOutOfBoundsException if
 the <code>components</code> array is not large enough to
 hold all of the color and alpha components starting at
 <code>offset</code>
"
      end

      operation 6667266 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<code>ColorModel</code>, given an array of unnormalized color/alpha
components.
This array can then be passed to the <code>setDataElements</code>
method of a <code>WritableRaster</code> object.
An <code>ArrayIndexOutOfBoundsException</code> is thrown if the
<code>components</code> array
is not large enough to hold all the color and alpha components,
starting at offset.  If the <code>obj</code> variable is
<code>null</code>, a new array is allocated.  If <code>obj</code> is
not <code>null</code>, it must be a primitive array
of type <code>transferType</code>; otherwise, a
<code>ClassCastException</code> is thrown.
An <code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>obj</code> is not large enough to hold a pixel value for this
<code>ColorModel</code>.
Since <code>DirectColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then they throw an exception if they use an unsupported
<code>transferType</code>.
@param components an array of unnormalized color and alpha
components
@param offset the index into <code>components</code> at which to
begin retrieving color and alpha components
@param obj the <code>Object</code> representing an array of color
and alpha components
@return an <code>Object</code> representing an array of color and
alpha components.
@exception ClassCastException if <code>obj</code>
 is not a primitive array of type <code>transferType</code>
@exception ArrayIndexOutOfBoundsException if
 <code>obj</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code> or the <code>components</code>
 array is not large enough to hold all of the color and alpha
 components starting at <code>offset</code>
@exception UnsupportedOperationException if this
           <code>transferType</code> is not supported by this
           color model
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6667394 "coerceData"
	public return_type class_ref 312066 // ColorModel
	nparams 2
	  param inout name "raster" type class_ref 322690 // WritableRaster
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces the raster data to match the state specified in the
<code>isAlphaPremultiplied</code> variable, assuming the data is
currently correctly described by this <code>ColorModel</code>.  It
may multiply or divide the color raster data by alpha, or do
nothing if the data is in the correct state.  If the data needs to
be coerced, this method will also return an instance of this
<code>ColorModel</code> with the <code>isAlphaPremultiplied</code>
flag set appropriately.  This method will throw a
<code>UnsupportedOperationException</code> if this transferType is
not supported by this <code>ColorModel</code>.  Since
<code>ColorModel</code> can be subclassed, subclasses inherit the
implementation of this method and if they don't override it then
they throw an exception if they use an unsupported transferType.

@param raster the <code>WritableRaster</code> data
@param isAlphaPremultiplied <code>true</code> if the alpha is
premultiplied; <code>false</code> otherwise
@return a <code>ColorModel</code> object that represents the
coerced data.
@exception UnsupportedOperationException if this
           <code>transferType</code> is not supported by this
           color model
"
      end

      operation 6667522 "isCompatibleRaster"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "raster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if <code>raster</code> is compatible
with this <code>ColorModel</code> and <code>false</code> if it is
not.
@param raster the {@link Raster} object to test for compatibility
@return <code>true</code> if <code>raster</code> is compatible
with this <code>ColorModel</code>; <code>false</code> otherwise.
"
      end

      operation 6667650 "setFields"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6667778 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> that represents this
<code>DirectColorModel</code>.
@return a <code>String</code> representing this
<code>DirectColorModel</code>.
"
      end
    end

    class 896130 "AffineTransformOp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class uses an affine transform to perform a linear mapping from
2D coordinates in the source image or <CODE>Raster</CODE> to 2D coordinates
in the destination image or <CODE>Raster</CODE>.
The type of interpolation that is used is specified through a constructor,
either by a <CODE>RenderingHints</CODE> object or by one of the integer
interpolation types defined in this class.
<p>
If a <CODE>RenderingHints</CODE> object is specified in the constructor, the
interpolation hint and the rendering quality hint are used to set
the interpolation type for this operation.  The color rendering hint
and the dithering hint can be used when color conversion is required.
<p>
Note that the following constraints have to be met:
<ul>
<li>The source and destination must be different.
<li>For <CODE>Raster</CODE> objects, the number of bands in the source must
be equal to the number of bands in the destination.
</ul>
@see AffineTransform
@see BufferedImageFilter
@see java.awt.RenderingHints#KEY_INTERPOLATION
@see java.awt.RenderingHints#KEY_RENDERING
@see java.awt.RenderingHints#KEY_COLOR_RENDERING
@see java.awt.RenderingHints#KEY_DITHERING
"
      classrelation 3066114 // <realization>
	relation 3066114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3066114 // <realization>
	  b parent class_ref 867202 // BufferedImageOp
      end

      classrelation 3066242 // <realization>
	relation 3066242 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3066242 // <realization>
	  b parent class_ref 896258 // RasterOp
      end

      classrelation 3066370 // xform (<unidirectional association>)
	relation 3066370 --->
	  a role_name "xform" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3066370 // xform (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      classrelation 3066498 // hints (<unidirectional association>)
	relation 3066498 --->
	  a role_name "hints" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3066498 // hints (<unidirectional association>)
	  b parent class_ref 856578 // RenderingHints
      end

      attribute 1594754 "TYPE_NEAREST_NEIGHBOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nearest-neighbor interpolation type.

"
      end

      attribute 1594882 "TYPE_BILINEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bilinear interpolation type.

"
      end

      attribute 1595010 "TYPE_BICUBIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bicubic interpolation type.

"
      end

      attribute 1595138 "interpolationType"
	package explicit_type "int"
	init_value " TYPE_NEAREST_NEIGHBOR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6600834 "AffineTransformOp"
	public explicit_return_type ""
	nparams 2
	  param inout name "xform" type class_ref 381058 // AffineTransform
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>AffineTransformOp</CODE> given an affine transform.
The interpolation type is determined from the
<CODE>RenderingHints</CODE> object.  If the interpolation hint is
defined, it will be used. Otherwise, if the rendering quality hint is
defined, the interpolation type is determined from its value.  If no
hints are specified (<CODE>hints</CODE> is null),
the interpolation type is {@link #TYPE_NEAREST_NEIGHBOR
TYPE_NEAREST_NEIGHBOR}.

@param xform The <CODE>AffineTransform</CODE> to use for the
operation.

@param hints The <CODE>RenderingHints</CODE> object used to specify
the interpolation type for the operation.

@throws ImagingOpException if the transform is non-invertible.
@see java.awt.RenderingHints#KEY_INTERPOLATION
@see java.awt.RenderingHints#KEY_RENDERING
"
      end

      operation 6600962 "AffineTransformOp"
	public explicit_return_type ""
	nparams 2
	  param inout name "xform" type class_ref 381058 // AffineTransform
	  param in name "interpolationType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>AffineTransformOp</CODE> given an affine transform
and the interpolation type.

@param xform The <CODE>AffineTransform</CODE> to use for the operation.
@param interpolationType One of the integer
interpolation type constants defined by this class:
{@link #TYPE_NEAREST_NEIGHBOR TYPE_NEAREST_NEIGHBOR},
{@link #TYPE_BILINEAR TYPE_BILINEAR},
{@link #TYPE_BICUBIC TYPE_BICUBIC}.
@throws ImagingOpException if the transform is non-invertible.
"
      end

      operation 6601090 "getInterpolationType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the interpolation type used by this op.
@return the interpolation type.
@see #TYPE_NEAREST_NEIGHBOR
@see #TYPE_BILINEAR
@see #TYPE_BICUBIC
"
      end

      operation 6601218 "filter"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "dst" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the source <CODE>BufferedImage</CODE> and stores the results
in the destination <CODE>BufferedImage</CODE>.
If the color models for the two images do not match, a color
conversion into the destination color model is performed.
If the destination image is null,
a <CODE>BufferedImage</CODE> is created with the source
<CODE>ColorModel</CODE>.
<p>
The coordinates of the rectangle returned by
<code>getBounds2D(BufferedImage)</code>
are not necessarily the same as the coordinates of the
<code>BufferedImage</code> returned by this method.  If the
upper-left corner coordinates of the rectangle are
negative then this part of the rectangle is not drawn.  If the
upper-left corner coordinates of the  rectangle are positive
then the filtered image is drawn at that position in the
destination <code>BufferedImage</code>.
<p>
An <CODE>IllegalArgumentException</CODE> is thrown if the source is
the same as the destination.

@param src The <CODE>BufferedImage</CODE> to transform.
@param dst The <CODE>BufferedImage</CODE> in which to store the results
of the transformation.

@return The filtered <CODE>BufferedImage</CODE>.
@throws IllegalArgumentException if <code>src</code> and
        <code>dst</code> are the same
@throws ImagingOpException if the image cannot be transformed
        because of a data-processing error that might be
        caused by an invalid image format, tile format, or
        image-processing operation, or any other unsupported
        operation.
"
      end

      operation 6601346 "filter"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the source <CODE>Raster</CODE> and stores the results in
the destination <CODE>Raster</CODE>.  This operation performs the
transform band by band.
<p>
If the destination <CODE>Raster</CODE> is null, a new
<CODE>Raster</CODE> is created.
An <CODE>IllegalArgumentException</CODE> may be thrown if the source is
the same as the destination or if the number of bands in
the source is not equal to the number of bands in the
destination.
<p>
The coordinates of the rectangle returned by
<code>getBounds2D(Raster)</code>
are not necessarily the same as the coordinates of the
<code>WritableRaster</code> returned by this method.  If the
upper-left corner coordinates of rectangle are negative then
this part of the rectangle is not drawn.  If the coordinates
of the rectangle are positive then the filtered image is drawn at
that position in the destination <code>Raster</code>.
<p>
@param src The <CODE>Raster</CODE> to transform.
@param dst The <CODE>Raster</CODE> in which to store the results of the
transformation.

@return The transformed <CODE>Raster</CODE>.

@throws ImagingOpException if the raster cannot be transformed
        because of a data-processing error that might be
        caused by an invalid image format, tile format, or
        image-processing operation, or any other unsupported
        operation.
"
      end

      operation 6601474 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the transformed destination.  The
rectangle returned is the actual bounding box of the
transformed points.  The coordinates of the upper-left corner
of the returned rectangle might not be (0,&nbsp;0).

@param src The <CODE>BufferedImage</CODE> to be transformed.

@return The <CODE>Rectangle2D</CODE> representing the destination's
bounding box.
"
      end

      operation 6601602 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the transformed destination.  The
rectangle returned will be the actual bounding box of the
transformed points.  The coordinates of the upper-left corner
of the returned rectangle might not be (0,&nbsp;0).

@param src The <CODE>Raster</CODE> to be transformed.

@return The <CODE>Rectangle2D</CODE> representing the destination's
bounding box.
"
      end

      operation 6601730 "createCompatibleDestImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "destCM" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination image with the correct size and number of
bands.  A <CODE>RasterFormatException</CODE> may be thrown if the
transformed width or height is equal to 0.
<p>
If <CODE>destCM</CODE> is null,
an appropriate <CODE>ColorModel</CODE> is used; this
<CODE>ColorModel</CODE> may have
an alpha channel even if the source <CODE>ColorModel</CODE> is opaque.

@param src  The <CODE>BufferedImage</CODE> to be transformed.
@param destCM  <CODE>ColorModel</CODE> of the destination.  If null,
an appropriate <CODE>ColorModel</CODE> is used.

@return The zeroed destination image.
"
      end

      operation 6601858 "createCompatibleDestRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination <CODE>Raster</CODE> with the correct size
and number of bands.  A <CODE>RasterFormatException</CODE> may be thrown
if the transformed width or height is equal to 0.

@param src The <CODE>Raster</CODE> to be transformed.

@return The zeroed destination <CODE>Raster</CODE>.
"
      end

      operation 6601986 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the corresponding destination point given a
point in the source.  If <CODE>dstPt</CODE> is specified, it
is used to hold the return value.

@param srcPt The <code>Point2D</code> that represents the source
             point.
@param dstPt The <CODE>Point2D</CODE> in which to store the result.

@return The <CODE>Point2D</CODE> in the destination that corresponds to
the specified point in the source.
"
      end

      operation 6602114 "getTransform"
	public return_type class_ref 381058 // AffineTransform
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the affine transform used by this transform operation.

@return The <CODE>AffineTransform</CODE> associated with this op.
"
      end

      operation 6602242 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints used by this transform operation.

@return The <CODE>RenderingHints</CODE> object associated with this op.
"
      end

      operation 6602370 "validateTransform"
	package explicit_return_type "void"
	nparams 1
	  param inout name "xform" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " We need to be able to invert the transform if we want to
 transform the image.  If the determinant of the matrix is 0,
 then we can't invert the transform."
      end
    end

    class 896258 "RasterOp"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface describes single-input/single-output
operations performed on Raster objects.  It is implemented by such
classes as AffineTransformOp, ConvolveOp, and LookupOp.  The Source
and Destination objects must contain the appropriate number
of bands for the particular classes implementing this interface.
Otherwise, an exception is thrown.  This interface cannot be used to
describe more sophisticated Ops such as ones that take multiple sources.
Each class implementing this interface will specify whether or not it
will allow an in-place filtering operation (i.e. source object equal
to the destination object).  Note that the restriction to single-input
operations means that the values of destination pixels prior to the
operation are not used as input to the filter operation.
@see AffineTransformOp
@see BandCombineOp
@see ColorConvertOp
@see ConvolveOp
@see LookupOp
@see RescaleOp
"
      operation 6600194 "filter"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dest" type class_ref 322690 // WritableRaster
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a single-input/single-output operation from a source Raster
to a destination Raster.  If the destination Raster is null, a
new Raster will be created.  The IllegalArgumentException may be thrown
if the source and/or destination Raster is incompatible with the types
of Rasters allowed by the class implementing this filter.
@param src the source <code>Raster</code>
@param dest the destination <code>WritableRaster</code>
@return a <code>WritableRaster</code> that represents the result of
        the filtering operation.
"
      end

      operation 6600322 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the filtered destination Raster.
The IllegalArgumentException may be thrown if the source Raster
is incompatible with the types of Rasters allowed
by the class implementing this filter.
@param src the source <code>Raster</code>
@return a <code>Rectangle2D</code> that is the bounding box of
        the <code>Raster</code> resulting from the filtering
        operation.
"
      end

      operation 6600450 "createCompatibleDestRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination Raster with the correct size and number of
bands.
The IllegalArgumentException may be thrown if the source Raster
is incompatible with the types of Rasters allowed
by the class implementing this filter.
@param src the source <code>Raster</code>
@return a <code>WritableRaster</code> that is compatible with
        <code>src</code>
"
      end

      operation 6600578 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the destination point given a
point in the source Raster.  If dstPt is non-null, it
will be used to hold the return value.
@param srcPt the source <code>Point2D</code>
@param dstPt the destination <code>Point2D</code>
@return the location of the destination point.
"
      end

      operation 6600706 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints for this RasterOp.  Returns
null if no hints have been set.
@return the <code>RenderingHints</code> object of this
        <code>RasterOp</code>.
"
      end
    end

    class 896386 "AreaAveragingScaleFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An ImageFilter class for scaling images using a simple area averaging
algorithm that produces smoother results than the nearest neighbor
algorithm.
<p>This class extends the basic ImageFilter Class to scale an existing
image and provide a source for a new image containing the resampled
image.  The pixels in the source image are blended to produce pixels
for an image of the specified size.  The blending process is analogous
to scaling up the source image to a multiple of the destination size
using pixel replication and then scaling it back down to the destination
size by simply averaging all the pixels in the supersized image that
fall within a given pixel of the destination image.  If the data from
the source is not delivered in TopDownLeftRight order then the filter
will back off to a simple pixel replication behavior and utilize the
requestTopDownLeftRightResend() method to refilter the pixels in a
better way at the end.
<p>It is meant to be used in conjunction with a FilteredImageSource
object to produce scaled versions of existing images.  Due to
implementation dependencies, there may be differences in pixel values
of an image filtered on different platforms.

@see FilteredImageSource
@see ReplicateScaleFilter
@see ImageFilter

@author      Jim Graham
"
      classrelation 3066882 // <generalisation>
	relation 3066882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3066882 // <generalisation>
	  b parent class_ref 896514 // ReplicateScaleFilter
      end

      classrelation 3067010 // rgbmodel (<unidirectional association>)
	relation 3067010 --->
	  a role_name "rgbmodel" init_value " ColorModel.getRGBdefault()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3067010 // rgbmodel (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      attribute 1596034 "neededHints"
	class_attribute const_attribute private explicit_type "int"
	init_value " (TOPDOWNLEFTRIGHT
                                            | COMPLETESCANLINES)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1596162 "passthrough"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1596290 "reds"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1596418 "greens"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1596546 "blues"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1596674 "alphas"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1596802 "savedy"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1596930 "savedyrem"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6603266 "AreaAveragingScaleFilter"
	public explicit_return_type ""
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AreaAveragingScaleFilter that scales the pixels from
its source Image as specified by the width and height parameters.
@param width the target width to scale the image
@param height the target height to scale the image
"
      end

      operation 6603394 "setHints"
	public explicit_return_type "void"
	nparams 1
	  param in name "hints" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Detect if the data is being delivered with the necessary hints
to allow the averaging algorithm to do its work.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose
pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer#setHints
"
      end

      operation 6603522 "makeAccumBuffers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6603650 "calcRow"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6603778 "accumPixels"
	private explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" type class_ref 129538 // Object
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6603906 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combine the components for the delivered byte pixels into the
accumulation arrays and send on any averaged data for rows of
pixels that are complete.  If the correct hints were not
specified in the setHints call then relay the work to our
superclass which is capable of scaling pixels regardless of
the delivery hints.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code>
whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ReplicateScaleFilter
"
      end

      operation 6604034 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combine the components for the delivered int pixels into the
accumulation arrays and send on any averaged data for rows of
pixels that are complete.  If the correct hints were not
specified in the setHints call then relay the work to our
superclass which is capable of scaling pixels regardless of
the delivery hints.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code>
whose pixels are being filtered.  Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ReplicateScaleFilter
"
      end
    end

    class 896514 "ReplicateScaleFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An ImageFilter class for scaling images using the simplest algorithm.
This class extends the basic ImageFilter Class to scale an existing
image and provide a source for a new image containing the resampled
image.  The pixels in the source image are sampled to produce pixels
for an image of the specified size by replicating rows and columns of
pixels to scale up or omitting rows and columns of pixels to scale
down.
<p>It is meant to be used in conjunction with a FilteredImageSource
object to produce scaled versions of existing images.  Due to
implementation dependencies, there may be differences in pixel values
of an image filtered on different platforms.

@see FilteredImageSource
@see ImageFilter

@author      Jim Graham
"
      classrelation 3066626 // <generalisation>
	relation 3066626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3066626 // <generalisation>
	  b parent class_ref 379906 // ImageFilter
      end

      attribute 1595266 "srcWidth"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The width of the source image.

"
      end

      attribute 1595394 "srcHeight"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The height of the source image.

"
      end

      attribute 1595522 "destWidth"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The target width to scale the image.

"
      end

      attribute 1595650 "destHeight"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The target height to scale the image.

"
      end

      attribute 1595778 "srcrows"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An <code>int</code> array containing information about a
row of pixels.

"
      end

      attribute 1595906 "srccols"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An <code>int</code> array containing information about a
column of pixels.

"
      end

      classrelation 3066754 // outpixbuf (<unidirectional association>)
	relation 3066754 --->
	  a role_name "outpixbuf" protected
	    comment "
A <code>byte</code> array initialized with a size of
{@link #destWidth} and used to deliver a row of pixel
data to the {@link ImageConsumer}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3066754 // outpixbuf (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 6602498 "ReplicateScaleFilter"
	public explicit_return_type ""
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ReplicateScaleFilter that scales the pixels from
its source Image as specified by the width and height parameters.
@param width the target width to scale the image
@param height the target height to scale the image
@throws IllegalArgumentException if <code>width</code> equals
        zero or <code>height</code> equals zero
"
      end

      operation 6602626 "setProperties"
	public explicit_return_type "void"
	nparams 1
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Passes along the properties from the source object after adding a
property indicating the scale applied.
This method invokes <code>super.setProperties</code>,
which might result in additional properties being added.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
"
      end

      operation 6602754 "setDimensions"
	public explicit_return_type "void"
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override the dimensions of the source image and pass the dimensions
of the new scaled size to the ImageConsumer.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer
"
      end

      operation 6602882 "calculateMaps"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6603010 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Choose which rows and columns of the delivered byte pixels are
needed for the destination scaled image and pass through just
those rows and columns that are needed, replicated as necessary.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
"
      end

      operation 6603138 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Choose which rows and columns of the delivered int pixels are
needed for the destination scaled image and pass through just
those rows and columns that are needed, replicated as necessary.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
"
      end
    end

    class 896642 "BandCombineOp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class performs an arbitrary linear combination of the bands
in a <CODE>Raster</CODE>, using a specified matrix.
<p>
The width of the matrix must be equal to the number of bands in the
source <CODE>Raster</CODE>, optionally plus one.  If there is one more
column in the matrix than the number of bands, there is an implied 1 at the
end of the vector of band samples representing a pixel.  The height
of the matrix must be equal to the number of bands in the destination.
<p>
For example, a 3-banded <CODE>Raster</CODE> might have the following
transformation applied to each pixel in order to invert the second band of
the <CODE>Raster</CODE>.
<pre>
  [ 1.0   0.0   0.0    0.0  ]     [ b1 ]
  [ 0.0  -1.0   0.0  255.0  ]  x  [ b2 ]
  [ 0.0   0.0   1.0    0.0  ]     [ b3 ]
                                  [ 1 ]
</pre>

<p>
Note that the source and destination can be the same object.
"
      classrelation 3067138 // <realization>
	relation 3067138 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3067138 // <realization>
	  b parent class_ref 896258 // RasterOp
      end

      attribute 1597058 "matrix"
	package explicit_type "float"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1597186 "nrows"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1597314 "ncols"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3067266 // hints (<unidirectional association>)
	relation 3067266 --->
	  a role_name "hints" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3067266 // hints (<unidirectional association>)
	  b parent class_ref 856578 // RenderingHints
      end

      operation 6604162 "BandCombineOp"
	public explicit_return_type ""
	nparams 2
	  param inout name "matrix" explicit_type "float"
	multiplicity "[][]"
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <CODE>BandCombineOp</CODE> with the specified matrix.
The width of the matrix must be equal to the number of bands in
the source <CODE>Raster</CODE>, optionally plus one.  If there is one
more column in the matrix than the number of bands, there is an implied
1 at the end of the vector of band samples representing a pixel.  The
height of the matrix must be equal to the number of bands in the
destination.
<p>
The first subscript is the row index and the second
is the column index.  This operation uses none of the currently
defined rendering hints; the <CODE>RenderingHints</CODE> argument can be
null.

@param matrix The matrix to use for the band combine operation.
@param hints The <CODE>RenderingHints</CODE> object for this operation.
Not currently used so it can be null.
"
      end

      operation 6604290 "getMatrix"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the linear combination matrix.

@return The matrix associated with this band combine operation.
"
      end

      operation 6604418 "filter"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the <CODE>Raster</CODE> using the matrix specified in the
constructor. An <CODE>IllegalArgumentException</CODE> may be thrown if
the number of bands in the source or destination is incompatible with
the matrix.  See the class comments for more details.
<p>
If the destination is null, it will be created with a number of bands
equalling the number of rows in the matrix. No exception is thrown
if the operation causes a data overflow.

@param src The <CODE>Raster</CODE> to be filtered.
@param dst The <CODE>Raster</CODE> in which to store the results
of the filter operation.

@return The filtered <CODE>Raster</CODE>.

@throws IllegalArgumentException If the number of bands in the
source or destination is incompatible with the matrix.
"
      end

      operation 6604546 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the transformed destination.  Since
this is not a geometric operation, the bounding box is the same for
the source and destination.
An <CODE>IllegalArgumentException</CODE> may be thrown if the number of
bands in the source is incompatible with the matrix.  See
the class comments for more details.

@param src The <CODE>Raster</CODE> to be filtered.

@return The <CODE>Rectangle2D</CODE> representing the destination
image's bounding box.

@throws IllegalArgumentException If the number of bands in the source
is incompatible with the matrix.
"
      end

      operation 6604674 "createCompatibleDestRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination <CODE>Raster</CODE> with the correct size
and number of bands.
An <CODE>IllegalArgumentException</CODE> may be thrown if the number of
bands in the source is incompatible with the matrix.  See
the class comments for more details.

@param src The <CODE>Raster</CODE> to be filtered.

@return The zeroed destination <CODE>Raster</CODE>.
"
      end

      operation 6604802 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the corresponding destination point given a
point in the source <CODE>Raster</CODE>.  If <CODE>dstPt</CODE> is
specified, it is used to hold the return value.
Since this is not a geometric operation, the point returned
is the same as the specified <CODE>srcPt</CODE>.

@param srcPt The <code>Point2D</code> that represents the point in
             the source <code>Raster</code>
@param dstPt The <CODE>Point2D</CODE> in which to store the result.

@return The <CODE>Point2D</CODE> in the destination image that
corresponds to the specified point in the source image.
"
      end

      operation 6604930 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints for this operation.

@return The <CODE>RenderingHints</CODE> object associated with this
operation.  Returns null if no hints have been set.
"
      end
    end

    class 896770 "BandedSampleModel"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class represents image data which is stored in a band interleaved
 fashion and for
 which each sample of a pixel occupies one data element of the DataBuffer.
 It subclasses ComponentSampleModel but provides a more efficient
 implementation for accessing band interleaved image data than is provided
 by ComponentSampleModel.  This class should typically be used when working
 with images which store sample data for each band in a different bank of the
 DataBuffer. Accessor methods are provided so that image data can be
 manipulated directly. Pixel stride is the number of
 data array elements between two samples for the same band on the same
 scanline. The pixel stride for a BandedSampleModel is one.
 Scanline stride is the number of data array elements between
 a given sample and the corresponding sample in the same column of the next
 scanline.  Band offsets denote the number
 of data array elements from the first data array element of the bank
 of the DataBuffer holding each band to the first sample of the band.
 The bands are numbered from 0 to N-1.
 Bank indices denote the correspondence between a bank of the data buffer
 and a band of image data.  This class supports
 {@link DataBuffer#TYPE_BYTE TYPE_BYTE},
 {@link DataBuffer#TYPE_USHORT TYPE_USHORT},
 {@link DataBuffer#TYPE_SHORT TYPE_SHORT},
 {@link DataBuffer#TYPE_INT TYPE_INT},
 {@link DataBuffer#TYPE_FLOAT TYPE_FLOAT}, and
 {@link DataBuffer#TYPE_DOUBLE TYPE_DOUBLE} datatypes
"
      classrelation 3067522 // <generalisation>
	relation 3067522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3067522 // <generalisation>
	  b parent class_ref 896898 // ComponentSampleModel
      end

      operation 6614658 "BandedSampleModel"
	public explicit_return_type ""
	nparams 4
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "numBands" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a BandedSampleModel with the specified parameters.
The pixel stride will be one data element.  The scanline stride
will be the same as the width.  Each band will be stored in
a separate bank and all band offsets will be zero.
@param dataType  The data type for storing samples.
@param w         The width (in pixels) of the region of
                 image data described.
@param h         The height (in pixels) of the region of image
                 data described.
@param numBands  The number of bands for the image data.
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6614786 "BandedSampleModel"
	public explicit_return_type ""
	nparams 6
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bankIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a BandedSampleModel with the specified parameters.
The number of bands will be inferred from the lengths of the
bandOffsets bankIndices arrays, which must be equal.  The pixel
stride will be one data element.
@param dataType  The data type for storing samples.
@param w         The width (in pixels) of the region of
                 image data described.
@param h         The height (in pixels) of the region of
                 image data described.
@param scanlineStride The line stride of the of the image data.
@param bankIndices The bank index for each band.
@param bandOffsets The band offset for each band.
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6614914 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BandedSampleModel with the specified
width and height.  The new BandedSampleModel will have the same
number of bands, storage data type, and bank indices
as this BandedSampleModel.  The band offsets will be compressed
such that the offset between bands will be w*pixelStride and
the minimum of all of the band offsets is zero.
@param w the width of the resulting <code>BandedSampleModel</code>
@param h the height of the resulting <code>BandedSampleModel</code>
@return a new <code>BandedSampleModel</code> with the specified
        width and height.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> equals either
        <code>Integer.MAX_VALUE</code> or
        <code>Integer.MIN_VALUE</code>
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6615042 "createSubsetSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 1
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BandedSampleModel with a subset of the bands of this
BandedSampleModel.  The new BandedSampleModel can be
used with any DataBuffer that the existing BandedSampleModel
can be used with.  The new BandedSampleModel/DataBuffer
combination will represent an image with a subset of the bands
of the original BandedSampleModel/DataBuffer combination.
@throws RasterFormatException if the number of bands is greater than
                              the number of banks in this sample model.
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6615170 "createDataBuffer"
	public return_type class_ref 897026 // DataBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DataBuffer that corresponds to this BandedSampleModel,
The DataBuffer's data type, number of banks, and size
will be consistent with this BandedSampleModel.
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported types.
"
      end

      operation 6615298 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns data for a single pixel in a primitive array of type
TransferType.  For a BandedSampleModel, this will be the same
as the data type, and samples will be returned one per array
element.  Generally, obj
should be passed in as null, so that the Object will be created
automatically and will be of the right primitive data type.
<p>
The following code illustrates transferring data for one pixel from
DataBuffer <code>db1</code>, whose storage layout is described by
BandedSampleModel <code>bsm1</code>, to DataBuffer <code>db2</code>,
whose storage layout is described by
BandedSampleModel <code>bsm2</code>.
The transfer will generally be more efficient than using
getPixel/setPixel.
<pre>
      BandedSampleModel bsm1, bsm2;
      DataBufferInt db1, db2;
      bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),
                           db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
If obj is non-null, it should be a primitive array of type TransferType.
Otherwise, a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is non-null and is not large enough to hold
the pixel data.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param obj       If non-null, a primitive array in which to return
                 the pixel data.
@param data      The DataBuffer containing the image data.
@return the data for the specified pixel.
@see #setDataElements(int, int, Object, DataBuffer)
"
      end

      operation 6615426 "getPixel"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for the specified pixel in an int array.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param iArray    If non-null, returns the samples in this array
@param data      The DataBuffer containing the image data
@return the samples for the specified pixel.
@see #setPixel(int, int, int[], DataBuffer)
"
      end

      operation 6615554 "getPixels"
	public explicit_return_type "int"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for the specified rectangle of pixels in
an int array, one sample per data array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         The width of the pixel rectangle
@param h         The height of the pixel rectangle
@param iArray    If non-null, returns the samples in this array
@param data      The DataBuffer containing the image data
@return the samples for the pixels within the specified region.
@see #setPixels(int, int, int, int, int[], DataBuffer)
"
      end

      operation 6615682 "getSample"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns as int the sample in a specified band for the pixel
located at (x,y).
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to return
@param data      The DataBuffer containing the image data
@return the sample in the specified band for the specified pixel.
@see #setSample(int, int, int, int, DataBuffer)
"
      end

      operation 6615810 "getSampleFloat"
	public explicit_return_type "float"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for the pixel located at (x,y) as a float.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to return
@param data      The DataBuffer containing the image data
@return a float value that represents the sample in the specified
band for the specified pixel.
"
      end

      operation 6615938 "getSampleDouble"
	public explicit_return_type "double"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for a pixel located at (x,y) as a double.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to return
@param data      The DataBuffer containing the image data
@return a double value that represents the sample in the specified
band for the specified pixel.
"
      end

      operation 6616066 "getSamples"
	public explicit_return_type "int"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples in a specified band for the specified rectangle
of pixels in an int array, one sample per data array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         The width of the pixel rectangle
@param h         The height of the pixel rectangle
@param b         The band to return
@param iArray    If non-null, returns the samples in this array
@param data      The DataBuffer containing the image data
@return the samples in the specified band for the pixels within
the specified region.
@see #setSamples(int, int, int, int, int, int[], DataBuffer)
"
      end

      operation 6616194 "setDataElements"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a single pixel in the specified DataBuffer from a
primitive array of type TransferType.  For a BandedSampleModel,
this will be the same as the data type, and samples are transferred
one per array element.
<p>
The following code illustrates transferring data for one pixel from
DataBuffer <code>db1</code>, whose storage layout is described by
BandedSampleModel <code>bsm1</code>, to DataBuffer <code>db2</code>,
whose storage layout is described by
BandedSampleModel <code>bsm2</code>.
The transfer will generally be more efficient than using
getPixel/setPixel.
<pre>
      BandedSampleModel bsm1, bsm2;
      DataBufferInt db1, db2;
      bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),
                           db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
obj must be a primitive array of type TransferType.  Otherwise,
a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is not large enough to hold the pixel data.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param obj       If non-null, returns the primitive array in this
                 object
@param data      The DataBuffer containing the image data
@see #getDataElements(int, int, Object, DataBuffer)
"
      end

      operation 6616322 "setPixel"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the DataBuffer using an int array of samples for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param iArray    The input samples in an int array
@param data      The DataBuffer containing the image data
@see #getPixel(int, int, int[], DataBuffer)
"
      end

      operation 6616450 "setPixels"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from an int array containing
one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         The width of the pixel rectangle
@param h         The height of the pixel rectangle
@param iArray    The input samples in an int array
@param data      The DataBuffer containing the image data
@see #getPixels(int, int, int, int, int[], DataBuffer)
"
      end

      operation 6616578 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using an int for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to set
@param s         The input sample as an int
@param data      The DataBuffer containing the image data
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6616706 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "float"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using a float for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to set
@param s         The input sample as a float
@param data      The DataBuffer containing the image data
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6616834 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "double"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using a double for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to set
@param s         The input sample as a double
@param data      The DataBuffer containing the image data
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6616962 "setSamples"
	public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from an int array containing one sample per data array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         The width of the pixel rectangle
@param h         The height of the pixel rectangle
@param b         The band to set
@param iArray    The input sample array
@param data      The DataBuffer containing the image data
@see #getSamples(int, int, int, int, int, int[], DataBuffer)
"
      end

      operation 6617090 "createOffsetArray"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "numBands" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6617218 "createIndicesArray"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "numBands" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6617346 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Differentiate hash code from other ComponentSampleModel subclasses"
      end
    end

    class 896898 "ComponentSampleModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class represents image data which is stored such that each sample
 of a pixel occupies one data element of the DataBuffer.  It stores the
 N samples which make up a pixel in N separate data array elements.
 Different bands may be in different banks of the DataBuffer.
 Accessor methods are provided so that image data can be manipulated
 directly. This class can support different kinds of interleaving, e.g.
 band interleaving, scanline interleaving, and pixel interleaving.
 Pixel stride is the number of data array elements between two samples
 for the same band on the same scanline. Scanline stride is the number
 of data array elements between a given sample and the corresponding sample
 in the same column of the next scanline.  Band offsets denote the number
 of data array elements from the first data array element of the bank
 of the DataBuffer holding each band to the first sample of the band.
 The bands are numbered from 0 to N-1.  This class can represent image
 data for which each sample is an unsigned integral number which can be
 stored in 8, 16, or 32 bits (using <code>DataBuffer.TYPE_BYTE</code>,
 <code>DataBuffer.TYPE_USHORT</code>, or <code>DataBuffer.TYPE_INT</code>,
 respectively), data for which each sample is a signed integral number
 which can be stored in 16 bits (using <code>DataBuffer.TYPE_SHORT</code>),
 or data for which each sample is a signed float or double quantity
 (using <code>DataBuffer.TYPE_FLOAT</code> or
 <code>DataBuffer.TYPE_DOUBLE</code>, respectively).
 All samples of a given ComponentSampleModel
 are stored with the same precision.  All strides and offsets must be
 non-negative.  This class supports
 {@link DataBuffer#TYPE_BYTE TYPE_BYTE},
 {@link DataBuffer#TYPE_USHORT TYPE_USHORT},
 {@link DataBuffer#TYPE_SHORT TYPE_SHORT},
 {@link DataBuffer#TYPE_INT TYPE_INT},
 {@link DataBuffer#TYPE_FLOAT TYPE_FLOAT},
 {@link DataBuffer#TYPE_DOUBLE TYPE_DOUBLE},
 @see java.awt.image.PixelInterleavedSampleModel
 @see java.awt.image.BandedSampleModel
"
      classrelation 3067394 // <generalisation>
	relation 3067394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3067394 // <generalisation>
	  b parent class_ref 314370 // SampleModel
      end

      attribute 1597954 "bandOffsets"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Offsets for all bands in data array elements. 
"
      end

      attribute 1598082 "bankIndices"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Index for each bank storing a band of image data. 
"
      end

      attribute 1598210 "numBands"
	protected explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of bands in this
<code>ComponentSampleModel</code>.

"
      end

      attribute 1598338 "numBanks"
	protected explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of banks in this
<code>ComponentSampleModel</code>.

"
      end

      attribute 1598466 "scanlineStride"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Line stride (in data array elements) of the region of image
 data described by this ComponentSampleModel.

"
      end

      attribute 1598594 "pixelStride"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pixel stride (in data array elements) of the region of image
 data described by this ComponentSampleModel.

"
      end

      operation 6610306 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 153602 "initialization"
	
	cpp "" ""
	java "  static {
        ColorModel.loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6610434 "ComponentSampleModel"
	public explicit_return_type ""
	nparams 6
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "pixelStride" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ComponentSampleModel with the specified parameters.
The number of bands will be given by the length of the bandOffsets array.
All bands will be stored in the first bank of the DataBuffer.
@param dataType  the data type for storing samples
@param w         the width (in pixels) of the region of
    image data described
@param h         the height (in pixels) of the region of
    image data described
@param pixelStride the pixel stride of the region of image
    data described
@param scanlineStride the line stride of the region of image
    data described
@param bandOffsets the offsets of all bands
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
@throws IllegalArgumentException if <code>pixelStride</code>
        is less than 0
@throws IllegalArgumentException if <code>scanlineStride</code>
        is less than 0
@throws IllegalArgumentException if <code>numBands</code>
        is less than 1
@throws IllegalArgumentException if the product of <code>w</code>
        and <code>h</code> is greater than
        <code>Integer.MAX_VALUE</code>
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6610562 "ComponentSampleModel"
	public explicit_return_type ""
	nparams 7
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "pixelStride" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bankIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ComponentSampleModel with the specified parameters.
The number of bands will be given by the length of the bandOffsets array.
Different bands may be stored in different banks of the DataBuffer.

@param dataType  the data type for storing samples
@param w         the width (in pixels) of the region of
    image data described
@param h         the height (in pixels) of the region of
    image data described
@param pixelStride the pixel stride of the region of image
    data described
@param scanlineStride The line stride of the region of image
    data described
@param bankIndices the bank indices of all bands
@param bandOffsets the band offsets of all bands
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
@throws IllegalArgumentException if <code>pixelStride</code>
        is less than 0
@throws IllegalArgumentException if <code>scanlineStride</code>
        is less than 0
@throws IllegalArgumentException if the length of
        <code>bankIndices</code> does not equal the length of
        <code>bankOffsets</code>
@throws IllegalArgumentException if any of the bank indices
        of <code>bandIndices</code> is less than 0
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6610690 "verify"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6610818 "getBufferSize"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the data buffer (in data elements) needed
for a data buffer that matches this ComponentSampleModel.
"
      end

      operation 6610946 "orderBands"
	package explicit_return_type "int"
	nparams 2
	  param inout name "orig" explicit_type "int"
	multiplicity "[]"
	  param in name "step" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Preserves band ordering with new step factor...
"
      end

      operation 6611074 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>ComponentSampleModel</code> with the specified
width and height.  The new <code>SampleModel</code> will have the same
number of bands, storage data type, interleaving scheme, and
pixel stride as this <code>SampleModel</code>.
@param w the width of the resulting <code>SampleModel</code>
@param h the height of the resulting <code>SampleModel</code>
@return a new <code>ComponentSampleModel</code> with the specified size
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
"
      end

      operation 6611202 "createSubsetSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 1
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ComponentSampleModel with a subset of the bands
of this ComponentSampleModel.  The new ComponentSampleModel can be
used with any DataBuffer that the existing ComponentSampleModel
can be used with.  The new ComponentSampleModel/DataBuffer
combination will represent an image with a subset of the bands
of the original ComponentSampleModel/DataBuffer combination.
@param bands a subset of bands from this
             <code>ComponentSampleModel</code>
@return a <code>ComponentSampleModel</code> created with a subset
         of bands from this <code>ComponentSampleModel</code>.
"
      end

      operation 6611330 "createDataBuffer"
	public return_type class_ref 897026 // DataBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>DataBuffer</code> that corresponds to this
<code>ComponentSampleModel</code>.
The <code>DataBuffer</code> object's data type, number of banks,
and size are be consistent with this <code>ComponentSampleModel</code>.
@return a <code>DataBuffer</code> whose data type, number of banks
        and size are consistent with this
        <code>ComponentSampleModel</code>.
"
      end

      operation 6611458 "getOffset"
	public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the offset for the first band of pixel (x,y).
 A sample of the first band can be retrieved from a
<code>DataBuffer</code>
 <code>data</code> with a <code>ComponentSampleModel</code>
<code>csm</code> as
<pre>
       data.getElem(csm.getOffset(x, y));
</pre>
@param x the X location of the pixel
@param y the Y location of the pixel
@return the offset for the first band of the specified pixel.
"
      end

      operation 6611586 "getOffset"
	public explicit_return_type "int"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the offset for band b of pixel (x,y).
 A sample of band <code>b</code> can be retrieved from a
 <code>DataBuffer</code> <code>data</code>
 with a <code>ComponentSampleModel</code> <code>csm</code> as
<pre>
      data.getElem(csm.getOffset(x, y, b));
</pre>
@param x the X location of the specified pixel
@param y the Y location of the specified pixel
@param b the specified band
@return the offset for the specified band of the specified pixel.
"
      end

      operation 6611714 "getSampleSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of bits per sample for all bands.
 @return an array containing the number of bits per sample
         for all bands, where each element in the array
         represents a band.
"
      end

      operation 6611842 "getSampleSize"
	public explicit_return_type "int"
	nparams 1
	  param in name "band" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of bits per sample for the specified band.
 @param band the specified band
 @return the number of bits per sample for the specified band.
"
      end

      operation 6611970 "getBankIndices"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the bank indices for all bands.
 @return the bank indices for all bands.
"
      end

      operation 6612098 "getBandOffsets"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the band offset for all bands.
 @return the band offsets for all bands.
"
      end

      operation 6612226 "getScanlineStride"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the scanline stride of this ComponentSampleModel.
 @return the scanline stride of this <code>ComponentSampleModel</code>.
"
      end

      operation 6612354 "getPixelStride"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the pixel stride of this ComponentSampleModel.
 @return the pixel stride of this <code>ComponentSampleModel</code>.
"
      end

      operation 6612482 "getNumDataElements"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of data elements needed to transfer a pixel
with the
{@link #getDataElements(int, int, Object, DataBuffer) } and
{@link #setDataElements(int, int, Object, DataBuffer) }
methods.
For a <code>ComponentSampleModel</code>, this is identical to the
number of bands.
@return the number of data elements needed to transfer a pixel with
        the <code>getDataElements</code> and
        <code>setDataElements</code> methods.
@see java.awt.image.SampleModel#getNumDataElements
@see #getNumBands
"
      end

      operation 6612610 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns data for a single pixel in a primitive array of type
<code>TransferType</code>.  For a <code>ComponentSampleModel</code>,
this is the same as the data type, and samples are returned
one per array element.  Generally, <code>obj</code> should
be passed in as <code>null</code>, so that the <code>Object</code>
is created automatically and is the right primitive data type.
<p>
The following code illustrates transferring data for one pixel from
<code>DataBuffer</code> <code>db1</code>, whose storage layout is
described by <code>ComponentSampleModel</code> <code>csm1</code>,
to <code>DataBuffer</code> <code>db2</code>, whose storage layout
is described by <code>ComponentSampleModel</code> <code>csm2</code>.
The transfer is usually more efficient than using
<code>getPixel</code> and <code>setPixel</code>.
<pre>
      ComponentSampleModel csm1, csm2;
      DataBufferInt db1, db2;
      csm2.setDataElements(x, y,
                           csm1.getDataElements(x, y, null, db1), db2);
</pre>

Using <code>getDataElements</code> and <code>setDataElements</code>
to transfer between two <code>DataBuffer/SampleModel</code>
pairs is legitimate if the <code>SampleModel</code> objects have
the same number of bands, corresponding bands have the same number of
bits per sample, and the <code>TransferType</code>s are the same.
<p>
If <code>obj</code> is not <code>null</code>, it should be a
primitive array of type <code>TransferType</code>.
Otherwise, a <code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> might be thrown if the
coordinates are not in bounds, or if <code>obj</code> is not
<code>null</code> and is not large enough to hold
the pixel data.

@param x         the X coordinate of the pixel location
@param y         the Y coordinate of the pixel location
@param obj       if non-<code>null</code>, a primitive array
                 in which to return the pixel data
@param data      the <code>DataBuffer</code> containing the image data
@return the data of the specified pixel
@see #setDataElements(int, int, Object, DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if obj is too small to hold the output.
"
      end

      operation 6612738 "getPixel"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for the specified pixel in an int array,
one sample per array element.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
the coordinates are not in bounds.
@param x         the X coordinate of the pixel location
@param y         the Y coordinate of the pixel location
@param iArray    If non-null, returns the samples in this array
@param data      The DataBuffer containing the image data
@return the samples of the specified pixel.
@see #setPixel(int, int, int[], DataBuffer)

@throws NullPointerException if data is null.
@throws ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if iArray is too small to hold the output.
"
      end

      operation 6612866 "getPixels"
	public explicit_return_type "int"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for the specified rectangle of pixels in
an int array, one sample per array element.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
the coordinates are not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         The width of the pixel rectangle
@param h         The height of the pixel rectangle
@param iArray    If non-null, returns the samples in this array
@param data      The DataBuffer containing the image data
@return the samples of the pixels within the specified region.
@see #setPixels(int, int, int, int, int[], DataBuffer)
"
      end

      operation 6612994 "getSample"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns as int the sample in a specified band for the pixel
located at (x,y).
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
the coordinates are not in bounds.
@param x         the X coordinate of the pixel location
@param y         the Y coordinate of the pixel location
@param b         the band to return
@param data      the <code>DataBuffer</code> containing the image data
@return the sample in a specified band for the specified pixel
@see #setSample(int, int, int, int, DataBuffer)
"
      end

      operation 6613122 "getSampleFloat"
	public explicit_return_type "float"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for the pixel located at (x,y) as a float.
An <code>ArrayIndexOutOfBoundsException</code> might be
thrown if the coordinates are not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to return
@param data      The DataBuffer containing the image data
@return a float value representing the sample in the specified
band for the specified pixel.
"
      end

      operation 6613250 "getSampleDouble"
	public explicit_return_type "double"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sample in a specified band
for a pixel located at (x,y) as a double.
An <code>ArrayIndexOutOfBoundsException</code> might be
thrown if the coordinates are not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to return
@param data      The DataBuffer containing the image data
@return a double value representing the sample in the specified
band for the specified pixel.
"
      end

      operation 6613378 "getSamples"
	public explicit_return_type "int"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples in a specified band for the specified rectangle
of pixels in an int array, one sample per data array element.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
the coordinates are not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         the width of the pixel rectangle
@param h         the height of the pixel rectangle
@param b         the band to return
@param iArray    if non-<code>null</code>, returns the samples
                 in this array
@param data      the <code>DataBuffer</code> containing the image data
@return the samples in the specified band of the specified pixel
@see #setSamples(int, int, int, int, int, int[], DataBuffer)
"
      end

      operation 6613506 "setDataElements"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a single pixel in the specified
<code>DataBuffer</code> from a primitive array of type
<code>TransferType</code>.  For a <code>ComponentSampleModel</code>,
this is the same as the data type, and samples are transferred
one per array element.
<p>
The following code illustrates transferring data for one pixel from
<code>DataBuffer</code> <code>db1</code>, whose storage layout is
described by <code>ComponentSampleModel</code> <code>csm1</code>,
to <code>DataBuffer</code> <code>db2</code>, whose storage layout
is described by <code>ComponentSampleModel</code> <code>csm2</code>.
The transfer is usually more efficient than using
<code>getPixel</code> and <code>setPixel</code>.
<pre>
      ComponentSampleModel csm1, csm2;
      DataBufferInt db1, db2;
      csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1),
                           db2);
</pre>
Using <code>getDataElements</code> and <code>setDataElements</code>
to transfer between two <code>DataBuffer/SampleModel</code> pairs
is legitimate if the <code>SampleModel</code> objects have
the same number of bands, corresponding bands have the same number of
bits per sample, and the <code>TransferType</code>s are the same.
<p>
A <code>ClassCastException</code> is thrown if <code>obj</code> is not
a primitive array of type <code>TransferType</code>.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
the coordinates are not in bounds, or if <code>obj</code> is not large
enough to hold the pixel data.
@param x         the X coordinate of the pixel location
@param y         the Y coordinate of the pixel location
@param obj       a primitive array containing pixel data
@param data      the DataBuffer containing the image data
@see #getDataElements(int, int, Object, DataBuffer)
"
      end

      operation 6613634 "setPixel"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the <code>DataBuffer</code> using an int array of
samples for input.  An <code>ArrayIndexOutOfBoundsException</code>
might be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param iArray    The input samples in an int array
@param data      The DataBuffer containing the image data
@see #getPixel(int, int, int[], DataBuffer)
"
      end

      operation 6613762 "setPixels"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from an int array containing
one sample per array element.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if the
coordinates are not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         The width of the pixel rectangle
@param h         The height of the pixel rectangle
@param iArray    The input samples in an int array
@param data      The DataBuffer containing the image data
@see #getPixels(int, int, int, int, int[], DataBuffer)
"
      end

      operation 6613890 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the <code>DataBuffer</code> using an int for input.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if the
coordinates are not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         the band to set
@param s         the input sample as an int
@param data      the DataBuffer containing the image data
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6614018 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "float"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the <code>DataBuffer</code> using a float for input.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
the coordinates are not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to set
@param s         The input sample as a float
@param data      The DataBuffer containing the image data
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6614146 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "double"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the <code>DataBuffer</code> using a double for input.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if
the coordinates are not in bounds.
@param x         The X coordinate of the pixel location
@param y         The Y coordinate of the pixel location
@param b         The band to set
@param s         The input sample as a double
@param data      The DataBuffer containing the image data
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6614274 "setSamples"
	public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from an int array containing one sample per data array element.
An <code>ArrayIndexOutOfBoundsException</code> might be thrown if the
coordinates are not in bounds.
@param x         The X coordinate of the upper left pixel location
@param y         The Y coordinate of the upper left pixel location
@param w         The width of the pixel rectangle
@param h         The height of the pixel rectangle
@param b         The band to set
@param iArray    The input samples in an int array
@param data      The DataBuffer containing the image data
@see #getSamples(int, int, int, int, int, int[], DataBuffer)
"
      end

      operation 6614402 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6614530 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If we implement equals() we must also implement hashCode"
      end
    end

    class 897026 "DataBuffer"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class exists to wrap one or more data arrays.  Each data array in
the DataBuffer is referred to as a bank.  Accessor methods for getting
and setting elements of the DataBuffer's banks exist with and without
a bank specifier.  The methods without a bank specifier use the default 0th
bank.  The DataBuffer can optionally take an offset per bank, so that
data in an existing array can be used even if the interesting data
doesn't start at array location zero.  Getting or setting the 0th
element of a bank, uses the (0+offset)th element of the array.  The
size field specifies how much of the data array is available for
use.  Size + offset for a given bank should never be greater
than the length of the associated data array.  The data type of
a data buffer indicates the type of the data array(s) and may also
indicate additional semantics, e.g. storing unsigned 8-bit data
in elements of a byte array.  The data type may be TYPE_UNDEFINED
or one of the types defined below.  Other types may be added in
the future.  Generally, an object of class DataBuffer will be cast down
to one of its data type specific subclasses to access data type specific
methods for improved performance.  Currently, the Java 2D(tm) API
image classes use TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT,
TYPE_FLOAT, and TYPE_DOUBLE DataBuffers to store image data.
@see java.awt.image.Raster
@see java.awt.image.SampleModel
"
      attribute 1609602 "TYPE_BYTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tag for unsigned byte data. 
"
      end

      attribute 1609730 "TYPE_USHORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tag for unsigned short data. 
"
      end

      attribute 1609858 "TYPE_SHORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tag for signed short data.  Placeholder for future use. 
"
      end

      attribute 1609986 "TYPE_INT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tag for int data. 
"
      end

      attribute 1610114 "TYPE_FLOAT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tag for float data.  Placeholder for future use. 
"
      end

      attribute 1610242 "TYPE_DOUBLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tag for double data.  Placeholder for future use. 
"
      end

      attribute 1610370 "TYPE_UNDEFINED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tag for undefined data. 
"
      end

      attribute 1610498 "dataType"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The data type of this DataBuffer. 
"
      end

      attribute 1610626 "banks"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of banks in this DataBuffer. 
"
      end

      attribute 1610754 "offset"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Offset into default (first) bank from which to get the first element. 
"
      end

      attribute 1610882 "size"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Usable size of all banks. 
"
      end

      attribute 1611010 "offsets"
	protected explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Offsets into all banks. 
"
      end

      attribute 1611138 "theTrackable"
	package explicit_type "StateTrackableDelegate"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current StateTrackable state. 
"
      end

      attribute 1611266 "dataTypeSize"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {8,16,16,32,32,64}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Size of the data types indexed by DataType tags defined above. 
"
      end

      operation 6647042 "getDataTypeSize"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the size (in bits) of the data type, given a datatype tag.
@param type the value of one of the defined datatype tags
@return the size of the data type
@throws IllegalArgumentException if <code>type</code> is less than
        zero or greater than {@link #TYPE_DOUBLE}
"
      end

      operation 6647170 "DataBuffer"
	protected explicit_return_type ""
	nparams 2
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer containing one bank of the specified
 data type and size.

 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
"
      end

      operation 6647298 "DataBuffer"
	package explicit_return_type ""
	nparams 3
	  param inout name "initialState" type class_ref 131074 // State
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer containing one bank of the specified
 data type and size with the indicated initial {@link State State}.

 @param initialState the initial {@link State State} state of the data
 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
 @since 1.7
"
      end

      operation 6647426 "DataBuffer"
	protected explicit_return_type ""
	nparams 3
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer containing the specified number of
 banks.  Each bank has the specified size and an offset of 0.

 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
 @param numBanks the number of banks in this
        <code>DataBuffer</code>
"
      end

      operation 6647554 "DataBuffer"
	package explicit_return_type ""
	nparams 4
	  param inout name "initialState" type class_ref 131074 // State
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer containing the specified number of
 banks with the indicated initial {@link State State}.
 Each bank has the specified size and an offset of 0.

 @param initialState the initial {@link State State} state of the data
 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
 @param numBanks the number of banks in this
        <code>DataBuffer</code>
 @since 1.7
"
      end

      operation 6647682 "DataBuffer"
	protected explicit_return_type ""
	nparams 4
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer that contains the specified number
 of banks.  Each bank has the specified datatype, size and offset.

 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
 @param numBanks the number of banks in this
        <code>DataBuffer</code>
 @param offset the offset for each bank
"
      end

      operation 6647810 "DataBuffer"
	package explicit_return_type ""
	nparams 5
	  param inout name "initialState" type class_ref 131074 // State
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer that contains the specified number
 of banks with the indicated initial {@link State State}.
 Each bank has the specified datatype, size and offset.

 @param initialState the initial {@link State State} state of the data
 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
 @param numBanks the number of banks in this
        <code>DataBuffer</code>
 @param offset the offset for each bank
 @since 1.7
"
      end

      operation 6647938 "DataBuffer"
	protected explicit_return_type ""
	nparams 4
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer which contains the specified number
 of banks.  Each bank has the specified datatype and size.  The
 offset for each bank is specified by its respective entry in
 the offsets array.

 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
 @param numBanks the number of banks in this
        <code>DataBuffer</code>
 @param offsets an array containing an offset for each bank.
 @throws ArrayIndexOutOfBoundsException if <code>numBanks</code>
         does not equal the length of <code>offsets</code>
"
      end

      operation 6648066 "DataBuffer"
	package explicit_return_type ""
	nparams 5
	  param inout name "initialState" type class_ref 131074 // State
	  param in name "dataType" explicit_type "int"
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a DataBuffer which contains the specified number
 of banks with the indicated initial {@link State State}.
 Each bank has the specified datatype and size.  The
 offset for each bank is specified by its respective entry in
 the offsets array.

 @param initialState the initial {@link State State} state of the data
 @param dataType the data type of this <code>DataBuffer</code>
 @param size the size of the banks
 @param numBanks the number of banks in this
        <code>DataBuffer</code>
 @param offsets an array containing an offset for each bank.
 @throws ArrayIndexOutOfBoundsException if <code>numBanks</code>
         does not equal the length of <code>offsets</code>
 @since 1.7
"
      end

      operation 6648194 "getDataType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Returns the data type of this DataBuffer.
  @return the data type of this <code>DataBuffer</code>.
"
      end

      operation 6648322 "getSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Returns the size (in array elements) of all banks.
  @return the size of all banks.
"
      end

      operation 6648450 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the offset of the default bank in array elements.
 @return the offset of the default bank.
"
      end

      operation 6648578 "getOffsets"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the offsets (in array elements) of all the banks.
 @return the offsets of all banks.
"
      end

      operation 6648706 "getNumBanks"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of banks in this DataBuffer.
 @return the number of banks.
"
      end

      operation 6648834 "getElem"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first (default) bank
as an integer.
@param i the index of the requested data array element
@return the data array element at the specified index.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6648962 "getElem"
	abstract public explicit_return_type "int"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified bank
as an integer.
@param bank the specified bank
@param i the index of the requested data array element
@return the data array element at the specified index from the
        specified bank at the specified index.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6649090 "setElem"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default) bank
from the given integer.
@param i the specified index into the data array
@param val the data to set the element at the specified index in
the data array
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6649218 "setElem"
	abstract public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
from the given integer.
@param bank the specified bank
@param i the specified index into the data array
@param val  the data to set the element in the specified bank
at the specified index in the data array
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6649346 "getElemFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first (default) bank
as a float.  The implementation in this class is to cast getElem(i)
to a float.  Subclasses may override this method if another
implementation is needed.
@param i the index of the requested data array element
@return a float value representing the data array element at the
 specified index.
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)
"
      end

      operation 6649474 "getElemFloat"
	public explicit_return_type "float"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified bank
as a float.  The implementation in this class is to cast
{@link #getElem(int, int)}
to a float.  Subclasses can override this method if another
implementation is needed.
@param bank the specified bank
@param i the index of the requested data array element
@return a float value representing the data array element from the
specified bank at the specified index.
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)
"
      end

      operation 6649602 "setElemFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default) bank
from the given float.  The implementation in this class is to cast
val to an int and call {@link #setElem(int, int)}.  Subclasses
can override this method if another implementation is needed.
@param i the specified index
@param val the value to set the element at the specified index in
the data array
@see #getElemFloat(int)
@see #getElemFloat(int, int)
"
      end

      operation 6649730 "setElemFloat"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
from the given float.  The implementation in this class is to cast
val to an int and call {@link #setElem(int, int)}.  Subclasses can
override this method if another implementation is needed.
@param bank the specified bank
@param i the specified index
@param val the value to set the element in the specified bank at
the specified index in the data array
@see #getElemFloat(int)
@see #getElemFloat(int, int)
"
      end

      operation 6649858 "getElemDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first (default) bank
as a double.  The implementation in this class is to cast
{@link #getElem(int)}
to a double.  Subclasses can override this method if another
implementation is needed.
@param i the specified index
@return a double value representing the element at the specified
index in the data array.
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)
"
      end

      operation 6649986 "getElemDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified bank as
a double.  The implementation in this class is to cast getElem(bank, i)
to a double.  Subclasses may override this method if another
implementation is needed.
@param bank the specified bank
@param i the specified index
@return a double value representing the element from the specified
bank at the specified index in the data array.
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)
"
      end

      operation 6650114 "setElemDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default) bank
from the given double.  The implementation in this class is to cast
val to an int and call {@link #setElem(int, int)}.  Subclasses can
override this method if another implementation is needed.
@param i the specified index
@param val the value to set the element at the specified index
in the data array
@see #getElemDouble(int)
@see #getElemDouble(int, int)
"
      end

      operation 6650242 "setElemDouble"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
from the given double.  The implementation in this class is to cast
val to an int and call {@link #setElem(int, int)}.  Subclasses can
override this method if another implementation is needed.
@param bank the specified bank
@param i the specified index
@param val the value to set the element in the specified bank
at the specified index of the data array
@see #getElemDouble(int)
@see #getElemDouble(int, int)
"
      end

      operation 6650370 "toIntArray"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 154114 "initialization"
	
	cpp "" ""
	java "  static {
        SunWritableRaster.setDataStealer(new SunWritableRaster.DataStealer() {
            public byte[] getData(DataBufferByte dbb, int bank) {
                return dbb.bankdata[bank];
            }

            public short[] getData(DataBufferUShort dbus, int bank) {
                return dbus.bankdata[bank];
            }

            public int[] getData(DataBufferInt dbi, int bank) {
                return dbi.bankdata[bank];
            }

            public StateTrackableDelegate getTrackable(DataBuffer db) {
                return db.theTrackable;
            }

            public void setTrackable(DataBuffer db,
                                     StateTrackableDelegate trackable)
            {
                db.theTrackable = trackable;
            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 897154 "WritableRenderedImage"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "WriteableRenderedImage is a common interface for objects which
contain or can produce image data in the form of Rasters and
which can be modified and/or written over.  The image
data may be stored/produced as a single tile or a regular array
of tiles.
<p>
WritableRenderedImage provides notification to other interested
objects when a tile is checked out for writing (via the
getWritableTile method) and when the last writer of a particular
tile relinquishes its access (via a call to releaseWritableTile).
Additionally, it allows any caller to determine whether any tiles
are currently checked out (via hasTileWriters), and to obtain a
list of such tiles (via getWritableTileIndices, in the form of a Vector
of Point objects).
<p>
Objects wishing to be notified of changes in tile writability must
implement the TileObserver interface, and are added by a
call to addTileObserver.  Multiple calls to
addTileObserver for the same object will result in multiple
notifications.  An existing observer may reduce its notifications
by calling removeTileObserver; if the observer had no
notifications the operation is a no-op.
<p>
It is necessary for a WritableRenderedImage to ensure that
notifications occur only when the first writer acquires a tile and
the last writer releases it.

"
      classrelation 3067778 // <generalisation>
	relation 3067778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3067778 // <generalisation>
	  b parent class_ref 313986 // RenderedImage
      end

      operation 6620162 "addTileObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "to" type class_ref 897282 // TileObserver
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an observer.  If the observer is already present,
it will receive multiple notifications.
@param to the specified <code>TileObserver</code>
"
      end

      operation 6620290 "removeTileObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "to" type class_ref 897282 // TileObserver
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an observer.  If the observer was not registered,
nothing happens.  If the observer was registered for multiple
notifications, it will now be registered for one fewer.
@param to the specified <code>TileObserver</code>
"
      end

      operation 6620418 "getWritableTile"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks out a tile for writing.

The WritableRenderedImage is responsible for notifying all
of its TileObservers when a tile goes from having
no writers to having one writer.

@param tileX the X index of the tile.
@param tileY the Y index of the tile.
@return a writable tile.
"
      end

      operation 6620546 "releaseWritableTile"
	public explicit_return_type "void"
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Relinquishes the right to write to a tile.  If the caller
continues to write to the tile, the results are undefined.
Calls to this method should only appear in matching pairs
with calls to getWritableTile; any other use will lead
to undefined results.

The WritableRenderedImage is responsible for notifying all of
its TileObservers when a tile goes from having one writer
to having no writers.

@param tileX the X index of the tile.
@param tileY the Y index of the tile.
"
      end

      operation 6620674 "isTileWritable"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a tile is currently checked out for writing.

@param tileX the X index of the tile.
@param tileY the Y index of the tile.
@return <code>true</code> if specified tile is checked out
        for writing; <code>false</code> otherwise.
"
      end

      operation 6620802 "getWritableTileIndices"
	public return_type class_ref 323714 // Point
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of Point objects indicating which tiles
are checked out for writing.  Returns null if none are
checked out.
@return an array containing the locations of tiles that are
        checked out for writing.
"
      end

      operation 6620930 "hasTileWriters"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether any tile is checked out for writing.
Semantically equivalent to (getWritableTileIndices() != null).
@return <code>true</code> if any tiles are checked out for
        writing; <code>false</code> otherwise.
"
      end

      operation 6621058 "setData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 311682 // Raster
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a rect of the image to the contents of the Raster r, which is
assumed to be in the same coordinate space as the WritableRenderedImage.
The operation is clipped to the bounds of the WritableRenderedImage.
@param r the specified <code>Raster</code>
"
      end
    end

    class 897282 "TileObserver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface for objects that wish to be informed when tiles
of a WritableRenderedImage become modifiable by some writer via
a call to getWritableTile, and when they become unmodifiable via
the last call to releaseWritableTile.

@see WritableRenderedImage

@author Thomas DeWeese
@author Daniel Rice
"
      operation 6699010 "tileUpdate"
	public explicit_return_type "void"
	nparams 4
	  param inout name "source" type class_ref 897154 // WritableRenderedImage
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	  param inout name "willBeWritable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A tile is about to be updated (it is either about to be grabbed
for writing, or it is being released from writing).

@param source the image that owns the tile.
@param tileX the X index of the tile that is being updated.
@param tileY the Y index of the tile that is being updated.
@param willBeWritable  If true, the tile will be grabbed for writing;
                       otherwise it is being released.
"
      end
    end

    class 897410 "BufferedImageFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>BufferedImageFilter</code> class subclasses an
<code>ImageFilter</code> to provide a simple means of
using a single-source/single-destination image operator
({@link BufferedImageOp}) to filter a <code>BufferedImage</code>
in the Image Producer/Consumer/Observer
paradigm. Examples of these image operators are: {@link ConvolveOp},
{@link AffineTransformOp} and {@link LookupOp}.

@see ImageFilter
@see BufferedImage
@see BufferedImageOp
"
      classrelation 3068546 // <generalisation>
	relation 3068546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3068546 // <generalisation>
	  b parent class_ref 379906 // ImageFilter
      end

      classrelation 3068674 // <realization>
	relation 3068674 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3068674 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3068802 // bufferedImageOp (<unidirectional association>)
	relation 3068802 --->
	  a role_name "bufferedImageOp" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3068802 // bufferedImageOp (<unidirectional association>)
	  b parent class_ref 867202 // BufferedImageOp
      end

      classrelation 3068930 // model (<unidirectional association>)
	relation 3068930 --->
	  a role_name "model" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3068930 // model (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      attribute 1602434 "width"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1602562 "height"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1602690 "bytePixels"
	package explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1602818 "intPixels"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6627842 "BufferedImageFilter"
	public explicit_return_type ""
	nparams 1
	  param inout name "op" type class_ref 867202 // BufferedImageOp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>BufferedImageFilter</code> with the
specified single-source/single-destination operator.
@param op the specified <code>BufferedImageOp</code> to
          use to filter a <code>BufferedImage</code>
@throws NullPointerException if op is null
"
      end

      operation 6627970 "getBufferedImageOp"
	public return_type class_ref 867202 // BufferedImageOp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>BufferedImageOp</code>.
@return the operator of this <code>BufferedImageFilter</code>.
"
      end

      operation 6628098 "setDimensions"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the
{@link ImageConsumer#setDimensions(int, int) setDimensions } method
of the {@link ImageConsumer} interface.
<p>
Note: This method is intended to be called by the
{@link ImageProducer} of the <code>Image</code> whose pixels are
being filtered. Developers using this class to retrieve pixels from
an image should avoid calling this method directly since that
operation could result in problems with retrieving the requested
pixels.
<p>
@param width the width to which to set the width of this
       <code>BufferedImageFilter</code>
@param height the height to which to set the height of this
       <code>BufferedImageFilter</code>
@see ImageConsumer#setDimensions
"
      end

      operation 6628226 "setColorModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "model" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the
{@link ImageConsumer#setColorModel(ColorModel) setColorModel} method
of the <code>ImageConsumer</code> interface.
<p>
If <code>model</code> is <code>null</code>, this
method clears the current <code>ColorModel</code> of this
<code>BufferedImageFilter</code>.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code>
whose pixels are being filtered.  Developers using this
class to retrieve pixels from an image
should avoid calling this method directly since that
operation could result in problems with retrieving the
requested pixels.
@param model the {@link ColorModel} to which to set the
       <code>ColorModel</code> of this <code>BufferedImageFilter</code>
@see ImageConsumer#setColorModel
"
      end

      operation 6628354 "convertToRGB"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6628482 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the <code>setPixels</code>
method of the <code>ImageConsumer</code> interface which takes
an array of bytes.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@throws IllegalArgumentException if width or height are less than
zero.
@see ImageConsumer#setPixels(int, int, int, int, ColorModel, byte[],
int, int)
"
      end

      operation 6628610 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the <code>setPixels</code>
method of the <code>ImageConsumer</code> interface which takes
an array of integers.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose
pixels are being filtered.  Developers using this class to
retrieve pixels from an image should avoid calling this method
directly since that operation could result in problems
with retrieving the requested pixels.
@throws IllegalArgumentException if width or height are less than
zero.
@see ImageConsumer#setPixels(int, int, int, int, ColorModel, int[],
int, int)
"
      end

      operation 6628738 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Filters the information provided in the <code>imageComplete</code>
method of the <code>ImageConsumer</code> interface.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param status the status of image loading
@throws ImagingOpException if there was a problem calling the filter
method of the <code>BufferedImageOp</code> associated with this
instance.
@see ImageConsumer#imageComplete
"
      end

      operation 6628866 "createDCMraster"
	private return_type class_ref 322690 // WritableRaster
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 897538 "ByteLookupTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines a lookup table object.  The output of a
lookup operation using an object of this class is interpreted
as an unsigned byte quantity.  The lookup table contains byte
data arrays for one or more bands (or components) of an image,
and it contains an offset which will be subtracted from the
input values before indexing the arrays.  This allows an array
smaller than the native data size to be provided for a
constrained input.  If there is only one array in the lookup
table, it will be applied to all bands.

@see ShortLookupTable
@see LookupOp
"
      classrelation 3069186 // <generalisation>
	relation 3069186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3069186 // <generalisation>
	  b parent class_ref 897666 // LookupTable
      end

      attribute 1603330 "data"
	package explicit_type "byte"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constants

"
      end

      operation 6629506 "ByteLookupTable"
	public explicit_return_type ""
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "data" explicit_type "byte"
	multiplicity "[][]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ByteLookupTable object from an array of byte
arrays representing a lookup table for each
band.  The offset will be subtracted from input
values before indexing into the arrays.  The number of
bands is the length of the data argument.  The
data array for each band is stored as a reference.
@param offset the value subtracted from the input values
       before indexing into the arrays
@param data an array of byte arrays representing a lookup
       table for each band
@throws IllegalArgumentException if <code>offset</code> is
        is less than 0 or if the length of <code>data</code>
        is less than 1
"
      end

      operation 6629634 "ByteLookupTable"
	public explicit_return_type ""
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ByteLookupTable object from an array
of bytes representing a lookup table to be applied to all
bands.  The offset will be subtracted from input
values before indexing into the array.
The data array is stored as a reference.
@param offset the value subtracted from the input values
       before indexing into the array
@param data an array of bytes
@throws IllegalArgumentException if <code>offset</code> is
        is less than 0 or if the length of <code>data</code>
        is less than 1
"
      end

      operation 6629762 "getTable"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lookup table data by reference.  If this ByteLookupTable
was constructed using a single byte array, the length of the returned
array is one.
@return the data array of this <code>ByteLookupTable</code>.
"
      end

      operation 6629890 "lookupPixel"
	public explicit_return_type "int"
	nparams 2
	  param inout name "src" explicit_type "int"
	multiplicity "[]"
	  param inout name "dst" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of samples of a pixel, translated with the lookup
table. The source and destination array can be the same array.
Array <code>dst</code> is returned.

@param src the source array.
@param dst the destination array. This array must be at least as
        long as <code>src</code>.  If <code>dst</code> is
        <code>null</code>, a new array will be allocated having the
        same length as <code>src</code>.
@return the array <code>dst</code>, an <code>int</code> array of
        samples.
@exception ArrayIndexOutOfBoundsException if <code>src</code> is
           longer than <code>dst</code> or if for any element
           <code>i</code> of <code>src</code>,
           <code>src[i]-offset</code> is either less than zero or
           greater than or equal to the length of the lookup table
           for any band.
"
      end

      operation 6630018 "lookupPixel"
	public explicit_return_type "byte"
	nparams 2
	  param inout name "src" explicit_type "byte"
	multiplicity "[]"
	  param inout name "dst" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of samples of a pixel, translated with the lookup
table. The source and destination array can be the same array.
Array <code>dst</code> is returned.

@param src the source array.
@param dst the destination array. This array must be at least as
        long as <code>src</code>.  If <code>dst</code> is
        <code>null</code>, a new array will be allocated having the
        same length as <code>src</code>.
@return the array <code>dst</code>, an <code>int</code> array of
        samples.
@exception ArrayIndexOutOfBoundsException if <code>src</code> is
           longer than <code>dst</code> or if for any element
           <code>i</code> of <code>src</code>,
           {@code (src[i]&0xff)-offset} is either less than
           zero or greater than or equal to the length of the
           lookup table for any band.
"
      end
    end

    class 897666 "LookupTable"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This abstract class defines a lookup table object.  ByteLookupTable
and ShortLookupTable are subclasses, which
contain byte and short data, respectively.  A lookup table
contains data arrays for one or more bands (or components) of an image
(for example, separate arrays for R, G, and B),
and it contains an offset which will be subtracted from the
input values before indexing into the arrays.  This allows an array
smaller than the native data size to be provided for a
constrained input.  If there is only one array in the lookup
table, it will be applied to all bands.  All arrays must be the
same size.

@see ByteLookupTable
@see ShortLookupTable
@see LookupOp
"
      classrelation 3069058 // <generalisation>
	relation 3069058 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3069058 // <generalisation>
	  b parent class_ref 129538 // Object
      end

      attribute 1602946 "numComponents"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constants

"
      end

      attribute 1603074 "offset"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1603202 "numEntries"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6628994 "LookupTable"
	protected explicit_return_type ""
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "numComponents" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new LookupTable from the number of components and an offset
into the lookup table.
@param offset the offset to subtract from input values before indexing
       into the data arrays for this <code>LookupTable</code>
@param numComponents the number of data arrays in this
       <code>LookupTable</code>
@throws IllegalArgumentException if <code>offset</code> is less than 0
        or if <code>numComponents</code> is less than 1
"
      end

      operation 6629122 "getNumComponents"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of components in the lookup table.
@return the number of components in this <code>LookupTable</code>.
"
      end

      operation 6629250 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offset.
@return the offset of this <code>LookupTable</code>.
"
      end

      operation 6629378 "lookupPixel"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "src" explicit_type "int"
	multiplicity "[]"
	  param inout name "dest" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>int</code> array of components for
one pixel.  The <code>dest</code> array contains the
result of the lookup and is returned.  If dest is
<code>null</code>, a new array is allocated.  The
source and destination can be equal.
@param src the source array of components of one pixel
@param dest the destination array of components for one pixel,
       translated with this <code>LookupTable</code>
@return an <code>int</code> array of components for one
        pixel.
"
      end
    end

    class 897794 "ComponentColorModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <CODE>ColorModel</CODE> class that works with pixel values that
represent color and alpha information as separate samples and that
store each sample in a separate data element.  This class can be
used with an arbitrary <CODE>ColorSpace</CODE>.  The number of
color samples in the pixel values must be same as the number of
color components in the <CODE>ColorSpace</CODE>. There may be a
single alpha sample.
<p>
For those methods that use
a primitive array pixel representation of type <CODE>transferType</CODE>,
the array length is the same as the number of color and alpha samples.
Color samples are stored first in the array followed by the alpha
sample, if present.  The order of the color samples is specified
by the <CODE>ColorSpace</CODE>.  Typically, this order reflects the
name of the color space type. For example, for <CODE>TYPE_RGB</CODE>,
index 0 corresponds to red, index 1 to green, and index 2 to blue.
<p>
The translation from pixel sample values to color/alpha components for
display or processing purposes is based on a one-to-one correspondence of
samples to components.
Depending on the transfer type used to create an instance of
<code>ComponentColorModel</code>, the pixel sample values
represented by that instance may be signed or unsigned and may
be of integral type or float or double (see below for details).
The translation from sample values to normalized color/alpha components
must follow certain rules.  For float and double samples, the translation
is an identity, i.e. normalized component values are equal to the
corresponding sample values.  For integral samples, the translation
should be only a simple scale and offset, where the scale and offset
constants may be different for each component.  The result of
applying the scale and offset constants is a set of color/alpha
component values, which are guaranteed to fall within a certain
range.  Typically, the range for a color component will be the range
defined by the <code>getMinValue</code> and <code>getMaxValue</code>
methods of the <code>ColorSpace</code> class.  The range for an
alpha component should be 0.0 to 1.0.
<p>
Instances of <code>ComponentColorModel</code> created with transfer types
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
and <CODE>DataBuffer.TYPE_INT</CODE> have pixel sample values which
are treated as unsigned integral values.
The number of bits in a color or alpha sample of a pixel value might not
be the same as the number of bits for the corresponding color or alpha
sample passed to the
<code>ComponentColorModel(ColorSpace, int[], boolean, boolean, int, int)</code>
constructor.  In
that case, this class assumes that the least significant n bits of a sample
value hold the component value, where n is the number of significant bits
for the component passed to the constructor.  It also assumes that
any higher-order bits in a sample value are zero.  Thus, sample values
range from 0 to 2<sup>n</sup> - 1.  This class maps these sample values
to normalized color component values such that 0 maps to the value
obtained from the <code>ColorSpace's</code> <code>getMinValue</code>
method for each component and 2<sup>n</sup> - 1 maps to the value
obtained from <code>getMaxValue</code>.  To create a
<code>ComponentColorModel</code> with a different color sample mapping
requires subclassing this class and overriding the
<code>getNormalizedComponents(Object, float[], int)</code> method.
The mapping for an alpha sample always maps 0 to 0.0 and
2<sup>n</sup> - 1 to 1.0.
<p>
For instances with unsigned sample values,
the unnormalized color/alpha component representation is only
supported if two conditions hold.  First, sample value value 0 must
map to normalized component value 0.0 and sample value 2<sup>n</sup> - 1
to 1.0.  Second the min/max range of all color components of the
<code>ColorSpace</code> must be 0.0 to 1.0.  In this case, the
component representation is the n least
significant bits of the corresponding sample.  Thus each component is
an unsigned integral value between 0 and 2<sup>n</sup> - 1, where
n is the number of significant bits for a particular component.
If these conditions are not met, any method taking an unnormalized
component argument will throw an <code>IllegalArgumentException</code>.
<p>
Instances of <code>ComponentColorModel</code> created with transfer types
<CODE>DataBuffer.TYPE_SHORT</CODE>, <CODE>DataBuffer.TYPE_FLOAT</CODE>, and
<CODE>DataBuffer.TYPE_DOUBLE</CODE> have pixel sample values which
are treated as signed short, float, or double values.
Such instances do not support the unnormalized color/alpha component
representation, so any methods taking such a representation as an argument
will throw an <code>IllegalArgumentException</code> when called on one
of these instances.  The normalized component values of instances
of this class have a range which depends on the transfer
type as follows: for float samples, the full range of the float data
type; for double samples, the full range of the float data type
(resulting from casting double to float); for short samples,
from approximately -maxVal to +maxVal, where maxVal is the per
component maximum value for the <code>ColorSpace</code>
(-32767 maps to -maxVal, 0 maps to 0.0, and 32767 maps
to +maxVal).  A subclass may override the scaling for short sample
values to normalized component values by overriding the
<code>getNormalizedComponents(Object, float[], int)</code> method.
For float and double samples, the normalized component values are
taken to be equal to the corresponding sample values, and subclasses
should not attempt to add any non-identity scaling for these transfer
types.
<p>
Instances of <code>ComponentColorModel</code> created with transfer types
<CODE>DataBuffer.TYPE_SHORT</CODE>, <CODE>DataBuffer.TYPE_FLOAT</CODE>, and
<CODE>DataBuffer.TYPE_DOUBLE</CODE>
use all the bits of all sample values.  Thus all color/alpha components
have 16 bits when using <CODE>DataBuffer.TYPE_SHORT</CODE>, 32 bits when
using <CODE>DataBuffer.TYPE_FLOAT</CODE>, and 64 bits when using
<CODE>DataBuffer.TYPE_DOUBLE</CODE>.  When the
<code>ComponentColorModel(ColorSpace, int[], boolean, boolean, int, int)</code>
form of constructor is used with one of these transfer types, the
bits array argument is ignored.
<p>
It is possible to have color/alpha sample values
which cannot be reasonably interpreted as component values for rendering.
This can happen when <code>ComponentColorModel</code> is subclassed to
override the mapping of unsigned sample values to normalized color
component values or when signed sample values outside a certain range
are used.  (As an example, specifying an alpha component as a signed
short value outside the range 0 to 32767, normalized range 0.0 to 1.0, can
lead to unexpected results.) It is the
responsibility of applications to appropriately scale pixel data before
rendering such that color components fall within the normalized range
of the <code>ColorSpace</code> (obtained using the <code>getMinValue</code>
and <code>getMaxValue</code> methods of the <code>ColorSpace</code> class)
and the alpha component is between 0.0 and 1.0.  If color or alpha
component values fall outside these ranges, rendering results are
indeterminate.
<p>
Methods that use a single int pixel representation throw
an <CODE>IllegalArgumentException</CODE>, unless the number of components
for the <CODE>ComponentColorModel</CODE> is one and the component
value is unsigned -- in other words,  a single color component using
a transfer type of <CODE>DataBuffer.TYPE_BYTE</CODE>,
<CODE>DataBuffer.TYPE_USHORT</CODE>, or <CODE>DataBuffer.TYPE_INT</CODE>
and no alpha.
<p>
A <CODE>ComponentColorModel</CODE> can be used in conjunction with a
<CODE>ComponentSampleModel</CODE>, a <CODE>BandedSampleModel</CODE>,
or a <CODE>PixelInterleavedSampleModel</CODE> to construct a
<CODE>BufferedImage</CODE>.

@see ColorModel
@see ColorSpace
@see ComponentSampleModel
@see BandedSampleModel
@see PixelInterleavedSampleModel
@see BufferedImage

"
      classrelation 3071106 // <generalisation>
	relation 3071106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3071106 // <generalisation>
	  b parent class_ref 312066 // ColorModel
      end

      attribute 1606530 "signed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<code>signed</code>  is <code>true</code> for <code>short</code>,
<code>float</code>, and <code>double</code> transfer types; it
is <code>false</code> for <code>byte</code>, <code>ushort</code>,
and <code>int</code> transfer types.

 true for transfer types short, float, double"
      end

      attribute 1606658 "is_sRGB_stdScale"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " false for byte, ushort, int
"
      end

      attribute 1606786 "is_LinearRGB_stdScale"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1606914 "is_LinearGray_stdScale"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607042 "is_ICCGray_stdScale"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607170 "tosRGB8LUT"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607298 "fromsRGB8LUT8"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607426 "fromsRGB8LUT16"
	private explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607554 "fromLinearGray16ToOtherGray8LUT"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607682 "fromLinearGray16ToOtherGray16LUT"
	private explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607810 "needScaleInit"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1607938 "noUnnorm"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1608066 "nonStdScale"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1608194 "min"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1608322 "diffMinMax"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1608450 "compOffset"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1608578 "compScale"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6640130 "ComponentColorModel"
	public explicit_return_type ""
	nparams 6
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param inout name "bits" explicit_type "int"
	multiplicity "[]"
	  param inout name "hasAlpha" explicit_type "boolean"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  param in name "transparency" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <CODE>ComponentColorModel</CODE> from the specified
parameters. Color components will be in the specified
<CODE>ColorSpace</CODE>.  The supported transfer types are
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>,
<CODE>DataBuffer.TYPE_SHORT</CODE>, <CODE>DataBuffer.TYPE_FLOAT</CODE>,
and <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
If not null, the <CODE>bits</CODE> array specifies the
number of significant bits per color and alpha component and its
length should be at least the number of components in the
<CODE>ColorSpace</CODE> if there is no alpha
information in the pixel values, or one more than this number if
there is alpha information.  When the <CODE>transferType</CODE> is
<CODE>DataBuffer.TYPE_SHORT</CODE>, <CODE>DataBuffer.TYPE_FLOAT</CODE>,
or <CODE>DataBuffer.TYPE_DOUBLE</CODE> the <CODE>bits</CODE> array
argument is ignored.  <CODE>hasAlpha</CODE> indicates whether alpha
information is present.  If <CODE>hasAlpha</CODE> is true, then
the boolean <CODE>isAlphaPremultiplied</CODE>
specifies how to interpret color and alpha samples in pixel values.
If the boolean is true, color samples are assumed to have been
multiplied by the alpha sample. The <CODE>transparency</CODE>
specifies what alpha values can be represented by this color model.
The acceptable <code>transparency</code> values are
<CODE>OPAQUE</CODE>, <CODE>BITMASK</CODE> or <CODE>TRANSLUCENT</CODE>.
The <CODE>transferType</CODE> is the type of primitive array used
to represent pixel values.

@param colorSpace       The <CODE>ColorSpace</CODE> associated
                        with this color model.
@param bits             The number of significant bits per component.
                        May be null, in which case all bits of all
                        component samples will be significant.
                        Ignored if transferType is one of
                        <CODE>DataBuffer.TYPE_SHORT</CODE>,
                        <CODE>DataBuffer.TYPE_FLOAT</CODE>, or
                        <CODE>DataBuffer.TYPE_DOUBLE</CODE>,
                        in which case all bits of all component
                        samples will be significant.
@param hasAlpha         If true, this color model supports alpha.
@param isAlphaPremultiplied If true, alpha is premultiplied.
@param transparency     Specifies what alpha values can be represented
                        by this color model.
@param transferType     Specifies the type of primitive array used to
                        represent pixel values.

@throws IllegalArgumentException If the <CODE>bits</CODE> array
        argument is not null, its length is less than the number of
        color and alpha components, and transferType is one of
        <CODE>DataBuffer.TYPE_BYTE</CODE>,
        <CODE>DataBuffer.TYPE_USHORT</CODE>, or
        <CODE>DataBuffer.TYPE_INT</CODE>.
@throws IllegalArgumentException If transferType is not one of
        <CODE>DataBuffer.TYPE_BYTE</CODE>,
        <CODE>DataBuffer.TYPE_USHORT</CODE>,
        <CODE>DataBuffer.TYPE_INT</CODE>,
        <CODE>DataBuffer.TYPE_SHORT</CODE>,
        <CODE>DataBuffer.TYPE_FLOAT</CODE>, or
        <CODE>DataBuffer.TYPE_DOUBLE</CODE>.

@see ColorSpace
@see java.awt.Transparency
"
      end

      operation 6640258 "ComponentColorModel"
	public explicit_return_type ""
	nparams 5
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param inout name "hasAlpha" explicit_type "boolean"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  param in name "transparency" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <CODE>ComponentColorModel</CODE> from the specified
parameters. Color components will be in the specified
<CODE>ColorSpace</CODE>.  The supported transfer types are
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>,
<CODE>DataBuffer.TYPE_SHORT</CODE>, <CODE>DataBuffer.TYPE_FLOAT</CODE>,
and <CODE>DataBuffer.TYPE_DOUBLE</CODE>.  The number of significant
bits per color and alpha component will be 8, 16, 32, 16, 32,  or 64,
respectively.  The number of color components will be the
number of components in the <CODE>ColorSpace</CODE>.  There will be
an alpha component if <CODE>hasAlpha</CODE> is <CODE>true</CODE>.
If <CODE>hasAlpha</CODE> is true, then
the boolean <CODE>isAlphaPremultiplied</CODE>
specifies how to interpret color and alpha samples in pixel values.
If the boolean is true, color samples are assumed to have been
multiplied by the alpha sample. The <CODE>transparency</CODE>
specifies what alpha values can be represented by this color model.
The acceptable <code>transparency</code> values are
<CODE>OPAQUE</CODE>, <CODE>BITMASK</CODE> or <CODE>TRANSLUCENT</CODE>.
The <CODE>transferType</CODE> is the type of primitive array used
to represent pixel values.

@param colorSpace       The <CODE>ColorSpace</CODE> associated
                        with this color model.
@param hasAlpha         If true, this color model supports alpha.
@param isAlphaPremultiplied If true, alpha is premultiplied.
@param transparency     Specifies what alpha values can be represented
                        by this color model.
@param transferType     Specifies the type of primitive array used to
                        represent pixel values.

@throws IllegalArgumentException If transferType is not one of
        <CODE>DataBuffer.TYPE_BYTE</CODE>,
        <CODE>DataBuffer.TYPE_USHORT</CODE>,
        <CODE>DataBuffer.TYPE_INT</CODE>,
        <CODE>DataBuffer.TYPE_SHORT</CODE>,
        <CODE>DataBuffer.TYPE_FLOAT</CODE>, or
        <CODE>DataBuffer.TYPE_DOUBLE</CODE>.

@see ColorSpace
@see java.awt.Transparency
@since 1.4
"
      end

      operation 6640386 "bitsHelper"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "transferType" explicit_type "int"
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param inout name "hasAlpha" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6640514 "bitsArrayHelper"
	class_operation private explicit_return_type "int"
	nparams 4
	  param inout name "origBits" explicit_type "int"
	multiplicity "[]"
	  param in name "transferType" explicit_type "int"
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param inout name "hasAlpha" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6640642 "setupLUTs"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6640770 "initScale"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6640898 "getRGBComponent"
	private explicit_return_type "int"
	nparams 2
	  param in name "pixel" explicit_type "int"
	  param in name "idx" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6641026 "getRed"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the red color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
is done if necessary.  The pixel value is specified as an int.
The returned value will be a non pre-multiplied value.
If the alpha is premultiplied, this method divides
it out before returning the value (if the alpha value is 0,
the red value will be 0).

@param pixel The pixel from which you want to get the red color component.

@return The red color component for the specified pixel, as an int.

@throws IllegalArgumentException If there is more than
one component in this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If the component value for this
<CODE>ColorModel</CODE> is signed
"
      end

      operation 6641154 "getGreen"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the green color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
is done if necessary.  The pixel value is specified as an int.
The returned value will be a non
pre-multiplied value. If the alpha is premultiplied, this method
divides it out before returning the value (if the alpha value is 0,
the green value will be 0).

@param pixel The pixel from which you want to get the green color component.

@return The green color component for the specified pixel, as an int.

@throws IllegalArgumentException If there is more than
one component in this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If the component value for this
<CODE>ColorModel</CODE> is signed
"
      end

      operation 6641282 "getBlue"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the blue color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
is done if necessary.  The pixel value is specified as an int.
The returned value will be a non
pre-multiplied value. If the alpha is premultiplied, this method
divides it out before returning the value (if the alpha value is 0,
the blue value will be 0).

@param pixel The pixel from which you want to get the blue color component.

@return The blue color component for the specified pixel, as an int.

@throws IllegalArgumentException If there is more than
one component in this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If the component value for this
<CODE>ColorModel</CODE> is signed
"
      end

      operation 6641410 "getAlpha"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alpha component for the specified pixel, scaled
from 0 to 255.   The pixel value is specified as an int.

@param pixel The pixel from which you want to get the alpha component.

@return The alpha component for the specified pixel, as an int.

@throws IllegalArgumentException If there is more than
one component in this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If the component value for this
<CODE>ColorModel</CODE> is signed
"
      end

      operation 6641538 "getRGB"
	public explicit_return_type "int"
	nparams 1
	  param in name "pixel" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color/alpha components of the pixel in the default
RGB color model format.  A color conversion is done if necessary.
The returned value will be in a non pre-multiplied format. If
the alpha is premultiplied, this method divides it out of the
color components (if the alpha value is 0, the color values will be 0).

@param pixel The pixel from which you want to get the color/alpha components.

@return The color/alpha components for the specified pixel, as an int.

@throws IllegalArgumentException If there is more than
one component in this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If the component value for this
<CODE>ColorModel</CODE> is signed
"
      end

      operation 6641666 "extractComponent"
	private explicit_return_type "int"
	nparams 3
	  param inout name "inData" type class_ref 129538 // Object
	  param in name "idx" explicit_type "int"
	  param in name "precision" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6641794 "getRGBComponent"
	private explicit_return_type "int"
	nparams 2
	  param inout name "inData" type class_ref 129538 // Object
	  param in name "idx" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6641922 "getRed"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the red color component for the specified pixel, scaled
from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
is done if necessary.  The <CODE>pixel</CODE> value is specified by an array
of data elements of type <CODE>transferType</CODE> passed in as an object
reference. The returned value will be a non pre-multiplied value. If the
alpha is premultiplied, this method divides it out before returning
the value (if the alpha value is 0, the red value will be 0). Since
<code>ComponentColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't override
it then they throw an exception if they use an unsupported
<code>transferType</code>.

@param inData The pixel from which you want to get the red color component,
specified by an array of data elements of type <CODE>transferType</CODE>.

@return The red color component for the specified pixel, as an int.

@throws ClassCastException If <CODE>inData</CODE> is not a primitive array
of type <CODE>transferType</CODE>.
@throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
large enough to hold a pixel value for this
<CODE>ColorModel</CODE>.
@throws UnsupportedOperationException If the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the supported transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
<CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
"
      end

      operation 6642050 "getGreen"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the green color component for the specified pixel, scaled
from 0 to 255 in the default RGB <CODE>ColorSpace</CODE>, sRGB.
A color conversion is done if necessary.  The <CODE>pixel</CODE> value
is specified by an array of data elements of type <CODE>transferType</CODE>
passed in as an object reference. The returned value is a non pre-multiplied
value. If the alpha is premultiplied, this method divides it out before
returning the value (if the alpha value is 0, the green value will be 0).
Since <code>ComponentColorModel</code> can be subclassed,
subclasses inherit the implementation of this method and if they
don't override it then they throw an exception if they use an
unsupported <code>transferType</code>.

@param inData The pixel from which you want to get the green color component,
specified by an array of data elements of type <CODE>transferType</CODE>.

@return The green color component for the specified pixel, as an int.

@throws ClassCastException If <CODE>inData</CODE> is not a primitive array
of type <CODE>transferType</CODE>.
@throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
large enough to hold a pixel value for this
<CODE>ColorModel</CODE>.
@throws UnsupportedOperationException If the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the supported transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
<CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
"
      end

      operation 6642178 "getBlue"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the blue color component for the specified pixel, scaled
from 0 to 255 in the default RGB <CODE>ColorSpace</CODE>, sRGB.
A color conversion is done if necessary.  The <CODE>pixel</CODE> value is
specified by an array of data elements of type <CODE>transferType</CODE>
passed in as an object reference. The returned value is a non pre-multiplied
value. If the alpha is premultiplied, this method divides it out before
returning the value (if the alpha value is 0, the blue value will be 0).
Since <code>ComponentColorModel</code> can be subclassed,
subclasses inherit the implementation of this method and if they
don't override it then they throw an exception if they use an
unsupported <code>transferType</code>.

@param inData The pixel from which you want to get the blue color component,
specified by an array of data elements of type <CODE>transferType</CODE>.

@return The blue color component for the specified pixel, as an int.

@throws ClassCastException If <CODE>inData</CODE> is not a primitive array
of type <CODE>transferType</CODE>.
@throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
large enough to hold a pixel value for this
<CODE>ColorModel</CODE>.
@throws UnsupportedOperationException If the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the supported transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
<CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
"
      end

      operation 6642306 "getAlpha"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the alpha component for the specified pixel, scaled from
0 to 255.  The pixel value is specified by an array of data
elements of type <CODE>transferType</CODE> passed in as an
object reference.  Since <code>ComponentColorModel</code> can be
subclassed, subclasses inherit the
implementation of this method and if they don't override it then
they throw an exception if they use an unsupported
<code>transferType</code>.

@param inData The pixel from which you want to get the alpha component,
specified by an array of data elements of type <CODE>transferType</CODE>.

@return The alpha component for the specified pixel, as an int.

@throws ClassCastException If <CODE>inData</CODE> is not a primitive array
of type <CODE>transferType</CODE>.
@throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
large enough to hold a pixel value for this
<CODE>ColorModel</CODE>.
@throws UnsupportedOperationException If the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the supported transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
<CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
"
      end

      operation 6642434 "getRGB"
	public explicit_return_type "int"
	nparams 1
	  param inout name "inData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color/alpha components for the specified pixel in the
default RGB color model format.  A color conversion is done if
necessary.  The pixel value is specified by an
array of data elements of type <CODE>transferType</CODE> passed
in as an object reference.
The returned value is in a non pre-multiplied format. If
the alpha is premultiplied, this method divides it out of the
color components (if the alpha value is 0, the color values will be 0).
Since <code>ComponentColorModel</code> can be subclassed,
subclasses inherit the implementation of this method and if they
don't override it then they throw an exception if they use an
unsupported <code>transferType</code>.

@param inData The pixel from which you want to get the color/alpha components,
specified by an array of data elements of type <CODE>transferType</CODE>.

@return The color/alpha components for the specified pixel, as an int.

@throws ClassCastException If <CODE>inData</CODE> is not a primitive array
of type <CODE>transferType</CODE>.
@throws ArrayIndexOutOfBoundsException if <CODE>inData</CODE> is not
large enough to hold a pixel value for this
<CODE>ColorModel</CODE>.
@throws UnsupportedOperationException If the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the supported transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
<CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
@see ColorModel#getRGBdefault
"
      end

      operation 6642562 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "rgb" explicit_type "int"
	  param inout name "pixel" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<CODE>ColorModel</CODE>, given an integer pixel representation
in the default RGB color model.
This array can then be passed to the <CODE>setDataElements</CODE>
method of a <CODE>WritableRaster</CODE> object.  If the
<CODE>pixel</CODE>
parameter is null, a new array is allocated.  Since
<code>ComponentColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then
they throw an exception if they use an unsupported
<code>transferType</code>.

@param rgb the integer representation of the pixel in the RGB
           color model
@param pixel the specified pixel
@return The data element array representation of a pixel
in this <CODE>ColorModel</CODE>.
@throws ClassCastException If <CODE>pixel</CODE> is not null and
is not a primitive array of type <CODE>transferType</CODE>.
@throws ArrayIndexOutOfBoundsException If <CODE>pixel</CODE> is
not large enough to hold a pixel value for this
<CODE>ColorModel</CODE>.
@throws UnsupportedOperationException If the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the supported transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
<CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.

@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6642690 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param in name "pixel" explicit_type "int"
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an array of unnormalized color/alpha components given a pixel
in this <CODE>ColorModel</CODE>.
An IllegalArgumentException is thrown if the component value for this
<CODE>ColorModel</CODE> is not conveniently representable in the
unnormalized form.  Color/alpha components are stored
in the <CODE>components</CODE> array starting at <CODE>offset</CODE>
(even if the array is allocated by this method).

@param pixel The pixel value specified as an integer.
@param components An integer array in which to store the unnormalized
color/alpha components. If the <CODE>components</CODE> array is null,
a new array is allocated.
@param offset An offset into the <CODE>components</CODE> array.

@return The components array.

@throws IllegalArgumentException If there is more than one
component in this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If this
<CODE>ColorModel</CODE> does not support the unnormalized form
@throws ArrayIndexOutOfBoundsException If the <CODE>components</CODE>
array is not null and is not large enough to hold all the color and
alpha components (starting at offset).
"
      end

      operation 6642818 "getComponents"
	public explicit_return_type "int"
	nparams 3
	  param inout name "pixel" type class_ref 129538 // Object
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of unnormalized color/alpha components given a pixel
in this <CODE>ColorModel</CODE>.  The pixel value is specified by an
array of data elements of type <CODE>transferType</CODE> passed in as
an object reference.
An IllegalArgumentException is thrown if the component values for this
<CODE>ColorModel</CODE> are not conveniently representable in the
unnormalized form.
Color/alpha components are stored in the <CODE>components</CODE> array
starting at  <CODE>offset</CODE> (even if the array is allocated by
this method).  Since <code>ComponentColorModel</code> can be
subclassed, subclasses inherit the
implementation of this method and if they don't override it then
this method might throw an exception if they use an unsupported
<code>transferType</code>.

@param pixel A pixel value specified by an array of data elements of
type <CODE>transferType</CODE>.
@param components An integer array in which to store the unnormalized
color/alpha components. If the <CODE>components</CODE> array is null,
a new array is allocated.
@param offset An offset into the <CODE>components</CODE> array.

@return The <CODE>components</CODE> array.

@throws IllegalArgumentException If this
<CODE>ComponentColorModel</CODE> does not support the unnormalized form
@throws UnsupportedOperationException in some cases iff the
transfer type of this <CODE>ComponentColorModel</CODE>
is not one of the following transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
or <CODE>DataBuffer.TYPE_INT</CODE>.
@throws ClassCastException If <CODE>pixel</CODE> is not a primitive
array of type <CODE>transferType</CODE>.
@throws IllegalArgumentException If the <CODE>components</CODE> array is
not null and is not large enough to hold all the color and alpha
components (starting at offset), or if <CODE>pixel</CODE> is not large
enough to hold a pixel value for this ColorModel.
"
      end

      operation 6642946 "getUnnormalizedComponents"
	public explicit_return_type "int"
	nparams 4
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all of the color/alpha components in unnormalized
form, given a normalized component array.  Unnormalized components
are unsigned integral values between 0 and 2<sup>n</sup> - 1, where
n is the number of bits for a particular component.  Normalized
components are float values between a per component minimum and
maximum specified by the <code>ColorSpace</code> object for this
<code>ColorModel</code>.  An <code>IllegalArgumentException</code>
will be thrown if color component values for this
<code>ColorModel</code> are not conveniently representable in the
unnormalized form.  If the
<code>components</code> array is <code>null</code>, a new array
will be allocated.  The <code>components</code> array will
be returned.  Color/alpha components are stored in the
<code>components</code> array starting at <code>offset</code> (even
if the array is allocated by this method). An
<code>ArrayIndexOutOfBoundsException</code> is thrown if the
<code>components</code> array is not <code>null</code> and is not
large enough to hold all the color and alpha
components (starting at <code>offset</code>).  An
<code>IllegalArgumentException</code> is thrown if the
<code>normComponents</code> array is not large enough to hold
all the color and alpha components starting at
<code>normOffset</code>.
@param normComponents an array containing normalized components
@param normOffset the offset into the <code>normComponents</code>
array at which to start retrieving normalized components
@param components an array that receives the components from
<code>normComponents</code>
@param offset the index into <code>components</code> at which to
begin storing normalized components from
<code>normComponents</code>
@return an array containing unnormalized color and alpha
components.
@throws IllegalArgumentException If this
<CODE>ComponentColorModel</CODE> does not support the unnormalized form
@throws IllegalArgumentException if the length of
         <code>normComponents</code> minus <code>normOffset</code>
         is less than <code>numComponents</code>
"
      end

      operation 6643074 "getNormalizedComponents"
	public explicit_return_type "float"
	nparams 4
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all of the color/alpha components in normalized
form, given an unnormalized component array.  Unnormalized components
are unsigned integral values between 0 and 2<sup>n</sup> - 1, where
n is the number of bits for a particular component.  Normalized
components are float values between a per component minimum and
maximum specified by the <code>ColorSpace</code> object for this
<code>ColorModel</code>.  An <code>IllegalArgumentException</code>
will be thrown if color component values for this
<code>ColorModel</code> are not conveniently representable in the
unnormalized form.  If the
<code>normComponents</code> array is <code>null</code>, a new array
will be allocated.  The <code>normComponents</code> array
will be returned.  Color/alpha components are stored in the
<code>normComponents</code> array starting at
<code>normOffset</code> (even if the array is allocated by this
method).  An <code>ArrayIndexOutOfBoundsException</code> is thrown
if the <code>normComponents</code> array is not <code>null</code>
and is not large enough to hold all the color and alpha components
(starting at <code>normOffset</code>).  An
<code>IllegalArgumentException</code> is thrown if the
<code>components</code> array is not large enough to hold all the
color and alpha components starting at <code>offset</code>.
@param components an array containing unnormalized components
@param offset the offset into the <code>components</code> array at
which to start retrieving unnormalized components
@param normComponents an array that receives the normalized components
@param normOffset the index into <code>normComponents</code> at
which to begin storing normalized components
@return an array containing normalized color and alpha
components.
@throws IllegalArgumentException If this
<CODE>ComponentColorModel</CODE> does not support the unnormalized form
"
      end

      operation 6643202 "getDataElement"
	public explicit_return_type "int"
	nparams 2
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pixel value represented as an int in this <CODE>ColorModel</CODE>,
given an array of unnormalized color/alpha components.

@param components An array of unnormalized color/alpha components.
@param offset An offset into the <CODE>components</CODE> array.

@return A pixel value represented as an int.

@throws IllegalArgumentException If there is more than one component
in this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If this
<CODE>ComponentColorModel</CODE> does not support the unnormalized form
"
      end

      operation 6643330 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "components" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<CODE>ColorModel</CODE>, given an array of unnormalized color/alpha
components. This array can then be passed to the <CODE>setDataElements</CODE>
method of a <CODE>WritableRaster</CODE> object.

@param components An array of unnormalized color/alpha components.
@param offset The integer offset into the <CODE>components</CODE> array.
@param obj The object in which to store the data element array
representation of the pixel. If <CODE>obj</CODE> variable is null,
a new array is allocated.  If <CODE>obj</CODE> is not null, it must
be a primitive array of type <CODE>transferType</CODE>. An
<CODE>ArrayIndexOutOfBoundsException</CODE> is thrown if
<CODE>obj</CODE> is not large enough to hold a pixel value
for this <CODE>ColorModel</CODE>.  Since
<code>ComponentColorModel</code> can be subclassed, subclasses
inherit the implementation of this method and if they don't
override it then they throw an exception if they use an
unsupported <code>transferType</code>.

@return The data element array representation of a pixel
in this <CODE>ColorModel</CODE>.

@throws IllegalArgumentException If the components array
is not large enough to hold all the color and alpha components
(starting at offset).
@throws ClassCastException If <CODE>obj</CODE> is not null and is not a
primitive  array of type <CODE>transferType</CODE>.
@throws ArrayIndexOutOfBoundsException If <CODE>obj</CODE> is not large
enough to hold a pixel value for this <CODE>ColorModel</CODE>.
@throws IllegalArgumentException If this
<CODE>ComponentColorModel</CODE> does not support the unnormalized form
@throws UnsupportedOperationException If the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the following transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
or <CODE>DataBuffer.TYPE_INT</CODE>.

@see WritableRaster#setDataElements
@see SampleModel#setDataElements
"
      end

      operation 6643458 "getDataElement"
	public explicit_return_type "int"
	nparams 2
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pixel value represented as an <code>int</code> in this
<code>ColorModel</code>, given an array of normalized color/alpha
components.  This method will throw an
<code>IllegalArgumentException</code> if pixel values for this
<code>ColorModel</code> are not conveniently representable as a
single <code>int</code>.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if  the
<code>normComponents</code> array is not large enough to hold all the
color and alpha components (starting at <code>normOffset</code>).
@param normComponents an array of normalized color and alpha
components
@param normOffset the index into <code>normComponents</code> at which to
begin retrieving the color and alpha components
@return an <code>int</code> pixel value in this
<code>ColorModel</code> corresponding to the specified components.
@throws IllegalArgumentException if
 pixel values for this <code>ColorModel</code> are not
 conveniently representable as a single <code>int</code>
@throws ArrayIndexOutOfBoundsException if
 the <code>normComponents</code> array is not large enough to
 hold all of the color and alpha components starting at
 <code>normOffset</code>
@since 1.4
"
      end

      operation 6643586 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a data element array representation of a pixel in this
<code>ColorModel</code>, given an array of normalized color/alpha
components.  This array can then be passed to the
<code>setDataElements</code> method of a <code>WritableRaster</code>
object.  An <code>ArrayIndexOutOfBoundsException</code> is thrown
if the <code>normComponents</code> array is not large enough to hold
all the color and alpha components (starting at
<code>normOffset</code>).  If the <code>obj</code> variable is
<code>null</code>, a new array will be allocated.  If
<code>obj</code> is not <code>null</code>, it must be a primitive
array of type transferType; otherwise, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>obj</code> is not large enough to hold a pixel value for this
<code>ColorModel</code>.
@param normComponents an array of normalized color and alpha
components
@param normOffset the index into <code>normComponents</code> at which to
begin retrieving color and alpha components
@param obj a primitive data array to hold the returned pixel
@return an <code>Object</code> which is a primitive data array
representation of a pixel
@throws ClassCastException if <code>obj</code>
 is not a primitive array of type <code>transferType</code>
@throws ArrayIndexOutOfBoundsException if
 <code>obj</code> is not large enough to hold a pixel value
 for this <code>ColorModel</code> or the <code>normComponents</code>
 array is not large enough to hold all of the color and alpha
 components starting at <code>normOffset</code>
@see WritableRaster#setDataElements
@see SampleModel#setDataElements
@since 1.4
"
      end

      operation 6643714 "getNormalizedComponents"
	public explicit_return_type "float"
	nparams 3
	  param inout name "pixel" type class_ref 129538 // Object
	  param inout name "normComponents" explicit_type "float"
	multiplicity "[]"
	  param in name "normOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all of the color/alpha components in normalized
form, given a pixel in this <code>ColorModel</code>.  The pixel
value is specified by an array of data elements of type transferType
passed in as an object reference.  If pixel is not a primitive array
of type transferType, a <code>ClassCastException</code> is thrown.
An <code>ArrayIndexOutOfBoundsException</code> is thrown if
<code>pixel</code> is not large enough to hold a pixel value for this
<code>ColorModel</code>.
Normalized components are float values between a per component minimum
and maximum specified by the <code>ColorSpace</code> object for this
<code>ColorModel</code>.  If the
<code>normComponents</code> array is <code>null</code>, a new array
will be allocated.  The <code>normComponents</code> array
will be returned.  Color/alpha components are stored in the
<code>normComponents</code> array starting at
<code>normOffset</code> (even if the array is allocated by this
method).  An <code>ArrayIndexOutOfBoundsException</code> is thrown
if the <code>normComponents</code> array is not <code>null</code>
and is not large enough to hold all the color and alpha components
(starting at <code>normOffset</code>).
<p>
This method must be overridden by a subclass if that subclass
is designed to translate pixel sample values to color component values
in a non-default way.  The default translations implemented by this
class is described in the class comments.  Any subclass implementing
a non-default translation must follow the constraints on allowable
translations defined there.
@param pixel the specified pixel
@param normComponents an array to receive the normalized components
@param normOffset the offset into the <code>normComponents</code>
array at which to start storing normalized components
@return an array containing normalized color and alpha
components.
@throws ClassCastException if <code>pixel</code> is not a primitive
         array of type transferType
@throws ArrayIndexOutOfBoundsException if
         <code>normComponents</code> is not large enough to hold all
         color and alpha components starting at <code>normOffset</code>
@throws ArrayIndexOutOfBoundsException if
         <code>pixel</code> is not large enough to hold a pixel
         value for this <code>ColorModel</code>.
@since 1.4
"
      end

      operation 6643842 "coerceData"
	public return_type class_ref 312066 // ColorModel
	nparams 2
	  param inout name "raster" type class_ref 322690 // WritableRaster
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces the raster data to match the state specified in the
<CODE>isAlphaPremultiplied</CODE> variable, assuming the data
is currently correctly described by this <CODE>ColorModel</CODE>.
It may multiply or divide the color raster data by alpha, or
do nothing if the data is in the correct state.  If the data needs
to be coerced, this method also returns an instance of
this <CODE>ColorModel</CODE> with
the <CODE>isAlphaPremultiplied</CODE> flag set appropriately.
Since <code>ColorModel</code> can be subclassed, subclasses inherit
the implementation of this method and if they don't override it
then they throw an exception if they use an unsupported
<code>transferType</code>.

@throws NullPointerException if <code>raster</code> is
<code>null</code> and data coercion is required.
@throws UnsupportedOperationException if the transfer type of
this <CODE>ComponentColorModel</CODE>
is not one of the supported transfer types:
<CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,
<CODE>DataBuffer.TYPE_INT</CODE>, <CODE>DataBuffer.TYPE_SHORT</CODE>,
<CODE>DataBuffer.TYPE_FLOAT</CODE>, or <CODE>DataBuffer.TYPE_DOUBLE</CODE>.
"
      end

      operation 6643970 "isCompatibleRaster"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "raster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if <CODE>raster</CODE> is compatible with this
<CODE>ColorModel</CODE>; false if it is not.

@param raster The <CODE>Raster</CODE> object to test for compatibility.

@return <CODE>true</CODE> if <CODE>raster</CODE> is compatible with this
<CODE>ColorModel</CODE>, <CODE>false</CODE> if it is not.
"
      end

      operation 6644098 "createCompatibleWritableRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>WritableRaster</CODE> with the specified width and height,
that  has a data layout (<CODE>SampleModel</CODE>) compatible with
this <CODE>ColorModel</CODE>.

@param w The width of the <CODE>WritableRaster</CODE> you want to create.
@param h The height of the <CODE>WritableRaster</CODE> you want to create.

@return A <CODE>WritableRaster</CODE> that is compatible with
this <CODE>ColorModel</CODE>.
@see WritableRaster
@see SampleModel
"
      end

      operation 6644226 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>SampleModel</CODE> with the specified width and height,
that  has a data layout compatible with this <CODE>ColorModel</CODE>.

@param w The width of the <CODE>SampleModel</CODE> you want to create.
@param h The height of the <CODE>SampleModel</CODE> you want to create.

@return A <CODE>SampleModel</CODE> that is compatible with this
<CODE>ColorModel</CODE>.

@see SampleModel
"
      end

      operation 6644354 "isCompatibleSampleModel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sm" type class_ref 314370 // SampleModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether or not the specified <CODE>SampleModel</CODE>
is compatible with this <CODE>ColorModel</CODE>.

@param sm The <CODE>SampleModel</CODE> to test for compatibility.

@return <CODE>true</CODE> if the <CODE>SampleModel</CODE> is
compatible with this <CODE>ColorModel</CODE>, <CODE>false</CODE>
if it is not.

@see SampleModel
"
      end

      operation 6644482 "getAlphaRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "raster" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <CODE>Raster</CODE> representing the alpha channel of an image,
extracted from the input <CODE>Raster</CODE>.
This method assumes that <CODE>Raster</CODE> objects associated with
this <CODE>ColorModel</CODE> store the alpha band, if present, as
the last band of image data. Returns null if there is no separate spatial
alpha channel associated with this <CODE>ColorModel</CODE>.
This method creates a new <CODE>Raster</CODE>, but will share the data
array.

@param raster The <CODE>WritableRaster</CODE> from which to extract the
alpha  channel.

@return A <CODE>WritableRaster</CODE> containing the image's alpha channel.

"
      end

      operation 6644610 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this color model with another for equality.

@param obj The object to compare with this color model.
@return <CODE>true</CODE> if the color model objects are equal,
<CODE>false</CODE> if they are not.
"
      end
    end

    class 897922 "ConvolveOp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements a convolution from the source
to the destination.
Convolution using a convolution kernel is a spatial operation that
computes the output pixel from an input pixel by multiplying the kernel
with the surround of the input pixel.
This allows the output pixel to be affected by the immediate neighborhood
in a way that can be mathematically specified with a kernel.
<p>
This class operates with BufferedImage data in which color components are
premultiplied with the alpha component.  If the Source BufferedImage has
an alpha component, and the color components are not premultiplied with
the alpha component, then the data are premultiplied before being
convolved.  If the Destination has color components which are not
premultiplied, then alpha is divided out before storing into the
Destination (if alpha is 0, the color components are set to 0).  If the
Destination has no alpha component, then the resulting alpha is discarded
after first dividing it out of the color components.
<p>
Rasters are treated as having no alpha channel.  If the above treatment
of the alpha channel in BufferedImages is not desired, it may be avoided
by getting the Raster of a source BufferedImage and using the filter method
of this class which works with Rasters.
<p>
If a RenderingHints object is specified in the constructor, the
color rendering hint and the dithering hint may be used when color
conversion is required.
<p>
Note that the Source and the Destination may not be the same object.
@see Kernel
@see java.awt.RenderingHints#KEY_COLOR_RENDERING
@see java.awt.RenderingHints#KEY_DITHERING
"
      classrelation 3071234 // <realization>
	relation 3071234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3071234 // <realization>
	  b parent class_ref 867202 // BufferedImageOp
      end

      classrelation 3071362 // <realization>
	relation 3071362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3071362 // <realization>
	  b parent class_ref 896258 // RasterOp
      end

      classrelation 3071490 // kernel (<unidirectional association>)
	relation 3071490 --->
	  a role_name "kernel" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3071490 // kernel (<unidirectional association>)
	  b parent class_ref 898050 // Kernel
      end

      attribute 1608706 "edgeHint"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3071618 // hints (<unidirectional association>)
	relation 3071618 --->
	  a role_name "hints" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3071618 // hints (<unidirectional association>)
	  b parent class_ref 856578 // RenderingHints
      end

      attribute 1608834 "EDGE_ZERO_FILL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Edge condition constants.


Pixels at the edge of the destination image are set to zero.  This
is the default.

"
      end

      attribute 1608962 "EDGE_NO_OP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Pixels at the edge of the source image are copied to
the corresponding pixels in the destination without modification.

"
      end

      operation 6644738 "ConvolveOp"
	public explicit_return_type ""
	nparams 3
	  param inout name "kernel" type class_ref 898050 // Kernel
	  param in name "edgeCondition" explicit_type "int"
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ConvolveOp given a Kernel, an edge condition, and a
RenderingHints object (which may be null).
@param kernel the specified <code>Kernel</code>
@param edgeCondition the specified edge condition
@param hints the specified <code>RenderingHints</code> object
@see Kernel
@see #EDGE_NO_OP
@see #EDGE_ZERO_FILL
@see java.awt.RenderingHints
"
      end

      operation 6644866 "ConvolveOp"
	public explicit_return_type ""
	nparams 1
	  param inout name "kernel" type class_ref 898050 // Kernel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ConvolveOp given a Kernel.  The edge condition
will be EDGE_ZERO_FILL.
@param kernel the specified <code>Kernel</code>
@see Kernel
@see #EDGE_ZERO_FILL
"
      end

      operation 6644994 "getEdgeCondition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the edge condition.
@return the edge condition of this <code>ConvolveOp</code>.
@see #EDGE_NO_OP
@see #EDGE_ZERO_FILL
"
      end

      operation 6645122 "getKernel"
	public return_type class_ref 898050 // Kernel
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Kernel.
@return the <code>Kernel</code> of this <code>ConvolveOp</code>.
"
      end

      operation 6645250 "filter"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "dst" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a convolution on BufferedImages.  Each component of the
source image will be convolved (including the alpha component, if
present).
If the color model in the source image is not the same as that
in the destination image, the pixels will be converted
in the destination.  If the destination image is null,
a BufferedImage will be created with the source ColorModel.
The IllegalArgumentException may be thrown if the source is the
same as the destination.
@param src the source <code>BufferedImage</code> to filter
@param dst the destination <code>BufferedImage</code> for the
       filtered <code>src</code>
@return the filtered <code>BufferedImage</code>
@throws NullPointerException if <code>src</code> is <code>null</code>
@throws IllegalArgumentException if <code>src</code> equals
        <code>dst</code>
@throws ImagingOpException if <code>src</code> cannot be filtered
"
      end

      operation 6645378 "filter"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a convolution on Rasters.  Each band of the source Raster
will be convolved.
The source and destination must have the same number of bands.
If the destination Raster is null, a new Raster will be created.
The IllegalArgumentException may be thrown if the source is
the same as the destination.
@param src the source <code>Raster</code> to filter
@param dst the destination <code>WritableRaster</code> for the
       filtered <code>src</code>
@return the filtered <code>WritableRaster</code>
@throws NullPointerException if <code>src</code> is <code>null</code>
@throws ImagingOpException if <code>src</code> and <code>dst</code>
        do not have the same number of bands
@throws ImagingOpException if <code>src</code> cannot be filtered
@throws IllegalArgumentException if <code>src</code> equals
        <code>dst</code>
"
      end

      operation 6645506 "createCompatibleDestImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "destCM" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination image with the correct size and number
of bands.  If destCM is null, an appropriate ColorModel will be used.
@param src       Source image for the filter operation.
@param destCM    ColorModel of the destination.  Can be null.
@return a destination <code>BufferedImage</code> with the correct
        size and number of bands.
"
      end

      operation 6645634 "createCompatibleDestRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination Raster with the correct size and number
of bands, given this source.
"
      end

      operation 6645762 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the filtered destination image.  Since
this is not a geometric operation, the bounding box does not
change.
"
      end

      operation 6645890 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the filtered destination Raster.  Since
this is not a geometric operation, the bounding box does not
change.
"
      end

      operation 6646018 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the destination point given a
point in the source.  If dstPt is non-null, it will
be used to hold the return value.  Since this is not a geometric
operation, the srcPt will equal the dstPt.
"
      end

      operation 6646146 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints for this op.
"
      end
    end

    class 898050 "Kernel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Kernel</code> class defines a matrix that describes how a
specified pixel and its surrounding pixels affect the value
computed for the pixel's position in the output image of a filtering
operation.  The X origin and Y origin indicate the kernel matrix element
that corresponds to the pixel position for which an output value is
being computed.

@see ConvolveOp
"
      classrelation 3073794 // <realization>
	relation 3073794 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3073794 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1616770 "width"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1616898 "height"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1617026 "xOrigin"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1617154 "yOrigin"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1617282 "data"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6675202 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 154370 "initialization"
	
	cpp "" ""
	java "  static {
        ColorModel.loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6675330 "Kernel"
	public explicit_return_type ""
	nparams 3
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param inout name "data" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Kernel</code> object from an array of floats.
The first <code>width</code>*<code>height</code> elements of
the <code>data</code> array are copied.
If the length of the <code>data</code> array is less
than width*height, an <code>IllegalArgumentException</code> is thrown.
The X origin is (width-1)/2 and the Y origin is (height-1)/2.
@param width         width of the kernel
@param height        height of the kernel
@param data          kernel data in row major order
@throws IllegalArgumentException if the length of <code>data</code>
        is less than the product of <code>width</code> and
        <code>height</code>
"
      end

      operation 6675458 "getXOrigin"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X origin of this <code>Kernel</code>.
@return the X origin.
"
      end

      operation 6675586 "getYOrigin"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y origin of this <code>Kernel</code>.
@return the Y origin.
"
      end

      operation 6675714 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of this <code>Kernel</code>.
@return the width of this <code>Kernel</code>.
"
      end

      operation 6675842 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of this <code>Kernel</code>.
@return the height of this <code>Kernel</code>.
"
      end

      operation 6675970 "getKernelData"
	public explicit_return_type "float"
	nparams 1
	  param inout name "data" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the kernel data in row major order.
The <code>data</code> array is returned.  If <code>data</code>
is <code>null</code>, a new array is allocated.
@param data  if non-null, contains the returned kernel data
@return the <code>data</code> array containing the kernel data
        in row major order or, if <code>data</code> is
        <code>null</code>, a newly allocated array containing
        the kernel data in row major order
@throws IllegalArgumentException if <code>data</code> is less
        than the size of this <code>Kernel</code>
"
      end

      operation 6676098 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones this object.
@return a clone of this object.
"
      end
    end

    class 898178 "CropImageFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An ImageFilter class for cropping images.
This class extends the basic ImageFilter Class to extract a given
rectangular region of an existing Image and provide a source for a
new image containing just the extracted region.  It is meant to
be used in conjunction with a FilteredImageSource object to produce
cropped versions of existing images.

@see FilteredImageSource
@see ImageFilter

@author      Jim Graham
"
      classrelation 3071746 // <generalisation>
	relation 3071746 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3071746 // <generalisation>
	  b parent class_ref 379906 // ImageFilter
      end

      attribute 1609090 "cropX"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1609218 "cropY"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1609346 "cropW"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1609474 "cropH"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6646274 "CropImageFilter"
	public explicit_return_type ""
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CropImageFilter that extracts the absolute rectangular
region of pixels from its source Image as specified by the x, y,
w, and h parameters.
@param x the x location of the top of the rectangle to be extracted
@param y the y location of the top of the rectangle to be extracted
@param w the width of the rectangle to be extracted
@param h the height of the rectangle to be extracted
"
      end

      operation 6646402 "setProperties"
	public explicit_return_type "void"
	nparams 1
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Passes along  the properties from the source object after adding a
property indicating the cropped region.
This method invokes <code>super.setProperties</code>,
which might result in additional properties being added.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose pixels
are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
"
      end

      operation 6646530 "setDimensions"
	public explicit_return_type "void"
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override the source image's dimensions and pass the dimensions
of the rectangular cropped region to the ImageConsumer.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose
pixels are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
@see ImageConsumer
"
      end

      operation 6646658 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether the delivered byte pixels intersect the region to
be extracted and passes through only that subset of pixels that
appear in the output region.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose
pixels are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
"
      end

      operation 6646786 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the delivered int pixels intersect the region to
be extracted and pass through only that subset of pixels that
appear in the output region.
<p>
Note: This method is intended to be called by the
<code>ImageProducer</code> of the <code>Image</code> whose
pixels are being filtered. Developers using
this class to filter pixels from an image should avoid calling
this method directly since that operation could interfere
with the filtering operation.
"
      end

      operation 6646914 "addWithoutOverflow"
	private explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "w" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "check for potential overflow (see bug 4801285)"
      end
    end

    class 898306 "DataBufferDouble"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends <code>DataBuffer</code> and stores data internally
in <code>double</code> form.
<p>
<a name=\"optimizations\">
Note that some implementations may function more efficiently
if they can maintain control over how the data for an image is
stored.
For example, optimizations such as caching an image in video
memory require that the implementation track all modifications
to that data.
Other implementations may operate better if they can store the
data in locations other than a Java array.
To maintain optimum compatibility with various optimizations
it is best to avoid constructors and methods which expose the
underlying storage as a Java array as noted below in the
documentation for those methods.
</a>

@since 1.4
"
      classrelation 3072002 // <generalisation>
	relation 3072002 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3072002 // <generalisation>
	  b parent class_ref 897026 // DataBuffer
      end

      attribute 1611650 "bankdata"
	package explicit_type "double"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The array of data banks. 
"
      end

      attribute 1611778 "data"
	package explicit_type "double"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A reference to the default data bank. 
"
      end

      operation 6652162 "DataBufferDouble"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>double</code>-based <code>DataBuffer</code>
with a specified size.

@param size The number of elements in the <code>DataBuffer</code>.
"
      end

      operation 6652290 "DataBufferDouble"
	public explicit_return_type ""
	nparams 2
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>double</code>-based <code>DataBuffer</code>
with a specified number of banks, all of which are of a
specified size.

@param size The number of elements in each bank of the
       <code>DataBuffer</code>.
@param numBanks The number of banks in the <code>DataBuffer</code>.
"
      end

      operation 6652418 "DataBufferDouble"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "double"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>double</code>-based <code>DataBuffer</code>
with the specified data array.  Only the first
<code>size</code> elements are available for use by this
<code>DataBuffer</code>.  The array must be large enough to
hold <code>size</code> elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of <code>double</code>s to be used as the
                 first and only bank of this <code>DataBuffer</code>.
@param size The number of elements of the array to be used.
"
      end

      operation 6652546 "DataBufferDouble"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "double"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>double</code>-based <code>DataBuffer</code>
with the specified data array.  Only the elements between
<code>offset</code> and <code>offset + size - 1</code> are
available for use by this <code>DataBuffer</code>.  The array
must be large enough to hold <code>offset + size</code> elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of <code>double</code>s to be used as the
                 first and only bank of this <code>DataBuffer</code>.
@param size The number of elements of the array to be used.
@param offset The offset of the first element of the array
              that will be used.
"
      end

      operation 6652674 "DataBufferDouble"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "double"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>double</code>-based <code>DataBuffer</code>
with the specified data arrays.  Only the first
<code>size</code> elements of each array are available for use
by this <code>DataBuffer</code>.  The number of banks will be
equal <code>to dataArray.length</code>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of arrays of <code>double</code>s to be
       used as the banks of this <code>DataBuffer</code>.
@param size The number of elements of each array to be used.
"
      end

      operation 6652802 "DataBufferDouble"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "double"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>double</code>-based <code>DataBuffer</code>
with the specified data arrays, size, and per-bank offsets.
The number of banks is equal to dataArray.length.  Each array
must be at least as large as <code>size</code> plus the
corresponding offset.  There must be an entry in the
<code>offsets</code> array for each data array.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of arrays of <code>double</code>s to be
       used as the banks of this <code>DataBuffer</code>.
@param size The number of elements of each array to be used.
@param offsets An array of integer offsets, one for each bank.
"
      end

      operation 6652930 "getData"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default (first) <code>double</code> data array.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return the first double data array.
"
      end

      operation 6653058 "getData"
	public explicit_return_type "double"
	nparams 1
	  param in name "bank" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for the specified bank.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param bank the data array
@return the data array specified by <code>bank</code>.
"
      end

      operation 6653186 "getBankData"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for all banks.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return all data arrays from this data buffer.
"
      end

      operation 6653314 "getElem"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first
(default) bank as an <code>int</code>.

@param i The desired data array element.
@return The data entry as an <code>int</code>.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6653442 "getElem"
	public explicit_return_type "int"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified
bank as an <code>int</code>.

@param bank The bank number.
@param i The desired data array element.

@return The data entry as an <code>int</code>.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6653570 "setElem"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default)
bank to the given <code>int</code>.

@param i The desired data array element.
@param val The value to be set.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6653698 "setElem"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
to the given <code>int</code>.

@param bank The bank number.
@param i The desired data array element.
@param val The value to be set.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6653826 "getElemFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first
(default) bank as a <code>float</code>.

@param i The desired data array element.

@return The data entry as a <code>float</code>.
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)
"
      end

      operation 6653954 "getElemFloat"
	public explicit_return_type "float"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified
bank as a <code>float</code>.

@param bank The bank number.
@param i The desired data array element.

@return The data entry as a <code>float</code>.
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)
"
      end

      operation 6654082 "setElemFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default)
bank to the given <code>float</code>.

@param i The desired data array element.
@param val The value to be set.
@see #getElemFloat(int)
@see #getElemFloat(int, int)
"
      end

      operation 6654210 "setElemFloat"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank to
the given <code>float</code>.

@param bank The bank number.
@param i The desired data array element.
@param val The value to be set.
@see #getElemFloat(int)
@see #getElemFloat(int, int)
"
      end

      operation 6654338 "getElemDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first
(default) bank as a <code>double</code>.

@param i The desired data array element.

@return The data entry as a <code>double</code>.
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)
"
      end

      operation 6654466 "getElemDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified
bank as a <code>double</code>.

@param bank The bank number.
@param i The desired data array element.

@return The data entry as a <code>double</code>.
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)
"
      end

      operation 6654594 "setElemDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default)
bank to the given <code>double</code>.

@param i The desired data array element.
@param val The value to be set.
@see #getElemDouble(int)
@see #getElemDouble(int, int)
"
      end

      operation 6654722 "setElemDouble"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank to
the given <code>double</code>.

@param bank The bank number.
@param i The desired data array element.
@param val The value to be set.
@see #getElemDouble(int)
@see #getElemDouble(int, int)
"
      end
    end

    class 898434 "DataBufferFloat"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends <code>DataBuffer</code> and stores data internally
in <code>float</code> form.
<p>
<a name=\"optimizations\">
Note that some implementations may function more efficiently
if they can maintain control over how the data for an image is
stored.
For example, optimizations such as caching an image in video
memory require that the implementation track all modifications
to that data.
Other implementations may operate better if they can store the
data in locations other than a Java array.
To maintain optimum compatibility with various optimizations
it is best to avoid constructors and methods which expose the
underlying storage as a Java array as noted below in the
documentation for those methods.
</a>

@since 1.4
"
      classrelation 3072130 // <generalisation>
	relation 3072130 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3072130 // <generalisation>
	  b parent class_ref 897026 // DataBuffer
      end

      attribute 1611906 "bankdata"
	package explicit_type "float"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The array of data banks. 
"
      end

      attribute 1612034 "data"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A reference to the default data bank. 
"
      end

      operation 6654850 "DataBufferFloat"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>float</code>-based <code>DataBuffer</code>
with a specified size.

@param size The number of elements in the DataBuffer.
"
      end

      operation 6654978 "DataBufferFloat"
	public explicit_return_type ""
	nparams 2
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>float</code>-based <code>DataBuffer</code>
with a specified number of banks, all of which are of a
specified size.

@param size The number of elements in each bank of the
<code>DataBuffer</code>.
@param numBanks The number of banks in the
       <code>DataBuffer</code>.
"
      end

      operation 6655106 "DataBufferFloat"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "float"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>float</code>-based <code>DataBuffer</code>
with the specified data array.  Only the first
<code>size</code> elements are available for use by this
<code>DataBuffer</code>.  The array must be large enough to
hold <code>size</code> elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of <code>float</code>s to be used as the
                 first and only bank of this <code>DataBuffer</code>.
@param size The number of elements of the array to be used.
"
      end

      operation 6655234 "DataBufferFloat"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "float"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>float</code>-based <code>DataBuffer</code>
with the specified data array.  Only the elements between
<code>offset</code> and <code>offset + size - 1</code> are
available for use by this <code>DataBuffer</code>.  The array
must be large enough to hold <code>offset + size</code>
elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of <code>float</code>s to be used as the
                 first and only bank of this <code>DataBuffer</code>.
@param size The number of elements of the array to be used.
@param offset The offset of the first element of the array
              that will be used.
"
      end

      operation 6655362 "DataBufferFloat"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "float"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>float</code>-based <code>DataBuffer</code>
with the specified data arrays.  Only the first
<code>size</code> elements of each array are available for use
by this <code>DataBuffer</code>.  The number of banks will be
equal to <code>dataArray.length</code>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of arrays of <code>float</code>s to be
                 used as the banks of this <code>DataBuffer</code>.
@param size The number of elements of each array to be used.
"
      end

      operation 6655490 "DataBufferFloat"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "float"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>float</code>-based <code>DataBuffer</code>
with the specified data arrays, size, and per-bank offsets.
The number of banks is equal to <code>dataArray.length</code>.
Each array must be at least as large as <code>size</code> plus the
corresponding offset.  There must be an entry in the offsets
array for each data array.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray An array of arrays of <code>float</code>s to be
                 used as the banks of this <code>DataBuffer</code>.
@param size The number of elements of each array to be used.
@param offsets An array of integer offsets, one for each bank.
"
      end

      operation 6655618 "getData"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default (first) <code>float</code> data array.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return the first float data array.
"
      end

      operation 6655746 "getData"
	public explicit_return_type "float"
	nparams 1
	  param in name "bank" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for the specified bank.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param bank the data array
@return the data array specified by <code>bank</code>.
"
      end

      operation 6655874 "getBankData"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for all banks.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return all data arrays for this data buffer.
"
      end

      operation 6656002 "getElem"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first
(default) bank as an <code>int</code>.

@param i The desired data array element.

@return The data entry as an <code>int</code>.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6656130 "getElem"
	public explicit_return_type "int"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified
bank as an <code>int</code>.

@param bank The bank number.
@param i The desired data array element.

@return The data entry as an <code>int</code>.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6656258 "setElem"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default)
bank to the given <code>int</code>.

@param i The desired data array element.
@param val The value to be set.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6656386 "setElem"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank to
the given <code>int</code>.

@param bank The bank number.
@param i The desired data array element.
@param val The value to be set.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6656514 "getElemFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first
(default) bank as a <code>float</code>.

@param i The desired data array element.

@return The data entry as a <code>float</code>.
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)
"
      end

      operation 6656642 "getElemFloat"
	public explicit_return_type "float"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified
bank as a <code>float</code>.

@param bank The bank number.
@param i The desired data array element.

@return The data entry as a <code>float</code>.
@see #setElemFloat(int, float)
@see #setElemFloat(int, int, float)
"
      end

      operation 6656770 "setElemFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default)
bank to the given <code>float</code>.

@param i The desired data array element.
@param val The value to be set.
@see #getElemFloat(int)
@see #getElemFloat(int, int)
"
      end

      operation 6656898 "setElemFloat"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank to
the given <code>float</code>.

@param bank The bank number.
@param i The desired data array element.
@param val The value to be set.
@see #getElemFloat(int)
@see #getElemFloat(int, int)
"
      end

      operation 6657026 "getElemDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first
(default) bank as a <code>double</code>.

@param i The desired data array element.

@return The data entry as a <code>double</code>.
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)
"
      end

      operation 6657154 "getElemDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified
bank as a <code>double</code>.

@param bank The bank number.
@param i The desired data array element.

@return The data entry as a <code>double</code>.
@see #setElemDouble(int, double)
@see #setElemDouble(int, int, double)
"
      end

      operation 6657282 "setElemDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default)
bank to the given <code>double</code>.

@param i The desired data array element.
@param val The value to be set.
@see #getElemDouble(int)
@see #getElemDouble(int, int)
"
      end

      operation 6657410 "setElemDouble"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank to
the given <code>double</code>.

@param bank The bank number.
@param i The desired data array element.
@param val The value to be set.
@see #getElemDouble(int)
@see #getElemDouble(int, int)
"
      end
    end

    class 898562 "DataBufferInt"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends <CODE>DataBuffer</CODE> and stores data internally
as integers.
<p>
<a name=\"optimizations\">
Note that some implementations may function more efficiently
if they can maintain control over how the data for an image is
stored.
For example, optimizations such as caching an image in video
memory require that the implementation track all modifications
to that data.
Other implementations may operate better if they can store the
data in locations other than a Java array.
To maintain optimum compatibility with various optimizations
it is best to avoid constructors and methods which expose the
underlying storage as a Java array as noted below in the
documentation for those methods.
</a>
"
      classrelation 3072258 // <generalisation>
	relation 3072258 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3072258 // <generalisation>
	  b parent class_ref 897026 // DataBuffer
      end

      attribute 1612162 "data"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The default data bank. 
"
      end

      attribute 1612290 "bankdata"
	package explicit_type "int"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All data banks 
"
      end

      operation 6657538 "DataBufferInt"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an integer-based <CODE>DataBuffer</CODE> with a single bank
and the specified size.

@param size The size of the <CODE>DataBuffer</CODE>.
"
      end

      operation 6657666 "DataBufferInt"
	public explicit_return_type ""
	nparams 2
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an integer-based <CODE>DataBuffer</CODE> with the specified number of
banks, all of which are the specified size.

@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param numBanks The number of banks in the a<CODE>DataBuffer</CODE>.
"
      end

      operation 6657794 "DataBufferInt"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "int"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an integer-based <CODE>DataBuffer</CODE> with a single bank using the
specified array.
Only the first <CODE>size</CODE> elements should be used by accessors of
this <CODE>DataBuffer</CODE>.  <CODE>dataArray</CODE> must be large enough to
hold <CODE>size</CODE> elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The integer array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
"
      end

      operation 6657922 "DataBufferInt"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "int"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an integer-based <CODE>DataBuffer</CODE> with a single bank using the
specified array, size, and offset.  <CODE>dataArray</CODE> must have at least
<CODE>offset</CODE> + <CODE>size</CODE> elements.  Only elements <CODE>offset</CODE>
through <CODE>offset</CODE> + <CODE>size</CODE> - 1
should be used by accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The integer array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
@param offset The offset into the <CODE>dataArray</CODE>.
"
      end

      operation 6658050 "DataBufferInt"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "int"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an integer-based <CODE>DataBuffer</CODE> with the specified arrays.
The number of banks will be equal to <CODE>dataArray.length</CODE>.
Only the first <CODE>size</CODE> elements of each array should be used by
accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The integer arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
"
      end

      operation 6658178 "DataBufferInt"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "int"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an integer-based <CODE>DataBuffer</CODE> with the specified arrays, size,
and offsets.
The number of banks is equal to <CODE>dataArray.length</CODE>.  Each array must
be at least as large as <CODE>size</CODE> + the corresponding offset.   There must
be an entry in the offset array for each <CODE>dataArray</CODE> entry.  For each
bank, only elements <CODE>offset</CODE> through
<CODE>offset</CODE> + <CODE>size</CODE> - 1 should be
used by accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The integer arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param offsets The offsets into each array.
"
      end

      operation 6658306 "getData"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default (first) int data array in <CODE>DataBuffer</CODE>.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return The first integer data array.
"
      end

      operation 6658434 "getData"
	public explicit_return_type "int"
	nparams 1
	  param in name "bank" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for the specified bank.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param bank The bank whose data array you want to get.
@return The data array for the specified bank.
"
      end

      operation 6658562 "getBankData"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data arrays for all banks.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return All of the data arrays.
"
      end

      operation 6658690 "getElem"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first (default) bank.

@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6658818 "getElem"
	public explicit_return_type "int"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified bank.

@param bank The bank from which you want to get a data array element.
@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6658946 "setElem"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default) bank
to the specified value.

@param i The data array element you want to set.
@param val The integer value to which you want to set the data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6659074 "setElem"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
to the integer value <CODE>i</CODE>.
@param bank The bank in which you want to set the data array element.
@param i The data array element you want to set.
@param val The integer value to which you want to set the specified data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end
    end

    class 898690 "DataBufferShort"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends <CODE>DataBuffer</CODE> and stores data internally as shorts.
<p>
<a name=\"optimizations\">
Note that some implementations may function more efficiently
if they can maintain control over how the data for an image is
stored.
For example, optimizations such as caching an image in video
memory require that the implementation track all modifications
to that data.
Other implementations may operate better if they can store the
data in locations other than a Java array.
To maintain optimum compatibility with various optimizations
it is best to avoid constructors and methods which expose the
underlying storage as a Java array as noted below in the
documentation for those methods.
</a>
"
      classrelation 3072386 // <generalisation>
	relation 3072386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3072386 // <generalisation>
	  b parent class_ref 897026 // DataBuffer
      end

      attribute 1612418 "data"
	package explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The default data bank. 
"
      end

      attribute 1612546 "bankdata"
	package explicit_type "short"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All data banks 
"
      end

      operation 6659202 "DataBufferShort"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a short-based <CODE>DataBuffer</CODE> with a single bank and the
specified size.

@param size The size of the <CODE>DataBuffer</CODE>.
"
      end

      operation 6659330 "DataBufferShort"
	public explicit_return_type ""
	nparams 2
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a short-based <CODE>DataBuffer</CODE> with the specified number of
banks all of which are the specified size.

@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param numBanks The number of banks in the a<CODE>DataBuffer</CODE>.
"
      end

      operation 6659458 "DataBufferShort"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a short-based <CODE>DataBuffer</CODE> with a single bank using the
specified array.
Only the first <CODE>size</CODE> elements should be used by accessors of
this <CODE>DataBuffer</CODE>.  <CODE>dataArray</CODE> must be large enough to
hold <CODE>size</CODE> elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The short array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
"
      end

      operation 6659586 "DataBufferShort"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a short-based <CODE>DataBuffer</CODE> with a single bank using the
specified array, size, and offset.  <CODE>dataArray</CODE> must have at least
<CODE>offset</CODE> + <CODE>size</CODE> elements.  Only elements <CODE>offset</CODE>
through <CODE>offset</CODE> + <CODE>size</CODE> - 1
should be used by accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The short array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
@param offset The offset into the <CODE>dataArray</CODE>.
"
      end

      operation 6659714 "DataBufferShort"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a short-based <CODE>DataBuffer</CODE> with the specified arrays.
The number of banks will be equal to <CODE>dataArray.length</CODE>.
Only the first <CODE>size</CODE> elements of each array should be used by
accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The short arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
"
      end

      operation 6659842 "DataBufferShort"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a short-based <CODE>DataBuffer</CODE> with the specified arrays, size,
and offsets.
The number of banks is equal to <CODE>dataArray.length</CODE>.  Each array must
be at least as large as <CODE>size</CODE> + the corresponding offset.   There must
be an entry in the offset array for each <CODE>dataArray</CODE> entry.  For each
bank, only elements <CODE>offset</CODE> through
<CODE>offset</CODE> + <CODE>size</CODE> - 1 should be
used by accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The short arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param offsets The offsets into each array.
"
      end

      operation 6659970 "getData"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default (first) byte data array.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return The first short data array.
"
      end

      operation 6660098 "getData"
	public explicit_return_type "short"
	nparams 1
	  param in name "bank" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for the specified bank.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param bank The bank whose data array you want to get.
@return The data array for the specified bank.
"
      end

      operation 6660226 "getBankData"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data arrays for all banks.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return All of the data arrays.
"
      end

      operation 6660354 "getElem"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first (default) bank.

@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6660482 "getElem"
	public explicit_return_type "int"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified bank.

@param bank The bank from which you want to get a data array element.
@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6660610 "setElem"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default) bank
to the specified value.

@param i The data array element you want to set.
@param val The integer value to which you want to set the data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6660738 "setElem"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
from the given integer.
@param bank The bank in which you want to set the data array element.
@param i The data array element you want to set.
@param val The integer value to which you want to set the specified data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end
    end

    class 898818 "DataBufferUShort"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends <CODE>DataBuffer</CODE> and stores data internally as
shorts.  Values stored in the short array(s) of this <CODE>DataBuffer</CODE>
are treated as unsigned values.
<p>
<a name=\"optimizations\">
Note that some implementations may function more efficiently
if they can maintain control over how the data for an image is
stored.
For example, optimizations such as caching an image in video
memory require that the implementation track all modifications
to that data.
Other implementations may operate better if they can store the
data in locations other than a Java array.
To maintain optimum compatibility with various optimizations
it is best to avoid constructors and methods which expose the
underlying storage as a Java array as noted below in the
documentation for those methods.
</a>
"
      classrelation 3072514 // <generalisation>
	relation 3072514 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3072514 // <generalisation>
	  b parent class_ref 897026 // DataBuffer
      end

      attribute 1612674 "data"
	package explicit_type "short"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The default data bank. 
"
      end

      attribute 1612802 "bankdata"
	package explicit_type "short"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " All data banks 
"
      end

      operation 6660866 "DataBufferUShort"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an unsigned-short based <CODE>DataBuffer</CODE> with a single bank and the
specified size.

@param size The size of the <CODE>DataBuffer</CODE>.
"
      end

      operation 6660994 "DataBufferUShort"
	public explicit_return_type ""
	nparams 2
	  param in name "size" explicit_type "int"
	  param in name "numBanks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an unsigned-short based <CODE>DataBuffer</CODE> with the specified number of
banks, all of which are the specified size.

@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param numBanks The number of banks in the a<CODE>DataBuffer</CODE>.
"
      end

      operation 6661122 "DataBufferUShort"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an unsigned-short based <CODE>DataBuffer</CODE> with a single bank
using the specified array.
Only the first <CODE>size</CODE> elements should be used by accessors of
this <CODE>DataBuffer</CODE>.  <CODE>dataArray</CODE> must be large enough to
hold <CODE>size</CODE> elements.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The unsigned-short array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
"
      end

      operation 6661250 "DataBufferUShort"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[]"
	  param in name "size" explicit_type "int"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an unsigned-short based <CODE>DataBuffer</CODE> with a single bank
using the specified array, size, and offset.  <CODE>dataArray</CODE> must have at
least <CODE>offset</CODE> + <CODE>size</CODE> elements.  Only elements
<CODE>offset</CODE> through <CODE>offset</CODE> + <CODE>size</CODE> - 1 should
be used by accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The unsigned-short array for the <CODE>DataBuffer</CODE>.
@param size The size of the <CODE>DataBuffer</CODE> bank.
@param offset The offset into the <CODE>dataArray</CODE>.
"
      end

      operation 6661378 "DataBufferUShort"
	public explicit_return_type ""
	nparams 2
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an unsigned-short based <CODE>DataBuffer</CODE> with the specified arrays.
The number of banks will be equal to <CODE>dataArray.length</CODE>.
Only the first <CODE>size</CODE> elements of each array should be used by
accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The unsigned-short arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
"
      end

      operation 6661506 "DataBufferUShort"
	public explicit_return_type ""
	nparams 3
	  param inout name "dataArray" explicit_type "short"
	multiplicity "[][]"
	  param in name "size" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[][] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an unsigned-short based <CODE>DataBuffer</CODE> with specified arrays,
size, and offsets.
The number of banks is equal to <CODE>dataArray.length</CODE>.  Each array must
be at least as large as <CODE>size</CODE> + the corresponding offset.   There must
be an entry in the offset array for each <CODE>dataArray</CODE> entry.  For each
bank, only elements <CODE>offset</CODE> through
<CODE>offset</CODE> + <CODE>size</CODE> - 1 should be
used by accessors of this <CODE>DataBuffer</CODE>.
<p>
Note that {@code DataBuffer} objects created by this constructor
may be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param dataArray The unsigned-short arrays for the <CODE>DataBuffer</CODE>.
@param size The size of the banks in the <CODE>DataBuffer</CODE>.
@param offsets The offsets into each array.
"
      end

      operation 6661634 "getData"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default (first) unsigned-short data array.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return The first unsigned-short data array.
"
      end

      operation 6661762 "getData"
	public explicit_return_type "short"
	nparams 1
	  param in name "bank" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data array for the specified bank.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@param bank The bank whose data array you want to get.
@return The data array for the specified bank.
"
      end

      operation 6661890 "getBankData"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data arrays for all banks.
<p>
Note that calling this method may cause this {@code DataBuffer}
object to be incompatible with <a href=\"#optimizations\">performance
optimizations</a> used by some implementations (such as caching
an associated image in video memory).

@return All of the data arrays.
"
      end

      operation 6662018 "getElem"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the first (default) bank.

@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6662146 "getElem"
	public explicit_return_type "int"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the requested data array element from the specified bank.

@param bank The bank from which you want to get a data array element.
@param i The data array element you want to get.
@return The requested data array element as an integer.
@see #setElem(int, int)
@see #setElem(int, int, int)
"
      end

      operation 6662274 "setElem"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the first (default) bank
to the specified value.

@param i The data array element you want to set.
@param val The integer value to which you want to set the data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end

      operation 6662402 "setElem"
	public explicit_return_type "void"
	nparams 3
	  param in name "bank" explicit_type "int"
	  param in name "i" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the requested data array element in the specified bank
from the given integer.
@param bank The bank in which you want to set the data array element.
@param i The data array element you want to set.
@param val The integer value to which you want to set the specified data array element.
@see #getElem(int)
@see #getElem(int, int)
"
      end
    end

    class 898946 "PackedColorModel"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>PackedColorModel</code> class is an abstract
{@link ColorModel} class that works with pixel values which represent
color and alpha information as separate samples and which pack all
samples for a single pixel into a single int, short, or byte quantity.
This class can be used with an arbitrary {@link ColorSpace}.  The number of
color samples in the pixel values must be the same as the number of color
components in the <code>ColorSpace</code>.  There can be a single alpha
sample.  The array length is always 1 for those methods that use a
primitive array pixel representation of type <code>transferType</code>.
The transfer types supported are DataBuffer.TYPE_BYTE,
DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT.
Color and alpha samples are stored in the single element of the array
in bits indicated by bit masks.  Each bit mask must be contiguous and
masks must not overlap.  The same masks apply to the single int
pixel representation used by other methods.  The correspondence of
masks and color/alpha samples is as follows:
<ul>
<li> Masks are identified by indices running from 0 through
{@link ColorModel#getNumComponents() getNumComponents}&nbsp;-&nbsp;1.
<li> The first
{@link ColorModel#getNumColorComponents() getNumColorComponents}
indices refer to color samples.
<li> If an alpha sample is present, it corresponds the last index.
<li> The order of the color indices is specified
by the <code>ColorSpace</code>.  Typically, this reflects the name of
the color space type (for example, TYPE_RGB), index 0
corresponds to red, index 1 to green, and index 2 to blue.
</ul>
<p>
The translation from pixel values to color/alpha components for
display or processing purposes is a one-to-one correspondence of
samples to components.
A <code>PackedColorModel</code> is typically used with image data
that uses masks to define packed samples.  For example, a
<code>PackedColorModel</code> can be used in conjunction with a
{@link SinglePixelPackedSampleModel} to construct a
{@link BufferedImage}.  Normally the masks used by the
{@link SampleModel} and the <code>ColorModel</code> would be the same.
However, if they are different, the color interpretation of pixel data is
done according to the masks of the <code>ColorModel</code>.
<p>
A single <code>int</code> pixel representation is valid for all objects
of this class since it is always possible to represent pixel values
used with this class in a single <code>int</code>.  Therefore, methods
that use this representation do not throw an
<code>IllegalArgumentException</code> due to an invalid pixel value.
<p>
A subclass of <code>PackedColorModel</code> is {@link DirectColorModel},
which is similar to an X11 TrueColor visual.

@see DirectColorModel
@see SinglePixelPackedSampleModel
@see BufferedImage
"
      classrelation 3072642 // <generalisation>
	relation 3072642 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3072642 // <generalisation>
	  b parent class_ref 312066 // ColorModel
      end

      attribute 1612930 "maskArray"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1613058 "maskOffsets"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1613186 "scaleFactors"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6662530 "PackedColorModel"
	public explicit_return_type ""
	nparams 7
	  param inout name "space" type class_ref 322178 // ColorSpace
	  param in name "bits" explicit_type "int"
	  param inout name "colorMaskArray" explicit_type "int"
	multiplicity "[]"
	  param in name "alphaMask" explicit_type "int"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  param in name "trans" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>PackedColorModel</code> from a color mask array,
which specifies which bits in an <code>int</code> pixel representation
contain each of the color samples, and an alpha mask.  Color
components are in the specified <code>ColorSpace</code>.  The length of
<code>colorMaskArray</code> should be the number of components in
the <code>ColorSpace</code>.  All of the bits in each mask
must be contiguous and fit in the specified number of least significant
bits of an <code>int</code> pixel representation.  If the
<code>alphaMask</code> is 0, there is no alpha.  If there is alpha,
the <code>boolean</code> <code>isAlphaPremultiplied</code> specifies
how to interpret color and alpha samples in pixel values.  If the
<code>boolean</code> is <code>true</code>, color samples are assumed
to have been multiplied by the alpha sample.  The transparency,
<code>trans</code>, specifies what alpha values can be represented
by this color model.  The transfer type is the type of primitive
array used to represent pixel values.
@param space the specified <code>ColorSpace</code>
@param bits the number of bits in the pixel values
@param colorMaskArray array that specifies the masks representing
        the bits of the pixel values that represent the color
        components
@param alphaMask specifies the mask representing
        the bits of the pixel values that represent the alpha
        component
@param isAlphaPremultiplied <code>true</code> if color samples are
       premultiplied by the alpha sample; <code>false</code> otherwise
@param trans specifies the alpha value that can be represented by
       this color model
@param transferType the type of array used to represent pixel values
@throws IllegalArgumentException if <code>bits</code> is less than
        1 or greater than 32
"
      end

      operation 6662658 "PackedColorModel"
	public explicit_return_type ""
	nparams 9
	  param inout name "space" type class_ref 322178 // ColorSpace
	  param in name "bits" explicit_type "int"
	  param in name "rmask" explicit_type "int"
	  param in name "gmask" explicit_type "int"
	  param in name "bmask" explicit_type "int"
	  param in name "amask" explicit_type "int"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  param in name "trans" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>PackedColorModel</code> from the specified
masks which indicate which bits in an <code>int</code> pixel
representation contain the alpha, red, green and blue color samples.
Color components are in the specified <code>ColorSpace</code>, which
must be of type ColorSpace.TYPE_RGB.  All of the bits in each
mask must be contiguous and fit in the specified number of
least significant bits of an <code>int</code> pixel representation.  If
<code>amask</code> is 0, there is no alpha.  If there is alpha,
the <code>boolean</code> <code>isAlphaPremultiplied</code>
specifies how to interpret color and alpha samples
in pixel values.  If the <code>boolean</code> is <code>true</code>,
color samples are assumed to have been multiplied by the alpha sample.
The transparency, <code>trans</code>, specifies what alpha values
can be represented by this color model.
The transfer type is the type of primitive array used to represent
pixel values.
@param space the specified <code>ColorSpace</code>
@param bits the number of bits in the pixel values
@param rmask specifies the mask representing
        the bits of the pixel values that represent the red
        color component
@param gmask specifies the mask representing
        the bits of the pixel values that represent the green
        color component
@param bmask specifies the mask representing
        the bits of the pixel values that represent
        the blue color component
@param amask specifies the mask representing
        the bits of the pixel values that represent
        the alpha component
@param isAlphaPremultiplied <code>true</code> if color samples are
       premultiplied by the alpha sample; <code>false</code> otherwise
@param trans specifies the alpha value that can be represented by
       this color model
@param transferType the type of array used to represent pixel values
@throws IllegalArgumentException if <code>space</code> is not a
        TYPE_RGB space
@see ColorSpace
"
      end

      operation 6662786 "getMask"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the mask indicating which bits in a pixel
contain the specified color/alpha sample.  For color
samples, <code>index</code> corresponds to the placement of color
sample names in the color space.  Thus, an <code>index</code>
equal to 0 for a CMYK ColorSpace would correspond to
Cyan and an <code>index</code> equal to 1 would correspond to
Magenta.  If there is alpha, the alpha <code>index</code> would be:
<pre>
     alphaIndex = numComponents() - 1;
</pre>
@param index the specified color or alpha sample
@return the mask, which indicates which bits of the <code>int</code>
        pixel representation contain the color or alpha sample specified
        by <code>index</code>.
@throws ArrayIndexOutOfBoundsException if <code>index</code> is
        greater than the number of components minus 1 in this
        <code>PackedColorModel</code> or if <code>index</code> is
        less than zero
"
      end

      operation 6662914 "getMasks"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a mask array indicating which bits in a pixel
contain the color and alpha samples.
@return the mask array , which indicates which bits of the
        <code>int</code> pixel
        representation contain the color or alpha samples.
"
      end

      operation 6663042 "DecomposeMask"
	private explicit_return_type "void"
	nparams 3
	  param in name "mask" explicit_type "int"
	  param in name "idx" explicit_type "int"
	  param inout name "componentName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A utility function to compute the mask offset and scalefactor,
store these and the mask in instance arrays, and verify that
the mask fits in the specified pixel size.
"
      end

      operation 6663170 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SampleModel</code> with the specified width and
height that has a data layout compatible with this
<code>ColorModel</code>.
@param w the width (in pixels) of the region of the image data
         described
@param h the height (in pixels) of the region of the image data
         described
@return the newly created <code>SampleModel</code>.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
@see SampleModel
"
      end

      operation 6663298 "isCompatibleSampleModel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sm" type class_ref 314370 // SampleModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified <code>SampleModel</code> is compatible
with this <code>ColorModel</code>.  If <code>sm</code> is
<code>null</code>, this method returns <code>false</code>.
@param sm the specified <code>SampleModel</code>,
or <code>null</code>
@return <code>true</code> if the specified <code>SampleModel</code>
        is compatible with this <code>ColorModel</code>;
        <code>false</code> otherwise.
@see SampleModel
"
      end

      operation 6663426 "getAlphaRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "raster" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link WritableRaster} representing the alpha channel of
an image, extracted from the input <code>WritableRaster</code>.
This method assumes that <code>WritableRaster</code> objects
associated with this <code>ColorModel</code> store the alpha band,
if present, as the last band of image data.  Returns <code>null</code>
if there is no separate spatial alpha channel associated with this
<code>ColorModel</code>.  This method creates a new
<code>WritableRaster</code>, but shares the data array.
@param raster a <code>WritableRaster</code> containing an image
@return a <code>WritableRaster</code> that represents the alpha
        channel of the image contained in <code>raster</code>.
"
      end

      operation 6663554 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified <code>Object</code> is an instance
of <code>PackedColorModel</code> and equals this
<code>PackedColorModel</code>.
@param obj the <code>Object</code> to test for equality
@return <code>true</code> if the specified <code>Object</code>
is an instance of <code>PackedColorModel</code> and equals this
<code>PackedColorModel</code>; <code>false</code> otherwise.
"
      end

      operation 6663682 "createBitsArray"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "colorMaskArray" explicit_type "int"
	multiplicity "[]"
	  param in name "alphaMask" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6663810 "createBitsArray"
	class_operation private explicit_return_type "int"
	nparams 4
	  param in name "rmask" explicit_type "int"
	  param in name "gmask" explicit_type "int"
	  param in name "bmask" explicit_type "int"
	  param in name "amask" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6663938 "countBits"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 899074 "FilteredImageSource"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is an implementation of the ImageProducer interface which
takes an existing image and a filter object and uses them to produce
image data for a new filtered version of the original image.
Here is an example which filters an image by swapping the red and
blue compents:
<pre>

     Image src = getImage(\"doc:///demo/images/duke/T1.gif\");
     ImageFilter colorfilter = new RedBlueSwapFilter();
     Image img = createImage(new FilteredImageSource(src.getSource(),
                                                     colorfilter));

</pre>

@see ImageProducer

@author      Jim Graham
"
      classrelation 3072898 // <realization>
	relation 3072898 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3072898 // <realization>
	  b parent class_ref 344066 // ImageProducer
      end

      classrelation 3073026 // src (<unidirectional association>)
	relation 3073026 --->
	  a role_name "src" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3073026 // src (<unidirectional association>)
	  b parent class_ref 344066 // ImageProducer
      end

      classrelation 3073154 // filter (<unidirectional association>)
	relation 3073154 --->
	  a role_name "filter" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3073154 // filter (<unidirectional association>)
	  b parent class_ref 379906 // ImageFilter
      end

      operation 6668546 "FilteredImageSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "orig" type class_ref 344066 // ImageProducer
	  param inout name "imgf" type class_ref 379906 // ImageFilter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ImageProducer object from an existing ImageProducer
and a filter object.
@param orig the specified <code>ImageProducer</code>
@param imgf the specified <code>ImageFilter</code>
@see ImageFilter
@see java.awt.Component#createImage
"
      end

      classrelation 3073282 // proxies (<unidirectional association>)
	relation 3073282 --->
	  a role_name "proxies" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3073282 // proxies (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      operation 6668674 "addConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified <code>ImageConsumer</code>
to the list of consumers interested in data for the filtered image.
An instance of the original <code>ImageFilter</code>
is created
(using the filter's <code>getFilterInstance</code> method)
to manipulate the image data
for the specified <code>ImageConsumer</code>.
The newly created filter instance
is then passed to the <code>addConsumer</code> method
of the original <code>ImageProducer</code>.

<p>
This method is public as a side effect
of this class implementing
the <code>ImageProducer</code> interface.
It should not be called from user code,
and its behavior if called from user code is unspecified.

@param ic  the consumer for the filtered image
@see ImageConsumer
"
      end

      operation 6668802 "isConsumer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether an ImageConsumer is on the list of consumers
currently interested in data for this image.

<p>
This method is public as a side effect
of this class implementing
the <code>ImageProducer</code> interface.
It should not be called from user code,
and its behavior if called from user code is unspecified.

@param ic the specified <code>ImageConsumer</code>
@return true if the ImageConsumer is on the list; false otherwise
@see ImageConsumer
"
      end

      operation 6668930 "removeConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an ImageConsumer from the list of consumers interested in
data for this image.

<p>
This method is public as a side effect
of this class implementing
the <code>ImageProducer</code> interface.
It should not be called from user code,
and its behavior if called from user code is unspecified.

@see ImageConsumer
"
      end

      operation 6669058 "startProduction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts production of the filtered image.
If the specified <code>ImageConsumer</code>
isn't already a consumer of the filtered image,
an instance of the original <code>ImageFilter</code>
is created
(using the filter's <code>getFilterInstance</code> method)
to manipulate the image data
for the <code>ImageConsumer</code>.
The filter instance for the <code>ImageConsumer</code>
is then passed to the <code>startProduction</code> method
of the original <code>ImageProducer</code>.

<p>
This method is public as a side effect
of this class implementing
the <code>ImageProducer</code> interface.
It should not be called from user code,
and its behavior if called from user code is unspecified.

@param ic  the consumer for the filtered image
@see ImageConsumer
"
      end

      operation 6669186 "requestTopDownLeftRightResend"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that a given ImageConsumer have the image data delivered
one more time in top-down, left-right order.  The request is
handed to the ImageFilter for further processing, since the
ability to preserve the pixel ordering depends on the filter.

<p>
This method is public as a side effect
of this class implementing
the <code>ImageProducer</code> interface.
It should not be called from user code,
and its behavior if called from user code is unspecified.

@see ImageConsumer
"
      end
    end

    class 899202 "ImagingOpException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ImagingOpException</code> is thrown if one of the
{@link BufferedImageOp} or {@link RasterOp} filter methods cannot
process the image.
"
      classrelation 3073410 // <generalisation>
	relation 3073410 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3073410 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 6669314 "ImagingOpException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImagingOpException</code> object with the
specified message.
@param s the message to generate when a
<code>ImagingOpException</code> is thrown
"
      end
    end

    class 899330 "LookupOp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements a lookup operation from the source
to the destination.  The LookupTable object may contain a single array
or multiple arrays, subject to the restrictions below.
<p>
For Rasters, the lookup operates on bands.  The number of
lookup arrays may be one, in which case the same array is
applied to all bands, or it must equal the number of Source
Raster bands.
<p>
For BufferedImages, the lookup operates on color and alpha components.
The number of lookup arrays may be one, in which case the
same array is applied to all color (but not alpha) components.
Otherwise, the number of lookup arrays may
equal the number of Source color components, in which case no
lookup of the alpha component (if present) is performed.
If neither of these cases apply, the number of lookup arrays
must equal the number of Source color components plus alpha components,
in which case lookup is performed for all color and alpha components.
This allows non-uniform rescaling of multi-band BufferedImages.
<p>
BufferedImage sources with premultiplied alpha data are treated in the same
manner as non-premultiplied images for purposes of the lookup.  That is,
the lookup is done per band on the raw data of the BufferedImage source
without regard to whether the data is premultiplied.  If a color conversion
is required to the destination ColorModel, the premultiplied state of
both source and destination will be taken into account for this step.
<p>
Images with an IndexColorModel cannot be used.
<p>
If a RenderingHints object is specified in the constructor, the
color rendering hint and the dithering hint may be used when color
conversion is required.
<p>
This class allows the Source to be the same as the Destination.

@see LookupTable
@see java.awt.RenderingHints#KEY_COLOR_RENDERING
@see java.awt.RenderingHints#KEY_DITHERING
"
      classrelation 3073922 // <realization>
	relation 3073922 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3073922 // <realization>
	  b parent class_ref 867202 // BufferedImageOp
      end

      classrelation 3074050 // <realization>
	relation 3074050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3074050 // <realization>
	  b parent class_ref 896258 // RasterOp
      end

      classrelation 3074178 // ltable (<unidirectional association>)
	relation 3074178 --->
	  a role_name "ltable" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3074178 // ltable (<unidirectional association>)
	  b parent class_ref 897666 // LookupTable
      end

      attribute 1617410 "numComponents"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3074306 // hints (<unidirectional association>)
	relation 3074306 --->
	  a role_name "hints" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3074306 // hints (<unidirectional association>)
	  b parent class_ref 856578 // RenderingHints
      end

      operation 6676226 "LookupOp"
	public explicit_return_type ""
	nparams 2
	  param inout name "lookup" type class_ref 897666 // LookupTable
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>LookupOp</code> object given the lookup
table and a <code>RenderingHints</code> object, which might
be <code>null</code>.
@param lookup the specified <code>LookupTable</code>
@param hints the specified <code>RenderingHints</code>,
       or <code>null</code>
"
      end

      operation 6676354 "getTable"
	public return_type class_ref 897666 // LookupTable
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>LookupTable</code>.
@return the <code>LookupTable</code> of this
        <code>LookupOp</code>.
"
      end

      operation 6676482 "filter"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "dst" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a lookup operation on a <code>BufferedImage</code>.
If the color model in the source image is not the same as that
in the destination image, the pixels will be converted
in the destination.  If the destination image is <code>null</code>,
a <code>BufferedImage</code> will be created with an appropriate
<code>ColorModel</code>.  An <code>IllegalArgumentException</code>
might be thrown if the number of arrays in the
<code>LookupTable</code> does not meet the restrictions
stated in the class comment above, or if the source image
has an <code>IndexColorModel</code>.
@param src the <code>BufferedImage</code> to be filtered
@param dst the <code>BufferedImage</code> in which to
           store the results of the filter operation
@return the filtered <code>BufferedImage</code>.
@throws IllegalArgumentException if the number of arrays in the
        <code>LookupTable</code> does not meet the restrictions
        described in the class comments, or if the source image
        has an <code>IndexColorModel</code>.
"
      end

      operation 6676610 "filter"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a lookup operation on a <code>Raster</code>.
If the destination <code>Raster</code> is <code>null</code>,
a new <code>Raster</code> will be created.
The <code>IllegalArgumentException</code> might be thrown
if the source <code>Raster</code> and the destination
<code>Raster</code> do not have the same
number of bands or if the number of arrays in the
<code>LookupTable</code> does not meet the
restrictions stated in the class comment above.
@param src the source <code>Raster</code> to filter
@param dst the destination <code>WritableRaster</code> for the
           filtered <code>src</code>
@return the filtered <code>WritableRaster</code>.
@throws IllegalArgumentException if the source and destinations
        rasters do not have the same number of bands, or the
        number of arrays in the <code>LookupTable</code> does
        not meet the restrictions described in the class comments.

"
      end

      operation 6676738 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the filtered destination image.  Since
this is not a geometric operation, the bounding box does not
change.
@param src the <code>BufferedImage</code> to be filtered
@return the bounds of the filtered definition image.
"
      end

      operation 6676866 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the filtered destination Raster.  Since
this is not a geometric operation, the bounding box does not
change.
@param src the <code>Raster</code> to be filtered
@return the bounds of the filtered definition <code>Raster</code>.
"
      end

      operation 6676994 "createCompatibleDestImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "destCM" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination image with the correct size and number of
bands.  If destCM is <code>null</code>, an appropriate
<code>ColorModel</code> will be used.
@param src       Source image for the filter operation.
@param destCM    the destination's <code>ColorModel</code>, which
                 can be <code>null</code>.
@return a filtered destination <code>BufferedImage</code>.
"
      end

      operation 6677122 "createCompatibleDestRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed-destination <code>Raster</code> with the
correct size and number of bands, given this source.
@param src the <code>Raster</code> to be transformed
@return the zeroed-destination <code>Raster</code>.
"
      end

      operation 6677250 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the destination point given a
point in the source.  If <code>dstPt</code> is not
<code>null</code>, it will be used to hold the return value.
Since this is not a geometric operation, the <code>srcPt</code>
will equal the <code>dstPt</code>.
@param srcPt a <code>Point2D</code> that represents a point
       in the source image
@param dstPt a <code>Point2D</code>that represents the location
       in the destination
@return the <code>Point2D</code> in the destination that
        corresponds to the specified point in the source.
"
      end

      operation 6677378 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints for this op.
@return the <code>RenderingHints</code> object associated
        with this op.
"
      end

      operation 6677506 "byteFilter"
	private explicit_return_type "void"
	nparams 6
	  param inout name "lookup" type class_ref 897538 // ByteLookupTable
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "numBands" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6677634 "shortFilter"
	private explicit_return_type "void"
	nparams 6
	  param inout name "lookup" type class_ref 899458 // ShortLookupTable
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "numBands" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 899458 "ShortLookupTable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines a lookup table object.  The output of a
lookup operation using an object of this class is interpreted
as an unsigned short quantity.  The lookup table contains short
data arrays for one or more bands (or components) of an image,
and it contains an offset which will be subtracted from the
input values before indexing the arrays.  This allows an array
smaller than the native data size to be provided for a
constrained input.  If there is only one array in the lookup
table, it will be applied to all bands.

@see ByteLookupTable
@see LookupOp
"
      classrelation 3076610 // <generalisation>
	relation 3076610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3076610 // <generalisation>
	  b parent class_ref 897666 // LookupTable
      end

      attribute 1622274 "data"
	package explicit_type "short"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constants

"
      end

      operation 6695042 "ShortLookupTable"
	public explicit_return_type ""
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "data" explicit_type "short"
	multiplicity "[][]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ShortLookupTable object from an array of short
arrays representing a lookup table for each
band.  The offset will be subtracted from the input
values before indexing into the arrays.  The number of
bands is the length of the data argument.  The
data array for each band is stored as a reference.
@param offset the value subtracted from the input values
       before indexing into the arrays
@param data an array of short arrays representing a lookup
       table for each band
"
      end

      operation 6695170 "ShortLookupTable"
	public explicit_return_type ""
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "data" explicit_type "short"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ShortLookupTable object from an array
of shorts representing a lookup table for each
band.  The offset will be subtracted from the input
values before indexing into the array.  The
data array is stored as a reference.
@param offset the value subtracted from the input values
       before indexing into the arrays
@param data an array of shorts
"
      end

      operation 6695298 "getTable"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lookup table data by reference.  If this ShortLookupTable
was constructed using a single short array, the length of the returned
array is one.
@return ShortLookupTable data array.
"
      end

      operation 6695426 "lookupPixel"
	public explicit_return_type "int"
	nparams 2
	  param inout name "src" explicit_type "int"
	multiplicity "[]"
	  param inout name "dst" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of samples of a pixel, translated with the lookup
table. The source and destination array can be the same array.
Array <code>dst</code> is returned.

@param src the source array.
@param dst the destination array. This array must be at least as
        long as <code>src</code>.  If <code>dst</code> is
        <code>null</code>, a new array will be allocated having the
        same length as <code>src</code>.
@return the array <code>dst</code>, an <code>int</code> array of
        samples.
@exception ArrayIndexOutOfBoundsException if <code>src</code> is
           longer than <code>dst</code> or if for any element
           <code>i</code> of <code>src</code>,
           {@code (src[i]&0xffff)-offset} is either less than
           zero or greater than or equal to the length of the
           lookup table for any band.
"
      end

      operation 6695554 "lookupPixel"
	public explicit_return_type "short"
	nparams 2
	  param inout name "src" explicit_type "short"
	multiplicity "[]"
	  param inout name "dst" explicit_type "short"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of samples of a pixel, translated with the lookup
table. The source and destination array can be the same array.
Array <code>dst</code> is returned.

@param src the source array.
@param dst the destination array. This array must be at least as
        long as <code>src</code>.  If <code>dst</code> is
        <code>null</code>, a new array will be allocated having the
        same length as <code>src</code>.
@return the array <code>dst</code>, an <code>int</code> array of
        samples.
@exception ArrayIndexOutOfBoundsException if <code>src</code> is
           longer than <code>dst</code> or if for any element
           <code>i</code> of <code>src</code>,
           {@code (src[i]&0xffff)-offset} is either less than
           zero or greater than or equal to the length of the
           lookup table for any band.
"
      end
    end

    class 899586 "MemoryImageSource"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is an implementation of the ImageProducer interface which
uses an array to produce pixel values for an Image.  Here is an example
which calculates a 100x100 image representing a fade from black to blue
along the X axis and a fade from black to red along the Y axis:
<pre>{@code

     int w = 100;
     int h = 100;
     int pix[] = new int[w * h];
     int index = 0;
     for (int y = 0; y < h; y++) {
         int red = (y * 255) / (h - 1);
         for (int x = 0; x < w; x++) {
             int blue = (x * 255) / (w - 1);
             pix[index++] = (255 << 24) | (red << 16) | blue;
         }
     }
     Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));

}</pre>
The MemoryImageSource is also capable of managing a memory image which
varies over time to allow animation or custom rendering.  Here is an
example showing how to set up the animation source and signal changes
in the data (adapted from the MemoryAnimationSourceDemo by Garth Dickie):
<pre>{@code

     int pixels[];
     MemoryImageSource source;

     public void init() {
         int width = 50;
         int height = 50;
         int size = width * height;
         pixels = new int[size];

         int value = getBackground().getRGB();
         for (int i = 0; i < size; i++) {
             pixels[i] = value;
         }

         source = new MemoryImageSource(width, height, pixels, 0, width);
         source.setAnimated(true);
         image = createImage(source);
     }

     public void run() {
         Thread me = Thread.currentThread( );
         me.setPriority(Thread.MIN_PRIORITY);

         while (true) {
             try {
                 Thread.sleep(10);
             } catch( InterruptedException e ) {
                 return;
             }

             // Modify the values in the pixels array at (x, y, w, h)

             // Send the new data to the interested ImageConsumers
             source.newPixels(x, y, w, h);
         }
     }

}</pre>

@see ImageProducer

@author      Jim Graham
@author      Animation capabilities inspired by the
             MemoryAnimationSource class written by Garth Dickie
"
      classrelation 3074434 // <realization>
	relation 3074434 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3074434 // <realization>
	  b parent class_ref 344066 // ImageProducer
      end

      attribute 1617538 "width"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1617666 "height"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3074562 // model (<unidirectional association>)
	relation 3074562 --->
	  a role_name "model" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3074562 // model (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      classrelation 3074690 // pixels (<unidirectional association>)
	relation 3074690 --->
	  a role_name "pixels" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3074690 // pixels (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1617794 "pixeloffset"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1617922 "pixelscan"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3074818 // properties (<unidirectional association>)
	relation 3074818 --->
	  a role_name "properties" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3074818 // properties (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      classrelation 3074946 // theConsumers (<unidirectional association>)
	relation 3074946 --->
	  a role_name "theConsumers" init_value " new Vector()" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3074946 // theConsumers (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 1618050 "animating"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1618178 "fullbuffers"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6677762 "MemoryImageSource"
	public explicit_return_type ""
	nparams 6
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "cm" type class_ref 312066 // ColorModel
	  param inout name "pix" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scan" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ImageProducer object which uses an array of bytes
to produce data for an Image object.
@param w the width of the rectangle of pixels
@param h the height of the rectangle of pixels
@param cm the specified <code>ColorModel</code>
@param pix an array of pixels
@param off the offset into the array of where to store the
       first pixel
@param scan the distance from one row of pixels to the next in
       the array
@see java.awt.Component#createImage
"
      end

      operation 6677890 "MemoryImageSource"
	public explicit_return_type ""
	nparams 7
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "cm" type class_ref 312066 // ColorModel
	  param inout name "pix" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scan" explicit_type "int"
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}<?,?> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ImageProducer object which uses an array of bytes
to produce data for an Image object.
@param w the width of the rectangle of pixels
@param h the height of the rectangle of pixels
@param cm the specified <code>ColorModel</code>
@param pix an array of pixels
@param off the offset into the array of where to store the
       first pixel
@param scan the distance from one row of pixels to the next in
       the array
@param props a list of properties that the <code>ImageProducer</code>
       uses to process an image
@see java.awt.Component#createImage
"
      end

      operation 6678018 "MemoryImageSource"
	public explicit_return_type ""
	nparams 6
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "cm" type class_ref 312066 // ColorModel
	  param inout name "pix" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scan" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ImageProducer object which uses an array of integers
to produce data for an Image object.
@param w the width of the rectangle of pixels
@param h the height of the rectangle of pixels
@param cm the specified <code>ColorModel</code>
@param pix an array of pixels
@param off the offset into the array of where to store the
       first pixel
@param scan the distance from one row of pixels to the next in
       the array
@see java.awt.Component#createImage
"
      end

      operation 6678146 "MemoryImageSource"
	public explicit_return_type ""
	nparams 7
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "cm" type class_ref 312066 // ColorModel
	  param inout name "pix" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scan" explicit_type "int"
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}<?,?> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ImageProducer object which uses an array of integers
to produce data for an Image object.
@param w the width of the rectangle of pixels
@param h the height of the rectangle of pixels
@param cm the specified <code>ColorModel</code>
@param pix an array of pixels
@param off the offset into the array of where to store the
       first pixel
@param scan the distance from one row of pixels to the next in
       the array
@param props a list of properties that the <code>ImageProducer</code>
       uses to process an image
@see java.awt.Component#createImage
"
      end

      operation 6678274 "initialize"
	private explicit_return_type "void"
	nparams 7
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "cm" type class_ref 312066 // ColorModel
	  param inout name "pix" type class_ref 129538 // Object
	  param in name "off" explicit_type "int"
	  param in name "scan" explicit_type "int"
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6678402 "MemoryImageSource"
	public explicit_return_type ""
	nparams 5
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "pix" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scan" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ImageProducer object which uses an array of integers
in the default RGB ColorModel to produce data for an Image object.
@param w the width of the rectangle of pixels
@param h the height of the rectangle of pixels
@param pix an array of pixels
@param off the offset into the array of where to store the
       first pixel
@param scan the distance from one row of pixels to the next in
       the array
@see java.awt.Component#createImage
@see ColorModel#getRGBdefault
"
      end

      operation 6678530 "MemoryImageSource"
	public explicit_return_type ""
	nparams 6
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "pix" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scan" explicit_type "int"
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}<?,?> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ImageProducer object which uses an array of integers
in the default RGB ColorModel to produce data for an Image object.
@param w the width of the rectangle of pixels
@param h the height of the rectangle of pixels
@param pix an array of pixels
@param off the offset into the array of where to store the
       first pixel
@param scan the distance from one row of pixels to the next in
       the array
@param props a list of properties that the <code>ImageProducer</code>
       uses to process an image
@see java.awt.Component#createImage
@see ColorModel#getRGBdefault
"
      end

      operation 6678658 "addConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an ImageConsumer to the list of consumers interested in
data for this image.
@param ic the specified <code>ImageConsumer</code>
@throws NullPointerException if the specified
          <code>ImageConsumer</code> is null
@see ImageConsumer
"
      end

      operation 6678786 "isConsumer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if an ImageConsumer is on the list of consumers currently
interested in data for this image.
@param ic the specified <code>ImageConsumer</code>
@return <code>true</code> if the <code>ImageConsumer</code>
is on the list; <code>false</code> otherwise.
@see ImageConsumer
"
      end

      operation 6678914 "removeConsumer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an ImageConsumer from the list of consumers interested in
data for this image.
@param ic the specified <code>ImageConsumer</code>
@see ImageConsumer
"
      end

      operation 6679042 "startProduction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an ImageConsumer to the list of consumers interested in
data for this image and immediately starts delivery of the
image data through the ImageConsumer interface.
@param ic the specified <code>ImageConsumer</code>
image data through the ImageConsumer interface.
@see ImageConsumer
"
      end

      operation 6679170 "requestTopDownLeftRightResend"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that a given ImageConsumer have the image data delivered
one more time in top-down, left-right order.
@param ic the specified <code>ImageConsumer</code>
@see ImageConsumer
"
      end

      operation 6679298 "setAnimated"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animated" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this memory image into a multi-frame animation or a
single-frame static image depending on the animated parameter.
<p>This method should be called immediately after the
MemoryImageSource is constructed and before an image is
created with it to ensure that all ImageConsumers will
receive the correct multi-frame data.  If an ImageConsumer
is added to this ImageProducer before this flag is set then
that ImageConsumer will see only a snapshot of the pixel
data that was available when it connected.
@param animated <code>true</code> if the image is a
      multi-frame animation
"
      end

      operation 6679426 "setFullBufferUpdates"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fullbuffers" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether this animated memory image should always be
updated by sending the complete buffer of pixels whenever
there is a change.
This flag is ignored if the animation flag is not turned on
through the setAnimated() method.
<p>This method should be called immediately after the
MemoryImageSource is constructed and before an image is
created with it to ensure that all ImageConsumers will
receive the correct pixel delivery hints.
@param fullbuffers <code>true</code> if the complete pixel
            buffer should always
be sent
@see #setAnimated
"
      end

      operation 6679554 "newPixels"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a whole new buffer of pixels to any ImageConsumers that
are currently interested in the data for this image and notify
them that an animation frame is complete.
This method only has effect if the animation flag has been
turned on through the setAnimated() method.
@see #newPixels(int, int, int, int, boolean)
@see ImageConsumer
@see #setAnimated
"
      end

      operation 6679682 "newPixels"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a rectangular region of the buffer of pixels to any
ImageConsumers that are currently interested in the data for
this image and notify them that an animation frame is complete.
This method only has effect if the animation flag has been
turned on through the setAnimated() method.
If the full buffer update flag was turned on with the
setFullBufferUpdates() method then the rectangle parameters
will be ignored and the entire buffer will always be sent.
@param x the x coordinate of the upper left corner of the rectangle
of pixels to be sent
@param y the y coordinate of the upper left corner of the rectangle
of pixels to be sent
@param w the width of the rectangle of pixels to be sent
@param h the height of the rectangle of pixels to be sent
@see #newPixels(int, int, int, int, boolean)
@see ImageConsumer
@see #setAnimated
@see #setFullBufferUpdates
"
      end

      operation 6679810 "newPixels"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "framenotify" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a rectangular region of the buffer of pixels to any
ImageConsumers that are currently interested in the data for
this image.
If the framenotify parameter is true then the consumers are
also notified that an animation frame is complete.
This method only has effect if the animation flag has been
turned on through the setAnimated() method.
If the full buffer update flag was turned on with the
setFullBufferUpdates() method then the rectangle parameters
will be ignored and the entire buffer will always be sent.
@param x the x coordinate of the upper left corner of the rectangle
of pixels to be sent
@param y the y coordinate of the upper left corner of the rectangle
of pixels to be sent
@param w the width of the rectangle of pixels to be sent
@param h the height of the rectangle of pixels to be sent
@param framenotify <code>true</code> if the consumers should be sent a
{@link ImageConsumer#SINGLEFRAMEDONE SINGLEFRAMEDONE} notification
@see ImageConsumer
@see #setAnimated
@see #setFullBufferUpdates
"
      end

      operation 6679938 "newPixels"
	public explicit_return_type "void"
	nparams 4
	  param inout name "newpix" explicit_type "byte"
	multiplicity "[]"
	  param inout name "newmodel" type class_ref 312066 // ColorModel
	  param in name "offset" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes to a new byte array to hold the pixels for this image.
If the animation flag has been turned on through the setAnimated()
method, then the new pixels will be immediately delivered to any
ImageConsumers that are currently interested in the data for
this image.
@param newpix the new pixel array
@param newmodel the specified <code>ColorModel</code>
@param offset the offset into the array
@param scansize the distance from one row of pixels to the next in
the array
@see #newPixels(int, int, int, int, boolean)
@see #setAnimated
"
      end

      operation 6680066 "newPixels"
	public explicit_return_type "void"
	nparams 4
	  param inout name "newpix" explicit_type "int"
	multiplicity "[]"
	  param inout name "newmodel" type class_ref 312066 // ColorModel
	  param in name "offset" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes to a new int array to hold the pixels for this image.
If the animation flag has been turned on through the setAnimated()
method, then the new pixels will be immediately delivered to any
ImageConsumers that are currently interested in the data for
this image.
@param newpix the new pixel array
@param newmodel the specified <code>ColorModel</code>
@param offset the offset into the array
@param scansize the distance from one row of pixels to the next in
the array
@see #newPixels(int, int, int, int, boolean)
@see #setAnimated
"
      end

      operation 6680194 "initConsumer"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6680322 "sendPixels"
	private explicit_return_type "void"
	nparams 5
	  param inout name "ic" type class_ref 380034 // ImageConsumer
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 899714 "MultiPixelPackedSampleModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>MultiPixelPackedSampleModel</code> class represents
one-banded images and can pack multiple one-sample
pixels into one data element.  Pixels are not allowed to span data elements.
The data type can be DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
or DataBuffer.TYPE_INT.  Each pixel must be a power of 2 number of bits
and a power of 2 number of pixels must fit exactly in one data element.
Pixel bit stride is equal to the number of bits per pixel.  Scanline
stride is in data elements and the last several data elements might be
padded with unused pixels.  Data bit offset is the offset in bits from
the beginning of the {@link DataBuffer} to the first pixel and must be
a multiple of pixel bit stride.
<p>
The following code illustrates extracting the bits for pixel
<code>x,&nbsp;y</code> from <code>DataBuffer</code> <code>data</code>
and storing the pixel data in data elements of type
<code>dataType</code>:
<pre>{@code
     int dataElementSize = DataBuffer.getDataTypeSize(dataType);
     int bitnum = dataBitOffset + x*pixelBitStride;
     int element = data.getElem(y*scanlineStride + bitnum/dataElementSize);
     int shift = dataElementSize - (bitnum & (dataElementSize-1))
                 - pixelBitStride;
     int pixel = (element >> shift) & ((1 << pixelBitStride) - 1);
}</pre>
"
      classrelation 3075074 // <generalisation>
	relation 3075074 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3075074 // <generalisation>
	  b parent class_ref 314370 // SampleModel
      end

      attribute 1618306 "pixelBitStride"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of bits from one pixel to the next. 
"
      end

      attribute 1618434 "bitMask"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bitmask that extracts the rightmost pixel of a data element. 
"
      end

      attribute 1618562 "pixelsPerDataElement"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of pixels that fit in a data element.  Also used
as the number of bits per pixel.

"
      end

      attribute 1618690 "dataElementSize"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The size of a data element in bits. 
"
      end

      attribute 1618818 "dataBitOffset"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The bit offset into the data array where the first pixel begins.

"
      end

      attribute 1618946 "scanlineStride"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ScanlineStride of the data buffer described in data array elements. 
"
      end

      operation 6680450 "MultiPixelPackedSampleModel"
	public explicit_return_type ""
	nparams 4
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "numberOfBits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MultiPixelPackedSampleModel</code> with the
specified data type, width, height and number of bits per pixel.
@param dataType  the data type for storing samples
@param w         the width, in pixels, of the region of
                 image data described
@param h         the height, in pixels, of the region of
                 image data described
@param numberOfBits the number of bits per pixel
@throws IllegalArgumentException if <code>dataType</code> is not
        either <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>, or
        <code>DataBuffer.TYPE_INT</code>
"
      end

      operation 6680578 "MultiPixelPackedSampleModel"
	public explicit_return_type ""
	nparams 6
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "numberOfBits" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param in name "dataBitOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MultiPixelPackedSampleModel</code> with
specified data type, width, height, number of bits per pixel,
scanline stride and data bit offset.
@param dataType  the data type for storing samples
@param w         the width, in pixels, of the region of
                 image data described
@param h         the height, in pixels, of the region of
                 image data described
@param numberOfBits the number of bits per pixel
@param scanlineStride the line stride of the image data
@param dataBitOffset the data bit offset for the region of image
                 data described
@exception RasterFormatException if the number of bits per pixel
                 is not a power of 2 or if a power of 2 number of
                 pixels do not fit in one data element.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
@throws IllegalArgumentException if <code>dataType</code> is not
        either <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>, or
        <code>DataBuffer.TYPE_INT</code>
"
      end

      operation 6680706 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>MultiPixelPackedSampleModel</code> with the
specified width and height.  The new
<code>MultiPixelPackedSampleModel</code> has the
same storage data type and number of bits per pixel as this
<code>MultiPixelPackedSampleModel</code>.
@param w the specified width
@param h the specified height
@return a {@link SampleModel} with the specified width and height
and with the same storage data type and number of bits per pixel
as this <code>MultiPixelPackedSampleModel</code>.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
"
      end

      operation 6680834 "createDataBuffer"
	public return_type class_ref 897026 // DataBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>DataBuffer</code> that corresponds to this
<code>MultiPixelPackedSampleModel</code>.  The
<code>DataBuffer</code> object's data type and size
is consistent with this <code>MultiPixelPackedSampleModel</code>.
The <code>DataBuffer</code> has a single bank.
@return a <code>DataBuffer</code> with the same data type and
size as this <code>MultiPixelPackedSampleModel</code>.
"
      end

      operation 6680962 "getNumDataElements"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of data elements needed to transfer one pixel
via the {@link #getDataElements} and {@link #setDataElements}
methods.  For a <code>MultiPixelPackedSampleModel</code>, this is
one.
@return the number of data elements.
"
      end

      operation 6681090 "getSampleSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits per sample for all bands.
@return the number of bits per sample.
"
      end

      operation 6681218 "getSampleSize"
	public explicit_return_type "int"
	nparams 1
	  param in name "band" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits per sample for the specified band.
@param band the specified band
@return the number of bits per sample for the specified band.
"
      end

      operation 6681346 "getOffset"
	public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offset of pixel (x,&nbsp;y) in data array elements.
@param x the X coordinate of the specified pixel
@param y the Y coordinate of the specified pixel
@return the offset of the specified pixel.
"
      end

      operation 6681474 "getBitOffset"
	public explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the offset, in bits, into the data element in which it is
 stored for the <code>x</code>th pixel of a scanline.
 This offset is the same for all scanlines.
 @param x the specified pixel
 @return the bit offset of the specified pixel.
"
      end

      operation 6681602 "getScanlineStride"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the scanline stride.
@return the scanline stride of this
<code>MultiPixelPackedSampleModel</code>.
"
      end

      operation 6681730 "getPixelBitStride"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pixel bit stride in bits.  This value is the same as
the number of bits per pixel.
@return the <code>pixelBitStride</code> of this
<code>MultiPixelPackedSampleModel</code>.
"
      end

      operation 6681858 "getDataBitOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data bit offset in bits.
@return the <code>dataBitOffset</code> of this
<code>MultiPixelPackedSampleModel</code>.
"
      end

      operation 6681986 "getTransferType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the TransferType used to transfer pixels by way of the
 <code>getDataElements</code> and <code>setDataElements</code>
 methods. The TransferType might or might not be the same as the
 storage DataType.  The TransferType is one of
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 or DataBuffer.TYPE_INT.
 @return the transfertype.
"
      end

      operation 6682114 "createSubsetSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 1
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>MultiPixelPackedSampleModel</code> with a
subset of the bands of this
<code>MultiPixelPackedSampleModel</code>.  Since a
<code>MultiPixelPackedSampleModel</code> only has one band, the
bands argument must have a length of one and indicate the zeroth
band.
@param bands the specified bands
@return a new <code>SampleModel</code> with a subset of bands of
this <code>MultiPixelPackedSampleModel</code>.
@exception RasterFormatException if the number of bands requested
is not one.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
"
      end

      operation 6682242 "getSample"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns as <code>int</code> the sample in a specified band for the
pixel located at (x,&nbsp;y).  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if the
coordinates are not in bounds.
@param x         the X coordinate of the specified pixel
@param y         the Y coordinate of the specified pixel
@param b         the band to return, which is assumed to be 0
@param data      the <code>DataBuffer</code> containing the image
                 data
@return the specified band containing the sample of the specified
pixel.
@exception ArrayIndexOutOfBoundsException if the specified
         coordinates are not in bounds.
@see #setSample(int, int, int, int, DataBuffer)
"
      end

      operation 6682370 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at
(x,&nbsp;y) in the <code>DataBuffer</code> using an
<code>int</code> for input.
An <code>ArrayIndexOutOfBoundsException</code> is thrown if the
coordinates are not in bounds.
@param x the X coordinate of the specified pixel
@param y the Y coordinate of the specified pixel
@param b the band to return, which is assumed to be 0
@param s the input sample as an <code>int</code>
@param data the <code>DataBuffer</code> where image data is stored
@exception ArrayIndexOutOfBoundsException if the coordinates are
not in bounds.
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6682498 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns data for a single pixel in a primitive array of type
TransferType.  For a <code>MultiPixelPackedSampleModel</code>,
the array has one element, and the type is the smallest of
DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT
that can hold a single pixel.  Generally, <code>obj</code>
should be passed in as <code>null</code>, so that the
<code>Object</code> is created automatically and is the
correct primitive data type.
<p>
The following code illustrates transferring data for one pixel from
<code>DataBuffer</code> <code>db1</code>, whose storage layout is
described by <code>MultiPixelPackedSampleModel</code>
<code>mppsm1</code>, to <code>DataBuffer</code> <code>db2</code>,
whose storage layout is described by
<code>MultiPixelPackedSampleModel</code> <code>mppsm2</code>.
The transfer is generally more efficient than using
<code>getPixel</code> or <code>setPixel</code>.
<pre>
      MultiPixelPackedSampleModel mppsm1, mppsm2;
      DataBufferInt db1, db2;
      mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,
                             db1), db2);
</pre>
Using <code>getDataElements</code> or <code>setDataElements</code>
to transfer between two <code>DataBuffer/SampleModel</code> pairs
is legitimate if the <code>SampleModels</code> have the same number
of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
If <code>obj</code> is not <code>null</code>, it should be a
primitive array of type TransferType.  Otherwise, a
<code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if the
coordinates are not in bounds, or if <code>obj</code> is not
<code>null</code> and is not large enough to hold the pixel data.
@param x the X coordinate of the specified pixel
@param y the Y coordinate of the specified pixel
@param obj a primitive array in which to return the pixel data or
         <code>null</code>.
@param data the <code>DataBuffer</code> containing the image data.
@return an <code>Object</code> containing data for the specified
 pixel.
@exception ClassCastException if <code>obj</code> is not a
 primitive array of type TransferType or is not <code>null</code>
@exception ArrayIndexOutOfBoundsException if the coordinates are
not in bounds, or if <code>obj</code> is not <code>null</code> or
not large enough to hold the pixel data
@see #setDataElements(int, int, Object, DataBuffer)
"
      end

      operation 6682626 "getPixel"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the specified single band pixel in the first element
of an <code>int</code> array.
<code>ArrayIndexOutOfBoundsException</code> is thrown if the
coordinates are not in bounds.
@param x the X coordinate of the specified pixel
@param y the Y coordinate of the specified pixel
@param iArray the array containing the pixel to be returned or
 <code>null</code>
@param data the <code>DataBuffer</code> where image data is stored
@return an array containing the specified pixel.
@exception ArrayIndexOutOfBoundsException if the coordinates
 are not in bounds
@see #setPixel(int, int, int[], DataBuffer)
"
      end

      operation 6682754 "setDataElements"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a single pixel in the specified
<code>DataBuffer</code> from a primitive array of type
TransferType.  For a <code>MultiPixelPackedSampleModel</code>,
only the first element of the array holds valid data,
and the type must be the smallest of
DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT
that can hold a single pixel.
<p>
The following code illustrates transferring data for one pixel from
<code>DataBuffer</code> <code>db1</code>, whose storage layout is
described by <code>MultiPixelPackedSampleModel</code>
<code>mppsm1</code>, to <code>DataBuffer</code> <code>db2</code>,
whose storage layout is described by
<code>MultiPixelPackedSampleModel</code> <code>mppsm2</code>.
The transfer is generally more efficient than using
<code>getPixel</code> or <code>setPixel</code>.
<pre>
      MultiPixelPackedSampleModel mppsm1, mppsm2;
      DataBufferInt db1, db2;
      mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,
                             db1), db2);
</pre>
Using <code>getDataElements</code> or <code>setDataElements</code> to
transfer between two <code>DataBuffer/SampleModel</code> pairs is
legitimate if the <code>SampleModel</code> objects have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
<code>obj</code> must be a primitive array of type TransferType.
Otherwise, a <code>ClassCastException</code> is thrown.  An
<code>ArrayIndexOutOfBoundsException</code> is thrown if the
coordinates are not in bounds, or if <code>obj</code> is not large
enough to hold the pixel data.
@param x the X coordinate of the pixel location
@param y the Y coordinate of the pixel location
@param obj a primitive array containing pixel data
@param data the <code>DataBuffer</code> containing the image data
@see #getDataElements(int, int, Object, DataBuffer)
"
      end

      operation 6682882 "setPixel"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the <code>DataBuffer</code> using an
<code>int</code> array for input.
<code>ArrayIndexOutOfBoundsException</code> is thrown if
the coordinates are not in bounds.
@param x the X coordinate of the pixel location
@param y the Y coordinate of the pixel location
@param iArray the input pixel in an <code>int</code> array
@param data the <code>DataBuffer</code> containing the image data
@see #getPixel(int, int, int[], DataBuffer)
"
      end

      operation 6683010 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6683138 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If we implement equals() we must also implement hashCode"
      end
    end

    class 899842 "PixelGrabber"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The PixelGrabber class implements an ImageConsumer which can be attached
to an Image or ImageProducer object to retrieve a subset of the pixels
in that image.  Here is an example:
<pre>{@code

public void handlesinglepixel(int x, int y, int pixel) {
     int alpha = (pixel >> 24) & 0xff;
     int red   = (pixel >> 16) & 0xff;
     int green = (pixel >>  8) & 0xff;
     int blue  = (pixel      ) & 0xff;
     // Deal with the pixel as necessary...
}

public void handlepixels(Image img, int x, int y, int w, int h) {
     int[] pixels = new int[w * h];
     PixelGrabber pg = new PixelGrabber(img, x, y, w, h, pixels, 0, w);
     try {
         pg.grabPixels();
     } catch (InterruptedException e) {
         System.err.println(\"interrupted waiting for pixels!\");
         return;
     }
     if ((pg.getStatus() & ImageObserver.ABORT) != 0) {
         System.err.println(\"image fetch aborted or errored\");
         return;
     }
     for (int j = 0; j < h; j++) {
         for (int i = 0; i < w; i++) {
             handlesinglepixel(x+i, y+j, pixels[j * w + i]);
         }
     }
}

}</pre>

@see ColorModel#getRGBdefault

@author      Jim Graham
"
      classrelation 3075202 // <realization>
	relation 3075202 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3075202 // <realization>
	  b parent class_ref 380034 // ImageConsumer
      end

      classrelation 3075330 // producer (<unidirectional association>)
	relation 3075330 --->
	  a role_name "producer" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3075330 // producer (<unidirectional association>)
	  b parent class_ref 344066 // ImageProducer
      end

      attribute 1619074 "dstX"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1619202 "dstY"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1619330 "dstW"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1619458 "dstH"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3075458 // imageModel (<unidirectional association>)
	relation 3075458 --->
	  a role_name "imageModel" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3075458 // imageModel (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      attribute 1619586 "bytePixels"
	package explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1619714 "intPixels"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1619842 "dstOff"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1619970 "dstScan"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1620098 "grabbing"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1620226 "flags"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1620354 "GRABBEDBITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " (ImageObserver.FRAMEBITS
                                            | ImageObserver.ALLBITS)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1620482 "DONEBITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " (GRABBEDBITS
                                         | ImageObserver.ERROR)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6683266 "PixelGrabber"
	public explicit_return_type ""
	nparams 8
	  param inout name "img" type class_ref 340098 // Image
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "pix" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a PixelGrabber object to grab the (x, y, w, h) rectangular
section of pixels from the specified image into the given array.
The pixels are stored into the array in the default RGB ColorModel.
The RGB data for pixel (i, j) where (i, j) is inside the rectangle
(x, y, w, h) is stored in the array at
<tt>pix[(j - y) * scansize + (i - x) + off]</tt>.
@see ColorModel#getRGBdefault
@param img the image to retrieve pixels from
@param x the x coordinate of the upper left corner of the rectangle
of pixels to retrieve from the image, relative to the default
(unscaled) size of the image
@param y the y coordinate of the upper left corner of the rectangle
of pixels to retrieve from the image
@param w the width of the rectangle of pixels to retrieve
@param h the height of the rectangle of pixels to retrieve
@param pix the array of integers which are to be used to hold the
RGB pixels retrieved from the image
@param off the offset into the array of where to store the first pixel
@param scansize the distance from one row of pixels to the next in
the array
"
      end

      operation 6683394 "PixelGrabber"
	public explicit_return_type ""
	nparams 8
	  param inout name "ip" type class_ref 344066 // ImageProducer
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "pix" explicit_type "int"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "scansize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a PixelGrabber object to grab the (x, y, w, h) rectangular
section of pixels from the image produced by the specified
ImageProducer into the given array.
The pixels are stored into the array in the default RGB ColorModel.
The RGB data for pixel (i, j) where (i, j) is inside the rectangle
(x, y, w, h) is stored in the array at
<tt>pix[(j - y) * scansize + (i - x) + off]</tt>.
@param ip the <code>ImageProducer</code> that produces the
image from which to retrieve pixels
@param x the x coordinate of the upper left corner of the rectangle
of pixels to retrieve from the image, relative to the default
(unscaled) size of the image
@param y the y coordinate of the upper left corner of the rectangle
of pixels to retrieve from the image
@param w the width of the rectangle of pixels to retrieve
@param h the height of the rectangle of pixels to retrieve
@param pix the array of integers which are to be used to hold the
RGB pixels retrieved from the image
@param off the offset into the array of where to store the first pixel
@param scansize the distance from one row of pixels to the next in
the array
@see ColorModel#getRGBdefault
"
      end

      operation 6683522 "PixelGrabber"
	public explicit_return_type ""
	nparams 6
	  param inout name "img" type class_ref 340098 // Image
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "forceRGB" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a PixelGrabber object to grab the (x, y, w, h) rectangular
section of pixels from the specified image.  The pixels are
accumulated in the original ColorModel if the same ColorModel
is used for every call to setPixels, otherwise the pixels are
accumulated in the default RGB ColorModel.  If the forceRGB
parameter is true, then the pixels will be accumulated in the
default RGB ColorModel anyway.  A buffer is allocated by the
PixelGrabber to hold the pixels in either case.  If {@code (w < 0)} or
{@code (h < 0)}, then they will default to the remaining width and
height of the source data when that information is delivered.
@param img the image to retrieve the image data from
@param x the x coordinate of the upper left corner of the rectangle
of pixels to retrieve from the image, relative to the default
(unscaled) size of the image
@param y the y coordinate of the upper left corner of the rectangle
of pixels to retrieve from the image
@param w the width of the rectangle of pixels to retrieve
@param h the height of the rectangle of pixels to retrieve
@param forceRGB true if the pixels should always be converted to
the default RGB ColorModel
"
      end

      operation 6683650 "startGrabbing"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request the PixelGrabber to start fetching the pixels.
"
      end

      operation 6683778 "abortGrabbing"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request the PixelGrabber to abort the image fetch.
"
      end

      operation 6683906 "grabPixels"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request the Image or ImageProducer to start delivering pixels and
wait for all of the pixels in the rectangle of interest to be
delivered.
@return true if the pixels were successfully grabbed, false on
abort, error or timeout
@exception InterruptedException
           Another thread has interrupted this thread.
"
      end

      operation 6684034 "grabPixels"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "ms" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request the Image or ImageProducer to start delivering pixels and
wait for all of the pixels in the rectangle of interest to be
delivered or until the specified timeout has elapsed.  This method
behaves in the following ways, depending on the value of
<code>ms</code>:
<ul>
<li> If {@code ms == 0}, waits until all pixels are delivered
<li> If {@code ms > 0}, waits until all pixels are delivered
as timeout expires.
<li> If {@code ms < 0}, returns <code>true</code> if all pixels
are grabbed, <code>false</code> otherwise and does not wait.
</ul>
@param ms the number of milliseconds to wait for the image pixels
to arrive before timing out
@return true if the pixels were successfully grabbed, false on
abort, error or timeout
@exception InterruptedException
           Another thread has interrupted this thread.
"
      end

      operation 6684162 "getStatus"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the status of the pixels.  The ImageObserver flags
representing the available pixel information are returned.
@return the bitwise OR of all relevant ImageObserver flags
@see ImageObserver
"
      end

      operation 6684290 "getWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the width of the pixel buffer (after adjusting for image width).
If no width was specified for the rectangle of pixels to grab then
then this information will only be available after the image has
delivered the dimensions.
@return the final width used for the pixel buffer or -1 if the width
is not yet known
@see #getStatus
"
      end

      operation 6684418 "getHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the height of the pixel buffer (after adjusting for image height).
If no width was specified for the rectangle of pixels to grab then
then this information will only be available after the image has
delivered the dimensions.
@return the final height used for the pixel buffer or -1 if the height
is not yet known
@see #getStatus
"
      end

      operation 6684546 "getPixels"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the pixel buffer.  If the PixelGrabber was not constructed
with an explicit pixel buffer to hold the pixels then this method
will return null until the size and format of the image data is
known.
Since the PixelGrabber may fall back on accumulating the data
in the default RGB ColorModel at any time if the source image
uses more than one ColorModel to deliver the data, the array
object returned by this method may change over time until the
image grab is complete.
@return either a byte array or an int array
@see #getStatus
@see #setPixels(int, int, int, int, ColorModel, byte[], int, int)
@see #setPixels(int, int, int, int, ColorModel, int[], int, int)
"
      end

      operation 6684674 "getColorModel"
	public return_type class_ref 312066 // ColorModel
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the ColorModel for the pixels stored in the array.  If the
PixelGrabber was constructed with an explicit pixel buffer then
this method will always return the default RGB ColorModel,
otherwise it may return null until the ColorModel used by the
ImageProducer is known.
Since the PixelGrabber may fall back on accumulating the data
in the default RGB ColorModel at any time if the source image
uses more than one ColorModel to deliver the data, the ColorModel
object returned by this method may change over time until the
image grab is complete and may not reflect any of the ColorModel
objects that was used by the ImageProducer to deliver the pixels.
@return the ColorModel object used for storing the pixels
@see #getStatus
@see ColorModel#getRGBdefault
@see #setColorModel(ColorModel)
"
      end

      operation 6684802 "setDimensions"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The setDimensions method is part of the ImageConsumer API which
this class must implement to retrieve the pixels.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being grabbed.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param width the width of the dimension
@param height the height of the dimension
"
      end

      operation 6684930 "setHints"
	public explicit_return_type "void"
	nparams 1
	  param in name "hints" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The setHints method is part of the ImageConsumer API which
this class must implement to retrieve the pixels.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being grabbed.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param hints a set of hints used to process the pixels
"
      end

      operation 6685058 "setProperties"
	public explicit_return_type "void"
	nparams 1
	  param inout name "props" type class_ref 137090 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The setProperties method is part of the ImageConsumer API which
this class must implement to retrieve the pixels.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being grabbed.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param props the list of properties
"
      end

      operation 6685186 "setColorModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "model" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The setColorModel method is part of the ImageConsumer API which
this class must implement to retrieve the pixels.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being grabbed.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param model the specified <code>ColorModel</code>
@see #getColorModel
"
      end

      operation 6685314 "convertToRGB"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6685442 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "srcX" explicit_type "int"
	  param in name "srcY" explicit_type "int"
	  param in name "srcW" explicit_type "int"
	  param in name "srcH" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "byte"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param in name "srcScan" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The setPixels method is part of the ImageConsumer API which
this class must implement to retrieve the pixels.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being grabbed.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param srcX the X coordinate of the upper-left corner
       of the area of pixels to be set
@param srcY the Y coordinate of the upper-left corner
       of the area of pixels to be set
@param srcW the width of the area of pixels
@param srcH the height of the area of pixels
@param model the specified <code>ColorModel</code>
@param pixels the array of pixels
@param srcOff the offset into the pixels array
@param srcScan the distance from one row of pixels to the next
       in the pixels array
@see #getPixels
"
      end

      operation 6685570 "setPixels"
	public explicit_return_type "void"
	nparams 8
	  param in name "srcX" explicit_type "int"
	  param in name "srcY" explicit_type "int"
	  param in name "srcW" explicit_type "int"
	  param in name "srcH" explicit_type "int"
	  param inout name "model" type class_ref 312066 // ColorModel
	  param inout name "pixels" explicit_type "int"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param in name "srcScan" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The setPixels method is part of the ImageConsumer API which
this class must implement to retrieve the pixels.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being grabbed.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param srcX the X coordinate of the upper-left corner
       of the area of pixels to be set
@param srcY the Y coordinate of the upper-left corner
       of the area of pixels to be set
@param srcW the width of the area of pixels
@param srcH the height of the area of pixels
@param model the specified <code>ColorModel</code>
@param pixels the array of pixels
@param srcOff the offset into the pixels array
@param srcScan the distance from one row of pixels to the next
       in the pixels array
@see #getPixels
"
      end

      operation 6685698 "imageComplete"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The imageComplete method is part of the ImageConsumer API which
this class must implement to retrieve the pixels.
<p>
Note: This method is intended to be called by the ImageProducer
of the Image whose pixels are being grabbed.  Developers using
this class to retrieve pixels from an image should avoid calling
this method directly since that operation could result in problems
with retrieving the requested pixels.
@param status the status of image loading
"
      end

      operation 6685826 "status"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the status of the pixels.  The ImageObserver flags
representing the available pixel information are returned.
This method and {@link #getStatus() getStatus} have the
same implementation, but <code>getStatus</code> is the
preferred method because it conforms to the convention of
naming information-retrieval methods with the form
\"getXXX\".
@return the bitwise OR of all relevant ImageObserver flags
@see ImageObserver
@see #getStatus()
"
      end
    end

    class 899970 "PixelInterleavedSampleModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class represents image data which is stored in a pixel interleaved
 fashion and for
 which each sample of a pixel occupies one data element of the DataBuffer.
 It subclasses ComponentSampleModel but provides a more efficient
 implementation for accessing pixel interleaved image data than is provided
 by ComponentSampleModel.  This class
 stores sample data for all bands in a single bank of the
 DataBuffer. Accessor methods are provided so that image data can be
 manipulated directly. Pixel stride is the number of
 data array elements between two samples for the same band on the same
 scanline. Scanline stride is the number of data array elements between
 a given sample and the corresponding sample in the same column of the next
 scanline.  Band offsets denote the number
 of data array elements from the first data array element of the bank
 of the DataBuffer holding each band to the first sample of the band.
 The bands are numbered from 0 to N-1.
 Bank indices denote the correspondence between a bank of the data buffer
 and a band of image data.
 This class supports
 {@link DataBuffer#TYPE_BYTE TYPE_BYTE},
 {@link DataBuffer#TYPE_USHORT TYPE_USHORT},
 {@link DataBuffer#TYPE_SHORT TYPE_SHORT},
 {@link DataBuffer#TYPE_INT TYPE_INT},
 {@link DataBuffer#TYPE_FLOAT TYPE_FLOAT} and
 {@link DataBuffer#TYPE_DOUBLE TYPE_DOUBLE} datatypes.
"
      classrelation 3075586 // <generalisation>
	relation 3075586 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3075586 // <generalisation>
	  b parent class_ref 896898 // ComponentSampleModel
      end

      operation 6685954 "PixelInterleavedSampleModel"
	public explicit_return_type ""
	nparams 6
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "pixelStride" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a PixelInterleavedSampleModel with the specified parameters.
The number of bands will be given by the length of the bandOffsets
array.
@param dataType  The data type for storing samples.
@param w         The width (in pixels) of the region of
                 image data described.
@param h         The height (in pixels) of the region of
                 image data described.
@param pixelStride The pixel stride of the image data.
@param scanlineStride The line stride of the image data.
@param bandOffsets The offsets of all bands.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
@throws IllegalArgumentException if any offset between bands is
        greater than the scanline stride
@throws IllegalArgumentException if the product of
        <code>pixelStride</code> and <code>w</code> is greater
        than <code>scanlineStride</code>
@throws IllegalArgumentException if <code>pixelStride</code> is
        less than any offset between bands
@throws IllegalArgumentException if <code>dataType</code> is not
        one of the supported data types
"
      end

      operation 6686082 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PixelInterleavedSampleModel with the specified
width and height.  The new PixelInterleavedSampleModel will have the
same number of bands, storage data type, and pixel stride
as this PixelInterleavedSampleModel.  The band offsets may be
compressed such that the minimum of all of the band offsets is zero.
@param w the width of the resulting <code>SampleModel</code>
@param h the height of the resulting <code>SampleModel</code>
@return a new <code>SampleModel</code> with the specified width
        and height.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
"
      end

      operation 6686210 "createSubsetSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 1
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PixelInterleavedSampleModel with a subset of the
bands of this PixelInterleavedSampleModel.  The new
PixelInterleavedSampleModel can be used with any DataBuffer that the
existing PixelInterleavedSampleModel can be used with.  The new
PixelInterleavedSampleModel/DataBuffer combination will represent
an image with a subset of the bands of the original
PixelInterleavedSampleModel/DataBuffer combination.
"
      end

      operation 6686338 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Differentiate hash code from other ComponentSampleModel subclasses"
      end
    end

    class 900098 "RasterFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>RasterFormatException</code> is thrown if there is
invalid layout information in the {@link Raster}.
"
      classrelation 3076098 // <generalisation>
	relation 3076098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3076098 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 6692866 "RasterFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>RasterFormatException</code> with the
specified message.
@param s the message to generate when a
<code>RasterFormatException</code> is thrown
"
      end
    end

    class 900226 "RescaleOp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class performs a pixel-by-pixel rescaling of the data in the
source image by multiplying the sample values for each pixel by a scale
factor and then adding an offset. The scaled sample values are clipped
to the minimum/maximum representable in the destination image.
<p>
The pseudo code for the rescaling operation is as follows:
<pre>
for each pixel from Source object {
   for each band/component of the pixel {
       dstElement = (srcElement*scaleFactor) + offset
   }
}
</pre>
<p>
For Rasters, rescaling operates on bands.  The number of
sets of scaling constants may be one, in which case the same constants
are applied to all bands, or it must equal the number of Source
Raster bands.
<p>
For BufferedImages, rescaling operates on color and alpha components.
The number of sets of scaling constants may be one, in which case the
same constants are applied to all color (but not alpha) components.
Otherwise, the  number of sets of scaling constants may
equal the number of Source color components, in which case no
rescaling of the alpha component (if present) is performed.
If neither of these cases apply, the number of sets of scaling constants
must equal the number of Source color components plus alpha components,
in which case all color and alpha components are rescaled.
<p>
BufferedImage sources with premultiplied alpha data are treated in the same
manner as non-premultiplied images for purposes of rescaling.  That is,
the rescaling is done per band on the raw data of the BufferedImage source
without regard to whether the data is premultiplied.  If a color conversion
is required to the destination ColorModel, the premultiplied state of
both source and destination will be taken into account for this step.
<p>
Images with an IndexColorModel cannot be rescaled.
<p>
If a RenderingHints object is specified in the constructor, the
color rendering hint and the dithering hint may be used when color
conversion is required.
<p>
Note that in-place operation is allowed (i.e. the source and destination can
be the same object).
@see java.awt.RenderingHints#KEY_COLOR_RENDERING
@see java.awt.RenderingHints#KEY_DITHERING
"
      classrelation 3076226 // <realization>
	relation 3076226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3076226 // <realization>
	  b parent class_ref 867202 // BufferedImageOp
      end

      classrelation 3076354 // <realization>
	relation 3076354 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3076354 // <realization>
	  b parent class_ref 896258 // RasterOp
      end

      attribute 1621634 "scaleFactors"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1621762 "offsets"
	package explicit_type "float"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1621890 "length"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3076482 // hints (<unidirectional association>)
	relation 3076482 --->
	  a role_name "hints" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3076482 // hints (<unidirectional association>)
	  b parent class_ref 856578 // RenderingHints
      end

      attribute 1622018 "srcNbits"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1622146 "dstNbits"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6692994 "RescaleOp"
	public explicit_return_type ""
	nparams 3
	  param inout name "scaleFactors" explicit_type "float"
	multiplicity "[]"
	  param inout name "offsets" explicit_type "float"
	multiplicity "[]"
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new RescaleOp with the desired scale factors
and offsets.  The length of the scaleFactor and offset arrays
must meet the restrictions stated in the class comments above.
The RenderingHints argument may be null.
@param scaleFactors the specified scale factors
@param offsets the specified offsets
@param hints the specified <code>RenderingHints</code>, or
       <code>null</code>
"
      end

      operation 6693122 "RescaleOp"
	public explicit_return_type ""
	nparams 3
	  param in name "scaleFactor" explicit_type "float"
	  param in name "offset" explicit_type "float"
	  param inout name "hints" type class_ref 856578 // RenderingHints
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new RescaleOp with the desired scale factor
and offset.  The scaleFactor and offset will be applied to
all bands in a source Raster and to all color (but not alpha)
components in a BufferedImage.
The RenderingHints argument may be null.
@param scaleFactor the specified scale factor
@param offset the specified offset
@param hints the specified <code>RenderingHints</code>, or
       <code>null</code>
"
      end

      operation 6693250 "getScaleFactors"
	public explicit_return_type "float"
	nparams 1
	  param inout name "scaleFactors" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the scale factors in the given array. The array is also
returned for convenience.  If scaleFactors is null, a new array
will be allocated.
@param scaleFactors the array to contain the scale factors of
       this <code>RescaleOp</code>
@return the scale factors of this <code>RescaleOp</code>.
"
      end

      operation 6693378 "getOffsets"
	public explicit_return_type "float"
	nparams 1
	  param inout name "offsets" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offsets in the given array. The array is also returned
for convenience.  If offsets is null, a new array
will be allocated.
@param offsets the array to contain the offsets of
       this <code>RescaleOp</code>
@return the offsets of this <code>RescaleOp</code>.
"
      end

      operation 6693506 "getNumFactors"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of scaling factors and offsets used in this
RescaleOp.
@return the number of scaling factors and offsets of this
        <code>RescaleOp</code>.
"
      end

      operation 6693634 "createByteLut"
	private return_type class_ref 897538 // ByteLookupTable
	nparams 4
	  param inout name "scale" explicit_type "float"
	multiplicity "[]"
	  param inout name "off" explicit_type "float"
	multiplicity "[]"
	  param in name "nBands" explicit_type "int"
	  param in name "nElems" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ByteLookupTable to implement the rescale.
The table may have either a SHORT or BYTE input.
@param nElems    Number of elements the table is to have.
                 This will generally be 256 for byte and
                 65536 for short.
"
      end

      operation 6693762 "createShortLut"
	private return_type class_ref 899458 // ShortLookupTable
	nparams 4
	  param inout name "scale" explicit_type "float"
	multiplicity "[]"
	  param inout name "off" explicit_type "float"
	multiplicity "[]"
	  param in name "nBands" explicit_type "int"
	  param in name "nElems" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ShortLookupTable to implement the rescale.
The table may have either a SHORT or BYTE input.
@param nElems    Number of elements the table is to have.
                 This will generally be 256 for byte and
                 65536 for short.
"
      end

      operation 6693890 "canUseLookup"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the rescale can be performed as a lookup.
The dst must be a byte or short type.
The src must be less than 16 bits.
All source band sizes must be the same and all dst band sizes
must be the same.
"
      end

      operation 6694018 "filter"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "dst" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rescales the source BufferedImage.
If the color model in the source image is not the same as that
in the destination image, the pixels will be converted
in the destination.  If the destination image is null,
a BufferedImage will be created with the source ColorModel.
An IllegalArgumentException may be thrown if the number of
scaling factors/offsets in this object does not meet the
restrictions stated in the class comments above, or if the
source image has an IndexColorModel.
@param src the <code>BufferedImage</code> to be filtered
@param dst the destination for the filtering operation
           or <code>null</code>
@return the filtered <code>BufferedImage</code>.
@throws IllegalArgumentException if the <code>ColorModel</code>
        of <code>src</code> is an <code>IndexColorModel</code>,
        or if the number of scaling factors and offsets in this
        <code>RescaleOp</code> do not meet the requirements
        stated in the class comments.
"
      end

      operation 6694146 "filter"
	public return_type class_ref 322690 // WritableRaster
	nparams 2
	  param inout name "src" type class_ref 311682 // Raster
	  param inout name "dst" type class_ref 322690 // WritableRaster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rescales the pixel data in the source Raster.
If the destination Raster is null, a new Raster will be created.
The source and destination must have the same number of bands.
Otherwise, an IllegalArgumentException is thrown.
Note that the number of scaling factors/offsets in this object must
meet the restrictions stated in the class comments above.
Otherwise, an IllegalArgumentException is thrown.
@param src the <code>Raster</code> to be filtered
@param dst the destination for the filtering operation
           or <code>null</code>
@return the filtered <code>WritableRaster</code>.
@throws IllegalArgumentException if <code>src</code> and
        <code>dst</code> do not have the same number of bands,
        or if the number of scaling factors and offsets in this
        <code>RescaleOp</code> do not meet the requirements
        stated in the class comments.
"
      end

      operation 6694274 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the rescaled destination image.  Since
this is not a geometric operation, the bounding box does not
change.
"
      end

      operation 6694402 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounding box of the rescaled destination Raster.  Since
this is not a geometric operation, the bounding box does not
change.
@param src the rescaled destination <code>Raster</code>
@return the bounds of the specified <code>Raster</code>.
"
      end

      operation 6694530 "createCompatibleDestImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param inout name "src" type class_ref 311554 // BufferedImage
	  param inout name "destCM" type class_ref 312066 // ColorModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed destination image with the correct size and number of
bands.
@param src       Source image for the filter operation.
@param destCM    ColorModel of the destination.  If null, the
                 ColorModel of the source will be used.
@return the zeroed-destination image.
"
      end

      operation 6694658 "createCompatibleDestRaster"
	public return_type class_ref 322690 // WritableRaster
	nparams 1
	  param inout name "src" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a zeroed-destination <code>Raster</code> with the correct
size and number of bands, given this source.
@param src       the source <code>Raster</code>
@return the zeroed-destination <code>Raster</code>.
"
      end

      operation 6694786 "getPoint2D"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "srcPt" type class_ref 380802 // Point2D
	  param inout name "dstPt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of the destination point given a
point in the source.  If dstPt is non-null, it will
be used to hold the return value.  Since this is not a geometric
operation, the srcPt will equal the dstPt.
@param srcPt a point in the source image
@param dstPt the destination point or <code>null</code>
@return the location of the destination point.
"
      end

      operation 6694914 "getRenderingHints"
	public return_type class_ref 856578 // RenderingHints
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rendering hints for this op.
@return the rendering hints of this <code>RescaleOp</code>.
"
      end
    end

    class 900354 "SinglePixelPackedSampleModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class represents pixel data packed such that the N samples which make
 up a single pixel are stored in a single data array element, and each data
 data array element holds samples for only one pixel.
 This class supports
 {@link DataBuffer#TYPE_BYTE TYPE_BYTE},
 {@link DataBuffer#TYPE_USHORT TYPE_USHORT},
 {@link DataBuffer#TYPE_INT TYPE_INT} data types.
 All data array elements reside
 in the first bank of a DataBuffer.  Accessor methods are provided so
 that the image data can be manipulated directly. Scanline stride is the
 number of data array elements between a given sample and the corresponding
 sample in the same column of the next scanline. Bit masks are the masks
 required to extract the samples representing the bands of the pixel.
 Bit offsets are the offsets in bits into the data array
 element of the samples representing the bands of the pixel.
<p>
The following code illustrates extracting the bits of the sample
representing band <code>b</code> for pixel <code>x,y</code>
from DataBuffer <code>data</code>:
<pre>{@code
     int sample = data.getElem(y * scanlineStride + x);
     sample = (sample & bitMasks[b]) >>> bitOffsets[b];
}</pre>
"
      classrelation 3076738 // <generalisation>
	relation 3076738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3076738 // <generalisation>
	  b parent class_ref 314370 // SampleModel
      end

      attribute 1622402 "bitMasks"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit masks for all bands of the image data. 
"
      end

      attribute 1622530 "bitOffsets"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit Offsets for all bands of the image data. 
"
      end

      attribute 1622658 "bitSizes"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit sizes for all the bands of the image data. 
"
      end

      attribute 1622786 "maxBitSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum bit size. 
"
      end

      attribute 1622914 "scanlineStride"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Line stride of the region of image data described by this
 SinglePixelPackedSampleModel.

"
      end

      operation 6695682 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 154626 "initialization"
	
	cpp "" ""
	java "  static {
        ColorModel.loadLibraries();
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6695810 "SinglePixelPackedSampleModel"
	public explicit_return_type ""
	nparams 4
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "bitMasks" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SinglePixelPackedSampleModel with bitMasks.length bands.
Each sample is stored in a data array element in the position of
its corresponding bit mask.  Each bit mask must be contiguous and
masks must not overlap. Bit masks exceeding data type capacity are
truncated.
@param dataType  The data type for storing samples.
@param w         The width (in pixels) of the region of the
                 image data described.
@param h         The height (in pixels) of the region of the
                 image data described.
@param bitMasks  The bit masks for all bands.
@throws IllegalArgumentException if <code>dataType</code> is not
        either <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>, or
        <code>DataBuffer.TYPE_INT</code>
"
      end

      operation 6695938 "SinglePixelPackedSampleModel"
	public explicit_return_type ""
	nparams 5
	  param in name "dataType" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "scanlineStride" explicit_type "int"
	  param inout name "bitMasks" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SinglePixelPackedSampleModel with bitMasks.length bands
and a scanline stride equal to scanlineStride data array elements.
Each sample is stored in a data array element in the position of
its corresponding bit mask.  Each bit mask must be contiguous and
masks must not overlap. Bit masks exceeding data type capacity are
truncated.
@param dataType  The data type for storing samples.
@param w         The width (in pixels) of the region of
                 image data described.
@param h         The height (in pixels) of the region of
                 image data described.
@param scanlineStride The line stride of the image data.
@param bitMasks The bit masks for all bands.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
@throws IllegalArgumentException if any mask in
        <code>bitMask</code> is not contiguous
@throws IllegalArgumentException if <code>dataType</code> is not
        either <code>DataBuffer.TYPE_BYTE</code>,
        <code>DataBuffer.TYPE_USHORT</code>, or
        <code>DataBuffer.TYPE_INT</code>
"
      end

      operation 6696066 "getNumDataElements"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of data elements needed to transfer one pixel
via the getDataElements and setDataElements methods.
For a SinglePixelPackedSampleModel, this is one.
"
      end

      operation 6696194 "getBufferSize"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the buffer (in data array elements)
needed for a data buffer that matches this
SinglePixelPackedSampleModel.
"
      end

      operation 6696322 "createCompatibleSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SinglePixelPackedSampleModel with the specified
width and height.  The new SinglePixelPackedSampleModel will have the
same storage data type and bit masks as this
SinglePixelPackedSampleModel.
@param w the width of the resulting <code>SampleModel</code>
@param h the height of the resulting <code>SampleModel</code>
@return a <code>SinglePixelPackedSampleModel</code> with the
        specified width and height.
@throws IllegalArgumentException if <code>w</code> or
        <code>h</code> is not greater than 0
"
      end

      operation 6696450 "createDataBuffer"
	public return_type class_ref 897026 // DataBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DataBuffer that corresponds to this
SinglePixelPackedSampleModel.  The DataBuffer's data type and size
will be consistent with this SinglePixelPackedSampleModel.  The
DataBuffer will have a single bank.
"
      end

      operation 6696578 "getSampleSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of bits per sample for all bands. "
      end

      operation 6696706 "getSampleSize"
	public explicit_return_type "int"
	nparams 1
	  param in name "band" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of bits per sample for the specified band. "
      end

      operation 6696834 "getOffset"
	public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the offset (in data array elements) of pixel (x,y).
 The data element containing pixel <code>x,y</code>
 can be retrieved from a DataBuffer <code>data</code> with a
 SinglePixelPackedSampleModel <code>sppsm</code> as:
<pre>
       data.getElem(sppsm.getOffset(x, y));
</pre>
@param x the X coordinate of the specified pixel
@param y the Y coordinate of the specified pixel
@return the offset of the specified pixel.
"
      end

      operation 6696962 "getBitOffsets"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the bit offsets into the data array element representing
 a pixel for all bands.
 @return the bit offsets representing a pixel for all bands.
"
      end

      operation 6697090 "getBitMasks"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the bit masks for all bands.
 @return the bit masks for all bands.
"
      end

      operation 6697218 "getScanlineStride"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the scanline stride of this SinglePixelPackedSampleModel.
 @return the scanline stride of this
         <code>SinglePixelPackedSampleModel</code>.
"
      end

      operation 6697346 "createSubsetSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 1
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This creates a new SinglePixelPackedSampleModel with a subset of the
bands of this SinglePixelPackedSampleModel.  The new
SinglePixelPackedSampleModel can be used with any DataBuffer that the
existing SinglePixelPackedSampleModel can be used with.  The new
SinglePixelPackedSampleModel/DataBuffer combination will represent
an image with a subset of the bands of the original
SinglePixelPackedSampleModel/DataBuffer combination.
@exception RasterFormatException if the length of the bands argument is
                                 greater than the number of bands in
                                 the sample model.
"
      end

      operation 6697474 "getDataElements"
	public return_type class_ref 129538 // Object
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns data for a single pixel in a primitive array of type
TransferType.  For a SinglePixelPackedSampleModel, the array will
have one element, and the type will be the same as the storage
data type.  Generally, obj
should be passed in as null, so that the Object will be created
automatically and will be of the right primitive data type.
<p>
The following code illustrates transferring data for one pixel from
DataBuffer <code>db1</code>, whose storage layout is described by
SinglePixelPackedSampleModel <code>sppsm1</code>, to
DataBuffer <code>db2</code>, whose storage layout is described by
SinglePixelPackedSampleModel <code>sppsm2</code>.
The transfer will generally be more efficient than using
getPixel/setPixel.
<pre>
      SinglePixelPackedSampleModel sppsm1, sppsm2;
      DataBufferInt db1, db2;
      sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,
                             db1), db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
If obj is non-null, it should be a primitive array of type TransferType.
Otherwise, a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is non-null and is not large enough to hold
the pixel data.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param obj       If non-null, a primitive array in which to return
                 the pixel data.
@param data      The DataBuffer containing the image data.
@return the data for the specified pixel.
@see #setDataElements(int, int, Object, DataBuffer)
"
      end

      operation 6697602 "getPixel"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples in for the specified pixel in an int array.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param iArray    If non-null, returns the samples in this array
@param data      The DataBuffer containing the image data.
@return all samples for the specified pixel.
@see #setPixel(int, int, int[], DataBuffer)
"
      end

      operation 6697730 "getPixels"
	public explicit_return_type "int"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all samples for the specified rectangle of pixels in
an int array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param iArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return all samples for the specified region of pixels.
@see #setPixels(int, int, int, int, int[], DataBuffer)
"
      end

      operation 6697858 "getSample"
	public explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns as int the sample in a specified band for the pixel
located at (x,y).
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to return.
@param data      The DataBuffer containing the image data.
@return the sample in a specified band for the specified
        pixel.
@see #setSample(int, int, int, int, DataBuffer)
"
      end

      operation 6697986 "getSamples"
	public explicit_return_type "int"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the samples for a specified band for the specified rectangle
of pixels in an int array, one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to return.
@param iArray    If non-null, returns the samples in this array.
@param data      The DataBuffer containing the image data.
@return the samples for the specified band for the specified
        region of pixels.
@see #setSamples(int, int, int, int, int, int[], DataBuffer)
"
      end

      operation 6698114 "setDataElements"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for a single pixel in the specified DataBuffer from a
primitive array of type TransferType.  For a
SinglePixelPackedSampleModel, only the first element of the array
will hold valid data, and the type of the array must be the same as
the storage data type of the SinglePixelPackedSampleModel.
<p>
The following code illustrates transferring data for one pixel from
DataBuffer <code>db1</code>, whose storage layout is described by
SinglePixelPackedSampleModel <code>sppsm1</code>,
to DataBuffer <code>db2</code>, whose storage layout is described by
SinglePixelPackedSampleModel <code>sppsm2</code>.
The transfer will generally be more efficient than using
getPixel/setPixel.
<pre>
      SinglePixelPackedSampleModel sppsm1, sppsm2;
      DataBufferInt db1, db2;
      sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,
                             db1), db2);
</pre>
Using getDataElements/setDataElements to transfer between two
DataBuffer/SampleModel pairs is legitimate if the SampleModels have
the same number of bands, corresponding bands have the same number of
bits per sample, and the TransferTypes are the same.
<p>
obj must be a primitive array of type TransferType.  Otherwise,
a ClassCastException is thrown.  An
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds, or if obj is not large enough to hold the pixel data.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param obj       A primitive array containing pixel data.
@param data      The DataBuffer containing the image data.
@see #getDataElements(int, int, Object, DataBuffer)
"
      end

      operation 6698242 "setPixel"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a pixel in the DataBuffer using an int array of samples for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param iArray    The input samples in an int array.
@param data      The DataBuffer containing the image data.
@see #getPixel(int, int, int[], DataBuffer)
"
      end

      operation 6698370 "setPixels"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all samples for a rectangle of pixels from an int array containing
one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param iArray    The input samples in an int array.
@param data      The DataBuffer containing the image data.
@see #getPixels(int, int, int, int, int[], DataBuffer)
"
      end

      operation 6698498 "setSample"
	public explicit_return_type "void"
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "s" explicit_type "int"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a sample in the specified band for the pixel located at (x,y)
in the DataBuffer using an int for input.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the pixel location.
@param y         The Y coordinate of the pixel location.
@param b         The band to set.
@param s         The input sample as an int.
@param data      The DataBuffer containing the image data.
@see #getSample(int, int, int, DataBuffer)
"
      end

      operation 6698626 "setSamples"
	public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param inout name "iArray" explicit_type "int"
	multiplicity "[]"
	  param inout name "data" type class_ref 897026 // DataBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the samples in the specified band for the specified rectangle
of pixels from an int array containing one sample per array element.
ArrayIndexOutOfBoundsException may be thrown if the coordinates are
not in bounds.
@param x         The X coordinate of the upper left pixel location.
@param y         The Y coordinate of the upper left pixel location.
@param w         The width of the pixel rectangle.
@param h         The height of the pixel rectangle.
@param b         The band to set.
@param iArray    The input samples in an int array.
@param data      The DataBuffer containing the image data.
@see #getSamples(int, int, int, int, int, int[], DataBuffer)
"
      end

      operation 6698754 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6698882 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If we implement equals() we must also implement hashCode"
      end
    end
  end

  deploymentview 141570 "image"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 270978 "ImageObserver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Image;
${definition}"
      associated_elems
	class_ref 339970 // ImageObserver
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 271234 "BufferStrategy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.BufferCapabilities;
import java.awt.Graphics;
import java.awt.Image;
${definition}"
      associated_elems
	class_ref 341122 // BufferStrategy
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 280322 "ImageConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 380034 // ImageConsumer
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 280450 "ImageFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 379906 // ImageFilter
      end
      comment "Copyright (c) 1995, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 280578 "RGBImageFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.ImageConsumer;
import java.awt.image.ColorModel;
${definition}"
      associated_elems
	class_ref 379778 // RGBImageFilter
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 645634 "BufferedImageOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.Rectangle2D;
import java.awt.geom.Point2D;
import java.awt.RenderingHints;
${definition}"
      associated_elems
	class_ref 867202 // BufferedImageOp
      end
      comment "Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 645762 "RasterOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.Rectangle2D;
import java.awt.geom.Point2D;
import java.awt.RenderingHints;
${definition}"
      associated_elems
	class_ref 896258 // RasterOp
      end
      comment "Copyright (c) 1997, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 645890 "AffineTransformOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Point2D;
import java.awt.AlphaComposite;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.lang.annotation.Native;
import sun.awt.image.ImagingLib;
${definition}"
      associated_elems
	class_ref 896130 // AffineTransformOp
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 646018 "ReplicateScaleFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.ImageConsumer;
import java.awt.image.ColorModel;
import java.util.Hashtable;
import java.awt.Rectangle;
${definition}"
      associated_elems
	class_ref 896514 // ReplicateScaleFilter
      end
      comment "Copyright (c) 1996, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 646146 "AreaAveragingScaleFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.ImageConsumer;
import java.awt.image.ColorModel;
import java.util.Hashtable;
import java.awt.Rectangle;
${definition}"
      associated_elems
	class_ref 896386 // AreaAveragingScaleFilter
      end
      comment "Copyright (c) 1996, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 646274 "BandCombineOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.GraphicsEnvironment;
import java.awt.color.ICC_Profile;
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.RenderingHints;
import sun.awt.image.ImagingLib;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 896642 // BandCombineOp
      end
      comment "Copyright (c) 1997, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 646402 "SampleModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 314370 // SampleModel
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 646530 "ComponentSampleModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 896898 // ComponentSampleModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 646658 "BandedSampleModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 896770 // BandedSampleModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 646786 "RenderedImage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Rectangle;
import java.util.Dictionary;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 313986 // RenderedImage
      end
      comment "Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 646914 "WritableRenderedImage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Point;
${definition}"
      associated_elems
	class_ref 897154 // WritableRenderedImage
      end
      comment "Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 647042 "BufferedImage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Hashtable;
import java.util.Set;
import java.util.Vector;
import sun.awt.image.ByteComponentRaster;
import sun.awt.image.BytePackedRaster;
import sun.awt.image.IntegerComponentRaster;
import sun.awt.image.OffScreenImageSource;
import sun.awt.image.ShortComponentRaster;
${definition}"
      associated_elems
	class_ref 311554 // BufferedImage
      end
      comment "Copyright (c) 1997, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 647170 "BufferedImageFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import java.awt.image.ImageConsumer;
import java.awt.image.ImageFilter;
${definition}"
      associated_elems
	class_ref 897410 // BufferedImageFilter
      end
      comment "Copyright (c) 1997, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 647298 "LookupTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 897666 // LookupTable
      end
      comment "Copyright (c) 1997, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 647426 "ByteLookupTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 897538 // ByteLookupTable
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 647554 "ColorConvertOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Point;
import java.awt.Graphics2D;
import java.awt.color.*;
import sun.java2d.cmm.ColorTransform;
import sun.java2d.cmm.CMSManager;
import sun.java2d.cmm.ProfileDeferralMgr;
import sun.java2d.cmm.PCMM;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Point2D;
import java.awt.RenderingHints;
${definition}"
      associated_elems
	class_ref 330882 // ColorConvertOp
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















*********************************************************************
*********************************************************************
*********************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***
** As  an unpublished  work pursuant to Title 17 of the United    ***
** States Code.  All rights reserved.                             ***
*********************************************************************
*********************************************************************
********************************************************************"
    end

    artifact 647682 "ColorModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import sun.java2d.cmm.CMSManager;
import sun.java2d.cmm.ColorTransform;
import sun.java2d.cmm.PCMM;
import java.awt.Toolkit;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
${definition}"
      associated_elems
	class_ref 312066 // ColorModel
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 647810 "ComponentColorModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
${definition}"
      associated_elems
	class_ref 897794 // ComponentColorModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 647938 "ConvolveOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.color.ICC_Profile;
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.lang.annotation.Native;
import sun.awt.image.ImagingLib;
${definition}"
      associated_elems
	class_ref 897922 // ConvolveOp
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 648066 "CropImageFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.ImageConsumer;
import java.awt.image.ColorModel;
import java.util.Hashtable;
import java.awt.Rectangle;
${definition}"
      associated_elems
	class_ref 898178 // CropImageFilter
      end
      comment "Copyright (c) 1995, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 648194 "DataBuffer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.java2d.StateTrackable.State;
import sun.java2d.StateTrackableDelegate;
import sun.awt.image.SunWritableRaster;
import java.lang.annotation.Native;
import static sun.java2d.StateTrackable.State.*;
${definition}"
      associated_elems
	class_ref 897026 // DataBuffer
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 648322 "DataBufferByte"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static sun.java2d.StateTrackable.State.*;
${definition}"
      associated_elems
	class_ref 331010 // DataBufferByte
      end
      comment "Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 648450 "DataBufferDouble"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static sun.java2d.StateTrackable.State.*;
${definition}"
      associated_elems
	class_ref 898306 // DataBufferDouble
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 648578 "DataBufferFloat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static sun.java2d.StateTrackable.State.*;
${definition}"
      associated_elems
	class_ref 898434 // DataBufferFloat
      end
      comment "Copyright (c) 2000, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 648706 "DataBufferInt"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static sun.java2d.StateTrackable.State.*;
${definition}"
      associated_elems
	class_ref 898562 // DataBufferInt
      end
      comment "Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 648834 "DataBufferShort"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static sun.java2d.StateTrackable.State.*;
${definition}"
      associated_elems
	class_ref 898690 // DataBufferShort
      end
      comment "Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 648962 "DataBufferUShort"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static sun.java2d.StateTrackable.State.*;
${definition}"
      associated_elems
	class_ref 898818 // DataBufferUShort
      end
      comment "Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 649090 "PackedColorModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Transparency;
import java.awt.color.ColorSpace;
${definition}"
      associated_elems
	class_ref 898946 // PackedColorModel
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 649218 "DirectColorModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.color.ColorSpace;
import java.awt.Transparency;
${definition}"
      associated_elems
	class_ref 874882 // DirectColorModel
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 649346 "ImageProducer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 344066 // ImageProducer
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 649474 "FilteredImageSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Image;
import java.awt.image.ImageFilter;
import java.awt.image.ImageConsumer;
import java.awt.image.ImageProducer;
import java.util.Hashtable;
import java.awt.image.ColorModel;
${definition}"
      associated_elems
	class_ref 899074 // FilteredImageSource
      end
      comment "Copyright (c) 1995, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 649602 "ImagingOpException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 899202 // ImagingOpException
      end
      comment "Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 649730 "IndexColorModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.math.BigInteger;
${definition}"
      associated_elems
	class_ref 317058 // IndexColorModel
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 649858 "Kernel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 898050 // Kernel
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 649986 "LookupOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.color.ColorSpace;
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import sun.awt.image.ImagingLib;
${definition}"
      associated_elems
	class_ref 899330 // LookupOp
      end
      comment "Copyright (c) 1997, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 650114 "MemoryImageSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.ImageConsumer;
import java.awt.image.ImageProducer;
import java.awt.image.ColorModel;
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;
${definition}"
      associated_elems
	class_ref 899586 // MemoryImageSource
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 650242 "MultiPixelPackedSampleModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 899714 // MultiPixelPackedSampleModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 650370 "PixelGrabber"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import java.awt.image.ImageProducer;
import java.awt.image.ImageConsumer;
import java.awt.image.ColorModel;
import java.awt.Image;
${definition}"
      associated_elems
	class_ref 899842 // PixelGrabber
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 650498 "PixelInterleavedSampleModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 899970 // PixelInterleavedSampleModel
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 650626 "Raster"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Rectangle;
import java.awt.Point;
import sun.awt.image.ByteInterleavedRaster;
import sun.awt.image.ShortInterleavedRaster;
import sun.awt.image.IntegerInterleavedRaster;
import sun.awt.image.ByteBandedRaster;
import sun.awt.image.ShortBandedRaster;
import sun.awt.image.BytePackedRaster;
import sun.awt.image.SunWritableRaster;
${definition}"
      associated_elems
	class_ref 311682 // Raster
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 650754 "RasterFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 900098 // RasterFormatException
      end
      comment "Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 650882 "RescaleOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.color.ColorSpace;
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.RenderingHints;
import sun.awt.image.ImagingLib;
${definition}"
      associated_elems
	class_ref 900226 // RescaleOp
      end
      comment "Copyright (c) 1997, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 651010 "ShortLookupTable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 899458 // ShortLookupTable
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 651138 "SinglePixelPackedSampleModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 900354 // SinglePixelPackedSampleModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end

    artifact 651266 "TileObserver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 897282 // TileObserver
      end
      comment "Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 651394 "VolatileImage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Toolkit;
import java.awt.Transparency;
${definition}"
      associated_elems
	class_ref 344194 // VolatileImage
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 651522 "WritableRaster"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Rectangle;
import java.awt.Point;
${definition}"
      associated_elems
	class_ref 322690 // WritableRaster
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 ****************************************************************
*****************************************************************
*****************************************************************
** COPYRIGHT (c) Eastman Kodak Company, 1997
** As  an unpublished  work pursuant to Title 17 of the United
** States Code.  All rights reserved.
*****************************************************************
*****************************************************************
****************************************************************"
    end
  end

  package_ref 180610 // renderable
end
