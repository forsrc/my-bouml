class Flags
!!!8801282.java!!!	Flags(in f : int)
            flags = f;
!!!8801410.java!!!	valueOf() : int
            return flags;
!!!8801538.java!!!	contains(inout f : Formatter::Flags) : boolean
            return (flags & f.valueOf()) == f.valueOf();
!!!8801666.java!!!	dup() : Formatter::Flags
            return new Flags(flags);
!!!8801794.java!!!	add(inout f : Formatter::Flags) : Formatter::Flags
            flags |= f.valueOf();
            return this;
!!!8801922.java!!!	remove(inout f : Formatter::Flags) : Formatter::Flags
            flags &= ~f.valueOf();
            return this;
!!!8802050.java!!!	parse(inout s : String) : Formatter::Flags
            char[] ca = s.toCharArray();
            Flags f = new Flags(0);
            for (int i = 0; i < ca.length; i++) {
                Flags v = parse(ca[i]);
                if (f.contains(v))
                    throw new DuplicateFormatFlagsException(v.toString());
                f.add(v);
            }
            return f;
!!!8802178.java!!!	parse(in c : char) : Formatter::Flags
            switch (c) {
            case '-': return LEFT_JUSTIFY;
            case '#': return ALTERNATE;
            case '+': return PLUS;
            case ' ': return LEADING_SPACE;
            case '0': return ZERO_PAD;
            case ',': return GROUP;
            case '(': return PARENTHESES;
            case '<': return PREVIOUS;
            default:
                throw new UnknownFormatFlagsException(String.valueOf(c));
            }
!!!8802306.java!!!	toString(inout f : Formatter::Flags) : String
            return f.toString();
!!!8802434.java!!!	toString() : String
            StringBuilder sb = new StringBuilder();
            if (contains(LEFT_JUSTIFY))  sb.append('-');
            if (contains(UPPERCASE))     sb.append('^');
            if (contains(ALTERNATE))     sb.append('#');
            if (contains(PLUS))          sb.append('+');
            if (contains(LEADING_SPACE)) sb.append(' ');
            if (contains(ZERO_PAD))      sb.append('0');
            if (contains(GROUP))         sb.append(',');
            if (contains(PARENTHESES))   sb.append('(');
            if (contains(PREVIOUS))      sb.append('<');
            return sb.toString();
