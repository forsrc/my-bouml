class CodeSetComponentInfo
!!!393602.java!!!	equals(inout obj : Object) : boolean
        if (this == obj)
            return true ;

        if (!(obj instanceof CodeSetComponentInfo))
            return false ;

        CodeSetComponentInfo other = (CodeSetComponentInfo)obj ;
        return forCharData.equals( other.forCharData ) &&
            forWCharData.equals( other.forWCharData ) ;
!!!393730.java!!!	hashCode() : int
        return forCharData.hashCode() ^ forWCharData.hashCode() ;
!!!393858.java!!!	toString() : String
        StringBuffer sbuf = new StringBuffer("CodeSetComponentInfo(");

        sbuf.append("char_data:");
        sbuf.append(forCharData.toString());
        sbuf.append(" wchar_data:");
        sbuf.append(forWCharData.toString());
        sbuf.append(")");

        return sbuf.toString();
!!!393986.java!!!	CodeSetComponentInfo()
        forCharData = CodeSetComponentInfo.JAVASOFT_DEFAULT_CODESETS.forCharData;
        forWCharData = CodeSetComponentInfo.JAVASOFT_DEFAULT_CODESETS.forWCharData;
!!!394114.java!!!	CodeSetComponentInfo(inout charData : CodeSetComponentInfo::CodeSetComponent, inout wcharData : CodeSetComponentInfo::CodeSetComponent)
        forCharData = charData;
        forWCharData = wcharData;
!!!394242.java!!!	read(inout in : MarshalInputStream) : void
        forCharData = new CodeSetComponent();
        forCharData.read(in);
        forWCharData = new CodeSetComponent();
        forWCharData.read(in);
!!!394370.java!!!	write(inout out : MarshalOutputStream) : void
        forCharData.write(out);
        forWCharData.write(out);
!!!394498.java!!!	getCharComponent() : CodeSetComponentInfo::CodeSetComponent
        return forCharData;
!!!394626.java!!!	getWCharComponent() : CodeSetComponentInfo::CodeSetComponent
        return forWCharData;
!!!395650.java!!!	createFromString(inout str : String) : CodeSetComponentInfo::CodeSetComponent
        ORBUtilSystemException wrapper = ORBUtilSystemException.get(
            CORBALogDomains.RPC_ENCODING ) ;

        if (str == null || str.length() == 0)
            throw wrapper.badCodeSetString() ;

        StringTokenizer stok = new StringTokenizer(str, ", ", false);
        int nativeSet = 0;
        int conversionInts[] = null;

        try {

            // The first value is the native code set
            nativeSet = Integer.decode(stok.nextToken()).intValue();

            if (OSFCodeSetRegistry.lookupEntry(nativeSet) == null)
                throw wrapper.unknownNativeCodeset( new Integer(nativeSet) ) ;

            List conversionList = new ArrayList(10);

            // Now process the other values as part of the
            // conversion code set list.
            while (stok.hasMoreTokens()) {

                // decode allows us to specify hex, decimal, etc
                Integer value = Integer.decode(stok.nextToken());

                if (OSFCodeSetRegistry.lookupEntry(value.intValue()) == null)
                    throw wrapper.unknownConversionCodeSet( value ) ;

                conversionList.add(value);
            }

            conversionInts = new int[conversionList.size()];

            for (int i = 0; i < conversionInts.length; i++)
                conversionInts[i] = ((Integer)conversionList.get(i)).intValue();

        } catch (NumberFormatException nfe) {
            throw wrapper.invalidCodeSetNumber( nfe ) ;
        } catch (NoSuchElementException nsee) {
            throw wrapper.invalidCodeSetString( nsee, str ) ;
        }

        // Otherwise return the CodeSetComponent representing
        // the given values
        return new CodeSetComponent(nativeSet, conversionInts);
