class KrbDelegationPermissionCollection
!!!10225026.java!!!	KrbDelegationPermissionCollection()
        perms = new ArrayList<Permission>();
!!!10225154.java!!!	implies(inout permission : Permission) : boolean
        if (! (permission instanceof DelegationPermission))
                return false;

        synchronized (this) {
            for (Permission x : perms) {
                if (x.implies(permission))
                    return true;
            }
        }
        return false;

!!!10225282.java!!!	add(inout permission : Permission) : void
        if (! (permission instanceof DelegationPermission))
            throw new IllegalArgumentException("invalid permission: "+
                                               permission);
        if (isReadOnly())
            throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");

        synchronized (this) {
            perms.add(0, permission);
        }
!!!10225410.java!!!	elements() : Enumeration
        // Convert Iterator into Enumeration
        synchronized (this) {
            return Collections.enumeration(perms);
        }
!!!10225538.java!!!	writeObject(inout out : ObjectOutputStream) : void
        // Don't call out.defaultWriteObject()

        // Write out Vector
        Vector<Permission> permissions = new Vector<>(perms.size());

        synchronized (this) {
            permissions.addAll(perms);
        }

        ObjectOutputStream.PutField pfields = out.putFields();
        pfields.put("permissions", permissions);
        out.writeFields();
!!!10225666.java!!!	readObject(inout in : ObjectInputStream) : void
        // Don't call defaultReadObject()

        // Read in serialized fields
        ObjectInputStream.GetField gfields = in.readFields();

        // Get the one we want
        Vector<Permission> permissions =
                (Vector<Permission>)gfields.get("permissions", null);
        perms = new ArrayList<Permission>(permissions.size());
        perms.addAll(permissions);
