class MinguoDate
!!!8495874.java!!!	now() : MinguoDate
        return now(Clock.systemDefaultZone());
!!!8496002.java!!!	now(inout zone : ZoneId) : MinguoDate
        return now(Clock.system(zone));
!!!8496130.java!!!	now(inout clock : Clock) : MinguoDate
        return new MinguoDate(LocalDate.now(clock));
!!!8496258.java!!!	of(in prolepticYear : int, in month : int, in dayOfMonth : int) : MinguoDate
        return new MinguoDate(LocalDate.of(prolepticYear + YEARS_DIFFERENCE, month, dayOfMonth));
!!!8496386.java!!!	from(inout temporal : TemporalAccessor) : MinguoDate
        return MinguoChronology.INSTANCE.date(temporal);
!!!8496514.java!!!	MinguoDate(inout isoDate : LocalDate)
        Objects.requireNonNull(isoDate, "isoDate");
        this.isoDate = isoDate;
!!!8496642.java!!!	getChronology() : MinguoChronology
        return MinguoChronology.INSTANCE;
!!!8496770.java!!!	getEra() : MinguoEra
        return (getProlepticYear() >= 1 ? MinguoEra.ROC : MinguoEra.BEFORE_ROC);
!!!8496898.java!!!	lengthOfMonth() : int
        return isoDate.lengthOfMonth();
!!!8497026.java!!!	range(inout field : TemporalField) : ValueRange
        if (field instanceof ChronoField) {
            if (isSupported(field)) {
                ChronoField f = (ChronoField) field;
                switch (f) {
                    case DAY_OF_MONTH:
                    case DAY_OF_YEAR:
                    case ALIGNED_WEEK_OF_MONTH:
                        return isoDate.range(field);
                    case YEAR_OF_ERA: {
                        ValueRange range = YEAR.range();
                        long max = (getProlepticYear() <= 0 ? -range.getMinimum() + 1 + YEARS_DIFFERENCE : range.getMaximum() - YEARS_DIFFERENCE);
                        return ValueRange.of(1, max);
                    }
                }
                return getChronology().range(f);
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.rangeRefinedBy(this);
!!!8497154.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case PROLEPTIC_MONTH:
                    return getProlepticMonth();
                case YEAR_OF_ERA: {
                    int prolepticYear = getProlepticYear();
                    return (prolepticYear >= 1 ? prolepticYear : 1 - prolepticYear);
                }
                case YEAR:
                    return getProlepticYear();
                case ERA:
                    return (getProlepticYear() >= 1 ? 1 : 0);
            }
            return isoDate.getLong(field);
        }
        return field.getFrom(this);
!!!8497282.java!!!	getProlepticMonth() : long
        return getProlepticYear() * 12L + isoDate.getMonthValue() - 1;
!!!8497410.java!!!	getProlepticYear() : int
        return isoDate.getYear() - YEARS_DIFFERENCE;
!!!8497538.java!!!	with(inout field : TemporalField, in newValue : long) : MinguoDate
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            if (getLong(f) == newValue) {
                return this;
            }
            switch (f) {
                case PROLEPTIC_MONTH:
                    getChronology().range(f).checkValidValue(newValue, f);
                    return plusMonths(newValue - getProlepticMonth());
                case YEAR_OF_ERA:
                case YEAR:
                case ERA: {
                    int nvalue = getChronology().range(f).checkValidIntValue(newValue, f);
                    switch (f) {
                        case YEAR_OF_ERA:
                            return with(isoDate.withYear(getProlepticYear() >= 1 ? nvalue + YEARS_DIFFERENCE : (1 - nvalue)  + YEARS_DIFFERENCE));
                        case YEAR:
                            return with(isoDate.withYear(nvalue + YEARS_DIFFERENCE));
                        case ERA:
                            return with(isoDate.withYear((1 - getProlepticYear()) + YEARS_DIFFERENCE));
                    }
                }
            }
            return with(isoDate.with(field, newValue));
        }
        return super.with(field, newValue);
!!!8497666.java!!!	with(inout adjuster : TemporalAdjuster) : MinguoDate
        return super.with(adjuster);
!!!8497794.java!!!	plus(inout amount : TemporalAmount) : MinguoDate
        return super.plus(amount);
!!!8497922.java!!!	minus(inout amount : TemporalAmount) : MinguoDate
        return super.minus(amount);
!!!8498050.java!!!	plusYears(in years : long) : MinguoDate
        return with(isoDate.plusYears(years));
!!!8498178.java!!!	plusMonths(in months : long) : MinguoDate
        return with(isoDate.plusMonths(months));
!!!8498306.java!!!	plusWeeks(in weeksToAdd : long) : MinguoDate
        return super.plusWeeks(weeksToAdd);
!!!8498434.java!!!	plusDays(in days : long) : MinguoDate
        return with(isoDate.plusDays(days));
!!!8498562.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : MinguoDate
        return super.plus(amountToAdd, unit);
!!!8498690.java!!!	minus(in amountToAdd : long, inout unit : TemporalUnit) : MinguoDate
        return super.minus(amountToAdd, unit);
!!!8498818.java!!!	minusYears(in yearsToSubtract : long) : MinguoDate
        return super.minusYears(yearsToSubtract);
!!!8498946.java!!!	minusMonths(in monthsToSubtract : long) : MinguoDate
        return super.minusMonths(monthsToSubtract);
!!!8499074.java!!!	minusWeeks(in weeksToSubtract : long) : MinguoDate
        return super.minusWeeks(weeksToSubtract);
!!!8499202.java!!!	minusDays(in daysToSubtract : long) : MinguoDate
        return super.minusDays(daysToSubtract);
!!!8499330.java!!!	with(inout newDate : LocalDate) : MinguoDate
        return (newDate.equals(isoDate) ? this : new MinguoDate(newDate));
!!!8499458.java!!!	atTime(inout localTime : LocalTime) : ChronoLocalDateTime
        return (ChronoLocalDateTime<MinguoDate>)super.atTime(localTime);
!!!8499586.java!!!	until(inout endDate : ChronoLocalDate) : ChronoPeriod
        Period period = isoDate.until(endDate);
        return getChronology().period(period.getYears(), period.getMonths(), period.getDays());
!!!8499714.java!!!	toEpochDay() : long
        return isoDate.toEpochDay();
!!!8499842.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof MinguoDate) {
            MinguoDate otherDate = (MinguoDate) obj;
            return this.isoDate.equals(otherDate.isoDate);
        }
        return false;
!!!8499970.java!!!	hashCode() : int
        return getChronology().getId().hashCode() ^ isoDate.hashCode();
!!!8500098.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8500226.java!!!	writeReplace() : Object
        return new Ser(Ser.MINGUO_DATE_TYPE, this);
!!!8500354.java!!!	writeExternal(inout out : DataOutput) : void
        // MinguoChronology is implicit in the MINGUO_DATE_TYPE
        out.writeInt(get(YEAR));
        out.writeByte(get(MONTH_OF_YEAR));
        out.writeByte(get(DAY_OF_MONTH));
!!!8500482.java!!!	readExternal(inout in : DataInput) : MinguoDate
        int year = in.readInt();
        int month = in.readByte();
        int dayOfMonth = in.readByte();
        return MinguoChronology.INSTANCE.date(year, month, dayOfMonth);
