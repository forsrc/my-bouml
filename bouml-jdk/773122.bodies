class ResourceResolver
!!!5505538.java!!!	ResourceResolver(inout resourceResolver : ResourceResolverSpi)
        this.resolverSpi = resourceResolver;
!!!5505666.java!!!	getInstance(inout uri : Attr, inout baseURI : String) : ResourceResolver
        return getInstance(uri, baseURI, false);
!!!5505794.java!!!	getInstance(inout uriAttr : Attr, inout baseURI : String, inout secureValidation : boolean) : ResourceResolver
        ResourceResolverContext context = new ResourceResolverContext(uriAttr, baseURI, secureValidation);
        return internalGetInstance(context);
!!!5505922.java!!!	internalGetInstance(inout context : ResourceResolverContext) : ResourceResolver
        synchronized (resolverList) {
            for (ResourceResolver resolver : resolverList) {
                ResourceResolver resolverTmp = resolver;
                if (!resolver.resolverSpi.engineIsThreadSafe()) {
                    try {
                        resolverTmp =
                            new ResourceResolver(resolver.resolverSpi.getClass().newInstance());
                    } catch (InstantiationException e) {
                        throw new ResourceResolverException("", e, context.attr, context.baseUri);
                    } catch (IllegalAccessException e) {
                        throw new ResourceResolverException("", e, context.attr, context.baseUri);
                    }
                }

                if (log.isLoggable(java.util.logging.Level.FINE)) {
                    log.log(java.util.logging.Level.FINE,
                        "check resolvability by class " + resolverTmp.getClass().getName()
                    );
                }

                if ((resolverTmp != null) && resolverTmp.canResolve(context)) {
                    // Check to see whether the Resolver is allowed
                    if (context.secureValidation
                        && (resolverTmp.resolverSpi instanceof ResolverLocalFilesystem
                            || resolverTmp.resolverSpi instanceof ResolverDirectHTTP)) {
                        Object exArgs[] = { resolverTmp.resolverSpi.getClass().getName() };
                        throw new ResourceResolverException(
                            "signature.Reference.ForbiddenResolver", exArgs, context.attr, context.baseUri
                        );
                    }
                    return resolverTmp;
                }
            }
        }

        Object exArgs[] = { ((context.uriToResolve != null)
                ? context.uriToResolve : "null"), context.baseUri };

        throw new ResourceResolverException("utils.resolver.noClass", exArgs, context.attr, context.baseUri);
!!!5506050.java!!!	getInstance(inout uri : Attr, inout baseURI : String, inout individualResolvers : List) : ResourceResolver
        return getInstance(uri, baseURI, individualResolvers, false);
!!!5506178.java!!!	getInstance(inout uri : Attr, inout baseURI : String, inout individualResolvers : List, inout secureValidation : boolean) : ResourceResolver
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE,
                "I was asked to create a ResourceResolver and got "
                + (individualResolvers == null ? 0 : individualResolvers.size())
            );
        }

        ResourceResolverContext context = new ResourceResolverContext(uri, baseURI, secureValidation);

        // first check the individual Resolvers
        if (individualResolvers != null) {
            for (int i = 0; i < individualResolvers.size(); i++) {
                ResourceResolver resolver = individualResolvers.get(i);

                if (resolver != null) {
                    if (log.isLoggable(java.util.logging.Level.FINE)) {
                        String currentClass = resolver.resolverSpi.getClass().getName();
                        log.log(java.util.logging.Level.FINE, "check resolvability by class " + currentClass);
                    }

                    if (resolver.canResolve(context)) {
                        return resolver;
                    }
                }
            }
        }

        return internalGetInstance(context);
!!!5506306.java!!!	register(inout className : String) : void
        JavaUtils.checkRegisterPermission();
        try {
            Class<ResourceResolverSpi> resourceResolverClass =
                (Class<ResourceResolverSpi>) Class.forName(className);
            register(resourceResolverClass, false);
        } catch (ClassNotFoundException e) {
            log.log(java.util.logging.Level.WARNING, "Error loading resolver " + className + " disabling it");
        }
!!!5506434.java!!!	registerAtStart(inout className : String) : void
        JavaUtils.checkRegisterPermission();
        try {
            Class<ResourceResolverSpi> resourceResolverClass =
                (Class<ResourceResolverSpi>) Class.forName(className);
            register(resourceResolverClass, true);
        } catch (ClassNotFoundException e) {
            log.log(java.util.logging.Level.WARNING, "Error loading resolver " + className + " disabling it");
        }
!!!5506562.java!!!	register(inout className : Class, inout start : boolean) : void
        JavaUtils.checkRegisterPermission();
        try {
            ResourceResolverSpi resourceResolverSpi = className.newInstance();
            register(resourceResolverSpi, start);
        } catch (IllegalAccessException e) {
            log.log(java.util.logging.Level.WARNING, "Error loading resolver " + className + " disabling it");
        } catch (InstantiationException e) {
            log.log(java.util.logging.Level.WARNING, "Error loading resolver " + className + " disabling it");
        }
!!!5506690.java!!!	register(inout resourceResolverSpi : ResourceResolverSpi, inout start : boolean) : void
        JavaUtils.checkRegisterPermission();
        synchronized(resolverList) {
            if (start) {
                resolverList.add(0, new ResourceResolver(resourceResolverSpi));
            } else {
                resolverList.add(new ResourceResolver(resourceResolverSpi));
            }
        }
        if (log.isLoggable(java.util.logging.Level.FINE)) {
            log.log(java.util.logging.Level.FINE, "Registered resolver: " + resourceResolverSpi.toString());
        }
!!!5506818.java!!!	registerDefaultResolvers() : void
        synchronized(resolverList) {
            resolverList.add(new ResourceResolver(new ResolverFragment()));
            resolverList.add(new ResourceResolver(new ResolverLocalFilesystem()));
            resolverList.add(new ResourceResolver(new ResolverXPointer()));
            resolverList.add(new ResourceResolver(new ResolverDirectHTTP()));
        }
!!!5506946.java!!!	resolve(inout uri : Attr, inout baseURI : String) : XMLSignatureInput
        return resolve(uri, baseURI, true);
!!!5507074.java!!!	resolve(inout uri : Attr, inout baseURI : String, inout secureValidation : boolean) : XMLSignatureInput
        ResourceResolverContext context = new ResourceResolverContext(uri, baseURI, secureValidation);
        return resolverSpi.engineResolveURI(context);
!!!5507202.java!!!	setProperty(inout key : String, inout value : String) : void
        resolverSpi.engineSetProperty(key, value);
!!!5507330.java!!!	getProperty(inout key : String) : String
        return resolverSpi.engineGetProperty(key);
!!!5507458.java!!!	addProperties(inout properties : Map) : void
        resolverSpi.engineAddProperies(properties);
!!!5507586.java!!!	getPropertyKeys() : String
        return resolverSpi.engineGetPropertyKeys();
!!!5507714.java!!!	understandsProperty(inout propertyToTest : String) : boolean
        return resolverSpi.understandsProperty(propertyToTest);
!!!5507842.java!!!	canResolve(inout context : ResourceResolverContext) : boolean
        return this.resolverSpi.engineCanResolveURI(context);
