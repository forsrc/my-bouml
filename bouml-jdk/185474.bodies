class SubList
!!!526722.java!!!	SubList(inout list : AbstractList, in fromIndex : int, in toIndex : int)
        if (fromIndex < 0)
            throw new IndexOutOfBoundsException("fromIndex = " + fromIndex);
        if (toIndex > list.size())
            throw new IndexOutOfBoundsException("toIndex = " + toIndex);
        if (fromIndex > toIndex)
            throw new IllegalArgumentException("fromIndex(" + fromIndex +
                                               ") > toIndex(" + toIndex + ")");
        l = list;
        offset = fromIndex;
        size = toIndex - fromIndex;
        this.modCount = l.modCount;
!!!526850.java!!!	set(in index : int, inout element : E) : E
        rangeCheck(index);
        checkForComodification();
        return l.set(index+offset, element);
!!!526978.java!!!	get(in index : int) : E
        rangeCheck(index);
        checkForComodification();
        return l.get(index+offset);
!!!527106.java!!!	size() : int
        checkForComodification();
        return size;
!!!527234.java!!!	add(in index : int, inout element : E) : void
        rangeCheckForAdd(index);
        checkForComodification();
        l.add(index+offset, element);
        this.modCount = l.modCount;
        size++;
!!!527362.java!!!	remove(in index : int) : E
        rangeCheck(index);
        checkForComodification();
        E result = l.remove(index+offset);
        this.modCount = l.modCount;
        size--;
        return result;
!!!527490.java!!!	removeRange(in fromIndex : int, in toIndex : int) : void
        checkForComodification();
        l.removeRange(fromIndex+offset, toIndex+offset);
        this.modCount = l.modCount;
        size -= (toIndex-fromIndex);
!!!527618.java!!!	addAll(inout c : Collection) : boolean
        return addAll(size, c);
!!!527746.java!!!	addAll(in index : int, inout c : Collection) : boolean
        rangeCheckForAdd(index);
        int cSize = c.size();
        if (cSize==0)
            return false;

        checkForComodification();
        l.addAll(offset+index, c);
        this.modCount = l.modCount;
        size += cSize;
        return true;
!!!527874.java!!!	iterator() : Iterator
        return listIterator();
!!!528002.java!!!	listIterator(in index : int) : ListIterator
        checkForComodification();
        rangeCheckForAdd(index);

        return new ListIterator<E>() {
            private final ListIterator<E> i = l.listIterator(index+offset);

            public boolean hasNext() {
                return nextIndex() < size;
            }

            public E next() {
                if (hasNext())
                    return i.next();
                else
                    throw new NoSuchElementException();
            }

            public boolean hasPrevious() {
                return previousIndex() >= 0;
            }

            public E previous() {
                if (hasPrevious())
                    return i.previous();
                else
                    throw new NoSuchElementException();
            }

            public int nextIndex() {
                return i.nextIndex() - offset;
            }

            public int previousIndex() {
                return i.previousIndex() - offset;
            }

            public void remove() {
                i.remove();
                SubList.this.modCount = l.modCount;
                size--;
            }

            public void set(E e) {
                i.set(e);
            }

            public void add(E e) {
                i.add(e);
                SubList.this.modCount = l.modCount;
                size++;
            }
        };
!!!528130.java!!!	subList(in fromIndex : int, in toIndex : int) : List
        return new SubList<>(this, fromIndex, toIndex);
!!!528258.java!!!	rangeCheck(in index : int) : void
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
!!!528386.java!!!	rangeCheckForAdd(in index : int) : void
        if (index < 0 || index > size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
!!!528514.java!!!	outOfBoundsMsg(in index : int) : String
        return "Index: "+index+", Size: "+size;
!!!528642.java!!!	checkForComodification() : void
        if (this.modCount != l.modCount)
            throw new ConcurrentModificationException();
