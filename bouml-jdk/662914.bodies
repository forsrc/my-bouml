class NodeIteratorImpl
!!!4310658.java!!!	NodeIteratorImpl(inout document : DocumentImpl, inout root : Node, in whatToShow : int, inout nodeFilter : NodeFilter, inout entityReferenceExpansion : boolean)
        fDocument = document;
        fRoot = root;
        fCurrentNode = null;
        fWhatToShow = whatToShow;
        fNodeFilter = nodeFilter;
        fEntityReferenceExpansion = entityReferenceExpansion;
!!!4310786.java!!!	getRoot() : Node
        return fRoot;
!!!4310914.java!!!	getWhatToShow() : int
        return fWhatToShow;
!!!4311042.java!!!	getFilter() : NodeFilter
        return fNodeFilter;
!!!4311170.java!!!	getExpandEntityReferences() : boolean
        return fEntityReferenceExpansion;
!!!4311298.java!!!	nextNode() : Node

        if( fDetach) {
                throw new DOMException(
                DOMException.INVALID_STATE_ERR,
                DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
        }

        // if root is null there is no next node.
        if (fRoot == null) return null;

        Node nextNode = fCurrentNode;
        boolean accepted = false; // the next node has not been accepted.

        accepted_loop:
        while (!accepted) {

            // if last direction is not forward, repeat node.
            if (!fForward && nextNode!=null) {
                //System.out.println("nextNode():!fForward:"+fCurrentNode.getNodeName());
                nextNode = fCurrentNode;
            } else {
            // else get the next node via depth-first
                if (!fEntityReferenceExpansion
                    && nextNode != null
                    && nextNode.getNodeType() == Node.ENTITY_REFERENCE_NODE) {
                    nextNode = nextNode(nextNode, false);
                } else {
                    nextNode = nextNode(nextNode, true);
                }
            }

            fForward = true; //REVIST: should direction be set forward before null check?

            // nothing in the list. return null.
            if (nextNode == null) return null;

            // does node pass the filters and whatToShow?
            accepted = acceptNode(nextNode);
            if (accepted) {
                // if so, then the node is the current node.
                fCurrentNode = nextNode;
                return fCurrentNode;
            } else
                continue accepted_loop;

        } // while (!accepted) {

        // no nodes, or no accepted nodes.
        return null;

!!!4311426.java!!!	previousNode() : Node

        if( fDetach) {
                throw new DOMException(
                DOMException.INVALID_STATE_ERR,
                DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "INVALID_STATE_ERR", null));
        }

        // if the root is null, or the current node is null, return null.
        if (fRoot == null || fCurrentNode == null) return null;

        Node previousNode = fCurrentNode;
        boolean accepted = false;

        accepted_loop:
        while (!accepted) {

            if (fForward && previousNode != null) {
                //repeat last node.
                previousNode = fCurrentNode;
            } else {
                // get previous node in backwards depth first order.
                previousNode = previousNode(previousNode);
            }

            // we are going backwards
            fForward = false;

            // if the new previous node is null, we're at head or past the root,
            // so return null.
            if (previousNode == null) return null;

            // check if node passes filters and whatToShow.
            accepted = acceptNode(previousNode);
            if (accepted) {
                // if accepted, update the current node, and return it.
                fCurrentNode = previousNode;
                return fCurrentNode;
            } else
                continue accepted_loop;
        }
        // there are no nodes?
        return null;
!!!4311554.java!!!	acceptNode(inout node : Node) : boolean

        if (fNodeFilter == null) {
            return ( fWhatToShow & (1 << node.getNodeType()-1)) != 0 ;
        } else {
            return ((fWhatToShow & (1 << node.getNodeType()-1)) != 0 )
                && fNodeFilter.acceptNode(node) == NodeFilter.FILTER_ACCEPT;
        }
!!!4311682.java!!!	matchNodeOrParent(inout node : Node) : Node
        // Additions and removals in the underlying data structure may occur
        // before any iterations, and in this case the reference_node is null.
        if (fCurrentNode == null) return null;

        // check if the removed node is an _ancestor_ of the
        // reference node
        for (Node n = fCurrentNode; n != fRoot; n = n.getParentNode()) {
            if (node == n) return n;
        }
        return null;
!!!4311810.java!!!	nextNode(inout node : Node, inout visitChildren : boolean) : Node

        if (node == null) return fRoot;

        Node result;
        // only check children if we visit children.
        if (visitChildren) {
            //if hasChildren, return 1st child.
            if (node.hasChildNodes()) {
                result = node.getFirstChild();
                return result;
            }
        }

        if (node == fRoot) { //if Root has no kids
            return null;
        }

        // if hasSibling, return sibling
        result = node.getNextSibling();
        if (result != null) return result;


        // return parent's 1st sibling.
        Node parent = node.getParentNode();
        while (parent != null && parent != fRoot) {
            result = parent.getNextSibling();
            if (result != null) {
                return result;
            } else {
                parent = parent.getParentNode();
            }

        } // while (parent != null && parent != fRoot) {

        // end of list, return null
        return null;
!!!4311938.java!!!	previousNode(inout node : Node) : Node

        Node result;

        // if we're at the root, return null.
        if (node == fRoot) return null;

        // get sibling
        result = node.getPreviousSibling();
        if (result == null) {
            //if 1st sibling, return parent
            result = node.getParentNode();
            return result;
        }

        // if sibling has children, keep getting last child of child.
        if (result.hasChildNodes()
            && !(!fEntityReferenceExpansion
                && result != null
                && result.getNodeType() == Node.ENTITY_REFERENCE_NODE))

        {
            while (result.hasChildNodes()) {
                result = result.getLastChild();
            }
        }

        return result;
!!!4312066.java!!!	removeNode(inout node : Node) : void

        // Implementation note: Fix-up means setting the current node properly
        // after a remove.

        if (node == null) return;

        Node deleted = matchNodeOrParent(node);

        if (deleted == null) return;

        if (fForward) {
            fCurrentNode = previousNode(deleted);
        } else
        // if (!fForward)
        {
            Node next = nextNode(deleted, false);
            if (next!=null) {
                // normal case: there _are_ nodes following this in the iterator.
                fCurrentNode = next;
            } else {
                // the last node in the iterator is to be removed,
                // so we set the current node to be the previous one.
                fCurrentNode = previousNode(deleted);
                fForward = true;
            }

        }

!!!4312194.java!!!	detach() : void
        fDetach = true;
        fDocument.removeNodeIterator(this);
