class NamedNodeMapImpl
!!!4158210.java!!!	NamedNodeMapImpl(inout ownerNode : NodeImpl)
        this.ownerNode = ownerNode;
!!!4158338.java!!!	getLength() : int
        return (nodes != null) ? nodes.size() : 0;
!!!4158466.java!!!	item(in index : int) : Node
        return (nodes != null && index < nodes.size()) ?
                    (Node)(nodes.get(index)) : null;
!!!4158594.java!!!	getNamedItem(inout name : String) : Node

        int i = findNamePoint(name,0);
        return (i < 0) ? null : (Node)(nodes.get(i));

!!!4158722.java!!!	getNamedItemNS(inout namespaceURI : String, inout localName : String) : Node

        int i = findNamePoint(namespaceURI, localName);
        return (i < 0) ? null : (Node)(nodes.get(i));

!!!4158850.java!!!	setNamedItem(inout arg : Node) : Node

        CoreDocumentImpl ownerDocument = ownerNode.ownerDocument();
        if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }
            if (arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }

        int i = findNamePoint(arg.getNodeName(),0);
        NodeImpl previous = null;
        if (i >= 0) {
            previous = (NodeImpl) nodes.get(i);
            nodes.set(i, arg);
        } else {
            i = -1 - i; // Insert point (may be end of list)
            if (null == nodes) {
                nodes = new ArrayList(5);
            }
            nodes.add(i, arg);
        }
        return previous;

!!!4158978.java!!!	setNamedItemNS(inout arg : Node) : Node

        CoreDocumentImpl ownerDocument = ownerNode.ownerDocument();
        if (ownerDocument.errorChecking) {
            if (isReadOnly()) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
            }

            if(arg.getOwnerDocument() != ownerDocument) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
            }
        }

        int i = findNamePoint(arg.getNamespaceURI(), arg.getLocalName());
        NodeImpl previous = null;
        if (i >= 0) {
            previous = (NodeImpl) nodes.get(i);
            nodes.set(i, arg);
        } else {
            // If we can't find by namespaceURI, localName, then we find by
            // nodeName so we know where to insert.
            i = findNamePoint(arg.getNodeName(),0);
            if (i >= 0) {
                previous = (NodeImpl) nodes.get(i);
                nodes.add(i, arg);
            } else {
                i = -1 - i; // Insert point (may be end of list)
                if (null == nodes) {
                    nodes = new ArrayList(5);
                }
                nodes.add(i, arg);
            }
        }
        return previous;

!!!4159106.java!!!	removeNamedItem(inout name : String) : Node

        if (isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
            throw
                new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                msg);
        }
        int i = findNamePoint(name,0);
        if (i < 0) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
        }

        NodeImpl n = (NodeImpl)nodes.get(i);
        nodes.remove(i);

        return n;

!!!4159234.java!!!	removeNamedItemNS(inout namespaceURI : String, inout name : String) : Node

        if (isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
            throw
                new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
                msg);
        }
        int i = findNamePoint(namespaceURI, name);
        if (i < 0) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
            throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
        }

        NodeImpl n = (NodeImpl)nodes.get(i);
        nodes.remove(i);

        return n;

!!!4159362.java!!!	cloneMap(inout ownerNode : NodeImpl) : NamedNodeMapImpl
        NamedNodeMapImpl newmap = new NamedNodeMapImpl(ownerNode);
        newmap.cloneContent(this);
        return newmap;
!!!4159490.java!!!	cloneContent(inout srcmap : NamedNodeMapImpl) : void
        List srcnodes = srcmap.nodes;
        if (srcnodes != null) {
            int size = srcnodes.size();
            if (size != 0) {
                if (nodes == null) {
                    nodes = new ArrayList(size);
                }
                else {
                    nodes.clear();
                }
                for (int i = 0; i < size; ++i) {
                    NodeImpl n = (NodeImpl) srcmap.nodes.get(i);
                    NodeImpl clone = (NodeImpl) n.cloneNode(true);
                    clone.isSpecified(n.isSpecified());
                    nodes.add(clone);
                }
            }
        }
!!!4159618.java!!!	setReadOnly(inout readOnly : boolean, inout deep : boolean) : void
        isReadOnly(readOnly);
        if (deep && nodes != null) {
            for (int i = nodes.size() - 1; i >= 0; i--) {
                ((NodeImpl) nodes.get(i)).setReadOnly(readOnly,deep);
            }
        }
!!!4159746.java!!!	getReadOnly() : boolean
        return isReadOnly();
!!!4159874.java!!!	setOwnerDocument(inout doc : CoreDocumentImpl) : void
        if (nodes != null) {
            final int size = nodes.size();
            for (int i = 0; i < size; ++i) {
                ((NodeImpl)item(i)).setOwnerDocument(doc);
            }
        }
!!!4160002.java!!!	isReadOnly() : boolean
        return (flags & READONLY) != 0;
!!!4160130.java!!!	isReadOnly(inout value : boolean) : void
        flags = (short) (value ? flags | READONLY : flags & ~READONLY);
!!!4160258.java!!!	changed() : boolean
        return (flags & CHANGED) != 0;
!!!4160386.java!!!	changed(inout value : boolean) : void
        flags = (short) (value ? flags | CHANGED : flags & ~CHANGED);
!!!4160514.java!!!	hasDefaults() : boolean
        return (flags & HASDEFAULTS) != 0;
!!!4160642.java!!!	hasDefaults(inout value : boolean) : void
        flags = (short) (value ? flags | HASDEFAULTS : flags & ~HASDEFAULTS);
!!!4160770.java!!!	findNamePoint(inout name : String, in start : int) : int

        // Binary search
        int i = 0;
        if (nodes != null) {
            int first = start;
            int last  = nodes.size() - 1;

            while (first <= last) {
                i = (first + last) / 2;
                int test = name.compareTo(((Node)(nodes.get(i))).getNodeName());
                if (test == 0) {
                    return i; // Name found
                }
                else if (test < 0) {
                    last = i - 1;
                }
                else {
                    first = i + 1;
                }
            }

            if (first > i) {
                i = first;
            }
        }

        return -1 - i; // not-found has to be encoded.

!!!4160898.java!!!	findNamePoint(inout namespaceURI : String, inout name : String) : int

        if (nodes == null) return -1;
        if (name == null) return -1;

        // This is a linear search through the same nodes ArrayList.
        // The ArrayList is sorted on the DOM Level 1 nodename.
        // The DOM Level 2 NS keys are namespaceURI and Localname,
        // so we must linear search thru it.
        // In addition, to get this to work with nodes without any namespace
        // (namespaceURI and localNames are both null) we then use the nodeName
        // as a secondary key.
        final int size = nodes.size();
        for (int i = 0; i < size; ++i) {
            NodeImpl a = (NodeImpl)nodes.get(i);
            String aNamespaceURI = a.getNamespaceURI();
            String aLocalName = a.getLocalName();
            if (namespaceURI == null) {
              if (aNamespaceURI == null
                  &&
                  (name.equals(aLocalName)
                   ||
                   (aLocalName == null && name.equals(a.getNodeName()))))
                return i;
            } else {
              if (namespaceURI.equals(aNamespaceURI)
                  &&
                  name.equals(aLocalName))
                return i;
            }
        }
        return -1;
!!!4161026.java!!!	precedes(inout a : Node, inout b : Node) : boolean

        if (nodes != null) {
            final int size = nodes.size();
            for (int i = 0; i < size; ++i) {
                Node n = (Node)nodes.get(i);
                if (n==a) return true;
                if (n==b) return false;
            }
        }
        return false;
!!!4161154.java!!!	removeItem(in index : int) : void
       if (nodes != null && index < nodes.size()){
           nodes.remove(index);
       }
!!!4161282.java!!!	getItem(in index : int) : Object
        if (nodes != null) {
            return nodes.get(index);
        }
        return null;
!!!4161410.java!!!	addItem(inout arg : Node) : int
        int i = findNamePoint(arg.getNamespaceURI(), arg.getLocalName());
        if (i >= 0) {
            nodes.set(i, arg);
        }
        else {
            // If we can't find by namespaceURI, localName, then we find by
            // nodeName so we know where to insert.
            i = findNamePoint(arg.getNodeName(),0);
            if (i >= 0) {
                nodes.add(i, arg);
            }
            else {
                i = -1 - i; // Insert point (may be end of list)
                if (null == nodes) {
                    nodes = new ArrayList(5);
                }
                nodes.add(i, arg);
            }
        }
        return i;
!!!4161538.java!!!	cloneMap(inout list : ArrayList) : ArrayList
        if (list == null) {
            list = new ArrayList(5);
        }
        list.clear();
        if (nodes != null) {
            final int size = nodes.size();
            for (int i = 0; i < size; ++i) {
                list.add(nodes.get(i));
            }
        }
        return list;
!!!4161666.java!!!	getNamedItemIndex(inout namespaceURI : String, inout localName : String) : int
        return findNamePoint(namespaceURI, localName);
!!!4161794.java!!!	removeAll() : void
        if (nodes != null) {
            nodes.clear();
        }
!!!4161922.java!!!	readObject(inout in : ObjectInputStream) : void
        in.defaultReadObject();
        if (nodes != null) {
            nodes = new ArrayList(nodes);
        }
!!!4162050.java!!!	writeObject(inout out : ObjectOutputStream) : void
        List oldNodes = this.nodes;
        try {
            if (oldNodes != null) {
                this.nodes = new Vector(oldNodes);
            }
            out.defaultWriteObject();
        }
        // If the write fails for some reason ensure
        // that we restore the original object.
        finally {
            this.nodes = oldNodes;
        }
