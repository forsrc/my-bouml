class DateTimeParseContext
!!!8536066.java!!!	DateTimeParseContext(inout formatter : DateTimeFormatter)
        super();
        this.formatter = formatter;
        parsed.add(new Parsed());
!!!8536194.java!!!	copy() : DateTimeParseContext
        DateTimeParseContext newContext = new DateTimeParseContext(formatter);
        newContext.caseSensitive = caseSensitive;
        newContext.strict = strict;
        return newContext;
!!!8536322.java!!!	getLocale() : Locale
        return formatter.getLocale();
!!!8536450.java!!!	getDecimalStyle() : DecimalStyle
        return formatter.getDecimalStyle();
!!!8536578.java!!!	getEffectiveChronology() : Chronology
        Chronology chrono = currentParsed().chrono;
        if (chrono == null) {
            chrono = formatter.getChronology();
            if (chrono == null) {
                chrono = IsoChronology.INSTANCE;
            }
        }
        return chrono;
!!!8536706.java!!!	isCaseSensitive() : boolean
        return caseSensitive;
!!!8536834.java!!!	setCaseSensitive(inout caseSensitive : boolean) : void
        this.caseSensitive = caseSensitive;
!!!8536962.java!!!	subSequenceEquals(inout cs1 : CharSequence, in offset1 : int, inout cs2 : CharSequence, in offset2 : int, in length : int) : boolean
        if (offset1 + length > cs1.length() || offset2 + length > cs2.length()) {
            return false;
        }
        if (isCaseSensitive()) {
            for (int i = 0; i < length; i++) {
                char ch1 = cs1.charAt(offset1 + i);
                char ch2 = cs2.charAt(offset2 + i);
                if (ch1 != ch2) {
                    return false;
                }
            }
        } else {
            for (int i = 0; i < length; i++) {
                char ch1 = cs1.charAt(offset1 + i);
                char ch2 = cs2.charAt(offset2 + i);
                if (ch1 != ch2 && Character.toUpperCase(ch1) != Character.toUpperCase(ch2) &&
                        Character.toLowerCase(ch1) != Character.toLowerCase(ch2)) {
                    return false;
                }
            }
        }
        return true;
!!!8537090.java!!!	charEquals(in ch1 : char, in ch2 : char) : boolean
        if (isCaseSensitive()) {
            return ch1 == ch2;
        }
        return charEqualsIgnoreCase(ch1, ch2);
!!!8537218.java!!!	charEqualsIgnoreCase(in c1 : char, in c2 : char) : boolean
        return c1 == c2 ||
                Character.toUpperCase(c1) == Character.toUpperCase(c2) ||
                Character.toLowerCase(c1) == Character.toLowerCase(c2);
!!!8537346.java!!!	isStrict() : boolean
        return strict;
!!!8537474.java!!!	setStrict(inout strict : boolean) : void
        this.strict = strict;
!!!8537602.java!!!	startOptional() : void
        parsed.add(currentParsed().copy());
!!!8537730.java!!!	endOptional(inout successful : boolean) : void
        if (successful) {
            parsed.remove(parsed.size() - 2);
        } else {
            parsed.remove(parsed.size() - 1);
        }
!!!8537858.java!!!	currentParsed() : Parsed
        return parsed.get(parsed.size() - 1);
!!!8537986.java!!!	toUnresolved() : Parsed
        return currentParsed();
!!!8538114.java!!!	toResolved(inout resolverStyle : ResolverStyle, inout resolverFields : Set) : TemporalAccessor
        Parsed parsed = currentParsed();
        parsed.chrono = getEffectiveChronology();
        parsed.zone = (parsed.zone != null ? parsed.zone : formatter.getZone());
        return parsed.resolve(resolverStyle, resolverFields);
!!!8538242.java!!!	getParsed(inout field : TemporalField) : Long
        return currentParsed().fieldValues.get(field);
!!!8538370.java!!!	setParsedField(inout field : TemporalField, in value : long, in errorPos : int, in successPos : int) : int
        Objects.requireNonNull(field, "field");
        Long old = currentParsed().fieldValues.put(field, value);
        return (old != null && old.longValue() != value) ? ~errorPos : successPos;
!!!8538498.java!!!	setParsed(inout chrono : Chronology) : void
        Objects.requireNonNull(chrono, "chrono");
        currentParsed().chrono = chrono;
        if (chronoListeners != null && !chronoListeners.isEmpty()) {
            @SuppressWarnings({"rawtypes", "unchecked"})
            Consumer<Chronology>[] tmp = new Consumer[1];
            Consumer<Chronology>[] listeners = chronoListeners.toArray(tmp);
            chronoListeners.clear();
            for (Consumer<Chronology> l : listeners) {
                l.accept(chrono);
            }
        }
!!!8538626.java!!!	addChronoChangedListener(inout listener : Consumer) : void
        if (chronoListeners == null) {
            chronoListeners = new ArrayList<Consumer<Chronology>>();
        }
        chronoListeners.add(listener);
!!!8538754.java!!!	setParsed(inout zone : ZoneId) : void
        Objects.requireNonNull(zone, "zone");
        currentParsed().zone = zone;
!!!8538882.java!!!	setParsedLeapSecond() : void
        currentParsed().leapSecond = true;
!!!8539010.java!!!	toString() : String
        return currentParsed().toString();
