class MemoryCacheImageInputStream
!!!9692674.java!!!	MemoryCacheImageInputStream(inout stream : InputStream)
        if (stream == null) {
            throw new IllegalArgumentException("stream == null!");
        }
        this.stream = stream;

        disposerRecord = new StreamDisposerRecord(cache);
        if (getClass() == MemoryCacheImageInputStream.class) {
            disposerReferent = new Object();
            Disposer.addRecord(disposerReferent, disposerRecord);
        } else {
            disposerReferent = new StreamFinalizer(this);
        }
!!!9692802.java!!!	read() : int
        checkClosed();
        bitOffset = 0;
        long pos = cache.loadFromStream(stream, streamPos+1);
        if (pos >= streamPos+1) {
            return cache.read(streamPos++);
        } else {
            return -1;
        }
!!!9692930.java!!!	read(inout b : byte [[]], in off : int, in len : int) : int
        checkClosed();

        if (b == null) {
            throw new NullPointerException("b == null!");
        }
        if (off < 0 || len < 0 || off + len > b.length || off + len < 0) {
            throw new IndexOutOfBoundsException
                ("off < 0 || len < 0 || off+len > b.length || off+len < 0!");
        }

        bitOffset = 0;

        if (len == 0) {
            return 0;
        }

        long pos = cache.loadFromStream(stream, streamPos+len);

        len = (int)(pos - streamPos);  // In case stream ended early

        if (len > 0) {
            cache.read(b, off, len, streamPos);
            streamPos += len;
            return len;
        } else {
            return -1;
        }
!!!9693058.java!!!	flushBefore(in pos : long) : void
        super.flushBefore(pos); // this will call checkClosed() for us
        cache.disposeBefore(pos);
!!!9693186.java!!!	isCached() : boolean
        return true;
!!!9693314.java!!!	isCachedFile() : boolean
        return false;
!!!9693442.java!!!	isCachedMemory() : boolean
        return true;
!!!9693570.java!!!	close() : void
        super.close();
        disposerRecord.dispose(); // this resets the MemoryCache
        stream = null;
        cache = null;
!!!9693698.java!!!	finalize() : void
        // Empty finalizer: for performance reasons we instead use the
        // Disposer mechanism for ensuring that the underlying
        // MemoryCache is reset prior to garbage collection
