class LongAccumulator
!!!9288066.java!!!	LongAccumulator(inout accumulatorFunction : LongBinaryOperator, in identity : long)
        this.function = accumulatorFunction;
        base = this.identity = identity;
!!!9288194.java!!!	accumulate(in x : long) : void
        Cell[] as; long b, v, r; int m; Cell a;
        if ((as = cells) != null ||
            (r = function.applyAsLong(b = base, x)) != b && !casBase(b, r)) {
            boolean uncontended = true;
            if (as == null || (m = as.length - 1) < 0 ||
                (a = as[getProbe() & m]) == null ||
                !(uncontended =
                  (r = function.applyAsLong(v = a.value, x)) == v ||
                  a.cas(v, r)))
                longAccumulate(x, function, uncontended);
        }
!!!9288322.java!!!	get() : long
        Cell[] as = cells; Cell a;
        long result = base;
        if (as != null) {
            for (int i = 0; i < as.length; ++i) {
                if ((a = as[i]) != null)
                    result = function.applyAsLong(result, a.value);
            }
        }
        return result;
!!!9288450.java!!!	reset() : void
        Cell[] as = cells; Cell a;
        base = identity;
        if (as != null) {
            for (int i = 0; i < as.length; ++i) {
                if ((a = as[i]) != null)
                    a.value = identity;
            }
        }
!!!9288578.java!!!	getThenReset() : long
        Cell[] as = cells; Cell a;
        long result = base;
        base = identity;
        if (as != null) {
            for (int i = 0; i < as.length; ++i) {
                if ((a = as[i]) != null) {
                    long v = a.value;
                    a.value = identity;
                    result = function.applyAsLong(result, v);
                }
            }
        }
        return result;
!!!9288706.java!!!	toString() : String
        return Long.toString(get());
!!!9288834.java!!!	longValue() : long
        return get();
!!!9288962.java!!!	intValue() : int
        return (int)get();
!!!9289090.java!!!	floatValue() : float
        return (float)get();
!!!9289218.java!!!	doubleValue() : double
        return (double)get();
!!!9289602.java!!!	writeReplace() : Object
        return new SerializationProxy(this);
!!!9289730.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new java.io.InvalidObjectException("Proxy required");
