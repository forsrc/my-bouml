format 222
"readers" // jdk1.8::com::sun::org::apache::xml::internal::resolver::readers
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xml/internal/resolver/readers/"
  java_package "com.sun.org.apache.xml.internal.resolver.readers"
  classview 165634 "readers"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 748034 "CatalogReader"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The CatalogReader interface.

<p>The Catalog class requires that classes implement this interface
in order to be used to read catalogs. Examples of CatalogReaders
include the TextCatalogReader, the SAXCatalogReader, and the
DOMCatalogReader.</p>

@see Catalog

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      operation 5269506 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "fileUrl" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 253442 // MalformedURLException
	  exception class_ref 146818 // IOException
	  exception class_ref 748162 // CatalogException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a catalog from a file.

<p>This class reads a catalog from a URL.</p>

@param catalog The catalog for which this reader is called.
@param fileUrl The URL of a document to be read.
@throws MalformedURLException if the specified URL cannot be
turned into a URL object.
@throws IOException if the URL cannot be read.
@throws UnknownCatalogFormatException if the catalog format is
not recognized.
@throws UnparseableCatalogException if the catalog cannot be parsed.
(For example, if it is supposed to be XML and isn't well-formed.)
"
      end

      operation 5269634 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 748162 // CatalogException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a catalog from an input stream.

<p>This class reads a catalog from an input stream.</p>

@param catalog The catalog for which this reader is called.
@param is The input stream that is to be read.
@throws IOException if the URL cannot be read.
@throws UnknownCatalogFormatException if the catalog format is
not recognized.
@throws UnparseableCatalogException if the catalog cannot be parsed.
(For example, if it is supposed to be XML and isn't well-formed.)
"
      end
    end

    class 749186 "DOMCatalogParser"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The DOMCatalogParser interface.

<p>This interface must be implemented in order for a class to
participate as a parser for the DOMCatalogReader.

@see Catalog
@see DOMCatalogReader

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      operation 5269762 "parseCatalogEntry"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "node" type class_ref 317570 // Node
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a DOM node as a catalog entry.

<p>This method is expected to analyze the specified node and
construct appropriate catalog entry(ies) from it.</p>

@param catalog The catalog for which this node is being considered.
@param node The DOM Node from the catalog.
"
      end
    end

    class 749314 "DOMCatalogReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A DOM-based CatalogReader.

<p>This class is used to read XML Catalogs using the DOM. This reader
has an advantage over the SAX-based reader that it can analyze the
DOM tree rather than simply a series of SAX events. It has the disadvantage
that it requires all of the code necessary to build and walk a DOM
tree.</p>

<p>Since the choice of CatalogReaders (in the InputStream case) can only
be made on the basis of MIME type, the following problem occurs: only
one CatalogReader can exist for all XML mime types. In order to get
around this problem, the DOMCatalogReader relies on a set of external
CatalogParsers to actually build the catalog.</p>

<p>The selection of CatalogParsers is made on the basis of the QName
of the root element of the document.</p>


@see Catalog
@see CatalogReader
@see SAXCatalogReader
@see TextCatalogReader
@see DOMCatalogParser

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2401794 // <realization>
	relation 2401794 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2401794 // <realization>
	  b parent class_ref 748034 // CatalogReader
      end

      classrelation 2401922 // namespaceMap (<unidirectional association>)
	relation 2401922 --->
	  a role_name "namespaceMap" init_value " new HashMap<>()" protected
	    comment "
Mapping table from QNames to CatalogParser classes.

<p>Each key in this hash table has the form \"elementname\"
or \"{namespaceuri}elementname\". The former is used if the
namespace URI is null.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 2401922 // namespaceMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 5269890 "setCatalogParser"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "rootElement" type class_ref 128130 // String
	  param inout name "parserClass" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a new parser to the reader.

<p>This method associates the specified parserClass with the
namespaceURI/rootElement names specified.</p>

@param namespaceURI The namespace URI. <em>Not</em> the prefix.
@param rootElement The name of the root element.
@param parserClass The name of the parserClass to instantiate
for this kind of catalog.
"
      end

      operation 5270018 "getCatalogParser"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "rootElement" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of the parser class for a given catalog type.

<p>This method returns the parserClass associated with the
namespaceURI/rootElement names specified.</p>

@param namespaceURI The namespace URI. <em>Not</em> the prefix.
@param rootElement The name of the root element.
@return The parser class.
"
      end

      operation 5270146 "DOMCatalogReader"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Null constructor; something for subclasses to call.
"
      end

      operation 5270274 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 748162 // CatalogException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a catalog from an input stream.

<p>This class reads a catalog from an input stream:</p>

<ul>
<li>Based on the QName of the root element, it determines which
parser to instantiate for this catalog.</li>
<li>It constructs a DOM Document from the catalog and</li>
<li>For each child of the root node, it calls the parser's
parseCatalogEntry method. This method is expected to make
appropriate calls back into the catalog to add entries for the
entries in the catalog. It is free to do this in whatever manner
is appropriate (perhaps using just the node passed in, perhaps
wandering arbitrarily throughout the tree).</li>
</ul>

@param catalog The catalog for which this reader is called.
@param is The input stream that is to be read.
@throws IOException if the URL cannot be read.
@throws UnknownCatalogFormatException if the catalog format is
not recognized.
@throws UnparseableCatalogException if the catalog cannot be parsed.
(For example, if it is supposed to be XML and isn't well-formed or
if the parser class cannot be instantiated.)
"
      end

      operation 5270402 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "fileUrl" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 253442 // MalformedURLException
	  exception class_ref 146818 // IOException
	  exception class_ref 748162 // CatalogException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read the catalog behind the specified URL.

@see #readCatalog(Catalog, InputStream)

@param catalog The catalog for which we are reading.
@param fileUrl The URL of the document that should be read.

@throws MalformedURLException if the specified URL cannot be
turned into a URL object.
@throws IOException if the URL cannot be read.
@throws UnknownCatalogFormatException if the catalog format is
not recognized.
@throws UnparseableCatalogException if the catalog cannot be parsed.
(For example, if it is supposed to be XML and isn't well-formed.)
"
      end
    end

    class 749442 "ExtendedXMLCatalogReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parse Extended OASIS Entity Resolution Technical Committee
XML Catalog files.

@see Catalog

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2404482 // <generalisation>
	relation 2404482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2404482 // <generalisation>
	  b parent class_ref 749570 // OASISXMLCatalogReader
      end

      classrelation 2404610 // extendedNamespaceName (<unidirectional association>)
	relation 2404610 --->
	  a role_name "extendedNamespaceName" init_value " \"http://nwalsh.com/xcatalog/1.0\"" class_relation const_relation public
	    comment " The namespace name of extended catalog elements 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2404610 // extendedNamespaceName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5276802 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "atts" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The SAX <code>startElement</code> method recognizes elements
from the plain catalog format and instantiates CatalogEntry
objects for them.

@param namespaceURI The namespace name of the element.
@param localName The local name of the element.
@param qName The QName of the element.
@param atts The list of attributes on the element.

@see CatalogEntry
"
      end

      operation 5276930 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endElement</code> method does nothing. "
      end
    end

    class 749570 "OASISXMLCatalogReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parse OASIS Entity Resolution Technical Committee
XML Catalog files.

@see Catalog

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2403202 // <generalisation>
	relation 2403202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2403202 // <generalisation>
	  b parent class_ref 749698 // SAXCatalogReader
      end

      classrelation 2403586 // <realization>
	relation 2403586 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2403586 // <realization>
	  b parent class_ref 749826 // SAXCatalogParser
      end

      classrelation 2403714 // catalog (<unidirectional association>)
	relation 2403714 --->
	  a role_name "catalog" init_value " null" protected
	    comment " The catalog object needs to be stored by the object so that
SAX callbacks can use it.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2403714 // catalog (<unidirectional association>)
	  b parent class_ref 737154 // Catalog
      end

      classrelation 2403842 // namespaceName (<unidirectional association>)
	relation 2403842 --->
	  a role_name "namespaceName" init_value " \"urn:oasis:names:tc:entity:xmlns:xml:catalog\"" class_relation const_relation public
	    comment " The namespace name of OASIS ERTC catalogs 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2403842 // namespaceName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2403970 // tr9401NamespaceName (<unidirectional association>)
	relation 2403970 --->
	  a role_name "tr9401NamespaceName" init_value " \"urn:oasis:names:tc:entity:xmlns:tr9401:catalog\"" class_relation const_relation public
	    comment " The namespace name of OASIS ERTC TR9401 catalog extension 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2403970 // tr9401NamespaceName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2404098 // baseURIStack (<unidirectional association>)
	relation 2404098 --->
	  a role_name "baseURIStack" init_value " new Stack()" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2404098 // baseURIStack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      classrelation 2404226 // overrideStack (<unidirectional association>)
	relation 2404226 --->
	  a role_name "overrideStack" init_value " new Stack()" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2404226 // overrideStack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      classrelation 2404354 // namespaceStack (<unidirectional association>)
	relation 2404354 --->
	  a role_name "namespaceStack" init_value " new Stack()" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2404354 // namespaceStack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      operation 5274754 "setCatalog"
	public explicit_return_type "void"
	nparams 1
	  param inout name "catalog" type class_ref 737154 // Catalog
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the current catalog. "
      end

      operation 5274882 "getCatalog"
	public return_type class_ref 737154 // Catalog
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the current catalog. "
      end

      operation 5275010 "inExtensionNamespace"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Are we in an extension namespace?

@return true if the current stack of open namespaces includes
              an extension namespace.
"
      end

      operation 5275138 "setDocumentLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ----------------------------------------------------------------------
 Implement the SAX ContentHandler interface
 The SAX <code>setDocumentLocator</code> method does nothing. "
      end

      operation 5275266 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>startDocument</code> method does nothing. "
      end

      operation 5275394 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endDocument</code> method does nothing. "
      end

      operation 5275522 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "atts" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The SAX <code>startElement</code> method recognizes elements
from the plain catalog format and instantiates CatalogEntry
objects for them.

@param namespaceURI The namespace name of the element.
@param localName The local name of the element.
@param qName The QName of the element.
@param atts The list of attributes on the element.

@see CatalogEntry
"
      end

      operation 5275650 "checkAttributes"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "atts" type class_ref 593410 // Attributes
	  param inout name "attName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5275778 "checkAttributes"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "atts" type class_ref 593410 // Attributes
	  param inout name "attName1" type class_ref 128130 // String
	  param inout name "attName2" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5275906 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endElement</code> method does nothing. "
      end

      operation 5276034 "characters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>characters</code> method does nothing. "
      end

      operation 5276162 "ignorableWhitespace"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>ignorableWhitespace</code> method does nothing. "
      end

      operation 5276290 "processingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>processingInstruction</code> method does nothing. "
      end

      operation 5276418 "skippedEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>skippedEntity</code> method does nothing. "
      end

      operation 5276546 "startPrefixMapping"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>startPrefixMapping</code> method does nothing. "
      end

      operation 5276674 "endPrefixMapping"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endPrefixMapping</code> method does nothing. "
      end
    end

    class 749698 "SAXCatalogReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A SAX-based CatalogReader.

<p>This class is used to read XML Catalogs using the SAX. This reader
has an advantage over the DOM-based reader in that it functions on
the stream of SAX events. It has the disadvantage
that it cannot look around in the tree.</p>

<p>Since the choice of CatalogReaders (in the InputStream case) can only
be made on the basis of MIME type, the following problem occurs: only
one CatalogReader can exist for all XML mime types. In order to get
around this problem, the SAXCatalogReader relies on a set of external
CatalogParsers to actually build the catalog.</p>

<p>The selection of CatalogParsers is made on the basis of the QName
of the root element of the document.</p>

@see Catalog
@see CatalogReader
@see SAXCatalogReader
@see TextCatalogReader
@see DOMCatalogParser

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2402050 // <realization>
	relation 2402050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2402050 // <realization>
	  b parent class_ref 748034 // CatalogReader
      end

      classrelation 2402178 // <realization>
	relation 2402178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2402178 // <realization>
	  b parent class_ref 605954 // ContentHandler
      end

      classrelation 2402306 // <realization>
	relation 2402306 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2402306 // <realization>
	  b parent class_ref 722178 // DocumentHandler
      end

      classrelation 2402434 // parserFactory (<unidirectional association>)
	relation 2402434 --->
	  a role_name "parserFactory" init_value " null" protected
	    comment " The SAX Parser Factory 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2402434 // parserFactory (<unidirectional association>)
	  b parent class_ref 587778 // SAXParserFactory
      end

      classrelation 2402562 // parserClass (<unidirectional association>)
	relation 2402562 --->
	  a role_name "parserClass" init_value " null" protected
	    comment " The SAX Parser Class 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2402562 // parserClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 2402690 // namespaceMap (<unidirectional association>)
	relation 2402690 --->
	  a role_name "namespaceMap" init_value " new HashMap<>()" protected
	    comment "
Mapping table from QNames to CatalogParser classes.

<p>Each key in this hash table has the form \"elementname\"
or \"{namespaceuri}elementname\". The former is used if the
namespace URI is null.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 2402690 // namespaceMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 2402818 // saxParser (<unidirectional association>)
	relation 2402818 --->
	  a role_name "saxParser" init_value " null" private
	    comment " The parser in use for the current catalog. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2402818 // saxParser (<unidirectional association>)
	  b parent class_ref 749826 // SAXCatalogParser
      end

      attribute 1176962 "abandonHope"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set if something goes horribly wrong. It allows the class to
ignore the rest of the events that are received.

"
      end

      classrelation 2402946 // catalog (<unidirectional association>)
	relation 2402946 --->
	  a role_name "catalog" private
	    comment " The Catalog that we're working for. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2402946 // catalog (<unidirectional association>)
	  b parent class_ref 737154 // Catalog
      end

      operation 5271554 "setParserFactory"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parserFactory" type class_ref 587778 // SAXParserFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the XML SAX Parser Factory.
"
      end

      operation 5271682 "setParserClass"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parserClass" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the XML SAX Parser Class
"
      end

      operation 5271810 "getParserFactory"
	public return_type class_ref 587778 // SAXParserFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the parser factory currently in use. "
      end

      operation 5271938 "getParserClass"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the parser class currently in use. "
      end

      classrelation 2403074 // debug (<unidirectional association>)
	relation 2403074 --->
	  a role_name "debug" init_value " CatalogManager.getStaticManager().debug" protected
	    comment " The debug class to use for this reader.

This is a bit of a hack. Anyway, whenever we read for a catalog,
we extract the debug object
from the catalog's manager so that we can use it to print messages.

In production, we don't really expect any messages so it doesn't
really matter. But it's still a bit of a hack.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2403074 // debug (<unidirectional association>)
	  b parent class_ref 748546 // Debug
      end

      operation 5272066 "SAXCatalogReader"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The constructor "
      end

      operation 5272194 "SAXCatalogReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "parserFactory" type class_ref 587778 // SAXParserFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The constructor "
      end

      operation 5272322 "SAXCatalogReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "parserClass" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The constructor "
      end

      operation 5272450 "setCatalogParser"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "rootElement" type class_ref 128130 // String
	  param inout name "parserClass" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the SAXCatalogParser class for the given namespace/root
element type.
"
      end

      operation 5272578 "getCatalogParser"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "rootElement" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the SAXCatalogParser class for the given namespace/root
element type.
"
      end

      operation 5272706 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "fileUrl" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 253442 // MalformedURLException
	  exception class_ref 146818 // IOException
	  exception class_ref 748162 // CatalogException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse an XML Catalog file.

@param catalog The catalog to which this catalog file belongs
@param fileUrl The URL or filename of the catalog file to process

@throws MalformedURLException Improper fileUrl
@throws IOException Error reading catalog file
"
      end

      operation 5272834 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 748162 // CatalogException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse an XML Catalog stream.

@param catalog The catalog to which this catalog file belongs
@param is The input stream from which the catalog will be read

@throws MalformedURLException Improper fileUrl
@throws IOException Error reading catalog file
@throws CatalogException A Catalog exception
"
      end

      operation 5272962 "setDocumentLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ----------------------------------------------------------------------
 Implement the SAX ContentHandler interface
 The SAX <code>setDocumentLocator</code> method. Does nothing. "
      end

      operation 5273090 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>startDocument</code> method. Does nothing. "
      end

      operation 5273218 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endDocument</code> method. Does nothing. "
      end

      operation 5273346 "startElement"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "atts" type class_ref 636930 // AttributeList
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The SAX <code>startElement</code> method.

<p>The catalog parser is selected based on the namespace of the
first element encountered in the catalog.</p>
"
      end

      operation 5273474 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "atts" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The SAX2 <code>startElement</code> method.

<p>The catalog parser is selected based on the namespace of the
first element encountered in the catalog.</p>
"
      end

      operation 5273602 "endElement"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endElement</code> method. Does nothing. "
      end

      operation 5273730 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX2 <code>endElement</code> method. Does nothing. "
      end

      operation 5273858 "characters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>characters</code> method. Does nothing. "
      end

      operation 5273986 "ignorableWhitespace"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>ignorableWhitespace</code> method. Does nothing. "
      end

      operation 5274114 "processingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>processingInstruction</code> method. Does nothing. "
      end

      operation 5274242 "startPrefixMapping"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>startPrefixMapping</code> method. Does nothing. "
      end

      operation 5274370 "endPrefixMapping"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endPrefixMapping</code> method. Does nothing. "
      end

      operation 5274498 "skippedEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>skippedentity</code> method. Does nothing. "
      end
    end

    class 749826 "SAXCatalogParser"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The SAXCatalogParser interface.

<p>This interface must be implemented in order for a class to
participate as a parser for the SAXCatalogReader.

@see Catalog
@see SAXCatalogReader

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2403330 // <generalisation>
	relation 2403330 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2403330 // <generalisation>
	  b parent class_ref 605954 // ContentHandler
      end

      classrelation 2403458 // <generalisation>
	relation 2403458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2403458 // <generalisation>
	  b parent class_ref 722178 // DocumentHandler
      end

      operation 5274626 "setCatalog"
	public explicit_return_type "void"
	nparams 1
	  param inout name "catalog" type class_ref 737154 // Catalog
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the Catalog for which parsing is being performed. "
      end
    end

    class 749954 "SAXParserHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An entity-resolving DefaultHandler.

<p>This class provides a SAXParser DefaultHandler that performs
entity resolution.
</p>

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>
"
      classrelation 2404738 // <generalisation>
	relation 2404738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2404738 // <generalisation>
	  b parent class_ref 635906 // DefaultHandler
      end

      classrelation 2404866 // er (<unidirectional association>)
	relation 2404866 --->
	  a role_name "er" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2404866 // er (<unidirectional association>)
	  b parent class_ref 619138 // EntityResolver
      end

      classrelation 2404994 // ch (<unidirectional association>)
	relation 2404994 --->
	  a role_name "ch" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2404994 // ch (<unidirectional association>)
	  b parent class_ref 605954 // ContentHandler
      end

      operation 5277058 "SAXParserHandler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5277186 "setEntityResolver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "er" type class_ref 619138 // EntityResolver
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5277314 "setContentHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ch" type class_ref 605954 // ContentHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5277442 "resolveEntity"
	public return_type class_ref 606594 // InputSource
	nparams 2
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Entity Resolver"
      end

      operation 5277570 "characters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Content Handler"
      end

      operation 5277698 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5277826 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5277954 "endPrefixMapping"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5278082 "ignorableWhitespace"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5278210 "processingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5278338 "setDocumentLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5278466 "skippedEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5278594 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5278722 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "atts" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5278850 "startPrefixMapping"
	public explicit_return_type "void"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 750082 "TextCatalogReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parses plain text Catalog files.

<p>This class reads plain text Open Catalog files.</p>

@see Catalog

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2405122 // <realization>
	relation 2405122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2405122 // <realization>
	  b parent class_ref 748034 // CatalogReader
      end

      classrelation 2405250 // catfile (<unidirectional association>)
	relation 2405250 --->
	  a role_name "catfile" init_value " null" protected
	    comment " The input stream used to read the catalog 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2405250 // catfile (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      attribute 1177090 "stack"
	protected explicit_type "int"
	multiplicity "[]"
	init_value " new int[3]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character lookahead stack. Reading a catalog sometimes requires
up to two characters of lookahead.

"
      end

      classrelation 2405378 // tokenStack (<unidirectional association>)
	relation 2405378 --->
	  a role_name "tokenStack" init_value " new Stack()" protected
	    comment "
Token stack. Recognizing an unexpected catalog entry requires
the ability to \"push back\" a token.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2405378 // tokenStack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      attribute 1177218 "top"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current position on the lookahead stack 
"
      end

      attribute 1177346 "caseSensitive"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Are keywords in the catalog case sensitive? 
"
      end

      operation 5278978 "TextCatalogReader"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a CatalogReader object.
"
      end

      operation 5279106 "setCaseSensitive"
	public explicit_return_type "void"
	nparams 1
	  param inout name "isCaseSensitive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5279234 "getCaseSensitive"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5279362 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "fileUrl" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 253442 // MalformedURLException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start parsing a text catalog file. The file is
actually read and parsed
as needed by <code>nextEntry</code>.</p>

@param fileUrl  The URL or filename of the catalog file to process

@throws MalformedURLException Improper fileUrl
@throws IOException Error reading catalog file
"
      end

      operation 5279490 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 253442 // MalformedURLException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5279618 "finalize"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The destructor.

<p>Makes sure the catalog file is closed.</p>
"
      end

      operation 5279746 "nextToken"
	protected return_type class_ref 128130 // String
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 748162 // CatalogException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -----------------------------------------------------------------

Return the next token in the catalog file.

<p>FYI: This code does not throw any sort of exception for
a file that contains an n

@return The Catalog file token from the input stream.
@throws IOException If an error occurs reading from the stream.
"
      end

      operation 5279874 "nextChar"
	protected explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the next logical character from the input stream.

@return The next (logical) character from the input stream. The
character may be buffered from a previous lookahead.

@throws IOException If an error occurs reading from the stream.
"
      end
    end

    class 750210 "TR9401CatalogReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parses OASIS Open Catalog files.

<p>This class reads OASIS Open Catalog files, returning a stream
of tokens.</p>

<p>This code interrogates the following non-standard system properties:</p>

<dl>
<dt><b>xml.catalog.debug</b></dt>
<dd><p>Sets the debug level. A value of 0 is assumed if the
property is not set or is not a number.</p></dd>
</dl>

@see Catalog

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2405506 // <generalisation>
	relation 2405506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2405506 // <generalisation>
	  b parent class_ref 750082 // TextCatalogReader
      end

      operation 5280002 "readCatalog"
	public explicit_return_type "void"
	nparams 2
	  param inout name "catalog" type class_ref 737154 // Catalog
	  param inout name "is" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 253442 // MalformedURLException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start parsing an OASIS TR9401 Open Catalog file. The file is
actually read and parsed
as needed by <code>nextEntry</code>.

<p>In a TR9401 Catalog the 'DELEGATE' entry delegates public
identifiers. There is no delegate entry for system identifiers
or URIs.</p>

@param catalog The Catalog to populate
@param is The input stream from which to read the TR9401 Catalog

@throws MalformedURLException Improper fileUrl
@throws IOException Error reading catalog file
"
      end
    end

    class 750338 "XCatalogReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parse \"xcatalog\" XML Catalog files, this is the XML Catalog format
developed by John Cowan and supported by Apache.

@see Catalog

@author Norman Walsh
<a href=\"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>

"
      classrelation 2405634 // <generalisation>
	relation 2405634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2405634 // <generalisation>
	  b parent class_ref 749698 // SAXCatalogReader
      end

      classrelation 2405762 // <realization>
	relation 2405762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2405762 // <realization>
	  b parent class_ref 749826 // SAXCatalogParser
      end

      classrelation 2405890 // catalog (<unidirectional association>)
	relation 2405890 --->
	  a role_name "catalog" init_value " null" protected
	    comment " The catalog object needs to be stored by the object so that
SAX callbacks can use it.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2405890 // catalog (<unidirectional association>)
	  b parent class_ref 737154 // Catalog
      end

      operation 5280130 "setCatalog"
	public explicit_return_type "void"
	nparams 1
	  param inout name "catalog" type class_ref 737154 // Catalog
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the current catalog. "
      end

      operation 5280258 "getCatalog"
	public return_type class_ref 737154 // Catalog
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the current catalog. "
      end

      operation 5280386 "XCatalogReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "parserFactory" type class_ref 587778 // SAXParserFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The constructor "
      end

      operation 5280514 "setDocumentLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ----------------------------------------------------------------------
 Implement the SAX DocumentHandler interface
 The SAX <code>setDocumentLocator</code> method does nothing. "
      end

      operation 5280642 "startDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>startDocument</code> method does nothing. "
      end

      operation 5280770 "endDocument"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endDocument</code> method does nothing. "
      end

      operation 5280898 "startElement"
	public explicit_return_type "void"
	nparams 4
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "atts" type class_ref 593410 // Attributes
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The SAX <code>startElement</code> method recognizes elements
from the plain catalog format and instantiates CatalogEntry
objects for them.

@param namespaceURI The namespace name of the element.
@param localName The local name of the element.
@param qName The QName of the element.
@param atts The list of attributes on the element.

@see CatalogEntry
"
      end

      operation 5281026 "endElement"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>endElement</code> method does nothing. "
      end

      operation 5281154 "characters"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>characters</code> method does nothing. "
      end

      operation 5281282 "ignorableWhitespace"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>ignorableWhitespace</code> method does nothing. "
      end

      operation 5281410 "processingInstruction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The SAX <code>processingInstruction</code> method does nothing. "
      end
    end
  end

  deploymentview 159362 "readers"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 528002 "CatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.MalformedURLException;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
import java.io.InputStream;
import com.sun.org.apache.xml.internal.resolver.Catalog;
${definition}"
      associated_elems
	class_ref 748034 // CatalogReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 CatalogReader.java - An interface for reading catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 528130 "DOMCatalogParser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.resolver.Catalog;
import org.w3c.dom.Node;
${definition}"
      associated_elems
	class_ref 749186 // DOMCatalogParser
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 DOMCatalogParser.java - An interface for reading catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 528258 "DOMCatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.resolver.Catalog;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
import com.sun.org.apache.xml.internal.resolver.helpers.Namespaces;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 749314 // DOMCatalogReader
      end
      comment "Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 DOMCatalogReader.java - Read XML Catalog files"
    end

    artifact 528514 "SAXCatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.resolver.Catalog;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
import com.sun.org.apache.xml.internal.resolver.CatalogManager;
import com.sun.org.apache.xml.internal.resolver.helpers.Debug;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.AttributeList;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.DocumentHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 749698 // SAXCatalogReader
      end
      comment "Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 SAXCatalogReader.java - Read XML Catalog files"
    end

    artifact 528642 "SAXCatalogParser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.resolver.Catalog;
import org.xml.sax.*;
${definition}"
      associated_elems
	class_ref 749826 // SAXCatalogParser
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 SAXCatalogParser.java - An interface for reading catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 528770 "OASISXMLCatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Stack;
import java.util.Vector;
import java.util.Enumeration;
import com.sun.org.apache.xml.internal.resolver.Catalog;
import com.sun.org.apache.xml.internal.resolver.CatalogEntry;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
import com.sun.org.apache.xml.internal.resolver.helpers.PublicId;
import org.xml.sax.*;
import org.w3c.dom.*;
${definition}"
      associated_elems
	class_ref 749570 // OASISXMLCatalogReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 OASISXMLCatalogReader.java - Read XML Catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 528898 "ExtendedXMLCatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import com.sun.org.apache.xml.internal.resolver.Catalog;
import com.sun.org.apache.xml.internal.resolver.Resolver;
import com.sun.org.apache.xml.internal.resolver.CatalogEntry;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
import org.xml.sax.*;
import org.w3c.dom.*;
${definition}"
      associated_elems
	class_ref 749442 // ExtendedXMLCatalogReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 ExtendedXMLCatalogReader.java - Read XML Catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 529026 "SAXParserHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
${definition}"
      associated_elems
	class_ref 749954 // SAXParserHandler
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 SAXParserHandler.java - An entity-resolving DefaultHandler

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 529154 "TextCatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.net.URL;
import java.net.URLConnection;
import java.net.MalformedURLException;
import java.util.Vector;
import java.util.Stack;
import com.sun.org.apache.xml.internal.resolver.Catalog;
import com.sun.org.apache.xml.internal.resolver.CatalogEntry;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
import com.sun.org.apache.xml.internal.resolver.readers.CatalogReader;
${definition}"
      associated_elems
	class_ref 750082 // TextCatalogReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 TextCatalogReader.java - Read text/plain Catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 529282 "TR9401CatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Vector;
import com.sun.org.apache.xml.internal.resolver.Catalog;
import com.sun.org.apache.xml.internal.resolver.CatalogEntry;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
${definition}"
      associated_elems
	class_ref 750210 // TR9401CatalogReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 TR9401CatalogReader.java - Read OASIS Catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 529410 "XCatalogReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import com.sun.org.apache.xml.internal.resolver.Catalog;
import com.sun.org.apache.xml.internal.resolver.CatalogEntry;
import com.sun.org.apache.xml.internal.resolver.CatalogException;
import com.sun.org.apache.xml.internal.resolver.helpers.PublicId;
import org.xml.sax.*;
import javax.xml.parsers.*;
${definition}"
      associated_elems
	class_ref 750338 // XCatalogReader
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 XCatalogReader.java - Read XML Catalog files

Copyright 2001-2004 The Apache Software Foundation or its licensors,
as applicable.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
