class XPathContext
!!!5785218.java!!!	getDTMManager() : DTMManager
     return m_dtmManager;
!!!5785346.java!!!	setSecureProcessing(inout flag : boolean) : void
    m_isSecureProcessing = flag;
!!!5785474.java!!!	isSecureProcessing() : boolean
    return m_isSecureProcessing;
!!!5785602.java!!!	getDTM(inout source : Source, inout unique : boolean, inout wsfilter : DTMWSFilter, inout incremental : boolean, inout doIndexing : boolean) : DTM
    return m_dtmManager.getDTM(source, unique, wsfilter,
                               incremental, doIndexing);
!!!5785730.java!!!	getDTM(in nodeHandle : int) : DTM
    return m_dtmManager.getDTM(nodeHandle);
!!!5785858.java!!!	getDTMHandleFromNode(inout node : Node) : int
    return m_dtmManager.getDTMHandleFromNode(node);
!!!5785986.java!!!	getDTMIdentity(inout dtm : DTM) : int
    return m_dtmManager.getDTMIdentity(dtm);
!!!5786114.java!!!	createDocumentFragment() : DTM
    return m_dtmManager.createDocumentFragment();
!!!5786242.java!!!	release(inout dtm : DTM, inout shouldHardDelete : boolean) : boolean
    // %REVIEW% If it's a DTM which may contain multiple Result Tree
    // Fragments, we can't discard it unless we know not only that it
    // is empty, but that the XPathContext itself is going away. So do
    // _not_ accept the request. (May want to do it as part of
    // reset(), though.)
    if(m_rtfdtm_stack!=null && m_rtfdtm_stack.contains(dtm))
    {
      return false;
    }

    return m_dtmManager.release(dtm, shouldHardDelete);
!!!5786370.java!!!	createDTMIterator(inout xpathCompiler : Object, in pos : int) : DTMIterator
    return m_dtmManager.createDTMIterator(xpathCompiler, pos);
!!!5786498.java!!!	createDTMIterator(inout xpathString : String, inout presolver : PrefixResolver) : DTMIterator
    return m_dtmManager.createDTMIterator(xpathString, presolver);
!!!5786626.java!!!	createDTMIterator(in whatToShow : int, inout filter : DTMFilter, inout entityReferenceExpansion : boolean) : DTMIterator
    return m_dtmManager.createDTMIterator(whatToShow, filter, entityReferenceExpansion);
!!!5786754.java!!!	createDTMIterator(in node : int) : DTMIterator
    // DescendantIterator iter = new DescendantIterator();
    DTMIterator iter = new com.sun.org.apache.xpath.internal.axes.OneStepIteratorForward(Axis.SELF);
    iter.setRoot(node, this);
    return iter;
    // return m_dtmManager.createDTMIterator(node);
!!!5786882.java!!!	XPathContext()
    this(true);
!!!5787010.java!!!	XPathContext(inout useServicesMechanism : boolean)
      init(useServicesMechanism);
!!!5787138.java!!!	XPathContext(inout owner : Object)
    m_owner = owner;
    try {
      m_ownerGetErrorListener = m_owner.getClass().getMethod("getErrorListener", new Class[] {});
    }
    catch (NoSuchMethodException nsme) {}
    init(true);
!!!5787266.java!!!	init(inout useServicesMechanism : boolean) : void
    m_prefixResolvers.push(null);
    m_currentNodes.push(DTM.NULL);
    m_currentExpressionNodes.push(DTM.NULL);
    m_saxLocations.push(null);
    m_useServicesMechanism = useServicesMechanism;
    m_dtmManager = DTMManager.newInstance(
                   com.sun.org.apache.xpath.internal.objects.XMLStringFactoryImpl.getFactory()
                   );
!!!5787394.java!!!	reset() : void
    releaseDTMXRTreeFrags();
        // These couldn't be disposed of earlier (see comments in release()); zap them now.
        if(m_rtfdtm_stack!=null)
                 for (java.util.Enumeration e = m_rtfdtm_stack.elements() ; e.hasMoreElements() ;)
                        m_dtmManager.release((DTM)e.nextElement(), true);

    m_rtfdtm_stack=null; // drop our references too
    m_which_rtfdtm=-1;

    if(m_global_rtfdtm!=null)
                        m_dtmManager.release(m_global_rtfdtm,true);
    m_global_rtfdtm=null;


    m_dtmManager = DTMManager.newInstance(
                   com.sun.org.apache.xpath.internal.objects.XMLStringFactoryImpl.getFactory()
                   );

    m_saxLocations.removeAllElements();
        m_axesIteratorStack.removeAllElements();
        m_contextNodeLists.removeAllElements();
        m_currentExpressionNodes.removeAllElements();
        m_currentNodes.removeAllElements();
        m_iteratorRoots.RemoveAllNoClear();
        m_predicatePos.removeAllElements();
        m_predicateRoots.RemoveAllNoClear();
        m_prefixResolvers.removeAllElements();

        m_prefixResolvers.push(null);
    m_currentNodes.push(DTM.NULL);
    m_currentExpressionNodes.push(DTM.NULL);
    m_saxLocations.push(null);
!!!5787522.java!!!	setSAXLocator(inout location : SourceLocator) : void
    m_saxLocations.setTop(location);
!!!5787650.java!!!	pushSAXLocator(inout location : SourceLocator) : void
    m_saxLocations.push(location);
!!!5787778.java!!!	pushSAXLocatorNull() : void
    m_saxLocations.push(null);
!!!5787906.java!!!	popSAXLocator() : void
    m_saxLocations.pop();
!!!5788034.java!!!	getSAXLocator() : SourceLocator
    return (SourceLocator) m_saxLocations.peek();
!!!5788162.java!!!	getOwnerObject() : Object
    return m_owner;
!!!5788290.java!!!	getVarStack() : VariableStack
    return m_variableStacks;
!!!5788418.java!!!	setVarStack(inout varStack : VariableStack) : void
    m_variableStacks = varStack;
!!!5788546.java!!!	getSourceTreeManager() : SourceTreeManager
    return m_sourceTreeManager;
!!!5788674.java!!!	setSourceTreeManager(inout mgr : SourceTreeManager) : void
    m_sourceTreeManager = mgr;
!!!5788802.java!!!	getErrorListener() : ErrorListener

    if (null != m_errorListener)
        return m_errorListener;

    ErrorListener retval = null;

    try {
      if (null != m_ownerGetErrorListener)
        retval = (ErrorListener) m_ownerGetErrorListener.invoke(m_owner, new Object[] {});
    }
    catch (Exception e) {}

    if (null == retval)
    {
      if (null == m_defaultErrorListener)
        m_defaultErrorListener = new com.sun.org.apache.xml.internal.utils.DefaultErrorHandler();
      retval = m_defaultErrorListener;
    }

    return retval;
!!!5788930.java!!!	setErrorListener(inout listener : ErrorListener) : void
    if (listener == null)
      throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER, null)); //"Null error handler");
    m_errorListener = listener;
!!!5789058.java!!!	getURIResolver() : URIResolver
    return m_uriResolver;
!!!5789186.java!!!	setURIResolver(inout resolver : URIResolver) : void
    m_uriResolver = resolver;
!!!5789314.java!!!	getPrimaryReader() : XMLReader
    return m_primaryReader;
!!!5789442.java!!!	setPrimaryReader(inout reader : XMLReader) : void
    m_primaryReader = reader;
!!!5789570.java!!!	getContextNodeListsStack() : Stack
 return m_contextNodeLists;
!!!5789698.java!!!	setContextNodeListsStack(inout s : Stack) : void
 m_contextNodeLists = s;
!!!5789826.java!!!	getContextNodeList() : DTMIterator

    if (m_contextNodeLists.size() > 0)
      return (DTMIterator) m_contextNodeLists.peek();
    else
      return null;
!!!5789954.java!!!	pushContextNodeList(inout nl : DTMIterator) : void
    m_contextNodeLists.push(nl);
!!!5790082.java!!!	popContextNodeList() : void
        if(m_contextNodeLists.isEmpty())
          System.err.println("Warning: popContextNodeList when stack is empty!");
        else
      m_contextNodeLists.pop();
!!!5790210.java!!!	getCurrentNodeStack() : IntStack
return m_currentNodes;
!!!5790338.java!!!	setCurrentNodeStack(inout nv : IntStack) : void
 m_currentNodes = nv;
!!!5790466.java!!!	getCurrentNode() : int
    return m_currentNodes.peek();
!!!5790594.java!!!	pushCurrentNodeAndExpression(in cn : int, in en : int) : void
    m_currentNodes.push(cn);
    m_currentExpressionNodes.push(cn);
!!!5790722.java!!!	popCurrentNodeAndExpression() : void
    m_currentNodes.quickPop(1);
    m_currentExpressionNodes.quickPop(1);
!!!5790850.java!!!	pushExpressionState(in cn : int, in en : int, inout nc : PrefixResolver) : void
    m_currentNodes.push(cn);
    m_currentExpressionNodes.push(cn);
    m_prefixResolvers.push(nc);
!!!5790978.java!!!	popExpressionState() : void
    m_currentNodes.quickPop(1);
    m_currentExpressionNodes.quickPop(1);
    m_prefixResolvers.pop();
!!!5791106.java!!!	pushCurrentNode(in n : int) : void
    m_currentNodes.push(n);
!!!5791234.java!!!	popCurrentNode() : void
    m_currentNodes.quickPop(1);
!!!5791362.java!!!	pushPredicateRoot(in n : int) : void
    m_predicateRoots.push(n);
!!!5791490.java!!!	popPredicateRoot() : void
    m_predicateRoots.popQuick();
!!!5791618.java!!!	getPredicateRoot() : int
    return m_predicateRoots.peepOrNull();
!!!5791746.java!!!	pushIteratorRoot(in n : int) : void
    m_iteratorRoots.push(n);
!!!5791874.java!!!	popIteratorRoot() : void
    m_iteratorRoots.popQuick();
!!!5792002.java!!!	getIteratorRoot() : int
    return m_iteratorRoots.peepOrNull();
!!!5792130.java!!!	getCurrentExpressionNodeStack() : IntStack
 return m_currentExpressionNodes;
!!!5792258.java!!!	setCurrentExpressionNodeStack(inout nv : IntStack) : void
 m_currentExpressionNodes = nv;
!!!5792386.java!!!	getPredicatePos() : int
    return m_predicatePos.peek();
!!!5792514.java!!!	pushPredicatePos(in n : int) : void
    m_predicatePos.push(n);
!!!5792642.java!!!	popPredicatePos() : void
    m_predicatePos.pop();
!!!5792770.java!!!	getCurrentExpressionNode() : int
    return m_currentExpressionNodes.peek();
!!!5792898.java!!!	pushCurrentExpressionNode(in n : int) : void
    m_currentExpressionNodes.push(n);
!!!5793026.java!!!	popCurrentExpressionNode() : void
    m_currentExpressionNodes.quickPop(1);
!!!5793154.java!!!	getNamespaceContext() : PrefixResolver
    return (PrefixResolver) m_prefixResolvers.peek();
!!!5793282.java!!!	setNamespaceContext(inout pr : PrefixResolver) : void
    m_prefixResolvers.setTop(pr);
!!!5793410.java!!!	pushNamespaceContext(inout pr : PrefixResolver) : void
    m_prefixResolvers.push(pr);
!!!5793538.java!!!	pushNamespaceContextNull() : void
    m_prefixResolvers.push(null);
!!!5793666.java!!!	popNamespaceContext() : void
    m_prefixResolvers.pop();
!!!5793794.java!!!	getAxesIteratorStackStacks() : Stack
 return m_axesIteratorStack;
!!!5793922.java!!!	setAxesIteratorStackStacks(inout s : Stack) : void
 m_axesIteratorStack = s;
!!!5794050.java!!!	pushSubContextList(inout iter : SubContextList) : void
    m_axesIteratorStack.push(iter);
!!!5794178.java!!!	popSubContextList() : void
    m_axesIteratorStack.pop();
!!!5794306.java!!!	getSubContextList() : SubContextList
    return m_axesIteratorStack.isEmpty()
           ? null : (SubContextList) m_axesIteratorStack.peek();
!!!5794434.java!!!	getCurrentNodeList() : SubContextList
    return m_axesIteratorStack.isEmpty()
           ? null : (SubContextList) m_axesIteratorStack.elementAt(0);
!!!5794562.java!!!	getContextNode() : int
    return this.getCurrentNode();
!!!5794690.java!!!	getContextNodes() : DTMIterator

    try
    {
      DTMIterator cnl = getContextNodeList();

      if (null != cnl)
        return cnl.cloneWithReset();
      else
        return null;  // for now... this might ought to be an empty iterator.
    }
    catch (CloneNotSupportedException cnse)
    {
      return null;  // error reporting?
    }
!!!5794818.java!!!	getExpressionContext() : ExpressionContext
    return expressionContext;
!!!5796226.java!!!	getGlobalRTFDTM() : DTM
        // We probably should _NOT_ be applying whitespace filtering at this stage!
        //
        // Some magic has been applied in DTMManagerDefault to recognize this set of options
        // and generate an instance of DTM which can contain multiple documents
        // (SAX2RTFDTM). Perhaps not the optimal way of achieving that result, but
        // I didn't want to change the manager API at this time, or expose
        // too many dependencies on its internals. (Ideally, I'd like to move
        // isTreeIncomplete all the way up to DTM, so we wouldn't need to explicitly
        // specify the subclass here.)

        // If it doesn't exist, or if the one already existing is in the middle of
        // being constructed, we need to obtain a new DTM to write into. I'm not sure
        // the latter will ever arise, but I'd rather be just a bit paranoid..
        if( m_global_rtfdtm==null || m_global_rtfdtm.isTreeIncomplete() )
        {
                m_global_rtfdtm=(SAX2RTFDTM)m_dtmManager.getDTM(null,true,null,false,false);
        }
    return m_global_rtfdtm;
!!!5796354.java!!!	getRTFDTM() : DTM
        SAX2RTFDTM rtfdtm;

        // We probably should _NOT_ be applying whitespace filtering at this stage!
        //
        // Some magic has been applied in DTMManagerDefault to recognize this set of options
        // and generate an instance of DTM which can contain multiple documents
        // (SAX2RTFDTM). Perhaps not the optimal way of achieving that result, but
        // I didn't want to change the manager API at this time, or expose
        // too many dependencies on its internals. (Ideally, I'd like to move
        // isTreeIncomplete all the way up to DTM, so we wouldn't need to explicitly
        // specify the subclass here.)

        if(m_rtfdtm_stack==null)
        {
                m_rtfdtm_stack=new Vector();
                rtfdtm=(SAX2RTFDTM)m_dtmManager.getDTM(null,true,null,false,false);
    m_rtfdtm_stack.addElement(rtfdtm);
                ++m_which_rtfdtm;
        }
        else if(m_which_rtfdtm<0)
        {
                rtfdtm=(SAX2RTFDTM)m_rtfdtm_stack.elementAt(++m_which_rtfdtm);
        }
        else
        {
                rtfdtm=(SAX2RTFDTM)m_rtfdtm_stack.elementAt(m_which_rtfdtm);

                // It might already be under construction -- the classic example would be
                // an xsl:variable which uses xsl:call-template as part of its value. To
                // handle this recursion, we have to start a new RTF DTM, pushing the old
                // one onto a stack so we can return to it. This is not as uncommon a case
                // as we might wish, unfortunately, as some folks insist on coding XSLT
                // as if it were a procedural language...
                if(rtfdtm.isTreeIncomplete())
                {
                        if(++m_which_rtfdtm < m_rtfdtm_stack.size())
                                rtfdtm=(SAX2RTFDTM)m_rtfdtm_stack.elementAt(m_which_rtfdtm);
                        else
                        {
                                rtfdtm=(SAX2RTFDTM)m_dtmManager.getDTM(null,true,null,false,false);
          m_rtfdtm_stack.addElement(rtfdtm);
                        }
                }
        }

    return rtfdtm;
!!!5796482.java!!!	pushRTFContext() : void
        m_last_pushed_rtfdtm.push(m_which_rtfdtm);
        if(null!=m_rtfdtm_stack)
                ((SAX2RTFDTM)(getRTFDTM())).pushRewindMark();
!!!5796610.java!!!	popRTFContext() : void
        int previous=m_last_pushed_rtfdtm.pop();
        if(null==m_rtfdtm_stack)
                return;

        if(m_which_rtfdtm==previous)
        {
                if(previous>=0) // guard against none-active
                {
                        boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(previous))).popRewindMark();
                }
        }
        else while(m_which_rtfdtm!=previous)
        {
                // Empty each DTM before popping, so it's ready for reuse
                // _DON'T_ pop the previous, since it's still open (which is why we
                // stacked up more of these) and did not receive a mark.
                boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(m_which_rtfdtm))).popRewindMark();
                --m_which_rtfdtm;
        }
!!!5796738.java!!!	getDTMXRTreeFrag(in dtmIdentity : int) : DTMXRTreeFrag
    if(m_DTMXRTreeFrags == null){
      m_DTMXRTreeFrags = new HashMap();
    }

    if(m_DTMXRTreeFrags.containsKey(new Integer(dtmIdentity))){
       return (DTMXRTreeFrag)m_DTMXRTreeFrags.get(new Integer(dtmIdentity));
    }else{
      final DTMXRTreeFrag frag = new DTMXRTreeFrag(dtmIdentity,this);
      m_DTMXRTreeFrags.put(new Integer(dtmIdentity),frag);
      return frag ;
    }
!!!5796866.java!!!	releaseDTMXRTreeFrags() : void
    if(m_DTMXRTreeFrags == null){
      return;
    }
    final Iterator iter = (m_DTMXRTreeFrags.values()).iterator();
    while(iter.hasNext()){
      DTMXRTreeFrag frag = (DTMXRTreeFrag)iter.next();
      frag.destruct();
      iter.remove();
    }
    m_DTMXRTreeFrags = null;
