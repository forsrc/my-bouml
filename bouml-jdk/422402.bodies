class BasicInternalFrameUI
!!!2486658.java!!!	createUI(inout b : JComponent) : ComponentUI
        return new BasicInternalFrameUI((JInternalFrame)b);
!!!2486786.java!!!	BasicInternalFrameUI(inout b : JInternalFrame)
        LookAndFeel laf = UIManager.getLookAndFeel();
        if (laf instanceof BasicLookAndFeel) {
            ((BasicLookAndFeel)laf).installAWTEventListener();
        }
!!!2486914.java!!!	installUI(inout c : JComponent) : void

        frame = (JInternalFrame)c;

        installDefaults();
        installListeners();
        installComponents();
        installKeyboardActions();

        LookAndFeel.installProperty(frame, "opaque", Boolean.TRUE);
!!!2487042.java!!!	uninstallUI(inout c : JComponent) : void
        if(c != frame)
            throw new IllegalComponentStateException(
                this + " was asked to deinstall() "
                + c + " when it only knows about "
                + frame + ".");

        uninstallKeyboardActions();
        uninstallComponents();
        uninstallListeners();
        uninstallDefaults();
        updateFrameCursor();
        handler = null;
        frame = null;
!!!2487170.java!!!	installDefaults() : void
        Icon frameIcon = frame.getFrameIcon();
        if (frameIcon == null || frameIcon instanceof UIResource) {
            frame.setFrameIcon(UIManager.getIcon("InternalFrame.icon"));
        }

        // Enable the content pane to inherit background color from its
        // parent by setting its background color to null.
        Container contentPane = frame.getContentPane();
        if (contentPane != null) {
          Color bg = contentPane.getBackground();
          if (bg instanceof UIResource)
            contentPane.setBackground(null);
        }
        frame.setLayout(internalFrameLayout = createLayoutManager());
        frame.setBackground(UIManager.getLookAndFeelDefaults().getColor("control"));

        LookAndFeel.installBorder(frame, "InternalFrame.border");

!!!2487298.java!!!	installKeyboardActions() : void
        createInternalFrameListener();
        if (internalFrameListener != null) {
            frame.addInternalFrameListener(internalFrameListener);
        }

        LazyActionMap.installLazyActionMap(frame, BasicInternalFrameUI.class,
            "InternalFrame.actionMap");
!!!2487426.java!!!	loadActionMap(inout map : LazyActionMap) : void
        map.put(new UIAction("showSystemMenu") {
            public void actionPerformed(ActionEvent evt) {
                JInternalFrame iFrame = (JInternalFrame)evt.getSource();
                if (iFrame.getUI() instanceof BasicInternalFrameUI) {
                    JComponent comp = ((BasicInternalFrameUI)
                        iFrame.getUI()).getNorthPane();
                    if (comp instanceof BasicInternalFrameTitlePane) {
                        ((BasicInternalFrameTitlePane)comp).
                            showSystemMenu();
                    }
                }
            }

            public boolean isEnabled(Object sender){
                if (sender instanceof JInternalFrame) {
                    JInternalFrame iFrame = (JInternalFrame)sender;
                    if (iFrame.getUI() instanceof BasicInternalFrameUI) {
                        return ((BasicInternalFrameUI)iFrame.getUI()).
                            isKeyBindingActive();
                    }
                }
                return false;
            }
        });

        // Set the ActionMap's parent to the Auditory Feedback Action Map
        BasicLookAndFeel.installAudioActionMap(map);
!!!2487554.java!!!	installComponents() : void
        setNorthPane(createNorthPane(frame));
        setSouthPane(createSouthPane(frame));
        setEastPane(createEastPane(frame));
        setWestPane(createWestPane(frame));
!!!2487682.java!!!	installListeners() : void
        borderListener = createBorderListener(frame);
        propertyChangeListener = createPropertyChangeListener();
        frame.addPropertyChangeListener(propertyChangeListener);
        installMouseHandlers(frame);
        glassPaneDispatcher = createGlassPaneDispatcher();
        if (glassPaneDispatcher != null) {
            frame.getGlassPane().addMouseListener(glassPaneDispatcher);
            frame.getGlassPane().addMouseMotionListener(glassPaneDispatcher);
        }
        componentListener =  createComponentListener();
        if (frame.getParent() != null) {
          parentBounds = frame.getParent().getBounds();
        }
        if ((frame.getParent() != null) && !componentListenerAdded) {
            frame.getParent().addComponentListener(componentListener);
            componentListenerAdded = true;
        }
!!!2487810.java!!!	getWindowFocusListener() : WindowFocusListener
        return getHandler();
!!!2487938.java!!!	cancelResize() : void
        if (resizing) {
            if (borderListener instanceof BorderListener) {
                ((BorderListener)borderListener).finishMouseReleased();
            }
        }
!!!2488066.java!!!	getHandler() : BasicInternalFrameUI::Handler
        if (handler == null) {
            handler = new Handler();
        }
        return handler;
!!!2488194.java!!!	getInputMap(in condition : int) : InputMap
        if (condition == JComponent.WHEN_IN_FOCUSED_WINDOW) {
            return createInputMap(condition);
        }
        return null;
!!!2488322.java!!!	createInputMap(in condition : int) : InputMap
        if (condition == JComponent.WHEN_IN_FOCUSED_WINDOW) {
            Object[] bindings = (Object[])DefaultLookup.get(
                    frame, this, "InternalFrame.windowBindings");

            if (bindings != null) {
                return LookAndFeel.makeComponentInputMap(frame, bindings);
            }
        }
        return null;
!!!2488450.java!!!	uninstallDefaults() : void
        Icon frameIcon = frame.getFrameIcon();
        if (frameIcon instanceof UIResource) {
            frame.setFrameIcon(null);
        }
        internalFrameLayout = null;
        frame.setLayout(null);
        LookAndFeel.uninstallBorder(frame);
!!!2488578.java!!!	uninstallComponents() : void
        setNorthPane(null);
        setSouthPane(null);
        setEastPane(null);
        setWestPane(null);
        if(titlePane != null) {
            titlePane.uninstallDefaults();
        }
        titlePane = null;
!!!2488706.java!!!	uninstallListeners() : void
        if ((frame.getParent() != null) && componentListenerAdded) {
            frame.getParent().removeComponentListener(componentListener);
            componentListenerAdded = false;
        }
        componentListener = null;
      if (glassPaneDispatcher != null) {
          frame.getGlassPane().removeMouseListener(glassPaneDispatcher);
          frame.getGlassPane().removeMouseMotionListener(glassPaneDispatcher);
          glassPaneDispatcher = null;
      }
      deinstallMouseHandlers(frame);
      frame.removePropertyChangeListener(propertyChangeListener);
      propertyChangeListener = null;
      borderListener = null;
!!!2488834.java!!!	uninstallKeyboardActions() : void
        if (internalFrameListener != null) {
            frame.removeInternalFrameListener(internalFrameListener);
        }
        internalFrameListener = null;

        SwingUtilities.replaceUIInputMap(frame, JComponent.
                                         WHEN_IN_FOCUSED_WINDOW, null);
        SwingUtilities.replaceUIActionMap(frame, null);

!!!2488962.java!!!	updateFrameCursor() : void
        if (resizing) {
            return;
        }
        Cursor s = frame.getLastCursor();
        if (s == null) {
            s = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);
        }
        frame.setCursor(s);
!!!2489090.java!!!	createLayoutManager() : LayoutManager
        return getHandler();
!!!2489218.java!!!	createPropertyChangeListener() : PropertyChangeListener
        return getHandler();
!!!2489346.java!!!	getPreferredSize(inout x : JComponent) : Dimension
        if(frame == x)
            return frame.getLayout().preferredLayoutSize(x);
        return new Dimension(100, 100);
!!!2489474.java!!!	getMinimumSize(inout x : JComponent) : Dimension
        if(frame == x) {
            return frame.getLayout().minimumLayoutSize(x);
        }
        return new Dimension(0, 0);
!!!2489602.java!!!	getMaximumSize(inout x : JComponent) : Dimension
        return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);
!!!2489730.java!!!	replacePane(inout currentPane : JComponent, inout newPane : JComponent) : void
        if(currentPane != null) {
            deinstallMouseHandlers(currentPane);
            frame.remove(currentPane);
        }
        if(newPane != null) {
           frame.add(newPane);
           installMouseHandlers(newPane);
        }
!!!2489858.java!!!	deinstallMouseHandlers(inout c : JComponent) : void
      c.removeMouseListener(borderListener);
      c.removeMouseMotionListener(borderListener);
!!!2489986.java!!!	installMouseHandlers(inout c : JComponent) : void
      c.addMouseListener(borderListener);
      c.addMouseMotionListener(borderListener);
!!!2490114.java!!!	createNorthPane(inout w : JInternalFrame) : JComponent
      titlePane = new BasicInternalFrameTitlePane(w);
      return titlePane;
!!!2490242.java!!!	createSouthPane(inout w : JInternalFrame) : JComponent
        return null;
!!!2490370.java!!!	createWestPane(inout w : JInternalFrame) : JComponent
        return null;
!!!2490498.java!!!	createEastPane(inout w : JInternalFrame) : JComponent
        return null;
!!!2490626.java!!!	createBorderListener(inout w : JInternalFrame) : MouseInputAdapter
        return new BorderListener();
!!!2490754.java!!!	createInternalFrameListener() : void
        internalFrameListener = getHandler();
!!!2490882.java!!!	isKeyBindingRegistered() : boolean
      return keyBindingRegistered;
!!!2491010.java!!!	setKeyBindingRegistered(inout b : boolean) : void
      keyBindingRegistered = b;
!!!2491138.java!!!	isKeyBindingActive() : boolean
      return keyBindingActive;
!!!2491266.java!!!	setKeyBindingActive(inout b : boolean) : void
      keyBindingActive = b;
!!!2491394.java!!!	setupMenuOpenKey() : void
        // PENDING(hania): Why are these WHEN_IN_FOCUSED_WINDOWs? Shouldn't
        // they be WHEN_ANCESTOR_OF_FOCUSED_COMPONENT?
        // Also, no longer registering on the desktopicon, the previous
        // action did nothing.
        InputMap map = getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        SwingUtilities.replaceUIInputMap(frame,
                                      JComponent.WHEN_IN_FOCUSED_WINDOW, map);
        //ActionMap actionMap = getActionMap();
        //SwingUtilities.replaceUIActionMap(frame, actionMap);
!!!2491650.java!!!	getNorthPane() : JComponent
        return northPane;
!!!2491778.java!!!	setNorthPane(inout c : JComponent) : void
        if (northPane != null &&
                northPane instanceof BasicInternalFrameTitlePane) {
            ((BasicInternalFrameTitlePane)northPane).uninstallListeners();
        }
        replacePane(northPane, c);
        northPane = c;
        if (c instanceof BasicInternalFrameTitlePane) {
          titlePane = (BasicInternalFrameTitlePane)c;
        }
!!!2491906.java!!!	getSouthPane() : JComponent
        return southPane;
!!!2492034.java!!!	setSouthPane(inout c : JComponent) : void
        southPane = c;
!!!2492162.java!!!	getWestPane() : JComponent
        return westPane;
!!!2492290.java!!!	setWestPane(inout c : JComponent) : void
        westPane = c;
!!!2492418.java!!!	getEastPane() : JComponent
        return eastPane;
!!!2492546.java!!!	setEastPane(inout c : JComponent) : void
        eastPane = c;
!!!2493442.java!!!	getDesktopManager() : DesktopManager
        if(frame.getDesktopPane() != null
           && frame.getDesktopPane().getDesktopManager() != null)
            return frame.getDesktopPane().getDesktopManager();
        if(sharedDesktopManager == null)
          sharedDesktopManager = createDesktopManager();
        return sharedDesktopManager;
!!!2493570.java!!!	createDesktopManager() : DesktopManager
      return new DefaultDesktopManager();
!!!2493698.java!!!	closeFrame(inout f : JInternalFrame) : void
        // Internal Frame Auditory Cue Activation
        BasicLookAndFeel.playSound(frame,"InternalFrame.closeSound");
        // delegate to desktop manager
        getDesktopManager().closeFrame(f);
!!!2493826.java!!!	maximizeFrame(inout f : JInternalFrame) : void
        // Internal Frame Auditory Cue Activation
        BasicLookAndFeel.playSound(frame,"InternalFrame.maximizeSound");
        // delegate to desktop manager
        getDesktopManager().maximizeFrame(f);
!!!2493954.java!!!	minimizeFrame(inout f : JInternalFrame) : void
        // Internal Frame Auditory Cue Activation
        if ( ! f.isIcon() ) {
            // This method seems to regularly get called after an
            // internal frame is iconified. Don't play this sound then.
            BasicLookAndFeel.playSound(frame,"InternalFrame.restoreDownSound");
        }
        // delegate to desktop manager
        getDesktopManager().minimizeFrame(f);
!!!2494082.java!!!	iconifyFrame(inout f : JInternalFrame) : void
        // Internal Frame Auditory Cue Activation
        BasicLookAndFeel.playSound(frame, "InternalFrame.minimizeSound");
        // delegate to desktop manager
        getDesktopManager().iconifyFrame(f);
!!!2494210.java!!!	deiconifyFrame(inout f : JInternalFrame) : void
        // Internal Frame Auditory Cue Activation
        if ( ! f.isMaximum() ) {
            // This method seems to regularly get called after an
            // internal frame is maximized. Don't play this sound then.
            BasicLookAndFeel.playSound(frame, "InternalFrame.restoreUpSound");
        }
        // delegate to desktop manager
        getDesktopManager().deiconifyFrame(f);
!!!2494338.java!!!	activateFrame(inout f : JInternalFrame) : void
        getDesktopManager().activateFrame(f);
!!!2494466.java!!!	deactivateFrame(inout f : JInternalFrame) : void
        getDesktopManager().deactivateFrame(f);
!!!2496130.java!!!	createComponentListener() : ComponentListener
      return getHandler();
!!!2497154.java!!!	createGlassPaneDispatcher() : MouseInputListener
        return null;
