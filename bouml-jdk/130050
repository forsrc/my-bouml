format 222
"ref" // jdk1.8::java::lang::ref
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/lang/ref/"
  java_package "java.lang.ref"
  classview 128898 "ref"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 130946 "ReferenceQueue"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Reference queues, to which registered reference objects are appended by the
garbage collector after the appropriate reachability changes are detected.

@author   Mark Reinhold
@since    1.2
"
      operation 7325570 "ReferenceQueue"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new reference-object queue.
"
      end

      class 956802 "Null"
	visibility private 
	nformals 1
	formal name "S" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 130946 // ReferenceQueue
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3219202 // <realization>
	  relation 3219202 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3219202 // <realization>
	    b parent class_ref 130946 // ReferenceQueue
	end

	operation 7325698 "enqueue"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 1
	    param inout name "r" type class_ref 131458 // Reference
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends S> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3219330 // NULL (<unidirectional association>)
	relation 3219330 --->
	  a role_name "NULL" init_value " new Null<>()" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3219330 // NULL (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end

      classrelation 3219458 // ENQUEUED (<unidirectional association>)
	relation 3219458 --->
	  a role_name "ENQUEUED" init_value " new Null<>()" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3219458 // ENQUEUED (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end

      class 956930 "Lock"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 3219586 // lock (<unidirectional association>)
	relation 3219586 --->
	  a role_name "lock" init_value " new Lock()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3219586 // lock (<unidirectional association>)
	  b parent class_ref 956930 // Lock
      end

      classrelation 3219714 // head (<unidirectional association>)
	relation 3219714 --->
	  a role_name "head" init_value " null" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends T> ${name}${value};
"
	    classrelation_ref 3219714 // head (<unidirectional association>)
	  b parent class_ref 131458 // Reference
      end

      attribute 1735298 "queueLength"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7325826 "enqueue"
	cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 131458 // Reference
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7325954 "reallyPoll"
	cpp_inline private return_type class_ref 131458 // Reference
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 7326082 "poll"
	cpp_inline public return_type class_ref 131458 // Reference
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Polls this queue to see if a reference object is available.  If one is
available without further delay then it is removed from the queue and
returned.  Otherwise this method immediately returns <tt>null</tt>.

@return  A reference object, if one was immediately available,
         otherwise <code>null</code>
"
      end

      operation 7326210 "remove"
	cpp_inline public return_type class_ref 131458 // Reference
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the next reference object in this queue, blocking until either
one becomes available or the given timeout period expires.

<p> This method does not offer real-time guarantees: It schedules the
timeout as if by invoking the {@link Object#wait(long)} method.

@param  timeout  If positive, block for up to <code>timeout</code>
                 milliseconds while waiting for a reference to be
                 added to this queue.  If zero, block indefinitely.

@return  A reference object, if one was available within the specified
         timeout period, otherwise <code>null</code>

@throws  IllegalArgumentException
         If the value of the timeout argument is negative

@throws  InterruptedException
         If the timeout wait is interrupted
"
      end

      operation 7326338 "remove"
	cpp_inline public return_type class_ref 131458 // Reference
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the next reference object in this queue, blocking until one
becomes available.

@return A reference object, blocking until one becomes available
@throws  InterruptedException  If the wait is interrupted
"
      end
    end

    class 131330 "WeakReference"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 131458 // Reference
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Weak reference objects, which do not prevent their referents from being
made finalizable, finalized, and then reclaimed.  Weak references are most
often used to implement canonicalizing mappings.

<p> Suppose that the garbage collector determines at a certain point in time
that an object is <a href=\"package-summary.html#reachability\">weakly
reachable</a>.  At that time it will atomically clear all weak references to
that object and all weak references to any other weakly-reachable objects
from which that object is reachable through a chain of strong and soft
references.  At the same time it will declare all of the formerly
weakly-reachable objects to be finalizable.  At the same time or at some
later time it will enqueue those newly-cleared weak references that are
registered with reference queues.

@author   Mark Reinhold
@since    1.2
"
      classrelation 130946 // <realization>
	relation 130946 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 130946 // <realization>
	  b parent class_ref 131458 // Reference
      end

      operation 138498 "WeakReference"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "referent" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new weak reference that refers to the given object.  The new
reference is not registered with any queue.

@param referent object the new weak reference will refer to
"
      end

      operation 138626 "WeakReference"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 130946 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new weak reference that refers to the given object and is
registered with the given queue.

@param referent object the new weak reference will refer to
@param q the queue with which the reference is to be registered,
         or <tt>null</tt> if registration is not required
"
      end
    end

    class 131458 "Reference"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for reference objects.  This class defines the
operations common to all reference objects.  Because reference objects are
implemented in close cooperation with the garbage collector, this class may
not be subclassed directly.

@author   Mark Reinhold
@since    1.2
"
      attribute 131202 "referent"
	private explicit_type "T"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A Reference instance is in one of four possible internal states:

    Active: Subject to special treatment by the garbage collector.  Some
    time after the collector detects that the reachability of the
    referent has changed to the appropriate state, it changes the
    instance's state to either Pending or Inactive, depending upon
    whether or not the instance was registered with a queue when it was
    created.  In the former case it also adds the instance to the
    pending-Reference list.  Newly-created instances are Active.

    Pending: An element of the pending-Reference list, waiting to be
    enqueued by the Reference-handler thread.  Unregistered instances
    are never in this state.

    Enqueued: An element of the queue with which the instance was
    registered when it was created.  When an instance is removed from
    its ReferenceQueue, it is made Inactive.  Unregistered instances are
    never in this state.

    Inactive: Nothing more to do.  Once an instance becomes Inactive its
    state will never change again.

The state is encoded in the queue and next fields as follows:

    Active: queue = ReferenceQueue with which instance is registered, or
    ReferenceQueue.NULL if it was not registered with a queue; next =
    null.

    Pending: queue = ReferenceQueue with which instance is registered;
    next = this

    Enqueued: queue = ReferenceQueue.ENQUEUED; next = Following instance
    in queue, or this if at end of list.

    Inactive: queue = ReferenceQueue.NULL; next = this.

With this scheme the collector need only examine the next field in order
to determine whether a Reference instance requires special treatment: If
the next field is null then the instance is active; if it is non-null,
then the collector should treat the instance normally.

To ensure that a concurrent collector can discover active Reference
objects without interfering with application threads that may apply
the enqueue() method to those objects, collectors should link
discovered objects through the discovered field. The discovered
field is also used for linking Reference objects in the pending list.

 Treated specially by GC "
      end

      classrelation 130178 // queue (<unidirectional association>)
	relation 130178 --->
	  a role_name "queue" volatile package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
	    classrelation_ref 130178 // queue (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end

      classrelation 130306 // next (<unidirectional association>)
	relation 130306 --->
	  a role_name "next" package
	    comment " When active:   NULL
    pending:   this
   Enqueued:   next reference in queue (or this if last)
   Inactive:   this

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SuppressWarnings(\"rawtypes\")
"
	    classrelation_ref 130306 // next (<unidirectional association>)
	  b parent class_ref 131458 // Reference
      end

      classrelation 130434 // discovered (<unidirectional association>)
	relation 130434 --->
	  a role_name "discovered" private
	    comment " When active:   next element in a discovered reference list maintained by GC (or this if last)
    pending:   next element in the pending list (or null if last)
  otherwise:   NULL

 used by VM "
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 130434 // discovered (<unidirectional association>)
	  b parent class_ref 131458 // Reference
      end

      class 131586 "Lock"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 130562 // lock (<unidirectional association>)
	relation 130562 --->
	  a role_name "lock" init_value " new Lock()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 130562 // lock (<unidirectional association>)
	  b parent class_ref 131586 // Lock
      end

      classrelation 130690 // pending (<unidirectional association>)
	relation 130690 --->
	  a role_name "pending" init_value " null" class_relation private
	    comment " List of References waiting to be enqueued.  The collector adds
References to this list, while the Reference-handler thread removes
them.  This list is protected by the above lock object. The
list uses the discovered field to link its elements.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 130690 // pending (<unidirectional association>)
	  b parent class_ref 131458 // Reference
      end

      class 131714 "ReferenceHandler"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 130818 // <generalisation>
	  relation 130818 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 130818 // <generalisation>
	    b parent class_ref 128642 // Thread
	end

	operation 137218 "ensureClassInitialized"
	  class_operation cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "clazz" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	extra_member 128130 "initialization"
	  
	  cpp "" ""
	  java "  static {
            // pre-load and initialize InterruptedException and Cleaner classes
            // so that we don't get into trouble later in the run loop if there's
            // memory shortage while loading/initializing them lazily.
            ensureClassInitialized(InterruptedException.class);
            ensureClassInitialized(Cleaner.class);
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	operation 137346 "ReferenceHandler"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "g" type class_ref 128898 // ThreadGroup
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 137474 "run"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 137602 "tryHandlePending"
	class_operation cpp_inline package explicit_return_type "boolean"
	nparams 1
	  param inout name "waitForNotify" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Try handle pending {@link Reference} if there is one.<p>
Return {@code true} as a hint that there might be another
{@link Reference} pending or {@code false} when there are no more pending
{@link Reference}s at the moment and the program can do some other
useful work instead of looping.

@param waitForNotify if {@code true} and there was no pending
                     {@link Reference}, wait until notified from VM
                     or interrupted; if {@code false}, return immediately
                     when there is no pending {@link Reference}.
@return {@code true} if there was a {@link Reference} pending and it
        was processed, or we waited for notification and either got it
        or thread was interrupted before being notified;
        {@code false} otherwise.
"
      end

      extra_member 128258 "initialization"
	
	cpp "" ""
	java "  static {
        ThreadGroup tg = Thread.currentThread().getThreadGroup();
        for (ThreadGroup tgn = tg;
             tgn != null;
             tg = tgn, tgn = tg.getParent());
        Thread handler = new ReferenceHandler(tg, \"Reference Handler\");
        /* If there were a special system-only priority greater than
         * MAX_PRIORITY, it would be used here
         */
        handler.setPriority(Thread.MAX_PRIORITY);
        handler.setDaemon(true);
        handler.start();

        // provide access in SharedSecrets
        SharedSecrets.setJavaLangRefAccess(new JavaLangRefAccess() {
            @Override
            public boolean tryHandlePendingReference() {
                return tryHandlePending(false);
            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 137730 "get"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Referent accessor and setters -- 

Returns this reference object's referent.  If this reference object has
been cleared, either by the program or by the garbage collector, then
this method returns <code>null</code>.

@return   The object to which this reference refers, or
          <code>null</code> if this reference object has been cleared
"
      end

      operation 137858 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears this reference object.  Invoking this method will not cause this
object to be enqueued.

<p> This method is invoked only by Java code; when the garbage collector
clears references it does so directly, without invoking this method.
"
      end

      operation 137986 "isEnqueued"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Queue operations -- 

Tells whether or not this reference object has been enqueued, either by
the program or by the garbage collector.  If this reference object was
not registered with a queue when it was created, then this method will
always return <code>false</code>.

@return   <code>true</code> if and only if this reference object has
          been enqueued
"
      end

      operation 138114 "enqueue"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds this reference object to the queue with which it is registered,
if any.

<p> This method is invoked only by Java code; when the garbage collector
enqueues references it does so directly, without invoking this method.

@return   <code>true</code> if this reference object was successfully
          enqueued; <code>false</code> if it was already enqueued or if
          it was not registered with a queue when it was created
"
      end

      operation 138242 "Reference"
	cpp_inline package explicit_return_type ""
	nparams 1
	  param inout name "referent" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Constructors -- "
      end

      operation 138370 "Reference"
	cpp_inline package explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "queue" type class_ref 130946 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 321026 "SoftReference"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 131458 // Reference
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Soft reference objects, which are cleared at the discretion of the garbage
collector in response to memory demand.  Soft references are most often used
to implement memory-sensitive caches.

<p> Suppose that the garbage collector determines at a certain point in time
that an object is <a href=\"package-summary.html#reachability\">softly
reachable</a>.  At that time it may choose to clear atomically all soft
references to that object and all soft references to any other
softly-reachable objects from which that object is reachable through a chain
of strong references.  At the same time or at some later time it will
enqueue those newly-cleared soft references that are registered with
reference queues.

<p> All soft references to softly-reachable objects are guaranteed to have
been cleared before the virtual machine throws an
<code>OutOfMemoryError</code>.  Otherwise no constraints are placed upon the
time at which a soft reference will be cleared or the order in which a set
of such references to different objects will be cleared.  Virtual machine
implementations are, however, encouraged to bias against clearing
recently-created or recently-used soft references.

<p> Direct instances of this class may be used to implement simple caches;
this class or derived subclasses may also be used in larger data structures
to implement more sophisticated caches.  As long as the referent of a soft
reference is strongly reachable, that is, is actually in use, the soft
reference will not be cleared.  Thus a sophisticated cache can, for example,
prevent its most recently used entries from being discarded by keeping
strong referents to those entries, leaving the remaining entries to be
discarded at the discretion of the garbage collector.

@author   Mark Reinhold
@since    1.2
"
      classrelation 542338 // <realization>
	relation 542338 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 542338 // <realization>
	  b parent class_ref 131458 // Reference
      end

      attribute 370946 "clock"
	class_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Timestamp clock, updated by the garbage collector

"
      end

      attribute 371074 "timestamp"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Timestamp updated by each invocation of the get method.  The VM may use
this field when selecting soft references to be cleared, but it is not
required to do so.

"
      end

      operation 1733506 "SoftReference"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "referent" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new soft reference that refers to the given object.  The new
reference is not registered with any queue.

@param referent object the new soft reference will refer to
"
      end

      operation 1733634 "SoftReference"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 130946 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new soft reference that refers to the given object and is
registered with the given queue.

@param referent object the new soft reference will refer to
@param q the queue with which the reference is to be registered,
         or <tt>null</tt> if registration is not required

"
      end

      operation 1733762 "get"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this reference object's referent.  If this reference object has
been cleared, either by the program or by the garbage collector, then
this method returns <code>null</code>.

@return   The object to which this reference refers, or
          <code>null</code> if this reference object has been cleared
"
      end
    end

    class 956290 "Finalizer"
      visibility package 
      nactuals 1
      actual class class_ref 956418 // FinalReference
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3218178 // <realization>
	relation 3218178 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3218178 // <realization>
	  b parent class_ref 956418 // FinalReference
      end

      classrelation 3218306 // queue (<unidirectional association>)
	relation 3218306 --->
	  a role_name "queue" init_value " new ReferenceQueue<>()" class_relation private
	    comment " Package-private; must be in
same package as the Reference
class 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3218306 // queue (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end

      classrelation 3218434 // unfinalized (<unidirectional association>)
	relation 3218434 --->
	  a role_name "unfinalized" init_value " null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3218434 // unfinalized (<unidirectional association>)
	  b parent class_ref 956290 // Finalizer
      end

      classrelation 3218562 // lock (<unidirectional association>)
	relation 3218562 --->
	  a role_name "lock" init_value " new Object()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3218562 // lock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3218690 // next (<unidirectional association>)
	relation 3218690 --->
	  a role_name "next" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3218690 // next (<unidirectional association>)
	  b parent class_ref 956290 // Finalizer
      end

      classrelation 3218818 // prev (<unidirectional association>)
	relation 3218818 --->
	  a role_name "prev" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3218818 // prev (<unidirectional association>)
	  b parent class_ref 956290 // Finalizer
      end

      operation 7323906 "hasBeenFinalized"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7324034 "add"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7324162 "remove"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7324290 "Finalizer"
	private explicit_return_type ""
	nparams 1
	  param inout name "finalizee" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7324418 "register"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "finalizee" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by VM "
      end

      operation 7324546 "runFinalizer"
	private explicit_return_type "void"
	nparams 1
	  param inout name "jla" explicit_type "JavaLangAccess"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7324674 "forkSecondaryFinalizer"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "proc" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a privileged secondary finalizer thread in the system thread
group for the given Runnable, and wait for it to complete.

This method is used by both runFinalization and runFinalizersOnExit.
The former method invokes all pending finalizers, while the latter
invokes all uninvoked finalizers if on-exit finalization has been
enabled.

These two methods could have been implemented by offloading their work
to the regular finalizer thread and waiting for that thread to finish.
The advantage of creating a fresh thread, however, is that it insulates
invokers of these methods from a stalled or deadlocked finalizer thread.
"
      end

      operation 7324802 "runFinalization"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called by Runtime.runFinalization() "
      end

      operation 7324930 "runAllFinalizers"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by java.lang.Shutdown "
      end

      class 956546 "FinalizerThread"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3218946 // <generalisation>
	  relation 3218946 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3218946 // <generalisation>
	    b parent class_ref 128642 // Thread
	end

	attribute 1735170 "running"
	  volatile private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7325058 "FinalizerThread"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "g" type class_ref 128898 // ThreadGroup
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7325186 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      extra_member 162434 "initialization"
	
	cpp "" ""
	java "  static {
        ThreadGroup tg = Thread.currentThread().getThreadGroup();
        for (ThreadGroup tgn = tg;
             tgn != null;
             tg = tgn, tgn = tg.getParent());
        Thread finalizer = new FinalizerThread(tg);
        finalizer.setPriority(Thread.MAX_PRIORITY - 2);
        finalizer.setDaemon(true);
        finalizer.start();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 956418 "FinalReference"
      visibility package 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 131458 // Reference
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Final references, used to implement finalization
"
      classrelation 3218050 // <realization>
	relation 3218050 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3218050 // <realization>
	  b parent class_ref 131458 // Reference
      end

      operation 7323778 "FinalReference"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 130946 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 956674 "PhantomReference"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 131458 // Reference
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Phantom reference objects, which are enqueued after the collector
determines that their referents may otherwise be reclaimed.  Phantom
references are most often used for scheduling pre-mortem cleanup actions in
a more flexible way than is possible with the Java finalization mechanism.

<p> If the garbage collector determines at a certain point in time that the
referent of a phantom reference is <a
href=\"package-summary.html#reachability\">phantom reachable</a>, then at that
time or at some later time it will enqueue the reference.

<p> In order to ensure that a reclaimable object remains so, the referent of
a phantom reference may not be retrieved: The <code>get</code> method of a
phantom reference always returns <code>null</code>.

<p> Unlike soft and weak references, phantom references are not
automatically cleared by the garbage collector as they are enqueued.  An
object that is reachable via phantom references will remain so until all
such references are cleared or themselves become unreachable.

@author   Mark Reinhold
@since    1.2
"
      classrelation 3219074 // <realization>
	relation 3219074 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3219074 // <realization>
	  b parent class_ref 131458 // Reference
      end

      operation 7325314 "get"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this reference object's referent.  Because the referent of a
phantom reference is always inaccessible, this method always returns
<code>null</code>.

@return  <code>null</code>
"
      end

      operation 7325442 "PhantomReference"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 130946 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phantom reference that refers to the given object and
is registered with the given queue.

<p> It is possible to create a phantom reference with a <tt>null</tt>
queue, but such a reference is completely useless: Its <tt>get</tt>
method will always return null and, since it does not have a queue, it
will never be enqueued.

@param referent the object the new phantom reference will refer to
@param q the queue with which the reference is to be registered,
         or <tt>null</tt> if registration is not required
"
      end
    end
  end

  deploymentview 128258 "ref"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 128258 "Reference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Cleaner;
import sun.misc.JavaLangRefAccess;
import sun.misc.SharedSecrets;
${definition}"
      associated_elems
	class_ref 131458 // Reference
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 128386 "WeakReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 131330 // WeakReference
      end
      comment "Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 259586 "SoftReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 321026 // SoftReference
      end
      comment "Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 696450 "FinalReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 956418 // FinalReference
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 696578 "Finalizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PrivilegedAction;
import java.security.AccessController;
import sun.misc.JavaLangAccess;
import sun.misc.SharedSecrets;
import sun.misc.VM;
${definition}"
      associated_elems
	class_ref 956290 // Finalizer
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 696706 "PhantomReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 956674 // PhantomReference
      end
      comment "Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 696834 "ReferenceQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 130946 // ReferenceQueue
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
