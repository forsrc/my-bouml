class Chronology
!!!8444674.java!!!	from(inout temporal : TemporalAccessor) : Chronology
        Objects.requireNonNull(temporal, "temporal");
        Chronology obj = temporal.query(TemporalQueries.chronology());
        return (obj != null ? obj : IsoChronology.INSTANCE);
!!!8444802.java!!!	ofLocale(inout locale : Locale) : Chronology
        return AbstractChronology.ofLocale(locale);
!!!8444930.java!!!	of(inout id : String) : Chronology
        return AbstractChronology.of(id);
!!!8445058.java!!!	getAvailableChronologies() : Set
        return AbstractChronology.getAvailableChronologies();
!!!8445442.java!!!	date(inout era : Era, in yearOfEra : int, in month : int, in dayOfMonth : int) : ChronoLocalDate
        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);
!!!8445698.java!!!	dateYearDay(inout era : Era, in yearOfEra : int, in dayOfYear : int) : ChronoLocalDate
        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);
!!!8446082.java!!!	dateNow() : ChronoLocalDate
        return dateNow(Clock.systemDefaultZone());
!!!8446210.java!!!	dateNow(inout zone : ZoneId) : ChronoLocalDate
        return dateNow(Clock.system(zone));
!!!8446338.java!!!	dateNow(inout clock : Clock) : ChronoLocalDate
        Objects.requireNonNull(clock, "clock");
        return date(LocalDate.now(clock));
!!!8446594.java!!!	localDateTime(inout temporal : TemporalAccessor) : ChronoLocalDateTime
        try {
            return date(temporal).atTime(LocalTime.from(temporal));
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain ChronoLocalDateTime from TemporalAccessor: " + temporal.getClass(), ex);
        }
!!!8446722.java!!!	zonedDateTime(inout temporal : TemporalAccessor) : ChronoZonedDateTime
        try {
            ZoneId zone = ZoneId.from(temporal);
            try {
                Instant instant = Instant.from(temporal);
                return zonedDateTime(instant, zone);

            } catch (DateTimeException ex1) {
                ChronoLocalDateTimeImpl<?> cldt = ChronoLocalDateTimeImpl.ensureValid(this, localDateTime(temporal));
                return ChronoZonedDateTimeImpl.ofBest(cldt, zone, null);
            }
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain ChronoZonedDateTime from TemporalAccessor: " + temporal.getClass(), ex);
        }
!!!8446850.java!!!	zonedDateTime(inout instant : Instant, inout zone : ZoneId) : ChronoZonedDateTime
        return ChronoZonedDateTimeImpl.ofInstant(this, instant, zone);
!!!8447618.java!!!	getDisplayName(inout style : TextStyle, inout locale : Locale) : String
        TemporalAccessor temporal = new TemporalAccessor() {
            @Override
            public boolean isSupported(TemporalField field) {
                return false;
            }
            @Override
            public long getLong(TemporalField field) {
                throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
            }
            @SuppressWarnings("unchecked")
            @Override
            public <R> R query(TemporalQuery<R> query) {
                if (query == TemporalQueries.chronology()) {
                    return (R) Chronology.this;
                }
                return TemporalAccessor.super.query(query);
            }
        };
        return new DateTimeFormatterBuilder().appendChronologyText(style).toFormatter(locale).format(temporal);
!!!8447874.java!!!	period(in years : int, in months : int, in days : int) : ChronoPeriod
        return new ChronoPeriodImpl(this, years, months, days);
