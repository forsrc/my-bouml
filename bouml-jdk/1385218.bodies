class HTMLAccessibleContext
!!!11716994.java!!!	HTMLAccessibleContext(inout elementInfo : AccessibleHTML::ElementInfo)
            this.elementInfo = elementInfo;
!!!11717122.java!!!	getAccessibleContext() : AccessibleContext
            return this;
!!!11717250.java!!!	getAccessibleStateSet() : AccessibleStateSet
            AccessibleStateSet states = new AccessibleStateSet();
            Component comp = getTextComponent();

            if (comp.isEnabled()) {
                states.add(AccessibleState.ENABLED);
            }
            if (comp instanceof JTextComponent &&
                ((JTextComponent)comp).isEditable()) {

                states.add(AccessibleState.EDITABLE);
                states.add(AccessibleState.FOCUSABLE);
            }
            if (comp.isVisible()) {
                states.add(AccessibleState.VISIBLE);
            }
            if (comp.isShowing()) {
                states.add(AccessibleState.SHOWING);
            }
            return states;
!!!11717378.java!!!	getAccessibleIndexInParent() : int
            return elementInfo.getIndexInParent();
!!!11717506.java!!!	getAccessibleChildrenCount() : int
            return elementInfo.getChildCount();
!!!11717634.java!!!	getAccessibleChild(in i : int) : Accessible
            ElementInfo childInfo = elementInfo.getChild(i);
            if (childInfo != null && childInfo instanceof Accessible) {
                return (Accessible)childInfo;
            } else {
                return null;
            }
!!!11717762.java!!!	getLocale() : Locale
            return editor.getLocale();
!!!11717890.java!!!	getAccessibleComponent() : AccessibleComponent
            return this;
!!!11718018.java!!!	getBackground() : Color
            return getTextComponent().getBackground();
!!!11718146.java!!!	setBackground(inout c : Color) : void
            getTextComponent().setBackground(c);
!!!11718274.java!!!	getForeground() : Color
            return getTextComponent().getForeground();
!!!11718402.java!!!	setForeground(inout c : Color) : void
            getTextComponent().setForeground(c);
!!!11718530.java!!!	getCursor() : Cursor
            return getTextComponent().getCursor();
!!!11718658.java!!!	setCursor(inout cursor : Cursor) : void
            getTextComponent().setCursor(cursor);
!!!11718786.java!!!	getFont() : Font
            return getTextComponent().getFont();
!!!11718914.java!!!	setFont(inout f : Font) : void
            getTextComponent().setFont(f);
!!!11719042.java!!!	getFontMetrics(inout f : Font) : FontMetrics
            return getTextComponent().getFontMetrics(f);
!!!11719170.java!!!	isEnabled() : boolean
            return getTextComponent().isEnabled();
!!!11719298.java!!!	setEnabled(inout b : boolean) : void
            getTextComponent().setEnabled(b);
!!!11719426.java!!!	isVisible() : boolean
            return getTextComponent().isVisible();
!!!11719554.java!!!	setVisible(inout b : boolean) : void
            getTextComponent().setVisible(b);
!!!11719682.java!!!	isShowing() : boolean
            return getTextComponent().isShowing();
!!!11719810.java!!!	contains(inout p : Point) : boolean
            Rectangle r = getBounds();
            if (r != null) {
                return r.contains(p.x, p.y);
            } else {
                return false;
            }
!!!11719938.java!!!	getLocationOnScreen() : Point
            Point editorLocation = getTextComponent().getLocationOnScreen();
            Rectangle r = getBounds();
            if (r != null) {
                return new Point(editorLocation.x + r.x,
                                 editorLocation.y + r.y);
            } else {
                return null;
            }
!!!11720066.java!!!	getLocation() : Point
            Rectangle r = getBounds();
            if (r != null) {
                return new Point(r.x, r.y);
            } else {
                return null;
            }
!!!11720322.java!!!	getBounds() : Rectangle
            return elementInfo.getBounds();
!!!11720578.java!!!	getSize() : Dimension
            Rectangle r = getBounds();
            if (r != null) {
                return new Dimension(r.width, r.height);
            } else {
                return null;
            }
!!!11720706.java!!!	setSize(inout d : Dimension) : void
            Component comp = getTextComponent();
            comp.setSize(d);
!!!11720834.java!!!	getAccessibleAt(inout p : Point) : Accessible
            ElementInfo innerMostElement = getElementInfoAt(rootElementInfo, p);
            if (innerMostElement instanceof Accessible) {
                return (Accessible)innerMostElement;
            } else {
                return null;
            }
!!!11720962.java!!!	getElementInfoAt(inout elementInfo : AccessibleHTML::ElementInfo, inout p : Point) : AccessibleHTML::ElementInfo
            if (elementInfo.getBounds() == null) {
                return null;
            }
            if (elementInfo.getChildCount() == 0 &&
                elementInfo.getBounds().contains(p)) {
                return elementInfo;

            } else {
                if (elementInfo instanceof TableElementInfo) {
                    // Handle table caption as a special case since it's the
                    // only table child that is not a table row.
                    ElementInfo captionInfo =
                        ((TableElementInfo)elementInfo).getCaptionInfo();
                    if (captionInfo != null) {
                        Rectangle bounds = captionInfo.getBounds();
                        if (bounds != null && bounds.contains(p)) {
                            return captionInfo;
                        }
                    }
                }
                for (int i = 0; i < elementInfo.getChildCount(); i++)
{
                    ElementInfo childInfo = elementInfo.getChild(i);
                    ElementInfo retValue = getElementInfoAt(childInfo, p);
                    if (retValue != null) {
                        return retValue;
                    }
                }
            }
            return null;
!!!11721090.java!!!	isFocusTraversable() : boolean
            Component comp = getTextComponent();
            if (comp instanceof JTextComponent) {
                if (((JTextComponent)comp).isEditable()) {
                    return true;
                }
            }
            return false;
!!!11721218.java!!!	requestFocus() : void
            // TIGER - 4856191
            if (! isFocusTraversable()) {
                return;
            }

            Component comp = getTextComponent();
            if (comp instanceof JTextComponent) {

                comp.requestFocusInWindow();

                try {
                    if (elementInfo.validateIfNecessary()) {
                        // set the caret position to the start of this component
                        Element elem = elementInfo.getElement();
                        ((JTextComponent)comp).setCaretPosition(elem.getStartOffset());

                        // fire a AccessibleState.FOCUSED property change event
                        AccessibleContext ac = editor.getAccessibleContext();
                        PropertyChangeEvent pce = new PropertyChangeEvent(this,
                            AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                            null, AccessibleState.FOCUSED);
                        ac.firePropertyChange(
                            AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                            null, pce);
                    }
                } catch (IllegalArgumentException e) {
                    // don't fire property change event
                }
            }
!!!11721346.java!!!	addFocusListener(inout l : FocusListener) : void
            getTextComponent().addFocusListener(l);
!!!11721474.java!!!	removeFocusListener(inout l : FocusListener) : void
            getTextComponent().removeFocusListener(l);
