format 222
"io" // jdk1.8::java::io
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/io/"
  java_package "java.io"
  classview 128258 "io"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 128258 "PrintStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>PrintStream</code> adds functionality to another output stream,
namely the ability to print representations of various data values
conveniently.  Two other features are provided as well.  Unlike other output
streams, a <code>PrintStream</code> never throws an
<code>IOException</code>; instead, exceptional situations merely set an
internal flag that can be tested via the <code>checkError</code> method.
Optionally, a <code>PrintStream</code> can be created so as to flush
automatically; this means that the <code>flush</code> method is
automatically invoked after a byte array is written, one of the
<code>println</code> methods is invoked, or a newline character or byte
(<code>'\\n'</code>) is written.

<p> All characters printed by a <code>PrintStream</code> are converted into
bytes using the platform's default character encoding.  The <code>{@link
PrintWriter}</code> class should be used in situations that require writing
characters rather than bytes.

@author     Frank Yellin
@author     Mark Reinhold
@since      JDK1.0
"
      classrelation 3138690 // <generalisation>
	relation 3138690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3138690 // <generalisation>
	  b parent class_ref 921730 // FilterOutputStream
      end

      classrelation 3138818 // <realization>
	relation 3138818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3138818 // <realization>
	  b parent class_ref 548866 // Appendable
      end

      classrelation 3138946 // <realization>
	relation 3138946 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3138946 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      attribute 1653506 "autoFlush"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1653634 "trouble"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3139074 // formatter (<unidirectional association>)
	relation 3139074 --->
	  a role_name "formatter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3139074 // formatter (<unidirectional association>)
	  b parent class_ref 922370 // Formatter
      end

      classrelation 3139202 // textOut (<unidirectional association>)
	relation 3139202 --->
	  a role_name "textOut" private
	    comment "
Track both the text- and character-output streams, so that their buffers
can be flushed without flushing the entire stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3139202 // textOut (<unidirectional association>)
	  b parent class_ref 921858 // BufferedWriter
      end

      classrelation 3139330 // charOut (<unidirectional association>)
	relation 3139330 --->
	  a role_name "charOut" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3139330 // charOut (<unidirectional association>)
	  b parent class_ref 917890 // OutputStreamWriter
      end

      operation 6908930 "requireNonNull"
	class_operation private explicit_return_type "T"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "requireNonNull is explicitly declared here so as not to create an extra
dependency on java.util.Objects.requireNonNull. PrintStream is loaded
early during system initialization.
"
      end

      operation 6909058 "toCharset"
	class_operation private return_type class_ref 853634 // Charset
	nparams 1
	  param inout name "csn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a charset object for the given charset name.
@throws NullPointerException          is csn is null
@throws UnsupportedEncodingException  if the charset is not supported
"
      end

      operation 6909186 "PrintStream"
	private explicit_return_type ""
	nparams 2
	  param inout name "autoFlush" explicit_type "boolean"
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private constructors "
      end

      operation 6909314 "PrintStream"
	private explicit_return_type ""
	nparams 3
	  param inout name "autoFlush" explicit_type "boolean"
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "charset" type class_ref 853634 // Charset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6909442 "PrintStream"
	private explicit_return_type ""
	nparams 3
	  param inout name "autoFlush" explicit_type "boolean"
	  param inout name "charset" type class_ref 853634 // Charset
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variant of the private constructor so that the given charset name
can be verified before evaluating the OutputStream argument. Used
by constructors creating a FileOutputStream that also take a
charset name.
"
      end

      operation 6909570 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream.  This stream will not flush automatically.

@param  out        The output stream to which values and objects will be
                   printed

@see java.io.PrintWriter#PrintWriter(java.io.OutputStream)
"
      end

      operation 6909698 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream.

@param  out        The output stream to which values and objects will be
                   printed
@param  autoFlush  A boolean; if true, the output buffer will be flushed
                   whenever a byte array is written, one of the
                   <code>println</code> methods is invoked, or a newline
                   character or byte (<code>'\\n'</code>) is written

@see java.io.PrintWriter#PrintWriter(java.io.OutputStream, boolean)
"
      end

      operation 6909826 "PrintStream"
	public explicit_return_type ""
	nparams 3
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream.

@param  out        The output stream to which values and objects will be
                   printed
@param  autoFlush  A boolean; if true, the output buffer will be flushed
                   whenever a byte array is written, one of the
                   <code>println</code> methods is invoked, or a newline
                   character or byte (<code>'\\n'</code>) is written
@param  encoding   The name of a supported
                   <a href=\"../lang/package-summary.html#charenc\">
                   character encoding</a>

@throws  UnsupportedEncodingException
         If the named encoding is not supported

@since  1.4
"
      end

      operation 6909954 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fileName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file name.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the
{@linkplain java.nio.charset.Charset#defaultCharset() default charset}
for this instance of the Java virtual machine.

@param  fileName
        The name of the file to use as the destination of this print
        stream.  If the file exists, then it will be truncated to
        zero size; otherwise, a new file will be created.  The output
        will be written to the file and is buffered.

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@since  1.5
"
      end

      operation 6910082 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "fileName" type class_ref 128130 // String
	  param inout name "csn" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 580354 // FileNotFoundException
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file name and charset.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  fileName
        The name of the file to use as the destination of this print
        stream.  If the file exists, then it will be truncated to
        zero size; otherwise, a new file will be created.  The output
        will be written to the file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5
"
      end

      operation 6910210 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file.  This convenience constructor creates the necessary
intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
which will encode characters using the {@linkplain
java.nio.charset.Charset#defaultCharset() default charset} for this
instance of the Java virtual machine.

@param  file
        The file to use as the destination of this print stream.  If the
        file exists, then it will be truncated to zero size; otherwise,
        a new file will be created.  The output will be written to the
        file and is buffered.

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@since  1.5
"
      end

      operation 6910338 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 131970 // File
	  param inout name "csn" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 580354 // FileNotFoundException
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new print stream, without automatic line flushing, with the
specified file and charset.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  file
        The file to use as the destination of this print stream.  If the
        file exists, then it will be truncated to zero size; otherwise,
        a new file will be created.  The output will be written to the
        file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5
"
      end

      operation 6910466 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6910594 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream.  This is done by writing any buffered output bytes to
the underlying output stream and then flushing that stream.

@see        java.io.OutputStream#flush()
"
      end

      attribute 1653762 "closing"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " To avoid recursive closing "
      end

      operation 6910722 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream.  This is done by flushing the stream and then closing
the underlying output stream.

@see        java.io.OutputStream#close()
"
      end

      operation 6910850 "checkError"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream and checks its error state. The internal error state
is set to <code>true</code> when the underlying output stream throws an
<code>IOException</code> other than <code>InterruptedIOException</code>,
and when the <code>setError</code> method is invoked.  If an operation
on the underlying output stream throws an
<code>InterruptedIOException</code>, then the <code>PrintStream</code>
converts the exception back into an interrupt by doing:
<pre>
    Thread.currentThread().interrupt();
</pre>
or the equivalent.

@return <code>true</code> if and only if this stream has encountered an
        <code>IOException</code> other than
        <code>InterruptedIOException</code>, or the
        <code>setError</code> method has been invoked
"
      end

      operation 6910978 "setError"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the error state of the stream to <code>true</code>.

<p> This method will cause subsequent invocations of {@link
#checkError()} to return <tt>true</tt> until {@link
#clearError()} is invoked.

@since JDK1.1
"
      end

      operation 6911106 "clearError"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the internal error state of this stream.

<p> This method will cause subsequent invocations of {@link
#checkError()} to return <tt>false</tt> until another write
operation fails and invokes {@link #setError()}.

@since 1.6
"
      end

      operation 6911234 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exception-catching, synchronized output operations,
which also implement the write() methods of OutputStream


Writes the specified byte to this stream.  If the byte is a newline and
automatic flushing is enabled then the <code>flush</code> method will be
invoked.

<p> Note that the byte is written as given; to write a character that
will be translated according to the platform's default character
encoding, use the <code>print(char)</code> or <code>println(char)</code>
methods.

@param  b  The byte to be written
@see #print(char)
@see #println(char)
"
      end

      operation 6911362 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array starting at
offset <code>off</code> to this stream.  If automatic flushing is
enabled then the <code>flush</code> method will be invoked.

<p> Note that the bytes will be written as given; to write characters
that will be translated according to the platform's default character
encoding, use the <code>print(char)</code> or <code>println(char)</code>
methods.

@param  buf   A byte array
@param  off   Offset from which to start taking bytes
@param  len   Number of bytes to write
"
      end

      operation 6911490 "write"
	private explicit_return_type "void"
	nparams 1
	  param inout name "buf" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The following private methods on the text- and character-output streams
always flush the stream buffers, so that writes to the underlying byte
stream occur as promptly as with the original PrintStream.
"
      end

      operation 6911618 "write"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6911746 "newLine"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6911874 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do not terminate lines 

Prints a boolean value.  The string produced by <code>{@link
java.lang.String#valueOf(boolean)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      b   The <code>boolean</code> to be printed
"
      end

      operation 6912002 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a character.  The character is translated into one or more bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      c   The <code>char</code> to be printed
"
      end

      operation 6912130 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an integer.  The string produced by <code>{@link
java.lang.String#valueOf(int)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      i   The <code>int</code> to be printed
@see        java.lang.Integer#toString(int)
"
      end

      operation 6912258 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a long integer.  The string produced by <code>{@link
java.lang.String#valueOf(long)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      l   The <code>long</code> to be printed
@see        java.lang.Long#toString(long)
"
      end

      operation 6912386 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a floating-point number.  The string produced by <code>{@link
java.lang.String#valueOf(float)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      f   The <code>float</code> to be printed
@see        java.lang.Float#toString(float)
"
      end

      operation 6912514 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a double-precision floating-point number.  The string produced by
<code>{@link java.lang.String#valueOf(double)}</code> is translated into
bytes according to the platform's default character encoding, and these
bytes are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      d   The <code>double</code> to be printed
@see        java.lang.Double#toString(double)
"
      end

      operation 6912642 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an array of characters.  The characters are converted into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      s   The array of chars to be printed

@throws  NullPointerException  If <code>s</code> is <code>null</code>
"
      end

      operation 6912770 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string.  If the argument is <code>null</code> then the string
<code>\"null\"</code> is printed.  Otherwise, the string's characters are
converted into bytes according to the platform's default character
encoding, and these bytes are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      s   The <code>String</code> to be printed
"
      end

      operation 6912898 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an object.  The string produced by the <code>{@link
java.lang.String#valueOf(Object)}</code> method is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      obj   The <code>Object</code> to be printed
@see        java.lang.Object#toString()
"
      end

      operation 6913026 "println"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do terminate lines 

Terminates the current line by writing the line separator string.  The
line separator string is defined by the system property
<code>line.separator</code>, and is not necessarily a single newline
character (<code>'\\n'</code>).
"
      end

      operation 6913154 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a boolean and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(boolean)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>boolean</code> to be printed
"
      end

      operation 6913282 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a character and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(char)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>char</code> to be printed.
"
      end

      operation 6913410 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an integer and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(int)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>int</code> to be printed.
"
      end

      operation 6913538 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a long and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(long)}</code> and then
<code>{@link #println()}</code>.

@param x  a The <code>long</code> to be printed.
"
      end

      operation 6913666 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a float and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(float)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>float</code> to be printed.
"
      end

      operation 6913794 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a double and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(double)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>double</code> to be printed.
"
      end

      operation 6913922 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an array of characters and then terminate the line.  This method
behaves as though it invokes <code>{@link #print(char[])}</code> and
then <code>{@link #println()}</code>.

@param x  an array of chars to print.
"
      end

      operation 6914050 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a String and then terminate the line.  This method behaves as
though it invokes <code>{@link #print(String)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>String</code> to be printed.
"
      end

      operation 6914178 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an Object and then terminate the line.  This method calls
at first String.valueOf(x) to get the printed object's string value,
then behaves as
though it invokes <code>{@link #print(String)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>Object</code> to be printed.
"
      end

      operation 6914306 "printf"
	public return_type class_ref 128258 // PrintStream
	nparams 2
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this output stream
using the specified format string and arguments.

<p> An invocation of this method of the form <tt>out.printf(format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(format, args) </pre>

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5
"
      end

      operation 6914434 "printf"
	public return_type class_ref 128258 // PrintStream
	nparams 3
	  param inout name "l" type class_ref 312962 // Locale
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this output stream
using the specified format string and arguments.

<p> An invocation of this method of the form <tt>out.printf(l, format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(l, format, args) </pre>

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5
"
      end

      operation 6914562 "format"
	public return_type class_ref 128258 // PrintStream
	nparams 2
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this output stream using the specified
format string and arguments.

<p> The locale always used is the one returned by {@link
java.util.Locale#getDefault() Locale.getDefault()}, regardless of any
previous invocations of other formatting methods on this object.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5
"
      end

      operation 6914690 "format"
	public return_type class_ref 128258 // PrintStream
	nparams 3
	  param inout name "l" type class_ref 312962 // Locale
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this output stream using the specified
format string and arguments.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This output stream

@since  1.5
"
      end

      operation 6914818 "append"
	public return_type class_ref 128258 // PrintStream
	nparams 1
	  param inout name "csq" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this output stream.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.print(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended.  For instance, invoking then <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this output stream.

@return  This output stream

@since  1.5
"
      end

      operation 6914946 "append"
	public return_type class_ref 128258 // PrintStream
	nparams 3
	  param inout name "csq" type class_ref 429442 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this output
stream.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.print(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This output stream

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5
"
      end

      operation 6915074 "append"
	public return_type class_ref 128258 // PrintStream
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this output stream.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.print(c) </pre>

@param  c
        The 16-bit character to append

@return  This output stream

@since  1.5
"
      end
    end

    class 131970 "File"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract representation of file and directory pathnames.

<p> User interfaces and operating systems use system-dependent <em>pathname
strings</em> to name files and directories.  This class presents an
abstract, system-independent view of hierarchical pathnames.  An
<em>abstract pathname</em> has two components:

<ol>
<li> An optional system-dependent <em>prefix</em> string,
     such as a disk-drive specifier, <code>\"/\"</code>&nbsp;for the UNIX root
     directory, or <code>\"\\\\\\\\\"</code>&nbsp;for a Microsoft Windows UNC pathname, and
<li> A sequence of zero or more string <em>names</em>.
</ol>

The first name in an abstract pathname may be a directory name or, in the
case of Microsoft Windows UNC pathnames, a hostname.  Each subsequent name
in an abstract pathname denotes a directory; the last name may denote
either a directory or a file.  The <em>empty</em> abstract pathname has no
prefix and an empty name sequence.

<p> The conversion of a pathname string to or from an abstract pathname is
inherently system-dependent.  When an abstract pathname is converted into a
pathname string, each name is separated from the next by a single copy of
the default <em>separator character</em>.  The default name-separator
character is defined by the system property <code>file.separator</code>, and
is made available in the public static fields <code>{@link
#separator}</code> and <code>{@link #separatorChar}</code> of this class.
When a pathname string is converted into an abstract pathname, the names
within it may be separated by the default name-separator character or by any
other name-separator character that is supported by the underlying system.

<p> A pathname, whether abstract or in string form, may be either
<em>absolute</em> or <em>relative</em>.  An absolute pathname is complete in
that no other information is required in order to locate the file that it
denotes.  A relative pathname, in contrast, must be interpreted in terms of
information taken from some other pathname.  By default the classes in the
<code>java.io</code> package always resolve relative pathnames against the
current user directory.  This directory is named by the system property
<code>user.dir</code>, and is typically the directory in which the Java
virtual machine was invoked.

<p> The <em>parent</em> of an abstract pathname may be obtained by invoking
the {@link #getParent} method of this class and consists of the pathname's
prefix and each name in the pathname's name sequence except for the last.
Each directory's absolute pathname is an ancestor of any <tt>File</tt>
object with an absolute abstract pathname which begins with the directory's
absolute pathname.  For example, the directory denoted by the abstract
pathname <tt>\"/usr\"</tt> is an ancestor of the directory denoted by the
pathname <tt>\"/usr/local/bin\"</tt>.

<p> The prefix concept is used to handle root directories on UNIX platforms,
and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,
as follows:

<ul>

<li> For UNIX platforms, the prefix of an absolute pathname is always
<code>\"/\"</code>.  Relative pathnames have no prefix.  The abstract pathname
denoting the root directory has the prefix <code>\"/\"</code> and an empty
name sequence.

<li> For Microsoft Windows platforms, the prefix of a pathname that contains a drive
specifier consists of the drive letter followed by <code>\":\"</code> and
possibly followed by <code>\"\\\\\"</code> if the pathname is absolute.  The
prefix of a UNC pathname is <code>\"\\\\\\\\\"</code>; the hostname and the share
name are the first two names in the name sequence.  A relative pathname that
does not specify a drive has no prefix.

</ul>

<p> Instances of this class may or may not denote an actual file-system
object such as a file or a directory.  If it does denote such an object
then that object resides in a <i>partition</i>.  A partition is an
operating system-specific portion of storage for a file system.  A single
storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may
contain multiple partitions.  The object, if any, will reside on the
partition <a name=\"partName\">named</a> by some ancestor of the absolute
form of this pathname.

<p> A file system may implement restrictions to certain operations on the
actual file-system object, such as reading, writing, and executing.  These
restrictions are collectively known as <i>access permissions</i>.  The file
system may have multiple sets of access permissions on a single object.
For example, one set may apply to the object's <i>owner</i>, and another
may apply to all other users.  The access permissions on an object may
cause some methods in this class to fail.

<p> Instances of the <code>File</code> class are immutable; that is, once
created, the abstract pathname represented by a <code>File</code> object
will never change.

<h3>Interoperability with {@code java.nio.file} package</h3>

<p> The <a href=\"../../java/nio/file/package-summary.html\">{@code java.nio.file}</a>
package defines interfaces and classes for the Java virtual machine to access
files, file attributes, and file systems. This API may be used to overcome
many of the limitations of the {@code java.io.File} class.
The {@link #toPath toPath} method may be used to obtain a {@link
Path} that uses the abstract path represented by a {@code File} object to
locate a file. The resulting {@code Path} may be used with the {@link
java.nio.file.Files} class to provide more efficient and extensive access to
additional file operations, file attributes, and I/O exceptions to help
diagnose errors when an operation on a file fails.

@author  unascribed
@since   JDK1.0
"
      classrelation 3125506 // <realization>
	relation 3125506 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3125506 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3125634 // <realization>
	relation 3125634 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3125634 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3125762 // fs (<unidirectional association>)
	relation 3125762 --->
	  a role_name "fs" init_value " DefaultFileSystem.getFileSystem()" class_relation const_relation private
	    comment "
The FileSystem object representing the platform's local file system.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3125762 // fs (<unidirectional association>)
	  b parent class_ref 922754 // FileSystem
      end

      classrelation 3125890 // path (<unidirectional association>)
	relation 3125890 --->
	  a role_name "path" const_relation private
	    comment "
This abstract pathname's normalized pathname string. A normalized
pathname string uses the default name-separator character and does not
contain any duplicate or redundant separators.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3125890 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      class 923266 "PathStatus"
	visibility private stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1640322 "INVALID"
	  public type class_ref 923266 // PathStatus
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1640450 "CHECKED"
	  public type class_ref 923266 // PathStatus
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 3126018 // status (<unidirectional association>)
	relation 3126018 --->
	  a role_name "status" init_value " null" private
	    comment "
The flag indicating whether the file path is invalid.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3126018 // status (<unidirectional association>)
	  b parent class_ref 923266 // PathStatus
      end

      operation 6861058 "isInvalid"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the file has an invalid path. Currently, the inspection of
a file path is very limited, and it only covers Nul character check.
Returning true means the path is definitely invalid/garbage. But
returning false does not guarantee that the path is valid.

@return true if the file path is invalid.
"
      end

      attribute 1640578 "prefixLength"
	const_attribute private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The length of this abstract pathname's prefix, or zero if it has no
prefix.

"
      end

      operation 6861186 "getPrefixLength"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this abstract pathname's prefix.
For use by FileSystem classes.
"
      end

      attribute 1640706 "separatorChar"
	class_attribute const_attribute public explicit_type "char"
	init_value " fs.getSeparator()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The system-dependent default name-separator character.  This field is
initialized to contain the first character of the value of the system
property <code>file.separator</code>.  On UNIX systems the value of this
field is <code>'/'</code>; on Microsoft Windows systems it is <code>'\\\\'</code>.

@see     java.lang.System#getProperty(java.lang.String)

"
      end

      classrelation 3126146 // separator (<unidirectional association>)
	relation 3126146 --->
	  a role_name "separator" init_value " \"\" + separatorChar" class_relation const_relation public
	    comment "
The system-dependent default name-separator character, represented as a
string for convenience.  This string contains a single character, namely
<code>{@link #separatorChar}</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3126146 // separator (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1640834 "pathSeparatorChar"
	class_attribute const_attribute public explicit_type "char"
	init_value " fs.getPathSeparator()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The system-dependent path-separator character.  This field is
initialized to contain the first character of the value of the system
property <code>path.separator</code>.  This character is used to
separate filenames in a sequence of files given as a <em>path list</em>.
On UNIX systems, this character is <code>':'</code>; on Microsoft Windows systems it
is <code>';'</code>.

@see     java.lang.System#getProperty(java.lang.String)

"
      end

      classrelation 3126274 // pathSeparator (<unidirectional association>)
	relation 3126274 --->
	  a role_name "pathSeparator" init_value " \"\" + pathSeparatorChar" class_relation const_relation public
	    comment "
The system-dependent path-separator character, represented as a string
for convenience.  This string contains a single character, namely
<code>{@link #pathSeparatorChar}</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3126274 // pathSeparator (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6861314 "File"
	private explicit_return_type ""
	nparams 2
	  param inout name "pathname" type class_ref 128130 // String
	  param in name "prefixLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Constructors -- 

Internal constructor for already-normalized pathname strings.
"
      end

      operation 6861442 "File"
	private explicit_return_type ""
	nparams 2
	  param inout name "child" type class_ref 128130 // String
	  param inout name "parent" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal constructor for already-normalized pathname strings.
The parameter order is used to disambiguate this method from the
public(File, String) constructor.
"
      end

      operation 6861570 "File"
	public explicit_return_type ""
	nparams 1
	  param inout name "pathname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>File</code> instance by converting the given
pathname string into an abstract pathname.  If the given string is
the empty string, then the result is the empty abstract pathname.

@param   pathname  A pathname string
@throws  NullPointerException
         If the <code>pathname</code> argument is <code>null</code>
"
      end

      operation 6861698 "File"
	public explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 128130 // String
	  param inout name "child" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Note: The two-argument File constructors do not interpret an empty
parent abstract pathname as the current user directory.  An empty parent
instead causes the child to be resolved against the system-dependent
directory defined by the FileSystem.getDefaultParent method.  On Unix
this default is \"/\", while on Microsoft Windows it is \"\\\\\".  This is required for
compatibility with the original behavior of this class. 

Creates a new <code>File</code> instance from a parent pathname string
and a child pathname string.

<p> If <code>parent</code> is <code>null</code> then the new
<code>File</code> instance is created as if by invoking the
single-argument <code>File</code> constructor on the given
<code>child</code> pathname string.

<p> Otherwise the <code>parent</code> pathname string is taken to denote
a directory, and the <code>child</code> pathname string is taken to
denote either a directory or a file.  If the <code>child</code> pathname
string is absolute then it is converted into a relative pathname in a
system-dependent way.  If <code>parent</code> is the empty string then
the new <code>File</code> instance is created by converting
<code>child</code> into an abstract pathname and resolving the result
against a system-dependent default directory.  Otherwise each pathname
string is converted into an abstract pathname and the child abstract
pathname is resolved against the parent.

@param   parent  The parent pathname string
@param   child   The child pathname string
@throws  NullPointerException
         If <code>child</code> is <code>null</code>
"
      end

      operation 6861826 "File"
	public explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 131970 // File
	  param inout name "child" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>File</code> instance from a parent abstract
pathname and a child pathname string.

<p> If <code>parent</code> is <code>null</code> then the new
<code>File</code> instance is created as if by invoking the
single-argument <code>File</code> constructor on the given
<code>child</code> pathname string.

<p> Otherwise the <code>parent</code> abstract pathname is taken to
denote a directory, and the <code>child</code> pathname string is taken
to denote either a directory or a file.  If the <code>child</code>
pathname string is absolute then it is converted into a relative
pathname in a system-dependent way.  If <code>parent</code> is the empty
abstract pathname then the new <code>File</code> instance is created by
converting <code>child</code> into an abstract pathname and resolving
the result against a system-dependent default directory.  Otherwise each
pathname string is converted into an abstract pathname and the child
abstract pathname is resolved against the parent.

@param   parent  The parent abstract pathname
@param   child   The child pathname string
@throws  NullPointerException
         If <code>child</code> is <code>null</code>
"
      end

      operation 6861954 "File"
	public explicit_return_type ""
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>File</tt> instance by converting the given
<tt>file:</tt> URI into an abstract pathname.

<p> The exact form of a <tt>file:</tt> URI is system-dependent, hence
the transformation performed by this constructor is also
system-dependent.

<p> For a given abstract pathname <i>f</i> it is guaranteed that

<blockquote><tt>
new File(</tt><i>&nbsp;f</i><tt>.{@link #toURI() toURI}()).equals(</tt><i>&nbsp;f</i><tt>.{@link #getAbsoluteFile() getAbsoluteFile}())
</tt></blockquote>

so long as the original abstract pathname, the URI, and the new abstract
pathname are all created in (possibly different invocations of) the same
Java virtual machine.  This relationship typically does not hold,
however, when a <tt>file:</tt> URI that is created in a virtual machine
on one operating system is converted into an abstract pathname in a
virtual machine on a different operating system.

@param  uri
        An absolute, hierarchical URI with a scheme equal to
        <tt>\"file\"</tt>, a non-empty path component, and undefined
        authority, query, and fragment components

@throws  NullPointerException
         If <tt>uri</tt> is <tt>null</tt>

@throws  IllegalArgumentException
         If the preconditions on the parameter do not hold

@see #toURI()
@see java.net.URI
@since 1.4
"
      end

      operation 6862082 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path-component accessors -- 

Returns the name of the file or directory denoted by this abstract
pathname.  This is just the last name in the pathname's name
sequence.  If the pathname's name sequence is empty, then the empty
string is returned.

@return  The name of the file or directory denoted by this abstract
         pathname, or the empty string if this pathname's name sequence
         is empty
"
      end

      operation 6862210 "getParent"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pathname string of this abstract pathname's parent, or
<code>null</code> if this pathname does not name a parent directory.

<p> The <em>parent</em> of an abstract pathname consists of the
pathname's prefix, if any, and each name in the pathname's name
sequence except for the last.  If the name sequence is empty then
the pathname does not name a parent directory.

@return  The pathname string of the parent directory named by this
         abstract pathname, or <code>null</code> if this pathname
         does not name a parent
"
      end

      operation 6862338 "getParentFile"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the abstract pathname of this abstract pathname's parent,
or <code>null</code> if this pathname does not name a parent
directory.

<p> The <em>parent</em> of an abstract pathname consists of the
pathname's prefix, if any, and each name in the pathname's name
sequence except for the last.  If the name sequence is empty then
the pathname does not name a parent directory.

@return  The abstract pathname of the parent directory named by this
         abstract pathname, or <code>null</code> if this pathname
         does not name a parent

@since 1.2
"
      end

      operation 6862466 "getPath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this abstract pathname into a pathname string.  The resulting
string uses the {@link #separator default name-separator character} to
separate the names in the name sequence.

@return  The string form of this abstract pathname
"
      end

      operation 6862594 "isAbsolute"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path operations -- 

Tests whether this abstract pathname is absolute.  The definition of
absolute pathname is system dependent.  On UNIX systems, a pathname is
absolute if its prefix is <code>\"/\"</code>.  On Microsoft Windows systems, a
pathname is absolute if its prefix is a drive specifier followed by
<code>\"\\\\\"</code>, or if its prefix is <code>\"\\\\\\\\\"</code>.

@return  <code>true</code> if this abstract pathname is absolute,
         <code>false</code> otherwise
"
      end

      operation 6862722 "getAbsolutePath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute pathname string of this abstract pathname.

<p> If this abstract pathname is already absolute, then the pathname
string is simply returned as if by the <code>{@link #getPath}</code>
method.  If this abstract pathname is the empty abstract pathname then
the pathname string of the current user directory, which is named by the
system property <code>user.dir</code>, is returned.  Otherwise this
pathname is resolved in a system-dependent way.  On UNIX systems, a
relative pathname is made absolute by resolving it against the current
user directory.  On Microsoft Windows systems, a relative pathname is made absolute
by resolving it against the current directory of the drive named by the
pathname, if any; if not, it is resolved against the current user
directory.

@return  The absolute pathname string denoting the same file or
         directory as this abstract pathname

@throws  SecurityException
         If a required system property value cannot be accessed.

@see     java.io.File#isAbsolute()
"
      end

      operation 6862850 "getAbsoluteFile"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute form of this abstract pathname.  Equivalent to
<code>new&nbsp;File(this.{@link #getAbsolutePath})</code>.

@return  The absolute abstract pathname denoting the same file or
         directory as this abstract pathname

@throws  SecurityException
         If a required system property value cannot be accessed.

@since 1.2
"
      end

      operation 6862978 "getCanonicalPath"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical pathname string of this abstract pathname.

<p> A canonical pathname is both absolute and unique.  The precise
definition of canonical form is system-dependent.  This method first
converts this pathname to absolute form if necessary, as if by invoking the
{@link #getAbsolutePath} method, and then maps it to its unique form in a
system-dependent way.  This typically involves removing redundant names
such as <tt>\".\"</tt> and <tt>\"..\"</tt> from the pathname, resolving
symbolic links (on UNIX platforms), and converting drive letters to a
standard case (on Microsoft Windows platforms).

<p> Every pathname that denotes an existing file or directory has a
unique canonical form.  Every pathname that denotes a nonexistent file
or directory also has a unique canonical form.  The canonical form of
the pathname of a nonexistent file or directory may be different from
the canonical form of the same pathname after the file or directory is
created.  Similarly, the canonical form of the pathname of an existing
file or directory may be different from the canonical form of the same
pathname after the file or directory is deleted.

@return  The canonical pathname string denoting the same file or
         directory as this abstract pathname

@throws  IOException
         If an I/O error occurs, which is possible because the
         construction of the canonical pathname may require
         filesystem queries

@throws  SecurityException
         If a required system property value cannot be accessed, or
         if a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead}</code> method denies
         read access to the file

@since   JDK1.1
@see     Path#toRealPath
"
      end

      operation 6863106 "getCanonicalFile"
	public return_type class_ref 131970 // File
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical form of this abstract pathname.  Equivalent to
<code>new&nbsp;File(this.{@link #getCanonicalPath})</code>.

@return  The canonical pathname string denoting the same file or
         directory as this abstract pathname

@throws  IOException
         If an I/O error occurs, which is possible because the
         construction of the canonical pathname may require
         filesystem queries

@throws  SecurityException
         If a required system property value cannot be accessed, or
         if a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead}</code> method denies
         read access to the file

@since 1.2
@see     Path#toRealPath
"
      end

      operation 6863234 "slashify"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "path" type class_ref 128130 // String
	  param inout name "isDirectory" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6863362 "toURL"
	public return_type class_ref 243458 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Converts this abstract pathname into a <code>file:</code> URL.  The
exact form of the URL is system-dependent.  If it can be determined that
the file denoted by this abstract pathname is a directory, then the
resulting URL will end with a slash.

@return  A URL object representing the equivalent file URL

@throws  MalformedURLException
         If the path cannot be parsed as a URL

@see     #toURI()
@see     java.net.URI
@see     java.net.URI#toURL()
@see     java.net.URL
@since   1.2

@deprecated This method does not automatically escape characters that
are illegal in URLs.  It is recommended that new code convert an
abstract pathname into a URL by first converting it into a URI, via the
{@link #toURI() toURI} method, and then converting the URI into a URL
via the {@link java.net.URI#toURL() URI.toURL} method.
"
      end

      operation 6863490 "toURI"
	public return_type class_ref 783874 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>file:</tt> URI that represents this abstract pathname.

<p> The exact form of the URI is system-dependent.  If it can be
determined that the file denoted by this abstract pathname is a
directory, then the resulting URI will end with a slash.

<p> For a given abstract pathname <i>f</i>, it is guaranteed that

<blockquote><tt>
new {@link #File(java.net.URI) File}(</tt><i>&nbsp;f</i><tt>.toURI()).equals(</tt><i>&nbsp;f</i><tt>.{@link #getAbsoluteFile() getAbsoluteFile}())
</tt></blockquote>

so long as the original abstract pathname, the URI, and the new abstract
pathname are all created in (possibly different invocations of) the same
Java virtual machine.  Due to the system-dependent nature of abstract
pathnames, however, this relationship typically does not hold when a
<tt>file:</tt> URI that is created in a virtual machine on one operating
system is converted into an abstract pathname in a virtual machine on a
different operating system.

<p> Note that when this abstract pathname represents a UNC pathname then
all components of the UNC (including the server name component) are encoded
in the {@code URI} path. The authority component is undefined, meaning
that it is represented as {@code null}. The {@link Path} class defines the
{@link Path#toUri toUri} method to encode the server name in the authority
component of the resulting {@code URI}. The {@link #toPath toPath} method
may be used to obtain a {@code Path} representing this abstract pathname.

@return  An absolute, hierarchical URI with a scheme equal to
         <tt>\"file\"</tt>, a path representing this abstract pathname,
         and undefined authority, query, and fragment components
@throws SecurityException If a required system property value cannot
be accessed.

@see #File(java.net.URI)
@see java.net.URI
@see java.net.URI#toURL()
@since 1.4
"
      end

      operation 6863618 "canRead"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Attribute accessors -- 

Tests whether the application can read the file denoted by this
abstract pathname. On some platforms it may be possible to start the
Java virtual machine with special privileges that allow it to read
files that are marked as unreadable. Consequently this method may return
{@code true} even though the file does not have read permissions.

@return  <code>true</code> if and only if the file specified by this
         abstract pathname exists <em>and</em> can be read by the
         application; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file
"
      end

      operation 6863746 "canWrite"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the application can modify the file denoted by this
abstract pathname. On some platforms it may be possible to start the
Java virtual machine with special privileges that allow it to modify
files that are marked read-only. Consequently this method may return
{@code true} even though the file is marked read-only.

@return  <code>true</code> if and only if the file system actually
         contains a file denoted by this abstract pathname <em>and</em>
         the application is allowed to write to the file;
         <code>false</code> otherwise.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file
"
      end

      operation 6863874 "exists"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file or directory denoted by this abstract pathname
exists.

@return  <code>true</code> if and only if the file or directory denoted
         by this abstract pathname exists; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file or directory
"
      end

      operation 6864002 "isDirectory"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file denoted by this abstract pathname is a
directory.

<p> Where it is required to distinguish an I/O exception from the case
that the file is not a directory, or where several attributes of the
same file are required at the same time, then the {@link
java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
Files.readAttributes} method may be used.

@return <code>true</code> if and only if the file denoted by this
         abstract pathname exists <em>and</em> is a directory;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file
"
      end

      operation 6864130 "isFile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file denoted by this abstract pathname is a normal
file.  A file is <em>normal</em> if it is not a directory and, in
addition, satisfies other system-dependent criteria.  Any non-directory
file created by a Java application is guaranteed to be a normal file.

<p> Where it is required to distinguish an I/O exception from the case
that the file is not a normal file, or where several attributes of the
same file are required at the same time, then the {@link
java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
Files.readAttributes} method may be used.

@return  <code>true</code> if and only if the file denoted by this
         abstract pathname exists <em>and</em> is a normal file;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file
"
      end

      operation 6864258 "isHidden"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the file named by this abstract pathname is a hidden
file.  The exact definition of <em>hidden</em> is system-dependent.  On
UNIX systems, a file is considered to be hidden if its name begins with
a period character (<code>'.'</code>).  On Microsoft Windows systems, a file is
considered to be hidden if it has been marked as such in the filesystem.

@return  <code>true</code> if and only if the file denoted by this
         abstract pathname is hidden according to the conventions of the
         underlying platform

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file

@since 1.2
"
      end

      operation 6864386 "lastModified"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time that the file denoted by this abstract pathname was
last modified.

<p> Where it is required to distinguish an I/O exception from the case
where {@code 0L} is returned, or where several attributes of the
same file are required at the same time, or where the time of last
access or the creation time are required, then the {@link
java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
Files.readAttributes} method may be used.

@return  A <code>long</code> value representing the time the file was
         last modified, measured in milliseconds since the epoch
         (00:00:00 GMT, January 1, 1970), or <code>0L</code> if the
         file does not exist or if an I/O error occurs

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file
"
      end

      operation 6864514 "length"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the file denoted by this abstract pathname.
The return value is unspecified if this pathname denotes a directory.

<p> Where it is required to distinguish an I/O exception from the case
that {@code 0L} is returned, or where several attributes of the same file
are required at the same time, then the {@link
java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
Files.readAttributes} method may be used.

@return  The length, in bytes, of the file denoted by this abstract
         pathname, or <code>0L</code> if the file does not exist.  Some
         operating systems may return <code>0L</code> for pathnames
         denoting system-dependent entities such as devices or pipes.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method denies read access to the file
"
      end

      operation 6864642 "createNewFile"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File operations -- 

Atomically creates a new, empty file named by this abstract pathname if
and only if a file with this name does not yet exist.  The check for the
existence of the file and the creation of the file if it does not exist
are a single operation that is atomic with respect to all other
filesystem activities that might affect the file.
<P>
Note: this method should <i>not</i> be used for file-locking, as
the resulting protocol cannot be made to work reliably. The
{@link java.nio.channels.FileLock FileLock}
facility should be used instead.

@return  <code>true</code> if the named file does not exist and was
         successfully created; <code>false</code> if the named file
         already exists

@throws  IOException
         If an I/O error occurred

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file

@since 1.2
"
      end

      operation 6864770 "delete"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the file or directory denoted by this abstract pathname.  If
this pathname denotes a directory, then the directory must be empty in
order to be deleted.

<p> Note that the {@link java.nio.file.Files} class defines the {@link
java.nio.file.Files#delete(Path) delete} method to throw an {@link IOException}
when a file cannot be deleted. This is useful for error reporting and to
diagnose why a file cannot be deleted.

@return  <code>true</code> if and only if the file or directory is
         successfully deleted; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkDelete}</code> method denies
         delete access to the file
"
      end

      operation 6864898 "deleteOnExit"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that the file or directory denoted by this abstract
pathname be deleted when the virtual machine terminates.
Files (or directories) are deleted in the reverse order that
they are registered. Invoking this method to delete a file or
directory that is already registered for deletion has no effect.
Deletion will be attempted only for normal termination of the
virtual machine, as defined by the Java Language Specification.

<p> Once deletion has been requested, it is not possible to cancel the
request.  This method should therefore be used with care.

<P>
Note: this method should <i>not</i> be used for file-locking, as
the resulting protocol cannot be made to work reliably. The
{@link java.nio.channels.FileLock FileLock}
facility should be used instead.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkDelete}</code> method denies
         delete access to the file

@see #delete

@since 1.2
"
      end

      operation 6865026 "list"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of strings naming the files and directories in the
directory denoted by this abstract pathname.

<p> If this abstract pathname does not denote a directory, then this
method returns {@code null}.  Otherwise an array of strings is
returned, one for each file or directory in the directory.  Names
denoting the directory itself and the directory's parent directory are
not included in the result.  Each string is a file name rather than a
complete path.

<p> There is no guarantee that the name strings in the resulting array
will appear in any specific order; they are not, in particular,
guaranteed to appear in alphabetical order.

<p> Note that the {@link java.nio.file.Files} class defines the {@link
java.nio.file.Files#newDirectoryStream(Path) newDirectoryStream} method to
open a directory and iterate over the names of the files in the directory.
This may use less resources when working with very large directories, and
may be more responsive when working with remote directories.

@return  An array of strings naming the files and directories in the
         directory denoted by this abstract pathname.  The array will be
         empty if the directory is empty.  Returns {@code null} if
         this abstract pathname does not denote a directory, or if an
         I/O error occurs.

@throws  SecurityException
         If a security manager exists and its {@link
         SecurityManager#checkRead(String)} method denies read access to
         the directory
"
      end

      operation 6865154 "list"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "filter" type class_ref 580482 // FilenameFilter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of strings naming the files and directories in the
directory denoted by this abstract pathname that satisfy the specified
filter.  The behavior of this method is the same as that of the
{@link #list()} method, except that the strings in the returned array
must satisfy the filter.  If the given {@code filter} is {@code null}
then all names are accepted.  Otherwise, a name satisfies the filter if
and only if the value {@code true} results when the {@link
FilenameFilter#accept FilenameFilter.accept(File,&nbsp;String)} method
of the filter is invoked on this abstract pathname and the name of a
file or directory in the directory that it denotes.

@param  filter
        A filename filter

@return  An array of strings naming the files and directories in the
         directory denoted by this abstract pathname that were accepted
         by the given {@code filter}.  The array will be empty if the
         directory is empty or if no names were accepted by the filter.
         Returns {@code null} if this abstract pathname does not denote
         a directory, or if an I/O error occurs.

@throws  SecurityException
         If a security manager exists and its {@link
         SecurityManager#checkRead(String)} method denies read access to
         the directory

@see java.nio.file.Files#newDirectoryStream(Path,String)
"
      end

      operation 6865282 "listFiles"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of abstract pathnames denoting the files in the
directory denoted by this abstract pathname.

<p> If this abstract pathname does not denote a directory, then this
method returns {@code null}.  Otherwise an array of {@code File} objects
is returned, one for each file or directory in the directory.  Pathnames
denoting the directory itself and the directory's parent directory are
not included in the result.  Each resulting abstract pathname is
constructed from this abstract pathname using the {@link #File(File,
String) File(File,&nbsp;String)} constructor.  Therefore if this
pathname is absolute then each resulting pathname is absolute; if this
pathname is relative then each resulting pathname will be relative to
the same directory.

<p> There is no guarantee that the name strings in the resulting array
will appear in any specific order; they are not, in particular,
guaranteed to appear in alphabetical order.

<p> Note that the {@link java.nio.file.Files} class defines the {@link
java.nio.file.Files#newDirectoryStream(Path) newDirectoryStream} method
to open a directory and iterate over the names of the files in the
directory. This may use less resources when working with very large
directories.

@return  An array of abstract pathnames denoting the files and
         directories in the directory denoted by this abstract pathname.
         The array will be empty if the directory is empty.  Returns
         {@code null} if this abstract pathname does not denote a
         directory, or if an I/O error occurs.

@throws  SecurityException
         If a security manager exists and its {@link
         SecurityManager#checkRead(String)} method denies read access to
         the directory

@since  1.2
"
      end

      operation 6865410 "listFiles"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "filter" type class_ref 580482 // FilenameFilter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of abstract pathnames denoting the files and
directories in the directory denoted by this abstract pathname that
satisfy the specified filter.  The behavior of this method is the same
as that of the {@link #listFiles()} method, except that the pathnames in
the returned array must satisfy the filter.  If the given {@code filter}
is {@code null} then all pathnames are accepted.  Otherwise, a pathname
satisfies the filter if and only if the value {@code true} results when
the {@link FilenameFilter#accept
FilenameFilter.accept(File,&nbsp;String)} method of the filter is
invoked on this abstract pathname and the name of a file or directory in
the directory that it denotes.

@param  filter
        A filename filter

@return  An array of abstract pathnames denoting the files and
         directories in the directory denoted by this abstract pathname.
         The array will be empty if the directory is empty.  Returns
         {@code null} if this abstract pathname does not denote a
         directory, or if an I/O error occurs.

@throws  SecurityException
         If a security manager exists and its {@link
         SecurityManager#checkRead(String)} method denies read access to
         the directory

@since  1.2
@see java.nio.file.Files#newDirectoryStream(Path,String)
"
      end

      operation 6865538 "listFiles"
	public return_type class_ref 131970 // File
	nparams 1
	  param inout name "filter" type class_ref 923394 // FileFilter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of abstract pathnames denoting the files and
directories in the directory denoted by this abstract pathname that
satisfy the specified filter.  The behavior of this method is the same
as that of the {@link #listFiles()} method, except that the pathnames in
the returned array must satisfy the filter.  If the given {@code filter}
is {@code null} then all pathnames are accepted.  Otherwise, a pathname
satisfies the filter if and only if the value {@code true} results when
the {@link FileFilter#accept FileFilter.accept(File)} method of the
filter is invoked on the pathname.

@param  filter
        A file filter

@return  An array of abstract pathnames denoting the files and
         directories in the directory denoted by this abstract pathname.
         The array will be empty if the directory is empty.  Returns
         {@code null} if this abstract pathname does not denote a
         directory, or if an I/O error occurs.

@throws  SecurityException
         If a security manager exists and its {@link
         SecurityManager#checkRead(String)} method denies read access to
         the directory

@since  1.2
@see java.nio.file.Files#newDirectoryStream(Path,java.nio.file.DirectoryStream.Filter)
"
      end

      operation 6865666 "mkdir"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the directory named by this abstract pathname.

@return  <code>true</code> if and only if the directory was
         created; <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not permit the named directory to be created
"
      end

      operation 6865794 "mkdirs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the directory named by this abstract pathname, including any
necessary but nonexistent parent directories.  Note that if this
operation fails it may have succeeded in creating some of the necessary
parent directories.

@return  <code>true</code> if and only if the directory was created,
         along with all necessary parent directories; <code>false</code>
         otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkRead(java.lang.String)}</code>
         method does not permit verification of the existence of the
         named directory and all necessary parent directories; or if
         the <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not permit the named directory and all necessary
         parent directories to be created
"
      end

      operation 6865922 "renameTo"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "dest" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Renames the file denoted by this abstract pathname.

<p> Many aspects of the behavior of this method are inherently
platform-dependent: The rename operation might not be able to move a
file from one filesystem to another, it might not be atomic, and it
might not succeed if a file with the destination abstract pathname
already exists.  The return value should always be checked to make sure
that the rename operation was successful.

<p> Note that the {@link java.nio.file.Files} class defines the {@link
java.nio.file.Files#move move} method to move or rename a file in a
platform independent manner.

@param  dest  The new abstract pathname for the named file

@return  <code>true</code> if and only if the renaming succeeded;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to either the old or new pathnames

@throws  NullPointerException
         If parameter <code>dest</code> is <code>null</code>
"
      end

      operation 6866050 "setLastModified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "time" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the last-modified time of the file or directory named by this
abstract pathname.

<p> All platforms support file-modification times to the nearest second,
but some provide more precision.  The argument will be truncated to fit
the supported precision.  If the operation succeeds and no intervening
operations on the file take place, then the next invocation of the
<code>{@link #lastModified}</code> method will return the (possibly
truncated) <code>time</code> argument that was passed to this method.

@param  time  The new last-modified time, measured in milliseconds since
              the epoch (00:00:00 GMT, January 1, 1970)

@return <code>true</code> if and only if the operation succeeded;
         <code>false</code> otherwise

@throws  IllegalArgumentException  If the argument is negative

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the named file

@since 1.2
"
      end

      operation 6866178 "setReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the file or directory named by this abstract pathname so that
only read operations are allowed. After invoking this method the file
or directory will not change until it is either deleted or marked
to allow write access. On some platforms it may be possible to start the
Java virtual machine with special privileges that allow it to modify
files that are marked read-only. Whether or not a read-only file or
directory may be deleted depends upon the underlying system.

@return <code>true</code> if and only if the operation succeeded;
         <code>false</code> otherwise

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the named file

@since 1.2
"
      end

      operation 6866306 "setWritable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "writable" explicit_type "boolean"
	  param inout name "ownerOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the owner's or everybody's write permission for this abstract
pathname. On some platforms it may be possible to start the Java virtual
machine with special privileges that allow it to modify files that
disallow write operations.

<p> The {@link java.nio.file.Files} class defines methods that operate on
file attributes including file permissions. This may be used when finer
manipulation of file permissions is required.

@param   writable
         If <code>true</code>, sets the access permission to allow write
         operations; if <code>false</code> to disallow write operations

@param   ownerOnly
         If <code>true</code>, the write permission applies only to the
         owner's write permission; otherwise, it applies to everybody.  If
         the underlying file system can not distinguish the owner's write
         permission from that of others, then the permission will apply to
         everybody, regardless of this value.

@return  <code>true</code> if and only if the operation succeeded. The
         operation will fail if the user does not have permission to change
         the access permissions of this abstract pathname.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the named file

@since 1.6
"
      end

      operation 6866434 "setWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "writable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to set the owner's write permission for this abstract
pathname. On some platforms it may be possible to start the Java virtual
machine with special privileges that allow it to modify files that
disallow write operations.

<p> An invocation of this method of the form <tt>file.setWritable(arg)</tt>
behaves in exactly the same way as the invocation

<pre>
    file.setWritable(arg, true) </pre>

@param   writable
         If <code>true</code>, sets the access permission to allow write
         operations; if <code>false</code> to disallow write operations

@return  <code>true</code> if and only if the operation succeeded.  The
         operation will fail if the user does not have permission to
         change the access permissions of this abstract pathname.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file

@since 1.6
"
      end

      operation 6866562 "setReadable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "readable" explicit_type "boolean"
	  param inout name "ownerOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the owner's or everybody's read permission for this abstract
pathname. On some platforms it may be possible to start the Java virtual
machine with special privileges that allow it to read files that are
marked as unreadable.

<p> The {@link java.nio.file.Files} class defines methods that operate on
file attributes including file permissions. This may be used when finer
manipulation of file permissions is required.

@param   readable
         If <code>true</code>, sets the access permission to allow read
         operations; if <code>false</code> to disallow read operations

@param   ownerOnly
         If <code>true</code>, the read permission applies only to the
         owner's read permission; otherwise, it applies to everybody.  If
         the underlying file system can not distinguish the owner's read
         permission from that of others, then the permission will apply to
         everybody, regardless of this value.

@return  <code>true</code> if and only if the operation succeeded.  The
         operation will fail if the user does not have permission to
         change the access permissions of this abstract pathname.  If
         <code>readable</code> is <code>false</code> and the underlying
         file system does not implement a read permission, then the
         operation will fail.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file

@since 1.6
"
      end

      operation 6866690 "setReadable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "readable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to set the owner's read permission for this abstract
pathname. On some platforms it may be possible to start the Java virtual
machine with special privileges that allow it to read files that that are
marked as unreadable.

<p>An invocation of this method of the form <tt>file.setReadable(arg)</tt>
behaves in exactly the same way as the invocation

<pre>
    file.setReadable(arg, true) </pre>

@param  readable
         If <code>true</code>, sets the access permission to allow read
         operations; if <code>false</code> to disallow read operations

@return  <code>true</code> if and only if the operation succeeded.  The
         operation will fail if the user does not have permission to
         change the access permissions of this abstract pathname.  If
         <code>readable</code> is <code>false</code> and the underlying
         file system does not implement a read permission, then the
         operation will fail.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file

@since 1.6
"
      end

      operation 6866818 "setExecutable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "executable" explicit_type "boolean"
	  param inout name "ownerOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the owner's or everybody's execute permission for this abstract
pathname. On some platforms it may be possible to start the Java virtual
machine with special privileges that allow it to execute files that are
not marked executable.

<p> The {@link java.nio.file.Files} class defines methods that operate on
file attributes including file permissions. This may be used when finer
manipulation of file permissions is required.

@param   executable
         If <code>true</code>, sets the access permission to allow execute
         operations; if <code>false</code> to disallow execute operations

@param   ownerOnly
         If <code>true</code>, the execute permission applies only to the
         owner's execute permission; otherwise, it applies to everybody.
         If the underlying file system can not distinguish the owner's
         execute permission from that of others, then the permission will
         apply to everybody, regardless of this value.

@return  <code>true</code> if and only if the operation succeeded.  The
         operation will fail if the user does not have permission to
         change the access permissions of this abstract pathname.  If
         <code>executable</code> is <code>false</code> and the underlying
         file system does not implement an execute permission, then the
         operation will fail.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file

@since 1.6
"
      end

      operation 6866946 "setExecutable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "executable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to set the owner's execute permission for this
abstract pathname. On some platforms it may be possible to start the Java
virtual machine with special privileges that allow it to execute files
that are not marked executable.

<p>An invocation of this method of the form <tt>file.setExcutable(arg)</tt>
behaves in exactly the same way as the invocation

<pre>
    file.setExecutable(arg, true) </pre>

@param   executable
         If <code>true</code>, sets the access permission to allow execute
         operations; if <code>false</code> to disallow execute operations

@return   <code>true</code> if and only if the operation succeeded.  The
          operation will fail if the user does not have permission to
          change the access permissions of this abstract pathname.  If
          <code>executable</code> is <code>false</code> and the underlying
          file system does not implement an execute permission, then the
          operation will fail.

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method denies write access to the file

@since 1.6
"
      end

      operation 6867074 "canExecute"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the application can execute the file denoted by this
abstract pathname. On some platforms it may be possible to start the
Java virtual machine with special privileges that allow it to execute
files that are not marked executable. Consequently this method may return
{@code true} even though the file does not have execute permissions.

@return  <code>true</code> if and only if the abstract pathname exists
         <em>and</em> the application is allowed to execute the file

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkExec(java.lang.String)}</code>
         method denies execute access to the file

@since 1.6
"
      end

      operation 6867202 "listRoots"
	class_operation public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Filesystem interface -- 

List the available filesystem roots.

<p> A particular Java platform may support zero or more
hierarchically-organized file systems.  Each file system has a
{@code root} directory from which all other files in that file system
can be reached.  Windows platforms, for example, have a root directory
for each active drive; UNIX platforms have a single root directory,
namely {@code \"/\"}.  The set of available filesystem roots is affected
by various system-level operations such as the insertion or ejection of
removable media and the disconnecting or unmounting of physical or
virtual disk drives.

<p> This method returns an array of {@code File} objects that denote the
root directories of the available filesystem roots.  It is guaranteed
that the canonical pathname of any file physically present on the local
machine will begin with one of the roots returned by this method.

<p> The canonical pathname of a file that resides on some other machine
and is accessed via a remote-filesystem protocol such as SMB or NFS may
or may not begin with one of the roots returned by this method.  If the
pathname of a remote file is syntactically indistinguishable from the
pathname of a local file then it will begin with one of the roots
returned by this method.  Thus, for example, {@code File} objects
denoting the root directories of the mapped network drives of a Windows
platform will be returned by this method, while {@code File} objects
containing UNC pathnames will not be returned by this method.

<p> Unlike most methods in this class, this method does not throw
security exceptions.  If a security manager exists and its {@link
SecurityManager#checkRead(String)} method denies read access to a
particular root directory, then that directory will not appear in the
result.

@return  An array of {@code File} objects denoting the available
         filesystem roots, or {@code null} if the set of roots could not
         be determined.  The array will be empty if there are no
         filesystem roots.

@since  1.2
@see java.nio.file.FileStore
"
      end

      operation 6867330 "getTotalSpace"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Disk usage -- 

Returns the size of the partition <a href=\"#partName\">named</a> by this
abstract pathname.

@return  The size, in bytes, of the partition or <tt>0L</tt> if this
         abstract pathname does not name a partition

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"getFileSystemAttributes\")</tt>
         or its {@link SecurityManager#checkRead(String)} method denies
         read access to the file named by this abstract pathname

@since  1.6
"
      end

      operation 6867458 "getFreeSpace"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of unallocated bytes in the partition <a
href=\"#partName\">named</a> by this abstract path name.

<p> The returned number of unallocated bytes is a hint, but not
a guarantee, that it is possible to use most or any of these
bytes.  The number of unallocated bytes is most likely to be
accurate immediately after this call.  It is likely to be made
inaccurate by any external I/O operations including those made
on the system outside of this virtual machine.  This method
makes no guarantee that write operations to this file system
will succeed.

@return  The number of unallocated bytes on the partition or <tt>0L</tt>
         if the abstract pathname does not name a partition.  This
         value will be less than or equal to the total file system size
         returned by {@link #getTotalSpace}.

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"getFileSystemAttributes\")</tt>
         or its {@link SecurityManager#checkRead(String)} method denies
         read access to the file named by this abstract pathname

@since  1.6
"
      end

      operation 6867586 "getUsableSpace"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes available to this virtual machine on the
partition <a href=\"#partName\">named</a> by this abstract pathname.  When
possible, this method checks for write permissions and other operating
system restrictions and will therefore usually provide a more accurate
estimate of how much new data can actually be written than {@link
#getFreeSpace}.

<p> The returned number of available bytes is a hint, but not a
guarantee, that it is possible to use most or any of these bytes.  The
number of unallocated bytes is most likely to be accurate immediately
after this call.  It is likely to be made inaccurate by any external
I/O operations including those made on the system outside of this
virtual machine.  This method makes no guarantee that write operations
to this file system will succeed.

@return  The number of available bytes on the partition or <tt>0L</tt>
         if the abstract pathname does not name a partition.  On
         systems where this information is not available, this method
         will be equivalent to a call to {@link #getFreeSpace}.

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"getFileSystemAttributes\")</tt>
         or its {@link SecurityManager#checkRead(String)} method denies
         read access to the file named by this abstract pathname

@since  1.6
"
      end

      class 923522 "TempDirectory"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 6867714 "TempDirectory"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3126402 // tmpdir (<unidirectional association>)
	  relation 3126402 --->
	    a role_name "tmpdir" init_value " new File(AccessController
            .doPrivileged(new GetPropertyAction(\"java.io.tmpdir\")))" class_relation const_relation private
	      comment " temporary directory location
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3126402 // tmpdir (<unidirectional association>)
	    b parent class_ref 131970 // File
	end

	operation 6867842 "location"
	  class_operation package return_type class_ref 131970 // File
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3126530 // random (<unidirectional association>)
	  relation 3126530 --->
	    a role_name "random" init_value " new SecureRandom()" class_relation const_relation private
	      comment " file name generation
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3126530 // random (<unidirectional association>)
	    b parent class_ref 753154 // SecureRandom
	end

	operation 6867970 "generateFile"
	  class_operation package return_type class_ref 131970 // File
	  nparams 3
	    param inout name "prefix" type class_ref 128130 // String
	    param inout name "suffix" type class_ref 128130 // String
	    param inout name "dir" type class_ref 131970 // File
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6868098 "createTempFile"
	class_operation public return_type class_ref 131970 // File
	nparams 3
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "suffix" type class_ref 128130 // String
	  param inout name "directory" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p> Creates a new empty file in the specified directory, using the
given prefix and suffix strings to generate its name.  If this method
returns successfully then it is guaranteed that:

<ol>
<li> The file denoted by the returned abstract pathname did not exist
     before this method was invoked, and
<li> Neither this method nor any of its variants will return the same
     abstract pathname again in the current invocation of the virtual
     machine.
</ol>

This method provides only part of a temporary-file facility.  To arrange
for a file created by this method to be deleted automatically, use the
<code>{@link #deleteOnExit}</code> method.

<p> The <code>prefix</code> argument must be at least three characters
long.  It is recommended that the prefix be a short, meaningful string
such as <code>\"hjb\"</code> or <code>\"mail\"</code>.  The
<code>suffix</code> argument may be <code>null</code>, in which case the
suffix <code>\".tmp\"</code> will be used.

<p> To create the new file, the prefix and the suffix may first be
adjusted to fit the limitations of the underlying platform.  If the
prefix is too long then it will be truncated, but its first three
characters will always be preserved.  If the suffix is too long then it
too will be truncated, but if it begins with a period character
(<code>'.'</code>) then the period and the first three characters
following it will always be preserved.  Once these adjustments have been
made the name of the new file will be generated by concatenating the
prefix, five or more internally-generated characters, and the suffix.

<p> If the <code>directory</code> argument is <code>null</code> then the
system-dependent default temporary-file directory will be used.  The
default temporary-file directory is specified by the system property
<code>java.io.tmpdir</code>.  On UNIX systems the default value of this
property is typically <code>\"/tmp\"</code> or <code>\"/var/tmp\"</code>; on
Microsoft Windows systems it is typically <code>\"C:\\\\WINNT\\\\TEMP\"</code>.  A different
value may be given to this system property when the Java virtual machine
is invoked, but programmatic changes to this property are not guaranteed
to have any effect upon the temporary directory used by this method.

@param  prefix     The prefix string to be used in generating the file's
                   name; must be at least three characters long

@param  suffix     The suffix string to be used in generating the file's
                   name; may be <code>null</code>, in which case the
                   suffix <code>\".tmp\"</code> will be used

@param  directory  The directory in which the file is to be created, or
                   <code>null</code> if the default temporary-file
                   directory is to be used

@return  An abstract pathname denoting a newly-created empty file

@throws  IllegalArgumentException
         If the <code>prefix</code> argument contains fewer than three
         characters

@throws  IOException  If a file could not be created

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not allow a file to be created

@since 1.2
"
      end

      operation 6868226 "createTempFile"
	class_operation public return_type class_ref 131970 // File
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "suffix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty file in the default temporary-file directory, using
the given prefix and suffix to generate its name. Invoking this method
is equivalent to invoking <code>{@link #createTempFile(java.lang.String,
java.lang.String, java.io.File)
createTempFile(prefix,&nbsp;suffix,&nbsp;null)}</code>.

<p> The {@link
java.nio.file.Files#createTempFile(String,String,java.nio.file.attribute.FileAttribute[])
Files.createTempFile} method provides an alternative method to create an
empty file in the temporary-file directory. Files created by that method
may have more restrictive access permissions to files created by this
method and so may be more suited to security-sensitive applications.

@param  prefix     The prefix string to be used in generating the file's
                   name; must be at least three characters long

@param  suffix     The suffix string to be used in generating the file's
                   name; may be <code>null</code>, in which case the
                   suffix <code>\".tmp\"</code> will be used

@return  An abstract pathname denoting a newly-created empty file

@throws  IllegalArgumentException
         If the <code>prefix</code> argument contains fewer than three
         characters

@throws  IOException  If a file could not be created

@throws  SecurityException
         If a security manager exists and its <code>{@link
         java.lang.SecurityManager#checkWrite(java.lang.String)}</code>
         method does not allow a file to be created

@since 1.2
@see java.nio.file.Files#createTempDirectory(String,FileAttribute[])
"
      end

      operation 6868354 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "pathname" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Basic infrastructure -- 

Compares two abstract pathnames lexicographically.  The ordering
defined by this method depends upon the underlying system.  On UNIX
systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
systems it is not.

@param   pathname  The abstract pathname to be compared to this abstract
                   pathname

@return  Zero if the argument is equal to this abstract pathname, a
         value less than zero if this abstract pathname is
         lexicographically less than the argument, or a value greater
         than zero if this abstract pathname is lexicographically
         greater than the argument

@since   1.2
"
      end

      operation 6868482 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests this abstract pathname for equality with the given object.
Returns <code>true</code> if and only if the argument is not
<code>null</code> and is an abstract pathname that denotes the same file
or directory as this abstract pathname.  Whether or not two abstract
pathnames are equal depends upon the underlying system.  On UNIX
systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
systems it is not.

@param   obj   The object to be compared with this abstract pathname

@return  <code>true</code> if and only if the objects are the same;
         <code>false</code> otherwise
"
      end

      operation 6868610 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a hash code for this abstract pathname.  Because equality of
abstract pathnames is inherently system-dependent, so is the computation
of their hash codes.  On UNIX systems, the hash code of an abstract
pathname is equal to the exclusive <em>or</em> of the hash code
of its pathname string and the decimal value
<code>1234321</code>.  On Microsoft Windows systems, the hash
code is equal to the exclusive <em>or</em> of the hash code of
its pathname string converted to lower case and the decimal
value <code>1234321</code>.  Locale is not taken into account on
lowercasing the pathname string.

@return  A hash code for this abstract pathname
"
      end

      operation 6868738 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pathname string of this abstract pathname.  This is just the
string returned by the <code>{@link #getPath}</code> method.

@return  The string form of this abstract pathname
"
      end

      operation 6868866 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WriteObject is called to save this filename.
The separator character is saved also so it can be replaced
in case the path is reconstituted on a different host type.
<p>
@serialData  Default fields followed by separator character.
"
      end

      operation 6868994 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore this filename.
The original separator character is read.  If it is different
than the separator character on this system, then the old separator
is replaced by the local separator.
"
      end

      attribute 1640962 "PATH_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1641090 "PREFIX_LENGTH_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1641218 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 155138 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            sun.misc.Unsafe unsafe = sun.misc.Unsafe.getUnsafe();
            PATH_OFFSET = unsafe.objectFieldOffset(
                    File.class.getDeclaredField(\"path\"));
            PREFIX_LENGTH_OFFSET = unsafe.objectFieldOffset(
                    File.class.getDeclaredField(\"prefixLength\"));
            UNSAFE = unsafe;
        } catch (ReflectiveOperationException e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1641346 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 301077366599181567L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.0.2 for interoperability 
"
      end

      classrelation 3126658 // filePath (<unidirectional association>)
	relation 3126658 --->
	  a role_name "filePath" volatile private
	    comment " -- Integration with java.nio.file --
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3126658 // filePath (<unidirectional association>)
	  b parent class_ref 923650 // Path
      end

      operation 6869122 "toPath"
	public return_type class_ref 923650 // Path
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Path java.nio.file.Path} object constructed from the
this abstract path. The resulting {@code Path} is associated with the
{@link java.nio.file.FileSystems#getDefault default-filesystem}.

<p> The first invocation of this method works as if invoking it were
equivalent to evaluating the expression:
<blockquote><pre>
{@link java.nio.file.FileSystems#getDefault FileSystems.getDefault}().{@link
java.nio.file.FileSystem#getPath getPath}(this.{@link #getPath getPath}());
</pre></blockquote>
Subsequent invocations of this method return the same {@code Path}.

<p> If this abstract pathname is the empty abstract pathname then this
method returns a {@code Path} that may be used to access the current
user directory.

@return  a {@code Path} constructed from this abstract path

@throws  java.nio.file.InvalidPathException
         if a {@code Path} object cannot be constructed from the abstract
         path (see {@link java.nio.file.FileSystem#getPath FileSystem.getPath})

@since   1.7
@see Path#toFile
"
      end
    end

    class 136578 "Serializable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Serializability of a class is enabled by the class implementing the
java.io.Serializable interface. Classes that do not implement this
interface will not have any of their state serialized or
deserialized.  All subtypes of a serializable class are themselves
serializable.  The serialization interface has no methods or fields
and serves only to identify the semantics of being serializable. <p>

To allow subtypes of non-serializable classes to be serialized, the
subtype may assume responsibility for saving and restoring the
state of the supertype's public, protected, and (if accessible)
package fields.  The subtype may assume this responsibility only if
the class it extends has an accessible no-arg constructor to
initialize the class's state.  It is an error to declare a class
Serializable if this is not the case.  The error will be detected at
runtime. <p>

During deserialization, the fields of non-serializable classes will
be initialized using the public or protected no-arg constructor of
the class.  A no-arg constructor must be accessible to the subclass
that is serializable.  The fields of serializable subclasses will
be restored from the stream. <p>

When traversing a graph, an object may be encountered that does not
support the Serializable interface. In this case the
NotSerializableException will be thrown and will identify the class
of the non-serializable object. <p>

Classes that require special handling during the serialization and
deserialization process must implement special methods with these exact
signatures:

<PRE>
private void writeObject(java.io.ObjectOutputStream out)
    throws IOException
private void readObject(java.io.ObjectInputStream in)
    throws IOException, ClassNotFoundException;
private void readObjectNoData()
    throws ObjectStreamException;
</PRE>

<p>The writeObject method is responsible for writing the state of the
object for its particular class so that the corresponding
readObject method can restore it.  The default mechanism for saving
the Object's fields can be invoked by calling
out.defaultWriteObject. The method does not need to concern
itself with the state belonging to its superclasses or subclasses.
State is saved by writing the individual fields to the
ObjectOutputStream using the writeObject method or by using the
methods for primitive data types supported by DataOutput.

<p>The readObject method is responsible for reading from the stream and
restoring the classes fields. It may call in.defaultReadObject to invoke
the default mechanism for restoring the object's non-static and
non-transient fields.  The defaultReadObject method uses information in
the stream to assign the fields of the object saved in the stream with the
correspondingly named fields in the current object.  This handles the case
when the class has evolved to add new fields. The method does not need to
concern itself with the state belonging to its superclasses or subclasses.
State is saved by writing the individual fields to the
ObjectOutputStream using the writeObject method or by using the
methods for primitive data types supported by DataOutput.

<p>The readObjectNoData method is responsible for initializing the state of
the object for its particular class in the event that the serialization
stream does not list the given class as a superclass of the object being
deserialized.  This may occur in cases where the receiving party uses a
different version of the deserialized instance's class than the sending
party, and the receiver's version extends classes that are not extended by
the sender's version.  This may also occur if the serialization stream has
been tampered; hence, readObjectNoData is useful for initializing
deserialized objects properly despite a \"hostile\" or incomplete source
stream.

<p>Serializable classes that need to designate an alternative object to be
used when writing an object to the stream should implement this
special method with the exact signature:

<PRE>
ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;
</PRE><p>

This writeReplace method is invoked by serialization if the method
exists and it would be accessible from a method defined within the
class of the object being serialized. Thus, the method can have private,
protected and package-private access. Subclass access to this method
follows java accessibility rules. <p>

Classes that need to designate a replacement when an instance of it
is read from the stream should implement this special method with the
exact signature.

<PRE>
ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;
</PRE><p>

This readResolve method follows the same invocation rules and
accessibility rules as writeReplace.<p>

The serialization runtime associates with each serializable class a version
number, called a serialVersionUID, which is used during deserialization to
verify that the sender and receiver of a serialized object have loaded
classes for that object that are compatible with respect to serialization.
If the receiver has loaded a class for the object that has a different
serialVersionUID than that of the corresponding sender's class, then
deserialization will result in an {@link InvalidClassException}.  A
serializable class can declare its own serialVersionUID explicitly by
declaring a field named <code>\"serialVersionUID\"</code> that must be static,
final, and of type <code>long</code>:

<PRE>
ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;
</PRE>

If a serializable class does not explicitly declare a serialVersionUID, then
the serialization runtime will calculate a default serialVersionUID value
for that class based on various aspects of the class, as described in the
Java(TM) Object Serialization Specification.  However, it is <em>strongly
recommended</em> that all serializable classes explicitly declare
serialVersionUID values, since the default serialVersionUID computation is
highly sensitive to class details that may vary depending on compiler
implementations, and can thus result in unexpected
<code>InvalidClassException</code>s during deserialization.  Therefore, to
guarantee a consistent serialVersionUID value across different java compiler
implementations, a serializable class must declare an explicit
serialVersionUID value.  It is also strongly advised that explicit
serialVersionUID declarations use the <code>private</code> modifier where
possible, since such declarations apply only to the immediately declaring
class--serialVersionUID fields are not useful as inherited members. Array
classes cannot declare an explicit serialVersionUID, so they always have
the default computed value, but the requirement for matching
serialVersionUID values is waived for array classes.

@author  unascribed
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@see java.io.ObjectOutput
@see java.io.ObjectInput
@see java.io.Externalizable
@since   JDK1.1
"
    end

    class 141314 "BufferedReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Reads text from a character-input stream, buffering characters so as to
provide for the efficient reading of characters, arrays, and lines.

<p> The buffer size may be specified, or the default size may be used.  The
default is large enough for most purposes.

<p> In general, each read request made of a Reader causes a corresponding
read request to be made of the underlying character or byte stream.  It is
therefore advisable to wrap a BufferedReader around any Reader whose read()
operations may be costly, such as FileReaders and InputStreamReaders.  For
example,

<pre>
BufferedReader in
  = new BufferedReader(new FileReader(\"foo.in\"));
</pre>

will buffer the input from the specified file.  Without buffering, each
invocation of read() or readLine() could cause bytes to be read from the
file, converted into characters, and then returned, which can be very
inefficient.

<p> Programs that use DataInputStreams for textual input can be localized by
replacing each DataInputStream with an appropriate BufferedReader.

@see FileReader
@see InputStreamReader
@see java.nio.file.Files#newBufferedReader

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3122434 // <generalisation>
	relation 3122434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3122434 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      classrelation 3122562 // in (<unidirectional association>)
	relation 3122562 --->
	  a role_name "in" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3122562 // in (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      attribute 1635714 "cb"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1635842 "nChars"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1635970 "nextChar"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1636098 "INVALIDATED"
	class_attribute const_attribute private explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1636226 "UNMARKED"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1636354 "markedChar"
	private explicit_type "int"
	init_value " UNMARKED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1636482 "readAheadLimit"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Valid only when markedChar > 0 "
      end

      attribute 1636610 "skipLF"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If the next character is a line feed, skip it 
"
      end

      attribute 1636738 "markedSkipLF"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The skipLF flag when the mark was set 
"
      end

      attribute 1636866 "defaultCharBufferSize"
	class_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1636994 "defaultExpectedLineLength"
	class_attribute private explicit_type "int"
	init_value " 80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6847234 "BufferedReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 407298 // Reader
	  param in name "sz" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a buffering character-input stream that uses an input buffer of
the specified size.

@param  in   A Reader
@param  sz   Input-buffer size

@exception  IllegalArgumentException  If {@code sz <= 0}
"
      end

      operation 6847362 "BufferedReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a buffering character-input stream that uses a default-sized
input buffer.

@param  in   A Reader
"
      end

      operation 6847490 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks to make sure that the stream has not been closed "
      end

      operation 6847618 "fill"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fills the input buffer, taking the mark into account if it is valid.
"
      end

      operation 6847746 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character.

@return The character read, as an integer in the range
        0 to 65535 (<tt>0x00-0xffff</tt>), or -1 if the
        end of the stream has been reached
@exception  IOException  If an I/O error occurs
"
      end

      operation 6847874 "read1"
	private explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array, reading from the underlying
stream if necessary.
"
      end

      operation 6848002 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array.

<p> This method implements the general contract of the corresponding
<code>{@link Reader#read(char[], int, int) read}</code> method of the
<code>{@link Reader}</code> class.  As an additional convenience, it
attempts to read as many characters as possible by repeatedly invoking
the <code>read</code> method of the underlying stream.  This iterated
<code>read</code> continues until one of the following conditions becomes
true: <ul>

  <li> The specified number of characters have been read,

  <li> The <code>read</code> method of the underlying stream returns
  <code>-1</code>, indicating end-of-file, or

  <li> The <code>ready</code> method of the underlying stream
  returns <code>false</code>, indicating that further input requests
  would block.

</ul> If the first <code>read</code> on the underlying stream returns
<code>-1</code> to indicate end-of-file then this method returns
<code>-1</code>.  Otherwise this method returns the number of characters
actually read.

<p> Subclasses of this class are encouraged, but not required, to
attempt to read as many characters as possible in the same fashion.

<p> Ordinarily this method takes characters from this stream's character
buffer, filling it from the underlying stream as necessary.  If,
however, the buffer is empty, the mark is not valid, and the requested
length is at least as large as the buffer, then this method will read
characters directly from the underlying stream into the given array.
Thus redundant <code>BufferedReader</code>s will not copy data
unnecessarily.

@param      cbuf  Destination buffer
@param      off   Offset at which to start storing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 6848130 "readLine"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "ignoreLF" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a line of text.  A line is considered to be terminated by any one
of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return
followed immediately by a linefeed.

@param      ignoreLF  If true, the next '\\n' will be skipped

@return     A String containing the contents of the line, not including
            any line-termination characters, or null if the end of the
            stream has been reached

@see        java.io.LineNumberReader#readLine()

@exception  IOException  If an I/O error occurs
"
      end

      operation 6848258 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a line of text.  A line is considered to be terminated by any one
of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return
followed immediately by a linefeed.

@return     A String containing the contents of the line, not including
            any line-termination characters, or null if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs

@see java.nio.file.Files#readAllLines
"
      end

      operation 6848386 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips characters.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IllegalArgumentException  If <code>n</code> is negative.
@exception  IOException  If an I/O error occurs
"
      end

      operation 6848514 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream is ready to be read.  A buffered character
stream is ready if the buffer is not empty, or if the underlying
character stream is ready.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6848642 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream supports the mark() operation, which it does.
"
      end

      operation 6848770 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point.

@param readAheadLimit   Limit on the number of characters that may be
                        read while still preserving the mark. An attempt
                        to reset the stream after reading characters
                        up to this limit or beyond may fail.
                        A limit value larger than the size of the input
                        buffer will cause a new buffer to be allocated
                        whose size is no smaller than limit.
                        Therefore large values should be used with care.

@exception  IllegalArgumentException  If {@code readAheadLimit < 0}
@exception  IOException  If an I/O error occurs
"
      end

      operation 6848898 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the stream to the most recent mark.

@exception  IOException  If the stream has never been marked,
                         or if the mark has been invalidated
"
      end

      operation 6849026 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6849154 "lines"
	public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Stream}, the elements of which are lines read from
this {@code BufferedReader}.  The {@link Stream} is lazily populated,
i.e., read only occurs during the
<a href=\"../util/stream/package-summary.html#StreamOps\">terminal
stream operation</a>.

<p> The reader must not be operated on during the execution of the
terminal stream operation. Otherwise, the result of the terminal stream
operation is undefined.

<p> After execution of the terminal stream operation there are no
guarantees that the reader will be at a specific position from which to
read the next character or line.

<p> If an {@link IOException} is thrown when accessing the underlying
{@code BufferedReader}, it is wrapped in an {@link
UncheckedIOException} which will be thrown from the {@code Stream}
method that caused the read to take place. This method will return a
Stream if invoked on a BufferedReader that is closed. Any operation on
that stream that requires reading from the BufferedReader after it is
closed, will cause an UncheckedIOException to be thrown.

@return a {@code Stream<String>} providing the lines of text
        described by this {@code BufferedReader}

@since 1.8
"
      end
    end

    class 146434 "InputStream"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This abstract class is the superclass of all classes representing
an input stream of bytes.

<p> Applications that need to define a subclass of <code>InputStream</code>
must always provide a method that returns the next byte of input.

@author  Arthur van Hoff
@see     java.io.BufferedInputStream
@see     java.io.ByteArrayInputStream
@see     java.io.DataInputStream
@see     java.io.FilterInputStream
@see     java.io.InputStream#read()
@see     java.io.OutputStream
@see     java.io.PushbackInputStream
@since   JDK1.0
"
      classrelation 146306 // <realization>
	relation 146306 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 146306 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      attribute 136834 "MAX_SKIP_BUFFER_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2048"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " MAX_SKIP_BUFFER_SIZE is used to determine the maximum buffer size to
 use when skipping.
"
      end

      operation 176898 "read"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from the input stream. The value byte is
returned as an <code>int</code> in the range <code>0</code> to
<code>255</code>. If no byte is available because the end of the stream
has been reached, the value <code>-1</code> is returned. This method
blocks until input data is available, the end of the stream is detected,
or an exception is thrown.

<p> A subclass must provide an implementation of this method.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 177026 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads some number of bytes from the input stream and stores them into
the buffer array <code>b</code>. The number of bytes actually read is
returned as an integer.  This method blocks until input data is
available, end of file is detected, or an exception is thrown.

<p> If the length of <code>b</code> is zero, then no bytes are read and
<code>0</code> is returned; otherwise, there is an attempt to read at
least one byte. If no byte is available because the stream is at the
end of the file, the value <code>-1</code> is returned; otherwise, at
least one byte is read and stored into <code>b</code>.

<p> The first byte read is stored into element <code>b[0]</code>, the
next one into <code>b[1]</code>, and so on. The number of bytes read is,
at most, equal to the length of <code>b</code>. Let <i>k</i> be the
number of bytes actually read; these bytes will be stored in elements
<code>b[0]</code> through <code>b[</code><i>k</i><code>-1]</code>,
leaving elements <code>b[</code><i>k</i><code>]</code> through
<code>b[b.length-1]</code> unaffected.

<p> The <code>read(b)</code> method for class <code>InputStream</code>
has the same effect as: <pre><code> read(b, 0, b.length) </code></pre>

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  If the first byte cannot be read for any reason
other than the end of the file, if the input stream has been closed, or
if some other I/O error occurs.
@exception  NullPointerException  if <code>b</code> is <code>null</code>.
@see        java.io.InputStream#read(byte[], int, int)
"
      end

      operation 177154 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from the input stream into
an array of bytes.  An attempt is made to read as many as
<code>len</code> bytes, but a smaller number may be read.
The number of bytes actually read is returned as an integer.

<p> This method blocks until input data is available, end of file is
detected, or an exception is thrown.

<p> If <code>len</code> is zero, then no bytes are read and
<code>0</code> is returned; otherwise, there is an attempt to read at
least one byte. If no byte is available because the stream is at end of
file, the value <code>-1</code> is returned; otherwise, at least one
byte is read and stored into <code>b</code>.

<p> The first byte read is stored into element <code>b[off]</code>, the
next one into <code>b[off+1]</code>, and so on. The number of bytes read
is, at most, equal to <code>len</code>. Let <i>k</i> be the number of
bytes actually read; these bytes will be stored in elements
<code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,
leaving elements <code>b[off+</code><i>k</i><code>]</code> through
<code>b[off+len-1]</code> unaffected.

<p> In every case, elements <code>b[0]</code> through
<code>b[off]</code> and elements <code>b[off+len]</code> through
<code>b[b.length-1]</code> are unaffected.

<p> The <code>read(b,</code> <code>off,</code> <code>len)</code> method
for class <code>InputStream</code> simply calls the method
<code>read()</code> repeatedly. If the first such call results in an
<code>IOException</code>, that exception is returned from the call to
the <code>read(b,</code> <code>off,</code> <code>len)</code> method.  If
any subsequent call to <code>read()</code> results in a
<code>IOException</code>, the exception is caught and treated as if it
were end of file; the bytes read up to that point are stored into
<code>b</code> and the number of bytes read before the exception
occurred is returned. The default implementation of this method blocks
until the requested amount of input data <code>len</code> has been read,
end of file is detected, or an exception is thrown. Subclasses are encouraged
to provide a more efficient implementation of this method.

@param      b     the buffer into which the data is read.
@param      off   the start offset in array <code>b</code>
                  at which the data is written.
@param      len   the maximum number of bytes to read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException If the first byte cannot be read for any reason
other than end of file, or if the input stream has been closed, or if
some other I/O error occurs.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
@see        java.io.InputStream#read()
"
      end

      operation 177282 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from this input
stream. The <code>skip</code> method may, for a variety of reasons, end
up skipping over some smaller number of bytes, possibly <code>0</code>.
This may result from any of a number of conditions; reaching end of file
before <code>n</code> bytes have been skipped is only one possibility.
The actual number of bytes skipped is returned. If {@code n} is
negative, the {@code skip} method for class {@code InputStream} always
returns 0, and no bytes are skipped. Subclasses may handle the negative
value differently.

<p> The <code>skip</code> method of this class creates a
byte array and then repeatedly reads into it until <code>n</code> bytes
have been read or the end of the stream has been reached. Subclasses are
encouraged to provide a more efficient implementation of this method.
For instance, the implementation may depend on the ability to seek.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if the stream does not support seek,
                         or if some other I/O error occurs.
"
      end

      operation 177410 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of bytes that can be read (or
skipped over) from this input stream without blocking by the next
invocation of a method for this input stream. The next invocation
might be the same thread or another thread.  A single read or skip of this
many bytes will not block, but may read or skip fewer bytes.

<p> Note that while some implementations of {@code InputStream} will return
the total number of bytes in the stream, many will not.  It is
never correct to use the return value of this method to allocate
a buffer intended to hold all data in this stream.

<p> A subclass' implementation of this method may choose to throw an
{@link IOException} if this input stream has been closed by
invoking the {@link #close()} method.

<p> The {@code available} method for class {@code InputStream} always
returns {@code 0}.

<p> This method should be overridden by subclasses.

@return     an estimate of the number of bytes that can be read (or skipped
            over) from this input stream without blocking or {@code 0} when
            it reaches the end of the input stream.
@exception  IOException if an I/O error occurs.
"
      end

      operation 177538 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources associated
with the stream.

<p> The <code>close</code> method of <code>InputStream</code> does
nothing.

@exception  IOException  if an I/O error occurs.
"
      end

      operation 177666 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream. A subsequent call to
the <code>reset</code> method repositions this stream at the last marked
position so that subsequent reads re-read the same bytes.

<p> The <code>readlimit</code> arguments tells this input stream to
allow that many bytes to be read before the mark position gets
invalidated.

<p> The general contract of <code>mark</code> is that, if the method
<code>markSupported</code> returns <code>true</code>, the stream somehow
remembers all the bytes read after the call to <code>mark</code> and
stands ready to supply those same bytes again if and whenever the method
<code>reset</code> is called.  However, the stream is not required to
remember any data at all if more than <code>readlimit</code> bytes are
read from the stream before <code>reset</code> is called.

<p> Marking a closed stream should not have any effect on the stream.

<p> The <code>mark</code> method of <code>InputStream</code> does
nothing.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.InputStream#reset()
"
      end

      operation 177794 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the
<code>mark</code> method was last called on this input stream.

<p> The general contract of <code>reset</code> is:

<ul>
<li> If the method <code>markSupported</code> returns
<code>true</code>, then:

    <ul><li> If the method <code>mark</code> has not been called since
    the stream was created, or the number of bytes read from the stream
    since <code>mark</code> was last called is larger than the argument
    to <code>mark</code> at that last call, then an
    <code>IOException</code> might be thrown.

    <li> If such an <code>IOException</code> is not thrown, then the
    stream is reset to a state such that all the bytes read since the
    most recent call to <code>mark</code> (or since the start of the
    file, if <code>mark</code> has not been called) will be resupplied
    to subsequent callers of the <code>read</code> method, followed by
    any bytes that otherwise would have been the next input data as of
    the time of the call to <code>reset</code>. </ul>

<li> If the method <code>markSupported</code> returns
<code>false</code>, then:

    <ul><li> The call to <code>reset</code> may throw an
    <code>IOException</code>.

    <li> If an <code>IOException</code> is not thrown, then the stream
    is reset to a fixed state that depends on the particular type of the
    input stream and how it was created. The bytes that will be supplied
    to subsequent callers of the <code>read</code> method depend on the
    particular type of the input stream. </ul></ul>

<p>The method <code>reset</code> for class <code>InputStream</code>
does nothing except throw an <code>IOException</code>.

@exception  IOException  if this stream has not been marked or if the
              mark has been invalidated.
@see     java.io.InputStream#mark(int)
@see     java.io.IOException
"
      end

      operation 177922 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code> and
<code>reset</code> methods. Whether or not <code>mark</code> and
<code>reset</code> are supported is an invariant property of a
particular input stream instance. The <code>markSupported</code> method
of <code>InputStream</code> returns <code>false</code>.

@return  <code>true</code> if this stream instance supports the mark
         and reset methods; <code>false</code> otherwise.
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()
"
      end
    end

    class 146562 "Closeable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code Closeable} is a source or destination of data that can be closed.
The close method is invoked to release resources that the object is
holding (such as open files).

@since 1.5
"
      classrelation 146178 // <generalisation>
	relation 146178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 146178 // <generalisation>
	  b parent class_ref 146690 // AutoCloseable
      end

      operation 176770 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this stream and releases any system resources associated
with it. If the stream is already closed then invoking this
method has no effect.

<p> As noted in {@link AutoCloseable#close()}, cases where the
close may fail require careful attention. It is strongly advised
to relinquish the underlying resources and to internally
<em>mark</em> the {@code Closeable} as closed, prior to throwing
the {@code IOException}.

@throws IOException if an I/O error occurs
"
      end
    end

    class 146818 "IOException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an I/O exception of some sort has occurred. This
class is the general class of exceptions produced by failed or
interrupted I/O operations.

@author  unascribed
@see     java.io.InputStream
@see     java.io.OutputStream
@since   JDK1.0
"
      classrelation 236802 // <generalisation>
	relation 236802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 236802 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 189570 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 7818375828146090155L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 616962 "IOException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code IOException} with {@code null}
as its error detail message.
"
      end

      operation 617090 "IOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code IOException} with the specified detail message.

@param message
       The detail message (which is saved for later retrieval
       by the {@link #getMessage()} method)
"
      end

      operation 617218 "IOException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code IOException} with the specified detail message
and cause.

<p> Note that the detail message associated with {@code cause} is
<i>not</i> automatically incorporated into this exception's detail
message.

@param message
       The detail message (which is saved for later retrieval
       by the {@link #getMessage()} method)

@param cause
       The cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A null value is permitted,
       and indicates that the cause is nonexistent or unknown.)

@since 1.6
"
      end

      operation 617346 "IOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code IOException} with the specified cause and a
detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of {@code cause}).
This constructor is useful for IO exceptions that are little more
than wrappers for other throwables.

@param cause
       The cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A null value is permitted,
       and indicates that the cause is nonexistent or unknown.)

@since 1.6
"
      end
    end

    class 151298 "OutputStream"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This abstract class is the superclass of all classes representing
an output stream of bytes. An output stream accepts output bytes
and sends them to some sink.
<p>
Applications that need to define a subclass of
<code>OutputStream</code> must always provide at least a method
that writes one byte of output.

@author  Arthur van Hoff
@see     java.io.BufferedOutputStream
@see     java.io.ByteArrayOutputStream
@see     java.io.DataOutputStream
@see     java.io.FilterOutputStream
@see     java.io.InputStream
@see     java.io.OutputStream#write(int)
@since   JDK1.0
"
      classrelation 148226 // <realization>
	relation 148226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 148226 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 148354 // <realization>
	relation 148354 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 148354 // <realization>
	  b parent class_ref 151426 // Flushable
      end

      operation 207234 "write"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this output stream. The general
contract for <code>write</code> is that one byte is written
to the output stream. The byte to be written is the eight
low-order bits of the argument <code>b</code>. The 24
high-order bits of <code>b</code> are ignored.
<p>
Subclasses of <code>OutputStream</code> must provide an
implementation for this method.

@param      b   the <code>byte</code>.
@exception  IOException  if an I/O error occurs. In particular,
            an <code>IOException</code> may be thrown if the
            output stream has been closed.
"
      end

      operation 207362 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>b.length</code> bytes from the specified byte array
to this output stream. The general contract for <code>write(b)</code>
is that it should have exactly the same effect as the call
<code>write(b, 0, b.length)</code>.

@param      b   the data.
@exception  IOException  if an I/O error occurs.
@see        java.io.OutputStream#write(byte[], int, int)
"
      end

      operation 207490 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array
starting at offset <code>off</code> to this output stream.
The general contract for <code>write(b, off, len)</code> is that
some of the bytes in the array <code>b</code> are written to the
output stream in order; element <code>b[off]</code> is the first
byte written and <code>b[off+len-1]</code> is the last byte written
by this operation.
<p>
The <code>write</code> method of <code>OutputStream</code> calls
the write method of one argument on each of the bytes to be
written out. Subclasses are encouraged to override this method and
provide a more efficient implementation.
<p>
If <code>b</code> is <code>null</code>, a
<code>NullPointerException</code> is thrown.
<p>
If <code>off</code> is negative, or <code>len</code> is negative, or
<code>off+len</code> is greater than the length of the array
<code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs. In particular,
            an <code>IOException</code> is thrown if the output
            stream is closed.
"
      end

      operation 207618 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output bytes
to be written out. The general contract of <code>flush</code> is
that calling it is an indication that, if any bytes previously
written have been buffered by the implementation of the output
stream, such bytes should immediately be written to their
intended destination.
<p>
If the intended destination of this stream is an abstraction provided by
the underlying operating system, for example a file, then flushing the
stream guarantees only that bytes previously written to the stream are
passed to the operating system for writing; it does not guarantee that
they are actually written to a physical device such as a disk drive.
<p>
The <code>flush</code> method of <code>OutputStream</code> does nothing.

@exception  IOException  if an I/O error occurs.
"
      end

      operation 207746 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this output stream and releases any system resources
associated with this stream. The general contract of <code>close</code>
is that it closes the output stream. A closed stream cannot perform
output operations and cannot be reopened.
<p>
The <code>close</code> method of <code>OutputStream</code> does nothing.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 151426 "Flushable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <tt>Flushable</tt> is a destination of data that can be flushed.  The
flush method is invoked to write any buffered output to the underlying
stream.

@since 1.5
"
      operation 207106 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this stream by writing any buffered output to the underlying
stream.

@throws IOException If an I/O error occurs
"
      end
    end

    class 168962 "ObjectInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An ObjectInputStream deserializes primitive data and objects previously
written using an ObjectOutputStream.

<p>ObjectOutputStream and ObjectInputStream can provide an application with
persistent storage for graphs of objects when used with a FileOutputStream
and FileInputStream respectively.  ObjectInputStream is used to recover
those objects previously serialized. Other uses include passing objects
between hosts using a socket stream or for marshaling and unmarshaling
arguments and parameters in a remote communication system.

<p>ObjectInputStream ensures that the types of all objects in the graph
created from the stream match the classes present in the Java Virtual
Machine.  Classes are loaded as required using the standard mechanisms.

<p>Only objects that support the java.io.Serializable or
java.io.Externalizable interface can be read from streams.

<p>The method <code>readObject</code> is used to read an object from the
stream.  Java's safe casting should be used to get the desired type.  In
Java, strings and arrays are objects and are treated as objects during
serialization. When read they need to be cast to the expected type.

<p>Primitive data types can be read from the stream using the appropriate
method on DataInput.

<p>The default deserialization mechanism for objects restores the contents
of each field to the value and type it had when it was written.  Fields
declared as transient or static are ignored by the deserialization process.
References to other objects cause those objects to be read from the stream
as necessary.  Graphs of objects are restored correctly using a reference
sharing mechanism.  New objects are always allocated when deserializing,
which prevents existing objects from being overwritten.

<p>Reading an object is analogous to running the constructors of a new
object.  Memory is allocated for the object and initialized to zero (NULL).
No-arg constructors are invoked for the non-serializable classes and then
the fields of the serializable classes are restored from the stream starting
with the serializable class closest to java.lang.object and finishing with
the object's most specific class.

<p>For example to read from a stream as written by the example in
ObjectOutputStream:
<br>
<pre>
     FileInputStream fis = new FileInputStream(\"t.tmp\");
     ObjectInputStream ois = new ObjectInputStream(fis);

     int i = ois.readInt();
     String today = (String) ois.readObject();
     Date date = (Date) ois.readObject();

     ois.close();
</pre>

<p>Classes control how they are serialized by implementing either the
java.io.Serializable or java.io.Externalizable interfaces.

<p>Implementing the Serializable interface allows object serialization to
save and restore the entire state of the object and it allows classes to
evolve between the time the stream is written and the time it is read.  It
automatically traverses references between objects, saving and restoring
entire graphs.

<p>Serializable classes that require special handling during the
serialization and deserialization process should implement the following
methods:

<pre>
private void writeObject(java.io.ObjectOutputStream stream)
    throws IOException;
private void readObject(java.io.ObjectInputStream stream)
    throws IOException, ClassNotFoundException;
private void readObjectNoData()
    throws ObjectStreamException;
</pre>

<p>The readObject method is responsible for reading and restoring the state
of the object for its particular class using data written to the stream by
the corresponding writeObject method.  The method does not need to concern
itself with the state belonging to its superclasses or subclasses.  State is
restored by reading data from the ObjectInputStream for the individual
fields and making assignments to the appropriate fields of the object.
Reading primitive data types is supported by DataInput.

<p>Any attempt to read object data which exceeds the boundaries of the
custom data written by the corresponding writeObject method will cause an
OptionalDataException to be thrown with an eof field value of true.
Non-object reads which exceed the end of the allotted data will reflect the
end of data in the same way that they would indicate the end of the stream:
bytewise reads will return -1 as the byte read or number of bytes read, and
primitive reads will throw EOFExceptions.  If there is no corresponding
writeObject method, then the end of default serialized data marks the end of
the allotted data.

<p>Primitive and object read calls issued from within a readExternal method
behave in the same manner--if the stream is already positioned at the end of
data written by the corresponding writeExternal method, object reads will
throw OptionalDataExceptions with eof set to true, bytewise reads will
return -1, and primitive reads will throw EOFExceptions.  Note that this
behavior does not hold for streams written with the old
<code>ObjectStreamConstants.PROTOCOL_VERSION_1</code> protocol, in which the
end of data written by writeExternal methods is not demarcated, and hence
cannot be detected.

<p>The readObjectNoData method is responsible for initializing the state of
the object for its particular class in the event that the serialization
stream does not list the given class as a superclass of the object being
deserialized.  This may occur in cases where the receiving party uses a
different version of the deserialized instance's class than the sending
party, and the receiver's version extends classes that are not extended by
the sender's version.  This may also occur if the serialization stream has
been tampered; hence, readObjectNoData is useful for initializing
deserialized objects properly despite a \"hostile\" or incomplete source
stream.

<p>Serialization does not read or assign values to the fields of any object
that does not implement the java.io.Serializable interface.  Subclasses of
Objects that are not serializable can be serializable. In this case the
non-serializable class must have a no-arg constructor to allow its fields to
be initialized.  In this case it is the responsibility of the subclass to
save and restore the state of the non-serializable class. It is frequently
the case that the fields of that class are accessible (public, package, or
protected) or that there are get and set methods that can be used to restore
the state.

<p>Any exception that occurs while deserializing an object will be caught by
the ObjectInputStream and abort the reading process.

<p>Implementing the Externalizable interface allows the object to assume
complete control over the contents and format of the object's serialized
form.  The methods of the Externalizable interface, writeExternal and
readExternal, are called to save and restore the objects state.  When
implemented by a class they can write and read their own state using all of
the methods of ObjectOutput and ObjectInput.  It is the responsibility of
the objects to handle any versioning that occurs.

<p>Enum constants are deserialized differently than ordinary serializable or
externalizable objects.  The serialized form of an enum constant consists
solely of its name; field values of the constant are not transmitted.  To
deserialize an enum constant, ObjectInputStream reads the constant name from
the stream; the deserialized constant is then obtained by calling the static
method <code>Enum.valueOf(Class, String)</code> with the enum constant's
base type and the received constant name as arguments.  Like other
serializable or externalizable objects, enum constants can function as the
targets of back references appearing subsequently in the serialization
stream.  The process by which enum constants are deserialized cannot be
customized: any class-specific readObject, readObjectNoData, and readResolve
methods defined by enum types are ignored during deserialization.
Similarly, any serialPersistentFields or serialVersionUID field declarations
are also ignored--all enum types have a fixed serialVersionUID of 0L.

@author      Mike Warres
@author      Roger Riggs
@see java.io.DataInput
@see java.io.ObjectOutputStream
@see java.io.Serializable
@see <a href=\"../../../platform/serialization/spec/input.html\"> Object Serialization Specification, Section 3, Object Input Classes</a>
@since   JDK1.1
"
      classrelation 185602 // <generalisation>
	relation 185602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 185602 // <generalisation>
	  b parent class_ref 146434 // InputStream
      end

      classrelation 185986 // <realization>
	relation 185986 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 185986 // <realization>
	  b parent class_ref 169474 // ObjectInput
      end

      classrelation 186370 // <realization>
	relation 186370 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 186370 // <realization>
	  b parent class_ref 169858 // ObjectStreamConstants
      end

      attribute 158850 "NULL_HANDLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " handle value representing null 
"
      end

      classrelation 186498 // unsharedMarker (<unidirectional association>)
	relation 186498 --->
	  a role_name "unsharedMarker" init_value " new Object()" class_relation const_relation private
	    comment " marker for unshared objects in internal handle table 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 186498 // unsharedMarker (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 186626 // primClasses (<unidirectional association>)
	relation 186626 --->
	  a role_name "primClasses" init_value " new HashMap<>(8, 1.0F)" class_relation const_relation private
	    comment " table mapping primitive type names to corresponding class objects 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Class<?>> ${name}${value};
"
	    classrelation_ref 186626 // primClasses (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      extra_member 129154 "initialization"
	
	cpp "" ""
	java "  static {
        primClasses.put(\"boolean\", boolean.class);
        primClasses.put(\"byte\", byte.class);
        primClasses.put(\"char\", char.class);
        primClasses.put(\"short\", short.class);
        primClasses.put(\"int\", int.class);
        primClasses.put(\"long\", long.class);
        primClasses.put(\"float\", float.class);
        primClasses.put(\"double\", double.class);
        primClasses.put(\"void\", void.class);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 170114 "Caches"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 186754 // subclassAudits (<unidirectional association>)
	  relation 186754 --->
	    a role_name "subclassAudits" init_value "
            new ConcurrentHashMap<>()" class_relation const_relation package
	      comment " cache of subclass security audit results 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakClassKey,Boolean> ${name}${value};
"
	      classrelation_ref 186754 // subclassAudits (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	classrelation 186882 // subclassAuditsQueue (<unidirectional association>)
	  relation 186882 --->
	    a role_name "subclassAuditsQueue" init_value "
            new ReferenceQueue<>()" class_relation const_relation package
	      comment " queue for WeakReferences to audited subclasses 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 186882 // subclassAuditsQueue (<unidirectional association>)
	    b parent class_ref 130946 // ReferenceQueue
	end
      end

      extra_member 129282 "initialization"
	
	cpp "" ""
	java "  static {
        /* Setup access so sun.misc can invoke package private functions. */
        sun.misc.SharedSecrets.setJavaOISAccess(new JavaOISAccess() {
            public void setObjectInputFilter(ObjectInputStream stream, ObjectInputFilter filter) {
                stream.setInternalObjectInputFilter(filter);
            }

            public ObjectInputFilter getObjectInputFilter(ObjectInputStream stream) {
                return stream.getInternalObjectInputFilter();
            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 170498 "Logging"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 158978 "traceLogger"
	  class_attribute const_attribute private explicit_type "PlatformLogger"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Logger for ObjectInputFilter results.
Setup the filter logger if it is set to INFO or WARNING.
(Assuming it will not change).

"
	end

	attribute 159106 "infoLogger"
	  class_attribute const_attribute private explicit_type "PlatformLogger"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 129410 "initialization"
	  
	  cpp "" ""
	  java "  static {
            PlatformLogger filterLog = PlatformLogger.getLogger(\"java.io.serialization\");
            infoLogger = (filterLog != null &&
                filterLog.isLoggable(PlatformLogger.Level.INFO)) ? filterLog : null;
            traceLogger = (filterLog != null &&
                filterLog.isLoggable(PlatformLogger.Level.FINER)) ? filterLog : null;
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      class 170626 "BlockDataInputStream"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 188930 // <generalisation>
	  relation 188930 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 188930 // <generalisation>
	    b parent class_ref 146434 // InputStream
	end

	classrelation 189058 // <realization>
	  relation 189058 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 189058 // <realization>
	    b parent class_ref 169602 // DataInput
	end

	attribute 161538 "MAX_BLOCK_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 1024"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " maximum data block length 
"
	end

	attribute 161666 "MAX_HEADER_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " maximum data block header length 
"
	end

	attribute 161794 "CHAR_BUF_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 256"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " (tunable) length of char buffer (for reading strings) 
"
	end

	attribute 161922 "HEADER_BLOCKED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " readBlockHeader() return value indicating header read may block 
"
	end

	attribute 162050 "buf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value " new byte[MAX_BLOCK_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " buffer for reading general/block data 
"
	end

	attribute 162178 "hbuf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value " new byte[MAX_HEADER_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " buffer for reading block data headers 
"
	end

	attribute 162306 "cbuf"
	  const_attribute private explicit_type "char"
	  multiplicity "[]"
	  init_value " new char[CHAR_BUF_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " char buffer for fast string reads 
"
	end

	attribute 162434 "blkmode"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " block data mode 
"
	end

	attribute 162562 "pos"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " block data state fields; values meaningful only when blkmode true
 current offset into buf 
"
	end

	attribute 162690 "end"
	  private explicit_type "int"
	  init_value " -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " end offset of valid data in buf, or -1 if no more block data 
"
	end

	attribute 162818 "unread"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " number of bytes in current block yet to be read from stream 
"
	end

	classrelation 189186 // in (<unidirectional association>)
	  relation 189186 --->
	    a role_name "in" const_relation private
	      comment " underlying stream (wrapped in peekable filter stream) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 189186 // in (<unidirectional association>)
	    b parent class_ref 172802 // PeekInputStream
	end

	classrelation 189314 // din (<unidirectional association>)
	  relation 189314 --->
	    a role_name "din" const_relation private
	      comment " loopback stream (for data reads that span data blocks) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 189314 // din (<unidirectional association>)
	    b parent class_ref 172930 // DataInputStream
	end

	operation 419074 "BlockDataInputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "in" type class_ref 146434 // InputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new BlockDataInputStream on top of given underlying stream.
Block data mode is turned off by default.
"
	end

	operation 419202 "setBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "newmode" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets block data mode to the given mode (true == on, false == off)
and returns the previous mode value.  If the new mode is the same as
the old mode, no action is taken.  Throws IllegalStateException if
block data mode is being switched from on to off while unconsumed
block data is still present in the stream.
"
	end

	operation 419330 "getBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the stream is currently in block data mode, false
otherwise.
"
	end

	operation 419458 "skipBlockData"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "If in block data mode, skips to the end of the current group of data
blocks (but does not unset block data mode).  If not in block data
mode, throws an IllegalStateException.
"
	end

	operation 419586 "readBlockHeader"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "canBlock" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Attempts to read in the next block data header (if any).  If
canBlock is false and a full header cannot be read without possibly
blocking, returns HEADER_BLOCKED, else if the next element in the
stream is a block data header, returns the block data length
specified by the header, else returns -1.
"
	end

	operation 419714 "refill"
	  private explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Refills internal buffer buf with block data.  Any data in buf at the
time of the call is considered consumed.  Sets the pos, end, and
unread fields to reflect the new amount of available block data; if
the next element in the stream is not a data block, sets pos and
unread to 0 and end to -1.
"
	end

	operation 419842 "currentBlockRemaining"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "If in block data mode, returns the number of unconsumed bytes
remaining in the current data block.  If not in block data mode,
throws an IllegalStateException.
"
	end

	operation 419970 "peek"
	  package explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Peeks at (but does not consume) and returns the next byte value in
the stream, or -1 if the end of the stream/block data (if in block
data mode) has been reached.
"
	end

	operation 420098 "peekByte"
	  package explicit_return_type "byte"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Peeks at (but does not consume) and returns the next byte value in
the stream, or throws EOFException if end of stream/block data has
been reached.
"
	end

	operation 420226 "read"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- generic input stream methods ------------------ 

The following methods are equivalent to their counterparts in
InputStream, except that they interpret data block boundaries and
read the requested data from within data blocks when in block data
mode.
"
	end

	operation 420354 "read"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 420482 "skip"
	  public explicit_return_type "long"
	  nparams 1
	    param in name "len" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 420610 "available"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 420738 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 420866 "read"
	  package explicit_return_type "int"
	  nparams 4
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	    param inout name "copy" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Attempts to read len bytes into byte array b at offset off.  Returns
the number of bytes read, or -1 if the end of stream/block data has
been reached.  If copy is true, reads values into an intermediate
buffer before copying them to b (to avoid exposing a reference to
b).
"
	end

	operation 420994 "readFully"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- primitive data input methods ------------------ 

The following methods are equivalent to their counterparts in
DataInputStream, except that they interpret data block boundaries
and read the requested data from within data blocks when in block
data mode.
"
	end

	operation 421122 "readFully"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 421250 "readFully"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	    param inout name "copy" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 421378 "skipBytes"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "n" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 421506 "readBoolean"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 421634 "readByte"
	  public explicit_return_type "byte"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 421762 "readUnsignedByte"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 421890 "readChar"
	  public explicit_return_type "char"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422018 "readShort"
	  public explicit_return_type "short"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422146 "readUnsignedShort"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422274 "readInt"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422402 "readFloat"
	  public explicit_return_type "float"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422530 "readLong"
	  public explicit_return_type "long"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422658 "readDouble"
	  public explicit_return_type "double"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422786 "readUTF"
	  public return_type class_ref 128130 // String
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 422914 "readLine"
	  public return_type class_ref 128130 // String
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"deprecation\")
"
	  
	  
	  
	end

	operation 423042 "readBooleans"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "boolean"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -------------- primitive data array input methods --------------- 

The following methods read in spans of primitive data values.
Though equivalent to calling the corresponding primitive read
methods repeatedly, these methods are optimized for reading groups
of primitive data values more efficiently.
"
	end

	operation 423170 "readChars"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "char"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 423298 "readShorts"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "short"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 423426 "readInts"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "int"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 423554 "readFloats"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "float"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 423682 "readLongs"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "long"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 423810 "readDoubles"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "double"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 423938 "readLongUTF"
	  package return_type class_ref 128130 // String
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads in string written in \"long\" UTF format.  \"Long\" UTF format is
identical to standard UTF, except that it uses an 8 byte header
(instead of the standard 2 bytes) to convey the UTF encoding length.
"
	end

	operation 424066 "readUTFBody"
	  private return_type class_ref 128130 // String
	  nparams 1
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads in the \"body\" (i.e., the UTF representation minus the 2-byte
or 8-byte length header) of a UTF encoding, which occupies the next
utflen bytes.
"
	end

	operation 424194 "readUTFSpan"
	  private explicit_return_type "long"
	  nparams 2
	    param inout name "sbuf" type class_ref 173058 // StringBuilder
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads span of UTF-encoded characters out of internal buffer
(starting at offset pos and ending at or before offset end),
consuming no more than utflen bytes.  Appends read characters to
sbuf.  Returns the number of bytes consumed.
"
	end

	operation 424322 "readUTFChar"
	  private explicit_return_type "int"
	  nparams 2
	    param inout name "sbuf" type class_ref 173058 // StringBuilder
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads in single UTF-encoded character one byte at a time, appends
the character to sbuf, and returns the number of bytes consumed.
This method is used when reading in UTF strings written in block
data mode to handle UTF-encoded characters which (potentially)
straddle block-data boundaries.
"
	end

	operation 424450 "getBytesRead"
	  package explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of bytes read from the input stream.
@return the number of bytes read from the input stream
"
	end
      end

      classrelation 187010 // bin (<unidirectional association>)
	relation 187010 --->
	  a role_name "bin" const_relation private
	    comment " filter stream for handling block data conversion 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 187010 // bin (<unidirectional association>)
	  b parent class_ref 170626 // BlockDataInputStream
      end

      class 170754 "ValidationList"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 172418 "Callback"
	  visibility private 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 187906 // obj (<unidirectional association>)
	    relation 187906 --->
	      a role_name "obj" const_relation package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 187906 // obj (<unidirectional association>)
	      b parent class_ref 171394 // ObjectInputValidation
	  end

	  attribute 160642 "priority"
	    const_attribute package explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  classrelation 188034 // next (<unidirectional association>)
	    relation 188034 --->
	      a role_name "next" package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 188034 // next (<unidirectional association>)
	      b parent class_ref 172418 // Callback
	  end

	  classrelation 188162 // acc (<unidirectional association>)
	    relation 188162 --->
	      a role_name "acc" const_relation package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 188162 // acc (<unidirectional association>)
	      b parent class_ref 129154 // AccessControlContext
	  end

	  operation 416514 "Callback"
	    package explicit_return_type ""
	    nparams 4
	      param inout name "obj" type class_ref 171394 // ObjectInputValidation
	      param in name "priority" explicit_type "int"
	      param inout name "next" type class_ref 172418 // Callback
	      param inout name "acc" type class_ref 129154 // AccessControlContext
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 188290 // list (<unidirectional association>)
	  relation 188290 --->
	    a role_name "list" private
	      comment " linked list of callbacks 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 188290 // list (<unidirectional association>)
	    b parent class_ref 172418 // Callback
	end

	operation 416642 "ValidationList"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new (empty) ValidationList.
"
	end

	operation 416770 "register"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 171394 // ObjectInputValidation
	    param in name "priority" explicit_type "int"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Registers callback.  Throws InvalidObjectException if callback
object is null.
"
	end

	operation 416898 "doCallbacks"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes all registered callbacks and clears the callback list.
Callbacks with higher priorities are called first; those with equal
priorities may be called in any order.  If any of the callbacks
throws an InvalidObjectException, the callback process is terminated
and the exception propagated upwards.
"
	end

	operation 417026 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets the callback list to its initial (empty) state.
"
	end
      end

      classrelation 187138 // vlist (<unidirectional association>)
	relation 187138 --->
	  a role_name "vlist" const_relation private
	    comment " validation callback list 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 187138 // vlist (<unidirectional association>)
	  b parent class_ref 170754 // ValidationList
      end

      attribute 159234 "depth"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " recursion depth 
"
      end

      attribute 159362 "totalObjectRefs"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Total number of references to any type of object, class, enum, proxy, etc. 
"
      end

      attribute 159490 "closed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " whether stream is closed 
"
      end

      class 170882 "HandleTable"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 162946 "STATUS_OK"
	  class_attribute const_attribute private explicit_type "byte"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " status codes indicating whether object has associated exception 
"
	end

	attribute 163074 "STATUS_UNKNOWN"
	  class_attribute const_attribute private explicit_type "byte"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 163202 "STATUS_EXCEPTION"
	  class_attribute const_attribute private explicit_type "byte"
	  init_value " 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 163330 "status"
	  package explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " array mapping handle -> object status 
"
	end

	classrelation 189442 // entries (<unidirectional association>)
	  relation 189442 --->
	    a role_name "entries" multiplicity "[]" package
	      comment " array mapping handle -> object/exception (depending on status) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 189442 // entries (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	class 173186 "HandleList"
	  visibility private 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  attribute 163714 "list"
	    private explicit_type "int"
	    multiplicity "[]"
	    init_value " new int[4]"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 163842 "size"
	    private explicit_type "int"
	    init_value " 0"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  operation 425986 "HandleList"
	    public explicit_return_type ""
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 426114 "add"
	    public explicit_return_type "void"
	    nparams 1
	      param in name "handle" explicit_type "int"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 426242 "get"
	    public explicit_return_type "int"
	    nparams 1
	      param in name "index" explicit_type "int"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 426370 "size"
	    public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 189570 // deps (<unidirectional association>)
	  relation 189570 --->
	    a role_name "deps" multiplicity "[]" package
	      comment " array mapping handle -> list of dependent handles (if any) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 189570 // deps (<unidirectional association>)
	    b parent class_ref 173186 // HandleList
	end

	attribute 163458 "lowDep"
	  package explicit_type "int"
	  init_value " -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " lowest unresolved dependency 
"
	end

	attribute 163586 "size"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " number of handles in table 
"
	end

	operation 424578 "HandleTable"
	  package explicit_return_type ""
	  nparams 1
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates handle table with the given initial capacity.
"
	end

	operation 424706 "assign"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Assigns next available handle to given object, and returns assigned
handle.  Once object has been completely deserialized (and all
dependencies on other objects identified), the handle should be
\"closed\" by passing it to finish().
"
	end

	operation 424834 "markDependency"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "dependent" explicit_type "int"
	    param in name "target" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Registers a dependency (in exception status) of one handle on
another.  The dependent handle must be \"open\" (i.e., assigned, but
not finished yet).  No action is taken if either dependent or target
handle is NULL_HANDLE.
"
	end

	operation 424962 "markException"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "handle" explicit_type "int"
	    param inout name "ex" type class_ref 169730 // ClassNotFoundException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Associates a ClassNotFoundException (if one not already associated)
with the currently active handle and propagates it to other
referencing objects as appropriate.  The specified handle must be
\"open\" (i.e., assigned, but not finished yet).
"
	end

	operation 425090 "finish"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Marks given handle as finished, meaning that no new dependencies
will be marked for handle.  Calls to the assign and finish methods
must occur in LIFO order.
"
	end

	operation 425218 "setObject"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "handle" explicit_type "int"
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Assigns a new object to the given handle.  The object previously
associated with the handle is forgotten.  This method has no effect
if the given handle already has an exception associated with it.
This method may be called at any time after the handle is assigned.
"
	end

	operation 425346 "lookupObject"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns object associated with the given handle.
Returns null if the given handle is NULL_HANDLE, or if it has an
associated ClassNotFoundException.
"
	end

	operation 425474 "lookupException"
	  package return_type class_ref 169730 // ClassNotFoundException
	  nparams 1
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns ClassNotFoundException associated with the
given handle.  Returns null if the given handle is NULL_HANDLE, or
if there is no ClassNotFoundException associated with the handle.
"
	end

	operation 425602 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets table to its initial state.
"
	end

	operation 425730 "size"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns number of handles registered in table.
"
	end

	operation 425858 "grow"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expands capacity of internal arrays.
"
	end
      end

      classrelation 187266 // handles (<unidirectional association>)
	relation 187266 --->
	  a role_name "handles" const_relation private
	    comment " wire handle -> obj/exception map 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 187266 // handles (<unidirectional association>)
	  b parent class_ref 170882 // HandleTable
      end

      attribute 159618 "passHandle"
	private explicit_type "int"
	init_value " NULL_HANDLE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " scratch field for passing handle values up/down call stack 
"
      end

      attribute 159746 "defaultDataEnd"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " flag set when at end of field value block with no TC_ENDBLOCKDATA 
"
      end

      attribute 159874 "primVals"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " buffer for reading primitive field values 
"
      end

      attribute 160002 "enableOverride"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if true, invoke readObjectOverride() instead of readObject() 
"
      end

      attribute 160130 "enableResolve"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if true, invoke resolveObject() 
"
      end

      classrelation 187394 // curContext (<unidirectional association>)
	relation 187394 --->
	  a role_name "curContext" private
	    comment "
Context during upcalls to class-defined readObject methods; holds
object currently being deserialized and descriptor for current class.
Null when not during readObject upcall.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 187394 // curContext (<unidirectional association>)
	  b parent class_ref 171010 // SerialCallbackContext
      end

      attribute 160258 "serialFilter"
	private explicit_type "ObjectInputFilter"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Filter of class descriptors and classes read from the stream;
may be null.

"
      end

      operation 405378 "ObjectInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectInputStream that reads from the specified InputStream.
A serialization stream header is read from the stream and verified.
This constructor will block until the corresponding ObjectOutputStream
has written and flushed the header.

<p>If a security manager is installed, this constructor will check for
the \"enableSubclassImplementation\" SerializablePermission when invoked
directly or indirectly by the constructor of a subclass which overrides
the ObjectInputStream.readFields or ObjectInputStream.readUnshared
methods.

@param   in input stream to read from
@throws  StreamCorruptedException if the stream header is incorrect
@throws  IOException if an I/O error occurs while reading stream header
@throws  SecurityException if untrusted subclass illegally overrides
         security-sensitive methods
@throws  NullPointerException if <code>in</code> is <code>null</code>
@see     ObjectInputStream#ObjectInputStream()
@see     ObjectInputStream#readFields()
@see     ObjectOutputStream#ObjectOutputStream(OutputStream)
"
      end

      operation 405506 "ObjectInputStream"
	protected explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provide a way for subclasses that are completely reimplementing
ObjectInputStream to not have to allocate private data just used by this
implementation of ObjectInputStream.

<p>If there is a security manager installed, this method first calls the
security manager's <code>checkPermission</code> method with the
<code>SerializablePermission(\"enableSubclassImplementation\")</code>
permission to ensure it's ok to enable subclassing.

@throws  SecurityException if a security manager exists and its
         <code>checkPermission</code> method denies enabling
         subclassing.
@throws  IOException if an I/O error occurs while creating this stream
@see SecurityManager#checkPermission
@see java.io.SerializablePermission
"
      end

      operation 405634 "readObject"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read an object from the ObjectInputStream.  The class of the object, the
signature of the class, and the values of the non-transient and
non-static fields of the class and all of its supertypes are read.
Default deserializing for a class can be overridden using the writeObject
and readObject methods.  Objects referenced by this object are read
transitively so that a complete equivalent graph of objects is
reconstructed by readObject.

<p>The root object is completely restored when all of its fields and the
objects it references are completely restored.  At this point the object
validation callbacks are executed in order based on their registered
priorities. The callbacks are registered by objects (in the readObject
special methods) as they are individually restored.

<p>Exceptions are thrown for problems with the InputStream and for
classes that should not be deserialized.  All exceptions are fatal to
the InputStream and leave it in an indeterminate state; it is up to the
caller to ignore or recover the stream state.

@throws  ClassNotFoundException Class of a serialized object cannot be
         found.
@throws  InvalidClassException Something is wrong with a class used by
         serialization.
@throws  StreamCorruptedException Control information in the
         stream is inconsistent.
@throws  OptionalDataException Primitive data was found in the
         stream instead of objects.
@throws  IOException Any of the usual Input/Output related exceptions.
"
      end

      operation 405762 "readObjectOverride"
	protected return_type class_ref 129538 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by trusted subclasses of ObjectOutputStream that
constructed ObjectOutputStream using the protected no-arg constructor.
The subclass is expected to provide an override method with the modifier
\"final\".

@return  the Object read from the stream.
@throws  ClassNotFoundException Class definition of a serialized object
         cannot be found.
@throws  OptionalDataException Primitive data was found in the stream
         instead of objects.
@throws  IOException if I/O errors occurred while reading from the
         underlying stream
@see #ObjectInputStream()
@see #readObject()
@since 1.2
"
      end

      operation 405890 "readUnshared"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an \"unshared\" object from the ObjectInputStream.  This method is
identical to readObject, except that it prevents subsequent calls to
readObject and readUnshared from returning additional references to the
deserialized instance obtained via this call.  Specifically:
<ul>
  <li>If readUnshared is called to deserialize a back-reference (the
      stream representation of an object which has been written
      previously to the stream), an ObjectStreamException will be
      thrown.

  <li>If readUnshared returns successfully, then any subsequent attempts
      to deserialize back-references to the stream handle deserialized
      by readUnshared will cause an ObjectStreamException to be thrown.
</ul>
Deserializing an object via readUnshared invalidates the stream handle
associated with the returned object.  Note that this in itself does not
always guarantee that the reference returned by readUnshared is unique;
the deserialized object may define a readResolve method which returns an
object visible to other parties, or readUnshared may return a Class
object or enum constant obtainable elsewhere in the stream or through
external means. If the deserialized object defines a readResolve method
and the invocation of that method returns an array, then readUnshared
returns a shallow clone of that array; this guarantees that the returned
array object is unique and cannot be obtained a second time from an
invocation of readObject or readUnshared on the ObjectInputStream,
even if the underlying data stream has been manipulated.

<p>ObjectInputStream subclasses which override this method can only be
constructed in security contexts possessing the
\"enableSubclassImplementation\" SerializablePermission; any attempt to
instantiate such a subclass without this permission will cause a
SecurityException to be thrown.

@return  reference to deserialized object
@throws  ClassNotFoundException if class of an object to deserialize
         cannot be found
@throws  StreamCorruptedException if control information in the stream
         is inconsistent
@throws  ObjectStreamException if object to deserialize has already
         appeared in stream
@throws  OptionalDataException if primitive data is next in stream
@throws  IOException if an I/O error occurs during deserialization
@since   1.4
"
      end

      operation 406018 "defaultReadObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read the non-static and non-transient fields of the current class from
this stream.  This may only be called from the readObject method of the
class being deserialized. It will throw the NotActiveException if it is
called otherwise.

@throws  ClassNotFoundException if the class of a serialized object
         could not be found.
@throws  IOException if an I/O error occurs.
@throws  NotActiveException if the stream is not currently reading
         objects.
"
      end

      class 171266 "GetField"
	abstract visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 409986 "getObjectStreamClass"
	  abstract public return_type class_ref 170242 // ObjectStreamClass
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the ObjectStreamClass that describes the fields in the stream.

@return  the descriptor class that describes the serializable fields
"
	end

	operation 410114 "defaulted"
	  abstract public explicit_return_type "boolean"
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return true if the named field is defaulted and has no value in this
stream.

@param  name the name of the field
@return true, if and only if the named field is defaulted
@throws IOException if there are I/O errors while reading from
        the underlying <code>InputStream</code>
@throws IllegalArgumentException if <code>name</code> does not
        correspond to a serializable field
"
	end

	operation 410242 "get"
	  abstract public explicit_return_type "boolean"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named boolean field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>boolean</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 410370 "get"
	  abstract public explicit_return_type "byte"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named byte field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>byte</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 410498 "get"
	  abstract public explicit_return_type "char"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "char"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named char field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>char</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 410626 "get"
	  abstract public explicit_return_type "short"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "short"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named short field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>short</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 410754 "get"
	  abstract public explicit_return_type "int"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named int field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>int</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 410882 "get"
	  abstract public explicit_return_type "long"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named long field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>long</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 411010 "get"
	  abstract public explicit_return_type "float"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "float"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named float field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>float</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 411138 "get"
	  abstract public explicit_return_type "double"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "double"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named double field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>double</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end

	operation 411266 "get"
	  abstract public return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value of the named Object field from the persistent field.

@param  name the name of the field
@param  val the default value to use if <code>name</code> does not
        have a value
@return the value of the named <code>Object</code> field
@throws IOException if there are I/O errors while reading from the
        underlying <code>InputStream</code>
@throws IllegalArgumentException if type of <code>name</code> is
        not serializable or if the field type is incorrect
"
	end
      end

      operation 406146 "readFields"
	public return_type class_ref 171266 // GetField
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the persistent fields from the stream and makes them available by
name.

@return  the <code>GetField</code> object representing the persistent
         fields of the object being deserialized
@throws  ClassNotFoundException if the class of a serialized object
         could not be found.
@throws  IOException if an I/O error occurs.
@throws  NotActiveException if the stream is not currently reading
         objects.
@since 1.2
"
      end

      operation 406274 "registerValidation"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 171394 // ObjectInputValidation
	  param in name "prio" explicit_type "int"
	nexceptions 2
	  exception class_ref 171522 // NotActiveException
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register an object to be validated before the graph is returned.  While
similar to resolveObject these validations are called after the entire
graph has been reconstituted.  Typically, a readObject method will
register the object with the stream so that when all of the objects are
restored a final set of validations can be performed.

@param   obj the object to receive the validation callback.
@param   prio controls the order of callbacks;zero is a good default.
         Use higher numbers to be called back earlier, lower numbers for
         later callbacks. Within a priority, callbacks are processed in
         no particular order.
@throws  NotActiveException The stream is not currently reading objects
         so it is invalid to register a callback.
@throws  InvalidObjectException The validation object is null.
"
      end

      operation 406402 "resolveClass"
	protected return_type class_ref 130818 // Class
	nparams 1
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the local class equivalent of the specified stream class
description.  Subclasses may implement this method to allow classes to
be fetched from an alternate source.

<p>The corresponding method in <code>ObjectOutputStream</code> is
<code>annotateClass</code>.  This method will be invoked only once for
each unique class in the stream.  This method can be implemented by
subclasses to use an alternate loading mechanism but must return a
<code>Class</code> object. Once returned, if the class is not an array
class, its serialVersionUID is compared to the serialVersionUID of the
serialized class, and if there is a mismatch, the deserialization fails
and an {@link InvalidClassException} is thrown.

<p>The default implementation of this method in
<code>ObjectInputStream</code> returns the result of calling
<pre>
    Class.forName(desc.getName(), false, loader)
</pre>
where <code>loader</code> is determined as follows: if there is a
method on the current thread's stack whose declaring class was
defined by a user-defined class loader (and was not a generated to
implement reflective invocations), then <code>loader</code> is class
loader corresponding to the closest such method to the currently
executing frame; otherwise, <code>loader</code> is
<code>null</code>. If this call results in a
<code>ClassNotFoundException</code> and the name of the passed
<code>ObjectStreamClass</code> instance is the Java language keyword
for a primitive type or void, then the <code>Class</code> object
representing that primitive type or void will be returned
(e.g., an <code>ObjectStreamClass</code> with the name
<code>\"int\"</code> will be resolved to <code>Integer.TYPE</code>).
Otherwise, the <code>ClassNotFoundException</code> will be thrown to
the caller of this method.

@param   desc an instance of class <code>ObjectStreamClass</code>
@return  a <code>Class</code> object corresponding to <code>desc</code>
@throws  IOException any of the usual Input/Output exceptions.
@throws  ClassNotFoundException if class of a serialized object cannot
         be found.
"
      end

      operation 406530 "resolveProxyClass"
	protected return_type class_ref 130818 // Class
	nparams 1
	  param inout name "interfaces" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a proxy class that implements the interfaces named in a proxy
class descriptor; subclasses may implement this method to read custom
data from the stream along with the descriptors for dynamic proxy
classes, allowing them to use an alternate loading mechanism for the
interfaces and the proxy class.

<p>This method is called exactly once for each unique proxy class
descriptor in the stream.

<p>The corresponding method in <code>ObjectOutputStream</code> is
<code>annotateProxyClass</code>.  For a given subclass of
<code>ObjectInputStream</code> that overrides this method, the
<code>annotateProxyClass</code> method in the corresponding subclass of
<code>ObjectOutputStream</code> must write any data or objects read by
this method.

<p>The default implementation of this method in
<code>ObjectInputStream</code> returns the result of calling
<code>Proxy.getProxyClass</code> with the list of <code>Class</code>
objects for the interfaces that are named in the <code>interfaces</code>
parameter.  The <code>Class</code> object for each interface name
<code>i</code> is the value returned by calling
<pre>
    Class.forName(i, false, loader)
</pre>
where <code>loader</code> is that of the first non-<code>null</code>
class loader up the execution stack, or <code>null</code> if no
non-<code>null</code> class loaders are on the stack (the same class
loader choice used by the <code>resolveClass</code> method).  Unless any
of the resolved interfaces are non-public, this same value of
<code>loader</code> is also the class loader passed to
<code>Proxy.getProxyClass</code>; if non-public interfaces are present,
their class loader is passed instead (if more than one non-public
interface class loader is encountered, an
<code>IllegalAccessError</code> is thrown).
If <code>Proxy.getProxyClass</code> throws an
<code>IllegalArgumentException</code>, <code>resolveProxyClass</code>
will throw a <code>ClassNotFoundException</code> containing the
<code>IllegalArgumentException</code>.

@param interfaces the list of interface names that were
               deserialized in the proxy class descriptor
@return  a proxy class for the specified interfaces
@throws        IOException any exception thrown by the underlying
               <code>InputStream</code>
@throws        ClassNotFoundException if the proxy class or any of the
               named interfaces could not be found
@see ObjectOutputStream#annotateProxyClass(Class)
@since 1.3
"
      end

      operation 406658 "resolveObject"
	protected return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method will allow trusted subclasses of ObjectInputStream to
substitute one object for another during deserialization. Replacing
objects is disabled until enableResolveObject is called. The
enableResolveObject method checks that the stream requesting to resolve
object can be trusted. Every reference to serializable objects is passed
to resolveObject.  To insure that the private state of objects is not
unintentionally exposed only trusted streams may use resolveObject.

<p>This method is called after an object has been read but before it is
returned from readObject.  The default resolveObject method just returns
the same object.

<p>When a subclass is replacing objects it must insure that the
substituted object is compatible with every field where the reference
will be stored.  Objects whose type is not a subclass of the type of the
field or array element abort the serialization by raising an exception
and the object is not be stored.

<p>This method is called only once when each object is first
encountered.  All subsequent references to the object will be redirected
to the new object.

@param   obj object to be substituted
@return  the substituted object
@throws  IOException Any of the usual Input/Output exceptions.
"
      end

      operation 406786 "enableResolveObject"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable the stream to allow objects read from the stream to be replaced.
When enabled, the resolveObject method is called for every object being
deserialized.

<p>If <i>enable</i> is true, and there is a security manager installed,
this method first calls the security manager's
<code>checkPermission</code> method with the
<code>SerializablePermission(\"enableSubstitution\")</code> permission to
ensure it's ok to enable the stream to allow objects read from the
stream to be replaced.

@param   enable true for enabling use of <code>resolveObject</code> for
         every object being deserialized
@return  the previous setting before this method was invoked
@throws  SecurityException if a security manager exists and its
         <code>checkPermission</code> method denies enabling the stream
         to allow objects read from the stream to be replaced.
@see SecurityManager#checkPermission
@see java.io.SerializablePermission
"
      end

      operation 406914 "readStreamHeader"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171778 // StreamCorruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The readStreamHeader method is provided to allow subclasses to read and
verify their own stream headers. It reads and verifies the magic number
and version number.

@throws  IOException if there are I/O errors while reading from the
         underlying <code>InputStream</code>
@throws  StreamCorruptedException if control information in the stream
         is inconsistent
"
      end

      operation 407042 "readClassDescriptor"
	protected return_type class_ref 170242 // ObjectStreamClass
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a class descriptor from the serialization stream.  This method is
called when the ObjectInputStream expects a class descriptor as the next
item in the serialization stream.  Subclasses of ObjectInputStream may
override this method to read in class descriptors that have been written
in non-standard formats (by subclasses of ObjectOutputStream which have
overridden the <code>writeClassDescriptor</code> method).  By default,
this method reads class descriptors according to the format defined in
the Object Serialization specification.

@return  the class descriptor read
@throws  IOException If an I/O error has occurred.
@throws  ClassNotFoundException If the Class of a serialized object used
         in the class descriptor representation cannot be found
@see java.io.ObjectOutputStream#writeClassDescriptor(java.io.ObjectStreamClass)
@since 1.3
"
      end

      operation 407170 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte of data. This method will block if no input is available.

@return  the byte read, or -1 if the end of the stream is reached.
@throws  IOException If an I/O error has occurred.
"
      end

      operation 407298 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into an array of bytes.  This method will block until some input
is available. Consider using java.io.DataInputStream.readFully to read
exactly 'length' bytes.

@param   buf the buffer into which the data is read
@param   off the start offset of the data
@param   len the maximum number of bytes read
@return  the actual number of bytes read, -1 is returned when the end of
         the stream is reached.
@throws  IOException If an I/O error has occurred.
@see java.io.DataInputStream#readFully(byte[],int,int)
"
      end

      operation 407426 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read without blocking.

@return  the number of available bytes.
@throws  IOException if there are I/O errors while reading from the
         underlying <code>InputStream</code>
"
      end

      operation 407554 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the input stream. Must be called to release any resources
associated with the stream.

@throws  IOException If an I/O error has occurred.
"
      end

      operation 407682 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a boolean.

@return  the boolean read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 407810 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an 8 bit byte.

@return  the 8 bit byte read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 407938 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 8 bit byte.

@return  the 8 bit byte read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408066 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 16 bit char.

@return  the 16 bit char read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408194 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 16 bit short.

@return  the 16 bit short read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408322 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 16 bit short.

@return  the 16 bit short read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408450 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 32 bit int.

@return  the 32 bit integer read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408578 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 64 bit long.

@return  the read 64 bit long.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408706 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 32 bit float.

@return  the 32 bit float read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408834 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a 64 bit double.

@return  the 64 bit double read.
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 408962 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes, blocking until all bytes are read.

@param   buf the buffer into which the data is read
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 409090 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes, blocking until all bytes are read.

@param   buf the buffer into which the data is read
@param   off the start offset of the data
@param   len the maximum number of bytes to read
@throws  EOFException If end of file is reached.
@throws  IOException If other I/O error has occurred.
"
      end

      operation 409218 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips bytes.

@param   len the number of bytes to be skipped
@return  the actual number of bytes skipped.
@throws  IOException If an I/O error has occurred.
"
      end

      operation 409346 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Reads in a line that has been terminated by a \\n, \\r, \\r\\n or EOF.

@return  a String copy of the line.
@throws  IOException if there are I/O errors while reading from the
         underlying <code>InputStream</code>
@deprecated This method does not properly convert bytes to characters.
         see DataInputStream for the details and alternatives.
"
      end

      operation 409474 "readUTF"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a String in
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format.

@return  the String.
@throws  IOException if there are I/O errors while reading from the
         underlying <code>InputStream</code>
@throws  UTFDataFormatException if read bytes do not represent a valid
         modified UTF-8 encoding of a string
"
      end

      operation 409602 "getInternalObjectInputFilter"
	private explicit_return_type "ObjectInputFilter"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the serialization filter for this stream.
The serialization filter is the most recent filter set in
{@link #setInternalObjectInputFilter setInternalObjectInputFilter} or
the initial process-wide filter from
{@link ObjectInputFilter.Config#getSerialFilter() ObjectInputFilter.Config.getSerialFilter}.

@return the serialization filter for the stream; may be null
"
      end

      operation 409730 "setInternalObjectInputFilter"
	private explicit_return_type "void"
	nparams 1
	  param inout name "filter" explicit_type "ObjectInputFilter"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the serialization filter for the stream.
The filter's {@link ObjectInputFilter#checkInput checkInput} method is called
for each class and reference in the stream.
The filter can check any or all of the class, the array length, the number
of references, the depth of the graph, and the size of the input stream.
<p>
If the filter returns {@link ObjectInputFilter.Status#REJECTED Status.REJECTED},
{@code null} or throws a {@link RuntimeException},
the active {@code readObject} or {@code readUnshared}
throws {@link InvalidClassException}, otherwise deserialization
continues uninterrupted.
<p>
The serialization filter is initialized to the value of
{@link ObjectInputFilter.Config#getSerialFilter() ObjectInputFilter.Config.getSerialFilter}
when the {@code  ObjectInputStream} is constructed and can be set
to a custom filter only once.

@implSpec
The filter, when not {@code null}, is invoked during {@link #readObject readObject}
and {@link #readUnshared readUnshared} for each object
(regular or class) in the stream including the following:
<ul>
    <li>each object reference previously deserialized from the stream
    (class is {@code null}, arrayLength is -1),
    <li>each regular class (class is not {@code null}, arrayLength is -1),
    <li>each interface of a dynamic proxy and the dynamic proxy class itself
    (class is not {@code null}, arrayLength is -1),
    <li>each array is filtered using the array type and length of the array
    (class is the array type, arrayLength is the requested length),
    <li>each object replaced by its class' {@code readResolve} method
        is filtered using the replacement object's class, if not {@code null},
        and if it is an array, the arrayLength, otherwise -1,
    <li>and each object replaced by {@link #resolveObject resolveObject}
        is filtered using the replacement object's class, if not {@code null},
        and if it is an array, the arrayLength, otherwise -1.
</ul>

When the {@link ObjectInputFilter#checkInput checkInput} method is invoked
it is given access to the current class, the array length,
the current number of references already read from the stream,
the depth of nested calls to {@link #readObject readObject} or
{@link #readUnshared readUnshared},
and the implementation dependent number of bytes consumed from the input stream.
<p>
Each call to {@link #readObject readObject} or
{@link #readUnshared readUnshared} increases the depth by 1
before reading an object and decreases by 1 before returning
normally or exceptionally.
The depth starts at {@code 1} and increases for each nested object and
decrements when each nested call returns.
The count of references in the stream starts at {@code 1} and
is increased before reading an object.

@param filter the filter, may be null
@throws SecurityException if there is security manager and the
      {@code SerializablePermission(\"serialFilter\")} is not granted
@throws IllegalStateException if the {@linkplain #getInternalObjectInputFilter() current filter}
      is not {@code null} and is not the process-wide filter
"
      end

      operation 409858 "filterCheck"
	private explicit_return_type "void"
	nparams 2
	  param inout name "clazz" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the serialization filter if non-null.
If the filter rejects or an exception is thrown, throws InvalidClassException.

@param clazz the class; may be null
@param arrayLength the array length requested; use {@code -1} if not creating an array
@throws InvalidClassException if it rejected by the filter or
       a {@link RuntimeException} is thrown
"
      end

      operation 411394 "verifySubclass"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this (possibly subclass) instance can be constructed
without violating security constraints: the subclass must not override
security-sensitive non-final methods, or else the
\"enableSubclassImplementation\" SerializablePermission is checked.
"
      end

      operation 411522 "auditSubclass"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "subcl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs reflective checks on given subclass to verify that it doesn't
override security-sensitive non-final methods.  Returns true if subclass
is \"safe\", false otherwise.
"
      end

      operation 411650 "clear"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears internal data structures.
"
      end

      operation 411778 "readObject0"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Underlying readObject implementation.
"
      end

      operation 411906 "checkResolve"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If resolveObject has been enabled and given object does not have an
exception associated with it, calls resolveObject to determine
replacement for object, and updates handle table accordingly.  Returns
replacement object, or echoes provided object if no replacement
occurred.  Expects that passHandle is set to given object's handle prior
to calling this method.
"
      end

      operation 412034 "readTypeString"
	package return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads string without allowing it to be replaced in stream.  Called from
within ObjectStreamClass.read().
"
      end

      operation 412162 "readNull"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in null code, sets passHandle to NULL_HANDLE and returns null.
"
      end

      operation 412290 "readHandle"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in object handle, sets passHandle to the read handle, and returns
object associated with the handle.
"
      end

      operation 412418 "readClass"
	private return_type class_ref 130818 // Class
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns class object.  Sets passHandle to class object's
assigned handle.  Returns null if class is unresolvable (in which case a
ClassNotFoundException will be associated with the class' handle in the
handle table).
"
      end

      operation 412546 "readClassDesc"
	private return_type class_ref 170242 // ObjectStreamClass
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns (possibly null) class descriptor.  Sets passHandle
to class descriptor's assigned handle.  If class descriptor cannot be
resolved to a class in the local VM, a ClassNotFoundException is
associated with the class descriptor's handle.
"
      end

      operation 412674 "isCustomSubclass"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 412802 "readProxyDesc"
	private return_type class_ref 170242 // ObjectStreamClass
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns class descriptor for a dynamic proxy class.  Sets
passHandle to proxy class descriptor's assigned handle.  If proxy class
descriptor cannot be resolved to a class in the local VM, a
ClassNotFoundException is associated with the descriptor's handle.
"
      end

      operation 412930 "readNonProxyDesc"
	private return_type class_ref 170242 // ObjectStreamClass
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns class descriptor for a class that is not a dynamic
proxy class.  Sets passHandle to class descriptor's assigned handle.  If
class descriptor cannot be resolved to a class in the local VM, a
ClassNotFoundException is associated with the descriptor's handle.
"
      end

      operation 413058 "readString"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns new string.  Sets passHandle to new string's
assigned handle.
"
      end

      operation 413186 "readArray"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns array object, or null if array class is
unresolvable.  Sets passHandle to array's assigned handle.
"
      end

      operation 413314 "readEnum"
	private return_type class_ref 172034 // Enum
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns enum constant, or null if enum type is
unresolvable.  Sets passHandle to enum constant's assigned handle.
"
      end

      operation 413442 "readOrdinaryObject"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and returns \"ordinary\" (i.e., not a String, Class,
ObjectStreamClass, array, or enum constant) object, or null if object's
class is unresolvable (in which case a ClassNotFoundException will be
associated with object's handle).  Sets passHandle to object's assigned
handle.
"
      end

      operation 413570 "readExternalData"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 172162 // Externalizable
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If obj is non-null, reads externalizable data by invoking readExternal()
method of obj; otherwise, attempts to skip over externalizable data.
Expects that passHandle is set to obj's handle before this method is
called.
"
      end

      operation 413698 "readSerialData"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads (or attempts to skip, if obj is null or is tagged with a
ClassNotFoundException) instance data for each serializable class of
object in stream, from superclass to subclass.  Expects that passHandle
is set to obj's handle before this method is called.
"
      end

      operation 413826 "skipCustomData"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over all block data and objects until TC_ENDBLOCKDATA is
encountered.
"
      end

      operation 413954 "defaultReadFields"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in values of serializable fields declared by given class
descriptor.  If obj is non-null, sets field values in obj.  Expects that
passHandle is set to obj's handle before this method is called.
"
      end

      operation 414082 "readFatalException"
	private return_type class_ref 146818 // IOException
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in and returns IOException that caused serialization to abort.
All stream state is discarded prior to reading in fatal exception.  Sets
passHandle to fatal exception's handle.
"
      end

      operation 414210 "handleReset"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171778 // StreamCorruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If recursion depth is 0, clears internal data structures; otherwise,
throws a StreamCorruptedException.  This method is called when a
TC_RESET typecode is encountered.
"
      end

      operation 414338 "bytesToFloats"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "src" explicit_type "byte"
	multiplicity "[]"
	  param in name "srcpos" explicit_type "int"
	  param inout name "dst" explicit_type "float"
	multiplicity "[]"
	  param in name "dstpos" explicit_type "int"
	  param in name "nfloats" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
s"
	
	
	
	comment "Converts specified span of bytes into float values.

 REMIND: remove once hotspot inlines Float.intBitsToFloat"
      end

      operation 414466 "bytesToDoubles"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "src" explicit_type "byte"
	multiplicity "[]"
	  param in name "srcpos" explicit_type "int"
	  param inout name "dst" explicit_type "double"
	multiplicity "[]"
	  param in name "dstpos" explicit_type "int"
	  param in name "ndoubles" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
s"
	
	
	
	comment "Converts specified span of bytes into double values.

 REMIND: remove once hotspot inlines Double.longBitsToDouble"
      end

      operation 414594 "latestUserDefinedLoader"
	class_operation private return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first non-null class loader (not counting class loaders of
generated reflection implementation classes) up the execution stack, or
null if only code from the null class loader is on the stack.  This
method is also called via reflection by the following RMI-IIOP class:

    com.sun.corba.se.internal.util.JDKClassLoader

This method should not be removed or its signature changed without
corresponding modifications to the above class.
"
      end

      class 172290 "GetFieldImpl"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 187522 // <generalisation>
	  relation 187522 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 187522 // <generalisation>
	    b parent class_ref 171266 // GetField
	end

	classrelation 187650 // desc (<unidirectional association>)
	  relation 187650 --->
	    a role_name "desc" const_relation private
	      comment " class descriptor describing serializable fields 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 187650 // desc (<unidirectional association>)
	    b parent class_ref 170242 // ObjectStreamClass
	end

	attribute 160386 "primVals"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " primitive field values 
"
	end

	classrelation 187778 // objVals (<unidirectional association>)
	  relation 187778 --->
	    a role_name "objVals" multiplicity "[]" const_relation private
	      comment " object field values 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 187778 // objVals (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	attribute 160514 "objHandles"
	  const_attribute private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " object field value handles 
"
	end

	operation 414722 "GetFieldImpl"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates GetFieldImpl object for reading fields defined in given
class descriptor.
"
	end

	operation 414850 "getObjectStreamClass"
	  public return_type class_ref 170242 // ObjectStreamClass
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 414978 "defaulted"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 415106 "get"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 415234 "get"
	  public explicit_return_type "byte"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 415362 "get"
	  public explicit_return_type "char"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "char"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 415490 "get"
	  public explicit_return_type "short"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "short"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 415618 "get"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 415746 "get"
	  public explicit_return_type "float"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "float"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 415874 "get"
	  public explicit_return_type "long"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 416002 "get"
	  public explicit_return_type "double"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "double"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 416130 "get"
	  public return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 416258 "readFields"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads primitive and object field values from stream.
"
	end

	operation 416386 "getFieldOffset"
	  private explicit_return_type "int"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns offset of field with given name and type.  A specified type
of null matches all types, Object.class matches all non-primitive
types, and any other non-null type matches assignable types only.
If no matching field is found in the (incoming) class
descriptor but a matching field is present in the associated local
class descriptor, returns -1.  Throws IllegalArgumentException if
neither incoming nor local class descriptor contains a match.
"
	end
      end

      class 172546 "FilterValues"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 188546 // clazz (<unidirectional association>)
	  relation 188546 --->
	    a role_name "clazz" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 188546 // clazz (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	attribute 160770 "arrayLength"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 160898 "totalObjectRefs"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 161026 "depth"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 161154 "streamBytes"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 417154 "FilterValues"
	  public explicit_return_type ""
	  nparams 5
	    param inout name "clazz" type class_ref 130818 // Class
	    param in name "arrayLength" explicit_type "long"
	    param in name "totalObjectRefs" explicit_type "long"
	    param in name "depth" explicit_type "long"
	    param in name "streamBytes" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 417282 "serialClass"
	  public return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 417410 "arrayLength"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 417538 "references"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 417666 "depth"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 417794 "streamBytes"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 172802 "PeekInputStream"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 188674 // <generalisation>
	  relation 188674 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 188674 // <generalisation>
	    b parent class_ref 146434 // InputStream
	end

	classrelation 188802 // in (<unidirectional association>)
	  relation 188802 --->
	    a role_name "in" const_relation private
	      comment " underlying stream 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 188802 // in (<unidirectional association>)
	    b parent class_ref 146434 // InputStream
	end

	attribute 161282 "peekb"
	  private explicit_type "int"
	  init_value " -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " peeked byte 
"
	end

	attribute 161410 "totalBytesRead"
	  private explicit_type "long"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " total bytes read from the stream 
"
	end

	operation 417922 "PeekInputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "in" type class_ref 146434 // InputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new PeekInputStream on top of given underlying stream.
"
	end

	operation 418050 "peek"
	  package explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Peeks at next byte value in stream.  Similar to read(), except
that it does not consume the read value.
"
	end

	operation 418178 "read"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 418306 "read"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 418434 "readFully"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 418562 "skip"
	  public explicit_return_type "long"
	  nparams 1
	    param in name "n" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 418690 "available"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 418818 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 418946 "getBytesRead"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 426498 "cloneArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "array" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method for cloning arrays in case of using unsharing reading
"
      end

      operation 426626 "validateDescriptor"
	private explicit_return_type "void"
	nparams 1
	  param inout name "descriptor" type class_ref 170242 // ObjectStreamClass
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 163970 "validator"
	volatile private explicit_type "ObjectStreamClassValidator"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " controlled access to ObjectStreamClassValidator
"
      end

      operation 426754 "setValidator"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	  param inout name "validator" explicit_type "ObjectStreamClassValidator"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 129538 "initialization"
	
	cpp "" ""
	java "  static {
        SharedSecrets.setJavaObjectInputStreamAccess(ObjectInputStream::setValidator);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 169218 "ByteArrayInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>ByteArrayInputStream</code> contains
an internal buffer that contains bytes that
may be read from the stream. An internal
counter keeps track of the next byte to
be supplied by the <code>read</code> method.
<p>
Closing a <tt>ByteArrayInputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.

@author  Arthur van Hoff
@see     java.io.StringBufferInputStream
@since   JDK1.0
"
      classrelation 185346 // <generalisation>
	relation 185346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 185346 // <generalisation>
	  b parent class_ref 146434 // InputStream
      end

      attribute 154882 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An array of bytes that was provided
by the creator of the stream. Elements <code>buf[0]</code>
through <code>buf[count-1]</code> are the
only bytes that can ever be read from the
stream;  element <code>buf[pos]</code> is
the next byte to be read.

"
      end

      attribute 155010 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the next character to read from the input stream buffer.
This value should always be nonnegative
and not larger than the value of <code>count</code>.
The next byte to be read from the input stream buffer
will be <code>buf[pos]</code>.

"
      end

      attribute 155138 "mark"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The currently marked position in the stream.
ByteArrayInputStream objects are marked at position zero by
default when constructed.  They may be marked at another
position within the buffer by the <code>mark()</code> method.
The current buffer position is set to this point by the
<code>reset()</code> method.
<p>
If no mark has been set, then the value of mark is the offset
passed to the constructor (or 0 if the offset was not supplied).

@since   JDK1.1

"
      end

      attribute 155266 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index one greater than the last valid character in the input
stream buffer.
This value should always be nonnegative
and not larger than the length of <code>buf</code>.
It  is one greater than the position of
the last byte within <code>buf</code> that
can ever be read  from the input stream buffer.

"
      end

      operation 400898 "ByteArrayInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>ByteArrayInputStream</code>
so that it  uses <code>buf</code> as its
buffer array.
The buffer array is not copied.
The initial value of <code>pos</code>
is <code>0</code> and the initial value
of  <code>count</code> is the length of
<code>buf</code>.

@param   buf   the input buffer.
"
      end

      operation 401026 "ByteArrayInputStream"
	public explicit_return_type ""
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates <code>ByteArrayInputStream</code>
that uses <code>buf</code> as its
buffer array. The initial value of <code>pos</code>
is <code>offset</code> and the initial value
of <code>count</code> is the minimum of <code>offset+length</code>
and <code>buf.length</code>.
The buffer array is not copied. The buffer's mark is
set to the specified offset.

@param   buf      the input buffer.
@param   offset   the offset in the buffer of the first byte to read.
@param   length   the maximum number of bytes to read from the buffer.
"
      end

      operation 401154 "read"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value
byte is returned as an <code>int</code> in the range
<code>0</code> to <code>255</code>. If no byte is available
because the end of the stream has been reached, the value
<code>-1</code> is returned.
<p>
This <code>read</code> method
cannot block.

@return  the next byte of data, or <code>-1</code> if the end of the
         stream has been reached.
"
      end

      operation 401282 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data into an array of bytes
from this input stream.
If <code>pos</code> equals <code>count</code>,
then <code>-1</code> is returned to indicate
end of file. Otherwise, the  number <code>k</code>
of bytes read is equal to the smaller of
<code>len</code> and <code>count-pos</code>.
If <code>k</code> is positive, then bytes
<code>buf[pos]</code> through <code>buf[pos+k-1]</code>
are copied into <code>b[off]</code>  through
<code>b[off+k-1]</code> in the manner performed
by <code>System.arraycopy</code>. The
value <code>k</code> is added into <code>pos</code>
and <code>k</code> is returned.
<p>
This <code>read</code> method cannot block.

@param   b     the buffer into which the data is read.
@param   off   the start offset in the destination array <code>b</code>
@param   len   the maximum number of bytes read.
@return  the total number of bytes read into the buffer, or
         <code>-1</code> if there is no more data because the end of
         the stream has been reached.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
"
      end

      operation 401410 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips <code>n</code> bytes of input from this input stream. Fewer
bytes might be skipped if the end of the input stream is reached.
The actual number <code>k</code>
of bytes to be skipped is equal to the smaller
of <code>n</code> and  <code>count-pos</code>.
The value <code>k</code> is added into <code>pos</code>
and <code>k</code> is returned.

@param   n   the number of bytes to be skipped.
@return  the actual number of bytes skipped.
"
      end

      operation 401538 "available"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of remaining bytes that can be read (or skipped over)
from this input stream.
<p>
The value returned is <code>count&nbsp;- pos</code>,
which is the number of bytes remaining to be read from the input buffer.

@return  the number of remaining bytes that can be read (or skipped
         over) from this input stream without blocking.
"
      end

      operation 401666 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this <code>InputStream</code> supports mark/reset. The
<code>markSupported</code> method of <code>ByteArrayInputStream</code>
always returns <code>true</code>.

@since   JDK1.1
"
      end

      operation 401794 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the current marked position in the stream.
ByteArrayInputStream objects are marked at position zero by
default when constructed.  They may be marked at another
position within the buffer by this method.
<p>
If no mark has been set, then the value of the mark is the
offset passed to the constructor (or 0 if the offset was not
supplied).

<p> Note: The <code>readAheadLimit</code> for this class
 has no meaning.

@since   JDK1.1
"
      end

      operation 401922 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the buffer to the marked position.  The marked position
is 0 unless another position was marked or an offset was specified
in the constructor.
"
      end

      operation 402050 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closing a <tt>ByteArrayInputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.
"
      end
    end

    class 169474 "ObjectInput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ObjectInput extends the DataInput interface to include the reading of
objects. DataInput includes methods for the input of primitive types,
ObjectInput extends that interface to include objects, arrays, and Strings.

@author  unascribed
@see java.io.InputStream
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@since   JDK1.1
"
      classrelation 185730 // <generalisation>
	relation 185730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 185730 // <generalisation>
	  b parent class_ref 169602 // DataInput
      end

      classrelation 185858 // <generalisation>
	relation 185858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 185858 // <generalisation>
	  b parent class_ref 146690 // AutoCloseable
      end

      operation 404482 "readObject"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read and return an object. The class that implements this interface
defines where the object is \"read\" from.

@return the object read from the stream
@exception java.lang.ClassNotFoundException If the class of a serialized
     object cannot be found.
@exception IOException If any of the usual Input/Output
related exceptions occur.
"
      end

      operation 404610 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte of data. This method will block if no input is
available.
@return  the byte read, or -1 if the end of the
         stream is reached.
@exception IOException If an I/O error has occurred.
"
      end

      operation 404738 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into an array of bytes.  This method will
block until some input is available.
@param b the buffer into which the data is read
@return  the actual number of bytes read, -1 is
         returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred.
"
      end

      operation 404866 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into an array of bytes.  This method will
block until some input is available.
@param b the buffer into which the data is read
@param off the start offset of the data
@param len the maximum number of bytes read
@return  the actual number of bytes read, -1 is
         returned when the end of the stream is reached.
@exception IOException If an I/O error has occurred.
"
      end

      operation 404994 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips n bytes of input.
@param n the number of bytes to be skipped
@return  the actual number of bytes skipped.
@exception IOException If an I/O error has occurred.
"
      end

      operation 405122 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read
without blocking.
@return the number of available bytes.
@exception IOException If an I/O error has occurred.
"
      end

      operation 405250 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the input stream. Must be called
to release any resources associated with
the stream.
@exception IOException If an I/O error has occurred.
"
      end
    end

    class 169602 "DataInput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code DataInput} interface provides
for reading bytes from a binary stream and
reconstructing from them data in any of
the Java primitive types. There is also
a
facility for reconstructing a {@code String}
from data in
<a href=\"#modified-utf-8\">modified UTF-8</a>
format.
<p>
It is generally true of all the reading
routines in this interface that if end of
file is reached before the desired number
of bytes has been read, an {@code EOFException}
(which is a kind of {@code IOException})
is thrown. If any byte cannot be read for
any reason other than end of file, an {@code IOException}
other than {@code EOFException} is
thrown. In particular, an {@code IOException}
may be thrown if the input stream has been
closed.

<h3><a name=\"modified-utf-8\">Modified UTF-8</a></h3>
<p>
Implementations of the DataInput and DataOutput interfaces represent
Unicode strings in a format that is a slight modification of UTF-8.
(For information regarding the standard UTF-8 format, see section
<i>3.9 Unicode Encoding Forms</i> of <i>The Unicode Standard, Version
4.0</i>).
Note that in the following table, the most significant bit appears in the
far left-hand column.

<blockquote>
  <table border=\"1\" cellspacing=\"0\" cellpadding=\"8\"
         summary=\"Bit values and bytes\">
    <tr>
      <th colspan=\"9\"><span style=\"font-weight:normal\">
        All characters in the range {@code '\\u005Cu0001'} to
        {@code '\\u005Cu007F'} are represented by a single byte:</span></th>
    </tr>
    <tr>
      <td></td>
      <th colspan=\"8\" id=\"bit_a\">Bit Values</th>
    </tr>
    <tr>
      <th id=\"byte1_a\">Byte 1</th>
      <td><center>0</center>
      <td colspan=\"7\"><center>bits 6-0</center>
    </tr>
    <tr>
      <th colspan=\"9\"><span style=\"font-weight:normal\">
        The null character {@code '\\u005Cu0000'} and characters
        in the range {@code '\\u005Cu0080'} to {@code '\\u005Cu07FF'} are
        represented by a pair of bytes:</span></th>
    </tr>
    <tr>
      <td></td>
      <th colspan=\"8\" id=\"bit_b\">Bit Values</th>
    </tr>
    <tr>
      <th id=\"byte1_b\">Byte 1</th>
      <td><center>1</center>
      <td><center>1</center>
      <td><center>0</center>
      <td colspan=\"5\"><center>bits 10-6</center>
    </tr>
    <tr>
      <th id=\"byte2_a\">Byte 2</th>
      <td><center>1</center>
      <td><center>0</center>
      <td colspan=\"6\"><center>bits 5-0</center>
    </tr>
    <tr>
      <th colspan=\"9\"><span style=\"font-weight:normal\">
        {@code char} values in the range {@code '\\u005Cu0800'}
        to {@code '\\u005CuFFFF'} are represented by three bytes:</span></th>
    </tr>
    <tr>
      <td></td>
      <th colspan=\"8\"id=\"bit_c\">Bit Values</th>
    </tr>
    <tr>
      <th id=\"byte1_c\">Byte 1</th>
      <td><center>1</center>
      <td><center>1</center>
      <td><center>1</center>
      <td><center>0</center>
      <td colspan=\"4\"><center>bits 15-12</center>
    </tr>
    <tr>
      <th id=\"byte2_b\">Byte 2</th>
      <td><center>1</center>
      <td><center>0</center>
      <td colspan=\"6\"><center>bits 11-6</center>
    </tr>
    <tr>
      <th id=\"byte3\">Byte 3</th>
      <td><center>1</center>
      <td><center>0</center>
      <td colspan=\"6\"><center>bits 5-0</center>
    </tr>
  </table>
</blockquote>
<p>
The differences between this format and the
standard UTF-8 format are the following:
<ul>
<li>The null byte {@code '\\u005Cu0000'} is encoded in 2-byte format
    rather than 1-byte, so that the encoded strings never have
    embedded nulls.
<li>Only the 1-byte, 2-byte, and 3-byte formats are used.
<li><a href=\"../lang/Character.html#unicode\">Supplementary characters</a>
    are represented in the form of surrogate pairs.
</ul>
@author  Frank Yellin
@see     java.io.DataInputStream
@see     java.io.DataOutput
@since   JDK1.0
"
      operation 402562 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads some bytes from an input
stream and stores them into the buffer
array {@code b}. The number of bytes
read is equal
to the length of {@code b}.
<p>
This method blocks until one of the
following conditions occurs:
<ul>
<li>{@code b.length}
bytes of input data are available, in which
case a normal return is made.

<li>End of
file is detected, in which case an {@code EOFException}
is thrown.

<li>An I/O error occurs, in
which case an {@code IOException} other
than {@code EOFException} is thrown.
</ul>
<p>
If {@code b} is {@code null},
a {@code NullPointerException} is thrown.
If {@code b.length} is zero, then
no bytes are read. Otherwise, the first
byte read is stored into element {@code b[0]},
the next one into {@code b[1]}, and
so on.
If an exception is thrown from
this method, then it may be that some but
not all bytes of {@code b} have been
updated with data from the input stream.

@param     b   the buffer into which the data is read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 402690 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Reads {@code len}
bytes from
an input stream.
<p>
This method
blocks until one of the following conditions
occurs:
<ul>
<li>{@code len} bytes
of input data are available, in which case
a normal return is made.

<li>End of file
is detected, in which case an {@code EOFException}
is thrown.

<li>An I/O error occurs, in
which case an {@code IOException} other
than {@code EOFException} is thrown.
</ul>
<p>
If {@code b} is {@code null},
a {@code NullPointerException} is thrown.
If {@code off} is negative, or {@code len}
is negative, or {@code off+len} is
greater than the length of the array {@code b},
then an {@code IndexOutOfBoundsException}
is thrown.
If {@code len} is zero,
then no bytes are read. Otherwise, the first
byte read is stored into element {@code b[off]},
the next one into {@code b[off+1]},
and so on. The number of bytes read is,
at most, equal to {@code len}.

@param     b   the buffer into which the data is read.
@param off  an int specifying the offset into the data.
@param len  an int specifying the number of bytes to read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 402818 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes an attempt to skip over
{@code n} bytes
of data from the input
stream, discarding the skipped bytes. However,
it may skip
over some smaller number of
bytes, possibly zero. This may result from
any of a
number of conditions; reaching
end of file before {@code n} bytes
have been skipped is
only one possibility.
This method never throws an {@code EOFException}.
The actual
number of bytes skipped is returned.

@param      n   the number of bytes to be skipped.
@return     the number of bytes actually skipped.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 402946 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads one input byte and returns
{@code true} if that byte is nonzero,
{@code false} if that byte is zero.
This method is suitable for reading
the byte written by the {@code writeBoolean}
method of interface {@code DataOutput}.

@return     the {@code boolean} value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403074 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and returns one input byte.
The byte is treated as a signed value in
the range {@code -128} through {@code 127},
inclusive.
This method is suitable for
reading the byte written by the {@code writeByte}
method of interface {@code DataOutput}.

@return     the 8-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403202 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads one input byte, zero-extends
it to type {@code int}, and returns
the result, which is therefore in the range
{@code 0}
through {@code 255}.
This method is suitable for reading
the byte written by the {@code writeByte}
method of interface {@code DataOutput}
if the argument to {@code writeByte}
was intended to be a value in the range
{@code 0} through {@code 255}.

@return     the unsigned 8-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403330 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads two input bytes and returns
a {@code short} value. Let {@code a}
be the first byte read and {@code b}
be the second byte. The value
returned
is:
<pre>{@code (short)((a << 8) | (b & 0xff))
}</pre>
This method
is suitable for reading the bytes written
by the {@code writeShort} method of
interface {@code DataOutput}.

@return     the 16-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403458 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads two input bytes and returns
an {@code int} value in the range {@code 0}
through {@code 65535}. Let {@code a}
be the first byte read and
{@code b}
be the second byte. The value returned is:
<pre>{@code (((a & 0xff) << 8) | (b & 0xff))
}</pre>
This method is suitable for reading the bytes
written by the {@code writeShort} method
of interface {@code DataOutput}  if
the argument to {@code writeShort}
was intended to be a value in the range
{@code 0} through {@code 65535}.

@return     the unsigned 16-bit value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403586 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads two input bytes and returns a {@code char} value.
Let {@code a}
be the first byte read and {@code b}
be the second byte. The value
returned is:
<pre>{@code (char)((a << 8) | (b & 0xff))
}</pre>
This method
is suitable for reading bytes written by
the {@code writeChar} method of interface
{@code DataOutput}.

@return     the {@code char} value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403714 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads four input bytes and returns an
{@code int} value. Let {@code a-d}
be the first through fourth bytes read. The value returned is:
<pre>{@code
(((a & 0xff) << 24) | ((b & 0xff) << 16) |
 ((c & 0xff) <<  8) | (d & 0xff))
}</pre>
This method is suitable
for reading bytes written by the {@code writeInt}
method of interface {@code DataOutput}.

@return     the {@code int} value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403842 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads eight input bytes and returns
a {@code long} value. Let {@code a-h}
be the first through eighth bytes read.
The value returned is:
<pre>{@code
(((long)(a & 0xff) << 56) |
 ((long)(b & 0xff) << 48) |
 ((long)(c & 0xff) << 40) |
 ((long)(d & 0xff) << 32) |
 ((long)(e & 0xff) << 24) |
 ((long)(f & 0xff) << 16) |
 ((long)(g & 0xff) <<  8) |
 ((long)(h & 0xff)))
}</pre>
<p>
This method is suitable
for reading bytes written by the {@code writeLong}
method of interface {@code DataOutput}.

@return     the {@code long} value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 403970 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads four input bytes and returns
a {@code float} value. It does this
by first constructing an {@code int}
value in exactly the manner
of the {@code readInt}
method, then converting this {@code int}
value to a {@code float} in
exactly the manner of the method {@code Float.intBitsToFloat}.
This method is suitable for reading
bytes written by the {@code writeFloat}
method of interface {@code DataOutput}.

@return     the {@code float} value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 404098 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads eight input bytes and returns
a {@code double} value. It does this
by first constructing a {@code long}
value in exactly the manner
of the {@code readLong}
method, then converting this {@code long}
value to a {@code double} in exactly
the manner of the method {@code Double.longBitsToDouble}.
This method is suitable for reading
bytes written by the {@code writeDouble}
method of interface {@code DataOutput}.

@return     the {@code double} value read.
@exception  EOFException  if this stream reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 404226 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next line of text from the input stream.
It reads successive bytes, converting
each byte separately into a character,
until it encounters a line terminator or
end of
file; the characters read are then
returned as a {@code String}. Note
that because this
method processes bytes,
it does not support input of the full Unicode
character set.
<p>
If end of file is encountered
before even one byte can be read, then {@code null}
is returned. Otherwise, each byte that is
read is converted to type {@code char}
by zero-extension. If the character {@code '\\n'}
is encountered, it is discarded and reading
ceases. If the character {@code '\\r'}
is encountered, it is discarded and, if
the following byte converts &#32;to the
character {@code '\\n'}, then that is
discarded also; reading then ceases. If
end of file is encountered before either
of the characters {@code '\\n'} and
{@code '\\r'} is encountered, reading
ceases. Once reading has ceased, a {@code String}
is returned that contains all the characters
read and not discarded, taken in order.
Note that every character in this string
will have a value less than {@code \\u005Cu0100},
that is, {@code (char)256}.

@return the next line of text from the input stream,
        or {@code null} if the end of file is
        encountered before a byte can be read.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 404354 "readUTF"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a string that has been encoded using a
<a href=\"#modified-utf-8\">modified UTF-8</a>
format.
The general contract of {@code readUTF}
is that it reads a representation of a Unicode
character string encoded in modified
UTF-8 format; this string of characters
is then returned as a {@code String}.
<p>
First, two bytes are read and used to
construct an unsigned 16-bit integer in
exactly the manner of the {@code readUnsignedShort}
method . This integer value is called the
<i>UTF length</i> and specifies the number
of additional bytes to be read. These bytes
are then converted to characters by considering
them in groups. The length of each group
is computed from the value of the first
byte of the group. The byte following a
group, if any, is the first byte of the
next group.
<p>
If the first byte of a group
matches the bit pattern {@code 0xxxxxxx}
(where {@code x} means \"may be {@code 0}
or {@code 1}\"), then the group consists
of just that byte. The byte is zero-extended
to form a character.
<p>
If the first byte
of a group matches the bit pattern {@code 110xxxxx},
then the group consists of that byte {@code a}
and a second byte {@code b}. If there
is no byte {@code b} (because byte
{@code a} was the last of the bytes
to be read), or if byte {@code b} does
not match the bit pattern {@code 10xxxxxx},
then a {@code UTFDataFormatException}
is thrown. Otherwise, the group is converted
to the character:
<pre>{@code (char)(((a & 0x1F) << 6) | (b & 0x3F))
}</pre>
If the first byte of a group
matches the bit pattern {@code 1110xxxx},
then the group consists of that byte {@code a}
and two more bytes {@code b} and {@code c}.
If there is no byte {@code c} (because
byte {@code a} was one of the last
two of the bytes to be read), or either
byte {@code b} or byte {@code c}
does not match the bit pattern {@code 10xxxxxx},
then a {@code UTFDataFormatException}
is thrown. Otherwise, the group is converted
to the character:
<pre>{@code
(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F))
}</pre>
If the first byte of a group matches the
pattern {@code 1111xxxx} or the pattern
{@code 10xxxxxx}, then a {@code UTFDataFormatException}
is thrown.
<p>
If end of file is encountered
at any time during this entire process,
then an {@code EOFException} is thrown.
<p>
After every group has been converted to
a character by this process, the characters
are gathered, in the same order in which
their corresponding groups were read from
the input stream, to form a {@code String},
which is returned.
<p>
The {@code writeUTF}
method of interface {@code DataOutput}
may be used to write data that is suitable
for reading by this method.
@return     a Unicode string.
@exception  EOFException            if this stream reaches the end
              before reading all the bytes.
@exception  IOException             if an I/O error occurs.
@exception  UTFDataFormatException  if the bytes do not represent a
              valid modified UTF-8 encoding of a string.
"
      end
    end

    class 169858 "ObjectStreamConstants"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Constants written into the Object Serialization Stream.

@author  unascribed
@since JDK 1.1
"
      attribute 155394 "STREAM_MAGIC"
	class_attribute const_attribute public explicit_type "short"
	init_value " (short)0xaced"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Magic number that is written to the stream header.

"
      end

      attribute 155522 "STREAM_VERSION"
	class_attribute const_attribute public explicit_type "short"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Version number that is written to the stream header.

"
      end

      attribute 155650 "TC_BASE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Each item in the stream is preceded by a tag


First tag value.

"
      end

      attribute 155778 "TC_NULL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "         (byte)0x70"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Null object reference.

"
      end

      attribute 155906 "TC_REFERENCE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "    (byte)0x71"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Reference to an object already written into the stream.

"
      end

      attribute 156034 "TC_CLASSDESC"
	class_attribute const_attribute public explicit_type "byte"
	init_value "    (byte)0x72"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "new Class Descriptor.

"
      end

      attribute 156162 "TC_OBJECT"
	class_attribute const_attribute public explicit_type "byte"
	init_value "       (byte)0x73"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "new Object.

"
      end

      attribute 156290 "TC_STRING"
	class_attribute const_attribute public explicit_type "byte"
	init_value "       (byte)0x74"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "new String.

"
      end

      attribute 156418 "TC_ARRAY"
	class_attribute const_attribute public explicit_type "byte"
	init_value "        (byte)0x75"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "new Array.

"
      end

      attribute 156546 "TC_CLASS"
	class_attribute const_attribute public explicit_type "byte"
	init_value "        (byte)0x76"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Reference to Class.

"
      end

      attribute 156674 "TC_BLOCKDATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value "    (byte)0x77"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Block of optional data. Byte following tag indicates number
of bytes in this block data.

"
      end

      attribute 156802 "TC_ENDBLOCKDATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte)0x78"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "End of optional block data blocks for an object.

"
      end

      attribute 156930 "TC_RESET"
	class_attribute const_attribute public explicit_type "byte"
	init_value "        (byte)0x79"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Reset stream context. All handles written into stream are reset.

"
      end

      attribute 157058 "TC_BLOCKDATALONG"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte)0x7A"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "long Block data. The long following the tag indicates the
number of bytes in this block data.

"
      end

      attribute 157186 "TC_EXCEPTION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "    (byte)0x7B"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Exception during write.

"
      end

      attribute 157314 "TC_LONGSTRING"
	class_attribute const_attribute public explicit_type "byte"
	init_value "   (byte)0x7C"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Long string.

"
      end

      attribute 157442 "TC_PROXYCLASSDESC"
	class_attribute const_attribute public explicit_type "byte"
	init_value "       (byte)0x7D"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "new Proxy Class Descriptor.

"
      end

      attribute 157570 "TC_ENUM"
	class_attribute const_attribute public explicit_type "byte"
	init_value "         (byte)0x7E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "new Enum constant.
@since 1.5

"
      end

      attribute 157698 "TC_MAX"
	class_attribute const_attribute public explicit_type "byte"
	init_value "          (byte)0x7E"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Last tag value.

"
      end

      attribute 157826 "baseWireHandle"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x7e0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "First wire handle to be assigned.

"
      end

      attribute 157954 "SC_WRITE_METHOD"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x01"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit masks for ObjectStreamClass flag.

Bit mask for ObjectStreamClass flag. Indicates a Serializable class
defines its own writeObject method.

"
      end

      attribute 158082 "SC_BLOCK_DATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x08"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bit mask for ObjectStreamClass flag. Indicates Externalizable data
written in Block Data mode.
Added for PROTOCOL_VERSION_2.

@see #PROTOCOL_VERSION_2
@since 1.2

"
      end

      attribute 158210 "SC_SERIALIZABLE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x02"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bit mask for ObjectStreamClass flag. Indicates class is Serializable.

"
      end

      attribute 158338 "SC_EXTERNALIZABLE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x04"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bit mask for ObjectStreamClass flag. Indicates class is Externalizable.

"
      end

      attribute 158466 "SC_ENUM"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Bit mask for ObjectStreamClass flag. Indicates class is an enum type.
@since 1.5

"
      end

      classrelation 186114 // SUBSTITUTION_PERMISSION (<unidirectional association>)
	relation 186114 --->
	  a role_name "SUBSTITUTION_PERMISSION" init_value "
                           new SerializablePermission(\"enableSubstitution\")" class_relation const_relation public
	    comment " ******************************************************************
 Security permissions 

Enable substitution of one object for another during
serialization/deserialization.

@see java.io.ObjectOutputStream#enableReplaceObject(boolean)
@see java.io.ObjectInputStream#enableResolveObject(boolean)
@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 186114 // SUBSTITUTION_PERMISSION (<unidirectional association>)
	  b parent class_ref 169986 // SerializablePermission
      end

      classrelation 186242 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	relation 186242 --->
	  a role_name "SUBCLASS_IMPLEMENTATION_PERMISSION" init_value "
                    new SerializablePermission(\"enableSubclassImplementation\")" class_relation const_relation public
	    comment "
Enable overriding of readObject and writeObject.

@see java.io.ObjectOutputStream#writeObjectOverride(Object)
@see java.io.ObjectInputStream#readObjectOverride()
@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 186242 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	  b parent class_ref 169986 // SerializablePermission
      end

      attribute 158594 "PROTOCOL_VERSION_1"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A Stream Protocol Version. <p>

All externalizable data is written in JDK 1.1 external data
format after calling this method. This version is needed to write
streams containing Externalizable data that can be read by
pre-JDK 1.1.6 JVMs.

@see java.io.ObjectOutputStream#useProtocolVersion(int)
@since 1.2

"
      end

      attribute 158722 "PROTOCOL_VERSION_2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A Stream Protocol Version. <p>

This protocol is written by JVM 1.2.

Externalizable data is written in block data mode and is
terminated with TC_ENDBLOCKDATA. Externalizable class descriptor
flags has SC_BLOCK_DATA enabled. JVM 1.1.6 and greater can
read this format change.

Enables writing a nonSerializable class descriptor into the
stream. The serialVersionUID of a nonSerializable class is
set to 0L.

@see java.io.ObjectOutputStream#useProtocolVersion(int)
@see #SC_BLOCK_DATA
@since 1.2

"
      end
    end

    class 169986 "SerializablePermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is for Serializable permissions. A SerializablePermission
contains a name (also referred to as a \"target name\") but
no actions list; you either have the named permission
or you don't.

<P>
The target name is the name of the Serializable permission (see below).

<P>
The following table lists all the possible SerializablePermission target names,
and for each provides a description of what the permission allows
and a discussion of the risks of granting code the permission.

<table border=1 cellpadding=5 summary=\"Permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>enableSubclassImplementation</td>
  <td>Subclass implementation of ObjectOutputStream or ObjectInputStream
to override the default serialization or deserialization, respectively,
of objects</td>
  <td>Code can use this to serialize or
deserialize classes in a purposefully malfeasant manner. For example,
during serialization, malicious code can use this to
purposefully store confidential private field data in a way easily accessible
to attackers. Or, during deserialization it could, for example, deserialize
a class with all its private fields zeroed out.</td>
</tr>

<tr>
  <td>enableSubstitution</td>
  <td>Substitution of one object for another during
serialization or deserialization</td>
  <td>This is dangerous because malicious code
can replace the actual object with one which has incorrect or
malignant data.</td>
</tr>

</table>

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager


@author Joe Fialli
@since 1.2

 code was borrowed originally from java.lang.RuntimePermission. "
      classrelation 3142018 // <generalisation>
	relation 3142018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3142018 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 1655426 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8537212141160296410L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3142146 // actions (<unidirectional association>)
	relation 3142146 --->
	  a role_name "actions" private
	    comment "
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3142146 // actions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6932994 "SerializablePermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SerializablePermission with the specified name.
The name is the symbolic name of the SerializablePermission, such as
\"enableSubstitution\", etc.

@param name the name of the SerializablePermission.

@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty.
"
      end

      operation 6933122 "SerializablePermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SerializablePermission object with the specified name.
The name is the symbolic name of the SerializablePermission, and the
actions String is currently unused and should be null.

@param name the name of the SerializablePermission.
@param actions currently unused and must be set to null

@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty.
"
      end
    end

    class 170242 "ObjectStreamClass"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Serialization's descriptor for classes.  It contains the name and
serialVersionUID of the class.  The ObjectStreamClass for a specific class
loaded in this Java VM can be found/created using the lookup method.

<p>The algorithm to compute the SerialVersionUID is described in
<a href=\"../../../platform/serialization/spec/class.html#4100\">Object
Serialization Specification, Section 4.6, Stream Unique Identifiers</a>.

@author      Mike Warres
@author      Roger Riggs
@see ObjectStreamField
@see <a href=\"../../../platform/serialization/spec/class.html\">Object Serialization Specification, Section 4, Class Descriptors</a>
@since   JDK1.1
"
      class 170370 "WeakClassKey"
	visibility package 
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3136514 // <realization>
	  relation 3136514 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3136514 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	attribute 1650690 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "saved value of the referent's identity hash code, to maintain
a consistent hash code after the referent has been cleared

"
	end

	operation 6900738 "WeakClassKey"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "cl" type class_ref 130818 // Class
	    param inout name "refQueue" type class_ref 130946 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a new WeakClassKey to the given object, registered
with a queue.
"
	end

	operation 6900866 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the identity hash code of the original referent.
"
	end

	operation 6900994 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the given object is this identical
WeakClassKey instance, or, if this object's referent has not
been cleared, if the given object is another WeakClassKey
instance with the identical non-null referent as this one.
"
	end
      end

      classrelation 3131650 // <realization>
	relation 3131650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3131650 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3131778 // NO_FIELDS (<unidirectional association>)
	relation 3131778 --->
	  a role_name "NO_FIELDS" multiplicity "[]" init_value "
        new ObjectStreamField[0]" class_relation const_relation public
	    comment " serialPersistentFields value indicating no serializable fields 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3131778 // NO_FIELDS (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 1648130 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6120832682080437368L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3131906 // serialPersistentFields (<unidirectional association>)
	relation 3131906 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value "
        NO_FIELDS" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3131906 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 1648258 "reflFactory"
	class_attribute const_attribute private explicit_type "ReflectionFactory"
	init_value "
        AccessController.doPrivileged(
            new ReflectionFactory.GetReflectionFactoryAction())"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reflection factory for obtaining serialization constructors 
"
      end

      class 925570 "Caches"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3132034 // localDescs (<unidirectional association>)
	  relation 3132034 --->
	    a role_name "localDescs" init_value "
            new ConcurrentHashMap<>()" class_relation const_relation package
	      comment " cache mapping local classes -> descriptors 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakClassKey,Reference<?>> ${name}${value};
"
	      classrelation_ref 3132034 // localDescs (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	classrelation 3132162 // reflectors (<unidirectional association>)
	  relation 3132162 --->
	    a role_name "reflectors" init_value "
            new ConcurrentHashMap<>()" class_relation const_relation package
	      comment " cache mapping field group/local desc pairs -> field reflectors 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<FieldReflectorKey,Reference<?>> ${name}${value};
"
	      classrelation_ref 3132162 // reflectors (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	classrelation 3132290 // localDescsQueue (<unidirectional association>)
	  relation 3132290 --->
	    a role_name "localDescsQueue" init_value "
            new ReferenceQueue<>()" class_relation const_relation private
	      comment " queue for WeakReferences to local classes 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 3132290 // localDescsQueue (<unidirectional association>)
	    b parent class_ref 130946 // ReferenceQueue
	end

	classrelation 3132418 // reflectorsQueue (<unidirectional association>)
	  relation 3132418 --->
	    a role_name "reflectorsQueue" init_value "
            new ReferenceQueue<>()" class_relation const_relation private
	      comment " queue for WeakReferences to field reflectors keys 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 3132418 // reflectorsQueue (<unidirectional association>)
	    b parent class_ref 130946 // ReferenceQueue
	end
      end

      class 925698 "FieldReflectorKey"
	visibility private 
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3136258 // <realization>
	  relation 3136258 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3136258 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	classrelation 3136386 // sigs (<unidirectional association>)
	  relation 3136386 --->
	    a role_name "sigs" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3136386 // sigs (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1650434 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1650562 "nullClass"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 6900098 "FieldReflectorKey"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "cl" type class_ref 130818 // Class
	    param inout name "fields" type class_ref 193154 // ObjectStreamField
	  multiplicity "[]"
	    param inout name "queue" type class_ref 130946 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}, ${t2}<Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6900226 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6900354 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3132546 // cl (<unidirectional association>)
	relation 3132546 --->
	  a role_name "cl" private
	    comment " class associated with this descriptor (if any) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3132546 // cl (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3132674 // name (<unidirectional association>)
	relation 3132674 --->
	  a role_name "name" private
	    comment " name of class represented by this descriptor 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3132674 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3132802 // suid (<unidirectional association>)
	relation 3132802 --->
	  a role_name "suid" volatile private
	    comment " serialVersionUID of represented class (null if not computed yet) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3132802 // suid (<unidirectional association>)
	  b parent class_ref 251778 // Long
      end

      attribute 1648386 "isProxy"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if represents dynamic proxy class 
"
      end

      attribute 1648514 "isEnum"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if represents enum type 
"
      end

      attribute 1648642 "serializable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if represented class implements Serializable 
"
      end

      attribute 1648770 "externalizable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if represented class implements Externalizable 
"
      end

      attribute 1648898 "hasWriteObjectData"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if desc has data written by class-defined writeObject method 
"
      end

      attribute 1649026 "hasBlockExternalData"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "true if desc has externalizable data written in block data format; this
must be true by default to accommodate ObjectInputStream subclasses which
override readClassDescriptor() to return class descriptors obtained from
ObjectStreamClass.lookup() (see 4461737)

"
      end

      class 925826 "ExceptionInfo"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3132930 // className (<unidirectional association>)
	  relation 3132930 --->
	    a role_name "className" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3132930 // className (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3133058 // message (<unidirectional association>)
	  relation 3133058 --->
	    a role_name "message" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3133058 // message (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 6889218 "ExceptionInfo"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "cn" type class_ref 128130 // String
	    param inout name "msg" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6889346 "newInvalidClassException"
	  package return_type class_ref 171906 // InvalidClassException
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns (does not throw) an InvalidClassException instance created
from the information in this object, suitable for being thrown by
the caller.
"
	end
      end

      classrelation 3133186 // resolveEx (<unidirectional association>)
	relation 3133186 --->
	  a role_name "resolveEx" private
	    comment " exception (if any) thrown while attempting to resolve class 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3133186 // resolveEx (<unidirectional association>)
	  b parent class_ref 169730 // ClassNotFoundException
      end

      classrelation 3133314 // deserializeEx (<unidirectional association>)
	relation 3133314 --->
	  a role_name "deserializeEx" private
	    comment " exception (if any) to throw if non-enum deserialization attempted 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3133314 // deserializeEx (<unidirectional association>)
	  b parent class_ref 925826 // ExceptionInfo
      end

      classrelation 3133442 // serializeEx (<unidirectional association>)
	relation 3133442 --->
	  a role_name "serializeEx" private
	    comment " exception (if any) to throw if non-enum serialization attempted 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3133442 // serializeEx (<unidirectional association>)
	  b parent class_ref 925826 // ExceptionInfo
      end

      classrelation 3133570 // defaultSerializeEx (<unidirectional association>)
	relation 3133570 --->
	  a role_name "defaultSerializeEx" private
	    comment " exception (if any) to throw if default serialization attempted 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3133570 // defaultSerializeEx (<unidirectional association>)
	  b parent class_ref 925826 // ExceptionInfo
      end

      classrelation 3133698 // fields (<unidirectional association>)
	relation 3133698 --->
	  a role_name "fields" multiplicity "[]" private
	    comment " serializable fields 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3133698 // fields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 1649154 "primDataSize"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " aggregate marshalled size of primitive fields 
"
      end

      attribute 1649282 "numObjFields"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of non-primitive fields 
"
      end

      class 925954 "FieldReflector"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1649666 "unsafe"
	  class_attribute const_attribute private explicit_type "Unsafe"
	  init_value " Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " handle for performing unsafe operations 
"
	end

	classrelation 3136002 // fields (<unidirectional association>)
	  relation 3136002 --->
	    a role_name "fields" multiplicity "[]" const_relation private
	      comment " fields to operate on 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3136002 // fields (<unidirectional association>)
	    b parent class_ref 193154 // ObjectStreamField
	end

	attribute 1649794 "numPrimFields"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " number of primitive fields 
"
	end

	attribute 1649922 "readKeys"
	  const_attribute private explicit_type "long"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " unsafe field keys for reading fields - may contain dupes 
"
	end

	attribute 1650050 "writeKeys"
	  const_attribute private explicit_type "long"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " unsafe fields keys for writing fields - no dupes 
"
	end

	attribute 1650178 "offsets"
	  const_attribute private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " field data offsets 
"
	end

	attribute 1650306 "typeCodes"
	  const_attribute private explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " field type codes 
"
	end

	classrelation 3136130 // types (<unidirectional association>)
	  relation 3136130 --->
	    a role_name "types" multiplicity "[]" const_relation private
	      comment " field types 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	      classrelation_ref 3136130 // types (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 6899202 "FieldReflector"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "fields" type class_ref 193154 // ObjectStreamField
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs FieldReflector capable of setting/getting values from the
subset of fields whose ObjectStreamFields contain non-null
reflective Field objects.  ObjectStreamFields with null Fields are
treated as filler, for which get operations return default values
and set operations discard given values.
"
	end

	operation 6899330 "getFields"
	  package return_type class_ref 193154 // ObjectStreamField
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns list of ObjectStreamFields representing fields operated on
by this reflector.  The shared/unshared values and Field objects
contained by ObjectStreamFields in the list reflect their bindings
to locally defined serializable fields.
"
	end

	operation 6899458 "getPrimFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 129538 // Object
	    param inout name "buf" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Fetches the serializable primitive field values of object obj and
marshals them into byte array buf starting at offset 0.  The caller
is responsible for ensuring that obj is of the proper type.
"
	end

	operation 6899586 "setPrimFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 129538 // Object
	    param inout name "buf" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the serializable primitive fields of object obj using values
unmarshalled from byte array buf starting at offset 0.  The caller
is responsible for ensuring that obj is of the proper type.
"
	end

	operation 6899714 "getObjFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 129538 // Object
	    param inout name "vals" type class_ref 129538 // Object
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Fetches the serializable object field values of object obj and
stores them in array vals starting at offset 0.  The caller is
responsible for ensuring that obj is of the proper type.
"
	end

	operation 6899842 "setObjFieldValues"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 129538 // Object
	    param inout name "vals" type class_ref 129538 // Object
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the serializable object fields of object obj using values from
array vals starting at offset 0.  The caller is responsible for
ensuring that obj is of the proper type; however, attempts to set a
field with a value of the wrong type will trigger an appropriate
ClassCastException.
"
	end
      end

      classrelation 3133826 // fieldRefl (<unidirectional association>)
	relation 3133826 --->
	  a role_name "fieldRefl" private
	    comment " reflector for setting/getting serializable field values 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3133826 // fieldRefl (<unidirectional association>)
	  b parent class_ref 925954 // FieldReflector
      end

      class 926082 "ClassDataSlot"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3135490 // desc (<unidirectional association>)
	  relation 3135490 --->
	    a role_name "desc" const_relation package
	      comment " class descriptor \"occupying\" this slot 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3135490 // desc (<unidirectional association>)
	    b parent class_ref 170242 // ObjectStreamClass
	end

	attribute 1649538 "hasData"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " true if serialized form includes data for this slot's descriptor 
"
	end

	operation 6895362 "ClassDataSlot"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "desc" type class_ref 170242 // ObjectStreamClass
	    param inout name "hasData" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3133954 // dataLayout (<unidirectional association>)
	relation 3133954 --->
	  a role_name "dataLayout" multiplicity "[]" volatile private
	    comment " data layout of serialized objects described by this class desc 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3133954 // dataLayout (<unidirectional association>)
	  b parent class_ref 926082 // ClassDataSlot
      end

      classrelation 3134082 // cons (<unidirectional association>)
	relation 3134082 --->
	  a role_name "cons" private
	    comment " serialization-appropriate constructor, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3134082 // cons (<unidirectional association>)
	  b parent class_ref 189186 // Constructor
      end

      classrelation 3134210 // writeObjectMethod (<unidirectional association>)
	relation 3134210 --->
	  a role_name "writeObjectMethod" private
	    comment " class-defined writeObject method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3134210 // writeObjectMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3134338 // readObjectMethod (<unidirectional association>)
	relation 3134338 --->
	  a role_name "readObjectMethod" private
	    comment " class-defined readObject method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3134338 // readObjectMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3134466 // readObjectNoDataMethod (<unidirectional association>)
	relation 3134466 --->
	  a role_name "readObjectNoDataMethod" private
	    comment " class-defined readObjectNoData method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3134466 // readObjectNoDataMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3134594 // writeReplaceMethod (<unidirectional association>)
	relation 3134594 --->
	  a role_name "writeReplaceMethod" private
	    comment " class-defined writeReplace method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3134594 // writeReplaceMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3134722 // readResolveMethod (<unidirectional association>)
	relation 3134722 --->
	  a role_name "readResolveMethod" private
	    comment " class-defined readResolve method, or null if none 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3134722 // readResolveMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3134850 // localDesc (<unidirectional association>)
	relation 3134850 --->
	  a role_name "localDesc" private
	    comment " local class descriptor for represented class (may point to self) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3134850 // localDesc (<unidirectional association>)
	  b parent class_ref 170242 // ObjectStreamClass
      end

      classrelation 3134978 // superDesc (<unidirectional association>)
	relation 3134978 --->
	  a role_name "superDesc" private
	    comment " superclass descriptor appearing in stream 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3134978 // superDesc (<unidirectional association>)
	  b parent class_ref 170242 // ObjectStreamClass
      end

      attribute 1649410 "initialized"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if, and only if, the object has been correctly initialized 
"
      end

      operation 6889474 "initNative"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Initializes native code.
"
      end

      extra_member 155906 "initialization"
	
	cpp "" ""
	java "  static {
        initNative();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6889602 "lookup"
	class_operation public return_type class_ref 170242 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the descriptor for a class that can be serialized.  Creates an
ObjectStreamClass instance if one does not exist yet for class. Null is
returned if the specified class does not implement java.io.Serializable
or java.io.Externalizable.

@param   cl class for which to get the descriptor
@return  the class descriptor for the specified class
"
      end

      operation 6889730 "lookupAny"
	class_operation public return_type class_ref 170242 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descriptor for any class, regardless of whether it
implements {@link Serializable}.

@param        cl class for which to get the descriptor
@return       the class descriptor for the specified class
@since 1.6
"
      end

      operation 6889858 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the class described by this descriptor.
This method returns the name of the class in the format that
is used by the {@link Class#getName} method.

@return a string representing the name of the class
"
      end

      operation 6889986 "getSerialVersionUID"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the serialVersionUID for this class.  The serialVersionUID
defines a set of classes all with the same name that have evolved from a
common root class and agree to be serialized and deserialized using a
common format.  NonSerializable classes have a serialVersionUID of 0L.

@return  the SUID of the class described by this descriptor
"
      end

      operation 6890114 "forClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Return the class in the local VM that this version is mapped to.  Null
is returned if there is no corresponding local class.

@return  the <code>Class</code> instance that this descriptor represents
"
      end

      operation 6890242 "getFields"
	public return_type class_ref 193154 // ObjectStreamField
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of the fields of this serializable class.

@return  an array containing an element for each persistent field of
         this class. Returns an array of length zero if there are no
         fields.
@since 1.2
"
      end

      operation 6890370 "getField"
	public return_type class_ref 193154 // ObjectStreamField
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the field of this class by name.

@param   name the name of the data field to look for
@return  The ObjectStreamField object of the named field or null if
         there is no such named field.
"
      end

      operation 6890498 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string describing this ObjectStreamClass.
"
      end

      operation 6890626 "lookup"
	class_operation package return_type class_ref 170242 // ObjectStreamClass
	nparams 2
	  param inout name "cl" type class_ref 130818 // Class
	  param inout name "all" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up and returns class descriptor for given class, or null if class
is non-serializable and \"all\" is set to false.

@param   cl class to look up
@param   all if true, return descriptors for all classes; if false, only
         return descriptors for serializable classes
"
      end

      class 926210 "EntryFuture"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3135106 // unset (<unidirectional association>)
	  relation 3135106 --->
	    a role_name "unset" init_value " new Object()" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3135106 // unset (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3135234 // owner (<unidirectional association>)
	  relation 3135234 --->
	    a role_name "owner" init_value " Thread.currentThread()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3135234 // owner (<unidirectional association>)
	    b parent class_ref 128642 // Thread
	end

	classrelation 3135362 // entry (<unidirectional association>)
	  relation 3135362 --->
	    a role_name "entry" init_value " unset" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3135362 // entry (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 6890754 "set"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "entry" type class_ref 129538 // Object
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Attempts to set the value contained by this EntryFuture.  If the
EntryFuture's value has not been set already, then the value is
saved, any callers blocked in the get() method are notified, and
true is returned.  If the value has already been set, then no saving
or notification occurs, and false is returned.
"
	end

	operation 6890882 "get"
	  package return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the value contained by this EntryFuture, blocking if
necessary until a value is set.
"
	end

	operation 6891010 "getOwner"
	  package return_type class_ref 128642 // Thread
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the thread that created this EntryFuture.
"
	end
      end

      operation 6891138 "ObjectStreamClass"
	private explicit_return_type ""
	nparams 1
	  param in name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates local class descriptor representing given class.
"
      end

      operation 6891266 "ObjectStreamClass"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates blank class descriptor which should be initialized via a
subsequent call to initProxy(), initNonProxy() or readNonProxy().
"
      end

      operation 6891394 "initProxy"
	package explicit_return_type "void"
	nparams 3
	  param inout name "cl" type class_ref 130818 // Class
	  param inout name "resolveEx" type class_ref 169730 // ClassNotFoundException
	  param inout name "superDesc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes class descriptor representing a proxy class.
"
      end

      operation 6891522 "initNonProxy"
	package explicit_return_type "void"
	nparams 4
	  param inout name "model" type class_ref 170242 // ObjectStreamClass
	  param inout name "cl" type class_ref 130818 // Class
	  param inout name "resolveEx" type class_ref 169730 // ClassNotFoundException
	  param inout name "superDesc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes class descriptor representing a non-proxy class.
"
      end

      operation 6891650 "readNonProxy"
	package explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads non-proxy class descriptor information from given input stream.
The resulting class descriptor is not fully functional; it can only be
used as input to the ObjectInputStream.resolveClass() and
ObjectStreamClass.initNonProxy() methods.
"
      end

      operation 6891778 "writeNonProxy"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes non-proxy class descriptor information to given output stream.
"
      end

      operation 6891906 "getResolveException"
	package return_type class_ref 169730 // ClassNotFoundException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ClassNotFoundException (if any) thrown while attempting to
resolve local class corresponding to this class descriptor.
"
      end

      operation 6892034 "requireInitialized"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws InternalError if not initialized.
"
      end

      operation 6892162 "checkDeserialize"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an InvalidClassException if object instances referencing this
class descriptor should not be allowed to deserialize.  This method does
not apply to deserialization of enum constants.
"
      end

      operation 6892290 "checkSerialize"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an InvalidClassException if objects whose class is represented by
this descriptor should not be allowed to serialize.  This method does
not apply to serialization of enum constants.
"
      end

      operation 6892418 "checkDefaultSerialize"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an InvalidClassException if objects whose class is represented by
this descriptor should not be permitted to use default serialization
(e.g., if the class declares serializable fields that do not correspond
to actual fields, and hence must use the GetField API).  This method
does not apply to deserialization of enum constants.
"
      end

      operation 6892546 "getSuperDesc"
	package return_type class_ref 170242 // ObjectStreamClass
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns superclass descriptor.  Note that on the receiving side, the
superclass descriptor may be bound to a class that is not a superclass
of the subclass descriptor's bound class.
"
      end

      operation 6892674 "getLocalDesc"
	package return_type class_ref 170242 // ObjectStreamClass
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"local\" class descriptor for the class associated with this
class descriptor (i.e., the result of
ObjectStreamClass.lookup(this.forClass())) or null if there is no class
associated with this descriptor.
"
      end

      operation 6892802 "getFields"
	package return_type class_ref 193154 // ObjectStreamField
	nparams 1
	  param inout name "copy" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns arrays of ObjectStreamFields representing the serializable
fields of the represented class.  If copy is true, a clone of this class
descriptor's field array is returned, otherwise the array itself is
returned.
"
      end

      operation 6892930 "getField"
	package return_type class_ref 193154 // ObjectStreamField
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up a serializable field of the represented class by name and type.
A specified type of null matches all types, Object.class matches all
non-primitive types, and any other non-null type matches assignable
types only.  Returns matching field, or null if no match found.
"
      end

      operation 6893058 "isProxy"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents a dynamic proxy class, false
otherwise.
"
      end

      operation 6893186 "isEnum"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents an enum type, false
otherwise.
"
      end

      operation 6893314 "isExternalizable"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class implements Externalizable, false
otherwise.
"
      end

      operation 6893442 "isSerializable"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class implements Serializable, false
otherwise.
"
      end

      operation 6893570 "hasBlockExternalData"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents externalizable class that
has written its data in 1.2 (block data) format, false otherwise.
"
      end

      operation 6893698 "hasWriteObjectData"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if class descriptor represents serializable (but not
externalizable) class which has written its data via a custom
writeObject() method, false otherwise.
"
      end

      operation 6893826 "isInstantiable"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable/externalizable and can
be instantiated by the serialization runtime--i.e., if it is
externalizable and defines a public no-arg constructor, or if it is
non-externalizable and its first non-serializable superclass defines an
accessible no-arg constructor.  Otherwise, returns false.
"
      end

      operation 6893954 "hasWriteObjectMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable (but not
externalizable) and defines a conformant writeObject method.  Otherwise,
returns false.
"
      end

      operation 6894082 "hasReadObjectMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable (but not
externalizable) and defines a conformant readObject method.  Otherwise,
returns false.
"
      end

      operation 6894210 "hasReadObjectNoDataMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable (but not
externalizable) and defines a conformant readObjectNoData method.
Otherwise, returns false.
"
      end

      operation 6894338 "hasWriteReplaceMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable or externalizable and
defines a conformant writeReplace method.  Otherwise, returns false.
"
      end

      operation 6894466 "hasReadResolveMethod"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if represented class is serializable or externalizable and
defines a conformant readResolve method.  Otherwise, returns false.
"
      end

      operation 6894594 "newInstance"
	package return_type class_ref 129538 // Object
	nparams 0
	nexceptions 3
	  exception class_ref 193282 // InstantiationException
	  exception class_ref 193410 // InvocationTargetException
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the represented class.  If the class is
externalizable, invokes its public no-arg constructor; otherwise, if the
class is serializable, invokes the no-arg constructor of the first
non-serializable superclass.  Throws UnsupportedOperationException if
this class descriptor is not associated with a class, if the associated
class is non-serializable or if the appropriate no-arg constructor is
inaccessible/unavailable.
"
      end

      operation 6894722 "invokeWriteObject"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the writeObject method of the represented serializable class.
Throws UnsupportedOperationException if this class descriptor is not
associated with a class, or if the class is externalizable,
non-serializable or does not define writeObject.
"
      end

      operation 6894850 "invokeReadObject"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 3
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the readObject method of the represented serializable class.
Throws UnsupportedOperationException if this class descriptor is not
associated with a class, or if the class is externalizable,
non-serializable or does not define readObject.
"
      end

      operation 6894978 "invokeReadObjectNoData"
	package explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the readObjectNoData method of the represented serializable
class.  Throws UnsupportedOperationException if this class descriptor is
not associated with a class, or if the class is externalizable,
non-serializable or does not define readObjectNoData.
"
      end

      operation 6895106 "invokeWriteReplace"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the writeReplace method of the represented serializable class and
returns the result.  Throws UnsupportedOperationException if this class
descriptor is not associated with a class, or if the class is
non-serializable or does not define writeReplace.
"
      end

      operation 6895234 "invokeReadResolve"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the readResolve method of the represented serializable class and
returns the result.  Throws UnsupportedOperationException if this class
descriptor is not associated with a class, or if the class is
non-serializable or does not define readResolve.
"
      end

      operation 6895490 "getClassDataLayout"
	package return_type class_ref 926082 // ClassDataSlot
	nparams 0
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns array of ClassDataSlot instances representing the data layout
(including superclass data) for serialized objects described by this
class descriptor.  ClassDataSlots are ordered by inheritance with those
containing \"higher\" superclasses appearing first.  The final
ClassDataSlot contains a reference to this descriptor.
"
      end

      operation 6895618 "getClassDataLayout0"
	private return_type class_ref 926082 // ClassDataSlot
	nparams 0
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6895746 "getPrimDataSize"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns aggregate size (in bytes) of marshalled primitive field values
for represented class.
"
      end

      operation 6895874 "getNumObjFields"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns number of non-primitive serializable fields of represented
class.
"
      end

      operation 6896002 "getPrimFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetches the serializable primitive field values of object obj and
marshals them into byte array buf starting at offset 0.  It is the
responsibility of the caller to ensure that obj is of the proper type if
non-null.
"
      end

      operation 6896130 "setPrimFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the serializable primitive fields of object obj using values
unmarshalled from byte array buf starting at offset 0.  It is the
responsibility of the caller to ensure that obj is of the proper type if
non-null.
"
      end

      operation 6896258 "getObjFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "vals" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetches the serializable object field values of object obj and stores
them in array vals starting at offset 0.  It is the responsibility of
the caller to ensure that obj is of the proper type if non-null.
"
      end

      operation 6896386 "setObjFieldValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "vals" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the serializable object fields of object obj using values from
array vals starting at offset 0.  It is the responsibility of the caller
to ensure that obj is of the proper type if non-null.
"
      end

      operation 6896514 "computeFieldOffsets"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates and sets serializable field offsets, as well as primitive
data size and object field count totals.  Throws InvalidClassException
if fields are illegally ordered.
"
      end

      operation 6896642 "getVariantFor"
	private return_type class_ref 170242 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If given class is the same as the class associated with this class
descriptor, returns reference to this class descriptor.  Otherwise,
returns variant of this class descriptor bound to given class.
"
      end

      operation 6896770 "getExternalizableConstructor"
	class_operation private return_type class_ref 189186 // Constructor
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns public no-arg constructor of given class, or null if none found.
Access checks are disabled on the returned constructor (if any), since
the defining class may still be non-public.
"
      end

      operation 6896898 "getSerializableConstructor"
	class_operation private return_type class_ref 189186 // Constructor
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns subclass-accessible no-arg constructor of first non-serializable
superclass, or null if none found.  Access checks are disabled on the
returned constructor (if any).
"
      end

      operation 6897026 "getInheritableMethod"
	class_operation private return_type class_ref 137858 // Method
	nparams 4
	  param inout name "cl" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "argTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "returnType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?>[] ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns non-static, non-abstract method with given signature provided it
is defined by or accessible (via inheritance) by the given class, or
null if no match found.  Access checks are disabled on the returned
method (if any).
"
      end

      operation 6897154 "getPrivateMethod"
	class_operation private return_type class_ref 137858 // Method
	nparams 4
	  param inout name "cl" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "argTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "returnType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?>[] ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns non-static private method with given signature defined by given
class, or null if none found.  Access checks are disabled on the
returned method (if any).
"
      end

      operation 6897282 "packageEquals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "cl1" type class_ref 130818 // Class
	  param inout name "cl2" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if classes are defined in the same runtime package, false
otherwise.
"
      end

      operation 6897410 "getPackageName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns package name of given class.
"
      end

      operation 6897538 "classNamesEqual"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "name1" type class_ref 128130 // String
	  param inout name "name2" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares class names for equality, ignoring package names.  Returns true
if class names equal, false otherwise.
"
      end

      operation 6897666 "getClassSignature"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns JVM type signature for given class.
"
      end

      operation 6897794 "getMethodSignature"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "paramTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "retType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns JVM type signature for given list of parameters and return type.
"
      end

      operation 6897922 "throwMiscException"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "th" type class_ref 129922 // Throwable
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for throwing an exception that is either a
RuntimeException, Error, or of some unexpected type (in which case it is
wrapped inside an IOException).
"
      end

      operation 6898050 "getSerialFields"
	class_operation private return_type class_ref 193154 // ObjectStreamField
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ObjectStreamField array describing the serializable fields of
the given class.  Serializable fields backed by an actual field of the
class are represented by ObjectStreamFields with corresponding non-null
Field objects.  Throws InvalidClassException if the (explicitly
declared) serializable fields are invalid.
"
      end

      operation 6898178 "getDeclaredSerialFields"
	class_operation private return_type class_ref 193154 // ObjectStreamField
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns serializable fields of given class as defined explicitly by a
\"serialPersistentFields\" field, or null if no appropriate
\"serialPersistentFields\" field is defined.  Serializable fields backed
by an actual field of the class are represented by ObjectStreamFields
with corresponding non-null Field objects.  For compatibility with past
releases, a \"serialPersistentFields\" field with a null value is
considered equivalent to not declaring \"serialPersistentFields\".  Throws
InvalidClassException if the declared serializable fields are
invalid--e.g., if multiple fields share the same name.
"
      end

      operation 6898306 "getDefaultSerialFields"
	class_operation private return_type class_ref 193154 // ObjectStreamField
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns array of ObjectStreamFields corresponding to all non-static
non-transient fields declared by given class.  Each ObjectStreamField
contains a Field object for the field it represents.  If no default
serializable fields exist, NO_FIELDS is returned.
"
      end

      operation 6898434 "getDeclaredSUID"
	class_operation private return_type class_ref 251778 // Long
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns explicit serial version UID value declared by given class, or
null if none.
"
      end

      operation 6898562 "computeDefaultSUID"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the default serial version UID value for the given class.
"
      end

      operation 6898690 "hasStaticInitializer"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws};
s"
	
	
	
	comment "Returns true if the given class defines a static initializer method,
false otherwise.
"
      end

      class 926338 "MemberSignature"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3135618 // member (<unidirectional association>)
	  relation 3135618 --->
	    a role_name "member" const_relation public
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3135618 // member (<unidirectional association>)
	    b parent class_ref 194690 // Member
	end

	classrelation 3135746 // name (<unidirectional association>)
	  relation 3135746 --->
	    a role_name "name" const_relation public
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3135746 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3135874 // signature (<unidirectional association>)
	  relation 3135874 --->
	    a role_name "signature" const_relation public
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3135874 // signature (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 6898818 "MemberSignature"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "field" type class_ref 189698 // Field
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6898946 "MemberSignature"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "cons" type class_ref 189186 // Constructor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6899074 "MemberSignature"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "meth" type class_ref 137858 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6899970 "getReflector"
	class_operation private return_type class_ref 925954 // FieldReflector
	nparams 2
	  param inout name "fields" type class_ref 193154 // ObjectStreamField
	multiplicity "[]"
	  param inout name "localDesc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matches given set of serializable fields with serializable fields
described by the given local class descriptor, and returns a
FieldReflector instance capable of setting/getting values from the
subset of fields that match (non-matching fields are treated as filler,
for which get operations return default values and set operations
discard given values).  Throws InvalidClassException if unresolvable
type conflicts exist between the two sets of fields.
"
      end

      operation 6900482 "matchFields"
	class_operation private return_type class_ref 193154 // ObjectStreamField
	nparams 2
	  param inout name "fields" type class_ref 193154 // ObjectStreamField
	multiplicity "[]"
	  param inout name "localDesc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 171906 // InvalidClassException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Matches given set of serializable fields with serializable fields
obtained from the given local class descriptor (which contain bindings
to reflective Field objects).  Returns list of ObjectStreamFields in
which each ObjectStreamField whose signature matches that of a local
field contains a Field object for that field; unmatched
ObjectStreamFields contain null Field objects.  Shared/unshared settings
of the returned ObjectStreamFields also reflect those of matched local
ObjectStreamFields.  Throws InvalidClassException if unresolvable type
conflicts exist between the two sets of fields.
"
      end

      operation 6900610 "processQueue"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "queue" type class_ref 130946 // ReferenceQueue
	  param inout name "map" type class_ref 130690 // ConcurrentMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Class<?>> ${p0}, ${t1}<? extends
                             WeakReference<Class<?>>, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from the specified map any keys that have been enqueued
on the specified reference queue.
"
      end
    end

    class 171010 "SerialCallbackContext"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Context during upcalls from object stream to class-defined
readObject/writeObject methods.
Holds object currently being deserialized and descriptor for current class.

This context keeps track of the thread it was constructed on, and allows
only a single call of defaultReadObject, readFields, defaultWriteObject
or writeFields which must be invoked on the same thread before the class's
readObject/writeObject method has returned.
If not set to the current thread, the getObj method throws NotActiveException.
"
      classrelation 3141634 // obj (<unidirectional association>)
	relation 3141634 --->
	  a role_name "obj" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3141634 // obj (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3141762 // desc (<unidirectional association>)
	relation 3141762 --->
	  a role_name "desc" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3141762 // desc (<unidirectional association>)
	  b parent class_ref 170242 // ObjectStreamClass
      end

      classrelation 3141890 // thread (<unidirectional association>)
	relation 3141890 --->
	  a role_name "thread" private
	    comment "
Thread this context is in use by.
As this only works in one thread, we do not need to worry about thread-safety.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3141890 // thread (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      operation 6932226 "SerialCallbackContext"
	public explicit_return_type ""
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6932354 "getObj"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 171522 // NotActiveException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6932482 "getDesc"
	public return_type class_ref 170242 // ObjectStreamClass
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6932610 "check"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171522 // NotActiveException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6932738 "checkAndSetUsed"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171522 // NotActiveException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6932866 "setUsed"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 171394 "ObjectInputValidation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback interface to allow validation of objects within a graph.
Allows an object to be called when a complete graph of objects has
been deserialized.

@author  unascribed
@see     ObjectInputStream
@see     ObjectInputStream#registerValidation(java.io.ObjectInputValidation, int)
@since   JDK1.1
"
      operation 6889090 "validateObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the object.

@exception InvalidObjectException If the object cannot validate itself.
"
      end
    end

    class 171522 "NotActiveException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when serialization or deserialization is not active.

@author  unascribed
@since   JDK1.1
"
      classrelation 3131394 // <generalisation>
	relation 3131394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3131394 // <generalisation>
	  b parent class_ref 261506 // ObjectStreamException
      end

      attribute 1647874 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3893467273049808895L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6888578 "NotActiveException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to create a new NotActiveException with the reason given.

@param reason  a String describing the reason for the exception.
"
      end

      operation 6888706 "NotActiveException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to create a new NotActiveException without a reason.
"
      end
    end

    class 171650 "InvalidObjectException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates that one or more deserialized objects failed validation
tests.  The argument should provide the reason for the failure.

@see ObjectInputValidation
@since JDK1.1

@author  unascribed
@since   JDK1.1
"
      classrelation 3130882 // <generalisation>
	relation 3130882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3130882 // <generalisation>
	  b parent class_ref 261506 // ObjectStreamException
      end

      attribute 1646338 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3233174318281839583L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6885890 "InvalidObjectException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvalidObjectException</code>.
@param reason Detailed message explaining the reason for the failure.

@see ObjectInputValidation
"
      end
    end

    class 171778 "StreamCorruptedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when control information that was read from an object stream
violates internal consistency checks.

@author  unascribed
@since   JDK1.1
"
      classrelation 3142274 // <generalisation>
	relation 3142274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3142274 // <generalisation>
	  b parent class_ref 261506 // ObjectStreamException
      end

      attribute 1655554 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8983558202217591746L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6933250 "StreamCorruptedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a StreamCorruptedException and list a reason why thrown.

@param reason  String describing the reason for the exception.
"
      end

      operation 6933378 "StreamCorruptedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a StreamCorruptedException and list no reason why thrown.
"
      end
    end

    class 171906 "InvalidClassException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when the Serialization runtime detects one of the following
problems with a Class.
<UL>
<LI> The serial version of the class does not match that of the class
     descriptor read from the stream
<LI> The class contains unknown datatypes
<LI> The class does not have an accessible no-arg constructor
</UL>

@author  unascribed
@since   JDK1.1
"
      classrelation 3130626 // <generalisation>
	relation 3130626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3130626 // <generalisation>
	  b parent class_ref 261506 // ObjectStreamException
      end

      attribute 1646210 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4333316296251054416L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3130754 // classname (<unidirectional association>)
	relation 3130754 --->
	  a role_name "classname" public
	    comment "
Name of the invalid class.

@serial Name of the invalid class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3130754 // classname (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6885506 "InvalidClassException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an InvalidClassException for the reason specified.

@param reason  String describing the reason for the exception.
"
      end

      operation 6885634 "InvalidClassException"
	public explicit_return_type ""
	nparams 2
	  param inout name "cname" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidClassException object.

@param cname   a String naming the invalid class.
@param reason  a String describing the reason for the exception.
"
      end

      operation 6885762 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce the message and include the classname, if present.
"
      end
    end

    class 172162 "Externalizable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Only the identity of the class of an Externalizable instance is
written in the serialization stream and it is the responsibility
of the class to save and restore the contents of its instances.

The writeExternal and readExternal methods of the Externalizable
interface are implemented by a class to give the class complete
control over the format and contents of the stream for an object
and its supertypes. These methods must explicitly
coordinate with the supertype to save its state. These methods supersede
customized implementations of writeObject and readObject methods.<br>

Object Serialization uses the Serializable and Externalizable
interfaces.  Object persistence mechanisms can use them as well.  Each
object to be stored is tested for the Externalizable interface. If
the object supports Externalizable, the writeExternal method is called. If the
object does not support Externalizable and does implement
Serializable, the object is saved using
ObjectOutputStream. <br> When an Externalizable object is
reconstructed, an instance is created using the public no-arg
constructor, then the readExternal method called.  Serializable
objects are restored by reading them from an ObjectInputStream.<br>

An Externalizable instance can designate a substitution object via
the writeReplace and readResolve methods documented in the Serializable
interface.<br>

@author  unascribed
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@see java.io.ObjectOutput
@see java.io.ObjectInput
@see java.io.Serializable
@since   JDK1.1
"
      classrelation 990210 // <generalisation>
	relation 990210 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 990210 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      operation 3016834 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The object implements the writeExternal method to save its contents
by calling the methods of DataOutput for its primitive values or
calling the writeObject method of ObjectOutput for objects, strings,
and arrays.

@serialData Overriding methods should use this tag to describe
            the data layout of this Externalizable object.
            List the sequence of element types and, if possible,
            relate the element to a public/protected field and/or
            method of this Externalizable class.

@param out the stream to write the object to
@exception IOException Includes any I/O exceptions that may occur
"
      end

      operation 3016962 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The object implements the readExternal method to restore its
contents by calling the methods of DataInput for primitive
types and readObject for objects, strings and arrays.  The
readExternal method must read the values in the same sequence
and with the same types as were written by writeExternal.

@param in the stream to read data from in order to restore the object
@exception IOException if I/O errors occur
@exception ClassNotFoundException If the class for an object being
             restored cannot be found.
"
      end
    end

    class 172930 "DataInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A data input stream lets an application read primitive Java data
types from an underlying input stream in a machine-independent
way. An application uses a data output stream to write data that
can later be read by a data input stream.
<p>
DataInputStream is not necessarily safe for multithreaded access.
Thread safety is optional and is the responsibility of users of
methods in this class.

@author  Arthur van Hoff
@see     java.io.DataOutputStream
@since   JDK1.0
"
      classrelation 1166466 // <generalisation>
	relation 1166466 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1166466 // <generalisation>
	  b parent class_ref 577922 // FilterInputStream
      end

      classrelation 1166594 // <realization>
	relation 1166594 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1166594 // <realization>
	  b parent class_ref 169602 // DataInput
      end

      operation 3603330 "DataInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DataInputStream that uses the specified
underlying InputStream.

@param  in   the specified input stream
"
      end

      attribute 762242 "bytearr"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[80]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "working arrays initialized on demand by readUTF

"
      end

      attribute 762370 "chararr"
	private explicit_type "char"
	multiplicity "[]"
	init_value " new char[80]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3603458 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads some number of bytes from the contained input stream and
stores them into the buffer array <code>b</code>. The number of
bytes actually read is returned as an integer. This method blocks
until input data is available, end of file is detected, or an
exception is thrown.

<p>If <code>b</code> is null, a <code>NullPointerException</code> is
thrown. If the length of <code>b</code> is zero, then no bytes are
read and <code>0</code> is returned; otherwise, there is an attempt
to read at least one byte. If no byte is available because the
stream is at end of file, the value <code>-1</code> is returned;
otherwise, at least one byte is read and stored into <code>b</code>.

<p>The first byte read is stored into element <code>b[0]</code>, the
next one into <code>b[1]</code>, and so on. The number of bytes read
is, at most, equal to the length of <code>b</code>. Let <code>k</code>
be the number of bytes actually read; these bytes will be stored in
elements <code>b[0]</code> through <code>b[k-1]</code>, leaving
elements <code>b[k]</code> through <code>b[b.length-1]</code>
unaffected.

<p>The <code>read(b)</code> method has the same effect as:
<blockquote><pre>
read(b, 0, b.length)
</pre></blockquote>

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end
            of the stream has been reached.
@exception  IOException if the first byte cannot be read for any reason
other than end of file, the stream has been closed and the underlying
input stream does not support reading after close, or another I/O
error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#read(byte[], int, int)
"
      end

      operation 3603586 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from the contained
input stream into an array of bytes.  An attempt is made to read
as many as <code>len</code> bytes, but a smaller number may be read,
possibly zero. The number of bytes actually read is returned as an
integer.

<p> This method blocks until input data is available, end of file is
detected, or an exception is thrown.

<p> If <code>len</code> is zero, then no bytes are read and
<code>0</code> is returned; otherwise, there is an attempt to read at
least one byte. If no byte is available because the stream is at end of
file, the value <code>-1</code> is returned; otherwise, at least one
byte is read and stored into <code>b</code>.

<p> The first byte read is stored into element <code>b[off]</code>, the
next one into <code>b[off+1]</code>, and so on. The number of bytes read
is, at most, equal to <code>len</code>. Let <i>k</i> be the number of
bytes actually read; these bytes will be stored in elements
<code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,
leaving elements <code>b[off+</code><i>k</i><code>]</code> through
<code>b[off+len-1]</code> unaffected.

<p> In every case, elements <code>b[0]</code> through
<code>b[off]</code> and elements <code>b[off+len]</code> through
<code>b[b.length-1]</code> are unaffected.

@param      b     the buffer into which the data is read.
@param off the start offset in the destination array <code>b</code>
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end
            of the stream has been reached.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
@exception  IOException if the first byte cannot be read for any reason
other than end of file, the stream has been closed and the underlying
input stream does not support reading after close, or another I/O
error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#read(byte[], int, int)
"
      end

      operation 3603714 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readFully</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@param      b   the buffer into which the data is read.
@exception  EOFException  if this input stream reaches the end before
            reading all the bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3603842 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readFully</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the number of bytes to read.
@exception  EOFException  if this input stream reaches the end before
              reading all the bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3603970 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>skipBytes</code>
method of <code>DataInput</code>.
<p>
Bytes for this operation are read from the contained
input stream.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if the contained input stream does not support
            seek, or the stream has been closed and
            the contained input stream does not support
            reading after close, or another I/O error occurs.
"
      end

      operation 3604098 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readBoolean</code>
method of <code>DataInput</code>.
<p>
Bytes for this operation are read from the contained
input stream.

@return     the <code>boolean</code> value read.
@exception  EOFException  if this input stream has reached the end.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3604226 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readByte</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next byte of this input stream as a signed 8-bit
            <code>byte</code>.
@exception  EOFException  if this input stream has reached the end.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3604354 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readUnsignedByte</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next byte of this input stream, interpreted as an
            unsigned 8-bit number.
@exception  EOFException  if this input stream has reached the end.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see         java.io.FilterInputStream#in
"
      end

      operation 3604482 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readShort</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next two bytes of this input stream, interpreted as a
            signed 16-bit number.
@exception  EOFException  if this input stream reaches the end before
              reading two bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3604610 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readUnsignedShort</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next two bytes of this input stream, interpreted as an
            unsigned 16-bit integer.
@exception  EOFException  if this input stream reaches the end before
            reading two bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3604738 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readChar</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next two bytes of this input stream, interpreted as a
            <code>char</code>.
@exception  EOFException  if this input stream reaches the end before
              reading two bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3604866 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readInt</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next four bytes of this input stream, interpreted as an
            <code>int</code>.
@exception  EOFException  if this input stream reaches the end before
              reading four bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      attribute 762498 "readBuffer"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[8]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3604994 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readLong</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next eight bytes of this input stream, interpreted as a
            <code>long</code>.
@exception  EOFException  if this input stream reaches the end before
              reading eight bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3605122 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readFloat</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next four bytes of this input stream, interpreted as a
            <code>float</code>.
@exception  EOFException  if this input stream reaches the end before
              reading four bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.DataInputStream#readInt()
@see        java.lang.Float#intBitsToFloat(int)
"
      end

      operation 3605250 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readDouble</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     the next eight bytes of this input stream, interpreted as a
            <code>double</code>.
@exception  EOFException  if this input stream reaches the end before
              reading eight bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@see        java.io.DataInputStream#readLong()
@see        java.lang.Double#longBitsToDouble(long)
"
      end

      attribute 762626 "lineBuffer"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 3605378 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "See the general contract of the <code>readLine</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@deprecated This method does not properly convert bytes to characters.
As of JDK&nbsp;1.1, the preferred way to read lines of text is via the
<code>BufferedReader.readLine()</code> method.  Programs that use the
<code>DataInputStream</code> class to read lines can be converted to use
the <code>BufferedReader</code> class by replacing code of the form:
<blockquote><pre>
    DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);
</pre></blockquote>
with:
<blockquote><pre>
    BufferedReader d
         =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));
</pre></blockquote>

@return     the next line of text from this input stream.
@exception  IOException  if an I/O error occurs.
@see        java.io.BufferedReader#readLine()
@see        java.io.FilterInputStream#in
"
      end

      operation 3605506 "readUTF"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>readUTF</code>
method of <code>DataInput</code>.
<p>
Bytes
for this operation are read from the contained
input stream.

@return     a Unicode string.
@exception  EOFException  if this input stream reaches the end before
              reading all the bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@exception  UTFDataFormatException if the bytes do not represent a valid
            modified UTF-8 encoding of a string.
@see        java.io.DataInputStream#readUTF(java.io.DataInput)
"
      end

      operation 3605634 "readUTF"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads from the
stream <code>in</code> a representation
of a Unicode  character string encoded in
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a> format;
this string of characters is then returned as a <code>String</code>.
The details of the modified UTF-8 representation
are  exactly the same as for the <code>readUTF</code>
method of <code>DataInput</code>.

@param      in   a data input stream.
@return     a Unicode string.
@exception  EOFException            if the input stream reaches the end
              before all the bytes.
@exception  IOException   the stream has been closed and the contained
            input stream does not support reading after close, or
            another I/O error occurs.
@exception  UTFDataFormatException  if the bytes do not represent a
              valid modified UTF-8 encoding of a Unicode string.
@see        java.io.DataInputStream#readUnsignedShort()
"
      end
    end

    class 173442 "ObjectOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An ObjectOutputStream writes primitive data types and graphs of Java objects
to an OutputStream.  The objects can be read (reconstituted) using an
ObjectInputStream.  Persistent storage of objects can be accomplished by
using a file for the stream.  If the stream is a network socket stream, the
objects can be reconstituted on another host or in another process.

<p>Only objects that support the java.io.Serializable interface can be
written to streams.  The class of each serializable object is encoded
including the class name and signature of the class, the values of the
object's fields and arrays, and the closure of any other objects referenced
from the initial objects.

<p>The method writeObject is used to write an object to the stream.  Any
object, including Strings and arrays, is written with writeObject. Multiple
objects or primitives can be written to the stream.  The objects must be
read back from the corresponding ObjectInputstream with the same types and
in the same order as they were written.

<p>Primitive data types can also be written to the stream using the
appropriate methods from DataOutput. Strings can also be written using the
writeUTF method.

<p>The default serialization mechanism for an object writes the class of the
object, the class signature, and the values of all non-transient and
non-static fields.  References to other objects (except in transient or
static fields) cause those objects to be written also. Multiple references
to a single object are encoded using a reference sharing mechanism so that
graphs of objects can be restored to the same shape as when the original was
written.

<p>For example to write an object that can be read by the example in
ObjectInputStream:
<br>
<pre>
     FileOutputStream fos = new FileOutputStream(\"t.tmp\");
     ObjectOutputStream oos = new ObjectOutputStream(fos);

     oos.writeInt(12345);
     oos.writeObject(\"Today\");
     oos.writeObject(new Date());

     oos.close();
</pre>

<p>Classes that require special handling during the serialization and
deserialization process must implement special methods with these exact
signatures:
<br>
<pre>
private void readObject(java.io.ObjectInputStream stream)
    throws IOException, ClassNotFoundException;
private void writeObject(java.io.ObjectOutputStream stream)
    throws IOException
private void readObjectNoData()
    throws ObjectStreamException;
</pre>

<p>The writeObject method is responsible for writing the state of the object
for its particular class so that the corresponding readObject method can
restore it.  The method does not need to concern itself with the state
belonging to the object's superclasses or subclasses.  State is saved by
writing the individual fields to the ObjectOutputStream using the
writeObject method or by using the methods for primitive data types
supported by DataOutput.

<p>Serialization does not write out the fields of any object that does not
implement the java.io.Serializable interface.  Subclasses of Objects that
are not serializable can be serializable. In this case the non-serializable
class must have a no-arg constructor to allow its fields to be initialized.
In this case it is the responsibility of the subclass to save and restore
the state of the non-serializable class. It is frequently the case that the
fields of that class are accessible (public, package, or protected) or that
there are get and set methods that can be used to restore the state.

<p>Serialization of an object can be prevented by implementing writeObject
and readObject methods that throw the NotSerializableException.  The
exception will be caught by the ObjectOutputStream and abort the
serialization process.

<p>Implementing the Externalizable interface allows the object to assume
complete control over the contents and format of the object's serialized
form.  The methods of the Externalizable interface, writeExternal and
readExternal, are called to save and restore the objects state.  When
implemented by a class they can write and read their own state using all of
the methods of ObjectOutput and ObjectInput.  It is the responsibility of
the objects to handle any versioning that occurs.

<p>Enum constants are serialized differently than ordinary serializable or
externalizable objects.  The serialized form of an enum constant consists
solely of its name; field values of the constant are not transmitted.  To
serialize an enum constant, ObjectOutputStream writes the string returned by
the constant's name method.  Like other serializable or externalizable
objects, enum constants can function as the targets of back references
appearing subsequently in the serialization stream.  The process by which
enum constants are serialized cannot be customized; any class-specific
writeObject and writeReplace methods defined by enum types are ignored
during serialization.  Similarly, any serialPersistentFields or
serialVersionUID field declarations are also ignored--all enum types have a
fixed serialVersionUID of 0L.

<p>Primitive data, excluding serializable fields and externalizable data, is
written to the ObjectOutputStream in block-data records. A block data record
is composed of a header and data. The block data header consists of a marker
and the number of bytes to follow the header.  Consecutive primitive data
writes are merged into one block-data record.  The blocking factor used for
a block-data record will be 1024 bytes.  Each block-data record will be
filled up to 1024 bytes, or be written whenever there is a termination of
block-data mode.  Calls to the ObjectOutputStream methods writeObject,
defaultWriteObject and writeFields initially terminate any existing
block-data record.

@author      Mike Warres
@author      Roger Riggs
@see java.io.DataOutput
@see java.io.ObjectInputStream
@see java.io.Serializable
@see java.io.Externalizable
@see <a href=\"../../../platform/serialization/spec/output.html\">Object Serialization Specification, Section 2, Object Output Classes</a>
@since       JDK1.1
"
      classrelation 190978 // <generalisation>
	relation 190978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 190978 // <generalisation>
	  b parent class_ref 151298 // OutputStream
      end

      classrelation 191362 // <realization>
	relation 191362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 191362 // <realization>
	  b parent class_ref 174082 // ObjectOutput
      end

      classrelation 191490 // <realization>
	relation 191490 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 191490 // <realization>
	  b parent class_ref 169858 // ObjectStreamConstants
      end

      class 174338 "Caches"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 191618 // subclassAudits (<unidirectional association>)
	  relation 191618 --->
	    a role_name "subclassAudits" init_value "
            new ConcurrentHashMap<>()" class_relation const_relation package
	      comment " cache of subclass security audit results 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakClassKey,Boolean> ${name}${value};
"
	      classrelation_ref 191618 // subclassAudits (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	classrelation 191746 // subclassAuditsQueue (<unidirectional association>)
	  relation 191746 --->
	    a role_name "subclassAuditsQueue" init_value "
            new ReferenceQueue<>()" class_relation const_relation package
	      comment " queue for WeakReferences to audited subclasses 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 191746 // subclassAuditsQueue (<unidirectional association>)
	    b parent class_ref 130946 // ReferenceQueue
	end
      end

      class 174466 "BlockDataOutputStream"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 193026 // <generalisation>
	  relation 193026 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 193026 // <generalisation>
	    b parent class_ref 151298 // OutputStream
	end

	classrelation 193154 // <realization>
	  relation 193154 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 193154 // <realization>
	    b parent class_ref 174210 // DataOutput
	end

	attribute 165634 "MAX_BLOCK_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 1024"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " maximum data block length 
"
	end

	attribute 165762 "MAX_HEADER_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " maximum data block header length 
"
	end

	attribute 165890 "CHAR_BUF_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 256"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " (tunable) length of char buffer (for writing strings) 
"
	end

	attribute 166018 "buf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value " new byte[MAX_BLOCK_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " buffer for writing general/block data 
"
	end

	attribute 166146 "hbuf"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value " new byte[MAX_HEADER_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " buffer for writing block data headers 
"
	end

	attribute 166274 "cbuf"
	  const_attribute private explicit_type "char"
	  multiplicity "[]"
	  init_value " new char[CHAR_BUF_SIZE]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " char buffer for fast string writes 
"
	end

	attribute 166402 "blkmode"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " block data mode 
"
	end

	attribute 166530 "pos"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " current offset into buf 
"
	end

	classrelation 193282 // out (<unidirectional association>)
	  relation 193282 --->
	    a role_name "out" const_relation private
	      comment " underlying output stream 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 193282 // out (<unidirectional association>)
	    b parent class_ref 151298 // OutputStream
	end

	classrelation 193410 // dout (<unidirectional association>)
	  relation 193410 --->
	    a role_name "dout" const_relation private
	      comment " loopback stream (for data writes that span data blocks) 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 193410 // dout (<unidirectional association>)
	    b parent class_ref 175234 // DataOutputStream
	end

	operation 453378 "BlockDataOutputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "out" type class_ref 151298 // OutputStream
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new BlockDataOutputStream on top of given underlying stream.
Block data mode is turned off by default.
"
	end

	operation 453506 "setBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "mode" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets block data mode to the given mode (true == on, false == off)
and returns the previous mode value.  If the new mode is the same as
the old mode, no action is taken.  If the new mode differs from the
old mode, any buffered data is flushed before switching to the new
mode.
"
	end

	operation 453634 "getBlockDataMode"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the stream is currently in block data mode, false
otherwise.
"
	end

	operation 453762 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- generic output stream methods ----------------- 

The following methods are equivalent to their counterparts in
OutputStream, except that they partition written data into data
blocks when in block data mode.
"
	end

	operation 453890 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 454018 "write"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 454146 "flush"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 454274 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 454402 "write"
	  package explicit_return_type "void"
	  nparams 4
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	    param inout name "copy" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes specified span of byte values from given array.  If copy is
true, copies the values to an intermediate buffer before writing
them to underlying stream (to avoid exposing a reference to the
original byte array).
"
	end

	operation 454530 "drain"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes all buffered data from this stream to the underlying stream,
but does not flush underlying stream.
"
	end

	operation 454658 "writeBlockHeader"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes block data header.  Data blocks shorter than 256 bytes are
prefixed with a 2-byte header; all others start with a 5-byte
header.
"
	end

	operation 454786 "writeBoolean"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------- primitive data output methods ----------------- 

The following methods are equivalent to their counterparts in
DataOutputStream, except that they partition written data into data
blocks when in block data mode.
"
	end

	operation 454914 "writeByte"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455042 "writeChar"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455170 "writeShort"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455298 "writeInt"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455426 "writeFloat"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "float"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455554 "writeLong"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455682 "writeDouble"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "v" explicit_type "double"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455810 "writeBytes"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 455938 "writeChars"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 456066 "writeUTF"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 456194 "writeBooleans"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "boolean"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " -------------- primitive data array output methods -------------- 

The following methods write out spans of primitive data values.
Though equivalent to calling the corresponding primitive write
methods repeatedly, these methods are optimized for writing groups
of primitive data values more efficiently.
"
	end

	operation 456322 "writeChars"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "char"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 456450 "writeShorts"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "short"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 456578 "writeInts"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "int"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 456706 "writeFloats"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "float"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 456834 "writeLongs"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "long"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 456962 "writeDoubles"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "v" explicit_type "double"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 457090 "getUTFLength"
	  package explicit_return_type "long"
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the length in bytes of the UTF encoding of the given string.
"
	end

	operation 457218 "writeUTF"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "s" type class_ref 128130 // String
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the given string in UTF format.  This method is used in
situations where the UTF encoding length of the string is already
known; specifying it explicitly avoids a prescan of the string to
determine its UTF length.
"
	end

	operation 457346 "writeLongUTF"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes given string in \"long\" UTF format.  \"Long\" UTF format is
identical to standard UTF, except that it uses an 8 byte header
(instead of the standard 2 bytes) to convey the UTF encoding length.
"
	end

	operation 457474 "writeLongUTF"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "s" type class_ref 128130 // String
	    param in name "utflen" explicit_type "long"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes given string in \"long\" UTF format, where the UTF encoding
length of the string is already known.
"
	end

	operation 457602 "writeUTFBody"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the \"body\" (i.e., the UTF representation minus the 2-byte or
8-byte length header) of the UTF encoding for the given string.
"
	end
      end

      classrelation 191874 // bout (<unidirectional association>)
	relation 191874 --->
	  a role_name "bout" const_relation private
	    comment " filter stream for handling block data conversion 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 191874 // bout (<unidirectional association>)
	  b parent class_ref 174466 // BlockDataOutputStream
      end

      class 174594 "HandleTable"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 166658 "size"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " number of mappings in table/next available handle 
"
	end

	attribute 166786 "threshold"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " size threshold determining when to expand hash spine 
"
	end

	attribute 166914 "loadFactor"
	  const_attribute private explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " factor for computing size threshold 
"
	end

	attribute 167042 "spine"
	  private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " maps hash value -> candidate handle value 
"
	end

	attribute 167170 "next"
	  private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " maps handle value -> next candidate handle value 
"
	end

	classrelation 193538 // objs (<unidirectional association>)
	  relation 193538 --->
	    a role_name "objs" multiplicity "[]" private
	      comment " maps handle value -> associated object 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 193538 // objs (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 457730 "HandleTable"
	  package explicit_return_type ""
	  nparams 2
	    param in name "initialCapacity" explicit_type "int"
	    param in name "loadFactor" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new HandleTable with given capacity and load factor.
"
	end

	operation 457858 "assign"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Assigns next available handle to given object, and returns handle
value.  Handles are assigned in ascending order starting at 0.
"
	end

	operation 457986 "lookup"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns handle associated with given object, or -1 if
no mapping found.
"
	end

	operation 458114 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets table to its initial (empty) state.
"
	end

	operation 458242 "size"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of mappings currently in table.
"
	end

	operation 458370 "insert"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 129538 // Object
	    param in name "handle" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Inserts mapping object -> handle mapping into table.  Assumes table
is large enough to accommodate new mapping.
"
	end

	operation 458498 "growSpine"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expands the hash \"spine\" -- equivalent to increasing the number of
buckets in a conventional hash table.
"
	end

	operation 458626 "growEntries"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Increases hash table capacity by lengthening entry arrays.
"
	end

	operation 458754 "hash"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns hash value for given object.
"
	end
      end

      classrelation 192002 // handles (<unidirectional association>)
	relation 192002 --->
	  a role_name "handles" const_relation private
	    comment " obj -> wire handle map 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 192002 // handles (<unidirectional association>)
	  b parent class_ref 174594 // HandleTable
      end

      class 174722 "ReplaceTable"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 193666 // htab (<unidirectional association>)
	  relation 193666 --->
	    a role_name "htab" const_relation private
	      comment " maps object -> index 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 193666 // htab (<unidirectional association>)
	    b parent class_ref 174594 // HandleTable
	end

	classrelation 193794 // reps (<unidirectional association>)
	  relation 193794 --->
	    a role_name "reps" multiplicity "[]" private
	      comment " maps index -> replacement object 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 193794 // reps (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 458882 "ReplaceTable"
	  package explicit_return_type ""
	  nparams 2
	    param in name "initialCapacity" explicit_type "int"
	    param in name "loadFactor" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates new ReplaceTable with given capacity and load factor.
"
	end

	operation 459010 "assign"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" type class_ref 129538 // Object
	    param inout name "rep" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Enters mapping from object to replacement object.
"
	end

	operation 459138 "lookup"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Looks up and returns replacement for given object.  If no
replacement is found, returns the lookup object itself.
"
	end

	operation 459266 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets table to its initial (empty) state.
"
	end

	operation 459394 "size"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of mappings currently in table.
"
	end

	operation 459522 "grow"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Increases table capacity.
"
	end
      end

      classrelation 192130 // subs (<unidirectional association>)
	relation 192130 --->
	  a role_name "subs" const_relation private
	    comment " obj -> replacement obj map 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 192130 // subs (<unidirectional association>)
	  b parent class_ref 174722 // ReplaceTable
      end

      attribute 164738 "protocol"
	private explicit_type "int"
	init_value " PROTOCOL_VERSION_2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " stream protocol version 
"
      end

      attribute 164866 "depth"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " recursion depth 
"
      end

      attribute 164994 "primVals"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " buffer for writing primitive field values 
"
      end

      attribute 165122 "enableOverride"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if true, invoke writeObjectOverride() instead of writeObject() 
"
      end

      attribute 165250 "enableReplace"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if true, invoke replaceObject() 
"
      end

      classrelation 192258 // curContext (<unidirectional association>)
	relation 192258 --->
	  a role_name "curContext" private
	    comment " values below valid only during upcalls to writeObject()/writeExternal()

Context during upcalls to class-defined writeObject methods; holds
object currently being serialized and descriptor for current class.
Null when not during writeObject upcall.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 192258 // curContext (<unidirectional association>)
	  b parent class_ref 171010 // SerialCallbackContext
      end

      class 174850 "PutFieldImpl"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 192642 // <generalisation>
	  relation 192642 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 192642 // <generalisation>
	    b parent class_ref 175106 // PutField
	end

	classrelation 192770 // desc (<unidirectional association>)
	  relation 192770 --->
	    a role_name "desc" const_relation private
	      comment " class descriptor describing serializable fields 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 192770 // desc (<unidirectional association>)
	    b parent class_ref 170242 // ObjectStreamClass
	end

	attribute 165506 "primVals"
	  const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " primitive field values 
"
	end

	classrelation 192898 // objVals (<unidirectional association>)
	  relation 192898 --->
	    a role_name "objVals" multiplicity "[]" const_relation private
	      comment " object field values 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 192898 // objVals (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 451714 "PutFieldImpl"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates PutFieldImpl object for writing fields defined in given
class descriptor.
"
	end

	operation 451842 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 451970 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452098 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452226 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "short"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452354 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452482 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452610 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452738 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452866 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 452994 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "out" type class_ref 174082 // ObjectOutput
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " deprecated in ObjectOutputStream.PutField"
	end

	operation 453122 "writeFields"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes buffered primitive data and object fields to stream.
"
	end

	operation 453250 "getFieldOffset"
	  private explicit_return_type "int"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns offset of field with given name and type.  A specified type
of null matches all types, Object.class matches all non-primitive
types, and any other non-null type matches assignable types only.
Throws IllegalArgumentException if no matching field found.
"
	end
      end

      classrelation 192386 // curPut (<unidirectional association>)
	relation 192386 --->
	  a role_name "curPut" private
	    comment " current PutField object 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 192386 // curPut (<unidirectional association>)
	  b parent class_ref 174850 // PutFieldImpl
      end

      class 174978 "DebugTraceInfoStack"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 193922 // stack (<unidirectional association>)
	  relation 193922 --->
	    a role_name "stack" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	      classrelation_ref 193922 // stack (<unidirectional association>)
	    b parent class_ref 175362 // List
	end

	operation 459650 "DebugTraceInfoStack"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 459778 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes all of the elements from enclosed list.
"
	end

	operation 459906 "pop"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes the object at the top of enclosed list.
"
	end

	operation 460034 "push"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "entry" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Pushes a String onto the top of enclosed list.
"
	end

	operation 460162 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string representation of this object
"
	end
      end

      classrelation 192514 // debugInfoStack (<unidirectional association>)
	relation 192514 --->
	  a role_name "debugInfoStack" const_relation private
	    comment " custom storage for debug trace info 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 192514 // debugInfoStack (<unidirectional association>)
	  b parent class_ref 174978 // DebugTraceInfoStack
      end

      attribute 165378 "extendedDebugInfo"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        java.security.AccessController.doPrivileged(
            new sun.security.action.GetBooleanAction(
                \"sun.io.serialization.extendedDebugInfo\")).booleanValue()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "value of \"sun.io.serialization.extendedDebugInfo\" property,
as true or false for extended information about exception's place

"
      end

      operation 443266 "ObjectOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectOutputStream that writes to the specified OutputStream.
This constructor writes the serialization stream header to the
underlying stream; callers may wish to flush the stream immediately to
ensure that constructors for receiving ObjectInputStreams will not block
when reading the header.

<p>If a security manager is installed, this constructor will check for
the \"enableSubclassImplementation\" SerializablePermission when invoked
directly or indirectly by the constructor of a subclass which overrides
the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared
methods.

@param   out output stream to write to
@throws  IOException if an I/O error occurs while writing stream header
@throws  SecurityException if untrusted subclass illegally overrides
         security-sensitive methods
@throws  NullPointerException if <code>out</code> is <code>null</code>
@since   1.4
@see     ObjectOutputStream#ObjectOutputStream()
@see     ObjectOutputStream#putFields()
@see     ObjectInputStream#ObjectInputStream(InputStream)
"
      end

      operation 443394 "ObjectOutputStream"
	protected explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provide a way for subclasses that are completely reimplementing
ObjectOutputStream to not have to allocate private data just used by
this implementation of ObjectOutputStream.

<p>If there is a security manager installed, this method first calls the
security manager's <code>checkPermission</code> method with a
<code>SerializablePermission(\"enableSubclassImplementation\")</code>
permission to ensure it's ok to enable subclassing.

@throws  SecurityException if a security manager exists and its
         <code>checkPermission</code> method denies enabling
         subclassing.
@throws  IOException if an I/O error occurs while creating this stream
@see SecurityManager#checkPermission
@see java.io.SerializablePermission
"
      end

      operation 443522 "useProtocolVersion"
	public explicit_return_type "void"
	nparams 1
	  param in name "version" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify stream protocol version to use when writing the stream.

<p>This routine provides a hook to enable the current version of
Serialization to write in a format that is backwards compatible to a
previous version of the stream format.

<p>Every effort will be made to avoid introducing additional
backwards incompatibilities; however, sometimes there is no
other alternative.

@param   version use ProtocolVersion from java.io.ObjectStreamConstants.
@throws  IllegalStateException if called after any objects
         have been serialized.
@throws  IllegalArgumentException if invalid version is passed in.
@throws  IOException if I/O errors occur
@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1
@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_2
@since   1.2
"
      end

      operation 443650 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the specified object to the ObjectOutputStream.  The class of the
object, the signature of the class, and the values of the non-transient
and non-static fields of the class and all of its supertypes are
written.  Default serialization for a class can be overridden using the
writeObject and the readObject methods.  Objects referenced by this
object are written transitively so that a complete equivalent graph of
objects can be reconstructed by an ObjectInputStream.

<p>Exceptions are thrown for problems with the OutputStream and for
classes that should not be serialized.  All exceptions are fatal to the
OutputStream, which is left in an indeterminate state, and it is up to
the caller to ignore or recover the stream state.

@throws  InvalidClassException Something is wrong with a class used by
         serialization.
@throws  NotSerializableException Some object to be serialized does not
         implement the java.io.Serializable interface.
@throws  IOException Any exception thrown by the underlying
         OutputStream.
"
      end

      operation 443778 "writeObjectOverride"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method used by subclasses to override the default writeObject method.
This method is called by trusted subclasses of ObjectInputStream that
constructed ObjectInputStream using the protected no-arg constructor.
The subclass is expected to provide an override method with the modifier
\"final\".

@param   obj object to be written to the underlying stream
@throws  IOException if there are I/O errors while writing to the
         underlying stream
@see #ObjectOutputStream()
@see #writeObject(Object)
@since 1.2
"
      end

      operation 443906 "writeUnshared"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an \"unshared\" object to the ObjectOutputStream.  This method is
identical to writeObject, except that it always writes the given object
as a new, unique object in the stream (as opposed to a back-reference
pointing to a previously serialized instance).  Specifically:
<ul>
  <li>An object written via writeUnshared is always serialized in the
      same manner as a newly appearing object (an object that has not
      been written to the stream yet), regardless of whether or not the
      object has been written previously.

  <li>If writeObject is used to write an object that has been previously
      written with writeUnshared, the previous writeUnshared operation
      is treated as if it were a write of a separate object.  In other
      words, ObjectOutputStream will never generate back-references to
      object data written by calls to writeUnshared.
</ul>
While writing an object via writeUnshared does not in itself guarantee a
unique reference to the object when it is deserialized, it allows a
single object to be defined multiple times in a stream, so that multiple
calls to readUnshared by the receiver will not conflict.  Note that the
rules described above only apply to the base-level object written with
writeUnshared, and not to any transitively referenced sub-objects in the
object graph to be serialized.

<p>ObjectOutputStream subclasses which override this method can only be
constructed in security contexts possessing the
\"enableSubclassImplementation\" SerializablePermission; any attempt to
instantiate such a subclass without this permission will cause a
SecurityException to be thrown.

@param   obj object to write to stream
@throws  NotSerializableException if an object in the graph to be
         serialized does not implement the Serializable interface
@throws  InvalidClassException if a problem exists with the class of an
         object to be serialized
@throws  IOException if an I/O error occurs during serialization
@since 1.4
"
      end

      operation 444034 "defaultWriteObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the non-static and non-transient fields of the current class to
this stream.  This may only be called from the writeObject method of the
class being serialized. It will throw the NotActiveException if it is
called otherwise.

@throws  IOException if I/O errors occur while writing to the underlying
         <code>OutputStream</code>
"
      end

      class 175106 "PutField"
	abstract visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 447490 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" explicit_type "boolean"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named boolean field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>boolean</code>
"
	end

	operation 447618 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "byte"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named byte field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>byte</code>
"
	end

	operation 447746 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "char"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named char field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>char</code>
"
	end

	operation 447874 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "short"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named short field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>short</code>
"
	end

	operation 448002 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named int field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>int</code>
"
	end

	operation 448130 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "long"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named long field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>long</code>
"
	end

	operation 448258 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "float"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named float field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>float</code>
"
	end

	operation 448386 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param in name "val" explicit_type "double"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named double field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not
<code>double</code>
"
	end

	operation 448514 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "val" type class_ref 129538 // Object
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Put the value of the named Object field into the persistent field.

@param  name the name of the serializable field
@param  val the value to assign to the field
        (which may be <code>null</code>)
@throws IllegalArgumentException if <code>name</code> does not
match the name of a serializable field for the class whose fields
are being written, or if the type of the named field is not a
reference type
"
	end

	operation 448642 "write"
	  abstract public explicit_return_type "void"
	  nparams 1
	    param inout name "out" type class_ref 174082 // ObjectOutput
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "Write the data and fields to the specified ObjectOutput stream,
which must be the same stream that produced this
<code>PutField</code> object.

@param  out the stream to write the data and fields to
@throws IOException if I/O errors occur while writing to the
        underlying stream
@throws IllegalArgumentException if the specified stream is not
        the same stream that produced this <code>PutField</code>
        object
@deprecated This method does not write the values contained by this
        <code>PutField</code> object in a proper format, and may
        result in corruption of the serialization stream.  The
        correct way to write <code>PutField</code> data is by
        calling the {@link java.io.ObjectOutputStream#writeFields()}
        method.
"
	end
      end

      operation 444162 "putFields"
	public return_type class_ref 175106 // PutField
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the object used to buffer persistent fields to be written to
the stream.  The fields will be written to the stream when writeFields
method is called.

@return  an instance of the class Putfield that holds the serializable
         fields
@throws  IOException if I/O errors occur
@since 1.2
"
      end

      operation 444290 "writeFields"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the buffered fields to the stream.

@throws  IOException if I/O errors occur while writing to the underlying
         stream
@throws  NotActiveException Called when a classes writeObject method was
         not called to write the state of the object.
@since 1.2
"
      end

      operation 444418 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset will disregard the state of any objects already written to the
stream.  The state is reset to be the same as a new ObjectOutputStream.
The current point in the stream is marked as reset so the corresponding
ObjectInputStream will be reset at the same point.  Objects previously
written to the stream will not be referred to as already being in the
stream.  They will be written to the stream again.

@throws  IOException if reset() is invoked while serializing an object.
"
      end

      operation 444546 "annotateClass"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclasses may implement this method to allow class data to be stored in
the stream. By default this method does nothing.  The corresponding
method in ObjectInputStream is resolveClass.  This method is called
exactly once for each unique class in the stream.  The class name and
signature will have already been written to the stream.  This method may
make free use of the ObjectOutputStream to save any representation of
the class it deems suitable (for example, the bytes of the class file).
The resolveClass method in the corresponding subclass of
ObjectInputStream must read and use any data or objects written by
annotateClass.

@param   cl the class to annotate custom data for
@throws  IOException Any exception thrown by the underlying
         OutputStream.
"
      end

      operation 444674 "annotateProxyClass"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclasses may implement this method to store custom data in the stream
along with descriptors for dynamic proxy classes.

<p>This method is called exactly once for each unique proxy class
descriptor in the stream.  The default implementation of this method in
<code>ObjectOutputStream</code> does nothing.

<p>The corresponding method in <code>ObjectInputStream</code> is
<code>resolveProxyClass</code>.  For a given subclass of
<code>ObjectOutputStream</code> that overrides this method, the
<code>resolveProxyClass</code> method in the corresponding subclass of
<code>ObjectInputStream</code> must read any data or objects written by
<code>annotateProxyClass</code>.

@param   cl the proxy class to annotate custom data for
@throws  IOException any exception thrown by the underlying
         <code>OutputStream</code>
@see ObjectInputStream#resolveProxyClass(String[])
@since   1.3
"
      end

      operation 444802 "replaceObject"
	protected return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method will allow trusted subclasses of ObjectOutputStream to
substitute one object for another during serialization. Replacing
objects is disabled until enableReplaceObject is called. The
enableReplaceObject method checks that the stream requesting to do
replacement can be trusted.  The first occurrence of each object written
into the serialization stream is passed to replaceObject.  Subsequent
references to the object are replaced by the object returned by the
original call to replaceObject.  To ensure that the private state of
objects is not unintentionally exposed, only trusted streams may use
replaceObject.

<p>The ObjectOutputStream.writeObject method takes a parameter of type
Object (as opposed to type Serializable) to allow for cases where
non-serializable objects are replaced by serializable ones.

<p>When a subclass is replacing objects it must insure that either a
complementary substitution must be made during deserialization or that
the substituted object is compatible with every field where the
reference will be stored.  Objects whose type is not a subclass of the
type of the field or array element abort the serialization by raising an
exception and the object is not be stored.

<p>This method is called only once when each object is first
encountered.  All subsequent references to the object will be redirected
to the new object. This method should return the object to be
substituted or the original object.

<p>Null can be returned as the object to be substituted, but may cause
NullReferenceException in classes that contain references to the
original object since they may be expecting an object instead of
null.

@param   obj the object to be replaced
@return  the alternate object that replaced the specified one
@throws  IOException Any exception thrown by the underlying
         OutputStream.
"
      end

      operation 444930 "enableReplaceObject"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable the stream to do replacement of objects in the stream.  When
enabled, the replaceObject method is called for every object being
serialized.

<p>If <code>enable</code> is true, and there is a security manager
installed, this method first calls the security manager's
<code>checkPermission</code> method with a
<code>SerializablePermission(\"enableSubstitution\")</code> permission to
ensure it's ok to enable the stream to do replacement of objects in the
stream.

@param   enable boolean parameter to enable replacement of objects
@return  the previous setting before this method was invoked
@throws  SecurityException if a security manager exists and its
         <code>checkPermission</code> method denies enabling the stream
         to do replacement of objects in the stream.
@see SecurityManager#checkPermission
@see java.io.SerializablePermission
"
      end

      operation 445058 "writeStreamHeader"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The writeStreamHeader method is provided so subclasses can append or
prepend their own header to the stream.  It writes the magic number and
version to the stream.

@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 445186 "writeClassDescriptor"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the specified class descriptor to the ObjectOutputStream.  Class
descriptors are used to identify the classes of objects written to the
stream.  Subclasses of ObjectOutputStream may override this method to
customize the way in which class descriptors are written to the
serialization stream.  The corresponding method in ObjectInputStream,
<code>readClassDescriptor</code>, should then be overridden to
reconstitute the class descriptor from its custom stream representation.
By default, this method writes class descriptors according to the format
defined in the Object Serialization specification.

<p>Note that this method will only be called if the ObjectOutputStream
is not using the old serialization stream format (set by calling
ObjectOutputStream's <code>useProtocolVersion</code> method).  If this
serialization stream is using the old format
(<code>PROTOCOL_VERSION_1</code>), the class descriptor will be written
internally in a manner that cannot be overridden or customized.

@param   desc class descriptor to write to the stream
@throws  IOException If an I/O error has occurred.
@see java.io.ObjectInputStream#readClassDescriptor()
@see #useProtocolVersion(int)
@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1
@since 1.3
"
      end

      operation 445314 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a byte. This method will block until the byte is actually
written.

@param   val the byte to be written to the stream
@throws  IOException If an I/O error has occurred.
"
      end

      operation 445442 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an array of bytes. This method will block until the bytes are
actually written.

@param   buf the data to be written
@throws  IOException If an I/O error has occurred.
"
      end

      operation 445570 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sub array of bytes.

@param   buf the data to be written
@param   off the start offset in the data
@param   len the number of bytes that are written
@throws  IOException If an I/O error has occurred.
"
      end

      operation 445698 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream. This will write any buffered output bytes and flush
through to the underlying stream.

@throws  IOException If an I/O error has occurred.
"
      end

      operation 445826 "drain"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Drain any buffered data in ObjectOutputStream.  Similar to flush but
does not propagate the flush to the underlying stream.

@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 445954 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream. This method must be called to release any resources
associated with the stream.

@throws  IOException If an I/O error has occurred.
"
      end

      operation 446082 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a boolean.

@param   val the boolean to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 446210 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an 8 bit byte.

@param   val the byte value to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 446338 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 16 bit short.

@param   val the short value to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 446466 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 16 bit char.

@param   val the char value to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 446594 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 32 bit int.

@param   val the integer value to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 446722 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 64 bit long.

@param   val the long value to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 446850 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "float"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 32 bit float.

@param   val the float value to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 446978 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a 64 bit double.

@param   val the double value to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 447106 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a String as a sequence of bytes.

@param   str the String of bytes to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 447234 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a String as a sequence of chars.

@param   str the String of chars to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 447362 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Primitive data write of this String in
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format.  Note that there is a
significant difference between writing a String into the stream as
primitive data or as an Object. A String instance written by writeObject
is written into the stream as a String initially. Future writeObject()
calls write references to the string into the stream.

@param   str the String to be written
@throws  IOException if I/O errors occur while writing to the underlying
         stream
"
      end

      operation 448770 "getProtocolVersion"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns protocol version in use.
"
      end

      operation 448898 "writeTypeString"
	package explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes string without allowing it to be replaced in stream.  Used by
ObjectStreamClass to write class descriptor type strings.
"
      end

      operation 449026 "verifySubclass"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this (possibly subclass) instance can be constructed
without violating security constraints: the subclass must not override
security-sensitive non-final methods, or else the
\"enableSubclassImplementation\" SerializablePermission is checked.
"
      end

      operation 449154 "auditSubclass"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "subcl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs reflective checks on given subclass to verify that it doesn't
override security-sensitive non-final methods.  Returns true if subclass
is \"safe\", false otherwise.
"
      end

      operation 449282 "clear"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears internal data structures.
"
      end

      operation 449410 "writeObject0"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Underlying writeObject/writeUnshared implementation.
"
      end

      operation 449538 "writeNull"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes null code to stream.
"
      end

      operation 449666 "writeHandle"
	private explicit_return_type "void"
	nparams 1
	  param in name "handle" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given object handle to stream.
"
      end

      operation 449794 "writeClass"
	private explicit_return_type "void"
	nparams 2
	  param inout name "cl" type class_ref 130818 // Class
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes representation of given class to stream.
"
      end

      operation 449922 "writeClassDesc"
	private explicit_return_type "void"
	nparams 2
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes representation of given class descriptor to stream.
"
      end

      operation 450050 "isCustomSubclass"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 450178 "writeProxyDesc"
	private explicit_return_type "void"
	nparams 2
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes class descriptor representing a dynamic proxy class to stream.
"
      end

      operation 450306 "writeNonProxyDesc"
	private explicit_return_type "void"
	nparams 2
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes class descriptor representing a standard (i.e., not a dynamic
proxy) class to stream.
"
      end

      operation 450434 "writeString"
	private explicit_return_type "void"
	nparams 2
	  param inout name "str" type class_ref 128130 // String
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given string to stream, using standard or long UTF format
depending on string length.
"
      end

      operation 450562 "writeArray"
	private explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given array object to stream.
"
      end

      operation 450690 "writeEnum"
	private explicit_return_type "void"
	nparams 3
	  param inout name "en" type class_ref 172034 // Enum
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes given enum constant to stream.
"
      end

      operation 450818 "writeOrdinaryObject"
	private explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes representation of a \"ordinary\" (i.e., not a String, Class,
ObjectStreamClass, array, or enum constant) serializable object to the
stream.
"
      end

      operation 450946 "writeExternalData"
	private explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 172162 // Externalizable
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes externalizable data of given object by invoking its
writeExternal() method.
"
      end

      operation 451074 "writeSerialData"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes instance data for each serializable class of given object, from
superclass to subclass.
"
      end

      operation 451202 "defaultWriteFields"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "desc" type class_ref 170242 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetches and writes values of serializable fields of given object to
stream.  The given class descriptor specifies which field values to
write, and in which order they should be written.
"
      end

      operation 451330 "writeFatalException"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 146818 // IOException
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to write to stream fatal IOException that has caused
serialization to abort.
"
      end

      operation 451458 "floatsToBytes"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "src" explicit_type "float"
	multiplicity "[]"
	  param in name "srcpos" explicit_type "int"
	  param inout name "dst" explicit_type "byte"
	multiplicity "[]"
	  param in name "dstpos" explicit_type "int"
	  param in name "nfloats" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
s"
	
	
	
	comment "Converts specified span of float values into byte values.

 REMIND: remove once hotspot inlines Float.floatToIntBits"
      end

      operation 451586 "doublesToBytes"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "src" explicit_type "double"
	multiplicity "[]"
	  param in name "srcpos" explicit_type "int"
	  param inout name "dst" explicit_type "byte"
	multiplicity "[]"
	  param in name "dstpos" explicit_type "int"
	  param in name "ndoubles" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
s"
	
	
	
	comment "Converts specified span of double values into byte values.

 REMIND: remove once hotspot inlines Double.doubleToLongBits"
      end
    end

    class 173698 "ByteArrayOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements an output stream in which the data is
written into a byte array. The buffer automatically grows as data
is written to it.
The data can be retrieved using <code>toByteArray()</code> and
<code>toString()</code>.
<p>
Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.

@author  Arthur van Hoff
@since   JDK1.0
"
      classrelation 190722 // <generalisation>
	relation 190722 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 190722 // <generalisation>
	  b parent class_ref 151298 // OutputStream
      end

      attribute 164354 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The buffer where data is stored.

"
      end

      attribute 164482 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of valid bytes in the buffer.

"
      end

      operation 438530 "ByteArrayOutputStream"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new byte array output stream. The buffer capacity is
initially 32 bytes, though its size increases if necessary.
"
      end

      operation 438658 "ByteArrayOutputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new byte array output stream, with a buffer capacity of
the specified size, in bytes.

@param   size   the initial size.
@exception  IllegalArgumentException if size is negative.
"
      end

      operation 438786 "ensureCapacity"
	private explicit_return_type "void"
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity if necessary to ensure that it can hold
at least the number of elements specified by the minimum
capacity argument.

@param minCapacity the desired minimum capacity
@throws OutOfMemoryError if {@code minCapacity < 0}.  This is
interpreted as a request for the unsatisfiably large capacity
{@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.
"
      end

      attribute 164610 "MAX_ARRAY_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE - 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum size of array to allocate.
Some VMs reserve some header words in an array.
Attempts to allocate larger arrays may result in
OutOfMemoryError: Requested array size exceeds VM limit

"
      end

      operation 438914 "grow"
	private explicit_return_type "void"
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the capacity to ensure that it can hold at least the
number of elements specified by the minimum capacity argument.

@param minCapacity the desired minimum capacity
"
      end

      operation 439042 "hugeCapacity"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "minCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 439170 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this byte array output stream.

@param   b   the byte to be written.
"
      end

      operation 439298 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array
starting at offset <code>off</code> to this byte array output stream.

@param   b     the data.
@param   off   the start offset in the data.
@param   len   the number of bytes to write.
"
      end

      operation 439426 "writeTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the complete contents of this byte array output stream to
the specified output stream argument, as if by calling the output
stream's write method using <code>out.write(buf, 0, count)</code>.

@param      out   the output stream to which to write the data.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 439554 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the <code>count</code> field of this byte array output
stream to zero, so that all currently accumulated output in the
output stream is discarded. The output stream can be used again,
reusing the already allocated buffer space.

@see     java.io.ByteArrayInputStream#count
"
      end

      operation 439682 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a newly allocated byte array. Its size is the current
size of this output stream and the valid contents of the buffer
have been copied into it.

@return  the current contents of this output stream, as a byte array.
@see     java.io.ByteArrayOutputStream#size()
"
      end

      operation 439810 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current size of the buffer.

@return  the value of the <code>count</code> field, which is the number
         of valid bytes in this output stream.
@see     java.io.ByteArrayOutputStream#count
"
      end

      operation 439938 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the buffer's contents into a string decoding bytes using the
platform's default character set. The length of the new <tt>String</tt>
is a function of the character set, and hence may not be equal to the
size of the buffer.

<p> This method always replaces malformed-input and unmappable-character
sequences with the default replacement string for the platform's
default character set. The {@linkplain java.nio.charset.CharsetDecoder}
class should be used when more control over the decoding process is
required.

@return String decoded from the buffer's contents.
@since  JDK1.1
"
      end

      operation 440066 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the buffer's contents into a string by decoding the bytes using
the named {@link java.nio.charset.Charset charset}. The length of the new
<tt>String</tt> is a function of the charset, and hence may not be equal
to the length of the byte array.

<p> This method always replaces malformed-input and unmappable-character
sequences with this charset's default replacement string. The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param      charsetName  the name of a supported
            {@link java.nio.charset.Charset charset}
@return     String decoded from the buffer's contents.
@exception  UnsupportedEncodingException
            If the named charset is not supported
@since      JDK1.1
"
      end

      operation 440194 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "hibyte" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a newly allocated string. Its size is the current size of
the output stream and the valid contents of the buffer have been
copied into it. Each character <i>c</i> in the resulting string is
constructed from the corresponding element <i>b</i> in the byte
array such that:
<blockquote><pre>
    c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
</pre></blockquote>

@deprecated This method does not properly convert bytes into characters.
As of JDK&nbsp;1.1, the preferred way to do this is via the
<code>toString(String enc)</code> method, which takes an encoding-name
argument, or the <code>toString()</code> method, which uses the
platform's default character encoding.

@param      hibyte    the high byte of each resulting Unicode character.
@return     the current contents of the output stream, as a string.
@see        java.io.ByteArrayOutputStream#size()
@see        java.io.ByteArrayOutputStream#toString(String)
@see        java.io.ByteArrayOutputStream#toString()
"
      end

      operation 440322 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in
this class can be called after the stream has been closed without
generating an <tt>IOException</tt>.
"
      end
    end

    class 173826 "UnsupportedEncodingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Character Encoding is not supported.

@author  Asmus Freytag
@since   JDK1.1
"
      classrelation 3144322 // <generalisation>
	relation 3144322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3144322 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1659778 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4274276298326136670L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6944770 "UnsupportedEncodingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnsupportedEncodingException without a detail message.
"
      end

      operation 6944898 "UnsupportedEncodingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnsupportedEncodingException with a detail message.
@param s Describes the reason for the exception.
"
      end
    end

    class 174082 "ObjectOutput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ObjectOutput extends the DataOutput interface to include writing of objects.
DataOutput includes methods for output of primitive types, ObjectOutput
extends that interface to include objects, arrays, and Strings.

@author  unascribed
@see java.io.InputStream
@see java.io.ObjectOutputStream
@see java.io.ObjectInputStream
@since   JDK1.1
"
      classrelation 191106 // <generalisation>
	relation 191106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 191106 // <generalisation>
	  b parent class_ref 174210 // DataOutput
      end

      classrelation 191234 // <generalisation>
	relation 191234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 191234 // <generalisation>
	  b parent class_ref 146690 // AutoCloseable
      end

      operation 442498 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an object to the underlying storage or stream.  The
class that implements this interface defines how the object is
written.

@param obj the object to be written
@exception IOException Any of the usual Input/Output related exceptions.
"
      end

      operation 442626 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a byte. This method will block until the byte is actually
written.
@param b the byte
@exception IOException If an I/O error has occurred.
"
      end

      operation 442754 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an array of bytes. This method will block until the bytes
are actually written.
@param b the data to be written
@exception IOException If an I/O error has occurred.
"
      end

      operation 442882 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a sub array of bytes.
@param b the data to be written
@param off       the start offset in the data
@param len       the number of bytes that are written
@exception IOException If an I/O error has occurred.
"
      end

      operation 443010 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream. This will write any buffered
output bytes.
@exception IOException If an I/O error has occurred.
"
      end

      operation 443138 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream. This method must be called
to release any resources associated with the
stream.
@exception IOException If an I/O error has occurred.
"
      end
    end

    class 174210 "DataOutput"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>DataOutput</code> interface provides
for converting data from any of the Java
primitive types to a series of bytes and
writing these bytes to a binary stream.
There is  also a facility for converting
a <code>String</code> into
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format and writing the resulting series
of bytes.
<p>
For all the methods in this interface that
write bytes, it is generally true that if
a byte cannot be written for any reason,
an <code>IOException</code> is thrown.

@author  Frank Yellin
@see     java.io.DataInput
@see     java.io.DataOutputStream
@since   JDK1.0
"
      operation 440706 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes to the output stream the eight
low-order bits of the argument <code>b</code>.
The 24 high-order  bits of <code>b</code>
are ignored.

@param      b   the byte to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 440834 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes to the output stream all the bytes in array <code>b</code>.
If <code>b</code> is <code>null</code>,
a <code>NullPointerException</code> is thrown.
If <code>b.length</code> is zero, then
no bytes are written. Otherwise, the byte
<code>b[0]</code> is written first, then
<code>b[1]</code>, and so on; the last byte
written is <code>b[b.length-1]</code>.

@param      b   the data.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 440962 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from array
<code>b</code>, in order,  to
the output stream.  If <code>b</code>
is <code>null</code>, a <code>NullPointerException</code>
is thrown.  If <code>off</code> is negative,
or <code>len</code> is negative, or <code>off+len</code>
is greater than the length of the array
<code>b</code>, then an <code>IndexOutOfBoundsException</code>
is thrown.  If <code>len</code> is zero,
then no bytes are written. Otherwise, the
byte <code>b[off]</code> is written first,
then <code>b[off+1]</code>, and so on; the
last byte written is <code>b[off+len-1]</code>.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441090 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>boolean</code> value to this output stream.
If the argument <code>v</code>
is <code>true</code>, the value <code>(byte)1</code>
is written; if <code>v</code> is <code>false</code>,
the  value <code>(byte)0</code> is written.
The byte written by this method may
be read by the <code>readBoolean</code>
method of interface <code>DataInput</code>,
which will then return a <code>boolean</code>
equal to <code>v</code>.

@param      v   the boolean to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441218 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes to the output stream the eight low-
order bits of the argument <code>v</code>.
The 24 high-order bits of <code>v</code>
are ignored. (This means  that <code>writeByte</code>
does exactly the same thing as <code>write</code>
for an integer argument.) The byte written
by this method may be read by the <code>readByte</code>
method of interface <code>DataInput</code>,
which will then return a <code>byte</code>
equal to <code>(byte)v</code>.

@param      v   the byte value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441346 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes two bytes to the output
stream to represent the value of the argument.
The byte values to be written, in the  order
shown, are:
<pre>{@code
(byte)(0xff & (v >> 8))
(byte)(0xff & v)
}</pre> <p>
The bytes written by this method may be
read by the <code>readShort</code> method
of interface <code>DataInput</code> , which
will then return a <code>short</code> equal
to <code>(short)v</code>.

@param      v   the <code>short</code> value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441474 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>char</code> value, which
is comprised of two bytes, to the
output stream.
The byte values to be written, in the  order
shown, are:
<pre>{@code
(byte)(0xff & (v >> 8))
(byte)(0xff & v)
}</pre><p>
The bytes written by this method may be
read by the <code>readChar</code> method
of interface <code>DataInput</code> , which
will then return a <code>char</code> equal
to <code>(char)v</code>.

@param      v   the <code>char</code> value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441602 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an <code>int</code> value, which is
comprised of four bytes, to the output stream.
The byte values to be written, in the  order
shown, are:
<pre>{@code
(byte)(0xff & (v >> 24))
(byte)(0xff & (v >> 16))
(byte)(0xff & (v >>  8))
(byte)(0xff & v)
}</pre><p>
The bytes written by this method may be read
by the <code>readInt</code> method of interface
<code>DataInput</code> , which will then
return an <code>int</code> equal to <code>v</code>.

@param      v   the <code>int</code> value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441730 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>long</code> value, which is
comprised of eight bytes, to the output stream.
The byte values to be written, in the  order
shown, are:
<pre>{@code
(byte)(0xff & (v >> 56))
(byte)(0xff & (v >> 48))
(byte)(0xff & (v >> 40))
(byte)(0xff & (v >> 32))
(byte)(0xff & (v >> 24))
(byte)(0xff & (v >> 16))
(byte)(0xff & (v >>  8))
(byte)(0xff & v)
}</pre><p>
The bytes written by this method may be
read by the <code>readLong</code> method
of interface <code>DataInput</code> , which
will then return a <code>long</code> equal
to <code>v</code>.

@param      v   the <code>long</code> value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441858 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>float</code> value,
which is comprised of four bytes, to the output stream.
It does this as if it first converts this
<code>float</code> value to an <code>int</code>
in exactly the manner of the <code>Float.floatToIntBits</code>
method  and then writes the <code>int</code>
value in exactly the manner of the  <code>writeInt</code>
method.  The bytes written by this method
may be read by the <code>readFloat</code>
method of interface <code>DataInput</code>,
which will then return a <code>float</code>
equal to <code>v</code>.

@param      v   the <code>float</code> value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 441986 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>double</code> value,
which is comprised of eight bytes, to the output stream.
It does this as if it first converts this
<code>double</code> value to a <code>long</code>
in exactly the manner of the <code>Double.doubleToLongBits</code>
method  and then writes the <code>long</code>
value in exactly the manner of the  <code>writeLong</code>
method. The bytes written by this method
may be read by the <code>readDouble</code>
method of interface <code>DataInput</code>,
which will then return a <code>double</code>
equal to <code>v</code>.

@param      v   the <code>double</code> value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 442114 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the output stream.
For every character in the string
<code>s</code>,  taken in order, one byte
is written to the output stream.  If
<code>s</code> is <code>null</code>, a <code>NullPointerException</code>
is thrown.<p>  If <code>s.length</code>
is zero, then no bytes are written. Otherwise,
the character <code>s[0]</code> is written
first, then <code>s[1]</code>, and so on;
the last character written is <code>s[s.length-1]</code>.
For each character, one byte is written,
the low-order byte, in exactly the manner
of the <code>writeByte</code> method . The
high-order eight bits of each character
in the string are ignored.

@param      s   the string of bytes to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 442242 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes every character in the string <code>s</code>,
to the output stream, in order,
two bytes per character. If <code>s</code>
is <code>null</code>, a <code>NullPointerException</code>
is thrown.  If <code>s.length</code>
is zero, then no characters are written.
Otherwise, the character <code>s[0]</code>
is written first, then <code>s[1]</code>,
and so on; the last character written is
<code>s[s.length-1]</code>. For each character,
two bytes are actually written, high-order
byte first, in exactly the manner of the
<code>writeChar</code> method.

@param      s   the string value to be written.
@throws     IOException  if an I/O error occurs.
"
      end

      operation 442370 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes two bytes of length information
to the output stream, followed
by the
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
representation
of  every character in the string <code>s</code>.
If <code>s</code> is <code>null</code>,
a <code>NullPointerException</code> is thrown.
Each character in the string <code>s</code>
is converted to a group of one, two, or
three bytes, depending on the value of the
character.<p>
If a character <code>c</code>
is in the range <code>&#92;u0001</code> through
<code>&#92;u007f</code>, it is represented
by one byte:
<pre>(byte)c </pre>  <p>
If a character <code>c</code> is <code>&#92;u0000</code>
or is in the range <code>&#92;u0080</code>
through <code>&#92;u07ff</code>, then it is
represented by two bytes, to be written
in the order shown: <pre>{@code
(byte)(0xc0 | (0x1f & (c >> 6)))
(byte)(0x80 | (0x3f & c))
}</pre> <p> If a character
<code>c</code> is in the range <code>&#92;u0800</code>
through <code>uffff</code>, then it is
represented by three bytes, to be written
in the order shown: <pre>{@code
(byte)(0xe0 | (0x0f & (c >> 12)))
(byte)(0x80 | (0x3f & (c >>  6)))
(byte)(0x80 | (0x3f & c))
}</pre>  <p> First,
the total number of bytes needed to represent
all the characters of <code>s</code> is
calculated. If this number is larger than
<code>65535</code>, then a <code>UTFDataFormatException</code>
is thrown. Otherwise, this length is written
to the output stream in exactly the manner
of the <code>writeShort</code> method;
after this, the one-, two-, or three-byte
representation of each character in the
string <code>s</code> is written.<p>  The
bytes written by this method may be read
by the <code>readUTF</code> method of interface
<code>DataInput</code> , which will then
return a <code>String</code> equal to <code>s</code>.

@param      s   the string value to be written.
@throws     IOException  if an I/O error occurs.
"
      end
    end

    class 175234 "DataOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A data output stream lets an application write primitive Java data
types to an output stream in a portable way. An application can
then use a data input stream to read the data back in.

@author  unascribed
@see     java.io.DataInputStream
@since   JDK1.0
"
      classrelation 3124738 // <generalisation>
	relation 3124738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3124738 // <generalisation>
	  b parent class_ref 921730 // FilterOutputStream
      end

      classrelation 3124866 // <realization>
	relation 3124866 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3124866 // <realization>
	  b parent class_ref 174210 // DataOutput
      end

      attribute 1639170 "written"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of bytes written to the data output stream so far.
If this counter overflows, it will be wrapped to Integer.MAX_VALUE.

"
      end

      attribute 1639298 "bytearr"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "bytearr is initialized on demand by writeUTF

"
      end

      operation 6856450 "DataOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new data output stream to write data to the specified
underlying output stream. The counter <code>written</code> is
set to zero.

@param   out   the underlying output stream, to be saved for later
               use.
@see     java.io.FilterOutputStream#out
"
      end

      operation 6856578 "incCount"
	private explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increases the written counter by the specified value
until it reaches Integer.MAX_VALUE.
"
      end

      operation 6856706 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte (the low eight bits of the argument
<code>b</code>) to the underlying output stream. If no exception
is thrown, the counter <code>written</code> is incremented by
<code>1</code>.
<p>
Implements the <code>write</code> method of <code>OutputStream</code>.

@param      b   the <code>byte</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6856834 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array
starting at offset <code>off</code> to the underlying output stream.
If no exception is thrown, the counter <code>written</code> is
incremented by <code>len</code>.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6856962 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this data output stream. This forces any buffered output
bytes to be written out to the stream.
<p>
The <code>flush</code> method of <code>DataOutputStream</code>
calls the <code>flush</code> method of its underlying output stream.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
@see        java.io.OutputStream#flush()
"
      end

      operation 6857090 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>boolean</code> to the underlying output stream as
a 1-byte value. The value <code>true</code> is written out as the
value <code>(byte)1</code>; the value <code>false</code> is
written out as the value <code>(byte)0</code>. If no exception is
thrown, the counter <code>written</code> is incremented by
<code>1</code>.

@param      v   a <code>boolean</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6857218 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes out a <code>byte</code> to the underlying output stream as
a 1-byte value. If no exception is thrown, the counter
<code>written</code> is incremented by <code>1</code>.

@param      v   a <code>byte</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6857346 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>short</code> to the underlying output stream as two
bytes, high byte first. If no exception is thrown, the counter
<code>written</code> is incremented by <code>2</code>.

@param      v   a <code>short</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6857474 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>char</code> to the underlying output stream as a
2-byte value, high byte first. If no exception is thrown, the
counter <code>written</code> is incremented by <code>2</code>.

@param      v   a <code>char</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6857602 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an <code>int</code> to the underlying output stream as four
bytes, high byte first. If no exception is thrown, the counter
<code>written</code> is incremented by <code>4</code>.

@param      v   an <code>int</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      attribute 1639426 "writeBuffer"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[8]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6857730 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a <code>long</code> to the underlying output stream as eight
bytes, high byte first. In no exception is thrown, the counter
<code>written</code> is incremented by <code>8</code>.

@param      v   a <code>long</code> to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6857858 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the float argument to an <code>int</code> using the
<code>floatToIntBits</code> method in class <code>Float</code>,
and then writes that <code>int</code> value to the underlying
output stream as a 4-byte quantity, high byte first. If no
exception is thrown, the counter <code>written</code> is
incremented by <code>4</code>.

@param      v   a <code>float</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
@see        java.lang.Float#floatToIntBits(float)
"
      end

      operation 6857986 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the double argument to a <code>long</code> using the
<code>doubleToLongBits</code> method in class <code>Double</code>,
and then writes that <code>long</code> value to the underlying
output stream as an 8-byte quantity, high byte first. If no
exception is thrown, the counter <code>written</code> is
incremented by <code>8</code>.

@param      v   a <code>double</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
@see        java.lang.Double#doubleToLongBits(double)
"
      end

      operation 6858114 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes out the string to the underlying output stream as a
sequence of bytes. Each character in the string is written out, in
sequence, by discarding its high eight bits. If no exception is
thrown, the counter <code>written</code> is incremented by the
length of <code>s</code>.

@param      s   a string of bytes to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6858242 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the underlying output stream as a sequence of
characters. Each character is written to the data output stream as
if by the <code>writeChar</code> method. If no exception is
thrown, the counter <code>written</code> is incremented by twice
the length of <code>s</code>.

@param      s   a <code>String</code> value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.DataOutputStream#writeChar(int)
@see        java.io.FilterOutputStream#out
"
      end

      operation 6858370 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the underlying output stream using
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
encoding in a machine-independent manner.
<p>
First, two bytes are written to the output stream as if by the
<code>writeShort</code> method giving the number of bytes to
follow. This value is the number of bytes actually written out,
not the length of the string. Following the length, each character
of the string is output, in sequence, using the modified UTF-8 encoding
for the character. If no exception is thrown, the counter
<code>written</code> is incremented by the total number of
bytes written to the output stream. This will be at least two
plus the length of <code>str</code>, and at most two plus
thrice the length of <code>str</code>.

@param      str   a string to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6858498 "writeUTF"
	class_operation package explicit_return_type "int"
	nparams 2
	  param inout name "str" type class_ref 128130 // String
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the specified DataOutput using
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
encoding in a machine-independent manner.
<p>
First, two bytes are written to out as if by the <code>writeShort</code>
method giving the number of bytes to follow. This value is the number of
bytes actually written out, not the length of the string. Following the
length, each character of the string is output, in sequence, using the
modified UTF-8 encoding for the character. If no exception is thrown, the
counter <code>written</code> is incremented by the total number of
bytes written to the output stream. This will be at least two
plus the length of <code>str</code>, and at most two plus
thrice the length of <code>str</code>.

@param      str   a string to be written.
@param      out   destination to write to
@return     The number of bytes written out.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6858626 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the counter <code>written</code>,
the number of bytes written to this data output stream so far.
If the counter overflows, it will be wrapped to Integer.MAX_VALUE.

@return  the value of the <code>written</code> field.
@see     java.io.DataOutputStream#written
"
      end
    end

    class 193154 "ObjectStreamField"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A description of a Serializable field from a Serializable class.  An array
of ObjectStreamFields is used to declare the Serializable fields of a class.

@author      Mike Warres
@author      Roger Riggs
@see ObjectStreamClass
@since 1.2
"
      classrelation 3136642 // <realization>
	relation 3136642 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3136642 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3136770 // name (<unidirectional association>)
	relation 3136770 --->
	  a role_name "name" const_relation private
	    comment " field name 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3136770 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3136898 // signature (<unidirectional association>)
	relation 3136898 --->
	  a role_name "signature" const_relation private
	    comment " canonical JVM signature of field type 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3136898 // signature (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3137026 // type (<unidirectional association>)
	relation 3137026 --->
	  a role_name "type" const_relation private
	    comment " field type (Object.class if unknown non-primitive type) 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3137026 // type (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1650818 "unshared"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " whether or not to (de)serialize field values as unshared 
"
      end

      classrelation 3137154 // field (<unidirectional association>)
	relation 3137154 --->
	  a role_name "field" const_relation private
	    comment " corresponding reflective field object, if any 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3137154 // field (<unidirectional association>)
	  b parent class_ref 189698 // Field
      end

      attribute 1650946 "offset"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " offset of field value in enclosing field group 
"
      end

      operation 6901122 "ObjectStreamField"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Serializable field with the specified type.  This field should
be documented with a <code>serialField</code> tag.

@param   name the name of the serializable field
@param   type the <code>Class</code> object of the serializable field
"
      end

      operation 6901250 "ObjectStreamField"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "unshared" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectStreamField representing a serializable field with the
given name and type.  If unshared is false, values of the represented
field are serialized and deserialized in the default manner--if the
field is non-primitive, object values are serialized and deserialized as
if they had been written and read by calls to writeObject and
readObject.  If unshared is true, values of the represented field are
serialized and deserialized as if they had been written and read by
calls to writeUnshared and readUnshared.

@param   name field name
@param   type field type
@param   unshared if false, write/read field values in the same manner
         as writeObject/readObject; if true, write/read in the same
         manner as writeUnshared/readUnshared
@since   1.4
"
      end

      operation 6901378 "ObjectStreamField"
	package explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "signature" type class_ref 128130 // String
	  param inout name "unshared" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectStreamField representing a field with the given name,
signature and unshared setting.
"
      end

      operation 6901506 "ObjectStreamField"
	package explicit_return_type ""
	nparams 3
	  param inout name "field" type class_ref 189698 // Field
	  param inout name "unshared" explicit_type "boolean"
	  param inout name "showType" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ObjectStreamField representing the given field with the
specified unshared setting.  For compatibility with the behavior of
earlier serialization implementations, a \"showType\" parameter is
necessary to govern whether or not a getType() call on this
ObjectStreamField (if non-primitive) will return Object.class (as
opposed to a more specific reference type).
"
      end

      operation 6901634 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of this field.

@return  a <code>String</code> representing the name of the serializable
         field
"
      end

      operation 6901762 "getType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Get the type of the field.  If the type is non-primitive and this
<code>ObjectStreamField</code> was obtained from a deserialized {@link
ObjectStreamClass} instance, then <code>Object.class</code> is returned.
Otherwise, the <code>Class</code> object for the type of the field is
returned.

@return  a <code>Class</code> object representing the type of the
         serializable field
"
      end

      operation 6901890 "getTypeCode"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns character encoding of field type.  The encoding is as follows:
<blockquote><pre>
B            byte
C            char
D            double
F            float
I            int
J            long
L            class or interface
S            short
Z            boolean
[            array
</pre></blockquote>

@return  the typecode of the serializable field

 REMIND: deprecate?"
      end

      operation 6902018 "getTypeString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the JVM type signature.

@return  null if this field has a primitive type.

 REMIND: deprecate?"
      end

      operation 6902146 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Offset of field within instance data.

@return  the offset of this field
@see #setOffset

 REMIND: deprecate?"
      end

      operation 6902274 "setOffset"
	protected explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Offset within instance data.

@param   offset the offset of the field
@see #getOffset

 REMIND: deprecate?"
      end

      operation 6902402 "isPrimitive"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if this field has a primitive type.

@return  true if and only if this field corresponds to a primitive type

 REMIND: deprecate?"
      end

      operation 6902530 "isUnshared"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns boolean value indicating whether or not the serializable field
represented by this ObjectStreamField instance is unshared.

@return {@code true} if this field is unshared

@since 1.4
"
      end

      operation 6902658 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this field with another <code>ObjectStreamField</code>.  Return
-1 if this is smaller, 0 if equal, 1 if greater.  Types that are
primitives are \"smaller\" than object types.  If equal, the field names
are compared.

 REMIND: deprecate?"
      end

      operation 6902786 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string that describes this field.
"
      end

      operation 6902914 "getField"
	package return_type class_ref 189698 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns field represented by this ObjectStreamField, or null if
ObjectStreamField is not associated with an actual field.
"
      end

      operation 6903042 "getSignature"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns JVM type signature of field (similar to getTypeString, except
that signature strings are returned for primitive fields as well).
"
      end

      operation 6903170 "getClassSignature"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns JVM type signature for given class.
"
      end
    end

    class 195330 "PrintWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Prints formatted representations of objects to a text-output stream.  This
class implements all of the <tt>print</tt> methods found in {@link
PrintStream}.  It does not contain methods for writing raw bytes, for which
a program should use unencoded byte streams.

<p> Unlike the {@link PrintStream} class, if automatic flushing is enabled
it will be done only when one of the <tt>println</tt>, <tt>printf</tt>, or
<tt>format</tt> methods is invoked, rather than whenever a newline character
happens to be output.  These methods use the platform's own notion of line
separator rather than the newline character.

<p> Methods in this class never throw I/O exceptions, although some of its
constructors may.  The client may inquire as to whether any errors have
occurred by invoking {@link #checkError checkError()}.

@author      Frank Yellin
@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3139458 // <generalisation>
	relation 3139458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3139458 // <generalisation>
	  b parent class_ref 428034 // Writer
      end

      classrelation 3139586 // out (<unidirectional association>)
	relation 3139586 --->
	  a role_name "out" protected
	    comment "
The underlying character-output stream of this
<code>PrintWriter</code>.

@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3139586 // out (<unidirectional association>)
	  b parent class_ref 428034 // Writer
      end

      attribute 1653890 "autoFlush"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1654018 "trouble"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3139714 // formatter (<unidirectional association>)
	relation 3139714 --->
	  a role_name "formatter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3139714 // formatter (<unidirectional association>)
	  b parent class_ref 922370 // Formatter
      end

      classrelation 3139842 // psOut (<unidirectional association>)
	relation 3139842 --->
	  a role_name "psOut" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3139842 // psOut (<unidirectional association>)
	  b parent class_ref 128258 // PrintStream
      end

      classrelation 3139970 // lineSeparator (<unidirectional association>)
	relation 3139970 --->
	  a role_name "lineSeparator" const_relation private
	    comment "
Line separator string.  This is the value of the line.separator
property at the moment that the stream was created.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3139970 // lineSeparator (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6915202 "toCharset"
	class_operation private return_type class_ref 853634 // Charset
	nparams 1
	  param inout name "csn" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a charset object for the given charset name.
@throws NullPointerException          is csn is null
@throws UnsupportedEncodingException  if the charset is not supported
"
      end

      operation 6915330 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 428034 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing.

@param  out        A character-output stream
"
      end

      operation 6915458 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 428034 // Writer
	  param inout name "autoFlush" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter.

@param  out        A character-output stream
@param  autoFlush  A boolean; if true, the <tt>println</tt>,
                   <tt>printf</tt>, or <tt>format</tt> methods will
                   flush the output buffer
"
      end

      operation 6915586 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, from an
existing OutputStream.  This convenience constructor creates the
necessary intermediate OutputStreamWriter, which will convert characters
into bytes using the default character encoding.

@param  out        An output stream

@see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)
"
      end

      operation 6915714 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter from an existing OutputStream.  This
convenience constructor creates the necessary intermediate
OutputStreamWriter, which will convert characters into bytes using the
default character encoding.

@param  out        An output stream
@param  autoFlush  A boolean; if true, the <tt>println</tt>,
                   <tt>printf</tt>, or <tt>format</tt> methods will
                   flush the output buffer

@see java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)
"
      end

      operation 6915842 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "fileName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file name.  This convenience constructor creates the necessary
intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
which will encode characters using the {@linkplain
java.nio.charset.Charset#defaultCharset() default charset} for this
instance of the Java virtual machine.

@param  fileName
        The name of the file to use as the destination of this writer.
        If the file exists then it will be truncated to zero size;
        otherwise, a new file will be created.  The output will be
        written to the file and is buffered.

@throws  FileNotFoundException
         If the given string does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@since  1.5
"
      end

      operation 6915970 "PrintWriter"
	private explicit_return_type ""
	nparams 2
	  param inout name "charset" type class_ref 853634 // Charset
	  param inout name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private constructor "
      end

      operation 6916098 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "fileName" type class_ref 128130 // String
	  param inout name "csn" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 580354 // FileNotFoundException
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file name and charset.  This convenience constructor creates
the necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  fileName
        The name of the file to use as the destination of this writer.
        If the file exists then it will be truncated to zero size;
        otherwise, a new file will be created.  The output will be
        written to the file and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given string does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(fileName)} denies write
         access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5
"
      end

      operation 6916226 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file.  This convenience constructor creates the necessary
intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
which will encode characters using the {@linkplain
java.nio.charset.Charset#defaultCharset() default charset} for this
instance of the Java virtual machine.

@param  file
        The file to use as the destination of this writer.  If the file
        exists then it will be truncated to zero size; otherwise, a new
        file will be created.  The output will be written to the file
        and is buffered.

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@since  1.5
"
      end

      operation 6916354 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 131970 // File
	  param inout name "csn" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 580354 // FileNotFoundException
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PrintWriter, without automatic line flushing, with the
specified file and charset.  This convenience constructor creates the
necessary intermediate {@link java.io.OutputStreamWriter
OutputStreamWriter}, which will encode characters using the provided
charset.

@param  file
        The file to use as the destination of this writer.  If the file
        exists then it will be truncated to zero size; otherwise, a new
        file will be created.  The output will be written to the file
        and is buffered.

@param  csn
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  FileNotFoundException
         If the given file object does not denote an existing, writable
         regular file and a new regular file of that name cannot be
         created, or if some other error occurs while opening or
         creating the file

@throws  SecurityException
         If a security manager is present and {@link
         SecurityManager#checkWrite checkWrite(file.getPath())}
         denies write access to the file

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  1.5
"
      end

      operation 6916482 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks to make sure that the stream has not been closed "
      end

      operation 6916610 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream.
@see #checkError()
"
      end

      operation 6916738 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream and releases any system resources associated
with it. Closing a previously closed stream has no effect.

@see #checkError()
"
      end

      operation 6916866 "checkError"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream if it's not closed and checks its error state.

@return <code>true</code> if the print stream has encountered an error,
         either on the underlying output stream or during a format
         conversion.
"
      end

      operation 6916994 "setError"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that an error has occurred.

<p> This method will cause subsequent invocations of {@link
#checkError()} to return <tt>true</tt> until {@link
#clearError()} is invoked.
"
      end

      operation 6917122 "clearError"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the error state of this stream.

<p> This method will cause subsequent invocations of {@link
#checkError()} to return <tt>false</tt> until another write
operation fails and invokes {@link #setError()}.

@since 1.6
"
      end

      operation 6917250 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exception-catching, synchronized output operations,
which also implement the write() methods of Writer


Writes a single character.
@param c int specifying a character to be written.
"
      end

      operation 6917378 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes A Portion of an array of characters.
@param buf Array of characters
@param off Offset from which to start writing characters
@param len Number of characters to write
"
      end

      operation 6917506 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buf" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an array of characters.  This method cannot be inherited from the
Writer class because it must suppress I/O exceptions.
@param buf Array of characters to be written
"
      end

      operation 6917634 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "s" type class_ref 128130 // String
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of a string.
@param s A String
@param off Offset from which to start writing characters
@param len Number of characters to write
"
      end

      operation 6917762 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string.  This method cannot be inherited from the Writer class
because it must suppress I/O exceptions.
@param s String to be written
"
      end

      operation 6917890 "newLine"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6918018 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do not terminate lines 

Prints a boolean value.  The string produced by <code>{@link
java.lang.String#valueOf(boolean)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      b   The <code>boolean</code> to be printed
"
      end

      operation 6918146 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a character.  The character is translated into one or more bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      c   The <code>char</code> to be printed
"
      end

      operation 6918274 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an integer.  The string produced by <code>{@link
java.lang.String#valueOf(int)}</code> is translated into bytes according
to the platform's default character encoding, and these bytes are
written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      i   The <code>int</code> to be printed
@see        java.lang.Integer#toString(int)
"
      end

      operation 6918402 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a long integer.  The string produced by <code>{@link
java.lang.String#valueOf(long)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      l   The <code>long</code> to be printed
@see        java.lang.Long#toString(long)
"
      end

      operation 6918530 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a floating-point number.  The string produced by <code>{@link
java.lang.String#valueOf(float)}</code> is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      f   The <code>float</code> to be printed
@see        java.lang.Float#toString(float)
"
      end

      operation 6918658 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a double-precision floating-point number.  The string produced by
<code>{@link java.lang.String#valueOf(double)}</code> is translated into
bytes according to the platform's default character encoding, and these
bytes are written in exactly the manner of the <code>{@link
#write(int)}</code> method.

@param      d   The <code>double</code> to be printed
@see        java.lang.Double#toString(double)
"
      end

      operation 6918786 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an array of characters.  The characters are converted into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      s   The array of chars to be printed

@throws  NullPointerException  If <code>s</code> is <code>null</code>
"
      end

      operation 6918914 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string.  If the argument is <code>null</code> then the string
<code>\"null\"</code> is printed.  Otherwise, the string's characters are
converted into bytes according to the platform's default character
encoding, and these bytes are written in exactly the manner of the
<code>{@link #write(int)}</code> method.

@param      s   The <code>String</code> to be printed
"
      end

      operation 6919042 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an object.  The string produced by the <code>{@link
java.lang.String#valueOf(Object)}</code> method is translated into bytes
according to the platform's default character encoding, and these bytes
are written in exactly the manner of the <code>{@link #write(int)}</code>
method.

@param      obj   The <code>Object</code> to be printed
@see        java.lang.Object#toString()
"
      end

      operation 6919170 "println"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that do terminate lines 

Terminates the current line by writing the line separator string.  The
line separator string is defined by the system property
<code>line.separator</code>, and is not necessarily a single newline
character (<code>'\\n'</code>).
"
      end

      operation 6919298 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a boolean value and then terminates the line.  This method behaves
as though it invokes <code>{@link #print(boolean)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>boolean</code> value to be printed
"
      end

      operation 6919426 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a character and then terminates the line.  This method behaves as
though it invokes <code>{@link #print(char)}</code> and then <code>{@link
#println()}</code>.

@param x the <code>char</code> value to be printed
"
      end

      operation 6919554 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an integer and then terminates the line.  This method behaves as
though it invokes <code>{@link #print(int)}</code> and then <code>{@link
#println()}</code>.

@param x the <code>int</code> value to be printed
"
      end

      operation 6919682 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a long integer and then terminates the line.  This method behaves
as though it invokes <code>{@link #print(long)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>long</code> value to be printed
"
      end

      operation 6919810 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a floating-point number and then terminates the line.  This method
behaves as though it invokes <code>{@link #print(float)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>float</code> value to be printed
"
      end

      operation 6919938 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a double-precision floating-point number and then terminates the
line.  This method behaves as though it invokes <code>{@link
#print(double)}</code> and then <code>{@link #println()}</code>.

@param x the <code>double</code> value to be printed
"
      end

      operation 6920066 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an array of characters and then terminates the line.  This method
behaves as though it invokes <code>{@link #print(char[])}</code> and then
<code>{@link #println()}</code>.

@param x the array of <code>char</code> values to be printed
"
      end

      operation 6920194 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a String and then terminates the line.  This method behaves as
though it invokes <code>{@link #print(String)}</code> and then
<code>{@link #println()}</code>.

@param x the <code>String</code> value to be printed
"
      end

      operation 6920322 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints an Object and then terminates the line.  This method calls
at first String.valueOf(x) to get the printed object's string value,
then behaves as
though it invokes <code>{@link #print(String)}</code> and then
<code>{@link #println()}</code>.

@param x  The <code>Object</code> to be printed.
"
      end

      operation 6920450 "printf"
	public return_type class_ref 195330 // PrintWriter
	nparams 2
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this writer using
the specified format string and arguments.  If automatic flushing is
enabled, calls to this method will flush the output buffer.

<p> An invocation of this method of the form <tt>out.printf(format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(format, args) </pre>

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5
"
      end

      operation 6920578 "printf"
	public return_type class_ref 195330 // PrintWriter
	nparams 3
	  param inout name "l" type class_ref 312962 // Locale
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this writer using
the specified format string and arguments.  If automatic flushing is
enabled, calls to this method will flush the output buffer.

<p> An invocation of this method of the form <tt>out.printf(l, format,
args)</tt> behaves in exactly the same way as the invocation

<pre>
    out.format(l, format, args) </pre>

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5
"
      end

      operation 6920706 "format"
	public return_type class_ref 195330 // PrintWriter
	nparams 2
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this writer using the specified format
string and arguments.  If automatic flushing is enabled, calls to this
method will flush the output buffer.

<p> The locale always used is the one returned by {@link
java.util.Locale#getDefault() Locale.getDefault()}, regardless of any
previous invocations of other formatting methods on this object.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         Formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5
"
      end

      operation 6920834 "format"
	public return_type class_ref 195330 // PrintWriter
	nparams 3
	  param inout name "l" type class_ref 312962 // Locale
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this writer using the specified format
string and arguments.  If automatic flushing is enabled, calls to this
method will flush the output buffer.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  java.util.IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  This writer

@since  1.5
"
      end

      operation 6920962 "append"
	public return_type class_ref 195330 // PrintWriter
	nparams 1
	  param inout name "csq" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@since  1.5
"
      end

      operation 6921090 "append"
	public return_type class_ref 195330 // PrintWriter
	nparams 3
	  param inout name "csq" type class_ref 429442 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5
"
      end

      operation 6921218 "append"
	public return_type class_ref 195330 // PrintWriter
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@since 1.5
"
      end
    end

    class 250370 "StringWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A character stream that collects its output in a string buffer, which can
then be used to construct a string.
<p>
Closing a <tt>StringWriter</tt> has no effect. The methods in this class
can be called after the stream has been closed without generating an
<tt>IOException</tt>.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3143298 // <generalisation>
	relation 3143298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3143298 // <generalisation>
	  b parent class_ref 428034 // Writer
      end

      classrelation 3143426 // buf (<unidirectional association>)
	relation 3143426 --->
	  a role_name "buf" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3143426 // buf (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      operation 6938114 "StringWriter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new string writer using the default initial string-buffer
size.
"
      end

      operation 6938242 "StringWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "initialSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new string writer using the specified initial string-buffer
size.

@param initialSize
       The number of <tt>char</tt> values that will fit into this buffer
       before it is automatically expanded

@throws IllegalArgumentException
        If <tt>initialSize</tt> is negative
"
      end

      operation 6938370 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a single character.
"
      end

      operation 6938498 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of an array of characters.

@param  cbuf  Array of characters
@param  off   Offset from which to start writing characters
@param  len   Number of characters to write
"
      end

      operation 6938626 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a string.
"
      end

      operation 6938754 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 128130 // String
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string.

@param  str  String to be written
@param  off  Offset from which to start writing characters
@param  len  Number of characters to write
"
      end

      operation 6938882 "append"
	public return_type class_ref 250370 // StringWriter
	nparams 1
	  param inout name "csq" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@since  1.5
"
      end

      operation 6939010 "append"
	public return_type class_ref 250370 // StringWriter
	nparams 3
	  param inout name "csq" type class_ref 429442 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5
"
      end

      operation 6939138 "append"
	public return_type class_ref 250370 // StringWriter
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@since 1.5
"
      end

      operation 6939266 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the buffer's current value as a string.
"
      end

      operation 6939394 "getBuffer"
	public return_type class_ref 166018 // StringBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the string buffer itself.

@return StringBuffer holding the current buffer value.
"
      end

      operation 6939522 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.
"
      end

      operation 6939650 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closing a <tt>StringWriter</tt> has no effect. The methods in this
class can be called after the stream has been closed without generating
an <tt>IOException</tt>.
"
      end
    end

    class 261506 "ObjectStreamException"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Superclass of all exceptions specific to Object Stream classes.

@author  unascribed
@since   JDK1.1
"
      classrelation 3130498 // <generalisation>
	relation 3130498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3130498 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1646082 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7260898174833392607L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6885250 "ObjectStreamException"
	protected explicit_return_type ""
	nparams 1
	  param inout name "classname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an ObjectStreamException with the specified argument.

@param classname the detailed message for the exception
"
      end

      operation 6885378 "ObjectStreamException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an ObjectStreamException.
"
      end
    end

    class 407298 "Reader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class for reading character streams.  The only methods that a
subclass must implement are read(char[], int, int) and close().  Most
subclasses, however, will override some of the methods defined here in order
to provide higher efficiency, additional functionality, or both.


@see BufferedReader
@see   LineNumberReader
@see CharArrayReader
@see InputStreamReader
@see   FileReader
@see FilterReader
@see   PushbackReader
@see PipedReader
@see StringReader
@see Writer

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 1090562 // <realization>
	relation 1090562 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1090562 // <realization>
	  b parent class_ref 548354 // Readable
      end

      classrelation 1090690 // <realization>
	relation 1090690 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1090690 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 1090818 // lock (<unidirectional association>)
	relation 1090818 --->
	  a role_name "lock" protected
	    comment "
The object used to synchronize operations on this stream.  For
efficiency, a character-stream object may use an object other than
itself to protect critical sections.  A subclass should therefore use
the object in this field rather than <tt>this</tt> or a synchronized
method.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1090818 // lock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 3407490 "Reader"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new character-stream reader whose critical sections will
synchronize on the reader itself.
"
      end

      operation 3407618 "Reader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lock" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new character-stream reader whose critical sections will
synchronize on the given object.

@param lock  The Object to synchronize on.
"
      end

      operation 3407746 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 548482 // CharBuffer
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to read characters into the specified character buffer.
The buffer is used as a repository of characters as-is: the only
changes made are the results of a put operation. No flipping or
rewinding of the buffer is performed.

@param target the buffer to read characters into
@return The number of characters added to the buffer, or
        -1 if this source of characters is at its end
@throws IOException if an I/O error occurs
@throws NullPointerException if target is null
@throws java.nio.ReadOnlyBufferException if target is a read only buffer
@since 1.5
"
      end

      operation 3407874 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character.  This method will block until a character is
available, an I/O error occurs, or the end of the stream is reached.

<p> Subclasses that intend to support efficient single-character input
should override this method.

@return     The character read, as an integer in the range 0 to 65535
            (<tt>0x00-0xffff</tt>), or -1 if the end of the stream has
            been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 3408002 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into an array.  This method will block until some input
is available, an I/O error occurs, or the end of the stream is reached.

@param       cbuf  Destination buffer

@return      The number of characters read, or -1
             if the end of the stream
             has been reached

@exception   IOException  If an I/O error occurs
"
      end

      operation 3408130 "read"
	abstract public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array.  This method will block
until some input is available, an I/O error occurs, or the end of the
stream is reached.

@param      cbuf  Destination buffer
@param      off   Offset at which to start storing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      attribute 755458 "maxSkipBufferSize"
	class_attribute const_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum skip-buffer size 
"
      end

      attribute 755586 "skipBuffer"
	private explicit_type "char"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Skip buffer, null until allocated 
"
      end

      operation 3408258 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips characters.  This method will block until some characters are
available, an I/O error occurs, or the end of the stream is reached.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IllegalArgumentException  If <code>n</code> is negative.
@exception  IOException  If an I/O error occurs
"
      end

      operation 3408386 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream is ready to be read.

@return True if the next read() is guaranteed not to block for input,
false otherwise.  Note that returning false does not guarantee that the
next read will block.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3408514 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream supports the mark() operation. The default
implementation always returns false. Subclasses should override this
method.

@return true if and only if this stream supports the mark operation.
"
      end

      operation 3408642 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point.  Not all
character-input streams support the mark() operation.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  After
                        reading this many characters, attempting to
                        reset the stream may fail.

@exception  IOException  If the stream does not support mark(),
                         or if some other I/O error occurs
"
      end

      operation 3408770 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the stream.  If the stream has been marked, then attempt to
reposition it at the mark.  If the stream has not been marked, then
attempt to reset it in some way appropriate to the particular stream,
for example by repositioning it to its starting point.  Not all
character-input streams support the reset() operation, and some support
reset() without supporting mark().

@exception  IOException  If the stream has not been marked,
                         or if the mark has been invalidated,
                         or if the stream does not support reset(),
                         or if some other I/O error occurs
"
      end

      operation 3408898 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream and releases any system resources associated with
it.  Once the stream has been closed, further read(), ready(),
mark(), reset(), or skip() invocations will throw an IOException.
Closing a previously closed stream has no effect.

@exception  IOException  If an I/O error occurs
"
      end
    end

    class 428034 "Writer"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class for writing to character streams.  The only methods that a
subclass must implement are write(char[], int, int), flush(), and close().
Most subclasses, however, will override some of the methods defined here in
order to provide higher efficiency, additional functionality, or both.

@see Writer
@see   BufferedWriter
@see   CharArrayWriter
@see   FilterWriter
@see   OutputStreamWriter
@see     FileWriter
@see   PipedWriter
@see   PrintWriter
@see   StringWriter
@see Reader

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 1091330 // <realization>
	relation 1091330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1091330 // <realization>
	  b parent class_ref 548866 // Appendable
      end

      classrelation 1091458 // <realization>
	relation 1091458 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1091458 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 1091586 // <realization>
	relation 1091586 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1091586 // <realization>
	  b parent class_ref 151426 // Flushable
      end

      attribute 755714 "writeBuffer"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Temporary buffer used to hold writes of strings and single characters

"
      end

      attribute 755842 "WRITE_BUFFER_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Size of writeBuffer, must be >= 1

"
      end

      classrelation 1091714 // lock (<unidirectional association>)
	relation 1091714 --->
	  a role_name "lock" protected
	    comment "
The object used to synchronize operations on this stream.  For
efficiency, a character-stream object may use an object other than
itself to protect critical sections.  A subclass should therefore use
the object in this field rather than <tt>this</tt> or a synchronized
method.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1091714 // lock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 3410946 "Writer"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new character-stream writer whose critical sections will
synchronize on the writer itself.
"
      end

      operation 3411074 "Writer"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lock" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new character-stream writer whose critical sections will
synchronize on the given object.

@param  lock
        Object to synchronize on
"
      end

      operation 3411202 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single character.  The character to be written is contained in
the 16 low-order bits of the given integer value; the 16 high-order bits
are ignored.

<p> Subclasses that intend to support efficient single-character output
should override this method.

@param  c
        int specifying a character to be written

@throws  IOException
         If an I/O error occurs
"
      end

      operation 3411330 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an array of characters.

@param  cbuf
        Array of characters to be written

@throws  IOException
         If an I/O error occurs
"
      end

      operation 3411458 "write"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of an array of characters.

@param  cbuf
        Array of characters

@param  off
        Offset from which to start writing characters

@param  len
        Number of characters to write

@throws  IOException
         If an I/O error occurs
"
      end

      operation 3411586 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string.

@param  str
        String to be written

@throws  IOException
         If an I/O error occurs
"
      end

      operation 3411714 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 128130 // String
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of a string.

@param  str
        A String

@param  off
        Offset from which to start writing characters

@param  len
        Number of characters to write

@throws  IndexOutOfBoundsException
         If <tt>off</tt> is negative, or <tt>len</tt> is negative,
         or <tt>off+len</tt> is negative or greater than the length
         of the given string

@throws  IOException
         If an I/O error occurs
"
      end

      operation 3411842 "append"
	public return_type class_ref 428034 // Writer
	nparams 1
	  param inout name "csq" type class_ref 429442 // CharSequence
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@throws  IOException
         If an I/O error occurs

@since  1.5
"
      end

      operation 3411970 "append"
	public return_type class_ref 428034 // Writer
	nparams 3
	  param inout name "csq" type class_ref 429442 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.
<tt>Appendable</tt>.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt> behaves in exactly the
same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@throws  IOException
         If an I/O error occurs

@since  1.5
"
      end

      operation 3412098 "append"
	public return_type class_ref 428034 // Writer
	nparams 1
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@throws  IOException
         If an I/O error occurs

@since 1.5
"
      end

      operation 3412226 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream.  If the stream has saved any characters from the
various write() methods in a buffer, write them immediately to their
intended destination.  Then, if that destination is another character or
byte stream, flush it.  Thus one flush() invocation will flush all the
buffers in a chain of Writers and OutputStreams.

<p> If the intended destination of this stream is an abstraction provided
by the underlying operating system, for example a file, then flushing the
stream guarantees only that bytes previously written to the stream are
passed to the operating system for writing; it does not guarantee that
they are actually written to a physical device such as a disk drive.

@throws  IOException
         If an I/O error occurs
"
      end

      operation 3412354 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream, flushing it first. Once the stream has been closed,
further write() or flush() invocations will cause an IOException to be
thrown. Closing a previously closed stream has no effect.

@throws  IOException
         If an I/O error occurs
"
      end
    end

    class 548226 "FilterReader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class for reading filtered character streams.
The abstract class <code>FilterReader</code> itself
provides default methods that pass all requests to
the contained stream. Subclasses of <code>FilterReader</code>
should override some of these methods and may also provide
additional methods and fields.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 1090946 // <generalisation>
	relation 1090946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1090946 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      classrelation 1091074 // in (<unidirectional association>)
	relation 1091074 --->
	  a role_name "in" protected
	    comment "
The underlying character-input stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1091074 // in (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      operation 3409026 "FilterReader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new filtered reader.

@param in  a Reader object providing the underlying stream.
@throws NullPointerException if <code>in</code> is <code>null</code>
"
      end

      operation 3409154 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3409282 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3409410 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips characters.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3409538 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream is ready to be read.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3409666 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream supports the mark() operation.
"
      end

      operation 3409794 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the present position in the stream.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3409922 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the stream.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3410050 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 548738 "FilterWriter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class for writing filtered character streams.
The abstract class <code>FilterWriter</code> itself
provides default methods that pass all requests to the
contained stream. Subclasses of <code>FilterWriter</code>
should override some of these methods and may also
provide additional methods and fields.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 1091842 // <generalisation>
	relation 1091842 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1091842 // <generalisation>
	  b parent class_ref 428034 // Writer
      end

      classrelation 1091970 // out (<unidirectional association>)
	relation 1091970 --->
	  a role_name "out" protected
	    comment "
The underlying character-output stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1091970 // out (<unidirectional association>)
	  b parent class_ref 428034 // Writer
      end

      operation 3412482 "FilterWriter"
	protected explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 428034 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new filtered writer.

@param out  a Writer object to provide the underlying stream.
@throws NullPointerException if <code>out</code> is <code>null</code>
"
      end

      operation 3412610 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single character.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3412738 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of an array of characters.

@param  cbuf  Buffer of characters to be written
@param  off   Offset from which to start reading characters
@param  len   Number of characters to be written

@exception  IOException  If an I/O error occurs
"
      end

      operation 3412866 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 128130 // String
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of a string.

@param  str  String to be written
@param  off  Offset from which to start reading characters
@param  len  Number of characters to be written

@exception  IOException  If an I/O error occurs
"
      end

      operation 3412994 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream.

@exception  IOException  If an I/O error occurs
"
      end

      operation 3413122 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 577922 "FilterInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>FilterInputStream</code> contains
some other input stream, which it uses as
its  basic source of data, possibly transforming
the data along the way or providing  additional
functionality. The class <code>FilterInputStream</code>
itself simply overrides all  methods of
<code>InputStream</code> with versions that
pass all requests to the contained  input
stream. Subclasses of <code>FilterInputStream</code>
may further override some of  these methods
and may also provide additional methods
and fields.

@author  Jonathan Payne
@since   JDK1.0
"
      classrelation 1166210 // <generalisation>
	relation 1166210 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1166210 // <generalisation>
	  b parent class_ref 146434 // InputStream
      end

      classrelation 1166338 // in (<unidirectional association>)
	relation 1166338 --->
	  a role_name "in" volatile protected
	    comment "
The input stream to be filtered.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1166338 // in (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      operation 3602050 "FilterInputStream"
	protected explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FilterInputStream</code>
by assigning the  argument <code>in</code>
to the field <code>this.in</code> so as
to remember it for later use.

@param   in   the underlying input stream, or <code>null</code> if
         this instance is to be created without an underlying stream.
"
      end

      operation 3602178 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value
byte is returned as an <code>int</code> in the range
<code>0</code> to <code>255</code>. If no byte is available
because the end of the stream has been reached, the value
<code>-1</code> is returned. This method blocks until input data
is available, the end of the stream is detected, or an exception
is thrown.
<p>
This method
simply performs <code>in.read()</code> and returns the result.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3602306 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>byte.length</code> bytes of data from this
input stream into an array of bytes. This method blocks until some
input is available.
<p>
This method simply performs the call
<code>read(b, 0, b.length)</code> and returns
the  result. It is important that it does
<i>not</i> do <code>in.read(b)</code> instead;
certain subclasses of  <code>FilterInputStream</code>
depend on the implementation strategy actually
used.

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#read(byte[], int, int)
"
      end

      operation 3602434 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream
into an array of bytes. If <code>len</code> is not zero, the method
blocks until some input is available; otherwise, no
bytes are read and <code>0</code> is returned.
<p>
This method simply performs <code>in.read(b, off, len)</code>
and returns the result.

@param      b     the buffer into which the data is read.
@param      off   the start offset in the destination array <code>b</code>
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3602562 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from the
input stream. The <code>skip</code> method may, for a variety of
reasons, end up skipping over some smaller number of bytes,
possibly <code>0</code>. The actual number of bytes skipped is
returned.
<p>
This method simply performs <code>in.skip(n)</code>.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if the stream does not support seek,
                         or if some other I/O error occurs.
"
      end

      operation 3602690 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of bytes that can be read (or
skipped over) from this input stream without blocking by the next
caller of a method for this input stream. The next caller might be
the same thread or another thread.  A single read or skip of this
many bytes will not block, but may read or skip fewer bytes.
<p>
This method returns the result of {@link #in in}.available().

@return     an estimate of the number of bytes that can be read (or skipped
            over) from this input stream without blocking.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 3602818 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources
associated with the stream.
This
method simply performs <code>in.close()</code>.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 3602946 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream. A subsequent
call to the <code>reset</code> method repositions this stream at
the last marked position so that subsequent reads re-read the same bytes.
<p>
The <code>readlimit</code> argument tells this input stream to
allow that many bytes to be read before the mark position gets
invalidated.
<p>
This method simply performs <code>in.mark(readlimit)</code>.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.FilterInputStream#in
@see     java.io.FilterInputStream#reset()
"
      end

      operation 3603074 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the
<code>mark</code> method was last called on this input stream.
<p>
This method
simply performs <code>in.reset()</code>.
<p>
Stream marks are intended to be used in
situations where you need to read ahead a little to see what's in
the stream. Often this is most easily done by invoking some
general parser. If the stream is of the type handled by the
parse, it just chugs along happily. If the stream is not of
that type, the parser should toss an exception when it fails.
If this happens within readlimit bytes, it allows the outer
code to reset the stream and try another parser.

@exception  IOException  if the stream has not been marked or if the
              mark has been invalidated.
@see        java.io.FilterInputStream#in
@see        java.io.FilterInputStream#mark(int)
"
      end

      operation 3603202 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code>
and <code>reset</code> methods.
This method
simply performs <code>in.markSupported()</code>.

@return  <code>true</code> if this stream type supports the
         <code>mark</code> and <code>reset</code> method;
         <code>false</code> otherwise.
@see     java.io.FilterInputStream#in
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()
"
      end
    end

    class 580226 "FileInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>FileInputStream</code> obtains input bytes
from a file in a file system. What files
are  available depends on the host environment.

<p><code>FileInputStream</code> is meant for reading streams of raw bytes
such as image data. For reading streams of characters, consider using
<code>FileReader</code>.

@author  Arthur van Hoff
@see     java.io.File
@see     java.io.FileDescriptor
@see     java.io.FileOutputStream
@see     java.nio.file.Files#newInputStream
@since   JDK1.0
"
      classrelation 3127426 // <generalisation>
	relation 3127426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3127426 // <generalisation>
	  b parent class_ref 146434 // InputStream
      end

      classrelation 3127554 // fd (<unidirectional association>)
	relation 3127554 --->
	  a role_name "fd" const_relation private
	    comment " File Descriptor - handle to the open file 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3127554 // fd (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      classrelation 3127682 // path (<unidirectional association>)
	relation 3127682 --->
	  a role_name "path" const_relation private
	    comment "
The path of the referenced file
(null if the stream is created with a file descriptor)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3127682 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3127810 // channel (<unidirectional association>)
	relation 3127810 --->
	  a role_name "channel" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3127810 // channel (<unidirectional association>)
	  b parent class_ref 924034 // FileChannel
      end

      classrelation 3127938 // closeLock (<unidirectional association>)
	relation 3127938 --->
	  a role_name "closeLock" init_value " new Object()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3127938 // closeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1641730 "closed"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6870274 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FileInputStream</code> by
opening a connection to an actual file,
the file named by the path name <code>name</code>
in the file system.  A new <code>FileDescriptor</code>
object is created to represent this file
connection.
<p>
First, if there is a security
manager, its <code>checkRead</code> method
is called with the <code>name</code> argument
as its argument.
<p>
If the named file does not exist, is a directory rather than a regular
file, or for some other reason cannot be opened for reading then a
<code>FileNotFoundException</code> is thrown.

@param      name   the system-dependent file name.
@exception  FileNotFoundException  if the file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading.
@exception  SecurityException      if a security manager exists and its
              <code>checkRead</code> method denies read access
              to the file.
@see        java.lang.SecurityManager#checkRead(java.lang.String)
"
      end

      operation 6870402 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FileInputStream</code> by
opening a connection to an actual file,
the file named by the <code>File</code>
object <code>file</code> in the file system.
A new <code>FileDescriptor</code> object
is created to represent this file connection.
<p>
First, if there is a security manager,
its <code>checkRead</code> method  is called
with the path represented by the <code>file</code>
argument as its argument.
<p>
If the named file does not exist, is a directory rather than a regular
file, or for some other reason cannot be opened for reading then a
<code>FileNotFoundException</code> is thrown.

@param      file   the file to be opened for reading.
@exception  FileNotFoundException  if the file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading.
@exception  SecurityException      if a security manager exists and its
              <code>checkRead</code> method denies read access to the file.
@see        java.io.File#getPath()
@see        java.lang.SecurityManager#checkRead(java.lang.String)
"
      end

      operation 6870530 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fdObj" type class_ref 923778 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FileInputStream</code> by using the file descriptor
<code>fdObj</code>, which represents an existing connection to an
actual file in the file system.
<p>
If there is a security manager, its <code>checkRead</code> method is
called with the file descriptor <code>fdObj</code> as its argument to
see if it's ok to read the file descriptor. If read access is denied
to the file descriptor a <code>SecurityException</code> is thrown.
<p>
If <code>fdObj</code> is null then a <code>NullPointerException</code>
is thrown.
<p>
This constructor does not throw an exception if <code>fdObj</code>
is {@link java.io.FileDescriptor#valid() invalid}.
However, if the methods are invoked on the resulting stream to attempt
I/O on the stream, an <code>IOException</code> is thrown.

@param      fdObj   the file descriptor to be opened for reading.
@throws     SecurityException      if a security manager exists and its
                <code>checkRead</code> method denies read access to the
                file descriptor.
@see        SecurityManager#checkRead(java.io.FileDescriptor)
"
      end

      operation 6870658 "open0"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment "Opens the specified file for reading.
@param name the name of the file
"
      end

      operation 6870786 "open"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " wrap native call to allow instrumentation

Opens the specified file for reading.
@param name the name of the file
"
      end

      operation 6870914 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte of data from this input stream. This method blocks
if no input is yet available.

@return     the next byte of data, or <code>-1</code> if the end of the
            file is reached.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6871042 "read0"
	private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 6871170 "readBytes"
	private explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Reads a subarray as a sequence of bytes.
@param b the data to be written
@param off the start offset in the data
@param len the number of bytes that are written
@exception IOException If an I/O error has occurred.
"
      end

      operation 6871298 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>b.length</code> bytes of data from this input
stream into an array of bytes. This method blocks until some input
is available.

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the file has been reached.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6871426 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream
into an array of bytes. If <code>len</code> is not zero, the method
blocks until some input is available; otherwise, no
bytes are read and <code>0</code> is returned.

@param      b     the buffer into which the data is read.
@param      off   the start offset in the destination array <code>b</code>
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the file has been reached.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6871554 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from the
input stream.

<p>The <code>skip</code> method may, for a variety of
reasons, end up skipping over some smaller number of bytes,
possibly <code>0</code>. If <code>n</code> is negative, the method
will try to skip backwards. In case the backing file does not support
backward skip at its current position, an <code>IOException</code> is
thrown. The actual number of bytes skipped is returned. If it skips
forwards, it returns a positive value. If it skips backwards, it
returns a negative value.

<p>This method may skip more bytes than what are remaining in the
backing file. This produces no exception and the number of bytes skipped
may include some number of bytes that were beyond the EOF of the
backing file. Attempting to read from the stream after skipping past
the end will result in -1 indicating the end of the file.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if n is negative, if the stream does not
            support seek, or if an I/O error occurs.
"
      end

      operation 6871682 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Returns an estimate of the number of remaining bytes that can be read (or
skipped over) from this input stream without blocking by the next
invocation of a method for this input stream. Returns 0 when the file
position is beyond EOF. The next invocation might be the same thread
or another thread. A single read or skip of this many bytes will not
block, but may read or skip fewer bytes.

<p> In some cases, a non-blocking read (or skip) may appear to be
blocked when it is merely slow, for example when reading large
files over slow networks.

@return     an estimate of the number of remaining bytes that can be read
            (or skipped over) from this input stream without blocking.
@exception  IOException  if this file input stream has been closed by calling
            {@code close} or an I/O error occurs.
"
      end

      operation 6871810 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this file input stream and releases any system resources
associated with the stream.

<p> If this stream has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs.

@revised 1.4
@spec JSR-51
"
      end

      operation 6871938 "getFD"
	public return_type class_ref 923778 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>FileDescriptor</code>
object  that represents the connection to
the actual file in the file system being
used by this <code>FileInputStream</code>.

@return     the file descriptor object associated with this stream.
@exception  IOException  if an I/O error occurs.
@see        java.io.FileDescriptor
"
      end

      operation 6872066 "getChannel"
	public return_type class_ref 924034 // FileChannel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file input stream.

<p> The initial {@link java.nio.channels.FileChannel#position()
position} of the returned channel will be equal to the
number of bytes read from the file so far.  Reading bytes from this
stream will increment the channel's position.  Changing the channel's
position, either explicitly or by reading, will change this stream's
file position.

@return  the file channel associated with this file input stream

@since 1.4
@spec JSR-51
"
      end

      operation 6872194 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 6872322 "close0"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 155522 "initialization"
	
	cpp "" ""
	java "  static {
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6872450 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the <code>close</code> method of this file input stream is
called when there are no more references to it.

@exception  IOException  if an I/O error occurs.
@see        java.io.FileInputStream#close()
"
      end
    end

    class 580354 "FileNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an attempt to open the file denoted by a specified pathname
has failed.

<p> This exception will be thrown by the {@link FileInputStream}, {@link
FileOutputStream}, and {@link RandomAccessFile} constructors when a file
with the specified pathname does not exist.  It will also be thrown by these
constructors if the file does exist but for some reason is inaccessible, for
example when an attempt is made to open a read-only file for writing.

@author  unascribed
@since   JDK1.0
"
      classrelation 3128066 // <generalisation>
	relation 3128066 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3128066 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1641858 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -897856973823710492L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6872706 "FileNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileNotFoundException</code> with
<code>null</code> as its error detail message.
"
      end

      operation 6872834 "FileNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileNotFoundException</code> with the
specified detail message. The string <code>s</code> can be
retrieved later by the
<code>{@link java.lang.Throwable#getMessage}</code>
method of class <code>java.lang.Throwable</code>.

@param   s   the detail message.
"
      end

      operation 6872962 "FileNotFoundException"
	private explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 128130 // String
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>FileNotFoundException</code> with a detail message
consisting of the given pathname string followed by the given reason
string.  If the <code>reason</code> argument is <code>null</code> then
it will be omitted.  This private constructor is invoked only by native
I/O methods.

@since 1.2
"
      end
    end

    class 580482 "FilenameFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Instances of classes that implement this interface are used to
filter filenames. These instances are used to filter directory
listings in the <code>list</code> method of class
<code>File</code>, and by the Abstract Window Toolkit's file
dialog component.

@author  Arthur van Hoff
@author  Jonathan Payne
@see     java.awt.FileDialog#setFilenameFilter(java.io.FilenameFilter)
@see     java.io.File
@see     java.io.File#list(java.io.FilenameFilter)
@since   JDK1.0
"
      operation 6872578 "accept"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "dir" type class_ref 131970 // File
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if a specified file should be included in a file list.

@param   dir    the directory in which the file was found.
@param   name   the name of the file.
@return  <code>true</code> if and only if the name should be
included in the file list; <code>false</code> otherwise.
"
      end
    end

    class 669442 "EOFException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an end of file or end of stream has been reached
unexpectedly during input.
<p>
This exception is mainly used by data input streams to signal end of
stream. Note that many other input operations return a special value on
end of stream rather than throwing an exception.

@author  Frank Yellin
@see     java.io.DataInputStream
@see     java.io.IOException
@since   JDK1.0
"
      classrelation 3125122 // <generalisation>
	relation 3125122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3125122 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1639554 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6433858223774886977L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6859266 "EOFException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>EOFException</code> with <code>null</code>
as its error detail message.
"
      end

      operation 6859394 "EOFException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>EOFException</code> with the specified detail
message. The string <code>s</code> may later be retrieved by the
<code>{@link java.lang.Throwable#getMessage}</code> method of class
<code>java.lang.Throwable</code>.

@param   s   the detail message.
"
      end
    end

    class 691586 "CharConversionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for character conversion exceptions.

@author      Asmus Freytag
@since       JDK1.1
"
      classrelation 1930114 // <generalisation>
	relation 1930114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1930114 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 990466 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8680016352018427031L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 4558978 "CharConversionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This provides no detailed message.
"
      end

      operation 4559106 "CharConversionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This provides a detailed message.

@param s the detailed message associated with the exception.
"
      end
    end

    class 917890 "OutputStreamWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An OutputStreamWriter is a bridge from character streams to byte streams:
Characters written to it are encoded into bytes using a specified {@link
java.nio.charset.Charset charset}.  The charset that it uses
may be specified by name or may be given explicitly, or the platform's
default charset may be accepted.

<p> Each invocation of a write() method causes the encoding converter to be
invoked on the given character(s).  The resulting bytes are accumulated in a
buffer before being written to the underlying output stream.  The size of
this buffer may be specified, but by default it is large enough for most
purposes.  Note that the characters passed to the write() methods are not
buffered.

<p> For top efficiency, consider wrapping an OutputStreamWriter within a
BufferedWriter so as to avoid frequent converter invocations.  For example:

<pre>
Writer out
  = new BufferedWriter(new OutputStreamWriter(System.out));
</pre>

<p> A <i>surrogate pair</i> is a character represented by a sequence of two
<tt>char</tt> values: A <i>high</i> surrogate in the range '&#92;uD800' to
'&#92;uDBFF' followed by a <i>low</i> surrogate in the range '&#92;uDC00' to
'&#92;uDFFF'.

<p> A <i>malformed surrogate element</i> is a high surrogate that is not
followed by a low surrogate or a low surrogate that is not preceded by a
high surrogate.

<p> This class always replaces malformed surrogate elements and unmappable
character sequences with the charset's default <i>substitution sequence</i>.
The {@linkplain java.nio.charset.CharsetEncoder} class should be used when more
control over the encoding process is required.

@see BufferedWriter
@see OutputStream
@see java.nio.charset.Charset

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3130114 // <generalisation>
	relation 3130114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3130114 // <generalisation>
	  b parent class_ref 428034 // Writer
      end

      attribute 1645698 "se"
	const_attribute private explicit_type "StreamEncoder"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6882946 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "charsetName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an OutputStreamWriter that uses the named charset.

@param  out
        An OutputStream

@param  charsetName
        The name of a supported
        {@link java.nio.charset.Charset charset}

@exception  UnsupportedEncodingException
            If the named encoding is not supported
"
      end

      operation 6883074 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an OutputStreamWriter that uses the default character encoding.

@param  out  An OutputStream
"
      end

      operation 6883202 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "cs" type class_ref 853634 // Charset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an OutputStreamWriter that uses the given charset.

@param  out
        An OutputStream

@param  cs
        A charset

@since 1.4
@spec JSR-51
"
      end

      operation 6883330 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "enc" type class_ref 167682 // CharsetEncoder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an OutputStreamWriter that uses the given charset encoder.

@param  out
        An OutputStream

@param  enc
        A charset encoder

@since 1.4
@spec JSR-51
"
      end

      operation 6883458 "getEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the character encoding being used by this stream.

<p> If the encoding has an historical name then that name is returned;
otherwise the encoding's canonical name is returned.

<p> If this instance was created with the {@link
#OutputStreamWriter(OutputStream, String)} constructor then the returned
name, being unique for the encoding, may differ from the name passed to
the constructor.  This method may return <tt>null</tt> if the stream has
been closed. </p>

@return The historical name of this encoding, or possibly
        <code>null</code> if the stream has been closed

@see java.nio.charset.Charset

@revised 1.4
@spec JSR-51
"
      end

      operation 6883586 "flushBuffer"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the output buffer to the underlying byte stream, without flushing
the byte stream itself.  This method is non-private only so that it may
be invoked by PrintStream.
"
      end

      operation 6883714 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single character.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6883842 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of an array of characters.

@param  cbuf  Buffer of characters
@param  off   Offset from which to start writing characters
@param  len   Number of characters to write

@exception  IOException  If an I/O error occurs
"
      end

      operation 6883970 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 128130 // String
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of a string.

@param  str  A String
@param  off  Offset from which to start writing characters
@param  len  Number of characters to write

@exception  IOException  If an I/O error occurs
"
      end

      operation 6884098 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6884226 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 921218 "Bits"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility methods for packing/unpacking primitive values in/out of byte arrays
using big-endian byte ordering.
"
      operation 6842114 "getBoolean"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for unpacking primitive values from byte arrays starting at
given offsets.
"
      end

      operation 6842242 "getChar"
	class_operation package explicit_return_type "char"
	nparams 2
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6842370 "getShort"
	class_operation package explicit_return_type "short"
	nparams 2
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6842498 "getInt"
	class_operation package explicit_return_type "int"
	nparams 2
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6842626 "getFloat"
	class_operation package explicit_return_type "float"
	nparams 2
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6842754 "getLong"
	class_operation package explicit_return_type "long"
	nparams 2
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6842882 "getDouble"
	class_operation package explicit_return_type "double"
	nparams 2
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6843010 "putBoolean"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for packing primitive values into byte arrays starting at given
offsets.
"
      end

      operation 6843138 "putChar"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6843266 "putShort"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6843394 "putInt"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6843522 "putFloat"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6843650 "putLong"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6843778 "putDouble"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 921346 "BufferedInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>BufferedInputStream</code> adds
functionality to another input stream-namely,
the ability to buffer the input and to
support the <code>mark</code> and <code>reset</code>
methods. When  the <code>BufferedInputStream</code>
is created, an internal buffer array is
created. As bytes  from the stream are read
or skipped, the internal buffer is refilled
as necessary  from the contained input stream,
many bytes at a time. The <code>mark</code>
operation  remembers a point in the input
stream and the <code>reset</code> operation
causes all the  bytes read since the most
recent <code>mark</code> operation to be
reread before new bytes are  taken from
the contained input stream.

@author  Arthur van Hoff
@since   JDK1.0
"
      classrelation 3121794 // <generalisation>
	relation 3121794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3121794 // <generalisation>
	  b parent class_ref 577922 // FilterInputStream
      end

      attribute 1634562 "DEFAULT_BUFFER_SIZE"
	class_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1634690 "MAX_BUFFER_SIZE"
	class_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE - 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum size of array to allocate.
Some VMs reserve some header words in an array.
Attempts to allocate larger arrays may result in
OutOfMemoryError: Requested array size exceeds VM limit

"
      end

      attribute 1634818 "buf"
	volatile protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The internal buffer array where the data is stored. When necessary,
it may be replaced by another array of
a different size.

"
      end

      classrelation 3121922 // bufUpdater (<unidirectional association>)
	relation 3121922 --->
	  a role_name "bufUpdater" init_value "
        AtomicReferenceFieldUpdater.newUpdater
        (BufferedInputStream.class,  byte[].class, \"buf\")" class_relation const_relation private
	    comment "
Atomic updater to provide compareAndSet for buf. This is
necessary because closes can be asynchronous. We use nullness
of buf[] as primary indicator that this stream is closed. (The
\"in\" field is also nulled out on close.)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<BufferedInputStream, byte[]> ${name}${value};
"
	    classrelation_ref 3121922 // bufUpdater (<unidirectional association>)
	  b parent class_ref 921474 // AtomicReferenceFieldUpdater
      end

      attribute 1634946 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index one greater than the index of the last valid byte in
the buffer.
This value is always
in the range <code>0</code> through <code>buf.length</code>;
elements <code>buf[0]</code>  through <code>buf[count-1]
</code>contain buffered input data obtained
from the underlying  input stream.

"
      end

      attribute 1635074 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The current position in the buffer. This is the index of the next
character to be read from the <code>buf</code> array.
<p>
This value is always in the range <code>0</code>
through <code>count</code>. If it is less
than <code>count</code>, then  <code>buf[pos]</code>
is the next byte to be supplied as input;
if it is equal to <code>count</code>, then
the  next <code>read</code> or <code>skip</code>
operation will require more bytes to be
read from the contained  input stream.

@see     java.io.BufferedInputStream#buf

"
      end

      attribute 1635202 "markpos"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The value of the <code>pos</code> field at the time the last
<code>mark</code> method was called.
<p>
This value is always
in the range <code>-1</code> through <code>pos</code>.
If there is no marked position in  the input
stream, this field is <code>-1</code>. If
there is a marked position in the input
stream,  then <code>buf[markpos]</code>
is the first byte to be supplied as input
after a <code>reset</code> operation. If
<code>markpos</code> is not <code>-1</code>,
then all bytes from positions <code>buf[markpos]</code>
through  <code>buf[pos-1]</code> must remain
in the buffer array (though they may be
moved to  another place in the buffer array,
with suitable adjustments to the values
of <code>count</code>,  <code>pos</code>,
and <code>markpos</code>); they may not
be discarded unless and until the difference
between <code>pos</code> and <code>markpos</code>
exceeds <code>marklimit</code>.

@see     java.io.BufferedInputStream#mark(int)
@see     java.io.BufferedInputStream#pos

"
      end

      attribute 1635330 "marklimit"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum read ahead allowed after a call to the
<code>mark</code> method before subsequent calls to the
<code>reset</code> method fail.
Whenever the difference between <code>pos</code>
and <code>markpos</code> exceeds <code>marklimit</code>,
then the  mark may be dropped by setting
<code>markpos</code> to <code>-1</code>.

@see     java.io.BufferedInputStream#mark(int)
@see     java.io.BufferedInputStream#reset()

"
      end

      operation 6843906 "getInIfOpen"
	private return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check to make sure that underlying input stream has not been
nulled out due to close; if not return it;
"
      end

      operation 6844034 "getBufIfOpen"
	private explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check to make sure that buffer has not been nulled out due to
close; if not return it;
"
      end

      operation 6844162 "BufferedInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>BufferedInputStream</code>
and saves its  argument, the input stream
<code>in</code>, for later use. An internal
buffer array is created and  stored in <code>buf</code>.

@param   in   the underlying input stream.
"
      end

      operation 6844290 "BufferedInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 146434 // InputStream
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>BufferedInputStream</code>
with the specified buffer size,
and saves its  argument, the input stream
<code>in</code>, for later use.  An internal
buffer array of length  <code>size</code>
is created and stored in <code>buf</code>.

@param   in     the underlying input stream.
@param   size   the buffer size.
@exception IllegalArgumentException if {@code size <= 0}.
"
      end

      operation 6844418 "fill"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fills the buffer with more data, taking into account
shuffling and other tricks for dealing with marks.
Assumes that it is being called by a synchronized method.
This method also assumes that all data has already been read in,
hence pos > count.
"
      end

      operation 6844546 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See
the general contract of the <code>read</code>
method of <code>InputStream</code>.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if this input stream has been closed by
                         invoking its {@link #close()} method,
                         or an I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 6844674 "read1"
	private explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read characters into a portion of an array, reading from the underlying
stream at most once if necessary.
"
      end

      operation 6844802 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this byte-input stream into the specified byte array,
starting at the given offset.

<p> This method implements the general contract of the corresponding
<code>{@link InputStream#read(byte[], int, int) read}</code> method of
the <code>{@link InputStream}</code> class.  As an additional
convenience, it attempts to read as many bytes as possible by repeatedly
invoking the <code>read</code> method of the underlying stream.  This
iterated <code>read</code> continues until one of the following
conditions becomes true: <ul>

  <li> The specified number of bytes have been read,

  <li> The <code>read</code> method of the underlying stream returns
  <code>-1</code>, indicating end-of-file, or

  <li> The <code>available</code> method of the underlying stream
  returns zero, indicating that further input requests would block.

</ul> If the first <code>read</code> on the underlying stream returns
<code>-1</code> to indicate end-of-file then this method returns
<code>-1</code>.  Otherwise this method returns the number of bytes
actually read.

<p> Subclasses of this class are encouraged, but not required, to
attempt to read as many bytes as possible in the same fashion.

@param      b     destination buffer.
@param      off   offset at which to start storing bytes.
@param      len   maximum number of bytes to read.
@return     the number of bytes read, or <code>-1</code> if the end of
            the stream has been reached.
@exception  IOException  if this input stream has been closed by
                         invoking its {@link #close()} method,
                         or an I/O error occurs.
"
      end

      operation 6844930 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>skip</code>
method of <code>InputStream</code>.

@exception  IOException  if the stream does not support seek,
                         or if this input stream has been closed by
                         invoking its {@link #close()} method, or an
                         I/O error occurs.
"
      end

      operation 6845058 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of bytes that can be read (or
skipped over) from this input stream without blocking by the next
invocation of a method for this input stream. The next invocation might be
the same thread or another thread.  A single read or skip of this
many bytes will not block, but may read or skip fewer bytes.
<p>
This method returns the sum of the number of bytes remaining to be read in
the buffer (<code>count&nbsp;- pos</code>) and the result of calling the
{@link java.io.FilterInputStream#in in}.available().

@return     an estimate of the number of bytes that can be read (or skipped
            over) from this input stream without blocking.
@exception  IOException  if this input stream has been closed by
                         invoking its {@link #close()} method,
                         or an I/O error occurs.
"
      end

      operation 6845186 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>mark</code>
method of <code>InputStream</code>.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.BufferedInputStream#reset()
"
      end

      operation 6845314 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See the general contract of the <code>reset</code>
method of <code>InputStream</code>.
<p>
If <code>markpos</code> is <code>-1</code>
(no mark has been set or the mark has been
invalidated), an <code>IOException</code>
is thrown. Otherwise, <code>pos</code> is
set equal to <code>markpos</code>.

@exception  IOException  if this stream has not been marked or,
                 if the mark has been invalidated, or the stream
                 has been closed by invoking its {@link #close()}
                 method, or an I/O error occurs.
@see        java.io.BufferedInputStream#mark(int)
"
      end

      operation 6845442 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code>
and <code>reset</code> methods. The <code>markSupported</code>
method of <code>BufferedInputStream</code> returns
<code>true</code>.

@return  a <code>boolean</code> indicating if this stream type supports
         the <code>mark</code> and <code>reset</code> methods.
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()
"
      end

      operation 6845570 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources
associated with the stream.
Once the stream has been closed, further read(), available(), reset(),
or skip() invocations will throw an IOException.
Closing a previously closed stream has no effect.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 921602 "BufferedOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The class implements a buffered output stream. By setting up such
an output stream, an application can write bytes to the underlying
output stream without necessarily causing a call to the underlying
system for each byte written.

@author  Arthur van Hoff
@since   JDK1.0
"
      classrelation 3122306 // <generalisation>
	relation 3122306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3122306 // <generalisation>
	  b parent class_ref 921730 // FilterOutputStream
      end

      attribute 1635458 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The internal buffer where data is stored.

"
      end

      attribute 1635586 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of valid bytes in the buffer. This value is always
in the range <tt>0</tt> through <tt>buf.length</tt>; elements
<tt>buf[0]</tt> through <tt>buf[count-1]</tt> contain valid
byte data.

"
      end

      operation 6846466 "BufferedOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new buffered output stream to write data to the
specified underlying output stream.

@param   out   the underlying output stream.
"
      end

      operation 6846594 "BufferedOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 151298 // OutputStream
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new buffered output stream to write data to the
specified underlying output stream with the specified buffer
size.

@param   out    the underlying output stream.
@param   size   the buffer size.
@exception IllegalArgumentException if size &lt;= 0.
"
      end

      operation 6846722 "flushBuffer"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Flush the internal buffer "
      end

      operation 6846850 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this buffered output stream.

@param      b   the byte to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6846978 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array
starting at offset <code>off</code> to this buffered output stream.

<p> Ordinarily this method stores bytes from the given array into this
stream's buffer, flushing the buffer to the underlying output stream as
needed.  If the requested length is at least as large as this stream's
buffer, however, then this method will flush the buffer and write the
bytes directly to the underlying output stream.  Thus redundant
<code>BufferedOutputStream</code>s will not copy data unnecessarily.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6847106 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this buffered output stream. This forces any buffered
output bytes to be written out to the underlying output stream.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end
    end

    class 921730 "FilterOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is the superclass of all classes that filter output
streams. These streams sit on top of an already existing output
stream (the <i>underlying</i> output stream) which it uses as its
basic sink of data, but possibly transforming the data along the
way or providing additional functionality.
<p>
The class <code>FilterOutputStream</code> itself simply overrides
all methods of <code>OutputStream</code> with versions that pass
all requests to the underlying output stream. Subclasses of
<code>FilterOutputStream</code> may further override some of these
methods as well as provide additional methods and fields.

@author  Jonathan Payne
@since   JDK1.0
"
      classrelation 3122050 // <generalisation>
	relation 3122050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3122050 // <generalisation>
	  b parent class_ref 151298 // OutputStream
      end

      classrelation 3122178 // out (<unidirectional association>)
	relation 3122178 --->
	  a role_name "out" protected
	    comment "
The underlying output stream to be filtered.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3122178 // out (<unidirectional association>)
	  b parent class_ref 151298 // OutputStream
      end

      operation 6845698 "FilterOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an output stream filter built on top of the specified
underlying output stream.

@param   out   the underlying output stream to be assigned to
               the field <tt>this.out</tt> for later use, or
               <code>null</code> if this instance is to be
               created without an underlying stream.
"
      end

      operation 6845826 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified <code>byte</code> to this output stream.
<p>
The <code>write</code> method of <code>FilterOutputStream</code>
calls the <code>write</code> method of its underlying output stream,
that is, it performs <tt>out.write(b)</tt>.
<p>
Implements the abstract <tt>write</tt> method of <tt>OutputStream</tt>.

@param      b   the <code>byte</code>.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6845954 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>b.length</code> bytes to this output stream.
<p>
The <code>write</code> method of <code>FilterOutputStream</code>
calls its <code>write</code> method of three arguments with the
arguments <code>b</code>, <code>0</code>, and
<code>b.length</code>.
<p>
Note that this method does not call the one-argument
<code>write</code> method of its underlying stream with the single
argument <code>b</code>.

@param      b   the data to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#write(byte[], int, int)
"
      end

      operation 6846082 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified
<code>byte</code> array starting at offset <code>off</code> to
this output stream.
<p>
The <code>write</code> method of <code>FilterOutputStream</code>
calls the <code>write</code> method of one argument on each
<code>byte</code> to output.
<p>
Note that this method does not call the <code>write</code> method
of its underlying input stream with the same arguments. Subclasses
of <code>FilterOutputStream</code> should provide a more efficient
implementation of this method.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#write(int)
"
      end

      operation 6846210 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output bytes
to be written out to the stream.
<p>
The <code>flush</code> method of <code>FilterOutputStream</code>
calls the <code>flush</code> method of its underlying output stream.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#out
"
      end

      operation 6846338 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"try\")
"
	
	
	
	comment "Closes this output stream and releases any system resources
associated with the stream.
<p>
The <code>close</code> method of <code>FilterOutputStream</code>
calls its <code>flush</code> method, and then calls the
<code>close</code> method of its underlying output stream.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterOutputStream#flush()
@see        java.io.FilterOutputStream#out
"
      end
    end

    class 921858 "BufferedWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Writes text to a character-output stream, buffering characters so as to
provide for the efficient writing of single characters, arrays, and strings.

<p> The buffer size may be specified, or the default size may be accepted.
The default is large enough for most purposes.

<p> A newLine() method is provided, which uses the platform's own notion of
line separator as defined by the system property <tt>line.separator</tt>.
Not all platforms use the newline character ('\\n') to terminate lines.
Calling this method to terminate each output line is therefore preferred to
writing a newline character directly.

<p> In general, a Writer sends its output immediately to the underlying
character or byte stream.  Unless prompt output is required, it is advisable
to wrap a BufferedWriter around any Writer whose write() operations may be
costly, such as FileWriters and OutputStreamWriters.  For example,

<pre>
PrintWriter out
  = new PrintWriter(new BufferedWriter(new FileWriter(\"foo.out\")));
</pre>

will buffer the PrintWriter's output to the file.  Without buffering, each
invocation of a print() method would cause characters to be converted into
bytes that would then be written immediately to the file, which can be very
inefficient.

@see PrintWriter
@see FileWriter
@see OutputStreamWriter
@see java.nio.file.Files#newBufferedWriter

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3122690 // <generalisation>
	relation 3122690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3122690 // <generalisation>
	  b parent class_ref 428034 // Writer
      end

      classrelation 3122818 // out (<unidirectional association>)
	relation 3122818 --->
	  a role_name "out" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3122818 // out (<unidirectional association>)
	  b parent class_ref 428034 // Writer
      end

      attribute 1637122 "cb"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1637250 "nChars"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1637378 "nextChar"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1637506 "defaultCharBufferSize"
	class_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3122946 // lineSeparator (<unidirectional association>)
	relation 3122946 --->
	  a role_name "lineSeparator" private
	    comment "
Line separator string.  This is the value of the line.separator
property at the moment that the stream was created.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3122946 // lineSeparator (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6849282 "BufferedWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 428034 // Writer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a buffered character-output stream that uses a default-sized
output buffer.

@param  out  A Writer
"
      end

      operation 6849410 "BufferedWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 428034 // Writer
	  param in name "sz" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new buffered character-output stream that uses an output
buffer of the given size.

@param  out  A Writer
@param  sz   Output-buffer size, a positive integer

@exception  IllegalArgumentException  If {@code sz <= 0}
"
      end

      operation 6849538 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks to make sure that the stream has not been closed "
      end

      operation 6849666 "flushBuffer"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the output buffer to the underlying character stream, without
flushing the stream itself.  This method is non-private only so that it
may be invoked by PrintStream.
"
      end

      operation 6849794 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single character.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6849922 "min"
	private explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Our own little min method, to avoid loading java.lang.Math if we've run
out of file descriptors and we're trying to print a stack trace.
"
      end

      operation 6850050 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of an array of characters.

<p> Ordinarily this method stores characters from the given array into
this stream's buffer, flushing the buffer to the underlying stream as
needed.  If the requested length is at least as large as the buffer,
however, then this method will flush the buffer and write the characters
directly to the underlying stream.  Thus redundant
<code>BufferedWriter</code>s will not copy data unnecessarily.

@param  cbuf  A character array
@param  off   Offset from which to start reading characters
@param  len   Number of characters to write

@exception  IOException  If an I/O error occurs
"
      end

      operation 6850178 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "s" type class_ref 128130 // String
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of a String.

<p> If the value of the <tt>len</tt> parameter is negative then no
characters are written.  This is contrary to the specification of this
method in the {@linkplain java.io.Writer#write(java.lang.String,int,int)
superclass}, which requires that an {@link IndexOutOfBoundsException} be
thrown.

@param  s     String to be written
@param  off   Offset from which to start reading characters
@param  len   Number of characters to be written

@exception  IOException  If an I/O error occurs
"
      end

      operation 6850306 "newLine"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a line separator.  The line separator string is defined by the
system property <tt>line.separator</tt>, and is not necessarily a single
newline ('\\n') character.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6850434 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the stream.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6850562 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"try\")
"
	
	
	
      end
    end

    class 921986 "CharArrayReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements a character buffer that can be used as a
character-input stream.

@author      Herb Jellinek
@since       JDK1.1
"
      classrelation 3123074 // <generalisation>
	relation 3123074 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3123074 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      attribute 1637634 "buf"
	protected explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The character buffer. 
"
      end

      attribute 1637762 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current buffer position. 
"
      end

      attribute 1637890 "markedPos"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The position of mark in buffer. 
"
      end

      attribute 1638018 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The index of the end of this buffer.  There is not valid
 data at or beyond this index.

"
      end

      operation 6850690 "CharArrayReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "buf" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a CharArrayReader from the specified array of chars.
@param buf       Input buffer (not copied)
"
      end

      operation 6850818 "CharArrayReader"
	public explicit_return_type ""
	nparams 3
	  param inout name "buf" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a CharArrayReader from the specified array of chars.

<p> The resulting reader will start reading at the given
<tt>offset</tt>.  The total number of <tt>char</tt> values that can be
read from this reader will be either <tt>length</tt> or
<tt>buf.length-offset</tt>, whichever is smaller.

@throws IllegalArgumentException
        If <tt>offset</tt> is negative or greater than
        <tt>buf.length</tt>, or if <tt>length</tt> is negative, or if
        the sum of these two values is negative.

@param buf       Input buffer (not copied)
@param offset    Offset of the first char to read
@param length    Number of chars to read
"
      end

      operation 6850946 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks to make sure that the stream has not been closed "
      end

      operation 6851074 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character.

@exception   IOException  If an I/O error occurs
"
      end

      operation 6851202 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array.
@param b  Destination buffer
@param off  Offset at which to start storing characters
@param len   Maximum number of characters to read
@return  The actual number of characters read, or -1 if
         the end of the stream has been reached

@exception   IOException  If an I/O error occurs
"
      end

      operation 6851330 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips characters.  Returns the number of characters that were skipped.

<p>The <code>n</code> parameter may be negative, even though the
<code>skip</code> method of the {@link Reader} superclass throws
an exception in this case. If <code>n</code> is negative, then
this method does nothing and returns <code>0</code>.

@param n The number of characters to skip
@return       The number of characters actually skipped
@exception  IOException If the stream is closed, or an I/O error occurs
"
      end

      operation 6851458 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream is ready to be read.  Character-array readers
are always ready to be read.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6851586 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream supports the mark() operation, which it does.
"
      end

      operation 6851714 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the present position in the stream.  Subsequent calls to reset()
will reposition the stream to this point.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  Because
                        the stream's input comes from a character array,
                        there is no actual limit; hence this argument is
                        ignored.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6851842 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the stream to the most recent mark, or to the beginning if it has
never been marked.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6851970 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream and releases any system resources associated with
it.  Once the stream has been closed, further read(), ready(),
mark(), reset(), or skip() invocations will throw an IOException.
Closing a previously closed stream has no effect.
"
      end
    end

    class 922114 "CharArrayWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements a character buffer that can be used as an Writer.
The buffer automatically grows when data is written to the stream.  The data
can be retrieved using toCharArray() and toString().
<P>
Note: Invoking close() on this class has no effect, and methods
of this class can be called after the stream has closed
without generating an IOException.

@author      Herb Jellinek
@since       JDK1.1
"
      classrelation 3123202 // <generalisation>
	relation 3123202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3123202 // <generalisation>
	  b parent class_ref 428034 // Writer
      end

      attribute 1638146 "buf"
	protected explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The buffer where data is stored.

"
      end

      attribute 1638274 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of chars in the buffer.

"
      end

      operation 6852098 "CharArrayWriter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new CharArrayWriter.
"
      end

      operation 6852226 "CharArrayWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "initialSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new CharArrayWriter with the specified initial size.

@param initialSize  an int specifying the initial buffer size.
@exception IllegalArgumentException if initialSize is negative
"
      end

      operation 6852354 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a character to the buffer.
"
      end

      operation 6852482 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes characters to the buffer.
@param c the data to be written
@param off       the start offset in the data
@param len       the number of chars that are written
"
      end

      operation 6852610 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 128130 // String
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a portion of a string to the buffer.
@param  str  String to be written from
@param  off  Offset from which to start reading characters
@param  len  Number of characters to be written
"
      end

      operation 6852738 "writeTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 428034 // Writer
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the contents of the buffer to another character stream.

@param out       the output stream to write to
@throws IOException If an I/O error occurs.
"
      end

      operation 6852866 "append"
	public return_type class_ref 922114 // CharArrayWriter
	nparams 1
	  param inout name "csq" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(csq.toString()) </pre>

<p> Depending on the specification of <tt>toString</tt> for the
character sequence <tt>csq</tt>, the entire sequence may not be
appended. For instance, invoking the <tt>toString</tt> method of a
character buffer will return a subsequence whose content depends upon
the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this writer.

@return  This writer

@since  1.5
"
      end

      operation 6852994 "append"
	public return_type class_ref 922114 // CharArrayWriter
	nparams 3
	  param inout name "csq" type class_ref 429442 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this writer.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.write(csq.subSequence(start, end).toString()) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  This writer

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@since  1.5
"
      end

      operation 6853122 "append"
	public return_type class_ref 922114 // CharArrayWriter
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this writer.

<p> An invocation of this method of the form <tt>out.append(c)</tt>
behaves in exactly the same way as the invocation

<pre>
    out.write(c) </pre>

@param  c
        The 16-bit character to append

@return  This writer

@since 1.5
"
      end

      operation 6853250 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the buffer so that you can use it again without
throwing away the already allocated buffer.
"
      end

      operation 6853378 "toCharArray"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the input data.

@return an array of chars copied from the input data.
"
      end

      operation 6853506 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current size of the buffer.

@return an int representing the current size of the buffer.
"
      end

      operation 6853634 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts input data to a string.
@return the string.
"
      end

      operation 6853762 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush the stream.
"
      end

      operation 6853890 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the stream.  This method does not release the buffer, since its
contents might still be required. Note: Invoking this method in this class
will have no effect.
"
      end
    end

    class 922242 "Console"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Methods to access the character-based console device, if any, associated
with the current Java virtual machine.

<p> Whether a virtual machine has a console is dependent upon the
underlying platform and also upon the manner in which the virtual
machine is invoked.  If the virtual machine is started from an
interactive command line without redirecting the standard input and
output streams then its console will exist and will typically be
connected to the keyboard and display from which the virtual machine
was launched.  If the virtual machine is started automatically, for
example by a background job scheduler, then it will typically not
have a console.
<p>
If this virtual machine has a console then it is represented by a
unique instance of this class which can be obtained by invoking the
{@link java.lang.System#console()} method.  If no console device is
available then an invocation of that method will return <tt>null</tt>.
<p>
Read and write operations are synchronized to guarantee the atomic
completion of critical operations; therefore invoking methods
{@link #readLine()}, {@link #readPassword()}, {@link #format format()},
{@link #printf printf()} as well as the read, format and write operations
on the objects returned by {@link #reader()} and {@link #writer()} may
block in multithreaded scenarios.
<p>
Invoking <tt>close()</tt> on the objects returned by the {@link #reader()}
and the {@link #writer()} will not close the underlying stream of those
objects.
<p>
The console-read methods return <tt>null</tt> when the end of the
console input stream is reached, for example by typing control-D on
Unix or control-Z on Windows.  Subsequent read operations will succeed
if additional characters are later entered on the console's input
device.
<p>
Unless otherwise specified, passing a <tt>null</tt> argument to any method
in this class will cause a {@link NullPointerException} to be thrown.
<p>
<b>Security note:</b>
If an application needs to read a password or other secure data, it should
use {@link #readPassword()} or {@link #readPassword(String, Object...)} and
manually zero the returned character array after processing to minimize the
lifetime of sensitive data in memory.

<blockquote><pre>{@code
Console cons;
char[] passwd;
if ((cons = System.console()) != null &&
    (passwd = cons.readPassword(\"[%s]\", \"Password:\")) != null) {
    ...
    java.util.Arrays.fill(passwd, ' ');
}
}</pre></blockquote>

@author  Xueming Shen
@since   1.6
"
      classrelation 3123330 // <realization>
	relation 3123330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3123330 // <realization>
	  b parent class_ref 151426 // Flushable
      end

      operation 6854018 "writer"
	public return_type class_ref 195330 // PrintWriter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the unique {@link java.io.PrintWriter PrintWriter} object
associated with this console.

@return  The printwriter associated with this console
"
      end

      operation 6854146 "reader"
	public return_type class_ref 407298 // Reader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the unique {@link java.io.Reader Reader} object associated
with this console.
<p>
This method is intended to be used by sophisticated applications, for
example, a {@link java.util.Scanner} object which utilizes the rich
parsing/scanning functionality provided by the <tt>Scanner</tt>:
<blockquote><pre>
Console con = System.console();
if (con != null) {
    Scanner sc = new Scanner(con.reader());
    ...
}
</pre></blockquote>
<p>
For simple applications requiring only line-oriented reading, use
<tt>{@link #readLine}</tt>.
<p>
The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },
{@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and
{@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}
on the returned object will not read in characters beyond the line
bound for each invocation, even if the destination buffer has space for
more characters. The {@code Reader}'s {@code read} methods may block if a
line bound has not been entered or reached on the console's input device.
A line bound is considered to be any one of a line feed (<tt>'\\n'</tt>),
a carriage return (<tt>'\\r'</tt>), a carriage return followed immediately
by a linefeed, or an end of stream.

@return  The reader associated with this console
"
      end

      operation 6854274 "format"
	public return_type class_ref 922242 // Console
	nparams 2
	  param inout name "fmt" type class_ref 128130 // String
	  param inout name "...args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to this console's output stream using
the specified format string and arguments.

@param  fmt
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section
         of the formatter class specification.

@return  This console
"
      end

      operation 6854402 "printf"
	public return_type class_ref 922242 // Console
	nparams 2
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method to write a formatted string to this console's
output stream using the specified format string and arguments.

<p> An invocation of this method of the form <tt>con.printf(format,
args)</tt> behaves in exactly the same way as the invocation of
<pre>con.format(format, args)</pre>.

@param  format
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@return  This console
"
      end

      operation 6854530 "readLine"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "fmt" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a formatted prompt, then reads a single line of text from the
console.

@param  fmt
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section
         of the formatter class specification.

@throws IOError
        If an I/O error occurs.

@return  A string containing the line read from the console, not
         including any line-termination characters, or <tt>null</tt>
         if an end of stream has been reached.
"
      end

      operation 6854658 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single line of text from the console.

@throws IOError
        If an I/O error occurs.

@return  A string containing the line read from the console, not
         including any line-termination characters, or <tt>null</tt>
         if an end of stream has been reached.
"
      end

      operation 6854786 "readPassword"
	public explicit_return_type "char"
	nparams 2
	  param inout name "fmt" type class_ref 128130 // String
	  param inout name "args" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a formatted prompt, then reads a password or passphrase from
the console with echoing disabled.

@param  fmt
        A format string as described in <a
        href=\"../util/Formatter.html#syntax\">Format string syntax</a>
        for the prompt text.

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a>
         section of the formatter class specification.

@throws IOError
        If an I/O error occurs.

@return  A character array containing the password or passphrase read
         from the console, not including any line-termination characters,
         or <tt>null</tt> if an end of stream has been reached.
"
      end

      operation 6854914 "readPassword"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a password or passphrase from the console with echoing disabled

@throws IOError
        If an I/O error occurs.

@return  A character array containing the password or passphrase read
         from the console, not including any line-termination characters,
         or <tt>null</tt> if an end of stream has been reached.
"
      end

      operation 6855042 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the console and forces any buffered output to be written
immediately .
"
      end

      classrelation 3123458 // readLock (<unidirectional association>)
	relation 3123458 --->
	  a role_name "readLock" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3123458 // readLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3123586 // writeLock (<unidirectional association>)
	relation 3123586 --->
	  a role_name "writeLock" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3123586 // writeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3123714 // reader (<unidirectional association>)
	relation 3123714 --->
	  a role_name "reader" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3123714 // reader (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      classrelation 3123842 // out (<unidirectional association>)
	relation 3123842 --->
	  a role_name "out" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3123842 // out (<unidirectional association>)
	  b parent class_ref 428034 // Writer
      end

      classrelation 3123970 // pw (<unidirectional association>)
	relation 3123970 --->
	  a role_name "pw" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3123970 // pw (<unidirectional association>)
	  b parent class_ref 195330 // PrintWriter
      end

      classrelation 3124098 // formatter (<unidirectional association>)
	relation 3124098 --->
	  a role_name "formatter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3124098 // formatter (<unidirectional association>)
	  b parent class_ref 922370 // Formatter
      end

      classrelation 3124226 // cs (<unidirectional association>)
	relation 3124226 --->
	  a role_name "cs" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3124226 // cs (<unidirectional association>)
	  b parent class_ref 853634 // Charset
      end

      attribute 1638402 "rcb"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6855170 "encoding"
	class_operation private return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 6855298 "echo"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      attribute 1638530 "echoOff"
	class_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6855426 "readline"
	private explicit_return_type "char"
	nparams 1
	  param inout name "zeroOut" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6855554 "grow"
	private explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 922498 "LineReader"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3124354 // <generalisation>
	  relation 3124354 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3124354 // <generalisation>
	    b parent class_ref 407298 // Reader
	end

	classrelation 3124482 // in (<unidirectional association>)
	  relation 3124482 --->
	    a role_name "in" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3124482 // in (<unidirectional association>)
	    b parent class_ref 407298 // Reader
	end

	attribute 1638658 "cb"
	  private explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1638786 "nChars"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1638914 "nextChar"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1639042 "leftoverLF"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 6855682 "LineReader"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "in" type class_ref 407298 // Reader
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6855810 "close"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6855938 "ready"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6856066 "read"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "cbuf" explicit_type "char"
	  multiplicity "[]"
	    param in name "offset" explicit_type "int"
	    param in name "length" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      extra_member 154882 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            // Add a shutdown hook to restore console's echo state should
            // it be necessary.
            sun.misc.SharedSecrets.getJavaLangAccess()
                .registerShutdownHook(0 /* shutdown hook invocation order */,
                    false /* only register if shutdown is not in progress */,
                    new Runnable() {
                        public void run() {
                            try {
                                if (echoOff) {
                                    echo(true);
                                }
                            } catch (IOException x) { }
                        }
                    });
        } catch (IllegalStateException e) {
            // shutdown is already in progress and console is first used
            // by a shutdown hook
        }

        sun.misc.SharedSecrets.setJavaIOAccess(new sun.misc.JavaIOAccess() {
            public Console console() {
                if (istty()) {
                    if (cons == null)
                        cons = new Console();
                    return cons;
                }
                return null;
            }

            public Charset charset() {
                // This method is called in sun.security.util.Password,
                // cons already exists when this method is called
                return cons.cs;
            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3124610 // cons (<unidirectional association>)
	relation 3124610 --->
	  a role_name "cons" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3124610 // cons (<unidirectional association>)
	  b parent class_ref 922242 // Console
      end

      operation 6856194 "istty"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 6856322 "Console"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 922626 "DefaultFileSystem"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
@since 1.8
"
      operation 6858754 "getFileSystem"
	class_operation public return_type class_ref 922754 // FileSystem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the FileSystem object for Unix-based platform.
"
      end
    end

    class 922754 "FileSystem"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Package-private abstract class for the local filesystem abstraction.
"
      operation 6879490 "getSeparator"
	abstract public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Normalization and construction -- 

Return the local filesystem's name-separator character.
"
      end

      operation 6879618 "getPathSeparator"
	abstract public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the local filesystem's path-separator character.
"
      end

      operation 6879746 "normalize"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert the given pathname string to normal form.  If the string is
already in normal form then it is simply returned.
"
      end

      operation 6879874 "prefixLength"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute the length of this pathname string's prefix.  The pathname
string must be in normal form.
"
      end

      operation 6880002 "resolve"
	abstract public return_type class_ref 128130 // String
	nparams 2
	  param inout name "parent" type class_ref 128130 // String
	  param inout name "child" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolve the child pathname string against the parent.
Both strings must be in normal form, and the result
will be in normal form.
"
      end

      operation 6880130 "getDefaultParent"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the parent pathname string to be used when the parent-directory
argument in one of the two-argument File constructors is the empty
pathname.
"
      end

      operation 6880258 "fromURIPath"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Post-process the given URI path string if necessary.  This is used on
win32, e.g., to transform \"/c:/foo\" into \"c:/foo\".  The path string
still has slash separators; code in the File class will translate them
after this method returns.
"
      end

      operation 6880386 "isAbsolute"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path operations -- 

Tell whether or not the given abstract pathname is absolute.
"
      end

      operation 6880514 "resolve"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolve the given abstract pathname into absolute form.  Invoked by the
getAbsolutePath and getCanonicalPath methods in the File class.
"
      end

      operation 6880642 "canonicalize"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1644162 "BA_EXISTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x01"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -- Attribute accessors -- 
 Constants for simple boolean attributes 
"
      end

      attribute 1644290 "BA_REGULAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x02"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1644418 "BA_DIRECTORY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x04"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1644546 "BA_HIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x08"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6880770 "getBooleanAttributes"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the simple boolean attributes for the file or directory denoted
by the given abstract pathname, or zero if it does not exist or some
other I/O error occurs.
"
      end

      attribute 1644674 "ACCESS_READ"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x04"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1644802 "ACCESS_WRITE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x02"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1644930 "ACCESS_EXECUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x01"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6880898 "checkAccess"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 131970 // File
	  param in name "access" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the file or directory denoted by the given abstract
pathname may be accessed by this process.  The second argument specifies
which access, ACCESS_READ, ACCESS_WRITE or ACCESS_EXECUTE, to check.
Return false if access is denied or an I/O error occurs
"
      end

      operation 6881026 "setPermission"
	abstract public explicit_return_type "boolean"
	nparams 4
	  param inout name "f" type class_ref 131970 // File
	  param in name "access" explicit_type "int"
	  param inout name "enable" explicit_type "boolean"
	  param inout name "owneronly" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set on or off the access permission (to owner only or to all) to the file
or directory denoted by the given abstract pathname, based on the parameters
enable, access and oweronly.
"
      end

      operation 6881154 "getLastModifiedTime"
	abstract public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the time at which the file or directory denoted by the given
abstract pathname was last modified, or zero if it does not exist or
some other I/O error occurs.
"
      end

      operation 6881282 "getLength"
	abstract public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the length in bytes of the file denoted by the given abstract
pathname, or zero if it does not exist, is a directory, or some other
I/O error occurs.
"
      end

      operation 6881410 "createFileExclusively"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "pathname" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- File operations -- 

Create a new empty file with the given pathname.  Return
<code>true</code> if the file was created and <code>false</code> if a
file or directory with the given pathname already exists.  Throw an
IOException if an I/O error occurs.
"
      end

      operation 6881538 "delete"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delete the file or directory denoted by the given abstract pathname,
returning <code>true</code> if and only if the operation succeeds.
"
      end

      operation 6881666 "list"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "List the elements of the directory denoted by the given abstract
pathname.  Return an array of strings naming the elements of the
directory if successful; otherwise, return <code>null</code>.
"
      end

      operation 6881794 "createDirectory"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new directory denoted by the given abstract pathname,
returning <code>true</code> if and only if the operation succeeds.
"
      end

      operation 6881922 "rename"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "f1" type class_ref 131970 // File
	  param inout name "f2" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rename the file or directory denoted by the first abstract pathname to
the second abstract pathname, returning <code>true</code> if and only if
the operation succeeds.
"
      end

      operation 6882050 "setLastModifiedTime"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 131970 // File
	  param in name "time" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the last-modified time of the file or directory denoted by the
given abstract pathname, returning <code>true</code> if and only if the
operation succeeds.
"
      end

      operation 6882178 "setReadOnly"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the file or directory denoted by the given abstract pathname as
read-only, returning <code>true</code> if and only if the operation
succeeds.
"
      end

      operation 6882306 "listRoots"
	abstract public return_type class_ref 131970 // File
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Filesystem interface -- 

List the available filesystem roots.
"
      end

      attribute 1645058 "SPACE_TOTAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -- Disk usage -- 
"
      end

      attribute 1645186 "SPACE_FREE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1645314 "SPACE_USABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6882434 "getSpace"
	abstract public explicit_return_type "long"
	nparams 2
	  param inout name "f" type class_ref 131970 // File
	  param in name "t" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6882562 "compare"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "f1" type class_ref 131970 // File
	  param inout name "f2" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Basic infrastructure -- 

Compare two abstract pathnames lexicographically.
"
      end

      operation 6882690 "hashCode"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute the hash code of an abstract pathname.
"
      end

      attribute 1645442 "useCanonCaches"
	class_attribute package explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flags for enabling/disabling performance optimizations for file
 name canonicalization
"
      end

      attribute 1645570 "useCanonPrefixCache"
	class_attribute package explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6882818 "getBooleanProperty"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "prop" type class_ref 128130 // String
	  param inout name "defaultVal" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 155778 "initialization"
	
	cpp "" ""
	java "  static {
        useCanonCaches      = getBooleanProperty(\"sun.io.useCanonCaches\",
                                                 useCanonCaches);
        useCanonPrefixCache = getBooleanProperty(\"sun.io.useCanonPrefixCache\",
                                                 useCanonPrefixCache);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 922882 "DeleteOnExitHook"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a set of filenames to be deleted on VM exit through a shutdown hook.
A set is used both to prevent double-insertion of the same file as well as offer
quick removal.
"
      classrelation 3124994 // files (<unidirectional association>)
	relation 3124994 --->
	  a role_name "files" init_value " new LinkedHashSet<>()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3124994 // files (<unidirectional association>)
	  b parent class_ref 884866 // LinkedHashSet
      end

      extra_member 155010 "initialization"
	
	cpp "" ""
	java "  static {
        // DeleteOnExitHook must be the last shutdown hook to be invoked.
        // Application shutdown hooks may add the first file to the
        // delete on exit list and cause the DeleteOnExitHook to be
        // registered during shutdown in progress. So set the
        // registerShutdownInProgress parameter to true.
        sun.misc.SharedSecrets.getJavaLangAccess()
            .registerShutdownHook(2 /* Shutdown hook invocation order */,
                true /* register even if shutdown in progress */,
                new Runnable() {
                    public void run() {
                       runHooks();
                    }
                }
        );
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6858882 "DeleteOnExitHook"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6859010 "add"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "file" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6859138 "runHooks"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 923010 "ExpiringCache"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 1639682 "millisUntilExpiration"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3125250 // map (<unidirectional association>)
	relation 3125250 --->
	  a role_name "map" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Entry> ${name}${value};
"
	    classrelation_ref 3125250 // map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 1639810 "queryCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Clear out old entries every few queries
"
      end

      attribute 1639938 "queryOverflow"
	private explicit_type "int"
	init_value " 300"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1640066 "MAX_ENTRIES"
	private explicit_type "int"
	init_value " 200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 923138 "Entry"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1640194 "timestamp"
	  private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3125378 // val (<unidirectional association>)
	  relation 3125378 --->
	    a role_name "val" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3125378 // val (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 6859522 "Entry"
	  package explicit_return_type ""
	  nparams 2
	    param in name "timestamp" explicit_type "long"
	    param inout name "val" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6859650 "timestamp"
	  package explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6859778 "setTimestamp"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "timestamp" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6859906 "val"
	  package return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6860034 "setVal"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6860162 "ExpiringCache"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6860290 "ExpiringCache"
	package explicit_return_type ""
	nparams 1
	  param in name "millisUntilExpiration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	
	
	
      end

      operation 6860418 "get"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6860546 "put"
	package explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6860674 "clear"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6860802 "entryFor"
	private return_type class_ref 923138 // Entry
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6860930 "cleanup"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 923394 "FileFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A filter for abstract pathnames.

<p> Instances of this interface may be passed to the <code>{@link
File#listFiles(java.io.FileFilter) listFiles(FileFilter)}</code> method
of the <code>{@link java.io.File}</code> class.

@since 1.2
"
      operation 6870146 "accept"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "pathname" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether or not the specified abstract pathname should be
included in a pathname list.

@param  pathname  The abstract pathname to be tested
@return  <code>true</code> if and only if <code>pathname</code>
         should be included
"
      end
    end

    class 923778 "FileDescriptor"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Instances of the file descriptor class serve as an opaque handle
to the underlying machine-specific structure representing an open
file, an open socket, or another source or sink of bytes. The
main practical use for a file descriptor is to create a
<code>FileInputStream</code> or <code>FileOutputStream</code> to
contain it.
<p>
Applications should not create their own file descriptors.

@author  Pavani Diwanji
@see     java.io.FileInputStream
@see     java.io.FileOutputStream
@since   JDK1.0
"
      attribute 1641474 "fd"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3126786 // parent (<unidirectional association>)
	relation 3126786 --->
	  a role_name "parent" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3126786 // parent (<unidirectional association>)
	  b parent class_ref 146562 // Closeable
      end

      classrelation 3126914 // otherParents (<unidirectional association>)
	relation 3126914 --->
	  a role_name "otherParents" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Closeable> ${name}${value};
"
	    classrelation_ref 3126914 // otherParents (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      attribute 1641602 "closed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6869250 "FileDescriptor"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an (invalid) FileDescriptor
object.
"
      end

      operation 6869378 "FileDescriptor"
	private explicit_return_type ""
	nparams 1
	  param in name "fd" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3127042 // in (<unidirectional association>)
	relation 3127042 --->
	  a role_name "in" init_value " new FileDescriptor(0)" class_relation const_relation public
	    comment "
A handle to the standard input stream. Usually, this file
descriptor is not used directly, but rather via the input stream
known as <code>System.in</code>.

@see     java.lang.System#in

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3127042 // in (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      classrelation 3127170 // out (<unidirectional association>)
	relation 3127170 --->
	  a role_name "out" init_value " new FileDescriptor(1)" class_relation const_relation public
	    comment "
A handle to the standard output stream. Usually, this file
descriptor is not used directly, but rather via the output stream
known as <code>System.out</code>.
@see     java.lang.System#out

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3127170 // out (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      classrelation 3127298 // err (<unidirectional association>)
	relation 3127298 --->
	  a role_name "err" init_value " new FileDescriptor(2)" class_relation const_relation public
	    comment "
A handle to the standard error stream. Usually, this file
descriptor is not used directly, but rather via the output stream
known as <code>System.err</code>.

@see     java.lang.System#err

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3127298 // err (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      operation 6869506 "valid"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this file descriptor object is valid.

@return  <code>true</code> if the file descriptor object represents a
         valid, open file, socket, or other active I/O connection;
         <code>false</code> otherwise.
"
      end

      operation 6869634 "sync"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 923906 // SyncFailedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Force all system buffers to synchronize with the underlying
device.  This method returns after all modified data and
attributes of this FileDescriptor have been written to the
relevant device(s).  In particular, if this FileDescriptor
refers to a physical storage medium, such as a file in a file
system, sync will not return until all in-memory modified copies
of buffers associated with this FileDescriptor have been
written to the physical medium.

sync is meant to be used by code that requires physical
storage (such as a file) to be in a known state  For
example, a class that provided a simple transaction facility
might use sync to ensure that all changes to a file caused
by a given transaction were recorded on a storage medium.

sync only affects buffers downstream of this FileDescriptor.  If
any in-memory buffering is being done by the application (for
example, by a BufferedOutputStream object), those buffers must
be flushed into the FileDescriptor (for example, by invoking
OutputStream.flush) before that data will be affected by sync.

@exception SyncFailedException
       Thrown when the buffers cannot be flushed,
       or because the system cannot guarantee that all the
       buffers have been synchronized with physical media.
@since     JDK1.1
"
      end

      operation 6869762 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment " This routine initializes JNI field offsets for the class "
      end

      extra_member 155266 "initialization"
	
	cpp "" ""
	java "  static {
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      extra_member 155394 "initialization"
	
	cpp "" ""
	java "  static {
        sun.misc.SharedSecrets.setJavaIOFileDescriptorAccess(
            new sun.misc.JavaIOFileDescriptorAccess() {
                public void set(FileDescriptor obj, int fd) {
                    obj.fd = fd;
                }

                public int get(FileDescriptor obj) {
                    return obj.fd;
                }

                public void setHandle(FileDescriptor obj, long handle) {
                    throw new UnsupportedOperationException();
                }

                public long getHandle(FileDescriptor obj) {
                    throw new UnsupportedOperationException();
                }
            }
        );
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 6869890 "attach"
	package explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 146562 // Closeable
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package private methods to track referents.
If multiple streams point to the same FileDescriptor, we cycle
through the list of all referents and call close()


Attach a Closeable to this FD for tracking.
parent reference is added to otherParents when
needed to make closeAll simpler.
"
      end

      operation 6870018 "closeAll"
	package explicit_return_type "void"
	nparams 1
	  param inout name "releaser" type class_ref 146562 // Closeable
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"try\")
"
	
	
	
	comment "Cycle through all Closeables sharing this FD and call
close() on each one.

The caller closeable gets to call close0().
"
      end
    end

    class 923906 "SyncFailedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that a sync operation has failed.

@author  Ken Arnold
@see     java.io.FileDescriptor#sync
@see     java.io.IOException
@since   JDK1.1
"
      classrelation 3143554 // <generalisation>
	relation 3143554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3143554 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1659266 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2353342684412443330L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6939778 "SyncFailedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "desc" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an SyncFailedException with a detail message.
A detail message is a String that describes this particular exception.

@param desc  a String describing the exception.
"
      end
    end

    class 924162 "FileOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A file output stream is an output stream for writing data to a
<code>File</code> or to a <code>FileDescriptor</code>. Whether or not
a file is available or may be created depends upon the underlying
platform.  Some platforms, in particular, allow a file to be opened
for writing by only one <tt>FileOutputStream</tt> (or other
file-writing object) at a time.  In such situations the constructors in
this class will fail if the file involved is already open.

<p><code>FileOutputStream</code> is meant for writing streams of raw bytes
such as image data. For writing streams of characters, consider using
<code>FileWriter</code>.

@author  Arthur van Hoff
@see     java.io.File
@see     java.io.FileDescriptor
@see     java.io.FileInputStream
@see     java.nio.file.Files#newOutputStream
@since   JDK1.0
"
      classrelation 3128194 // <generalisation>
	relation 3128194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3128194 // <generalisation>
	  b parent class_ref 151298 // OutputStream
      end

      classrelation 3128322 // fd (<unidirectional association>)
	relation 3128322 --->
	  a role_name "fd" const_relation private
	    comment "
The system dependent file descriptor.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3128322 // fd (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      attribute 1641986 "append"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if the file is opened for append.

"
      end

      classrelation 3128450 // channel (<unidirectional association>)
	relation 3128450 --->
	  a role_name "channel" private
	    comment "
The associated channel, initialized lazily.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3128450 // channel (<unidirectional association>)
	  b parent class_ref 924034 // FileChannel
      end

      classrelation 3128578 // path (<unidirectional association>)
	relation 3128578 --->
	  a role_name "path" const_relation private
	    comment "
The path of the referenced file
(null if the stream is created with a file descriptor)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3128578 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3128706 // closeLock (<unidirectional association>)
	relation 3128706 --->
	  a role_name "closeLock" init_value " new Object()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3128706 // closeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1642114 "closed"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6873090 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file output stream to write to the file with the
specified name. A new <code>FileDescriptor</code> object is
created to represent this file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code>
method is called with <code>name</code> as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param      name   the system-dependent filename
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
"
      end

      operation 6873218 "FileOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file output stream to write to the file with the specified
name.  If the second argument is <code>true</code>, then
bytes will be written to the end of the file rather than the beginning.
A new <code>FileDescriptor</code> object is created to represent this
file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code>
method is called with <code>name</code> as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param     name        the system-dependent file name
@param     append      if <code>true</code>, then bytes will be written
                  to the end of the file rather than the beginning
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason.
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@since     JDK1.1
"
      end

      operation 6873346 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file output stream to write to the file represented by
the specified <code>File</code> object. A new
<code>FileDescriptor</code> object is created to represent this
file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code>
method is called with the path represented by the <code>file</code>
argument as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param      file               the file to be opened for writing.
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.io.File#getPath()
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
"
      end

      operation 6873474 "FileOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 131970 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file output stream to write to the file represented by
the specified <code>File</code> object. If the second argument is
<code>true</code>, then bytes will be written to the end of the file
rather than the beginning. A new <code>FileDescriptor</code> object is
created to represent this file connection.
<p>
First, if there is a security manager, its <code>checkWrite</code>
method is called with the path represented by the <code>file</code>
argument as its argument.
<p>
If the file exists but is a directory rather than a regular file, does
not exist but cannot be created, or cannot be opened for any other
reason then a <code>FileNotFoundException</code> is thrown.

@param      file               the file to be opened for writing.
@param     append      if <code>true</code>, then bytes will be written
                  to the end of the file rather than the beginning
@exception  FileNotFoundException  if the file exists but is a directory
                  rather than a regular file, does not exist but cannot
                  be created, or cannot be opened for any other reason
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies write access
              to the file.
@see        java.io.File#getPath()
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@since 1.4
"
      end

      operation 6873602 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fdObj" type class_ref 923778 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a file output stream to write to the specified file
descriptor, which represents an existing connection to an actual
file in the file system.
<p>
First, if there is a security manager, its <code>checkWrite</code>
method is called with the file descriptor <code>fdObj</code>
argument as its argument.
<p>
If <code>fdObj</code> is null then a <code>NullPointerException</code>
is thrown.
<p>
This constructor does not throw an exception if <code>fdObj</code>
is {@link java.io.FileDescriptor#valid() invalid}.
However, if the methods are invoked on the resulting stream to attempt
I/O on the stream, an <code>IOException</code> is thrown.

@param      fdObj   the file descriptor to be opened for writing
@exception  SecurityException  if a security manager exists and its
              <code>checkWrite</code> method denies
              write access to the file descriptor
@see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)
"
      end

      operation 6873730 "open0"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Opens a file, with the specified name, for overwriting or appending.
@param name name of file to be opened
@param append whether the file is to be opened in append mode
"
      end

      operation 6873858 "open"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " wrap native call to allow instrumentation

Opens a file, with the specified name, for overwriting or appending.
@param name name of file to be opened
@param append whether the file is to be opened in append mode
"
      end

      operation 6873986 "write"
	private explicit_return_type "void"
	nparams 2
	  param in name "b" explicit_type "int"
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Writes the specified byte to this file output stream.

@param   b   the byte to be written.
@param   append   {@code true} if the write operation first
    advances the position to the end of file
"
      end

      operation 6874114 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified byte to this file output stream. Implements
the <code>write</code> method of <code>OutputStream</code>.

@param      b   the byte to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6874242 "writeBytes"
	private explicit_return_type "void"
	nparams 4
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
	comment "Writes a sub array as a sequence of bytes.
@param b the data to be written
@param off the start offset in the data
@param len the number of bytes that are written
@param append {@code true} to first advance the position to the
    end of file
@exception IOException If an I/O error has occurred.
"
      end

      operation 6874370 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>b.length</code> bytes from the specified byte array
to this file output stream.

@param      b   the data.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6874498 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array
starting at offset <code>off</code> to this file output stream.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6874626 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this file output stream and releases any system resources
associated with this stream. This file output stream may no longer
be used for writing bytes.

<p> If this stream has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs.

@revised 1.4
@spec JSR-51
"
      end

      operation 6874754 "getFD"
	public return_type class_ref 923778 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the file descriptor associated with this stream.

@return  the <code>FileDescriptor</code> object that represents
         the connection to the file in the file system being used
         by this <code>FileOutputStream</code> object.

@exception  IOException  if an I/O error occurs.
@see        java.io.FileDescriptor
"
      end

      operation 6874882 "getChannel"
	public return_type class_ref 924034 // FileChannel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file output stream.

<p> The initial {@link java.nio.channels.FileChannel#position()
position} of the returned channel will be equal to the
number of bytes written to the file so far unless this stream is in
append mode, in which case it will be equal to the size of the file.
Writing bytes to this stream will increment the channel's position
accordingly.  Changing the channel's position, either explicitly or by
writing, will change this stream's file position.

@return  the file channel associated with this file output stream

@since 1.4
@spec JSR-51
"
      end

      operation 6875010 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cleans up the connection to the file, and ensures that the
<code>close</code> method of this file output stream is
called when there are no more references to this stream.

@exception  IOException  if an I/O error occurs.
@see        java.io.FileInputStream#close()
"
      end

      operation 6875138 "close0"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 6875266 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 155650 "initialization"
	
	cpp "" ""
	java "  static {
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 924290 "FilePermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents access to a file or directory.  A FilePermission consists
of a pathname and a set of actions valid for that pathname.
<P>
Pathname is the pathname of the file or directory granted the specified
actions. A pathname that ends in \"/*\" (where \"/\" is
the file separator character, <code>File.separatorChar</code>) indicates
all the files and directories contained in that directory. A pathname
that ends with \"/-\" indicates (recursively) all files
and subdirectories contained in that directory. A pathname consisting of
the special token \"&lt;&lt;ALL FILES&gt;&gt;\" matches <b>any</b> file.
<P>
Note: A pathname consisting of a single \"*\" indicates all the files
in the current directory, while a pathname consisting of a single \"-\"
indicates all the files in the current directory and
(recursively) all files and subdirectories contained in the current
directory.
<P>
The actions to be granted are passed to the constructor in a string containing
a list of one or more comma-separated keywords. The possible keywords are
\"read\", \"write\", \"execute\", \"delete\", and \"readlink\". Their meaning is
defined as follows:

<DL>
   <DT> read <DD> read permission
   <DT> write <DD> write permission
   <DT> execute
   <DD> execute permission. Allows <code>Runtime.exec</code> to
        be called. Corresponds to <code>SecurityManager.checkExec</code>.
   <DT> delete
   <DD> delete permission. Allows <code>File.delete</code> to
        be called. Corresponds to <code>SecurityManager.checkDelete</code>.
   <DT> readlink
   <DD> read link permission. Allows the target of a
        <a href=\"../nio/file/package-summary.html#links\">symbolic link</a>
        to be read by invoking the {@link java.nio.file.Files#readSymbolicLink
        readSymbolicLink } method.
</DL>
<P>
The actions string is converted to lowercase before processing.
<P>
Be careful when granting FilePermissions. Think about the implications
of granting read and especially write access to various files and
directories. The \"&lt;&lt;ALL FILES&gt;&gt;\" permission with write action is
especially dangerous. This grants permission to write to the entire
file system. One thing this effectively allows is replacement of the
system binary, including the JVM runtime environment.

<p>Please note: Code can always read a file from the same
directory it's in (or a subdirectory of that directory); it does not
need explicit permission to do so.

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection


@author Marianne Mueller
@author Roland Schemers
@since 1.2

@serial exclude
"
      classrelation 3128834 // <generalisation>
	relation 3128834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3128834 // <generalisation>
	  b parent class_ref 257538 // Permission
      end

      classrelation 3128962 // <realization>
	relation 3128962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3128962 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1642242 "EXECUTE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Execute action.

"
      end

      attribute 1642370 "WRITE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Write action.

"
      end

      attribute 1642498 "READ"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Read action.

"
      end

      attribute 1642626 "DELETE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Delete action.

"
      end

      attribute 1642754 "READLINK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Read link action.

"
      end

      attribute 1642882 "ALL"
	class_attribute const_attribute private explicit_type "int"
	init_value " READ|WRITE|EXECUTE|DELETE|READLINK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "All actions (read,write,execute,delete,readlink)

"
      end

      attribute 1643010 "NONE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "No actions.

"
      end

      attribute 1643138 "mask"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the actions mask
"
      end

      attribute 1643266 "directory"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " does path indicate a directory? (wildcard or recursive)
"
      end

      attribute 1643394 "recursive"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " is it a recursive directory specification?
"
      end

      classrelation 3129090 // actions (<unidirectional association>)
	relation 3129090 --->
	  a role_name "actions" private
	    comment "
the actions string.

@serial

 Left null as long as possible, then"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3129090 // actions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3129218 // cpath (<unidirectional association>)
	relation 3129218 --->
	  a role_name "cpath" private
	    comment " created and re-used in the getAction function.
 canonicalized dir path. In the case of
 directories, it is the name \"/blah/*\" or \"/blah/-\" without
 the last character (the \"*\" or \"-\").
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3129218 // cpath (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1643522 "RECURSIVE_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '-'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " static Strings used by init(int mask)
"
      end

      attribute 1643650 "WILD_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '*'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1643778 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7930732926638008763L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "public String toString()
{
StringBuffer sb = new StringBuffer();
sb.append(\"***\\n\");
sb.append(\"cpath = \"+cpath+\"\\n\");
sb.append(\"mask = \"+mask+\"\\n\");
sb.append(\"actions = \"+getActions()+\"\\n\");
sb.append(\"directory = \"+directory+\"\\n\");
sb.append(\"recursive = \"+recursive+\"\\n\");
sb.append(\"***\\n\");
return sb.toString();
}

"
      end

      operation 6875394 "init"
	private explicit_return_type "void"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "initialize a FilePermission object. Common to all constructors.
Also called during de-serialization.

@param mask the actions mask to use.

"
      end

      operation 6875522 "FilePermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new FilePermission object with the specified actions.
<i>path</i> is the pathname of a file or directory, and <i>actions</i>
contains a comma-separated list of the desired actions granted on the
file or directory. Possible actions are
\"read\", \"write\", \"execute\", \"delete\", and \"readlink\".

<p>A pathname that ends in \"/*\" (where \"/\" is
the file separator character, <code>File.separatorChar</code>)
indicates all the files and directories contained in that directory.
A pathname that ends with \"/-\" indicates (recursively) all files and
subdirectories contained in that directory. The special pathname
\"&lt;&lt;ALL FILES&gt;&gt;\" matches any file.

<p>A pathname consisting of a single \"*\" indicates all the files
in the current directory, while a pathname consisting of a single \"-\"
indicates all the files in the current directory and
(recursively) all files and subdirectories contained in the current
directory.

<p>A pathname containing an empty string represents an empty path.

@param path the pathname of the file/directory.
@param actions the action string.

@throws IllegalArgumentException
         If actions is <code>null</code>, empty or contains an action
         other than the specified possible actions.
"
      end

      operation 6875650 "FilePermission"
	package explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 128130 // String
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new FilePermission object using an action mask.
More efficient than the FilePermission(String, String) constructor.
Can be used from within
code that needs to create a FilePermission object to pass into the
<code>implies</code> method.

@param path the pathname of the file/directory.
@param mask the action mask to use.

 package private for use by the FilePermissionCollection add method"
      end

      operation 6875778 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this FilePermission object \"implies\" the specified permission.
<P>
More specifically, this method returns true if:
<ul>
<li> <i>p</i> is an instanceof FilePermission,
<li> <i>p</i>'s actions are a proper subset of this
object's actions, and
<li> <i>p</i>'s pathname is implied by this object's
     pathname. For example, \"/tmp/*\" implies \"/tmp/foo\", since
     \"/tmp/*\" encompasses all files in the \"/tmp\" directory,
     including the one named \"foo\".
</ul>

@param p the permission to check against.

@return <code>true</code> if the specified permission is not
                 <code>null</code> and is implied by this object,
                 <code>false</code> otherwise.
"
      end

      operation 6875906 "impliesIgnoreMask"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 924290 // FilePermission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the Permission's actions are a proper subset of the
this object's actions. Returns the effective mask iff the
this FilePermission's path also implies that FilePermission's path.

@param that the FilePermission to check against.
@return the effective mask
"
      end

      operation 6876034 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two FilePermission objects for equality. Checks that <i>obj</i> is
a FilePermission, and has the same pathname and actions as this object.

@param obj the object we are testing for equality with this object.
@return <code>true</code> if obj is a FilePermission, and has the same
         pathname and actions as this FilePermission object,
         <code>false</code> otherwise.
"
      end

      operation 6876162 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.

@return a hash code value for this object.
"
      end

      operation 6876290 "getMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an actions String to an actions mask.

@param actions the action string.
@return the actions mask.
"
      end

      operation 6876418 "getMask"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current action mask. Used by the FilePermissionCollection.

@return the actions mask.
"
      end

      operation 6876546 "getActions"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the canonical string representation of the actions.
Always returns present actions in the following order:
read, write, execute, delete, readlink.

@return the canonical string representation of the actions.
"
      end

      operation 6876674 "getActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"canonical string representation\" of the actions.
That is, this method always returns present actions in the following order:
read, write, execute, delete, readlink. For example, if this FilePermission
object allows both write and read actions, a call to <code>getActions</code>
will return the string \"read,write\".

@return the canonical string representation of the actions.
"
      end

      operation 6876802 "newPermissionCollection"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new PermissionCollection object for storing FilePermission
objects.
<p>
FilePermission objects must be stored in a manner that allows them
to be inserted into the collection in any order, but that also enables the
PermissionCollection <code>implies</code>
method to be implemented in an efficient (and consistent) manner.

<p>For example, if you have two FilePermissions:
<OL>
<LI>  <code>\"/tmp/-\", \"read\"</code>
<LI>  <code>\"/tmp/scratch/foo\", \"write\"</code>
</OL>

<p>and you are calling the <code>implies</code> method with the FilePermission:

<pre>
  \"/tmp/scratch/foo\", \"read,write\",
</pre>

then the <code>implies</code> function must
take into account both the \"/tmp/-\" and \"/tmp/scratch/foo\"
permissions, so the effective permission is \"read,write\",
and <code>implies</code> returns true. The \"implies\" semantics for
FilePermissions are handled properly by the PermissionCollection object
returned by this <code>newPermissionCollection</code> method.

@return a new PermissionCollection object suitable for storing
FilePermissions.
"
      end

      operation 6876930 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WriteObject is called to save the state of the FilePermission
to a stream. The actions are serialized, and the superclass
takes care of the name.
"
      end

      operation 6877058 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the FilePermission from
a stream.
"
      end
    end

    class 924418 "FilePermissionCollection"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A FilePermissionCollection stores a set of FilePermission permissions.
FilePermission objects
must be stored in a manner that allows them to be inserted in any
order, but enable the implies function to evaluate the implies
method.
For example, if you have two FilePermissions:
<OL>
<LI> \"/tmp/-\", \"read\"
<LI> \"/tmp/scratch/foo\", \"write\"
</OL>
And you are calling the implies function with the FilePermission:
\"/tmp/scratch/foo\", \"read,write\", then the implies function must
take into account both the /tmp/- and /tmp/scratch/foo
permissions, so the effective permission is \"read,write\".

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection


@author Marianne Mueller
@author Roland Schemers

@serial include

"
      classrelation 3129346 // <generalisation>
	relation 3129346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3129346 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 3129474 // <realization>
	relation 3129474 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3129474 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3129602 // perms (<unidirectional association>)
	relation 3129602 --->
	  a role_name "perms" private
	    comment " Not serialized; see serialization section at end of class
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Permission> ${name}${value};
"
	    classrelation_ref 3129602 // perms (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 6877186 "FilePermissionCollection"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty FilePermissionCollection object.
"
      end

      operation 6877314 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to the FilePermissionCollection. The key for the hash is
permission.path.

@param permission the Permission object to add.

@exception IllegalArgumentException - if the permission is not a
                                      FilePermission

@exception SecurityException - if this FilePermissionCollection object
                               has been marked readonly
"
      end

      operation 6877442 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this set of permissions implies the permissions
expressed in \"permission\".

@param permission the Permission object to compare

@return true if \"permission\" is a proper subset of a permission in
the set, false if not.
"
      end

      operation 6877570 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the FilePermission objects in the
container.

@return an enumeration of all the FilePermission objects.
"
      end

      attribute 1643906 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2202956749081564585L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3129730 // serialPersistentFields (<unidirectional association>)
	relation 3129730 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"permissions\", Vector.class),
    }" class_relation const_relation private
	    comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:
    private Vector permissions;

@serialField permissions java.util.Vector
    A list of FilePermission objects.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3129730 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 6877698 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData \"permissions\" field (a Vector containing the FilePermissions).


Writes the contents of the perms field out as a Vector for
serialization compatibility with earlier releases.
"
      end

      operation 6877826 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Vector of FilePermissions and saves them in the perms field.
"
      end
    end

    class 924546 "FileReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Convenience class for reading character files.  The constructors of this
class assume that the default character encoding and the default byte-buffer
size are appropriate.  To specify these values yourself, construct an
InputStreamReader on a FileInputStream.

<p><code>FileReader</code> is meant for reading streams of characters.
For reading streams of raw bytes, consider using a
<code>FileInputStream</code>.

@see InputStreamReader
@see FileInputStream

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3129986 // <generalisation>
	relation 3129986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3129986 // <generalisation>
	  b parent class_ref 924674 // InputStreamReader
      end

      operation 6879106 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "fileName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>FileReader</tt>, given the name of the
file to read from.

@param fileName the name of the file to read from
@exception  FileNotFoundException  if the named file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading.
"
      end

      operation 6879234 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>FileReader</tt>, given the <tt>File</tt>
to read from.

@param file the <tt>File</tt> to read from
@exception  FileNotFoundException  if the file does not exist,
                  is a directory rather than a regular file,
                  or for some other reason cannot be opened for
                  reading.
"
      end

      operation 6879362 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 923778 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>FileReader</tt>, given the
<tt>FileDescriptor</tt> to read from.

@param fd the FileDescriptor to read from
"
      end
    end

    class 924674 "InputStreamReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An InputStreamReader is a bridge from byte streams to character streams: It
reads bytes and decodes them into characters using a specified {@link
java.nio.charset.Charset charset}.  The charset that it uses
may be specified by name or may be given explicitly, or the platform's
default charset may be accepted.

<p> Each invocation of one of an InputStreamReader's read() methods may
cause one or more bytes to be read from the underlying byte-input stream.
To enable the efficient conversion of bytes to characters, more bytes may
be read ahead from the underlying stream than are necessary to satisfy the
current read operation.

<p> For top efficiency, consider wrapping an InputStreamReader within a
BufferedReader.  For example:

<pre>
BufferedReader in
  = new BufferedReader(new InputStreamReader(System.in));
</pre>

@see BufferedReader
@see InputStream
@see java.nio.charset.Charset

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3129858 // <generalisation>
	relation 3129858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3129858 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      attribute 1644034 "sd"
	const_attribute private explicit_type "StreamDecoder"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6877954 "InputStreamReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an InputStreamReader that uses the default charset.

@param  in   An InputStream
"
      end

      operation 6878082 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "charsetName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an InputStreamReader that uses the named charset.

@param  in
        An InputStream

@param  charsetName
        The name of a supported
        {@link java.nio.charset.Charset charset}

@exception  UnsupportedEncodingException
            If the named charset is not supported
"
      end

      operation 6878210 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "cs" type class_ref 853634 // Charset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an InputStreamReader that uses the given charset.

@param  in       An InputStream
@param  cs       A charset

@since 1.4
@spec JSR-51
"
      end

      operation 6878338 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "dec" type class_ref 167554 // CharsetDecoder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an InputStreamReader that uses the given charset decoder.

@param  in       An InputStream
@param  dec      A charset decoder

@since 1.4
@spec JSR-51
"
      end

      operation 6878466 "getEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the character encoding being used by this stream.

<p> If the encoding has an historical name then that name is returned;
otherwise the encoding's canonical name is returned.

<p> If this instance was created with the {@link
#InputStreamReader(InputStream, String)} constructor then the returned
name, being unique for the encoding, may differ from the name passed to
the constructor. This method will return <code>null</code> if the
stream has been closed.
</p>
@return The historical name of this encoding, or
        <code>null</code> if the stream has been closed

@see java.nio.charset.Charset

@revised 1.4
@spec JSR-51
"
      end

      operation 6878594 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character.

@return The character read, or -1 if the end of the stream has been
        reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 6878722 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array.

@param      cbuf     Destination buffer
@param      offset   Offset at which to start storing characters
@param      length   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 6878850 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream is ready to be read.  An InputStreamReader is
ready if its input buffer is not empty, or if bytes are available to be
read from the underlying byte stream.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6878978 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 924802 "FileWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Convenience class for writing character files.  The constructors of this
class assume that the default character encoding and the default byte-buffer
size are acceptable.  To specify these values yourself, construct an
OutputStreamWriter on a FileOutputStream.

<p>Whether or not a file is available or may be created depends upon the
underlying platform.  Some platforms, in particular, allow a file to be
opened for writing by only one <tt>FileWriter</tt> (or other file-writing
object) at a time.  In such situations the constructors in this class
will fail if the file involved is already open.

<p><code>FileWriter</code> is meant for writing streams of characters.
For writing streams of raw bytes, consider using a
<code>FileOutputStream</code>.

@see OutputStreamWriter
@see FileOutputStream

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3130242 // <generalisation>
	relation 3130242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3130242 // <generalisation>
	  b parent class_ref 917890 // OutputStreamWriter
      end

      operation 6884354 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "fileName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a file name.

@param fileName  String The system-dependent filename.
@throws IOException  if the named file exists but is a directory rather
                 than a regular file, does not exist but cannot be
                 created, or cannot be opened for any other reason
"
      end

      operation 6884482 "FileWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "fileName" type class_ref 128130 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a file name with a boolean
indicating whether or not to append the data written.

@param fileName  String The system-dependent filename.
@param append    boolean if <code>true</code>, then data will be written
                 to the end of the file rather than the beginning.
@throws IOException  if the named file exists but is a directory rather
                 than a regular file, does not exist but cannot be
                 created, or cannot be opened for any other reason
"
      end

      operation 6884610 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a File object.

@param file  a File object to write to.
@throws IOException  if the file exists but is a directory rather than
                 a regular file, does not exist but cannot be created,
                 or cannot be opened for any other reason
"
      end

      operation 6884738 "FileWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 131970 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object given a File object. If the second
argument is <code>true</code>, then bytes will be written to the end
of the file rather than the beginning.

@param file  a File object to write to
@param     append    if <code>true</code>, then bytes will be written
                     to the end of the file rather than the beginning
@throws IOException  if the file exists but is a directory rather than
                 a regular file, does not exist but cannot be created,
                 or cannot be opened for any other reason
@since 1.4
"
      end

      operation 6884866 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 923778 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a FileWriter object associated with a file descriptor.

@param fd  FileDescriptor object to write to.
"
      end
    end

    class 924930 "InterruptedIOException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an I/O operation has been interrupted. An
<code>InterruptedIOException</code> is thrown to indicate that an
input or output transfer has been terminated because the thread
performing it was interrupted. The field {@link #bytesTransferred}
indicates how many bytes were successfully transferred before
the interruption occurred.

@author  unascribed
@see     java.io.InputStream
@see     java.io.OutputStream
@see     java.lang.Thread#interrupt()
@since   JDK1.0
"
      classrelation 3130370 // <generalisation>
	relation 3130370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3130370 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1645826 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4020568460727500567L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6884994 "InterruptedIOException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InterruptedIOException</code> with
<code>null</code> as its error detail message.
"
      end

      operation 6885122 "InterruptedIOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InterruptedIOException</code> with the
specified detail message. The string <code>s</code> can be
retrieved later by the
<code>{@link java.lang.Throwable#getMessage}</code>
method of class <code>java.lang.Throwable</code>.

@param   s   the detail message.
"
      end

      attribute 1645954 "bytesTransferred"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Reports how many bytes had been transferred as part of the I/O
operation before it was interrupted.

@serial

"
      end
    end

    class 925058 "IOError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when a serious I/O error has occurred.

@author  Xueming Shen
@since   1.6
"
      classrelation 3131010 // <generalisation>
	relation 3131010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3131010 // <generalisation>
	  b parent class_ref 195842 // Error
      end

      operation 6886018 "IOError"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of IOError with the specified cause. The
IOError is created with the detail message of
<tt>(cause==null ? null : cause.toString())</tt> (which typically
contains the class and detail message of cause).

@param  cause
        The cause of this error, or <tt>null</tt> if the cause
        is not known
"
      end

      attribute 1646466 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 67100927991680413L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 925186 "LineNumberInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is an input stream filter that provides the added
functionality of keeping track of the current line number.
<p>
A line is a sequence of bytes ending with a carriage return
character ({@code '\\u005Cr'}), a newline character
({@code '\\u005Cn'}), or a carriage return character followed
immediately by a linefeed character. In all three cases, the line
terminating character(s) are returned as a single newline character.
<p>
The line number begins at {@code 0}, and is incremented by
{@code 1} when a {@code read} returns a newline character.

@author     Arthur van Hoff
@see        java.io.LineNumberReader
@since      JDK1.0
@deprecated This class incorrectly assumes that bytes adequately represent
            characters.  As of JDK&nbsp;1.1, the preferred way to operate on
            character streams is via the new character-stream classes, which
            include a class for counting line numbers.
"
      classrelation 3131138 // <generalisation>
	relation 3131138 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3131138 // <generalisation>
	  b parent class_ref 577922 // FilterInputStream
      end

      attribute 1646594 "pushBack"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1646722 "lineNumber"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1646850 "markLineNumber"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1646978 "markPushBack"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6886146 "LineNumberInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newline number input stream that reads its input
from the specified input stream.

@param      in   the underlying input stream.
"
      end

      operation 6886274 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value
byte is returned as an {@code int} in the range
{@code 0} to {@code 255}. If no byte is available
because the end of the stream has been reached, the value
{@code -1} is returned. This method blocks until input data
is available, the end of the stream is detected, or an exception
is thrown.
<p>
The {@code read} method of
{@code LineNumberInputStream} calls the {@code read}
method of the underlying input stream. It checks for carriage
returns and newline characters in the input, and modifies the
current line number as appropriate. A carriage-return character or
a carriage return followed by a newline character are both
converted into a single newline character.

@return     the next byte of data, or {@code -1} if the end of this
            stream is reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.LineNumberInputStream#getLineNumber()
"
      end

      operation 6886402 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to {@code len} bytes of data from this input stream
into an array of bytes. This method blocks until some input is available.
<p>
The {@code read} method of
{@code LineNumberInputStream} repeatedly calls the
{@code read} method of zero arguments to fill in the byte array.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            {@code -1} if there is no more data because the end of
            this stream has been reached.
@exception  IOException  if an I/O error occurs.
@see        java.io.LineNumberInputStream#read()
"
      end

      operation 6886530 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards {@code n} bytes of data from this
input stream. The {@code skip} method may, for a variety of
reasons, end up skipping over some smaller number of bytes,
possibly {@code 0}. The actual number of bytes skipped is
returned.  If {@code n} is negative, no bytes are skipped.
<p>
The {@code skip} method of {@code LineNumberInputStream} creates
a byte array and then repeatedly reads into it until
{@code n} bytes have been read or the end of the stream has
been reached.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 6886658 "setLineNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "lineNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the line number to the specified argument.

@param      lineNumber   the new line number.
@see #getLineNumber
"
      end

      operation 6886786 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current line number.

@return     the current line number.
@see #setLineNumber
"
      end

      operation 6886914 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input
stream without blocking.
<p>
Note that if the underlying input stream is able to supply
<i>k</i> input characters without blocking, the
{@code LineNumberInputStream} can guarantee only to provide
<i>k</i>/2 characters without blocking, because the
<i>k</i> characters from the underlying input stream might
consist of <i>k</i>/2 pairs of {@code '\\u005Cr'} and
{@code '\\u005Cn'}, which are converted to just
<i>k</i>/2 {@code '\\u005Cn'} characters.

@return     the number of bytes that can be read from this input stream
            without blocking.
@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
"
      end

      operation 6887042 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream. A subsequent
call to the {@code reset} method repositions this stream at
the last marked position so that subsequent reads re-read the same bytes.
<p>
The {@code mark} method of
{@code LineNumberInputStream} remembers the current line
number in a private variable, and then calls the {@code mark}
method of the underlying input stream.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.FilterInputStream#in
@see     java.io.LineNumberInputStream#reset()
"
      end

      operation 6887170 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the
{@code mark} method was last called on this input stream.
<p>
The {@code reset} method of
{@code LineNumberInputStream} resets the line number to be
the line number at the time the {@code mark} method was
called, and then calls the {@code reset} method of the
underlying input stream.
<p>
Stream marks are intended to be used in
situations where you need to read ahead a little to see what's in
the stream. Often this is most easily done by invoking some
general parser. If the stream is of the type handled by the
parser, it just chugs along happily. If the stream is not of
that type, the parser should toss an exception when it fails,
which, if it happens within readlimit bytes, allows the outer
code to reset the stream and try another parser.

@exception  IOException  if an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.LineNumberInputStream#mark(int)
"
      end
    end

    class 925314 "LineNumberReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A buffered character-input stream that keeps track of line numbers.  This
class defines methods {@link #setLineNumber(int)} and {@link
#getLineNumber()} for setting and getting the current line number
respectively.

<p> By default, line numbering begins at 0. This number increments at every
<a href=\"#lt\">line terminator</a> as the data is read, and can be changed
with a call to <tt>setLineNumber(int)</tt>.  Note however, that
<tt>setLineNumber(int)</tt> does not actually change the current position in
the stream; it only changes the value that will be returned by
<tt>getLineNumber()</tt>.

<p> A line is considered to be <a name=\"lt\">terminated</a> by any one of a
line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed
immediately by a linefeed.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3131266 // <generalisation>
	relation 3131266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3131266 // <generalisation>
	  b parent class_ref 141314 // BufferedReader
      end

      attribute 1647106 "lineNumber"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current line number 
"
      end

      attribute 1647234 "markedLineNumber"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The line number of the mark, if any 
 Defaults to 0"
      end

      attribute 1647362 "skipLF"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If the next character is a line feed, skip it 
"
      end

      attribute 1647490 "markedSkipLF"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The skipLF flag when the mark was set 
"
      end

      operation 6887298 "LineNumberReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new line-numbering reader, using the default input-buffer
size.

@param  in
        A Reader object to provide the underlying stream
"
      end

      operation 6887426 "LineNumberReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 407298 // Reader
	  param in name "sz" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new line-numbering reader, reading characters into a buffer of
the given size.

@param  in
        A Reader object to provide the underlying stream

@param  sz
        An int specifying the size of the buffer
"
      end

      operation 6887554 "setLineNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "lineNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the current line number.

@param  lineNumber
        An int specifying the line number

@see #getLineNumber
"
      end

      operation 6887682 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current line number.

@return  The current line number

@see #setLineNumber
"
      end

      operation 6887810 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Read a single character.  <a href=\"#lt\">Line terminators</a> are
compressed into single newline ('\\n') characters.  Whenever a line
terminator is read the current line number is incremented.

@return  The character read, or -1 if the end of the stream has been
         reached

@throws  IOException
         If an I/O error occurs
"
      end

      operation 6887938 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Read characters into a portion of an array.  Whenever a <a
href=\"#lt\">line terminator</a> is read the current line number is
incremented.

@param  cbuf
        Destination buffer

@param  off
        Offset at which to start storing characters

@param  len
        Maximum number of characters to read

@return  The number of bytes read, or -1 if the end of the stream has
         already been reached

@throws  IOException
         If an I/O error occurs
"
      end

      operation 6888066 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a line of text.  Whenever a <a href=\"#lt\">line terminator</a> is
read the current line number is incremented.

@return  A String containing the contents of the line, not including
         any <a href=\"#lt\">line termination characters</a>, or
         <tt>null</tt> if the end of the stream has been reached

@throws  IOException
         If an I/O error occurs
"
      end

      attribute 1647618 "maxSkipBufferSize"
	class_attribute const_attribute private explicit_type "int"
	init_value " 8192"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum skip-buffer size 
"
      end

      attribute 1647746 "skipBuffer"
	private explicit_type "char"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Skip buffer, null until allocated 
"
      end

      operation 6888194 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters.

@param  n
        The number of characters to skip

@return  The number of characters actually skipped

@throws  IOException
         If an I/O error occurs

@throws  IllegalArgumentException
         If <tt>n</tt> is negative
"
      end

      operation 6888322 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the present position in the stream.  Subsequent calls to reset()
will attempt to reposition the stream to this point, and will also reset
the line number appropriately.

@param  readAheadLimit
        Limit on the number of characters that may be read while still
        preserving the mark.  After reading this many characters,
        attempting to reset the stream may fail.

@throws  IOException
         If an I/O error occurs
"
      end

      operation 6888450 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the stream to the most recent mark.

@throws  IOException
         If the stream has not been marked, or if the mark has been
         invalidated
"
      end
    end

    class 925442 "NotSerializableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when an instance is required to have a Serializable interface.
The serialization runtime or the class of the instance can throw
this exception. The argument should be the name of the class.

@author  unascribed
@since   JDK1.1
"
      classrelation 3131522 // <generalisation>
	relation 3131522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3131522 // <generalisation>
	  b parent class_ref 261506 // ObjectStreamException
      end

      attribute 1648002 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2906642554793891381L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6888834 "NotSerializableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "classname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NotSerializableException object with message string.

@param classname Class of the instance being serialized/deserialized.
"
      end

      operation 6888962 "NotSerializableException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a NotSerializableException object.
"
      end
    end

    class 926466 "OptionalDataException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception indicating the failure of an object read operation due to
unread primitive data, or the end of data belonging to a serialized
object in the stream.  This exception may be thrown in two cases:

<ul>
  <li>An attempt was made to read an object when the next element in the
      stream is primitive data.  In this case, the OptionalDataException's
      length field is set to the number of bytes of primitive data
      immediately readable from the stream, and the eof field is set to
      false.

  <li>An attempt was made to read past the end of data consumable by a
      class-defined readObject or readExternal method.  In this case, the
      OptionalDataException's eof field is set to true, and the length field
      is set to 0.
</ul>

@author  unascribed
@since   JDK1.1
"
      classrelation 3137282 // <generalisation>
	relation 3137282 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3137282 // <generalisation>
	  b parent class_ref 261506 // ObjectStreamException
      end

      attribute 1651074 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8011121865681257820L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6903298 "OptionalDataException"
	package explicit_return_type ""
	nparams 1
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an <code>OptionalDataException</code> with a length.
"
      end

      operation 6903426 "OptionalDataException"
	package explicit_return_type ""
	nparams 1
	  param inout name "end" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an <code>OptionalDataException</code> signifying no
more primitive data is available.
"
      end

      attribute 1651202 "length"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of bytes of primitive data available to be read
in the current buffer.

@serial

"
      end

      attribute 1651330 "eof"
	public explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if there is no more data in the buffered part of the stream.

@serial

"
      end
    end

    class 926594 "PipedInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A piped input stream should be connected
to a piped output stream; the piped  input
stream then provides whatever data bytes
are written to the piped output  stream.
Typically, data is read from a <code>PipedInputStream</code>
object by one thread  and data is written
to the corresponding <code>PipedOutputStream</code>
by some  other thread. Attempting to use
both objects from a single thread is not
recommended, as it may deadlock the thread.
The piped input stream contains a buffer,
decoupling read operations from write operations,
within limits.
A pipe is said to be <a name=\"BROKEN\"> <i>broken</i> </a> if a
thread that was providing data bytes to the connected
piped output stream is no longer alive.

@author  James Gosling
@see     java.io.PipedOutputStream
@since   JDK1.0
"
      classrelation 3137410 // <generalisation>
	relation 3137410 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3137410 // <generalisation>
	  b parent class_ref 146434 // InputStream
      end

      attribute 1651458 "closedByWriter"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1651586 "closedByReader"
	volatile package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1651714 "connected"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3137538 // readSide (<unidirectional association>)
	relation 3137538 --->
	  a role_name "readSide" package
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3137538 // readSide (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      classrelation 3137666 // writeSide (<unidirectional association>)
	relation 3137666 --->
	  a role_name "writeSide" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3137666 // writeSide (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      attribute 1651842 "DEFAULT_PIPE_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1651970 "PIPE_SIZE"
	class_attribute const_attribute protected explicit_type "int"
	init_value " DEFAULT_PIPE_SIZE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default size of the pipe's circular input buffer.
@since   JDK1.1

 This used to be a constant before the pipe size was allowed
 to change. This field will continue to be maintained
 for backward compatibility.
"
      end

      attribute 1652098 "buffer"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The circular buffer into which incoming data is placed.
@since   JDK1.1

"
      end

      attribute 1652226 "in"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the position in the circular buffer at which the
next byte of data will be stored when received from the connected
piped output stream. <code>in&lt;0</code> implies the buffer is empty,
<code>in==out</code> implies the buffer is full
@since   JDK1.1

"
      end

      attribute 1652354 "out"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the position in the circular buffer at which the next
byte of data will be read by this piped input stream.
@since   JDK1.1

"
      end

      operation 6903554 "PipedInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "src" type class_ref 926722 // PipedOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedInputStream</code> so
that it is connected to the piped output
stream <code>src</code>. Data bytes written
to <code>src</code> will then be  available
as input from this stream.

@param      src   the stream to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6903682 "PipedInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "src" type class_ref 926722 // PipedOutputStream
	  param in name "pipeSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedInputStream</code> so that it is
connected to the piped output stream
<code>src</code> and uses the specified pipe size for
the pipe's buffer.
Data bytes written to <code>src</code> will then
be available as input from this stream.

@param      src   the stream to connect to.
@param      pipeSize the size of the pipe's buffer.
@exception  IOException  if an I/O error occurs.
@exception  IllegalArgumentException if {@code pipeSize <= 0}.
@since      1.6
"
      end

      operation 6903810 "PipedInputStream"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedInputStream</code> so
that it is not yet {@linkplain #connect(java.io.PipedOutputStream)
connected}.
It must be {@linkplain java.io.PipedOutputStream#connect(
java.io.PipedInputStream) connected} to a
<code>PipedOutputStream</code> before being used.
"
      end

      operation 6903938 "PipedInputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "pipeSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedInputStream</code> so that it is not yet
{@linkplain #connect(java.io.PipedOutputStream) connected} and
uses the specified pipe size for the pipe's buffer.
It must be {@linkplain java.io.PipedOutputStream#connect(
java.io.PipedInputStream)
connected} to a <code>PipedOutputStream</code> before being used.

@param      pipeSize the size of the pipe's buffer.
@exception  IllegalArgumentException if {@code pipeSize <= 0}.
@since      1.6
"
      end

      operation 6904066 "initPipe"
	private explicit_return_type "void"
	nparams 1
	  param in name "pipeSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6904194 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "src" type class_ref 926722 // PipedOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this piped input stream to be connected
to the piped  output stream <code>src</code>.
If this object is already connected to some
other piped output  stream, an <code>IOException</code>
is thrown.
<p>
If <code>src</code> is an
unconnected piped output stream and <code>snk</code>
is an unconnected piped input stream, they
may be connected by either the call:

<pre><code>snk.connect(src)</code> </pre>
<p>
or the call:

<pre><code>src.connect(snk)</code> </pre>
<p>
The two calls have the same effect.

@param      src   The piped output stream to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6904322 "receive"
	protected explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a byte of data.  This method will block if no input is
available.
@param b the byte being received
@exception IOException If the pipe is <a href=\"#BROKEN\"> <code>broken</code></a>,
         {@link #connect(java.io.PipedOutputStream) unconnected},
         closed, or if an I/O error occurs.
@since     JDK1.1
"
      end

      operation 6904450 "receive"
	package explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives data into an array of bytes.  This method will
block until some input is available.
@param b the buffer into which the data is received
@param off the start offset of the data
@param len the maximum number of bytes received
@exception IOException If the pipe is <a href=\"#BROKEN\"> broken</a>,
          {@link #connect(java.io.PipedOutputStream) unconnected},
          closed,or if an I/O error occurs.
"
      end

      operation 6904578 "checkStateForReceive"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6904706 "awaitSpace"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6904834 "receivedLast"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all waiting threads that the last byte of data has been
received.
"
      end

      operation 6904962 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this piped input stream. The
value byte is returned as an <code>int</code> in the range
<code>0</code> to <code>255</code>.
This method blocks until input data is available, the end of the
stream is detected, or an exception is thrown.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if the pipe is
          {@link #connect(java.io.PipedOutputStream) unconnected},
          <a href=\"#BROKEN\"> <code>broken</code></a>, closed,
          or if an I/O error occurs.
"
      end

      operation 6905090 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this piped input
stream into an array of bytes. Less than <code>len</code> bytes
will be read if the end of the data stream is reached or if
<code>len</code> exceeds the pipe's buffer size.
If <code>len </code> is zero, then no bytes are read and 0 is returned;
otherwise, the method blocks until at least 1 byte of input is
available, end of the stream has been detected, or an exception is
thrown.

@param      b     the buffer into which the data is read.
@param      off   the start offset in the destination array <code>b</code>
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
@exception  IOException if the pipe is <a href=\"#BROKEN\"> <code>broken</code></a>,
          {@link #connect(java.io.PipedOutputStream) unconnected},
          closed, or if an I/O error occurs.
"
      end

      operation 6905218 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from this input
stream without blocking.

@return the number of bytes that can be read from this input stream
        without blocking, or {@code 0} if this input stream has been
        closed by invoking its {@link #close()} method, or if the pipe
        is {@link #connect(java.io.PipedOutputStream) unconnected}, or
         <a href=\"#BROKEN\"> <code>broken</code></a>.

@exception  IOException  if an I/O error occurs.
@since   JDK1.0.2
"
      end

      operation 6905346 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped input stream and releases any system resources
associated with the stream.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 926722 "PipedOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A piped output stream can be connected to a piped input stream
to create a communications pipe. The piped output stream is the
sending end of the pipe. Typically, data is written to a
<code>PipedOutputStream</code> object by one thread and data is
read from the connected <code>PipedInputStream</code> by some
other thread. Attempting to use both objects from a single thread
is not recommended as it may deadlock the thread.
The pipe is said to be <a name=BROKEN> <i>broken</i> </a> if a
thread that was reading data bytes from the connected piped input
stream is no longer alive.

@author  James Gosling
@see     java.io.PipedInputStream
@since   JDK1.0
"
      classrelation 3137794 // <generalisation>
	relation 3137794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3137794 // <generalisation>
	  b parent class_ref 151298 // OutputStream
      end

      classrelation 3137922 // sink (<unidirectional association>)
	relation 3137922 --->
	  a role_name "sink" private
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3137922 // sink (<unidirectional association>)
	  b parent class_ref 926594 // PipedInputStream
      end

      operation 6905474 "PipedOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "snk" type class_ref 926594 // PipedInputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped output stream connected to the specified piped
input stream. Data bytes written to this stream will then be
available as input from <code>snk</code>.

@param      snk   The piped input stream to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6905602 "PipedOutputStream"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped output stream that is not yet connected to a
piped input stream. It must be connected to a piped input stream,
either by the receiver or the sender, before being used.

@see     java.io.PipedInputStream#connect(java.io.PipedOutputStream)
@see     java.io.PipedOutputStream#connect(java.io.PipedInputStream)
"
      end

      operation 6905730 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "snk" type class_ref 926594 // PipedInputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this piped output stream to a receiver. If this object
is already connected to some other piped input stream, an
<code>IOException</code> is thrown.
<p>
If <code>snk</code> is an unconnected piped input stream and
<code>src</code> is an unconnected piped output stream, they may
be connected by either the call:
<blockquote><pre>
src.connect(snk)</pre></blockquote>
or the call:
<blockquote><pre>
snk.connect(src)</pre></blockquote>
The two calls have the same effect.

@param      snk   the piped input stream to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6905858 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified <code>byte</code> to the piped output stream.
<p>
Implements the <code>write</code> method of <code>OutputStream</code>.

@param      b   the <code>byte</code> to be written.
@exception IOException if the pipe is <a href=#BROKEN> broken</a>,
         {@link #connect(java.io.PipedInputStream) unconnected},
         closed, or if an I/O error occurs.
"
      end

      operation 6905986 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> bytes from the specified byte array
starting at offset <code>off</code> to this piped output stream.
This method blocks until all the bytes are written to the output
stream.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception IOException if the pipe is <a href=#BROKEN> broken</a>,
         {@link #connect(java.io.PipedInputStream) unconnected},
         closed, or if an I/O error occurs.
"
      end

      operation 6906114 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output bytes
to be written out.
This will notify any readers that bytes are waiting in the pipe.

@exception IOException if an I/O error occurs.
"
      end

      operation 6906242 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped output stream and releases any system resources
associated with this stream. This stream may no longer be used for
writing bytes.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 926850 "PipedReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Piped character-input streams.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3138050 // <generalisation>
	relation 3138050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3138050 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      attribute 1652482 "closedByWriter"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1652610 "closedByReader"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1652738 "connected"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3138178 // readSide (<unidirectional association>)
	relation 3138178 --->
	  a role_name "readSide" package
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3138178 // readSide (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      classrelation 3138306 // writeSide (<unidirectional association>)
	relation 3138306 --->
	  a role_name "writeSide" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3138306 // writeSide (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      attribute 1652866 "DEFAULT_PIPE_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1024"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The size of the pipe's circular input buffer.

"
      end

      attribute 1652994 "buffer"
	package explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The circular buffer into which incoming data is placed.

"
      end

      attribute 1653122 "in"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the position in the circular buffer at which the
next character of data will be stored when received from the connected
piped writer. <code>in&lt;0</code> implies the buffer is empty,
<code>in==out</code> implies the buffer is full

"
      end

      attribute 1653250 "out"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the position in the circular buffer at which the next
character of data will be read by this piped reader.

"
      end

      operation 6906370 "PipedReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "src" type class_ref 926978 // PipedWriter
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedReader</code> so
that it is connected to the piped writer
<code>src</code>. Data written to <code>src</code>
will then be available as input from this stream.

@param      src   the stream to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6906498 "PipedReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "src" type class_ref 926978 // PipedWriter
	  param in name "pipeSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedReader</code> so that it is connected
to the piped writer <code>src</code> and uses the specified
pipe size for the pipe's buffer. Data written to <code>src</code>
will then be  available as input from this stream.

@param      src       the stream to connect to.
@param      pipeSize  the size of the pipe's buffer.
@exception  IOException  if an I/O error occurs.
@exception  IllegalArgumentException if {@code pipeSize <= 0}.
@since      1.6
"
      end

      operation 6906626 "PipedReader"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedReader</code> so
that it is not yet {@linkplain #connect(java.io.PipedWriter)
connected}. It must be {@linkplain java.io.PipedWriter#connect(
java.io.PipedReader) connected} to a <code>PipedWriter</code>
before being used.
"
      end

      operation 6906754 "PipedReader"
	public explicit_return_type ""
	nparams 1
	  param in name "pipeSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PipedReader</code> so that it is not yet
{@link #connect(java.io.PipedWriter) connected} and uses
the specified pipe size for the pipe's buffer.
It must be  {@linkplain java.io.PipedWriter#connect(
java.io.PipedReader) connected} to a <code>PipedWriter</code>
before being used.

@param   pipeSize the size of the pipe's buffer.
@exception  IllegalArgumentException if {@code pipeSize <= 0}.
@since      1.6
"
      end

      operation 6906882 "initPipe"
	private explicit_return_type "void"
	nparams 1
	  param in name "pipeSize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6907010 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "src" type class_ref 926978 // PipedWriter
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this piped reader to be connected
to the piped  writer <code>src</code>.
If this object is already connected to some
other piped writer, an <code>IOException</code>
is thrown.
<p>
If <code>src</code> is an
unconnected piped writer and <code>snk</code>
is an unconnected piped reader, they
may be connected by either the call:

<pre><code>snk.connect(src)</code> </pre>
<p>
or the call:

<pre><code>src.connect(snk)</code> </pre>
<p>
The two calls have the same effect.

@param      src   The piped writer to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6907138 "receive"
	package explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a char of data. This method will block if no input is
available.
"
      end

      operation 6907266 "receive"
	package explicit_return_type "void"
	nparams 3
	  param inout name "c" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives data into an array of characters.  This method will
block until some input is available.
"
      end

      operation 6907394 "receivedLast"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all waiting threads that the last character of data has been
received.
"
      end

      operation 6907522 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next character of data from this piped stream.
If no character is available because the end of the stream
has been reached, the value <code>-1</code> is returned.
This method blocks until input data is available, the end of
the stream is detected, or an exception is thrown.

@return     the next character of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if the pipe is
         <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
         {@link #connect(java.io.PipedWriter) unconnected}, closed,
         or an I/O error occurs.
"
      end

      operation 6907650 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> characters of data from this piped
stream into an array of characters. Less than <code>len</code> characters
will be read if the end of the data stream is reached or if
<code>len</code> exceeds the pipe's buffer size. This method
blocks until at least one character of input is available.

@param      cbuf     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of characters read.
@return     the total number of characters read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  IOException  if the pipe is
                 <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
                 {@link #connect(java.io.PipedWriter) unconnected}, closed,
                 or an I/O error occurs.
"
      end

      operation 6907778 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether this stream is ready to be read.  A piped character
stream is ready if the circular buffer is not empty.

@exception  IOException  if the pipe is
                 <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
                 {@link #connect(java.io.PipedWriter) unconnected}, or closed.
"
      end

      operation 6907906 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped stream and releases any system resources
associated with the stream.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 926978 "PipedWriter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Piped character-output streams.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3138434 // <generalisation>
	relation 3138434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3138434 // <generalisation>
	  b parent class_ref 428034 // Writer
      end

      classrelation 3138562 // sink (<unidirectional association>)
	relation 3138562 --->
	  a role_name "sink" private
	    comment " REMIND: identification of the read and write sides needs to be
more sophisticated.  Either using thread groups (but what about
pipes within a thread?) or using finalization (but it may be a
long time until the next GC). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3138562 // sink (<unidirectional association>)
	  b parent class_ref 926850 // PipedReader
      end

      attribute 1653378 "closed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This flag records the open status of this particular writer. It
is independent of the status flags defined in PipedReader. It is
used to do a sanity check on connect.

"
      end

      operation 6908034 "PipedWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "snk" type class_ref 926850 // PipedReader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped writer connected to the specified piped
reader. Data characters written to this stream will then be
available as input from <code>snk</code>.

@param      snk   The piped reader to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6908162 "PipedWriter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a piped writer that is not yet connected to a
piped reader. It must be connected to a piped reader,
either by the receiver or the sender, before being used.

@see     java.io.PipedReader#connect(java.io.PipedWriter)
@see     java.io.PipedWriter#connect(java.io.PipedReader)
"
      end

      operation 6908290 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "snk" type class_ref 926850 // PipedReader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this piped writer to a receiver. If this object
is already connected to some other piped reader, an
<code>IOException</code> is thrown.
<p>
If <code>snk</code> is an unconnected piped reader and
<code>src</code> is an unconnected piped writer, they may
be connected by either the call:
<blockquote><pre>
src.connect(snk)</pre></blockquote>
or the call:
<blockquote><pre>
snk.connect(src)</pre></blockquote>
The two calls have the same effect.

@param      snk   the piped reader to connect to.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6908418 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified <code>char</code> to the piped output stream.
If a thread was reading data characters from the connected piped input
stream, but the thread is no longer alive, then an
<code>IOException</code> is thrown.
<p>
Implements the <code>write</code> method of <code>Writer</code>.

@param      c   the <code>char</code> to be written.
@exception  IOException  if the pipe is
         <a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,
         {@link #connect(java.io.PipedReader) unconnected}, closed
         or an I/O error occurs.
"
      end

      operation 6908546 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes <code>len</code> characters from the specified character array
starting at offset <code>off</code> to this piped output stream.
This method blocks until all the characters are written to the output
stream.
If a thread was reading data characters from the connected piped input
stream, but the thread is no longer alive, then an
<code>IOException</code> is thrown.

@param      cbuf  the data.
@param      off   the start offset in the data.
@param      len   the number of characters to write.
@exception  IOException  if the pipe is
         <a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,
         {@link #connect(java.io.PipedReader) unconnected}, closed
         or an I/O error occurs.
"
      end

      operation 6908674 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this output stream and forces any buffered output characters
to be written out.
This will notify any readers that characters are waiting in the pipe.

@exception  IOException  if the pipe is closed, or an I/O error occurs.
"
      end

      operation 6908802 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this piped output stream and releases any system resources
associated with this stream. This stream may no longer be used for
writing characters.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 927106 "PushbackInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>PushbackInputStream</code> adds
functionality to another input stream, namely
the  ability to \"push back\" or \"unread\"
one byte. This is useful in situations where
it is  convenient for a fragment of code
to read an indefinite number of data bytes
that  are delimited by a particular byte
value; after reading the terminating byte,
the  code fragment can \"unread\" it, so that
the next read operation on the input stream
will reread the byte that was pushed back.
For example, bytes representing the  characters
constituting an identifier might be terminated
by a byte representing an  operator character;
a method whose job is to read just an identifier
can read until it  sees the operator and
then push the operator back to be re-read.

@author  David Connelly
@author  Jonathan Payne
@since   JDK1.0
"
      classrelation 3140098 // <generalisation>
	relation 3140098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3140098 // <generalisation>
	  b parent class_ref 577922 // FilterInputStream
      end

      attribute 1654146 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pushback buffer.
@since   JDK1.1

"
      end

      attribute 1654274 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The position within the pushback buffer from which the next byte will
be read.  When the buffer is empty, <code>pos</code> is equal to
<code>buf.length</code>; when the buffer is full, <code>pos</code> is
equal to zero.

@since   JDK1.1

"
      end

      operation 6921346 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check to make sure that this stream has not been closed
"
      end

      operation 6921474 "PushbackInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 146434 // InputStream
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PushbackInputStream</code>
with a pushback buffer of the specified <code>size</code>,
and saves its  argument, the input stream
<code>in</code>, for later use. Initially,
there is no pushed-back byte  (the field
<code>pushBack</code> is initialized to
<code>-1</code>).

@param  in    the input stream from which bytes will be read.
@param  size  the size of the pushback buffer.
@exception IllegalArgumentException if {@code size <= 0}
@since  JDK1.1
"
      end

      operation 6921602 "PushbackInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PushbackInputStream</code>
and saves its  argument, the input stream
<code>in</code>, for later use. Initially,
there is no pushed-back byte  (the field
<code>pushBack</code> is initialized to
<code>-1</code>).

@param   in   the input stream from which bytes will be read.
"
      end

      operation 6921730 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value
byte is returned as an <code>int</code> in the range
<code>0</code> to <code>255</code>. If no byte is available
because the end of the stream has been reached, the value
<code>-1</code> is returned. This method blocks until input data
is available, the end of the stream is detected, or an exception
is thrown.

<p> This method returns the most recently pushed-back byte, if there is
one, and otherwise calls the <code>read</code> method of its underlying
input stream and returns whatever value that method returns.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream has been reached.
@exception  IOException  if this input stream has been closed by
            invoking its {@link #close()} method,
            or an I/O error occurs.
@see        java.io.InputStream#read()
"
      end

      operation 6921858 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream into
an array of bytes.  This method first reads any pushed-back bytes; after
that, if fewer than <code>len</code> bytes have been read then it
reads from the underlying input stream. If <code>len</code> is not zero, the method
blocks until at least 1 byte of input is available; otherwise, no
bytes are read and <code>0</code> is returned.

@param      b     the buffer into which the data is read.
@param      off   the start offset in the destination array <code>b</code>
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
@exception  IOException  if this input stream has been closed by
            invoking its {@link #close()} method,
            or an I/O error occurs.
@see        java.io.InputStream#read(byte[], int, int)
"
      end

      operation 6921986 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back a byte by copying it to the front of the pushback buffer.
After this method returns, the next byte to be read will have the value
<code>(byte)b</code>.

@param      b   the <code>int</code> value whose low-order
                 byte is to be pushed back.
@exception IOException If there is not enough room in the pushback
           buffer for the byte, or this input stream has been closed by
           invoking its {@link #close()} method.
"
      end

      operation 6922114 "unread"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back a portion of an array of bytes by copying it to the front
of the pushback buffer.  After this method returns, the next byte to be
read will have the value <code>b[off]</code>, the byte after that will
have the value <code>b[off+1]</code>, and so forth.

@param b the byte array to push back.
@param off the start offset of the data.
@param len the number of bytes to push back.
@exception IOException If there is not enough room in the pushback
           buffer for the specified number of bytes,
           or this input stream has been closed by
           invoking its {@link #close()} method.
@since     JDK1.1
"
      end

      operation 6922242 "unread"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back an array of bytes by copying it to the front of the
pushback buffer.  After this method returns, the next byte to be read
will have the value <code>b[0]</code>, the byte after that will have the
value <code>b[1]</code>, and so forth.

@param b the byte array to push back
@exception IOException If there is not enough room in the pushback
           buffer for the specified number of bytes,
           or this input stream has been closed by
           invoking its {@link #close()} method.
@since     JDK1.1
"
      end

      operation 6922370 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of bytes that can be read (or
skipped over) from this input stream without blocking by the next
invocation of a method for this input stream. The next invocation might be
the same thread or another thread.  A single read or skip of this
many bytes will not block, but may read or skip fewer bytes.

<p> The method returns the sum of the number of bytes that have been
pushed back and the value returned by {@link
java.io.FilterInputStream#available available}.

@return     the number of bytes that can be read (or skipped over) from
            the input stream without blocking.
@exception  IOException  if this input stream has been closed by
            invoking its {@link #close()} method,
            or an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#available()
"
      end

      operation 6922498 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards <code>n</code> bytes of data from this
input stream. The <code>skip</code> method may, for a variety of
reasons, end up skipping over some smaller number of bytes,
possibly zero.  If <code>n</code> is negative, no bytes are skipped.

<p> The <code>skip</code> method of <code>PushbackInputStream</code>
first skips over the bytes in the pushback buffer, if any.  It then
calls the <code>skip</code> method of the underlying input stream if
more bytes need to be skipped.  The actual number of bytes skipped
is returned.

@param      n  {@inheritDoc}
@return     {@inheritDoc}
@exception  IOException  if the stream does not support seek,
           or the stream has been closed by
           invoking its {@link #close()} method,
           or an I/O error occurs.
@see        java.io.FilterInputStream#in
@see        java.io.InputStream#skip(long n)
@since      1.2
"
      end

      operation 6922626 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this input stream supports the <code>mark</code> and
<code>reset</code> methods, which it does not.

@return   <code>false</code>, since this class does not support the
          <code>mark</code> and <code>reset</code> methods.
@see     java.io.InputStream#mark(int)
@see     java.io.InputStream#reset()
"
      end

      operation 6922754 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this input stream.

<p> The <code>mark</code> method of <code>PushbackInputStream</code>
does nothing.

@param   readlimit   the maximum limit of bytes that can be read before
                     the mark position becomes invalid.
@see     java.io.InputStream#reset()
"
      end

      operation 6922882 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this stream to the position at the time the
<code>mark</code> method was last called on this input stream.

<p> The method <code>reset</code> for class
<code>PushbackInputStream</code> does nothing except throw an
<code>IOException</code>.

@exception  IOException  if this method is invoked.
@see     java.io.InputStream#mark(int)
@see     java.io.IOException
"
      end

      operation 6923010 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources
associated with the stream.
Once the stream has been closed, further read(), unread(),
available(), reset(), or skip() invocations will throw an IOException.
Closing a previously closed stream has no effect.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 927234 "PushbackReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A character-stream reader that allows characters to be pushed back into the
stream.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3140226 // <generalisation>
	relation 3140226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3140226 // <generalisation>
	  b parent class_ref 548226 // FilterReader
      end

      attribute 1654402 "buf"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pushback buffer 
"
      end

      attribute 1654530 "pos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Current position in buffer 
"
      end

      operation 6923138 "PushbackReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 407298 // Reader
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new pushback reader with a pushback buffer of the given size.

@param   in   The reader from which characters will be read
@param   size The size of the pushback buffer
@exception IllegalArgumentException if {@code size <= 0}
"
      end

      operation 6923266 "PushbackReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new pushback reader with a one-character pushback buffer.

@param   in  The reader from which characters will be read
"
      end

      operation 6923394 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks to make sure that the stream has not been closed. "
      end

      operation 6923522 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character.

@return     The character read, or -1 if the end of the stream has been
            reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 6923650 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array.

@param      cbuf  Destination buffer
@param      off   Offset at which to start writing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 6923778 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back a single character by copying it to the front of the
pushback buffer. After this method returns, the next character to be read
will have the value <code>(char)c</code>.

@param  c  The int value representing a character to be pushed back

@exception  IOException  If the pushback buffer is full,
                         or if some other I/O error occurs
"
      end

      operation 6923906 "unread"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back a portion of an array of characters by copying it to the
front of the pushback buffer.  After this method returns, the next
character to be read will have the value <code>cbuf[off]</code>, the
character after that will have the value <code>cbuf[off+1]</code>, and
so forth.

@param  cbuf  Character array
@param  off   Offset of first character to push back
@param  len   Number of characters to push back

@exception  IOException  If there is insufficient room in the pushback
                         buffer, or if some other I/O error occurs
"
      end

      operation 6924034 "unread"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back an array of characters by copying it to the front of the
pushback buffer.  After this method returns, the next character to be
read will have the value <code>cbuf[0]</code>, the character after that
will have the value <code>cbuf[1]</code>, and so forth.

@param  cbuf  Character array to push back

@exception  IOException  If there is insufficient room in the pushback
                         buffer, or if some other I/O error occurs
"
      end

      operation 6924162 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream is ready to be read.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6924290 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the present position in the stream. The <code>mark</code>
for class <code>PushbackReader</code> always throws an exception.

@exception  IOException  Always, since mark is not supported
"
      end

      operation 6924418 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the stream. The <code>reset</code> method of
<code>PushbackReader</code> always throws an exception.

@exception  IOException  Always, since reset is not supported
"
      end

      operation 6924546 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream supports the mark() operation, which it does
not.
"
      end

      operation 6924674 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream and releases any system resources associated with
it. Once the stream has been closed, further read(),
unread(), ready(), or skip() invocations will throw an IOException.
Closing a previously closed stream has no effect.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6924802 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips characters.  This method will block until some characters are
available, an I/O error occurs, or the end of the stream is reached.

@param  n  The number of characters to skip

@return    The number of characters actually skipped

@exception  IllegalArgumentException  If <code>n</code> is negative.
@exception  IOException  If an I/O error occurs
"
      end
    end

    class 927362 "RandomAccessFile"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Instances of this class support both reading and writing to a
random access file. A random access file behaves like a large
array of bytes stored in the file system. There is a kind of cursor,
or index into the implied array, called the <em>file pointer</em>;
input operations read bytes starting at the file pointer and advance
the file pointer past the bytes read. If the random access file is
created in read/write mode, then output operations are also available;
output operations write bytes starting at the file pointer and advance
the file pointer past the bytes written. Output operations that write
past the current end of the implied array cause the array to be
extended. The file pointer can be read by the
{@code getFilePointer} method and set by the {@code seek}
method.
<p>
It is generally true of all the reading routines in this class that
if end-of-file is reached before the desired number of bytes has been
read, an {@code EOFException} (which is a kind of
{@code IOException}) is thrown. If any byte cannot be read for
any reason other than end-of-file, an {@code IOException} other
than {@code EOFException} is thrown. In particular, an
{@code IOException} may be thrown if the stream has been closed.

@author  unascribed
@since   JDK1.0
"
      classrelation 3140354 // <realization>
	relation 3140354 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3140354 // <realization>
	  b parent class_ref 174210 // DataOutput
      end

      classrelation 3140482 // <realization>
	relation 3140482 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3140482 // <realization>
	  b parent class_ref 169602 // DataInput
      end

      classrelation 3140610 // <realization>
	relation 3140610 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3140610 // <realization>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 3140738 // fd (<unidirectional association>)
	relation 3140738 --->
	  a role_name "fd" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3140738 // fd (<unidirectional association>)
	  b parent class_ref 923778 // FileDescriptor
      end

      classrelation 3140866 // channel (<unidirectional association>)
	relation 3140866 --->
	  a role_name "channel" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3140866 // channel (<unidirectional association>)
	  b parent class_ref 924034 // FileChannel
      end

      attribute 1654658 "rw"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3140994 // path (<unidirectional association>)
	relation 3140994 --->
	  a role_name "path" const_relation private
	    comment "
The path of the referenced file
(null if the stream is created with a file descriptor)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3140994 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3141122 // closeLock (<unidirectional association>)
	relation 3141122 --->
	  a role_name "closeLock" init_value " new Object()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3141122 // closeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1654786 "closed"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1654914 "O_RDONLY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1655042 "O_RDWR"
	class_attribute const_attribute private explicit_type "int"
	init_value "   2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1655170 "O_SYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value "   4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1655298 "O_DSYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value "  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6924930 "RandomAccessFile"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "mode" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a random access file stream to read from, and optionally
to write to, a file with the specified name. A new
{@link FileDescriptor} object is created to represent the
connection to the file.

<p> The <tt>mode</tt> argument specifies the access mode with which the
file is to be opened.  The permitted values and their meanings are as
specified for the <a
href=\"#mode\"><tt>RandomAccessFile(File,String)</tt></a> constructor.

<p>
If there is a security manager, its {@code checkRead} method
is called with the {@code name} argument
as its argument to see if read access to the file is allowed.
If the mode allows writing, the security manager's
{@code checkWrite} method
is also called with the {@code name} argument
as its argument to see if write access to the file is allowed.

@param      name   the system-dependent filename
@param      mode   the access <a href=\"#mode\">mode</a>
@exception  IllegalArgumentException  if the mode argument is not equal
              to one of <tt>\"r\"</tt>, <tt>\"rw\"</tt>, <tt>\"rws\"</tt>, or
              <tt>\"rwd\"</tt>
@exception FileNotFoundException
           if the mode is <tt>\"r\"</tt> but the given string does not
           denote an existing regular file, or if the mode begins with
           <tt>\"rw\"</tt> but the given string does not denote an
           existing, writable regular file and a new regular file of
           that name cannot be created, or if some other error occurs
           while opening or creating the file
@exception  SecurityException         if a security manager exists and its
              {@code checkRead} method denies read access to the file
              or the mode is \"rw\" and the security manager's
              {@code checkWrite} method denies write access to the file
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkRead(java.lang.String)
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@revised 1.4
@spec JSR-51
"
      end

      operation 6925058 "RandomAccessFile"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 131970 // File
	  param inout name "mode" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a random access file stream to read from, and optionally to
write to, the file specified by the {@link File} argument.  A new {@link
FileDescriptor} object is created to represent this file connection.

<p>The <a name=\"mode\"><tt>mode</tt></a> argument specifies the access mode
in which the file is to be opened.  The permitted values and their
meanings are:

<table summary=\"Access mode permitted values and meanings\">
<tr><th align=\"left\">Value</th><th align=\"left\">Meaning</th></tr>
<tr><td valign=\"top\"><tt>\"r\"</tt></td>
    <td> Open for reading only.  Invoking any of the <tt>write</tt>
    methods of the resulting object will cause an {@link
    java.io.IOException} to be thrown. </td></tr>
<tr><td valign=\"top\"><tt>\"rw\"</tt></td>
    <td> Open for reading and writing.  If the file does not already
    exist then an attempt will be made to create it. </td></tr>
<tr><td valign=\"top\"><tt>\"rws\"</tt></td>
    <td> Open for reading and writing, as with <tt>\"rw\"</tt>, and also
    require that every update to the file's content or metadata be
    written synchronously to the underlying storage device.  </td></tr>
<tr><td valign=\"top\"><tt>\"rwd\"&nbsp;&nbsp;</tt></td>
    <td> Open for reading and writing, as with <tt>\"rw\"</tt>, and also
    require that every update to the file's content be written
    synchronously to the underlying storage device. </td></tr>
</table>

The <tt>\"rws\"</tt> and <tt>\"rwd\"</tt> modes work much like the {@link
java.nio.channels.FileChannel#force(boolean) force(boolean)} method of
the {@link java.nio.channels.FileChannel} class, passing arguments of
<tt>true</tt> and <tt>false</tt>, respectively, except that they always
apply to every I/O operation and are therefore often more efficient.  If
the file resides on a local storage device then when an invocation of a
method of this class returns it is guaranteed that all changes made to
the file by that invocation will have been written to that device.  This
is useful for ensuring that critical information is not lost in the
event of a system crash.  If the file does not reside on a local device
then no such guarantee is made.

<p>The <tt>\"rwd\"</tt> mode can be used to reduce the number of I/O
operations performed.  Using <tt>\"rwd\"</tt> only requires updates to the
file's content to be written to storage; using <tt>\"rws\"</tt> requires
updates to both the file's content and its metadata to be written, which
generally requires at least one more low-level I/O operation.

<p>If there is a security manager, its {@code checkRead} method is
called with the pathname of the {@code file} argument as its
argument to see if read access to the file is allowed.  If the mode
allows writing, the security manager's {@code checkWrite} method is
also called with the path argument to see if write access to the file is
allowed.

@param      file   the file object
@param      mode   the access mode, as described
                   <a href=\"#mode\">above</a>
@exception  IllegalArgumentException  if the mode argument is not equal
              to one of <tt>\"r\"</tt>, <tt>\"rw\"</tt>, <tt>\"rws\"</tt>, or
              <tt>\"rwd\"</tt>
@exception FileNotFoundException
           if the mode is <tt>\"r\"</tt> but the given file object does
           not denote an existing regular file, or if the mode begins
           with <tt>\"rw\"</tt> but the given file object does not denote
           an existing, writable regular file and a new regular file of
           that name cannot be created, or if some other error occurs
           while opening or creating the file
@exception  SecurityException         if a security manager exists and its
              {@code checkRead} method denies read access to the file
              or the mode is \"rw\" and the security manager's
              {@code checkWrite} method denies write access to the file
@see        java.lang.SecurityManager#checkRead(java.lang.String)
@see        java.lang.SecurityManager#checkWrite(java.lang.String)
@see        java.nio.channels.FileChannel#force(boolean)
@revised 1.4
@spec JSR-51
"
      end

      operation 6925186 "getFD"
	public return_type class_ref 923778 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the opaque file descriptor object associated with this
stream.

@return     the file descriptor object associated with this stream.
@exception  IOException  if an I/O error occurs.
@see        java.io.FileDescriptor
"
      end

      operation 6925314 "getChannel"
	public return_type class_ref 924034 // FileChannel
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unique {@link java.nio.channels.FileChannel FileChannel}
object associated with this file.

<p> The {@link java.nio.channels.FileChannel#position()
position} of the returned channel will always be equal to
this object's file-pointer offset as returned by the {@link
#getFilePointer getFilePointer} method.  Changing this object's
file-pointer offset, whether explicitly or by reading or writing bytes,
will change the position of the channel, and vice versa.  Changing the
file's length via this object will change the length seen via the file
channel, and vice versa.

@return  the file channel associated with this file

@since 1.4
@spec JSR-51
"
      end

      operation 6925442 "open0"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "mode" explicit_type "int"
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Opens a file and returns the file descriptor.  The file is
opened in read-write mode if the O_RDWR bit in {@code mode}
is true, else the file is opened as read-only.
If the {@code name} refers to a directory, an IOException
is thrown.

@param name the name of the file
@param mode the mode flags, a combination of the O_ constants
            defined above
"
      end

      operation 6925570 "open"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "mode" explicit_type "int"
	nexceptions 1
	  exception class_ref 580354 // FileNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " wrap native call to allow instrumentation

Opens a file and returns the file descriptor.  The file is
opened in read-write mode if the O_RDWR bit in {@code mode}
is true, else the file is opened as read-only.
If the {@code name} refers to a directory, an IOException
is thrown.

@param name the name of the file
@param mode the mode flags, a combination of the O_ constants
            defined above
"
      end

      operation 6925698 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " 'Read' primitives

Reads a byte of data from this file. The byte is returned as an
integer in the range 0 to 255 ({@code 0x00-0x0ff}). This
method blocks if no input is yet available.
<p>
Although {@code RandomAccessFile} is not a subclass of
{@code InputStream}, this method behaves in exactly the same
way as the {@link InputStream#read()} method of
{@code InputStream}.

@return     the next byte of data, or {@code -1} if the end of the
            file has been reached.
@exception  IOException  if an I/O error occurs. Not thrown if
                         end-of-file has been reached.
"
      end

      operation 6925826 "read0"
	private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 6925954 "readBytes"
	private explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Reads a sub array as a sequence of bytes.
@param b the buffer into which the data is read.
@param off the start offset of the data.
@param len the number of bytes to read.
@exception IOException If an I/O error has occurred.
"
      end

      operation 6926082 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to {@code len} bytes of data from this file into an
array of bytes. This method blocks until at least one byte of input
is available.
<p>
Although {@code RandomAccessFile} is not a subclass of
{@code InputStream}, this method behaves in exactly the
same way as the {@link InputStream#read(byte[], int, int)} method of
{@code InputStream}.

@param      b     the buffer into which the data is read.
@param      off   the start offset in array {@code b}
                  at which the data is written.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            {@code -1} if there is no more data because the end of
            the file has been reached.
@exception  IOException If the first byte cannot be read for any reason
other than end of file, or if the random access file has been closed, or if
some other I/O error occurs.
@exception  NullPointerException If {@code b} is {@code null}.
@exception  IndexOutOfBoundsException If {@code off} is negative,
{@code len} is negative, or {@code len} is greater than
{@code b.length - off}
"
      end

      operation 6926210 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to {@code b.length} bytes of data from this file
into an array of bytes. This method blocks until at least one byte
of input is available.
<p>
Although {@code RandomAccessFile} is not a subclass of
{@code InputStream}, this method behaves in exactly the
same way as the {@link InputStream#read(byte[])} method of
{@code InputStream}.

@param      b   the buffer into which the data is read.
@return     the total number of bytes read into the buffer, or
            {@code -1} if there is no more data because the end of
            this file has been reached.
@exception  IOException If the first byte cannot be read for any reason
other than end of file, or if the random access file has been closed, or if
some other I/O error occurs.
@exception  NullPointerException If {@code b} is {@code null}.
"
      end

      operation 6926338 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads {@code b.length} bytes from this file into the byte
array, starting at the current file pointer. This method reads
repeatedly from the file until the requested number of bytes are
read. This method blocks until the requested number of bytes are
read, the end of the stream is detected, or an exception is thrown.

@param      b   the buffer into which the data is read.
@exception  EOFException  if this file reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6926466 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads exactly {@code len} bytes from this file into the byte
array, starting at the current file pointer. This method reads
repeatedly from the file until the requested number of bytes are
read. This method blocks until the requested number of bytes are
read, the end of the stream is detected, or an exception is thrown.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the number of bytes to read.
@exception  EOFException  if this file reaches the end before reading
              all the bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6926594 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to skip over {@code n} bytes of input discarding the
skipped bytes.
<p>

This method may skip over some smaller number of bytes, possibly zero.
This may result from any of a number of conditions; reaching end of
file before {@code n} bytes have been skipped is only one
possibility. This method never throws an {@code EOFException}.
The actual number of bytes skipped is returned.  If {@code n}
is negative, no bytes are skipped.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6926722 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " 'Write' primitives

Writes the specified byte to this file. The write starts at
the current file pointer.

@param      b   the {@code byte} to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6926850 "write0"
	private explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6926978 "writeBytes"
	private explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Writes a sub array as a sequence of bytes.
@param b the data to be written

@param off the start offset in the data
@param len the number of bytes that are written
@exception IOException If an I/O error has occurred.
"
      end

      operation 6927106 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code b.length} bytes from the specified byte array
to this file, starting at the current file pointer.

@param      b   the data.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6927234 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code len} bytes from the specified byte array
starting at offset {@code off} to this file.

@param      b     the data.
@param      off   the start offset in the data.
@param      len   the number of bytes to write.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6927362 "getFilePointer"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment " 'Random access' stuff

Returns the current offset in this file.

@return     the offset from the beginning of the file, in bytes,
            at which the next read or write occurs.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6927490 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the file-pointer offset, measured from the beginning of this
file, at which the next read or write occurs.  The offset may be
set beyond the end of the file. Setting the offset beyond the end
of the file does not change the file length.  The file length will
change only by writing after the offset has been set beyond the end
of the file.

@param      pos   the offset position, measured in bytes from the
                  beginning of the file, at which to set the file
                  pointer.
@exception  IOException  if {@code pos} is less than
                         {@code 0} or if an I/O error occurs.
"
      end

      operation 6927618 "seek0"
	private explicit_return_type "void"
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6927746 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Returns the length of this file.

@return     the length of this file, measured in bytes.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6927874 "setLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "newLength" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment "Sets the length of this file.

<p> If the present length of the file as returned by the
{@code length} method is greater than the {@code newLength}
argument then the file will be truncated.  In this case, if the file
offset as returned by the {@code getFilePointer} method is greater
than {@code newLength} then after this method returns the offset
will be equal to {@code newLength}.

<p> If the present length of the file as returned by the
{@code length} method is smaller than the {@code newLength}
argument then the file will be extended.  In this case, the contents of
the extended portion of the file are not defined.

@param      newLength    The desired length of the file
@exception  IOException  If an I/O error occurs
@since      1.2
"
      end

      operation 6928002 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this random access file stream and releases any system
resources associated with the stream. A closed random access
file cannot perform input or output operations and cannot be
reopened.

<p> If this file has an associated channel then the channel is closed
as well.

@exception  IOException  if an I/O error occurs.

@revised 1.4
@spec JSR-51
"
      end

      operation 6928130 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Some \"reading/writing Java data types\" methods stolen from
  DataInputStream and DataOutputStream.


Reads a {@code boolean} from this file. This method reads a
single byte from the file, starting at the current file pointer.
A value of {@code 0} represents
{@code false}. Any other value represents {@code true}.
This method blocks until the byte is read, the end of the stream
is detected, or an exception is thrown.

@return     the {@code boolean} value read.
@exception  EOFException  if this file has reached the end.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6928258 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed eight-bit value from this file. This method reads a
byte from the file, starting from the current file pointer.
If the byte read is {@code b}, where
<code>0&nbsp;&lt;=&nbsp;b&nbsp;&lt;=&nbsp;255</code>,
then the result is:
<blockquote><pre>
    (byte)(b)
</pre></blockquote>
<p>
This method blocks until the byte is read, the end of the stream
is detected, or an exception is thrown.

@return     the next byte of this file as a signed eight-bit
            {@code byte}.
@exception  EOFException  if this file has reached the end.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6928386 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned eight-bit number from this file. This method reads
a byte from this file, starting at the current file pointer,
and returns that byte.
<p>
This method blocks until the byte is read, the end of the stream
is detected, or an exception is thrown.

@return     the next byte of this file, interpreted as an unsigned
            eight-bit number.
@exception  EOFException  if this file has reached the end.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6928514 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed 16-bit number from this file. The method reads two
bytes from this file, starting at the current file pointer.
If the two bytes read, in order, are
{@code b1} and {@code b2}, where each of the two values is
between {@code 0} and {@code 255}, inclusive, then the
result is equal to:
<blockquote><pre>
    (short)((b1 &lt;&lt; 8) | b2)
</pre></blockquote>
<p>
This method blocks until the two bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     the next two bytes of this file, interpreted as a signed
            16-bit number.
@exception  EOFException  if this file reaches the end before reading
              two bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6928642 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 16-bit number from this file. This method reads
two bytes from the file, starting at the current file pointer.
If the bytes read, in order, are
{@code b1} and {@code b2}, where
<code>0&nbsp;&lt;=&nbsp;b1, b2&nbsp;&lt;=&nbsp;255</code>,
then the result is equal to:
<blockquote><pre>
    (b1 &lt;&lt; 8) | b2
</pre></blockquote>
<p>
This method blocks until the two bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     the next two bytes of this file, interpreted as an unsigned
            16-bit integer.
@exception  EOFException  if this file reaches the end before reading
              two bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6928770 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a character from this file. This method reads two
bytes from the file, starting at the current file pointer.
If the bytes read, in order, are
{@code b1} and {@code b2}, where
<code>0&nbsp;&lt;=&nbsp;b1,&nbsp;b2&nbsp;&lt;=&nbsp;255</code>,
then the result is equal to:
<blockquote><pre>
    (char)((b1 &lt;&lt; 8) | b2)
</pre></blockquote>
<p>
This method blocks until the two bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     the next two bytes of this file, interpreted as a
                 {@code char}.
@exception  EOFException  if this file reaches the end before reading
              two bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6928898 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed 32-bit integer from this file. This method reads 4
bytes from the file, starting at the current file pointer.
If the bytes read, in order, are {@code b1},
{@code b2}, {@code b3}, and {@code b4}, where
<code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>,
then the result is equal to:
<blockquote><pre>
    (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4
</pre></blockquote>
<p>
This method blocks until the four bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     the next four bytes of this file, interpreted as an
            {@code int}.
@exception  EOFException  if this file reaches the end before reading
              four bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6929026 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a signed 64-bit integer from this file. This method reads eight
bytes from the file, starting at the current file pointer.
If the bytes read, in order, are
{@code b1}, {@code b2}, {@code b3},
{@code b4}, {@code b5}, {@code b6},
{@code b7}, and {@code b8,} where:
<blockquote><pre>
    0 &lt;= b1, b2, b3, b4, b5, b6, b7, b8 &lt;=255,
</pre></blockquote>
<p>
then the result is equal to:
<blockquote><pre>
    ((long)b1 &lt;&lt; 56) + ((long)b2 &lt;&lt; 48)
    + ((long)b3 &lt;&lt; 40) + ((long)b4 &lt;&lt; 32)
    + ((long)b5 &lt;&lt; 24) + ((long)b6 &lt;&lt; 16)
    + ((long)b7 &lt;&lt; 8) + b8
</pre></blockquote>
<p>
This method blocks until the eight bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     the next eight bytes of this file, interpreted as a
            {@code long}.
@exception  EOFException  if this file reaches the end before reading
              eight bytes.
@exception  IOException   if an I/O error occurs.
"
      end

      operation 6929154 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a {@code float} from this file. This method reads an
{@code int} value, starting at the current file pointer,
as if by the {@code readInt} method
and then converts that {@code int} to a {@code float}
using the {@code intBitsToFloat} method in class
{@code Float}.
<p>
This method blocks until the four bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     the next four bytes of this file, interpreted as a
            {@code float}.
@exception  EOFException  if this file reaches the end before reading
            four bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.RandomAccessFile#readInt()
@see        java.lang.Float#intBitsToFloat(int)
"
      end

      operation 6929282 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a {@code double} from this file. This method reads a
{@code long} value, starting at the current file pointer,
as if by the {@code readLong} method
and then converts that {@code long} to a {@code double}
using the {@code longBitsToDouble} method in
class {@code Double}.
<p>
This method blocks until the eight bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     the next eight bytes of this file, interpreted as a
            {@code double}.
@exception  EOFException  if this file reaches the end before reading
            eight bytes.
@exception  IOException   if an I/O error occurs.
@see        java.io.RandomAccessFile#readLong()
@see        java.lang.Double#longBitsToDouble(long)
"
      end

      operation 6929410 "readLine"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next line of text from this file.  This method successively
reads bytes from the file, starting at the current file pointer,
until it reaches a line terminator or the end
of the file.  Each byte is converted into a character by taking the
byte's value for the lower eight bits of the character and setting the
high eight bits of the character to zero.  This method does not,
therefore, support the full Unicode character set.

<p> A line of text is terminated by a carriage-return character
({@code '\\u005Cr'}), a newline character ({@code '\\u005Cn'}), a
carriage-return character immediately followed by a newline character,
or the end of the file.  Line-terminating characters are discarded and
are not included as part of the string returned.

<p> This method blocks until a newline character is read, a carriage
return and the byte following it are read (to see if it is a newline),
the end of the file is reached, or an exception is thrown.

@return     the next line of text from this file, or null if end
            of file is encountered before even one byte is read.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6929538 "readUTF"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a string from this file. The string has been encoded
using a
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format.
<p>
The first two bytes are read, starting from the current file
pointer, as if by
{@code readUnsignedShort}. This value gives the number of
following bytes that are in the encoded string, not
the length of the resulting string. The following bytes are then
interpreted as bytes encoding characters in the modified UTF-8 format
and are converted into characters.
<p>
This method blocks until all the bytes are read, the end of the
stream is detected, or an exception is thrown.

@return     a Unicode string.
@exception  EOFException            if this file reaches the end before
              reading all the bytes.
@exception  IOException             if an I/O error occurs.
@exception  UTFDataFormatException  if the bytes do not represent
              valid modified UTF-8 encoding of a Unicode string.
@see        java.io.RandomAccessFile#readUnsignedShort()
"
      end

      operation 6929666 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a {@code boolean} to the file as a one-byte value. The
value {@code true} is written out as the value
{@code (byte)1}; the value {@code false} is written out
as the value {@code (byte)0}. The write starts at
the current position of the file pointer.

@param      v   a {@code boolean} value to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6929794 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a {@code byte} to the file as a one-byte value. The
write starts at the current position of the file pointer.

@param      v   a {@code byte} value to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6929922 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a {@code short} to the file as two bytes, high byte first.
The write starts at the current position of the file pointer.

@param      v   a {@code short} to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6930050 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a {@code char} to the file as a two-byte value, high
byte first. The write starts at the current position of the
file pointer.

@param      v   a {@code char} value to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6930178 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an {@code int} to the file as four bytes, high byte first.
The write starts at the current position of the file pointer.

@param      v   an {@code int} to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6930306 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a {@code long} to the file as eight bytes, high byte first.
The write starts at the current position of the file pointer.

@param      v   a {@code long} to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6930434 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "float"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the float argument to an {@code int} using the
{@code floatToIntBits} method in class {@code Float},
and then writes that {@code int} value to the file as a
four-byte quantity, high byte first. The write starts at the
current position of the file pointer.

@param      v   a {@code float} value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.lang.Float#floatToIntBits(float)
"
      end

      operation 6930562 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the double argument to a {@code long} using the
{@code doubleToLongBits} method in class {@code Double},
and then writes that {@code long} value to the file as an
eight-byte quantity, high byte first. The write starts at the current
position of the file pointer.

@param      v   a {@code double} value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.lang.Double#doubleToLongBits(double)
"
      end

      operation 6930690 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Writes the string to the file as a sequence of bytes. Each
character in the string is written out, in sequence, by discarding
its high eight bits. The write starts at the current position of
the file pointer.

@param      s   a string of bytes to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6930818 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the file as a sequence of characters. Each
character is written to the data output stream as if by the
{@code writeChar} method. The write starts at the current
position of the file pointer.

@param      s   a {@code String} value to be written.
@exception  IOException  if an I/O error occurs.
@see        java.io.RandomAccessFile#writeChar(int)
"
      end

      operation 6930946 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string to the file using
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
encoding in a machine-independent manner.
<p>
First, two bytes are written to the file, starting at the
current file pointer, as if by the
{@code writeShort} method giving the number of bytes to
follow. This value is the number of bytes actually written out,
not the length of the string. Following the length, each character
of the string is output, in sequence, using the modified UTF-8 encoding
for each character.

@param      str   a string to be written.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6931074 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 6931202 "close0"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 156034 "initialization"
	
	cpp "" ""
	java "  static {
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 927490 "SequenceInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>SequenceInputStream</code> represents
the logical concatenation of other input
streams. It starts out with an ordered
collection of input streams and reads from
the first one until end of file is reached,
whereupon it reads from the second one,
and so on, until end of file is reached
on the last of the contained input streams.

@author  Author van Hoff
@since   JDK1.0
"
      classrelation 3141250 // <generalisation>
	relation 3141250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3141250 // <generalisation>
	  b parent class_ref 146434 // InputStream
      end

      classrelation 3141378 // e (<unidirectional association>)
	relation 3141378 --->
	  a role_name "e" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends InputStream> ${name}${value};
"
	    classrelation_ref 3141378 // e (<unidirectional association>)
	  b parent class_ref 185986 // Enumeration
      end

      classrelation 3141506 // in (<unidirectional association>)
	relation 3141506 --->
	  a role_name "in" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3141506 // in (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      operation 6931330 "SequenceInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 185986 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends InputStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly created <code>SequenceInputStream</code>
by remembering the argument, which must
be an <code>Enumeration</code>  that produces
objects whose run-time type is <code>InputStream</code>.
The input streams that are  produced by
the enumeration will be read, in order,
to provide the bytes to be read  from this
<code>SequenceInputStream</code>. After
each input stream from the enumeration
is exhausted, it is closed by calling its
<code>close</code> method.

@param   e   an enumeration of input streams.
@see     java.util.Enumeration
"
      end

      operation 6931458 "SequenceInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "s1" type class_ref 146434 // InputStream
	  param inout name "s2" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly
created <code>SequenceInputStream</code>
by remembering the two arguments, which
will be read in order, first <code>s1</code>
and then <code>s2</code>, to provide the
bytes to be read from this <code>SequenceInputStream</code>.

@param   s1   the first input stream to read.
@param   s2   the second input stream to read.
"
      end

      operation 6931586 "nextStream"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Continues reading in the next stream if an EOF is reached.
"
      end

      operation 6931714 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of bytes that can be read (or
skipped over) from the current underlying input stream without
blocking by the next invocation of a method for the current
underlying input stream. The next invocation might be
the same thread or another thread.  A single read or skip of this
many bytes will not block, but may read or skip fewer bytes.
<p>
This method simply calls {@code available} of the current underlying
input stream and returns the result.

@return an estimate of the number of bytes that can be read (or
        skipped over) from the current underlying input stream
        without blocking or {@code 0} if this input stream
        has been closed by invoking its {@link #close()} method
@exception  IOException  if an I/O error occurs.

@since   JDK1.1
"
      end

      operation 6931842 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The byte is
returned as an <code>int</code> in the range <code>0</code> to
<code>255</code>. If no byte is available because the end of the
stream has been reached, the value <code>-1</code> is returned.
This method blocks until input data is available, the end of the
stream is detected, or an exception is thrown.
<p>
This method
tries to read one character from the current substream. If it
reaches the end of the stream, it calls the <code>close</code>
method of the current substream and begins reading from the next
substream.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6931970 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream
into an array of bytes.  If <code>len</code> is not zero, the method
blocks until at least 1 byte of input is available; otherwise, no
bytes are read and <code>0</code> is returned.
<p>
The <code>read</code> method of <code>SequenceInputStream</code>
tries to read the data from the current substream. If it fails to
read any characters because the substream has reached the end of
the stream, it calls the <code>close</code> method of the current
substream and begins reading from the next substream.

@param      b     the buffer into which the data is read.
@param      off   the start offset in array <code>b</code>
                  at which the data is written.
@param      len   the maximum number of bytes read.
@return     int   the number of bytes read.
@exception  NullPointerException If <code>b</code> is <code>null</code>.
@exception  IndexOutOfBoundsException If <code>off</code> is negative,
<code>len</code> is negative, or <code>len</code> is greater than
<code>b.length - off</code>
@exception  IOException  if an I/O error occurs.
"
      end

      operation 6932098 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this input stream and releases any system resources
associated with the stream.
A closed <code>SequenceInputStream</code>
cannot  perform input operations and cannot
be reopened.
<p>
If this stream was created
from an enumeration, all remaining elements
are requested from the enumeration and closed
before the <code>close</code> method returns.

@exception  IOException  if an I/O error occurs.
"
      end
    end

    class 927618 "StreamTokenizer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code StreamTokenizer} class takes an input stream and
parses it into \"tokens\", allowing the tokens to be
read one at a time. The parsing process is controlled by a table
and a number of flags that can be set to various states. The
stream tokenizer can recognize identifiers, numbers, quoted
strings, and various comment styles.
<p>
Each byte read from the input stream is regarded as a character
in the range {@code '\\u005Cu0000'} through {@code '\\u005Cu00FF'}.
The character value is used to look up five possible attributes of
the character: <i>white space</i>, <i>alphabetic</i>,
<i>numeric</i>, <i>string quote</i>, and <i>comment character</i>.
Each character can have zero or more of these attributes.
<p>
In addition, an instance has four flags. These flags indicate:
<ul>
<li>Whether line terminators are to be returned as tokens or treated
    as white space that merely separates tokens.
<li>Whether C-style comments are to be recognized and skipped.
<li>Whether C++-style comments are to be recognized and skipped.
<li>Whether the characters of identifiers are converted to lowercase.
</ul>
<p>
A typical application first constructs an instance of this class,
sets up the syntax tables, and then repeatedly loops calling the
{@code nextToken} method in each iteration of the loop until
it returns the value {@code TT_EOF}.

@author  James Gosling
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#TT_EOF
@since   JDK1.0
"
      classrelation 3142402 // reader (<unidirectional association>)
	relation 3142402 --->
	  a role_name "reader" init_value " null" private
	    comment " Only one of these will be non-null 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3142402 // reader (<unidirectional association>)
	  b parent class_ref 407298 // Reader
      end

      classrelation 3142530 // input (<unidirectional association>)
	relation 3142530 --->
	  a role_name "input" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3142530 // input (<unidirectional association>)
	  b parent class_ref 146434 // InputStream
      end

      attribute 1655682 "buf"
	private explicit_type "char"
	multiplicity "[]"
	init_value " new char[20]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1655810 "peekc"
	private explicit_type "int"
	init_value " NEED_CHAR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The next character to be considered by the nextToken method.  May also
be NEED_CHAR to indicate that a new character should be read, or SKIP_LF
to indicate that a new character should be read and, if it is a '\\n'
character, it should be discarded and a second new character should be
read.

"
      end

      attribute 1655938 "NEED_CHAR"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1656066 "SKIP_LF"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1656194 "pushedBack"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1656322 "forceLower"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1656450 "LINENO"
	private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The line number of the last token read 
"
      end

      attribute 1656578 "eolIsSignificantP"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1656706 "slashSlashCommentsP"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1656834 "slashStarCommentsP"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1656962 "ctype"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[256]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1657090 "CT_WHITESPACE"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1657218 "CT_DIGIT"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1657346 "CT_ALPHA"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1657474 "CT_QUOTE"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1657602 "CT_COMMENT"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1657730 "ttype"
	public explicit_type "int"
	init_value " TT_NOTHING"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "After a call to the {@code nextToken} method, this field
contains the type of the token just read. For a single character
token, its value is the single character, converted to an integer.
For a quoted string token, its value is the quote character.
Otherwise, its value is one of the following:
<ul>
<li>{@code TT_WORD} indicates that the token is a word.
<li>{@code TT_NUMBER} indicates that the token is a number.
<li>{@code TT_EOL} indicates that the end of line has been read.
    The field can only have this value if the
    {@code eolIsSignificant} method has been called with the
    argument {@code true}.
<li>{@code TT_EOF} indicates that the end of the input stream
    has been reached.
</ul>
<p>
The initial value of this field is -4.

@see     java.io.StreamTokenizer#eolIsSignificant(boolean)
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#quoteChar(int)
@see     java.io.StreamTokenizer#TT_EOF
@see     java.io.StreamTokenizer#TT_EOL
@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#TT_WORD

"
      end

      attribute 1657858 "TT_EOF"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that the end of the stream has been read.

"
      end

      attribute 1657986 "TT_EOL"
	class_attribute const_attribute public explicit_type "int"
	init_value " '\\n'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that the end of the line has been read.

"
      end

      attribute 1658114 "TT_NUMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that a number token has been read.

"
      end

      attribute 1658242 "TT_WORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " -3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant indicating that a word token has been read.

"
      end

      attribute 1658370 "TT_NOTHING"
	class_attribute const_attribute private explicit_type "int"
	init_value " -4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A constant indicating that no token has been read, used for
initializing ttype.  FIXME This could be made public and
made available as the part of the API in a future release.

"
      end

      classrelation 3142658 // sval (<unidirectional association>)
	relation 3142658 --->
	  a role_name "sval" public
	    comment "
If the current token is a word token, this field contains a
string giving the characters of the word token. When the current
token is a quoted string token, this field contains the body of
the string.
<p>
The current token is a word when the value of the
{@code ttype} field is {@code TT_WORD}. The current token is
a quoted string token when the value of the {@code ttype} field is
a quote character.
<p>
The initial value of this field is null.

@see     java.io.StreamTokenizer#quoteChar(int)
@see     java.io.StreamTokenizer#TT_WORD
@see     java.io.StreamTokenizer#ttype

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3142658 // sval (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1658498 "nval"
	public explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If the current token is a number, this field contains the value
of that number. The current token is a number when the value of
the {@code ttype} field is {@code TT_NUMBER}.
<p>
The initial value of this field is 0.0.

@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#ttype

"
      end

      operation 6933506 "StreamTokenizer"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private constructor that initializes everything except the streams. "
      end

      operation 6933634 "StreamTokenizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a stream tokenizer that parses the specified input
stream. The stream tokenizer is initialized to the following
default state:
<ul>
<li>All byte values {@code 'A'} through {@code 'Z'},
    {@code 'a'} through {@code 'z'}, and
    {@code '\\u005Cu00A0'} through {@code '\\u005Cu00FF'} are
    considered to be alphabetic.
<li>All byte values {@code '\\u005Cu0000'} through
    {@code '\\u005Cu0020'} are considered to be white space.
<li>{@code '/'} is a comment character.
<li>Single quote {@code '\\u005C''} and double quote {@code '\"'}
    are string quote characters.
<li>Numbers are parsed.
<li>Ends of lines are treated as white space, not as separate tokens.
<li>C-style and C++-style comments are not recognized.
</ul>

@deprecated As of JDK version 1.1, the preferred way to tokenize an
input stream is to convert it into a character stream, for example:
<blockquote><pre>
  Reader r = new BufferedReader(new InputStreamReader(is));
  StreamTokenizer st = new StreamTokenizer(r);
</pre></blockquote>

@param      is        an input stream.
@see        java.io.BufferedReader
@see        java.io.InputStreamReader
@see        java.io.StreamTokenizer#StreamTokenizer(java.io.Reader)
"
      end

      operation 6933762 "StreamTokenizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "r" type class_ref 407298 // Reader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a tokenizer that parses the given character stream.

@param r  a Reader object providing the input stream.
@since   JDK1.1
"
      end

      operation 6933890 "resetSyntax"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this tokenizer's syntax table so that all characters are
\"ordinary.\" See the {@code ordinaryChar} method
for more information on a character being ordinary.

@see     java.io.StreamTokenizer#ordinaryChar(int)
"
      end

      operation 6934018 "wordChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that all characters <i>c</i> in the range
<code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>
are word constituents. A word token consists of a word constituent
followed by zero or more word constituents or number constituents.

@param   low   the low end of the range.
@param   hi    the high end of the range.
"
      end

      operation 6934146 "whitespaceChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that all characters <i>c</i> in the range
<code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>
are white space characters. White space characters serve only to
separate tokens in the input stream.

<p>Any other attribute settings for the characters in the specified
range are cleared.

@param   low   the low end of the range.
@param   hi    the high end of the range.
"
      end

      operation 6934274 "ordinaryChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that all characters <i>c</i> in the range
<code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>
are \"ordinary\" in this tokenizer. See the
{@code ordinaryChar} method for more information on a
character being ordinary.

@param   low   the low end of the range.
@param   hi    the high end of the range.
@see     java.io.StreamTokenizer#ordinaryChar(int)
"
      end

      operation 6934402 "ordinaryChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the character argument is \"ordinary\"
in this tokenizer. It removes any special significance the
character has as a comment character, word component, string
delimiter, white space, or number character. When such a character
is encountered by the parser, the parser treats it as a
single-character token and sets {@code ttype} field to the
character value.

<p>Making a line terminator character \"ordinary\" may interfere
with the ability of a {@code StreamTokenizer} to count
lines. The {@code lineno} method may no longer reflect
the presence of such terminator characters in its line count.

@param   ch   the character.
@see     java.io.StreamTokenizer#ttype
"
      end

      operation 6934530 "commentChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specified that the character argument starts a single-line
comment. All characters from the comment character to the end of
the line are ignored by this stream tokenizer.

<p>Any other attribute settings for the specified character are cleared.

@param   ch   the character.
"
      end

      operation 6934658 "quoteChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that matching pairs of this character delimit string
constants in this tokenizer.
<p>
When the {@code nextToken} method encounters a string
constant, the {@code ttype} field is set to the string
delimiter and the {@code sval} field is set to the body of
the string.
<p>
If a string quote character is encountered, then a string is
recognized, consisting of all characters after (but not including)
the string quote character, up to (but not including) the next
occurrence of that same string quote character, or a line
terminator, or end of file. The usual escape sequences such as
{@code \"\\u005Cn\"} and {@code \"\\u005Ct\"} are recognized and
converted to single characters as the string is parsed.

<p>Any other attribute settings for the specified character are cleared.

@param   ch   the character.
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype
"
      end

      operation 6934786 "parseNumbers"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that numbers should be parsed by this tokenizer. The
syntax table of this tokenizer is modified so that each of the twelve
characters:
<blockquote><pre>
     0 1 2 3 4 5 6 7 8 9 . -
</pre></blockquote>
<p>
has the \"numeric\" attribute.
<p>
When the parser encounters a word token that has the format of a
double precision floating-point number, it treats the token as a
number rather than a word, by setting the {@code ttype}
field to the value {@code TT_NUMBER} and putting the numeric
value of the token into the {@code nval} field.

@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#TT_NUMBER
@see     java.io.StreamTokenizer#ttype
"
      end

      operation 6934914 "eolIsSignificant"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not ends of line are treated as tokens.
If the flag argument is true, this tokenizer treats end of lines
as tokens; the {@code nextToken} method returns
{@code TT_EOL} and also sets the {@code ttype} field to
this value when an end of line is read.
<p>
A line is a sequence of characters ending with either a
carriage-return character ({@code '\\u005Cr'}) or a newline
character ({@code '\\u005Cn'}). In addition, a carriage-return
character followed immediately by a newline character is treated
as a single end-of-line token.
<p>
If the {@code flag} is false, end-of-line characters are
treated as white space and serve only to separate tokens.

@param   flag   {@code true} indicates that end-of-line characters
                are separate tokens; {@code false} indicates that
                end-of-line characters are white space.
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#ttype
@see     java.io.StreamTokenizer#TT_EOL
"
      end

      operation 6935042 "slashStarComments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the tokenizer recognizes C-style comments.
If the flag argument is {@code true}, this stream tokenizer
recognizes C-style comments. All text between successive
occurrences of {@code /*} and <code>*&#47;</code> are discarded.
<p>
If the flag argument is {@code false}, then C-style comments
are not treated specially.

@param   flag   {@code true} indicates to recognize and ignore
                C-style comments.
"
      end

      operation 6935170 "slashSlashComments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the tokenizer recognizes C++-style comments.
If the flag argument is {@code true}, this stream tokenizer
recognizes C++-style comments. Any occurrence of two consecutive
slash characters ({@code '/'}) is treated as the beginning of
a comment that extends to the end of the line.
<p>
If the flag argument is {@code false}, then C++-style
comments are not treated specially.

@param   flag   {@code true} indicates to recognize and ignore
                C++-style comments.
"
      end

      operation 6935298 "lowerCaseMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fl" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not word token are automatically lowercased.
If the flag argument is {@code true}, then the value in the
{@code sval} field is lowercased whenever a word token is
returned (the {@code ttype} field has the
value {@code TT_WORD} by the {@code nextToken} method
of this tokenizer.
<p>
If the flag argument is {@code false}, then the
{@code sval} field is not modified.

@param   fl   {@code true} indicates that all word tokens should
              be lowercased.
@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#ttype
@see     java.io.StreamTokenizer#TT_WORD
"
      end

      operation 6935426 "read"
	private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Read the next character "
      end

      operation 6935554 "nextToken"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the next token from the input stream of this tokenizer.
The type of the next token is returned in the {@code ttype}
field. Additional information about the token may be in the
{@code nval} field or the {@code sval} field of this
tokenizer.
<p>
Typical clients of this
class first set up the syntax tables and then sit in a loop
calling nextToken to parse successive tokens until TT_EOF
is returned.

@return     the value of the {@code ttype} field.
@exception  IOException  if an I/O error occurs.
@see        java.io.StreamTokenizer#nval
@see        java.io.StreamTokenizer#sval
@see        java.io.StreamTokenizer#ttype
"
      end

      operation 6935682 "pushBack"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the next call to the {@code nextToken} method of this
tokenizer to return the current value in the {@code ttype}
field, and not to modify the value in the {@code nval} or
{@code sval} field.

@see     java.io.StreamTokenizer#nextToken()
@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype
"
      end

      operation 6935810 "lineno"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current line number.

@return  the current line number of this stream tokenizer.
"
      end

      operation 6935938 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the current stream token and
the line number it occurs on.

<p>The precise string returned is unspecified, although the following
example can be considered typical:

<blockquote><pre>Token['a'], line 10</pre></blockquote>

@return  a string representation of the token
@see     java.io.StreamTokenizer#nval
@see     java.io.StreamTokenizer#sval
@see     java.io.StreamTokenizer#ttype
"
      end
    end

    class 927746 "StringBufferInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class allows an application to create an input stream in
which the bytes read are supplied by the contents of a string.
Applications can also read bytes from a byte array by using a
<code>ByteArrayInputStream</code>.
<p>
Only the low eight bits of each character in the string are used by
this class.

@author     Arthur van Hoff
@see        java.io.ByteArrayInputStream
@see        java.io.StringReader
@since      JDK1.0
@deprecated This class does not properly convert characters into bytes.  As
            of JDK&nbsp;1.1, the preferred way to create a stream from a
            string is via the <code>StringReader</code> class.
"
      classrelation 3142786 // <generalisation>
	relation 3142786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3142786 // <generalisation>
	  b parent class_ref 146434 // InputStream
      end

      classrelation 3142914 // buffer (<unidirectional association>)
	relation 3142914 --->
	  a role_name "buffer" protected
	    comment "
The string from which bytes are read.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3142914 // buffer (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1658626 "pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The index of the next character to read from the input stream buffer.

@see        java.io.StringBufferInputStream#buffer

"
      end

      attribute 1658754 "count"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of valid characters in the input stream buffer.

@see        java.io.StringBufferInputStream#buffer

"
      end

      operation 6936066 "StringBufferInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a string input stream to read data from the specified string.

@param      s   the underlying input buffer.
"
      end

      operation 6936194 "read"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from this input stream. The value
byte is returned as an <code>int</code> in the range
<code>0</code> to <code>255</code>. If no byte is available
because the end of the stream has been reached, the value
<code>-1</code> is returned.
<p>
The <code>read</code> method of
<code>StringBufferInputStream</code> cannot block. It returns the
low eight bits of the next character in this input stream's buffer.

@return     the next byte of data, or <code>-1</code> if the end of the
            stream is reached.
"
      end

      operation 6936322 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to <code>len</code> bytes of data from this input stream
into an array of bytes.
<p>
The <code>read</code> method of
<code>StringBufferInputStream</code> cannot block. It copies the
low eight bits from the characters in this input stream's buffer into
the byte array argument.

@param      b     the buffer into which the data is read.
@param      off   the start offset of the data.
@param      len   the maximum number of bytes read.
@return     the total number of bytes read into the buffer, or
            <code>-1</code> if there is no more data because the end of
            the stream has been reached.
"
      end

      operation 6936450 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips <code>n</code> bytes of input from this input stream. Fewer
bytes might be skipped if the end of the input stream is reached.

@param      n   the number of bytes to be skipped.
@return     the actual number of bytes skipped.
"
      end

      operation 6936578 "available"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes that can be read from the input
stream without blocking.

@return     the value of <code>count&nbsp;-&nbsp;pos</code>, which is the
            number of bytes remaining to be read from the input buffer.
"
      end

      operation 6936706 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the input stream to begin reading from the first character
of this input stream's underlying buffer.
"
      end
    end

    class 927874 "StringReader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A character stream whose source is a string.

@author      Mark Reinhold
@since       JDK1.1
"
      classrelation 3143042 // <generalisation>
	relation 3143042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3143042 // <generalisation>
	  b parent class_ref 407298 // Reader
      end

      classrelation 3143170 // str (<unidirectional association>)
	relation 3143170 --->
	  a role_name "str" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3143170 // str (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1658882 "length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1659010 "next"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1659138 "mark"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6936834 "StringReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new string reader.

@param s  String providing the character stream.
"
      end

      operation 6936962 "ensureOpen"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure that the stream has not been closed "
      end

      operation 6937090 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character.

@return     The character read, or -1 if the end of the stream has been
            reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 6937218 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "cbuf" explicit_type "char"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters into a portion of an array.

@param      cbuf  Destination buffer
@param      off   Offset at which to start writing characters
@param      len   Maximum number of characters to read

@return     The number of characters read, or -1 if the end of the
            stream has been reached

@exception  IOException  If an I/O error occurs
"
      end

      operation 6937346 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "ns" explicit_type "long"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips the specified number of characters in the stream. Returns
the number of characters that were skipped.

<p>The <code>ns</code> parameter may be negative, even though the
<code>skip</code> method of the {@link Reader} superclass throws
an exception in this case. Negative values of <code>ns</code> cause the
stream to skip backwards. Negative return values indicate a skip
backwards. It is not possible to skip backwards past the beginning of
the string.

<p>If the entire string has been read or skipped, then this method has
no effect and always returns 0.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6937474 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream is ready to be read.

@return True if the next read() is guaranteed not to block for input

@exception  IOException  If the stream is closed
"
      end

      operation 6937602 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this stream supports the mark() operation, which it does.
"
      end

      operation 6937730 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the present position in the stream.  Subsequent calls to reset()
will reposition the stream to this point.

@param  readAheadLimit  Limit on the number of characters that may be
                        read while still preserving the mark.  Because
                        the stream's input comes from a string, there
                        is no actual limit, so this argument must not
                        be negative, but is otherwise ignored.

@exception  IllegalArgumentException  If {@code readAheadLimit < 0}
@exception  IOException  If an I/O error occurs
"
      end

      operation 6937858 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the stream to the most recent mark, or to the beginning of the
string if it has never been marked.

@exception  IOException  If an I/O error occurs
"
      end

      operation 6937986 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the stream and releases any system resources associated with
it. Once the stream has been closed, further read(),
ready(), mark(), or reset() invocations will throw an IOException.
Closing a previously closed stream has no effect.
"
      end
    end

    class 928002 "UncheckedIOException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Wraps an {@link IOException} with an unchecked exception.

@since   1.8
"
      classrelation 3143682 // <generalisation>
	relation 3143682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3143682 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1659394 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8134305061645241065L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6939906 "UncheckedIOException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   message
         the detail message, can be null
@param   cause
         the {@code IOException}

@throws  NullPointerException
         if the cause is {@code null}
"
      end

      operation 6940034 "UncheckedIOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   cause
         the {@code IOException}

@throws  NullPointerException
         if the cause is {@code null}
"
      end

      operation 6940162 "getCause"
	public return_type class_ref 146818 // IOException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the cause of this exception.

@return  the {@code IOException} which is the cause of this exception.
"
      end

      operation 6940290 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called to read the object from a stream.

@throws  InvalidObjectException
         if the object is invalid or has a cause that is not
         an {@code IOException}
"
      end
    end

    class 928130 "UnixFileSystem"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3143810 // <generalisation>
	relation 3143810 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3143810 // <generalisation>
	  b parent class_ref 922754 // FileSystem
      end

      attribute 1659522 "slash"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1659650 "colon"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3143938 // javaHome (<unidirectional association>)
	relation 3143938 --->
	  a role_name "javaHome" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3143938 // javaHome (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 6940418 "UnixFileSystem"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940546 "getSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Normalization and construction -- "
      end

      operation 6940674 "getPathSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940802 "normalize"
	private return_type class_ref 128130 // String
	nparams 3
	  param inout name "pathname" type class_ref 128130 // String
	  param in name "len" explicit_type "int"
	  param in name "off" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A normal Unix pathname contains no duplicate slashes and does not end
with a slash.  It may be the empty string. 
 Normalize the given pathname, whose length is len, starting at the given
offset; everything before this offset is already normal. "
      end

      operation 6940930 "normalize"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "pathname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that the given pathname is normal.  If not, invoke the real
normalizer on the part of the pathname that requires normalization.
This way we iterate through the whole pathname string only once. "
      end

      operation 6941058 "prefixLength"
	public explicit_return_type "int"
	nparams 1
	  param inout name "pathname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941186 "resolve"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "parent" type class_ref 128130 // String
	  param inout name "child" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941314 "getDefaultParent"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941442 "fromURIPath"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941570 "isAbsolute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Path operations -- "
      end

      operation 6941698 "resolve"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3144066 // cache (<unidirectional association>)
	relation 3144066 --->
	  a role_name "cache" init_value " new ExpiringCache()" private
	    comment " Caches for canonicalization results to improve startup performance.
 The first cache handles repeated canonicalizations of the same path
 name. The prefix cache handles repeated canonicalizations within the
 same directory, and must not create results differing from the true
 canonicalization algorithm in canonicalize_md.c. For this reason the
 prefix cache is conservative and is not used for complex path names.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3144066 // cache (<unidirectional association>)
	  b parent class_ref 923010 // ExpiringCache
      end

      classrelation 3144194 // javaHomePrefixCache (<unidirectional association>)
	relation 3144194 --->
	  a role_name "javaHomePrefixCache" init_value " new ExpiringCache()" private
	    comment " On Unix symlinks can jump anywhere in the file system, so we only
 treat prefixes in java.home as trusted and cacheable in the
 canonicalization algorithm
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3144194 // javaHomePrefixCache (<unidirectional association>)
	  b parent class_ref 923010 // ExpiringCache
      end

      operation 6941826 "canonicalize"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941954 "canonicalize0"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6942082 "parentOrNull"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Best-effort attempt to get parent of this path; used for
 optimization of filename canonicalization. This must return null for
 any cases where the code in canonicalize_md.c would throw an
 exception or otherwise deal with non-simple pathnames like handling
 of \".\" and \"..\". It may conservatively return null in other
 situations as well. Returning null will cause the underlying
 (expensive) canonicalization routine to be called."
      end

      operation 6942210 "getBooleanAttributes0"
	public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment " -- Attribute accessors -- "
      end

      operation 6942338 "getBooleanAttributes"
	public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6942466 "checkAccess"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 131970 // File
	  param in name "access" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 6942594 "getLastModifiedTime"
	public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6942722 "getLength"
	public explicit_return_type "long"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6942850 "setPermission"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "f" type class_ref 131970 // File
	  param in name "access" explicit_type "int"
	  param inout name "enable" explicit_type "boolean"
	  param inout name "owneronly" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
      end

      operation 6942978 "createFileExclusively"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment " -- File operations -- "
      end

      operation 6943106 "delete"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943234 "delete0"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6943362 "list"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6943490 "createDirectory"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6943618 "rename"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f1" type class_ref 131970 // File
	  param inout name "f2" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943746 "rename0"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "f1" type class_ref 131970 // File
	  param inout name "f2" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 6943874 "setLastModifiedTime"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "f" type class_ref 131970 // File
	  param in name "time" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 6944002 "setReadOnly"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 6944130 "listRoots"
	public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Filesystem interface -- "
      end

      operation 6944258 "getSpace"
	public explicit_return_type "long"
	nparams 2
	  param inout name "f" type class_ref 131970 // File
	  param in name "t" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment " -- Disk usage -- "
      end

      operation 6944386 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "f1" type class_ref 131970 // File
	  param inout name "f2" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Basic infrastructure -- "
      end

      operation 6944514 "hashCode"
	public explicit_return_type "int"
	nparams 1
	  param inout name "f" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944642 "initIDs"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 156162 "initialization"
	
	cpp "" ""
	java "  static {
        initIDs();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 928258 "UTFDataFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that a malformed string in
<a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>
format has been read in a data
input stream or by any class that implements the data input
interface.
See the
<a href=\"DataInput.html#modified-utf-8\"><code>DataInput</code></a>
class description for the format in
which modified UTF-8 strings are read and written.

@author  Frank Yellin
@see     java.io.DataInput
@see     java.io.DataInputStream#readUTF(java.io.DataInput)
@see     java.io.IOException
@since   JDK1.0
"
      classrelation 3144450 // <generalisation>
	relation 3144450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3144450 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1659906 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 420743449228280612L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6945026 "UTFDataFormatException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UTFDataFormatException</code> with
<code>null</code> as its error detail message.
"
      end

      operation 6945154 "UTFDataFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UTFDataFormatException</code> with the
specified detail message. The string <code>s</code> can be
retrieved later by the
<code>{@link java.lang.Throwable#getMessage}</code>
method of class <code>java.lang.Throwable</code>.

@param   s   the detail message.
"
      end
    end

    class 928386 "WriteAbortedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that one of the ObjectStreamExceptions was thrown during a
write operation.  Thrown during a read operation when one of the
ObjectStreamExceptions was thrown during a write operation.  The
exception that terminated the write can be found in the detail
field. The stream is reset to it's initial state and all references
to objects already deserialized are discarded.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"exception causing
the abort\" that is provided at construction time and
accessed via the public {@link #detail} field is now known as the
<i>cause</i>, and may be accessed via the {@link Throwable#getCause()}
method, as well as the aforementioned \"legacy field.\"

@author  unascribed
@since   JDK1.1
"
      classrelation 3144578 // <generalisation>
	relation 3144578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3144578 // <generalisation>
	  b parent class_ref 261506 // ObjectStreamException
      end

      attribute 1660034 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3326426625597282442L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3144706 // detail (<unidirectional association>)
	relation 3144706 --->
	  a role_name "detail" public
	    comment "
Exception that was caught while writing the ObjectStream.

<p>This field predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3144706 // detail (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      operation 6945282 "WriteAbortedException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "ex" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a WriteAbortedException with a string describing
the exception and the exception causing the abort.
@param s   String describing the exception.
@param ex  Exception causing the abort.
"
      end

      operation 6945410 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce the message and include the message from the nested
exception, if there is one.
"
      end

      operation 6945538 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception that terminated the operation (the <i>cause</i>).

@return  the exception that terminated the operation (the <i>cause</i>),
         which may be null.
@since   1.4
"
      end
    end
  end

  deploymentview 128770 "io"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 129410 "Serializable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 136578 // Serializable
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 133250 "Closeable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 146562 // Closeable
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 133378 "InputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 146434 // InputStream
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 134530 "Flushable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 151426 // Flushable
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 134658 "OutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 151298 // OutputStream
      end
      comment "Copyright (c) 1994, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 148098 "ByteArrayInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 169218 // ByteArrayInputStream
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 148226 "DataInput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 169602 // DataInput
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 148354 "ObjectInput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 169474 // ObjectInput
      end
      comment "Copyright (c) 1996, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 148482 "ObjectStreamConstants"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 169858 // ObjectStreamConstants
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 148610 "ObjectInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamClass.WeakClassKey;
import java.lang.ref.ReferenceQueue;
import java.lang.reflect.Array;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.misc.ObjectInputFilter;
import sun.misc.ObjectStreamClassValidator;
import sun.misc.SharedSecrets;
import sun.reflect.misc.ReflectUtil;
import sun.misc.JavaOISAccess;
import sun.util.logging.PlatformLogger;
${definition}"
      associated_elems
	class_ref 168962 // ObjectInputStream
      end
      comment "Copyright (c) 1996, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 148866 "ByteArrayOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 173698 // ByteArrayOutputStream
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 148994 "DataOutput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 174210 // DataOutput
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 149122 "ObjectOutput"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 174082 // ObjectOutput
      end
      comment "Copyright (c) 1996, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 149250 "ObjectOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamClass.WeakClassKey;
import java.lang.ref.ReferenceQueue;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.io.SerialCallbackContext;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 173442 // ObjectOutputStream
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 157826 "IOException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 146818 // IOException
      end
      comment "Copyright (c) 1994, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 330754 "Externalizable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectOutput;
import java.io.ObjectInput;
${definition}"
      associated_elems
	class_ref 172162 // Externalizable
      end
      comment "Copyright (c) 1996, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 367234 "Reader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 407298 // Reader
      end
      comment "Copyright (c) 1996, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 367362 "FilterReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 548226 // FilterReader
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 367618 "Writer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 428034 // Writer
      end
      comment "Copyright (c) 1996, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 367746 "FilterWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 548738 // FilterWriter
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 396034 "FilterInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 577922 // FilterInputStream
      end
      comment "Copyright (c) 1994, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 396162 "DataInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 172930 // DataInputStream
      end
      comment "Copyright (c) 1994, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 479490 "CharConversionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 691586 // CharConversionException
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 665602 "Bits"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 921218 // Bits
      end
      comment "Copyright (c) 2001, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 665730 "BufferedInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
${definition}"
      associated_elems
	class_ref 921346 // BufferedInputStream
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 665858 "FilterOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 921730 // FilterOutputStream
      end
      comment "Copyright (c) 1994, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 665986 "BufferedOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 921602 // BufferedOutputStream
      end
      comment "Copyright (c) 1994, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 666114 "BufferedReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
${definition}"
      associated_elems
	class_ref 141314 // BufferedReader
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 666242 "BufferedWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 921858 // BufferedWriter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 666370 "CharArrayReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 921986 // CharArrayReader
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 666498 "CharArrayWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 922114 // CharArrayWriter
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 666626 "Console"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.nio.charset.Charset;
import sun.nio.cs.StreamDecoder;
import sun.nio.cs.StreamEncoder;
${definition}"
      associated_elems
	class_ref 922242 // Console
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 666754 "DataOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 175234 // DataOutputStream
      end
      comment "Copyright (c) 1994, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 666882 "DefaultFileSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 922626 // DefaultFileSystem
      end
      comment "Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 667010 "DeleteOnExitHook"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.File;
${definition}"
      associated_elems
	class_ref 922882 // DeleteOnExitHook
      end
      comment "Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 667138 "EOFException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 669442 // EOFException
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 667266 "ExpiringCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 923010 // ExpiringCache
      end
      comment "Copyright (c) 2002, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















"
    end

    artifact 667394 "File"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URI;
import java.net.URL;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.List;
import java.util.ArrayList;
import java.security.AccessController;
import java.security.SecureRandom;
import java.nio.file.Path;
import java.nio.file.FileSystems;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 131970 // File
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 667522 "FileDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_elems
	class_ref 923778 // FileDescriptor
      end
      comment "Copyright (c) 1995, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 667650 "FileFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 923394 // FileFilter
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 667778 "FileInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.FileChannel;
import sun.nio.ch.FileChannelImpl;
${definition}"
      associated_elems
	class_ref 580226 // FileInputStream
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 667906 "FilenameFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 580482 // FilenameFilter
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668034 "FileNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 580354 // FileNotFoundException
      end
      comment "Copyright (c) 1994, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668162 "FileOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.FileChannel;
import sun.nio.ch.FileChannelImpl;
${definition}"
      associated_elems
	class_ref 924162 // FileOutputStream
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668290 "FilePermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.List;
import java.util.ArrayList;
import java.util.Vector;
import java.util.Collections;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 924290 // FilePermission
	class_ref 924418 // FilePermissionCollection
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668418 "InputStreamReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import sun.nio.cs.StreamDecoder;
${definition}"
      associated_elems
	class_ref 924674 // InputStreamReader
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668546 "FileReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 924546 // FileReader
      end
      comment "Copyright (c) 1996, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668674 "FileSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 922754 // FileSystem
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668802 "OutputStreamWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import sun.nio.cs.StreamEncoder;
${definition}"
      associated_elems
	class_ref 917890 // OutputStreamWriter
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 668930 "FileWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 924802 // FileWriter
      end
      comment "Copyright (c) 1996, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669058 "InterruptedIOException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 924930 // InterruptedIOException
      end
      comment "Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669186 "ObjectStreamException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 261506 // ObjectStreamException
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669314 "InvalidClassException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 171906 // InvalidClassException
      end
      comment "Copyright (c) 1996, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669442 "InvalidObjectException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 171650 // InvalidObjectException
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669570 "IOError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 925058 // IOError
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669698 "LineNumberInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 925186 // LineNumberInputStream
      end
      comment "Copyright (c) 1995, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669826 "LineNumberReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 925314 // LineNumberReader
      end
      comment "Copyright (c) 1996, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 669954 "NotActiveException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 171522 // NotActiveException
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670082 "NotSerializableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 925442 // NotSerializableException
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670210 "ObjectInputValidation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 171394 // ObjectInputValidation
      end
      comment "Copyright (c) 1996, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670338 "ObjectStreamClass"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.security.AccessController;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.misc.Unsafe;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
import sun.reflect.ReflectionFactory;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 170242 // ObjectStreamClass
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670466 "ObjectStreamField"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Field;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 193154 // ObjectStreamField
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670594 "OptionalDataException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 926466 // OptionalDataException
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670722 "PipedInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 926594 // PipedInputStream
      end
      comment "Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670850 "PipedOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 926722 // PipedOutputStream
      end
      comment "Copyright (c) 1995, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 670978 "PipedReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 926850 // PipedReader
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 671106 "PipedWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 926978 // PipedWriter
      end
      comment "Copyright (c) 1996, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 671234 "PrintStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Formatter;
import java.util.Locale;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
${definition}"
      associated_elems
	class_ref 128258 // PrintStream
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 671362 "PrintWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import java.util.Formatter;
import java.util.Locale;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
${definition}"
      associated_elems
	class_ref 195330 // PrintWriter
      end
      comment "Copyright (c) 1996, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 671490 "PushbackInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 927106 // PushbackInputStream
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 671618 "PushbackReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 927234 // PushbackReader
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 671746 "RandomAccessFile"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.channels.FileChannel;
import sun.nio.ch.FileChannelImpl;
${definition}"
      associated_elems
	class_ref 927362 // RandomAccessFile
      end
      comment "Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 671874 "SequenceInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 927490 // SequenceInputStream
      end
      comment "Copyright (c) 1994, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672002 "SerialCallbackContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 171010 // SerialCallbackContext
      end
      comment "Copyright (c) 2006, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672130 "SerializablePermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
${definition}"
      associated_elems
	class_ref 169986 // SerializablePermission
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672258 "StreamCorruptedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 171778 // StreamCorruptedException
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672386 "StreamTokenizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 927618 // StreamTokenizer
      end
      comment "Copyright (c) 1995, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672514 "StringBufferInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 927746 // StringBufferInputStream
      end
      comment "Copyright (c) 1995, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672642 "StringReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 927874 // StringReader
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672770 "StringWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 250370 // StringWriter
      end
      comment "Copyright (c) 1996, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 672898 "SyncFailedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 923906 // SyncFailedException
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 673026 "UncheckedIOException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 928002 // UncheckedIOException
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 673154 "UnixFileSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 928130 // UnixFileSystem
      end
      comment "Copyright (c) 1998, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 673282 "UnsupportedEncodingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 173826 // UnsupportedEncodingException
      end
      comment "Copyright (c) 1996, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 673410 "UTFDataFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 928258 // UTFDataFormatException
      end
      comment "Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 673538 "WriteAbortedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 928386 // WriteAbortedException
      end
      comment "Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
