class OptionalLong
!!!8868738.java!!!	OptionalLong()
        this.isPresent = false;
        this.value = 0;
!!!8868866.java!!!	empty() : OptionalLong
        return EMPTY;
!!!8868994.java!!!	OptionalLong(in value : long)
        this.isPresent = true;
        this.value = value;
!!!8869122.java!!!	of(in value : long) : OptionalLong
        return new OptionalLong(value);
!!!8869250.java!!!	getAsLong() : long
        if (!isPresent) {
            throw new NoSuchElementException("No value present");
        }
        return value;
!!!8869378.java!!!	isPresent() : boolean
        return isPresent;
!!!8869506.java!!!	ifPresent(inout consumer : LongConsumer) : void
        if (isPresent)
            consumer.accept(value);
!!!8869634.java!!!	orElse(in other : long) : long
        return isPresent ? value : other;
!!!8869762.java!!!	orElseGet(inout other : LongSupplier) : long
        return isPresent ? value : other.getAsLong();
!!!8869890.java!!!	orElseThrow(inout exceptionSupplier : Supplier) : long
        if (isPresent) {
            return value;
        } else {
            throw exceptionSupplier.get();
        }
!!!8870018.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof OptionalLong)) {
            return false;
        }

        OptionalLong other = (OptionalLong) obj;
        return (isPresent && other.isPresent)
                ? value == other.value
                : isPresent == other.isPresent;
!!!8870146.java!!!	hashCode() : int
        return isPresent ? Long.hashCode(value) : 0;
!!!8870274.java!!!	toString() : String
        return isPresent
                ? String.format("OptionalLong[%s]", value)
                : "OptionalLong.empty";
