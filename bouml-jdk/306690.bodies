class ORBVersionFactory
!!!1629826.java!!!	getFOREIGN() : ORBVersion
        return ORBVersionImpl.FOREIGN ;
!!!1629954.java!!!	getOLD() : ORBVersion
        return ORBVersionImpl.OLD ;
!!!1630082.java!!!	getNEW() : ORBVersion
        return ORBVersionImpl.NEW ;
!!!1630210.java!!!	getJDK1_3_1_01() : ORBVersion
        return ORBVersionImpl.JDK1_3_1_01 ;
!!!1630338.java!!!	getNEWER() : ORBVersion
        return ORBVersionImpl.NEWER ;
!!!1630466.java!!!	getPEORB() : ORBVersion
        return ORBVersionImpl.PEORB ;
!!!1630594.java!!!	getORBVersion() : ORBVersion
        return ORBVersionImpl.PEORB ;
!!!1630722.java!!!	create(inout is : InputStream) : ORBVersion
        byte value = is.read_octet() ;
        return byteToVersion( value ) ;
!!!1630850.java!!!	byteToVersion(in value : byte) : ORBVersion
        /* Throwing an exception here would cause this version to be
        * incompatible with future versions of the ORB, to the point
        * that this version could
        * not even unmarshal objrefs from a newer version that uses
        * extended versioning.  Therefore, we will simply treat all
        * unknown versions as the latest version.
        if (value < 0)
            throw new INTERNAL() ;
        */

        /**
         * Update: If we treat all unknown versions as the latest version
         * then when we send an IOR with a PEORB version to an ORB that
         * doesn't know the PEORB version it will treat it as whatever
         * its idea of the latest version is.  Then, if that IOR is
         * sent back to the server and compared with the original
         * the equality check will fail because the versions will be
         * different.
         *
         * Instead, just capture the version bytes.
         */

        switch (value) {
            case ORBVersion.FOREIGN : return ORBVersionImpl.FOREIGN ;
            case ORBVersion.OLD : return ORBVersionImpl.OLD ;
            case ORBVersion.NEW : return ORBVersionImpl.NEW ;
            case ORBVersion.JDK1_3_1_01: return ORBVersionImpl.JDK1_3_1_01 ;
            case ORBVersion.NEWER : return ORBVersionImpl.NEWER ;
            case ORBVersion.PEORB : return ORBVersionImpl.PEORB ;
            default : return new ORBVersionImpl(value);
        }
