class DoubleStream
!!!9500162.java!!!	builder() : DoubleStream::Builder
        return new Streams.DoubleStreamBuilderImpl();
!!!9500290.java!!!	empty() : DoubleStream
        return StreamSupport.doubleStream(Spliterators.emptyDoubleSpliterator(), false);
!!!9500418.java!!!	of(in t : double) : DoubleStream
        return StreamSupport.doubleStream(new Streams.DoubleStreamBuilderImpl(t), false);
!!!9500546.java!!!	of(inout  : double...values) : DoubleStream
        return Arrays.stream(values);
!!!9500674.java!!!	iterate(in seed : double, in f : DoubleUnaryOperator) : DoubleStream
        Objects.requireNonNull(f);
        final PrimitiveIterator.OfDouble iterator = new PrimitiveIterator.OfDouble() {
            double t = seed;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public double nextDouble() {
                double v = t;
                t = f.applyAsDouble(t);
                return v;
            }
        };
        return StreamSupport.doubleStream(Spliterators.spliteratorUnknownSize(
                iterator,
                Spliterator.ORDERED | Spliterator.IMMUTABLE | Spliterator.NONNULL), false);
!!!9500802.java!!!	generate(inout s : DoubleSupplier) : DoubleStream
        Objects.requireNonNull(s);
        return StreamSupport.doubleStream(
                new StreamSpliterators.InfiniteSupplyingSpliterator.OfDouble(Long.MAX_VALUE, s), false);
!!!9500930.java!!!	concat(inout a : DoubleStream, inout b : DoubleStream) : DoubleStream
        Objects.requireNonNull(a);
        Objects.requireNonNull(b);

        Spliterator.OfDouble split = new Streams.ConcatSpliterator.OfDouble(
                a.spliterator(), b.spliterator());
        DoubleStream stream = StreamSupport.doubleStream(split, a.isParallel() || b.isParallel());
        return stream.onClose(Streams.composedClose(a, b));
