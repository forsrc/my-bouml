class NodeSetDTM
!!!5769986.java!!!	NodeSetDTM(inout dtmManager : DTMManager)
    super();
    m_manager = dtmManager;
!!!5770114.java!!!	NodeSetDTM(in blocksize : int, in dummy : int, inout dtmManager : DTMManager)
    super(blocksize);
    m_manager = dtmManager;
!!!5770242.java!!!	NodeSetDTM(inout nodelist : NodeSetDTM)

    super();
    m_manager = nodelist.getDTMManager();
    m_root = nodelist.getRoot();

    addNodes((DTMIterator) nodelist);
!!!5770370.java!!!	NodeSetDTM(inout ni : DTMIterator)

    super();

    m_manager = ni.getDTMManager();
    m_root = ni.getRoot();
    addNodes(ni);
!!!5770498.java!!!	NodeSetDTM(inout iterator : NodeIterator, inout xctxt : XPathContext)

    super();

    Node node;
    m_manager = xctxt.getDTMManager();

    while (null != (node = iterator.nextNode()))
    {
      int handle = xctxt.getDTMHandleFromNode(node);
      addNodeInDocOrder(handle, xctxt);
    }
!!!5770626.java!!!	NodeSetDTM(inout nodeList : NodeList, inout xctxt : XPathContext)

    super();

    m_manager = xctxt.getDTMManager();

    int n = nodeList.getLength();
    for (int i = 0; i < n; i++)
    {
      Node node = nodeList.item(i);
      int handle = xctxt.getDTMHandleFromNode(node);
      // Do not reorder or strip duplicate nodes from the given DOM nodelist
      addNode(handle); // addNodeInDocOrder(handle, xctxt);
    }
!!!5770754.java!!!	NodeSetDTM(in node : int, inout dtmManager : DTMManager)

    super();
    m_manager = dtmManager;

    addNode(node);
!!!5770882.java!!!	setEnvironment(inout environment : Object) : void
    // no-op
!!!5771010.java!!!	getRoot() : int
    if(DTM.NULL == m_root)
    {
      if(size() > 0)
        return item(0);
      else
        return DTM.NULL;
    }
    else
      return m_root;
!!!5771138.java!!!	setRoot(in context : int, inout environment : Object) : void
    // no-op, I guess...  (-sb)
!!!5771266.java!!!	clone() : Object

    NodeSetDTM clone = (NodeSetDTM) super.clone();

    return clone;
!!!5771394.java!!!	cloneWithReset() : DTMIterator

    NodeSetDTM clone = (NodeSetDTM) clone();

    clone.reset();

    return clone;
!!!5771522.java!!!	reset() : void
    m_next = 0;
!!!5771650.java!!!	getWhatToShow() : int
    return DTMFilter.SHOW_ALL & ~DTMFilter.SHOW_ENTITY_REFERENCE;
!!!5771778.java!!!	getFilter() : DTMFilter
    return null;
!!!5771906.java!!!	getExpandEntityReferences() : boolean
    return true;
!!!5772034.java!!!	getDTM(in nodeHandle : int) : DTM

    return m_manager.getDTM(nodeHandle);
!!!5772162.java!!!	getDTMManager() : DTMManager

    return m_manager;
!!!5772290.java!!!	nextNode() : int

    if ((m_next) < this.size())
    {
      int next = this.elementAt(m_next);

      m_next++;

      return next;
    }
    else
      return DTM.NULL;
!!!5772418.java!!!	previousNode() : int

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE, null)); //"This NodeSetDTM can not iterate to a previous node!");

    if ((m_next - 1) > 0)
    {
      m_next--;

      return this.elementAt(m_next);
    }
    else
      return DTM.NULL;
!!!5772674.java!!!	allowDetachToRelease(inout allowRelease : boolean) : void
    // no action for right now.
!!!5772802.java!!!	isFresh() : boolean
    return (m_next == 0);
!!!5772930.java!!!	runTo(in index : int) : void

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX, null)); //"This NodeSetDTM can not do indexing or counting functions!");

    if ((index >= 0) && (m_next < m_firstFree))
      m_next = index;
    else
      m_next = m_firstFree - 1;
!!!5773058.java!!!	item(in index : int) : int

    runTo(index);

    return this.elementAt(index);
!!!5773186.java!!!	getLength() : int

    runTo(-1);

    return this.size();
!!!5773314.java!!!	addNode(in n : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    this.addElement(n);
!!!5773442.java!!!	insertNode(in n : int, in pos : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    insertElementAt(n, pos);
!!!5773570.java!!!	removeNode(in n : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    this.removeElement(n);
!!!5773698.java!!!	addNodes(inout iterator : DTMIterator) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    if (null != iterator)  // defensive to fix a bug that Sanjiva reported.
    {
      int obj;

      while (DTM.NULL != (obj = iterator.nextNode()))
      {
        addElement(obj);
      }
    }

    // checkDups();
!!!5773826.java!!!	addNodesInDocOrder(inout iterator : DTMIterator, inout support : XPathContext) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    int node;

    while (DTM.NULL != (node = iterator.nextNode()))
    {
      addNodeInDocOrder(node, support);
    }
!!!5773954.java!!!	addNodeInDocOrder(in node : int, inout test : boolean, inout support : XPathContext) : int

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    int insertIndex = -1;

    if (test)
    {

      // This needs to do a binary search, but a binary search
      // is somewhat tough because the sequence test involves
      // two nodes.
      int size = size(), i;

      for (i = size - 1; i >= 0; i--)
      {
        int child = elementAt(i);

        if (child == node)
        {
          i = -2;  // Duplicate, suppress insert

          break;
        }

        DTM dtm = support.getDTM(node);
        if (!dtm.isNodeAfter(node, child))
        {
          break;
        }
      }

      if (i != -2)
      {
        insertIndex = i + 1;

        insertElementAt(node, insertIndex);
      }
    }
    else
    {
      insertIndex = this.size();

      boolean foundit = false;

      for (int i = 0; i < insertIndex; i++)
      {
        if (i == node)
        {
          foundit = true;

          break;
        }
      }

      if (!foundit)
        addElement(node);
    }

    // checkDups();
    return insertIndex;
!!!5774082.java!!!	addNodeInDocOrder(in node : int, inout support : XPathContext) : int

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    return addNodeInDocOrder(node, true, support);
!!!5774210.java!!!	size() : int
    return super.size();
!!!5774338.java!!!	addElement(in value : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.addElement(value);
!!!5774466.java!!!	insertElementAt(in value : int, in at : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.insertElementAt(value, at);
!!!5774594.java!!!	appendNodes(inout nodes : NodeVector) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.appendNodes(nodes);
!!!5774722.java!!!	removeAllElements() : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.removeAllElements();
!!!5774850.java!!!	removeElement(in s : int) : boolean

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    return super.removeElement(s);
!!!5774978.java!!!	removeElementAt(in i : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.removeElementAt(i);
!!!5775106.java!!!	setElementAt(in node : int, in index : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.setElementAt(node, index);
!!!5775234.java!!!	setItem(in node : int, in index : int) : void

    if (!m_mutable)
      throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); //"This NodeSetDTM is not mutable!");

    super.setElementAt(node, index);
!!!5775362.java!!!	elementAt(in i : int) : int

    runTo(i);

    return super.elementAt(i);
!!!5775490.java!!!	contains(in s : int) : boolean

    runTo(-1);

    return super.contains(s);
!!!5775618.java!!!	indexOf(in elem : int, in index : int) : int

    runTo(-1);

    return super.indexOf(elem, index);
!!!5775746.java!!!	indexOf(in elem : int) : int

    runTo(-1);

    return super.indexOf(elem);
!!!5775874.java!!!	getCurrentPos() : int
    return m_next;
!!!5776002.java!!!	setCurrentPos(in i : int) : void

    if (!m_cacheNodes)
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX, null)); //"This NodeSetDTM can not do indexing or counting functions!");

    m_next = i;
!!!5776130.java!!!	getCurrentNode() : int

    if (!m_cacheNodes)
      throw new RuntimeException(
        "This NodeSetDTM can not do indexing or counting functions!");

    int saved = m_next;
    // because nextNode always increments
    // But watch out for copy29, where the root iterator didn't
    // have nextNode called on it.
    int current = (m_next > 0) ? m_next-1 : m_next;
    int n = (current < m_firstFree) ? elementAt(current) : DTM.NULL;
    m_next = saved; // HACK: I think this is a bit of a hack.  -sb
    return n;
!!!5776258.java!!!	getShouldCacheNodes() : boolean
    return m_cacheNodes;
!!!5776386.java!!!	setShouldCacheNodes(inout b : boolean) : void

    if (!isFresh())
      throw new RuntimeException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_CALL_SETSHOULDCACHENODE, null)); //"Can not call setShouldCacheNodes after nextNode has been called!");

    m_cacheNodes = b;
    m_mutable = true;
!!!5776514.java!!!	isMutable() : boolean
    return m_mutable;
!!!5776642.java!!!	getLast() : int
    return m_last;
!!!5776770.java!!!	setLast(in last : int) : void
    m_last = last;
!!!5776898.java!!!	isDocOrdered() : boolean
    return true;
!!!5777026.java!!!	getAxis() : int
    return -1;
