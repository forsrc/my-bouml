class DirectDoubleBufferRS
!!!7692674.java!!!	DirectDoubleBufferRS(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)








        super(db, mark, pos, lim, cap, off);

!!!7692802.java!!!	slice() : DoubleBuffer
        int pos = this.position();
        int lim = this.limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);
        int off = (pos << 3);
        assert (off >= 0);
        return new DirectDoubleBufferRS(this, -1, 0, rem, rem, off);
!!!7692930.java!!!	duplicate() : DoubleBuffer
        return new DirectDoubleBufferRS(this,
                                              this.markValue(),
                                              this.position(),
                                              this.limit(),
                                              this.capacity(),
                                              0);
!!!7693058.java!!!	asReadOnlyBuffer() : DoubleBuffer








        return duplicate();

!!!7693186.java!!!	put(in x : double) : DoubleBuffer




        throw new ReadOnlyBufferException();

!!!7693314.java!!!	put(in i : int, in x : double) : DoubleBuffer




        throw new ReadOnlyBufferException();

!!!7693442.java!!!	put(inout src : DoubleBuffer) : DoubleBuffer




































        throw new ReadOnlyBufferException();

!!!7693570.java!!!	put(inout src : double [[]], in offset : int, in length : int) : DoubleBuffer




























        throw new ReadOnlyBufferException();

!!!7693698.java!!!	compact() : DoubleBuffer












        throw new ReadOnlyBufferException();

!!!7693826.java!!!	isDirect() : boolean
        return true;
!!!7693954.java!!!	isReadOnly() : boolean
        return true;
!!!7694082.java!!!	order() : ByteOrder

        return ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN)
                ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);





