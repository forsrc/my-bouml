class PatternEntry
!!!8297858.java!!!	appendQuotedExtension(inout toAddTo : StringBuffer) : void
        appendQuoted(extension,toAddTo);
!!!8297986.java!!!	appendQuotedChars(inout toAddTo : StringBuffer) : void
        appendQuoted(chars,toAddTo);
!!!8298114.java!!!	equals(inout obj : Object) : boolean
        if (obj == null) return false;
        PatternEntry other = (PatternEntry) obj;
        boolean result = chars.equals(other.chars);
        return result;
!!!8298242.java!!!	hashCode() : int
        return chars.hashCode();
!!!8298370.java!!!	toString() : String
        StringBuffer result = new StringBuffer();
        addToBuffer(result, true, false, null);
        return result.toString();
!!!8298498.java!!!	getStrength() : int
        return strength;
!!!8298626.java!!!	getExtension() : String
        return extension;
!!!8298754.java!!!	getChars() : String
        return chars;
!!!8298882.java!!!	addToBuffer(inout toAddTo : StringBuffer, inout showExtension : boolean, inout showWhiteSpace : boolean, inout lastEntry : PatternEntry) : void
        if (showWhiteSpace && toAddTo.length() > 0)
            if (strength == Collator.PRIMARY || lastEntry != null)
                toAddTo.append('\n');
            else
                toAddTo.append(' ');
        if (lastEntry != null) {
            toAddTo.append('&');
            if (showWhiteSpace)
                toAddTo.append(' ');
            lastEntry.appendQuotedChars(toAddTo);
            appendQuotedExtension(toAddTo);
            if (showWhiteSpace)
                toAddTo.append(' ');
        }
        switch (strength) {
        case Collator.IDENTICAL: toAddTo.append('='); break;
        case Collator.TERTIARY:  toAddTo.append(','); break;
        case Collator.SECONDARY: toAddTo.append(';'); break;
        case Collator.PRIMARY:   toAddTo.append('<'); break;
        case RESET: toAddTo.append('&'); break;
        case UNSET: toAddTo.append('?'); break;
        }
        if (showWhiteSpace)
            toAddTo.append(' ');
        appendQuoted(chars,toAddTo);
        if (showExtension && extension.length() != 0) {
            toAddTo.append('/');
            appendQuoted(extension,toAddTo);
        }
!!!8299010.java!!!	appendQuoted(inout chars : String, inout toAddTo : StringBuffer) : void
        boolean inQuote = false;
        char ch = chars.charAt(0);
        if (Character.isSpaceChar(ch)) {
            inQuote = true;
            toAddTo.append('\'');
        } else {
          if (PatternEntry.isSpecialChar(ch)) {
                inQuote = true;
                toAddTo.append('\'');
            } else {
                switch (ch) {
                    case 0x0010: case '\f': case '\r':
                    case '\t': case '\n':  case '@':
                    inQuote = true;
                    toAddTo.append('\'');
                    break;
                case '\'':
                    inQuote = true;
                    toAddTo.append('\'');
                    break;
                default:
                    if (inQuote) {
                        inQuote = false; toAddTo.append('\'');
                    }
                    break;
                }
           }
        }
        toAddTo.append(chars);
        if (inQuote)
            toAddTo.append('\'');
!!!8299138.java!!!	PatternEntry(in strength : int, inout chars : StringBuffer, inout extension : StringBuffer)
        this.strength = strength;
        this.chars = chars.toString();
        this.extension = (extension.length() > 0) ? extension.toString()
                                                  : "";
!!!8299522.java!!!	isSpecialChar(in ch : char) : boolean
        return ((ch == '\u0020') ||
                ((ch <= '\u002F') && (ch >= '\u0022')) ||
                ((ch <= '\u003F') && (ch >= '\u003A')) ||
                ((ch <= '\u0060') && (ch >= '\u005B')) ||
                ((ch <= '\u007E') && (ch >= '\u007B')));
