class Duration
!!!8325250.java!!!	ofDays(in days : long) : Duration
        return create(Math.multiplyExact(days, SECONDS_PER_DAY), 0);
!!!8325378.java!!!	ofHours(in hours : long) : Duration
        return create(Math.multiplyExact(hours, SECONDS_PER_HOUR), 0);
!!!8325506.java!!!	ofMinutes(in minutes : long) : Duration
        return create(Math.multiplyExact(minutes, SECONDS_PER_MINUTE), 0);
!!!8325634.java!!!	ofSeconds(in seconds : long) : Duration
        return create(seconds, 0);
!!!8325762.java!!!	ofSeconds(in seconds : long, in nanoAdjustment : long) : Duration
        long secs = Math.addExact(seconds, Math.floorDiv(nanoAdjustment, NANOS_PER_SECOND));
        int nos = (int) Math.floorMod(nanoAdjustment, NANOS_PER_SECOND);
        return create(secs, nos);
!!!8325890.java!!!	ofMillis(in millis : long) : Duration
        long secs = millis / 1000;
        int mos = (int) (millis % 1000);
        if (mos < 0) {
            mos += 1000;
            secs--;
        }
        return create(secs, mos * 1000_000);
!!!8326018.java!!!	ofNanos(in nanos : long) : Duration
        long secs = nanos / NANOS_PER_SECOND;
        int nos = (int) (nanos % NANOS_PER_SECOND);
        if (nos < 0) {
            nos += NANOS_PER_SECOND;
            secs--;
        }
        return create(secs, nos);
!!!8326146.java!!!	of(in amount : long, inout unit : TemporalUnit) : Duration
        return ZERO.plus(amount, unit);
!!!8326274.java!!!	from(inout amount : TemporalAmount) : Duration
        Objects.requireNonNull(amount, "amount");
        Duration duration = ZERO;
        for (TemporalUnit unit : amount.getUnits()) {
            duration = duration.plus(amount.get(unit), unit);
        }
        return duration;
!!!8326402.java!!!	parse(inout text : CharSequence) : Duration
        Objects.requireNonNull(text, "text");
        Matcher matcher = PATTERN.matcher(text);
        if (matcher.matches()) {
            // check for letter T but no time sections
            if ("T".equals(matcher.group(3)) == false) {
                boolean negate = "-".equals(matcher.group(1));
                String dayMatch = matcher.group(2);
                String hourMatch = matcher.group(4);
                String minuteMatch = matcher.group(5);
                String secondMatch = matcher.group(6);
                String fractionMatch = matcher.group(7);
                if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {
                    long daysAsSecs = parseNumber(text, dayMatch, SECONDS_PER_DAY, "days");
                    long hoursAsSecs = parseNumber(text, hourMatch, SECONDS_PER_HOUR, "hours");
                    long minsAsSecs = parseNumber(text, minuteMatch, SECONDS_PER_MINUTE, "minutes");
                    long seconds = parseNumber(text, secondMatch, 1, "seconds");
                    int nanos = parseFraction(text,  fractionMatch, seconds < 0 ? -1 : 1);
                    try {
                        return create(negate, daysAsSecs, hoursAsSecs, minsAsSecs, seconds, nanos);
                    } catch (ArithmeticException ex) {
                        throw (DateTimeParseException) new DateTimeParseException("Text cannot be parsed to a Duration: overflow", text, 0).initCause(ex);
                    }
                }
            }
        }
        throw new DateTimeParseException("Text cannot be parsed to a Duration", text, 0);
!!!8326530.java!!!	parseNumber(inout text : CharSequence, inout parsed : String, in multiplier : int, inout errorText : String) : long
        // regex limits to [-+]?[0-9]+
        if (parsed == null) {
            return 0;
        }
        try {
            long val = Long.parseLong(parsed);
            return Math.multiplyExact(val, multiplier);
        } catch (NumberFormatException | ArithmeticException ex) {
            throw (DateTimeParseException) new DateTimeParseException("Text cannot be parsed to a Duration: " + errorText, text, 0).initCause(ex);
        }
!!!8326658.java!!!	parseFraction(inout text : CharSequence, inout parsed : String, in negate : int) : int
        // regex limits to [0-9]{0,9}
        if (parsed == null || parsed.length() == 0) {
            return 0;
        }
        try {
            parsed = (parsed + "000000000").substring(0, 9);
            return Integer.parseInt(parsed) * negate;
        } catch (NumberFormatException | ArithmeticException ex) {
            throw (DateTimeParseException) new DateTimeParseException("Text cannot be parsed to a Duration: fraction", text, 0).initCause(ex);
        }
!!!8326786.java!!!	create(inout negate : boolean, in daysAsSecs : long, in hoursAsSecs : long, in minsAsSecs : long, in secs : long, in nanos : int) : Duration
        long seconds = Math.addExact(daysAsSecs, Math.addExact(hoursAsSecs, Math.addExact(minsAsSecs, secs)));
        if (negate) {
            return ofSeconds(seconds, nanos).negated();
        }
        return ofSeconds(seconds, nanos);
!!!8326914.java!!!	between(inout startInclusive : Temporal, inout endExclusive : Temporal) : Duration
        try {
            return ofNanos(startInclusive.until(endExclusive, NANOS));
        } catch (DateTimeException | ArithmeticException ex) {
            long secs = startInclusive.until(endExclusive, SECONDS);
            long nanos;
            try {
                nanos = endExclusive.getLong(NANO_OF_SECOND) - startInclusive.getLong(NANO_OF_SECOND);
                if (secs > 0 && nanos < 0) {
                    secs++;
                } else if (secs < 0 && nanos > 0) {
                    secs--;
                }
            } catch (DateTimeException ex2) {
                nanos = 0;
            }
            return ofSeconds(secs, nanos);
        }
!!!8327042.java!!!	create(in seconds : long, in nanoAdjustment : int) : Duration
        if ((seconds | nanoAdjustment) == 0) {
            return ZERO;
        }
        return new Duration(seconds, nanoAdjustment);
!!!8327170.java!!!	Duration(in seconds : long, in nanos : int)
        super();
        this.seconds = seconds;
        this.nanos = nanos;
!!!8327298.java!!!	get(inout unit : TemporalUnit) : long
        if (unit == SECONDS) {
            return seconds;
        } else if (unit == NANOS) {
            return nanos;
        } else {
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
!!!8327426.java!!!	getUnits() : List
        return DurationUnits.UNITS;
!!!8327554.java!!!	isZero() : boolean
        return (seconds | nanos) == 0;
!!!8327682.java!!!	isNegative() : boolean
        return seconds < 0;
!!!8327810.java!!!	getSeconds() : long
        return seconds;
!!!8327938.java!!!	getNano() : int
        return nanos;
!!!8328066.java!!!	withSeconds(in seconds : long) : Duration
        return create(seconds, nanos);
!!!8328194.java!!!	withNanos(in nanoOfSecond : int) : Duration
        NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);
        return create(seconds, nanoOfSecond);
!!!8328322.java!!!	plus(inout duration : Duration) : Duration
        return plus(duration.getSeconds(), duration.getNano());
!!!8328450.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : Duration
        Objects.requireNonNull(unit, "unit");
        if (unit == DAYS) {
            return plus(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY), 0);
        }
        if (unit.isDurationEstimated()) {
            throw new UnsupportedTemporalTypeException("Unit must not have an estimated duration");
        }
        if (amountToAdd == 0) {
            return this;
        }
        if (unit instanceof ChronoUnit) {
            switch ((ChronoUnit) unit) {
                case NANOS: return plusNanos(amountToAdd);
                case MICROS: return plusSeconds((amountToAdd / (1000_000L * 1000)) * 1000).plusNanos((amountToAdd % (1000_000L * 1000)) * 1000);
                case MILLIS: return plusMillis(amountToAdd);
                case SECONDS: return plusSeconds(amountToAdd);
            }
            return plusSeconds(Math.multiplyExact(unit.getDuration().seconds, amountToAdd));
        }
        Duration duration = unit.getDuration().multipliedBy(amountToAdd);
        return plusSeconds(duration.getSeconds()).plusNanos(duration.getNano());
!!!8328578.java!!!	plusDays(in daysToAdd : long) : Duration
        return plus(Math.multiplyExact(daysToAdd, SECONDS_PER_DAY), 0);
!!!8328706.java!!!	plusHours(in hoursToAdd : long) : Duration
        return plus(Math.multiplyExact(hoursToAdd, SECONDS_PER_HOUR), 0);
!!!8328834.java!!!	plusMinutes(in minutesToAdd : long) : Duration
        return plus(Math.multiplyExact(minutesToAdd, SECONDS_PER_MINUTE), 0);
!!!8328962.java!!!	plusSeconds(in secondsToAdd : long) : Duration
        return plus(secondsToAdd, 0);
!!!8329090.java!!!	plusMillis(in millisToAdd : long) : Duration
        return plus(millisToAdd / 1000, (millisToAdd % 1000) * 1000_000);
!!!8329218.java!!!	plusNanos(in nanosToAdd : long) : Duration
        return plus(0, nanosToAdd);
!!!8329346.java!!!	plus(in secondsToAdd : long, in nanosToAdd : long) : Duration
        if ((secondsToAdd | nanosToAdd) == 0) {
            return this;
        }
        long epochSec = Math.addExact(seconds, secondsToAdd);
        epochSec = Math.addExact(epochSec, nanosToAdd / NANOS_PER_SECOND);
        nanosToAdd = nanosToAdd % NANOS_PER_SECOND;
        long nanoAdjustment = nanos + nanosToAdd;  // safe int+NANOS_PER_SECOND
        return ofSeconds(epochSec, nanoAdjustment);
!!!8329474.java!!!	minus(inout duration : Duration) : Duration
        long secsToSubtract = duration.getSeconds();
        int nanosToSubtract = duration.getNano();
        if (secsToSubtract == Long.MIN_VALUE) {
            return plus(Long.MAX_VALUE, -nanosToSubtract).plus(1, 0);
        }
        return plus(-secsToSubtract, -nanosToSubtract);
!!!8329602.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : Duration
        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
!!!8329730.java!!!	minusDays(in daysToSubtract : long) : Duration
        return (daysToSubtract == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-daysToSubtract));
!!!8329858.java!!!	minusHours(in hoursToSubtract : long) : Duration
        return (hoursToSubtract == Long.MIN_VALUE ? plusHours(Long.MAX_VALUE).plusHours(1) : plusHours(-hoursToSubtract));
!!!8329986.java!!!	minusMinutes(in minutesToSubtract : long) : Duration
        return (minutesToSubtract == Long.MIN_VALUE ? plusMinutes(Long.MAX_VALUE).plusMinutes(1) : plusMinutes(-minutesToSubtract));
!!!8330114.java!!!	minusSeconds(in secondsToSubtract : long) : Duration
        return (secondsToSubtract == Long.MIN_VALUE ? plusSeconds(Long.MAX_VALUE).plusSeconds(1) : plusSeconds(-secondsToSubtract));
!!!8330242.java!!!	minusMillis(in millisToSubtract : long) : Duration
        return (millisToSubtract == Long.MIN_VALUE ? plusMillis(Long.MAX_VALUE).plusMillis(1) : plusMillis(-millisToSubtract));
!!!8330370.java!!!	minusNanos(in nanosToSubtract : long) : Duration
        return (nanosToSubtract == Long.MIN_VALUE ? plusNanos(Long.MAX_VALUE).plusNanos(1) : plusNanos(-nanosToSubtract));
!!!8330498.java!!!	multipliedBy(in multiplicand : long) : Duration
        if (multiplicand == 0) {
            return ZERO;
        }
        if (multiplicand == 1) {
            return this;
        }
        return create(toSeconds().multiply(BigDecimal.valueOf(multiplicand)));
!!!8330626.java!!!	dividedBy(in divisor : long) : Duration
        if (divisor == 0) {
            throw new ArithmeticException("Cannot divide by zero");
        }
        if (divisor == 1) {
            return this;
        }
        return create(toSeconds().divide(BigDecimal.valueOf(divisor), RoundingMode.DOWN));
!!!8330754.java!!!	toSeconds() : BigDecimal
        return BigDecimal.valueOf(seconds).add(BigDecimal.valueOf(nanos, 9));
!!!8330882.java!!!	create(inout seconds : BigDecimal) : Duration
        BigInteger nanos = seconds.movePointRight(9).toBigIntegerExact();
        BigInteger[] divRem = nanos.divideAndRemainder(BI_NANOS_PER_SECOND);
        if (divRem[0].bitLength() > 63) {
            throw new ArithmeticException("Exceeds capacity of Duration: " + nanos);
        }
        return ofSeconds(divRem[0].longValue(), divRem[1].intValue());
!!!8331010.java!!!	negated() : Duration
        return multipliedBy(-1);
!!!8331138.java!!!	abs() : Duration
        return isNegative() ? negated() : this;
!!!8331266.java!!!	addTo(inout temporal : Temporal) : Temporal
        if (seconds != 0) {
            temporal = temporal.plus(seconds, SECONDS);
        }
        if (nanos != 0) {
            temporal = temporal.plus(nanos, NANOS);
        }
        return temporal;
!!!8331394.java!!!	subtractFrom(inout temporal : Temporal) : Temporal
        if (seconds != 0) {
            temporal = temporal.minus(seconds, SECONDS);
        }
        if (nanos != 0) {
            temporal = temporal.minus(nanos, NANOS);
        }
        return temporal;
!!!8331522.java!!!	toDays() : long
        return seconds / SECONDS_PER_DAY;
!!!8331650.java!!!	toHours() : long
        return seconds / SECONDS_PER_HOUR;
!!!8331778.java!!!	toMinutes() : long
        return seconds / SECONDS_PER_MINUTE;
!!!8331906.java!!!	toMillis() : long
        long millis = Math.multiplyExact(seconds, 1000);
        millis = Math.addExact(millis, nanos / 1000_000);
        return millis;
!!!8332034.java!!!	toNanos() : long
        long totalNanos = Math.multiplyExact(seconds, NANOS_PER_SECOND);
        totalNanos = Math.addExact(totalNanos, nanos);
        return totalNanos;
!!!8332162.java!!!	compareTo(inout otherDuration : Duration) : int
        int cmp = Long.compare(seconds, otherDuration.seconds);
        if (cmp != 0) {
            return cmp;
        }
        return nanos - otherDuration.nanos;
!!!8332290.java!!!	equals(inout otherDuration : Object) : boolean
        if (this == otherDuration) {
            return true;
        }
        if (otherDuration instanceof Duration) {
            Duration other = (Duration) otherDuration;
            return this.seconds == other.seconds &&
                   this.nanos == other.nanos;
        }
        return false;
!!!8332418.java!!!	hashCode() : int
        return ((int) (seconds ^ (seconds >>> 32))) + (51 * nanos);
!!!8332546.java!!!	toString() : String
        if (this == ZERO) {
            return "PT0S";
        }
        long hours = seconds / SECONDS_PER_HOUR;
        int minutes = (int) ((seconds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE);
        int secs = (int) (seconds % SECONDS_PER_MINUTE);
        StringBuilder buf = new StringBuilder(24);
        buf.append("PT");
        if (hours != 0) {
            buf.append(hours).append('H');
        }
        if (minutes != 0) {
            buf.append(minutes).append('M');
        }
        if (secs == 0 && nanos == 0 && buf.length() > 2) {
            return buf.toString();
        }
        if (secs < 0 && nanos > 0) {
            if (secs == -1) {
                buf.append("-0");
            } else {
                buf.append(secs + 1);
            }
        } else {
            buf.append(secs);
        }
        if (nanos > 0) {
            int pos = buf.length();
            if (secs < 0) {
                buf.append(2 * NANOS_PER_SECOND - nanos);
            } else {
                buf.append(nanos + NANOS_PER_SECOND);
            }
            while (buf.charAt(buf.length() - 1) == '0') {
                buf.setLength(buf.length() - 1);
            }
            buf.setCharAt(pos, '.');
        }
        buf.append('S');
        return buf.toString();
!!!8332674.java!!!	writeReplace() : Object
        return new Ser(Ser.DURATION_TYPE, this);
!!!8332802.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8332930.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeLong(seconds);
        out.writeInt(nanos);
!!!8333058.java!!!	readExternal(inout in : DataInput) : Duration
        long seconds = in.readLong();
        int nanos = in.readInt();
        return Duration.ofSeconds(seconds, nanos);
