format 222
"dtm" // jdk1.8::com::sun::org::apache::xml::internal::dtm
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xml/internal/dtm/"
  java_package "com.sun.org.apache.xml.internal.dtm"
  classview 157826 "dtm"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 590082 "DTMAxisIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class iterates over a single XPath Axis, and returns node handles.
"
      classrelation 1696898 // <generalisation>
	relation 1696898 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1696898 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 844290 "END"
	class_attribute const_attribute public explicit_type "int"
	init_value " DTM.NULL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Specifies the end of the iteration, and is the same as DTM.NULL.  
"
      end

      operation 3888898 "next"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next node in the iteration.

@return The next node handle in the iteration, or END.
"
      end

      operation 3889026 "reset"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the iterator to the last start node.

@return A DTMAxisIterator, which may or may not be the same as this
        iterator.
"
      end

      operation 3889154 "getLast"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the number of nodes in this iterator.  This may be an expensive
operation when called the first time.
"
      end

      operation 3889282 "getPosition"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The position of the current node in the set, as defined by XPath.
"
      end

      operation 3889410 "setMark"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remembers the current node for the next call to gotoMark().
"
      end

      operation 3889538 "gotoMark"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restores the current node remembered by setMark().
"
      end

      operation 3889666 "setStartNode"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 1
	  param in name "node" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@param node Sets the root of the iteration.

@return A DTMAxisIterator set to the start of the iteration.
"
      end

      operation 3889794 "getStartNode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get start to END should 'close' the iterator,
i.e. subsequent call to next() should return END.

@return The root node of the iteration.
"
      end

      operation 3889922 "isReverse"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if this iterator has a reversed axis, else false.
"
      end

      operation 3890050 "cloneIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return a deep copy of this iterator. The clone should not be reset
from its current position.
"
      end

      operation 3890178 "setRestartable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "isRestartable" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set if restartable.
"
      end

      operation 3890306 "getNodeByPosition"
	public explicit_return_type "int"
	nparams 1
	  param in name "position" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the node at the given position.

@param position The position
@return The node at the given position.
"
      end
    end

    class 618754 "DTM"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DTM</code> is an XML document model expressed as a table
rather than an object tree. It attempts to provide an interface to
a parse tree that has very little object creation. (DTM
implementations may also support incremental construction of the
model, but that's hidden from the DTM API.)

<p>Nodes in the DTM are identified by integer \"handles\".  A handle must
be unique within a process, and carries both node identification and
document identification.  It must be possible to compare two handles
(and thus their nodes) for identity with \"==\".</p>

<p>Namespace URLs, local-names, and expanded-names can all be
represented by and tested as integer ID values.  An expanded name
represents (and may or may not directly contain) a combination of
the URL ID, and the local-name ID.  Note that the namespace URL id
can be 0, which should have the meaning that the namespace is null.
For consistancy, zero should not be used for a local-name index. </p>

<p>Text content of a node is represented by an index and length,
permitting efficient storage such as a shared FastStringBuffer.</p>

<p>The model of the tree, as well as the general navigation model,
is that of XPath 1.0, for the moment.  The model will eventually be
adapted to match the XPath 2.0 data model, XML Schema, and
InfoSet.</p>

<p>DTM does _not_ directly support the W3C's Document Object
Model. However, it attempts to come close enough that an
implementation of DTM can be created that wraps a DOM and vice
versa.</p>

<p><strong>Please Note:</strong> The DTM API is still
<strong>Subject To Change.</strong> This wouldn't affect most
users, but might require updating some extensions.</p>

<p> The largest change being contemplated is a reconsideration of
the Node Handle representation.  We are still not entirely sure
that an integer packed with two numeric subfields is really the
best solution. It has been suggested that we move up to a Long, to
permit more nodes per document without having to reduce the number
of slots in the DTMManager. There's even been a proposal that we
replace these integers with \"cursor\" objects containing the
internal node id and a pointer to the actual DTM object; this might
reduce the need to continuously consult the DTMManager to retrieve
the latter, and might provide a useful \"hook\" back into normal Java
heap management.  But changing this datatype would have huge impact
on Xalan's internals -- especially given Java's lack of C-style
typedefs -- so we won't cut over unless we're convinced the new
solution really would be an improvement!</p>
"
      attribute 845570 "NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Null node handles are represented by this value.

"
      end

      attribute 845698 "ROOT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " These nodeType mnemonics and values are deliberately the same as those
 used by the DOM, for convenient mapping

 %REVIEW% Should we actually define these as initialized to,
 eg. org.w3c.dom.Document.ELEMENT_NODE?

The node is a <code>Root</code>.

"
      end

      attribute 845826 "ELEMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is an <code>Element</code>.

"
      end

      attribute 845954 "ATTRIBUTE_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is an <code>Attr</code>.

"
      end

      attribute 846082 "TEXT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Text</code> node.

"
      end

      attribute 846210 "CDATA_SECTION_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>CDATASection</code>.

"
      end

      attribute 846338 "ENTITY_REFERENCE_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is an <code>EntityReference</code>.

"
      end

      attribute 846466 "ENTITY_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is an <code>Entity</code>.

"
      end

      attribute 846594 "PROCESSING_INSTRUCTION_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>ProcessingInstruction</code>.

"
      end

      attribute 846722 "COMMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Comment</code>.

"
      end

      attribute 846850 "DOCUMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Document</code>.

"
      end

      attribute 846978 "DOCUMENT_TYPE_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>DocumentType</code>.

"
      end

      attribute 847106 "DOCUMENT_FRAGMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>DocumentFragment</code>.

"
      end

      attribute 847234 "NOTATION_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Notation</code>.

"
      end

      attribute 847362 "NAMESPACE_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>namespace node</code>. Note that this is not
currently a node type defined by the DOM API.

"
      end

      attribute 847490 "NTYPES"
	class_attribute const_attribute public explicit_type "short"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of valid nodetypes.

"
      end

      operation 3914498 "setFeature"
	public explicit_return_type "void"
	nparams 2
	  param inout name "featureId" type class_ref 128130 // String
	  param inout name "state" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========= DTM Implementation Control Functions. ==============
 %TBD% RETIRED -- do via setFeature if needed. Remove from impls.
 public void setParseBlockSize(int blockSizeSuggestion);

Set an implementation dependent feature.
<p>
%REVIEW% Do we really expect to set features on DTMs?

@param featureId A feature URL.
@param state true if this feature should be on, false otherwise.
"
      end

      operation 3914626 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "property" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a run time property for this DTM instance.

@param property a <code>String</code> value
@param value an <code>Object</code> value
"
      end

      operation 3914754 "getAxisTraverser"
	public return_type class_ref 618882 // DTMAxisTraverser
	nparams 1
	  param in name "axis" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========= Document Navigation Functions =========

This returns a stateless \"traverser\", that can navigate over an
XPath axis, though not in document order.

@param axis One of Axes.ANCESTORORSELF, etc.

@return A DTMAxisIterator, or null if the givin axis isn't supported.
"
      end

      operation 3914882 "getAxisIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 1
	  param in name "axis" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a shortcut to the iterators that implement
XPath axes.
Returns a bare-bones iterator that must be initialized
with a start node (using iterator.setStartNode()).

@param axis One of Axes.ANCESTORORSELF, etc.

@return A DTMAxisIterator, or null if the givin axis isn't supported.
"
      end

      operation 3915010 "getTypedAxisIterator"
	public return_type class_ref 590082 // DTMAxisIterator
	nparams 2
	  param in name "axis" explicit_type "int"
	  param in name "type" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an iterator that can navigate over an XPath Axis, predicated by
the extended type ID.

@param axis
@param type An extended type ID.

@return A DTMAxisIterator, or null if the givin axis isn't supported.
"
      end

      operation 3915138 "hasChildNodes"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, test if it has child nodes.
<p> %REVIEW% This is obviously useful at the DOM layer, where it
would permit testing this without having to create a proxy
node. It's less useful in the DTM API, where
(dtm.getFirstChild(nodeHandle)!=DTM.NULL) is just as fast and
almost as self-evident. But it's a convenience, and eases porting
of DOM code to DTM.  </p>

@param nodeHandle int Handle of the node.
@return int true if the given node has child nodes.
"
      end

      operation 3915266 "getFirstChild"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the handle of the node's first child.

@param nodeHandle int Handle of the node.
@return int DTM node-number of first child,
or DTM.NULL to indicate none exists.
"
      end

      operation 3915394 "getLastChild"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the handle of the node's last child.

@param nodeHandle int Handle of the node.
@return int Node-number of last child,
or DTM.NULL to indicate none exists.
"
      end

      operation 3915522 "getAttributeNode"
	public explicit_return_type "int"
	nparams 3
	  param in name "elementHandle" explicit_type "int"
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute node by local name and namespace URI

%TBD% Note that we currently have no way to support
the DOM's old getAttribute() call, which accesses only the qname.

@param elementHandle Handle of the node upon which to look up this attribute.
@param namespaceURI The namespace URI of the attribute to
  retrieve, or null.
@param name The local name of the attribute to
  retrieve.
@return The attribute node handle with the specified name (
  <code>nodeName</code>) or <code>DTM.NULL</code> if there is no such
  attribute.
"
      end

      operation 3915650 "getFirstAttribute"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the index of the node's first attribute.

@param nodeHandle int Handle of the node.
@return Handle of first attribute, or DTM.NULL to indicate none exists.
"
      end

      operation 3915778 "getFirstNamespaceNode"
	public explicit_return_type "int"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "inScope" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, get the index of the node's first namespace node.

@param nodeHandle handle to node, which should probably be an element
                  node, but need not be.

@param inScope true if all namespaces in scope should be
                  returned, false if only the node's own
                  namespace declarations should be returned.
@return handle of first namespace,
or DTM.NULL to indicate none exists.
"
      end

      operation 3915906 "getNextSibling"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to its next sibling.
@param nodeHandle int Handle of the node.
@return int Node-number of next sibling,
or DTM.NULL to indicate none exists.
"
      end

      operation 3916034 "getPreviousSibling"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find its preceeding sibling.
WARNING: DTM implementations may be asymmetric; in some,
this operation has been resolved by search, and is relatively expensive.

@param nodeHandle the id of the node.
@return int Node-number of the previous sib,
or DTM.NULL to indicate none exists.
"
      end

      operation 3916162 "getNextAttribute"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, advance to the next attribute. If an
element, we advance to its first attribute; if an attr, we advance to
the next attr of the same element.

@param nodeHandle int Handle of the node.
@return int DTM node-number of the resolved attr,
or DTM.NULL to indicate none exists.
"
      end

      operation 3916290 "getNextNamespaceNode"
	public explicit_return_type "int"
	nparams 3
	  param in name "baseHandle" explicit_type "int"
	  param in name "namespaceHandle" explicit_type "int"
	  param inout name "inScope" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, advance to the next namespace in the same scope
(local or local-plus-inherited, as selected by getFirstNamespaceNode)

@param baseHandle handle to original node from where the first child
was relative to (needed to return nodes in document order).
@param namespaceHandle handle to node which must be of type
NAMESPACE_NODE.
NEEDSDOC @param inScope
@return handle of next namespace,
or DTM.NULL to indicate none exists.
"
      end

      operation 3916418 "getParent"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find its parent node.

@param nodeHandle the id of the node.
@return int Node handle of parent,
or DTM.NULL to indicate none exists.
"
      end

      operation 3916546 "getDocument"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a DTM which contains only a single document,
find the Node Handle of the  Document node. Note
that if the DTM is configured so it can contain multiple
documents, this call will return the Document currently
under construction -- but may return null if it's between
documents. Generally, you should use getOwnerDocument(nodeHandle)
or getDocumentRoot(nodeHandle) instead.

@return int Node handle of document, or DTM.NULL if a shared DTM
can not tell us which Document is currently active.
"
      end

      operation 3916674 "getOwnerDocument"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node. This version mimics
the behavior of the DOM call by the same name.

@param nodeHandle the id of the node.
@return int Node handle of owning document, or DTM.NULL if the node was
a Document.
@see #getDocumentRoot(int nodeHandle)
"
      end

      operation 3916802 "getDocumentRoot"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, find the owning document node.

@param nodeHandle the id of the node.
@return int Node handle of owning document, or the node itself if it was
a Document. (Note difference from DOM, where getOwnerDocument returns
null for the Document node.)
@see #getOwnerDocument(int nodeHandle)
"
      end

      operation 3916930 "getStringValue"
	public return_type class_ref 619010 // XMLString
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the string-value of a node as a String object
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).

@param nodeHandle The node ID.

@return A string object that represents the string-value of the given node.
"
      end

      operation 3917058 "getStringValueChunkCount"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get number of character array chunks in
the string-value of a node.
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).
Note that a single text node may have multiple text chunks.

@param nodeHandle The node ID.

@return number of character array chunks in
        the string-value of a node.
"
      end

      operation 3917186 "getStringValueChunk"
	public explicit_return_type "char"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param in name "chunkIndex" explicit_type "int"
	  param inout name "startAndLen" explicit_type "int"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a character array chunk in the string-value of a node.
(see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value).
Note that a single text node may have multiple text chunks.

@param nodeHandle The node ID.
@param chunkIndex Which chunk to get.
@param startAndLen  A two-integer array which, upon return, WILL
BE FILLED with values representing the chunk's start position
within the returned character buffer and the length of the chunk.
@return The character array buffer within which the chunk occurs,
setting startAndLen's contents as a side-effect.
"
      end

      operation 3917314 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return an ID that represents the node's expanded name.

@param nodeHandle The handle to the node in question.

@return the expanded-name id of the node.
"
      end

      operation 3917442 "getExpandedTypeID"
	public explicit_return_type "int"
	nparams 3
	  param inout name "namespace" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param in name "type" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded name, return an ID.  If the expanded-name does not
exist in the internal tables, the entry will be created, and the ID will
be returned.  Any additional nodes that are created that have this
expanded name will use this ID.

NEEDSDOC @param namespace
NEEDSDOC @param localName
NEEDSDOC @param type

@return the expanded-name id of the node.
"
      end

      operation 3917570 "getLocalNameFromExpandedNameID"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the local name part.

@param ExpandedNameID an ID that represents an expanded-name.
@return String Local name of this node.
"
      end

      operation 3917698 "getNamespaceFromExpandedNameID"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "ExpandedNameID" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an expanded-name ID, return the namespace URI part.

@param ExpandedNameID an ID that represents an expanded-name.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 3917826 "getNodeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node name. This will
include names such as #text or #document.

@param nodeHandle the id of the node.
@return String Name of this node, which may be an empty string.
%REVIEW% Document when empty string is possible...
"
      end

      operation 3917954 "getNodeNameX"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return the XPath node name.  This should be
the name as described by the XPath data model, NOT the DOM-style
name.

@param nodeHandle the id of the node.
@return String Name of this node.
"
      end

      operation 3918082 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style localname.
(As defined in Namespaces, this is the portion of the name after the
prefix, if present, or the whole node name if no prefix exists)

@param nodeHandle the id of the node.
@return String Local name of this node.
"
      end

      operation 3918210 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a namespace handle, return the prefix that the namespace decl is
mapping.
Given a node handle, return the prefix used to map to the namespace.
(As defined in Namespaces, this is the portion of the name before any
colon character).

<p> %REVIEW% Are you sure you want \"\" for no prefix?  </p>

@param nodeHandle the id of the node.
@return String prefix of this node's name, or \"\" if no explicit
namespace prefix was given.
"
      end

      operation 3918338 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style namespace URI
(As defined in Namespaces, this is the declared URI which this node's
prefix -- or default in lieu thereof -- was mapped to.)
@param nodeHandle the id of the node.
@return String URI value of this node's namespace, or null if no
namespace was resolved.
"
      end

      operation 3918466 "getNodeValue"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its node value. This is mostly
as defined by the DOM, but may ignore some conveniences.
<p>
@param nodeHandle The node id.
@return String Value of this node, or null if not
meaningful for this node type.
"
      end

      operation 3918594 "getNodeType"
	public explicit_return_type "short"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a node handle, return its DOM-style node type.

<p>%REVIEW% Generally, returning short is false economy. Return int?</p>

@param nodeHandle The node id.
@return int Node type, as per the DOM's Node._NODE constants.
"
      end

      operation 3918722 "getLevel"
	public explicit_return_type "short"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the depth level of this node in the tree (equals 1 for
a parentless node).

@param nodeHandle The node id.
@return the number of ancestors, plus one
@xsl.usage internal
"
      end

      operation 3918850 "isSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ============== Document query functions ==============

Tests whether DTM DOM implementation implements a specific feature and
that feature is supported by this node.
@param feature The name of the feature to test.
@param version This is the version number of the feature to test.
  If the version is not
  specified, supporting any version of the feature will cause the
  method to return <code>true</code>.
@return Returns <code>true</code> if the specified feature is
  supported on this node, <code>false</code> otherwise.
"
      end

      operation 3918978 "getDocumentBaseURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the base URI of the document entity. If it is not known
(because the document was parsed from a socket connection or from
standard input, for example), the value of this property is unknown.

@return the document base URI String object or null if unknown.
"
      end

      operation 3919106 "setDocumentBaseURI"
	public explicit_return_type "void"
	nparams 1
	  param inout name "baseURI" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the base URI of the document entity.

@param baseURI the document base URI String object or null if unknown.
"
      end

      operation 3919234 "getDocumentSystemIdentifier"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the system identifier of the document entity. If
it is not known, the value of this property is null.

@param nodeHandle The node id, which can be any valid node handle.
@return the system identifier String object or null if unknown.
"
      end

      operation 3919362 "getDocumentEncoding"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the character encoding scheme
       in which the document entity is expressed.

@param nodeHandle The node id, which can be any valid node handle.
@return the document encoding String object.
"
      end

      operation 3919490 "getDocumentStandalone"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an indication of the standalone status of the document,
       either \"yes\" or \"no\". This property is derived from the optional
       standalone document declaration in the XML declaration at the
       beginning of the document entity, and has no value if there is no
       standalone document declaration.

@param nodeHandle The node id, which can be any valid node handle.
@return the document standalone String object, either \"yes\", \"no\", or null.
"
      end

      operation 3919618 "getDocumentVersion"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "documentHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representing the XML version of the document. This
property is derived from the XML declaration optionally present at the
beginning of the document entity, and has no value if there is no XML
declaration.

@param documentHandle the document handle
@return the document version String object
"
      end

      operation 3919746 "getDocumentAllDeclarationsProcessed"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an indication of
whether the processor has read the complete DTD. Its value is a
boolean. If it is false, then certain properties (indicated in their
descriptions below) may be unknown. If it is true, those properties
are never unknown.

@return <code>true</code> if all declarations were processed;
        <code>false</code> otherwise.
"
      end

      operation 3919874 "getDocumentTypeDeclarationSystemIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  A document type declaration information item has the following properties:

    1. [system identifier] The system identifier of the external subset, if
       it exists. Otherwise this property has no value.

@return the system identifier String object, or null if there is none.
"
      end

      operation 3920002 "getDocumentTypeDeclarationPublicIdentifier"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the public identifier of the external subset,
normalized as described in 4.2.2 External Entities [XML]. If there is
no external subset or if it has no public identifier, this property
has no value.

@return the public identifier String object, or null if there is none.
"
      end

      operation 3920130 "getElementById"
	public explicit_return_type "int"
	nparams 1
	  param inout name "elementId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Element</code> whose <code>ID</code> is given by
<code>elementId</code>. If no such element exists, returns
<code>DTM.NULL</code>. Behavior is not defined if more than one element
has this <code>ID</code>. Attributes (including those
with the name \"ID\") are not of type ID unless so defined by DTD/Schema
information available to the DTM implementation.
Implementations that do not know whether attributes are of type ID or
not are expected to return <code>DTM.NULL</code>.

<p>%REVIEW% Presumably IDs are still scoped to a single document,
and this operation searches only within a single document, right?
Wouldn't want collisions between DTMs in the same process.</p>

@param elementId The unique <code>id</code> value for an element.
@return The handle of the matching element.
"
      end

      operation 3920258 "getUnparsedEntityURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The getUnparsedEntityURI function returns the URI of the unparsed
entity with the specified name in the same document as the context
node (see [3.3 Unparsed Entities]). It returns the empty string if
there is no such entity.
<p>
XML processors may choose to use the System Identifier (if one
is provided) to resolve the entity, rather than the URI in the
Public Identifier. The details are dependent on the processor, and
we would have to support some form of plug-in resolver to handle
this properly. Currently, we simply return the System Identifier if
present, and hope that it a usable URI or that our caller can
map it to one.
%REVIEW% Resolve Public Identifiers... or consider changing function name.
<p>
If we find a relative URI
reference, XML expects it to be resolved in terms of the base URI
of the document. The DOM doesn't do that for us, and it isn't
entirely clear whether that should be done here; currently that's
pushed up to a higher level of our application. (Note that DOM Level
1 didn't store the document's base URI.)
%REVIEW% Consider resolving Relative URIs.
<p>
(The DOM's statement that \"An XML processor may choose to
completely expand entities before the structure model is passed
to the DOM\" refers only to parsed entities, not unparsed, and hence
doesn't affect this function.)

@param name A string containing the Entity Name of the unparsed
entity.

@return String containing the URI of the Unparsed Entity, or an
empty string if no such entity exists.
"
      end

      operation 3920386 "supportsPreStripping"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ============== Boolean methods ================

Return true if the xsl:strip-space or xsl:preserve-space was processed
during construction of the document contained in this DTM.

NEEDSDOC ($objectName$) @return
"
      end

      operation 3920514 "isNodeAfter"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "firstNodeHandle" explicit_type "int"
	  param in name "secondNodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Figure out whether nodeHandle2 should be considered as being later
in the document than nodeHandle1, in Document Order as defined
by the XPath model. This may not agree with the ordering defined
by other XML applications.
<p>
There are some cases where ordering isn't defined, and neither are
the results of this function -- though we'll generally return true.
<p>
%REVIEW% Make sure this does the right thing with attribute nodes!!!
<p>
%REVIEW% Consider renaming for clarity. Perhaps isDocumentOrder(a,b)?

@param firstNodeHandle DOM Node to perform position comparison on.
@param secondNodeHandle DOM Node to perform position comparison on.

@return false if secondNode comes before firstNode, otherwise return true.
You can think of this as
<code>(firstNode.documentOrderPosition &lt;= secondNode.documentOrderPosition)</code>.
"
      end

      operation 3920642 "isCharacterElementContentWhitespace"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "2. [element content whitespace] A boolean indicating whether a
text node represents white space appearing within element content
(see [XML], 2.10 \"White Space Handling\").  Note that validating
XML processors are required by XML 1.0 to provide this
information... but that DOM Level 2 did not support it, since it
depends on knowledge of the DTD which DOM2 could not guarantee
would be available.
<p>
If there is no declaration for the containing element, an XML
processor must assume that the whitespace could be meaningful and
return false. If no declaration has been read, but the [all
declarations processed] property of the document information item
is false (so there may be an unread declaration), then the value
of this property is indeterminate for white space characters and
should probably be reported as false. It is always false for text
nodes that contain anything other than (or in addition to) white
space.
<p>
Note too that it always returns false for non-Text nodes.
<p>
%REVIEW% Joe wants to rename this isWhitespaceInElementContent() for clarity

@param nodeHandle the node ID.
@return <code>true</code> if the node definitely represents whitespace in
element content; <code>false</code> otherwise.
"
      end

      operation 3920770 "isDocumentAllDeclarationsProcessed"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "documentHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "   10. [all declarations processed] This property is not strictly speaking
       part of the infoset of the document. Rather it is an indication of
       whether the processor has read the complete DTD. Its value is a
       boolean. If it is false, then certain properties (indicated in their
       descriptions below) may be unknown. If it is true, those properties
       are never unknown.

@param documentHandle A node handle that must identify a document.
@return <code>true</code> if all declarations were processed;
        <code>false</code> otherwise.
"
      end

      operation 3920898 "isAttributeSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "attributeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    5. [specified] A flag indicating whether this attribute was actually
       specified in the start-tag of its element, or was defaulted from the
       DTD (or schema).

@param attributeHandle The attribute handle
@return <code>true</code> if the attribute was specified;
        <code>false</code> if it was defaulted or the handle doesn't
           refer to an attribute node.
"
      end

      operation 3921026 "dispatchCharactersEvents"
	public explicit_return_type "void"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	  param inout name "normalize" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ========== Direct SAX Dispatch, for optimization purposes ========

Directly call the
characters method on the passed ContentHandler for the
string-value of the given node (see http://www.w3.org/TR/xpath#data-model
for the definition of a node's string-value). Multiple calls to the
ContentHandler's characters methods may well occur for a single call to
this method.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.
@param normalize true if the content should be normalized according to
the rules for the XPath
<a href=\"http://www.w3.org/TR/xpath#function-normalize-space\">normalize-space</a>
function.

@throws org.xml.sax.SAXException
"
      end

      operation 3921154 "dispatchToEvents"
	public explicit_return_type "void"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "ch" type class_ref 605954 // ContentHandler
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly create SAX parser events representing the XML content of
a DTM subtree. This is a \"serialize\" operation.

@param nodeHandle The node ID.
@param ch A non-null reference to a ContentHandler.

@throws org.xml.sax.SAXException
"
      end

      operation 3921282 "getNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an DOM node for the given node.

@param nodeHandle The node ID.

@return A node representation of the DTM node.
"
      end

      operation 3921410 "needsTwoThreads"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ==== Construction methods (may not be supported by some implementations!) =====
 %REVIEW% What response occurs if not supported?

@return true iff we're building this model incrementally (eg
we're partnered with a CoroutineParser) and thus require that the
transformation and the parse run simultaneously. Guidance to the
DTMManager.
"
      end

      operation 3921538 "getContentHandler"
	public return_type class_ref 605954 // ContentHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " %REVIEW% Do these appends make any sense, should we support a
 wider set of methods (like the \"append\" methods in the
 current DTMDocumentImpl draft), or should we just support SAX
 listener interfaces?  Should it be a separate interface to
 make that distinction explicit?

Return this DTM's content handler, if it has one.

@return null if this model doesn't respond to SAX events.
"
      end

      operation 3921666 "getLexicalHandler"
	public return_type class_ref 617602 // LexicalHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's lexical handler, if it has one.

%REVIEW% Should this return null if constrution already done/begun?

@return null if this model doesn't respond to lexical SAX events.
"
      end

      operation 3921794 "getEntityResolver"
	public return_type class_ref 619138 // EntityResolver
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's EntityResolver, if it has one.

@return null if this model doesn't respond to SAX entity ref events.
"
      end

      operation 3921922 "getDTDHandler"
	public return_type class_ref 617986 // DTDHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DTDHandler, if it has one.

@return null if this model doesn't respond to SAX dtd events.
"
      end

      operation 3922050 "getErrorHandler"
	public return_type class_ref 618114 // ErrorHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's ErrorHandler, if it has one.

@return null if this model doesn't respond to SAX error events.
"
      end

      operation 3922178 "getDeclHandler"
	public return_type class_ref 617858 // DeclHandler
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this DTM's DeclHandler, if it has one.

@return null if this model doesn't respond to SAX Decl events.
"
      end

      operation 3922306 "appendChild"
	public explicit_return_type "void"
	nparams 3
	  param in name "newChild" explicit_type "int"
	  param inout name "clone" explicit_type "boolean"
	  param inout name "cloneDepth" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a child to \"the end of the document\". Please note that
the node is always cloned in a base DTM, since our basic behavior
is immutable so nodes can't be removed from their previous
location.

<p> %REVIEW%  DTM maintains an insertion cursor which
performs a depth-first tree walk as nodes come in, and this operation
is really equivalent to:
   insertionCursor.appendChild(document.importNode(newChild)))
where the insert point is the last element that was appended (or
the last one popped back to by an end-element operation).</p>

@param newChild Must be a valid new node handle.
@param clone true if the child should be cloned into the document.
@param cloneDepth if the clone argument is true, specifies that the
                  clone should include all it's children.
"
      end

      operation 3922434 "appendTextChild"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a text node child that will be constructed from a string,
to the end of the document. Behavior is otherwise like appendChild().

@param str Non-null reference to a string.
"
      end

      operation 3922562 "getSourceLocatorFor"
	public return_type class_ref 617346 // SourceLocator
	nparams 1
	  param in name "node" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the location of a node in the source document.

@param node an <code>int</code> value
@return a <code>SourceLocator</code> value or null if no location
is available
"
      end

      operation 3922690 "documentRegistration"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "As the DTM is registered with the DTMManager, this method
will be called. This will give the DTM implementation a
chance to initialize any subsystems that are required to
build the DTM
"
      end

      operation 3922818 "documentRelease"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "As documents are released from the DTMManager, the DTM implementation
will be notified of the event. This will allow the DTM implementation
to shutdown any subsystem activity that may of been assoiated with
the active DTM Implementation.
"
      end

      operation 3922946 "migrateTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "manager" type class_ref 619266 // DTMManager
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Migrate a DTM built with an old DTMManager to a new DTMManager.
After the migration, the new DTMManager will treat the DTM as
one that is built by itself.
This is used to support DTM sharing between multiple transformations.
@param manager the DTMManager
"
      end
    end

    class 618882 "DTMAxisTraverser"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class that implements traverses DTMAxisTraverser interface can traverse
a set of nodes, usually as defined by an XPath axis.  It is different from
an iterator, because it does not need to hold state, and, in fact, must not
hold any iteration-based state.  It is meant to be implemented as an inner
class of a DTM, and returned by the getAxisTraverser(final int axis)
function.

<p>A DTMAxisTraverser can probably not traverse a reverse axis in
document order.</p>

<p>Typical usage:</p>
<pre><code>
for(int nodeHandle=myTraverser.first(myContext);
    nodeHandle!=DTM.NULL;
    nodeHandle=myTraverser.next(myContext,nodeHandle))
{ ... processing for node indicated by nodeHandle goes here ... }
</code></pre>

@author Scott Boag
"
      operation 4018178 "first"
	public explicit_return_type "int"
	nparams 1
	  param in name "context" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
that the traversal starts from.
@return the first node in the traversal.
"
      end

      operation 4018306 "first"
	public explicit_return_type "int"
	nparams 2
	  param in name "context" explicit_type "int"
	  param in name "extendedTypeID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "By the nature of the stateless traversal, the context node can not be
returned or the iteration will go into an infinate loop.  So to traverse
an axis, the first function must be used to get the first node.

<p>This method needs to be overloaded only by those axis that process
the self node. <\\p>

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param extendedTypeID The extended type ID that must match.

@return the first node in the traversal.
"
      end

      operation 4018434 "next"
	abstract public explicit_return_type "int"
	nparams 2
	  param in name "context" explicit_type "int"
	  param in name "current" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Traverse to the next node after the current node.

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param current The current node of the traversal. This is the last known
location in the traversal, typically the node-handle returned by the
previous traversal step. For the first traversal step, context
should be set equal to current. Note that in order to test whether
context is in the set, you must use the first() method instead.

@return the next node in the iteration, or DTM.NULL.
@see #first(int)
"
      end

      operation 4018562 "next"
	abstract public explicit_return_type "int"
	nparams 3
	  param in name "context" explicit_type "int"
	  param in name "current" explicit_type "int"
	  param in name "extendedTypeID" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Traverse to the next node after the current node that is matched
by the extended type ID.

@param context The context node of this traversal. This is the point
of origin for the traversal -- its \"root node\" or starting point.
@param current The current node of the traversal. This is the last known
location in the traversal, typically the node-handle returned by the
previous traversal step. For the first traversal step, context
should be set equal to current. Note that in order to test whether
context is in the set, you must use the first() method instead.
@param extendedTypeID The extended type ID that must match.

@return the next node in the iteration, or DTM.NULL.
@see #first(int,int)
"
      end
    end

    class 619266 "DTMManager"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A DTMManager instance can be used to create DTM and
DTMIterator objects, and manage the DTM objects in the system.

<p>The system property that determines which Factory implementation
to create is named \"com.sun.org.apache.xml.internal.utils.DTMFactory\". This
property names a concrete subclass of the DTMFactory abstract
 class. If the property is not defined, a platform default is be used.</p>

<p>An instance of this class <emph>must</emph> be safe to use across
thread instances.  It is expected that a client will create a single instance
of a DTMManager to use across multiple threads.  This will allow sharing
of DTMs across multiple processes.</p>

<p>Note: this class is incomplete right now.  It will be pretty much
modeled after javax.xml.transform.TransformerFactory in terms of its
factory support.</p>

<p>State: In progress!!</p>
"
      classrelation 1732226 // m_xsf (<unidirectional association>)
	relation 1732226 --->
	  a role_name "m_xsf" init_value " null" protected
	    comment "
Factory for creating XMLString objects.
 %TBD% Make this set by the caller.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1732226 // m_xsf (<unidirectional association>)
	  b parent class_ref 626946 // XMLStringFactory
      end

      attribute 872322 "_useServicesMechanism"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 4055170 "DTMManager"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor is protected on purpose.
"
      end

      operation 4055298 "getXMLStringFactory"
	public return_type class_ref 626946 // XMLStringFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the XMLStringFactory used for the DTMs.


@return a valid XMLStringFactory object, or null if it hasn't been set yet.
"
      end

      operation 4055426 "setXMLStringFactory"
	public explicit_return_type "void"
	nparams 1
	  param inout name "xsf" type class_ref 626946 // XMLStringFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the XMLStringFactory used for the DTMs.


@param xsf a valid XMLStringFactory object, should not be null.
"
      end

      operation 4055554 "newInstance"
	class_operation public return_type class_ref 619266 // DTMManager
	nparams 1
	  param inout name "xsf" type class_ref 626946 // XMLStringFactory
	nexceptions 1
	  exception class_ref 635394 // DTMException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain a new instance of a <code>DTMManager</code>.
This static method creates a new factory instance
using the default <code>DTMManager</code> implementation, which is
<code>com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault</code>.
</li>
</ul>

Once an application has obtained a reference to a <code>
DTMManager</code> it can use the factory to configure
and obtain parser instances.

@return new DTMManager instance, never null.

@throws DTMException
if the implementation is not available or cannot be instantiated.
"
      end

      operation 4055682 "getDTM"
	abstract public return_type class_ref 618754 // DTM
	nparams 5
	  param inout name "source" type class_ref 627202 // Source
	  param inout name "unique" explicit_type "boolean"
	  param inout name "whiteSpaceFilter" type class_ref 620162 // DTMWSFilter
	  param inout name "incremental" explicit_type "boolean"
	  param inout name "doIndexing" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an instance of a DTM, loaded with the content from the
specified source.  If the unique flag is true, a new instance will
always be returned.  Otherwise it is up to the DTMManager to return a
new instance or an instance that it already created and may be being used
by someone else.

(More parameters may eventually need to be added for error handling
and entity resolution, and to better control selection of implementations.)

@param source the specification of the source object, which may be null,
              in which case it is assumed that node construction will take
              by some other means.
@param unique true if the returned DTM must be unique, probably because it
is going to be mutated.
@param whiteSpaceFilter Enables filtering of whitespace nodes, and may
                        be null.
@param incremental true if the DTM should be built incrementally, if
                   possible.
@param doIndexing true if the caller considers it worth it to use
                  indexing schemes.

@return a non-null DTM reference.
"
      end

      operation 4055810 "getDTM"
	abstract public return_type class_ref 618754 // DTM
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the instance of DTM that \"owns\" a node handle.

@param nodeHandle the nodeHandle.

@return a non-null DTM reference.
"
      end

      operation 4055938 "getDTMHandleFromNode"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "node" type class_ref 317570 // Node
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a W3C DOM node, try and return a DTM handle.
Note: calling this may be non-optimal.

@param node Non-null reference to a DOM node.

@return a valid DTM handle.
"
      end

      operation 4056066 "createDocumentFragment"
	abstract public return_type class_ref 618754 // DTM
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DTM representing an empty <code>DocumentFragment</code> object.
@return a non-null DTM reference.
"
      end

      operation 4056194 "release"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "dtm" type class_ref 618754 // DTM
	  param inout name "shouldHardDelete" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Release a DTM either to a lru pool, or completely remove reference.
DTMs without system IDs are always hard deleted.
State: experimental.

@param dtm The DTM to be released.
@param shouldHardDelete True if the DTM should be removed no matter what.
@return true if the DTM was removed, false if it was put back in a lru pool.
"
      end

      operation 4056322 "createDTMIterator"
	abstract public return_type class_ref 635522 // DTMIterator
	nparams 2
	  param inout name "xpathCompiler" type class_ref 129538 // Object
	  param in name "pos" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>DTMIterator</code> based on an XPath
<a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or
a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.

@param xpathCompiler ??? Somehow we need to pass in a subpart of the
expression.  I hate to do this with strings, since the larger expression
has already been parsed.

@param pos The position in the expression.
@return The newly created <code>DTMIterator</code>.
"
      end

      operation 4056450 "createDTMIterator"
	abstract public return_type class_ref 635522 // DTMIterator
	nparams 2
	  param inout name "xpathString" type class_ref 128130 // String
	  param inout name "presolver" type class_ref 635650 // PrefixResolver
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>DTMIterator</code> based on an XPath
<a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or
a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.

@param xpathString Must be a valid string expressing a
<a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or
a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.

@param presolver An object that can resolve prefixes to namespace URLs.

@return The newly created <code>DTMIterator</code>.
"
      end

      operation 4056578 "createDTMIterator"
	abstract public return_type class_ref 635522 // DTMIterator
	nparams 3
	  param in name "whatToShow" explicit_type "int"
	  param inout name "filter" type class_ref 623362 // DTMFilter
	  param inout name "entityReferenceExpansion" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>DTMIterator</code> based only on a whatToShow
and a DTMFilter.  The traversal semantics are defined as the
descendant access.
<p>
Note that DTMIterators may not be an exact match to DOM
NodeIterators. They are initialized and used in much the same way
as a NodeIterator, but their response to document mutation is not
currently defined.

@param whatToShow This flag specifies which node types may appear in
  the logical view of the tree presented by the iterator. See the
  description of <code>NodeFilter</code> for the set of possible
  <code>SHOW_</code> values.These flags can be combined using
  <code>OR</code>.
@param filter The <code>NodeFilter</code> to be used with this
  <code>DTMFilter</code>, or <code>null</code> to indicate no filter.
@param entityReferenceExpansion The value of this flag determines
  whether entity reference nodes are expanded.

@return The newly created <code>DTMIterator</code>.
"
      end

      operation 4056706 "createDTMIterator"
	abstract public return_type class_ref 635522 // DTMIterator
	nparams 1
	  param in name "node" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>DTMIterator</code> that holds exactly one node.

@param node The node handle that the DTMIterator will iterate to.

@return The newly created <code>DTMIterator</code>.
"
      end

      attribute 872450 "m_incremental"
	public explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flag indicating whether an incremental transform is desired 
"
      end

      attribute 872578 "m_source_location"
	public explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag set by FEATURE_SOURCE_LOCATION.
This feature specifies whether the transformation phase should
keep track of line and column numbers for the input source
document.

"
      end

      operation 4056834 "getIncremental"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a flag indicating whether an incremental transform is desired
@return incremental boolean.

"
      end

      operation 4056962 "setIncremental"
	public explicit_return_type "void"
	nparams 1
	  param inout name "incremental" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a flag indicating whether an incremental transform is desired
This flag should have the same value as the FEATURE_INCREMENTAL feature
which is set by the TransformerFactory.setAttribut() method before a
DTMManager is created
@param incremental boolean to use to set m_incremental.

"
      end

      operation 4057090 "getSource_location"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a flag indicating whether the transformation phase should
keep track of line and column numbers for the input source
document.
@return source location boolean

"
      end

      operation 4057218 "setSource_location"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sourceLocation" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a flag indicating whether the transformation phase should
keep track of line and column numbers for the input source
document.
This flag should have the same value as the FEATURE_SOURCE_LOCATION feature
which is set by the TransformerFactory.setAttribut() method before a
DTMManager is created
@param sourceLocation boolean to use to set m_source_location
"
      end

      operation 4057346 "useServicesMechnism"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the state of the services mechanism feature.
"
      end

      operation 4057474 "setServicesMechnism"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the state of the services mechanism feature.
"
      end

      attribute 872706 "IDENT_DTM_NODE_BITS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " -------------------- private methods --------------------
 This value, set at compile time, controls how many bits of the
DTM node identifier numbers are used to identify a node within a
document, and thus sets the maximum number of nodes per
document. The remaining bits are used to identify the DTM
document which contains this node.

If you change IDENT_DTM_NODE_BITS, be sure to rebuild _ALL_ the
files which use it... including the IDKey testcases.

(FuncGenerateKey currently uses the node identifier directly and
thus is affected when this changes. The IDKEY results will still be
_correct_ (presuming no other breakage), but simple equality
comparison against the previous \"golden\" files will probably
complain.)

"
      end

      attribute 872834 "IDENT_NODE_DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " (1<<IDENT_DTM_NODE_BITS)-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " When this bitmask is ANDed with a DTM node handle number, the result
is the low bits of the node's index number within that DTM. To obtain
the high bits, add the DTM ID portion's offset as assigned in the DTM
Manager.

"
      end

      attribute 872962 "IDENT_DTM_DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " ~IDENT_NODE_DEFAULT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " When this bitmask is ANDed with a DTM node handle number, the result
is the DTM's document identity number.

"
      end

      attribute 873090 "IDENT_MAX_DTMS"
	class_attribute const_attribute public explicit_type "int"
	init_value " (IDENT_DTM_DEFAULT >>> IDENT_DTM_NODE_BITS) + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This is the maximum number of DTMs available.  The highest DTM is
one less than this.

"
      end

      operation 4057602 "getDTMIdentity"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "dtm" type class_ref 618754 // DTM
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "%TBD% Doc

NEEDSDOC @param dtm

NEEDSDOC ($objectName$) @return
"
      end

      operation 4057730 "getDTMIdentityMask"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "%TBD% Doc

NEEDSDOC ($objectName$) @return
"
      end

      operation 4057858 "getNodeIdentityMask"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "%TBD% Doc

NEEDSDOC ($objectName$) @return
"
      end
    end

    class 620162 "DTMWSFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is meant to be implemented by a client of the DTM, and allows
stripping of whitespace nodes.
"
      attribute 856450 "NOTSTRIP"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Do not strip whitespace child nodes of this element.

"
      end

      attribute 856578 "STRIP"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Strip whitespace child nodes of this element.

"
      end

      attribute 856706 "INHERIT"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Inherit whitespace stripping behavior of the parent node.

"
      end

      operation 3976578 "getShouldStripSpace"
	public explicit_return_type "short"
	nparams 2
	  param in name "elementHandle" explicit_type "int"
	  param inout name "dtm" type class_ref 618754 // DTM
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test whether whitespace-only text nodes are visible in the logical
view of <code>DTM</code>. Normally, this function
will be called by the implementation of <code>DTM</code>;
it is not normally called directly from
user code.

@param elementHandle int Handle of the element.
@return one of NOTSTRIP, STRIP, or INHERIT.
"
      end
    end

    class 623362 "DTMFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple filter for doing node tests.  Note the semantics of this are
somewhat different that the DOM's NodeFilter.
"
      attribute 1149954 "SHOW_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFFFFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants for whatToShow.  These are used to set the node type that will
 be traversed. These values may be ORed together before being passed to
 the DTMIterator.

Show all <code>Nodes</code>.

"
      end

      attribute 1150082 "SHOW_ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>Element</code> nodes.

"
      end

      attribute 1150210 "SHOW_ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>Attr</code> nodes. This is meaningful only when creating an
iterator or tree-walker with an attribute node as its
<code>root</code>; in this case, it means that the attribute node
will appear in the first position of the iteration or traversal.
Since attributes are never children of other nodes, they do not
appear when traversing over the main document tree.

"
      end

      attribute 1150338 "SHOW_TEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>Text</code> nodes.

"
      end

      attribute 1150466 "SHOW_CDATA_SECTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>CDATASection</code> nodes.

"
      end

      attribute 1150594 "SHOW_ENTITY_REFERENCE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000010"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>EntityReference</code> nodes. Note that if Entity References
have been fully expanded while the tree was being constructed, these
nodes will not appear and this mask has no effect.

"
      end

      attribute 1150722 "SHOW_ENTITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000020"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>Entity</code> nodes. This is meaningful only when creating
an iterator or tree-walker with an<code> Entity</code> node as its
<code>root</code>; in this case, it means that the <code>Entity</code>
 node will appear in the first position of the traversal. Since
entities are not part of the document tree, they do not appear when
traversing over the main document tree.

"
      end

      attribute 1150850 "SHOW_PROCESSING_INSTRUCTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000040"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>ProcessingInstruction</code> nodes.

"
      end

      attribute 1150978 "SHOW_COMMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>Comment</code> nodes.

"
      end

      attribute 1151106 "SHOW_DOCUMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>Document</code> nodes. (Of course, as with Attributes
and such, this is meaningful only when the iteration root is the
Document itself, since Document has no parent.)

"
      end

      attribute 1151234 "SHOW_DOCUMENT_TYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>DocumentType</code> nodes.

"
      end

      attribute 1151362 "SHOW_DOCUMENT_FRAGMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>DocumentFragment</code> nodes. (Of course, as with
Attributes and such, this is meaningful only when the iteration
root is the Document itself, since DocumentFragment has no parent.)

"
      end

      attribute 1151490 "SHOW_NOTATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000800"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Show <code>Notation</code> nodes. This is meaningful only when creating
an iterator or tree-walker with a <code>Notation</code> node as its
<code>root</code>; in this case, it means that the
<code>Notation</code> node will appear in the first position of the
traversal. Since notations are not part of the document tree, they do
not appear when traversing over the main document tree.

"
      end

      attribute 1151618 "SHOW_NAMESPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00001000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
This bit instructs the iterator to show namespace nodes, which
are modeled by DTM but not by the DOM.  Make sure this does not
conflict with {@link org.w3c.dom.traversal.NodeFilter}.
<p>
%REVIEW% Might be safer to start from higher bits and work down,
to leave room for the DOM to expand its set of constants... Or,
possibly, to create a DTM-specific field for these additional bits.

"
      end

      attribute 1151746 "SHOW_BYFUNCTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00010000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Special bit for filters implementing match patterns starting with
a function.  Make sure this does not conflict with
{@link org.w3c.dom.traversal.NodeFilter}.
<p>
%REVIEW% Might be safer to start from higher bits and work down,
to leave room for the DOM to expand its set of constants... Or,
possibly, to create a DTM-specific field for these additional bits.

"
      end

      operation 5179394 "acceptNode"
	public explicit_return_type "short"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param in name "whatToShow" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test whether a specified node is visible in the logical view of a
<code>DTMIterator</code>. Normally, this function
will be called by the implementation of <code>DTMIterator</code>;
it is not normally called directly from
user code.

@param nodeHandle int Handle of the node.
@param whatToShow one of SHOW_XXX values.
@return one of FILTER_ACCEPT, FILTER_REJECT, or FILTER_SKIP.
"
      end

      operation 5179522 "acceptNode"
	public explicit_return_type "short"
	nparams 3
	  param in name "nodeHandle" explicit_type "int"
	  param in name "whatToShow" explicit_type "int"
	  param in name "expandedName" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test whether a specified node is visible in the logical view of a
<code>DTMIterator</code>. Normally, this function
will be called by the implementation of <code>DTMIterator</code>;
it is not normally called directly from
user code.
<p>
TODO: Should this be setNameMatch(expandedName) followed by accept()?
Or will we really be testing a different name at every invocation?

<p>%REVIEW% Under what circumstances will this be used? The cases
I've considered are just as easy and just about as efficient if
the name test is performed in the DTMIterator... -- Joe</p>

<p>%REVIEW% Should that 0xFFFF have a mnemonic assigned to it?
Also: This representation is assuming the expanded name is indeed
split into high/low 16-bit halfwords. If we ever change the
balance between namespace and localname bits (eg because we
decide there are many more localnames than namespaces, which is
fairly likely), this is going to break. It might be safer to
encapsulate the details with a makeExpandedName method and make
that responsible for setting up the wildcard version as well.</p>

@param nodeHandle int Handle of the node.
@param whatToShow one of SHOW_XXX values.
@param expandedName a value defining the exanded name as defined in
                    the DTM interface.  Wild cards will be defined
                    by 0xFFFF in the namespace and/or localname
                    portion of the expandedName.
@return one of FILTER_ACCEPT, FILTER_REJECT, or FILTER_SKIP.  "
      end
    end

    class 635394 "DTMException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class specifies an exceptional condition that occurred
in the DTM module.
"
      classrelation 2233730 // <generalisation>
	relation 2233730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2233730 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1149826 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -775576419181334734L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5179010 "DTMException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new DTMException.

@param message The error or warning message.
"
      end

      operation 5179138 "DTMException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new DTMException wrapping an existing exception.

@param e The exception to be wrapped.
"
      end

      operation 5179266 "DTMException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "e" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wrap an existing exception in a DTMException.

<p>This is used for throwing processor exceptions before
the processing has started.</p>

@param message The error or warning message, or null to
               use the message from the embedded exception.
@param e Any exception
"
      end
    end

    class 635522 "DTMIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
<code>DTMIterators</code> are used to step through a (possibly
filtered) set of nodes.  Their API is modeled largely after the DOM
NodeIterator.

<p>A DTMIterator is a somewhat unusual type of iterator, in that it
can serve both single node iteration and random access.</p>

<p>The DTMIterator's traversal semantics, i.e. how it walks the tree,
are specified when it is created, possibly and probably by an XPath
<a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or
a <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.</p>

<p>A DTMIterator is meant to be created once as a master static object, and
then cloned many times for runtime use.  Or the master object itself may
be used for simpler use cases.</p>

<p>At this time, we do not expect DTMIterator to emulate
NodeIterator's \"maintain relative position\" semantics under
document mutation.  It's likely to respond more like the
TreeWalker's \"current node\" semantics. However, since the base DTM
is immutable, this issue currently makes no practical
difference.</p>

<p>State: In progress!!</p> "
      attribute 1151874 "FILTER_ACCEPT"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants returned by acceptNode, borrowed from the DOM Traversal chapter
 %REVIEW% Should we explicitly initialize them from, eg,
 org.w3c.dom.traversal.NodeFilter.FILTER_ACCEPT?

Accept the node.

"
      end

      attribute 1152002 "FILTER_REJECT"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Reject the node. Same behavior as FILTER_SKIP. (In the DOM these
differ when applied to a TreeWalker but have the same result when
applied to a NodeIterator).

"
      end

      attribute 1152130 "FILTER_SKIP"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Skip this single node.

"
      end

      operation 5179650 "getDTM"
	public return_type class_ref 618754 // DTM
	nparams 1
	  param in name "nodeHandle" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an instance of a DTM that \"owns\" a node handle.  Since a node
iterator may be passed without a DTMManager, this allows the
caller to easily get the DTM using just the iterator.

@param nodeHandle the nodeHandle.

@return a non-null DTM reference.
"
      end

      operation 5179778 "getDTMManager"
	public return_type class_ref 619266 // DTMManager
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an instance of the DTMManager.  Since a node
iterator may be passed without a DTMManager, this allows the
caller to easily get the DTMManager using just the iterator.

@return a non-null DTMManager reference.
"
      end

      operation 5179906 "getRoot"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The root node of the <code>DTMIterator</code>, as specified when it
was created.  Note the root node is not the root node of the
document tree, but the context node from where the iteration
begins and ends.

@return nodeHandle int Handle of the context node.
"
      end

      operation 5180034 "setRoot"
	public explicit_return_type "void"
	nparams 2
	  param in name "nodeHandle" explicit_type "int"
	  param inout name "environment" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the root node of the <code>DTMIterator</code>, overriding
the value specified when it was created.  Note the root node is
not the root node of the document tree, but the context node from
where the iteration begins.

@param nodeHandle int Handle of the context node.
@param environment The environment object.
The environment in which this iterator operates, which should provide:
<ul>
<li>a node (the context node... same value as \"root\" defined below) </li>
<li>a pair of non-zero positive integers (the context position and the context size) </li>
<li>a set of variable bindings </li>
<li>a function library </li>
<li>the set of namespace declarations in scope for the expression.</li>
<ul>

<p>At this time the exact implementation of this environment is application
dependent.  Probably a proper interface will be created fairly soon.</p>

"
      end

      operation 5180162 "reset"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the iterator to the start. After resetting, the next node returned
will be the root node -- or, if that's filtered out, the first node
within the root's subtree which is _not_ skipped by the filters.
"
      end

      operation 5180290 "getWhatToShow"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This attribute determines which node types are presented via the
iterator. The available set of constants is defined above.
Nodes not accepted by
<code>whatToShow</code> will be skipped, but their children may still
be considered.

@return one of the SHOW_XXX constants, or several ORed together.
"
      end

      operation 5180418 "getExpandEntityReferences"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The value of this flag determines whether the children of entity
reference nodes are visible to the iterator. If false, they  and
their descendants will be rejected. Note that this rejection takes
precedence over <code>whatToShow</code> and the filter. </p>

<p> To produce a view of the document that has entity references
expanded and does not expose the entity reference node itself, use
the <code>whatToShow</code> flags to hide the entity reference node
and set <code>expandEntityReferences</code> to true when creating the
iterator. To produce a view of the document that has entity reference
nodes but no entity expansion, use the <code>whatToShow</code> flags
to show the entity reference node and set
<code>expandEntityReferences</code> to false.</p>

<p>NOTE: In Xalan's use of DTM we will generally have fully expanded
entity references when the document tree was built, and thus this
flag will have no effect.</p>

@return true if entity references will be expanded.  "
      end

      operation 5180546 "nextNode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next node in the set and advances the position of the
iterator in the set. After a <code>DTMIterator</code> has setRoot called,
the first call to <code>nextNode()</code> returns that root or (if it
is rejected by the filters) the first node within its subtree which is
not filtered out.
@return The next node handle in the set being iterated over, or
 <code>DTM.NULL</code> if there are no more members in that set.
"
      end

      operation 5180674 "previousNode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the previous node in the set and moves the position of the
<code>DTMIterator</code> backwards in the set.
@return The previous node handle in the set being iterated over,
  or <code>DTM.NULL</code> if there are no more members in that set.
"
      end

      operation 5180802 "detach"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Detaches the <code>DTMIterator</code> from the set which it iterated
over, releasing any computational resources and placing the iterator
in the INVALID state. After <code>detach</code> has been invoked,
calls to <code>nextNode</code> or <code>previousNode</code> will
raise a runtime exception.
"
      end

      operation 5180930 "allowDetachToRelease"
	public explicit_return_type "void"
	nparams 1
	  param inout name "allowRelease" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify if it's OK for detach to release the iterator for reuse.

@param allowRelease true if it is OK for detach to release this iterator
for pooling.
"
      end

      operation 5181058 "getCurrentNode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current node in the iterator. Note that this differs from
the DOM's NodeIterator, where the current position lies between two
nodes (as part of the maintain-relative-position semantic).

@return The current node handle, or -1.
"
      end

      operation 5181186 "isFresh"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells if this NodeSetDTM is \"fresh\", in other words, if
the first nextNode() that is called will return the
first node in the set.

@return true if the iteration of this list has not yet begun.
"
      end

      operation 5181314 "setShouldCacheNodes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "========= Random Access ==========

If setShouldCacheNodes(true) is called, then nodes will
be cached, enabling random access, and giving the ability to do
sorts and the like.  They are not cached by default.

%REVIEW% Shouldn't the other random-access methods throw an exception
if they're called on a DTMIterator with this flag set false?

@param b true if the nodes should be cached.
"
      end

      operation 5181442 "isMutable"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells if this iterator can have nodes added to it or set via
the <code>setItem(int node, int index)</code> method.

@return True if the nodelist can be mutated.
"
      end

      operation 5181570 "getCurrentPos"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the current position within the cached list, which is one
less than the next nextNode() call will retrieve.  i.e. if you
call getCurrentPos() and the return is 0, the next fetch will
take place at index 1.

@return The position of the iteration.
"
      end

      operation 5181698 "runTo"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If an index is requested, NodeSetDTM will call this method
to run the iterator to the index.  By default this sets
m_next to the index.  If the index argument is -1, this
signals that the iterator should be run to the end and
completely fill the cache.

@param index The index to run to, or -1 if the iterator should be run
             to the end.
"
      end

      operation 5181826 "setCurrentPos"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the current position in the node set.

@param i Must be a valid index.
"
      end

      operation 5181954 "item"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>node handle</code> of an item in the collection. If
<code>index</code> is greater than or equal to the number of nodes in
the list, this returns <code>null</code>.

@param index of the item.
@return The node handle at the <code>index</code>th position in the
  <code>DTMIterator</code>, or <code>-1</code> if that is not a valid
  index.
"
      end

      operation 5182082 "setItem"
	public explicit_return_type "void"
	nparams 2
	  param in name "node" explicit_type "int"
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the node at the specified index of this vector to be the
specified node. The previous component at that position is discarded.

<p>The index must be a value greater than or equal to 0 and less
than the current size of the vector.
The iterator must be in cached mode.</p>

<p>Meant to be used for sorted iterators.</p>

@param node Node to set
@param index Index of where to set the node
"
      end

      operation 5182210 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of nodes in the list. The range of valid child node indices
is 0 to <code>length-1</code> inclusive. Note that this requires running
the iterator to completion, and presumably filling the cache.

@return The number of nodes in the list.
"
      end

      operation 5182338 "cloneWithReset"
	public return_type class_ref 635522 // DTMIterator
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=========== Cloning operations. ============

Get a cloned Iterator that is reset to the start of the iteration.

@return A clone of this iteration that has been reset.

@throws CloneNotSupportedException
"
      end

      operation 5182466 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a clone of this iterator, but don't reset the iteration in the
process, so that it may be used from the current position.

@return A clone of this object.

@throws CloneNotSupportedException
"
      end

      operation 5182594 "isDocOrdered"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if all the nodes in the iteration well be returned in document
order.

@return true if all the nodes in the iteration well be returned in document
order.
"
      end

      operation 5182722 "getAxis"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the axis being iterated, if it is known.

@return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple
types.
"
      end
    end

    class 741762 "Axis"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Specifies values related to XPath Axes.
<p>The ancestor, descendant, following, preceding and self axes partition a
document (ignoring attribute and namespace nodes): they do not overlap
and together they contain all the nodes in the document.</p>

"
      attribute 1144450 "ANCESTOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The ancestor axis contains the ancestors of the context node;
 the ancestors of the context node consist of the parent of context
 node and the parent's parent and so on; thus, the ancestor axis will
 always include the root node, unless the context node is the root node.

"
      end

      attribute 1144578 "ANCESTORORSELF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "the ancestor-or-self axis contains the context node and the ancestors of
 the context node; thus, the ancestor axis will always include the
 root node.

"
      end

      attribute 1144706 "ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "the attribute axis contains the attributes of the context node; the axis
 will be empty unless the context node is an element.

"
      end

      attribute 1144834 "CHILD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The child axis contains the children of the context node. 
"
      end

      attribute 1144962 "DESCENDANT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The descendant axis contains the descendants of the context node;
 a descendant is a child or a child of a child and so on; thus the
 descendant axis never contains attribute or namespace nodes.

"
      end

      attribute 1145090 "DESCENDANTORSELF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The descendant-or-self axis contains the context node and the
 descendants of the context node.

"
      end

      attribute 1145218 "FOLLOWING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "the following axis contains all nodes in the same document as the
 context node that are after the context node in document order, excluding
 any descendants and excluding attribute nodes and namespace nodes.

"
      end

      attribute 1145346 "FOLLOWINGSIBLING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The following-sibling axis contains all the following siblings of the
 context node; if the context node is an attribute node or namespace node,
 the following-sibling axis is empty.

"
      end

      attribute 1145474 "NAMESPACEDECLS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The namespace axis contains the namespace nodes of the context node; the
 axis will be empty unless the context node is an element.

"
      end

      attribute 1145602 "NAMESPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The namespace axis contains the namespace nodes of the context node; the
 axis will be empty unless the context node is an element.

"
      end

      attribute 1145730 "PARENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The parent axis contains the parent of the context node,
 if there is one.

"
      end

      attribute 1145858 "PRECEDING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The preceding axis contains all nodes in the same document as the context
 node that are before the context node in document order, excluding any
 ancestors and excluding attribute nodes and namespace nodes

"
      end

      attribute 1145986 "PRECEDINGSIBLING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The preceding-sibling axis contains all the preceding siblings of the
 context node; if the context node is an attribute node or namespace node,
 the preceding-sibling axis is empty.

"
      end

      attribute 1146114 "SELF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The self axis contains just the context node itself. 
"
      end

      attribute 1146242 "ALLFROMNODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A non-xpath axis, traversing the subtree including the subtree
 root, descendants, attributes, and namespace node decls.

"
      end

      attribute 1146370 "PRECEDINGANDANCESTOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A non-xpath axis, traversing the the preceding and the ancestor nodes,
needed for inverseing select patterns to match patterns.

"
      end

      attribute 1146498 "ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ===========================================
 All axis past this are absolute.

A non-xpath axis, returns all nodes in the tree from and including the
root.

"
      end

      attribute 1146626 "DESCENDANTSFROMROOT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A non-xpath axis, returns all nodes that aren't namespaces or attributes,
from and including the root.

"
      end

      attribute 1146754 "DESCENDANTSORSELFFROMROOT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A non-xpath axis, returns all nodes that aren't namespaces or attributes,
from and including the root.

"
      end

      attribute 1146882 "ROOT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A non-xpath axis, returns root only.

"
      end

      attribute 1147010 "FILTEREDLIST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A non-xpath axis, for functions.

"
      end

      attribute 1147138 "isReverse"
	class_attribute const_attribute private explicit_type "boolean"
	multiplicity "[]"
	init_value " {
      true,  // ancestor
      true,  // ancestor-or-self
      false, // attribute
      false, // child
      false, // descendant
      false, // descendant-or-self
      false, // following
      false, // following-sibling
      false, // namespace
      false, // namespace-declarations
      false, // parent (one node, has no order)
      true,  // preceding
      true,  // preceding-sibling
      false  // self (one node, has no order)
  }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A table to identify whether an axis is a reverse axis;

"
      end

      classrelation 2233346 // names (<unidirectional association>)
	relation 2233346 --->
	  a role_name "names" multiplicity "[]" init_value "
    {
      \"ancestor\",  // 0
      \"ancestor-or-self\",  // 1
      \"attribute\",  // 2
      \"child\",  // 3
      \"descendant\",  // 4
      \"descendant-or-self\",  // 5
      \"following\",  // 6
      \"following-sibling\",  // 7
      \"namespace-decls\",  // 8
      \"namespace\",  // 9
      \"parent\",  // 10
      \"preceding\",  // 11
      \"preceding-sibling\",  // 12
      \"self\",  // 13
      \"all-from-node\",  // 14
      \"preceding-and-ancestor\",  // 15
      \"all\",  // 16
      \"descendants-from-root\",  // 17
      \"descendants-or-self-from-root\",  // 18
      \"root\",  // 19
      \"filtered-list\"  // 20
    }" class_relation const_relation private
	    comment " The names of the axes for diagnostic purposes. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2233346 // names (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 5178242 "isReverse"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "axis" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5178370 "getNames"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 5178498 "getNamesLength"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 741890 "DTMDOMException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple implementation of DOMException.

%REVIEW% Several classes were implementing this internally;
it makes more sense to have one shared version.
@xsl.usage internal
"
      classrelation 2233602 // <generalisation>
	relation 2233602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2233602 // <generalisation>
	  b parent class_ref 646658 // DOMException
      end

      attribute 1149698 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1895654266613192414L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 5178754 "DTMDOMException"
	public explicit_return_type ""
	nparams 2
	  param in name "code" explicit_type "short"
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a DOM/DTM exception.

@param code
@param message
"
      end

      operation 5178882 "DTMDOMException"
	public explicit_return_type ""
	nparams 1
	  param in name "code" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor DTMDOMException


@param code
"
      end
    end
  end

  package_ref 165250 // ref

  deploymentview 151810 "dtm"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 429698 "DTMAxisIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 590082 // DTMAxisIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMAxisIterator.java,v 1.2.4.1 2005/09/15 08:14:52 suresh_emailid Exp $
"
    end

    artifact 431490 "DTM"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.SourceLocator;
import com.sun.org.apache.xml.internal.utils.XMLString;
${definition}"
      associated_elems
	class_ref 618754 // DTM
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTM.java,v 1.2.4.1 2005/09/15 08:14:51 suresh_emailid Exp $
"
    end

    artifact 433538 "DTMWSFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 620162 // DTMWSFilter
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMWSFilter.java,v 1.2.4.1 2005/09/15 08:14:55 suresh_emailid Exp $
"
    end

    artifact 436098 "DTMAxisTraverser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 618882 // DTMAxisTraverser
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMAxisTraverser.java,v 1.2.4.1 2005/09/15 08:14:52 suresh_emailid Exp $
"
    end

    artifact 437506 "DTMManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.org.apache.xml.internal.utils.PrefixResolver;
import com.sun.org.apache.xml.internal.utils.XMLStringFactory;
${definition}"
      associated_elems
	class_ref 619266 // DTMManager
      end
      comment "Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 520322 "Axis"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 741762 // Axis
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: Axis.java,v 1.2.4.1 2005/09/15 08:14:51 suresh_emailid Exp $
"
    end

    artifact 520578 "DTMDOMException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 741890 // DTMDOMException
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMDOMException.java,v 1.2.4.1 2005/09/15 08:14:52 suresh_emailid Exp $
"
    end

    artifact 520706 "DTMException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 635394 // DTMException
      end
      comment "Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.


Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 520834 "DTMFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 623362 // DTMFilter
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMFilter.java,v 1.2.4.1 2005/09/15 08:14:53 suresh_emailid Exp $
"
    end

    artifact 520962 "DTMIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 635522 // DTMIterator
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: DTMIterator.java,v 1.2.4.1 2005/09/15 08:14:54 suresh_emailid Exp $
"
    end
  end
end
