class PBQSpliterator
!!!9209986.java!!!	PBQSpliterator(inout queue : PriorityBlockingQueue, inout array : Object [[]], in index : int, in fence : int)
            this.queue = queue;
            this.array = array;
            this.index = index;
            this.fence = fence;
!!!9210114.java!!!	getFence() : int
            int hi;
            if ((hi = fence) < 0)
                hi = fence = (array = queue.toArray()).length;
            return hi;
!!!9210242.java!!!	trySplit() : Spliterator
            int hi = getFence(), lo = index, mid = (lo + hi) >>> 1;
            return (lo >= mid) ? null :
                new PBQSpliterator<E>(queue, array, lo, index = mid);
!!!9210370.java!!!	forEachRemaining(inout action : Consumer) : void
            Object[] a; int i, hi; // hoist accesses and checks from loop
            if (action == null)
                throw new NullPointerException();
            if ((a = array) == null)
                fence = (a = queue.toArray()).length;
            if ((hi = fence) <= a.length &&
                (i = index) >= 0 && i < (index = hi)) {
                do { action.accept((E)a[i]); } while (++i < hi);
            }
!!!9210498.java!!!	tryAdvance(inout action : Consumer) : boolean
            if (action == null)
                throw new NullPointerException();
            if (getFence() > index && index >= 0) {
                @SuppressWarnings("unchecked") E e = (E) array[index++];
                action.accept(e);
                return true;
            }
            return false;
!!!9210626.java!!!	estimateSize() : long
 return (long)(getFence() - index);
!!!9210754.java!!!	characteristics() : int
            return Spliterator.NONNULL | Spliterator.SIZED | Spliterator.SUBSIZED;
