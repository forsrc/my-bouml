class XStringForFSB
!!!5940098.java!!!	XStringForFSB(inout val : FastStringBuffer, in start : int, in length : int)

    super(val);

    m_start = start;
    m_length = length;

    if (null == val)
      throw new IllegalArgumentException(
        XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL, null));
!!!5940226.java!!!	XStringForFSB(inout val : String)

    super(val);

    throw new IllegalArgumentException(
      XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FSB_CANNOT_TAKE_STRING, null)); // "XStringForFSB can not take a string for an argument!");
!!!5940354.java!!!	fsb() : FastStringBuffer
    return ((FastStringBuffer) m_obj);
!!!5940482.java!!!	appendToFsb(inout fsb : FastStringBuffer) : void
    // %OPT% !!! FSB has to be updated to take partial fsb's for append.
    fsb.append(str());
!!!5940610.java!!!	hasString() : boolean
    return (null != m_strCache);
!!!5940738.java!!!	object() : Object
    return str();
!!!5940866.java!!!	str() : String

    if (null == m_strCache)
    {
      m_strCache = fsb().getString(m_start, m_length);

//      strCount++;
//
//      RuntimeException e = new RuntimeException("Bad!  Bad!");
//      java.io.CharArrayWriter writer = new java.io.CharArrayWriter();
//      java.io.PrintWriter pw = new java.io.PrintWriter(writer);
//
//      e.printStackTrace(pw);
//
//      String str = writer.toString();
//
//      str = str.substring(0, 600);
//
//      if (null == xtable.get(str))
//      {
//        xtable.put(str, str);
//        System.out.println(str);
//      }
//      System.out.println("strCount: " + strCount);

//      throw e;
//      e.printStackTrace();
      // System.exit(-1);
    }

    return m_strCache;
!!!5940994.java!!!	dispatchCharactersEvents(inout ch : ContentHandler) : void
    fsb().sendSAXcharacters(ch, m_start, m_length);
!!!5941122.java!!!	dispatchAsComment(inout lh : LexicalHandler) : void
    fsb().sendSAXComment(lh, m_start, m_length);
!!!5941250.java!!!	length() : int
    return m_length;
!!!5941378.java!!!	charAt(in index : int) : char
    return fsb().charAt(m_start + index);
!!!5941506.java!!!	getChars(in srcBegin : int, in srcEnd : int, inout dst : char [[]], in dstBegin : int) : void

    // %OPT% Need to call this on FSB when it is implemented.
    // %UNTESTED% (I don't think anyone calls this yet?)
    int n = srcEnd - srcBegin;

    if (n > m_length)
      n = m_length;

    if (n > (dst.length - dstBegin))
      n = (dst.length - dstBegin);

    int end = srcBegin + m_start + n;
    int d = dstBegin;
    FastStringBuffer fsb = fsb();

    for (int i = srcBegin + m_start; i < end; i++)
    {
      dst[d++] = fsb.charAt(i);
    }
!!!5941634.java!!!	equals(inout obj2 : XMLString) : boolean

    if (this == obj2)
    {
      return true;
    }

    int n = m_length;

    if (n == obj2.length())
    {
      FastStringBuffer fsb = fsb();
      int i = m_start;
      int j = 0;

      while (n-- != 0)
      {
        if (fsb.charAt(i) != obj2.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }

      return true;
    }

    return false;
!!!5941762.java!!!	equals(inout obj2 : XObject) : boolean

    if (this == obj2)
    {
      return true;
    }
    if(obj2.getType() == XObject.CLASS_NUMBER)
        return obj2.equals(this);

    String str = obj2.str();
    int n = m_length;

    if (n == str.length())
    {
      FastStringBuffer fsb = fsb();
      int i = m_start;
      int j = 0;

      while (n-- != 0)
      {
        if (fsb.charAt(i) != str.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }

      return true;
    }

    return false;
!!!5941890.java!!!	equals(inout anotherString : String) : boolean

    int n = m_length;

    if (n == anotherString.length())
    {
      FastStringBuffer fsb = fsb();
      int i = m_start;
      int j = 0;

      while (n-- != 0)
      {
        if (fsb.charAt(i) != anotherString.charAt(j))
        {
          return false;
        }

        i++;
        j++;
      }

      return true;
    }

    return false;
!!!5942018.java!!!	equals(inout obj2 : Object) : boolean

    if (null == obj2)
      return false;

    if(obj2 instanceof XNumber)
        return obj2.equals(this);

      // In order to handle the 'all' semantics of
      // nodeset comparisons, we always call the
      // nodeset function.
    else if (obj2 instanceof XNodeSet)
      return obj2.equals(this);
    else if (obj2 instanceof XStringForFSB)
      return equals((XMLString) obj2);
    else
      return equals(obj2.toString());
!!!5942146.java!!!	equalsIgnoreCase(inout anotherString : String) : boolean
    return (m_length == anotherString.length())
           ? str().equalsIgnoreCase(anotherString) : false;
!!!5942274.java!!!	compareTo(inout xstr : XMLString) : int

    int len1 = m_length;
    int len2 = xstr.length();
    int n = Math.min(len1, len2);
    FastStringBuffer fsb = fsb();
    int i = m_start;
    int j = 0;

    while (n-- != 0)
    {
      char c1 = fsb.charAt(i);
      char c2 = xstr.charAt(j);

      if (c1 != c2)
      {
        return c1 - c2;
      }

      i++;
      j++;
    }

    return len1 - len2;
!!!5942402.java!!!	compareToIgnoreCase(inout xstr : XMLString) : int

    int len1 = m_length;
    int len2 = xstr.length();
    int n = Math.min(len1, len2);
    FastStringBuffer fsb = fsb();
    int i = m_start;
    int j = 0;

    while (n-- != 0)
    {
      char c1 = Character.toLowerCase(fsb.charAt(i));
      char c2 = Character.toLowerCase(xstr.charAt(j));

      if (c1 != c2)
      {
        return c1 - c2;
      }

      i++;
      j++;
    }

    return len1 - len2;
!!!5942530.java!!!	hashCode() : int
    // Commenting this out because in JDK1.1.8 and VJ++
    // we don't match XMLStrings. Defaulting to the super
    // causes us to create a string, but at this point
    // this only seems to get called in key processing.
    // Maybe we can live with it?

/*
    int h = m_hash;

    if (h == 0)
    {
      int off = m_start;
      int len = m_length;
      FastStringBuffer fsb = fsb();

      for (int i = 0; i < len; i++)
      {
        h = 31 * h + fsb.charAt(off);

        off++;
      }

      m_hash = h;
    }
    */

    return super.hashCode(); // h;
!!!5942658.java!!!	startsWith(inout prefix : XMLString, in toffset : int) : boolean

    FastStringBuffer fsb = fsb();
    int to = m_start + toffset;
    int tlim = m_start + m_length;
    int po = 0;
    int pc = prefix.length();

    // Note: toffset might be near -1>>>1.
    if ((toffset < 0) || (toffset > m_length - pc))
    {
      return false;
    }

    while (--pc >= 0)
    {
      if (fsb.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }

    return true;
!!!5942786.java!!!	startsWith(inout prefix : XMLString) : boolean
    return startsWith(prefix, 0);
!!!5942914.java!!!	indexOf(in ch : int) : int
    return indexOf(ch, 0);
!!!5943042.java!!!	indexOf(in ch : int, in fromIndex : int) : int

    int max = m_start + m_length;
    FastStringBuffer fsb = fsb();

    if (fromIndex < 0)
    {
      fromIndex = 0;
    }
    else if (fromIndex >= m_length)
    {

      // Note: fromIndex might be near -1>>>1.
      return -1;
    }

    for (int i = m_start + fromIndex; i < max; i++)
    {
      if (fsb.charAt(i) == ch)
      {
        return i - m_start;
      }
    }

    return -1;
!!!5943170.java!!!	substring(in beginIndex : int) : XMLString

    int len = m_length - beginIndex;

    if (len <= 0)
      return XString.EMPTYSTRING;
    else
    {
      int start = m_start + beginIndex;

      return new XStringForFSB(fsb(), start, len);
    }
!!!5943298.java!!!	substring(in beginIndex : int, in endIndex : int) : XMLString

    int len = endIndex - beginIndex;

    if (len > m_length)
      len = m_length;

    if (len <= 0)
      return XString.EMPTYSTRING;
    else
    {
      int start = m_start + beginIndex;

      return new XStringForFSB(fsb(), start, len);
    }
!!!5943426.java!!!	concat(inout str : String) : XMLString

    // %OPT% Make an FSB here?
    return new XString(str().concat(str));
!!!5943554.java!!!	trim() : XMLString
    return fixWhiteSpace(true, true, false);
!!!5943682.java!!!	isSpace(in ch : char) : boolean
    return XMLCharacterRecognizer.isWhiteSpace(ch);  // Take the easy way out for now.
!!!5943810.java!!!	fixWhiteSpace(inout trimHead : boolean, inout trimTail : boolean, inout doublePunctuationSpaces : boolean) : XMLString

    int end = m_length + m_start;
    char[] buf = new char[m_length];
    FastStringBuffer fsb = fsb();
    boolean edit = false;

    /* replace S to ' '. and ' '+ -> single ' '. */
    int d = 0;
    boolean pres = false;

    for (int s = m_start; s < end; s++)
    {
      char c = fsb.charAt(s);

      if (isSpace(c))
      {
        if (!pres)
        {
          if (' ' != c)
          {
            edit = true;
          }

          buf[d++] = ' ';

          if (doublePunctuationSpaces && (d != 0))
          {
            char prevChar = buf[d - 1];

            if (!((prevChar == '.') || (prevChar == '!')
                  || (prevChar == '?')))
            {
              pres = true;
            }
          }
          else
          {
            pres = true;
          }
        }
        else
        {
          edit = true;
          pres = true;
        }
      }
      else
      {
        buf[d++] = c;
        pres = false;
      }
    }

    if (trimTail && 1 <= d && ' ' == buf[d - 1])
    {
      edit = true;

      d--;
    }

    int start = 0;

    if (trimHead && 0 < d && ' ' == buf[0])
    {
      edit = true;

      start++;
    }

    XMLStringFactory xsf = XMLStringFactoryImpl.getFactory();

    return edit ? xsf.newstr(buf, start, d - start) : this;
!!!5943938.java!!!	toDouble() : double
    if(m_length == 0)
      return Double.NaN;
    int i;
    char c;
    String valueString = fsb().getString(m_start,m_length);

    // The following are permitted in the Double.valueOf, but not by the XPath spec:
    // - a plus sign
    // - The use of e or E to indicate exponents
    // - trailing f, F, d, or D
    // See function comments; not sure if this is slower than actually doing the
    // conversion ourselves (as was before).

    for (i=0;i<m_length;i++)
      if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))
        break;
    if (i == m_length) return Double.NaN;
    if (valueString.charAt(i) == '-')
      i++;
    for (;i<m_length;i++) {
      c = valueString.charAt(i);
      if (c != '.' && (c < '0' || c > '9'))
        break;
    }
    for (;i<m_length;i++)
      if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))
        break;
    if (i != m_length)
      return Double.NaN;

    try {
      return Double.parseDouble(valueString);
    } catch (NumberFormatException nfe) {
      // This should catch double periods, empty strings.
      return Double.NaN;
    }
