class ChronoLocalDateImpl
!!!8451970.java!!!	ensureValid(inout chrono : Chronology, inout temporal : Temporal) : D
        @SuppressWarnings("unchecked")
        D other = (D) temporal;
        if (chrono.equals(other.getChronology()) == false) {
            throw new ClassCastException("Chronology mismatch, expected: " + chrono.getId() + ", actual: " + other.getChronology().getId());
        }
        return other;
!!!8452226.java!!!	with(inout adjuster : TemporalAdjuster) : D
        return (D) ChronoLocalDate.super.with(adjuster);
!!!8452354.java!!!	with(inout field : TemporalField, in value : long) : D
        return (D) ChronoLocalDate.super.with(field, value);
!!!8452482.java!!!	plus(inout amount : TemporalAmount) : D
        return (D) ChronoLocalDate.super.plus(amount);
!!!8452610.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : D
        if (unit instanceof ChronoUnit) {
            ChronoUnit f = (ChronoUnit) unit;
            switch (f) {
                case DAYS: return plusDays(amountToAdd);
                case WEEKS: return plusDays(Math.multiplyExact(amountToAdd, 7));
                case MONTHS: return plusMonths(amountToAdd);
                case YEARS: return plusYears(amountToAdd);
                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));
                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));
                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));
                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return (D) ChronoLocalDate.super.plus(amountToAdd, unit);
!!!8452738.java!!!	minus(inout amount : TemporalAmount) : D
        return (D) ChronoLocalDate.super.minus(amount);
!!!8452866.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : D
        return (D) ChronoLocalDate.super.minus(amountToSubtract, unit);
!!!8453250.java!!!	plusWeeks(in weeksToAdd : long) : D
        return plusDays(Math.multiplyExact(weeksToAdd, 7));
!!!8453506.java!!!	minusYears(in yearsToSubtract : long) : D
        return (yearsToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusYears(Long.MAX_VALUE)).plusYears(1) : plusYears(-yearsToSubtract));
!!!8453634.java!!!	minusMonths(in monthsToSubtract : long) : D
        return (monthsToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusMonths(Long.MAX_VALUE)).plusMonths(1) : plusMonths(-monthsToSubtract));
!!!8453762.java!!!	minusWeeks(in weeksToSubtract : long) : D
        return (weeksToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusWeeks(Long.MAX_VALUE)).plusWeeks(1) : plusWeeks(-weeksToSubtract));
!!!8453890.java!!!	minusDays(in daysToSubtract : long) : D
        return (daysToSubtract == Long.MIN_VALUE ? ((ChronoLocalDateImpl<D>)plusDays(Long.MAX_VALUE)).plusDays(1) : plusDays(-daysToSubtract));
!!!8454018.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        Objects.requireNonNull(endExclusive, "endExclusive");
        ChronoLocalDate end = getChronology().date(endExclusive);
        if (unit instanceof ChronoUnit) {
            switch ((ChronoUnit) unit) {
                case DAYS: return daysUntil(end);
                case WEEKS: return daysUntil(end) / 7;
                case MONTHS: return monthsUntil(end);
                case YEARS: return monthsUntil(end) / 12;
                case DECADES: return monthsUntil(end) / 120;
                case CENTURIES: return monthsUntil(end) / 1200;
                case MILLENNIA: return monthsUntil(end) / 12000;
                case ERAS: return end.getLong(ERA) - getLong(ERA);
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        Objects.requireNonNull(unit, "unit");
        return unit.between(this, end);
!!!8454146.java!!!	daysUntil(inout end : ChronoLocalDate) : long
        return end.toEpochDay() - toEpochDay();  // no overflow
!!!8454274.java!!!	monthsUntil(inout end : ChronoLocalDate) : long
        ValueRange range = getChronology().range(MONTH_OF_YEAR);
        if (range.getMaximum() != 12) {
            throw new IllegalStateException("ChronoLocalDateImpl only supports Chronologies with 12 months per year");
        }
        long packed1 = getLong(PROLEPTIC_MONTH) * 32L + get(DAY_OF_MONTH);  // no overflow
        long packed2 = end.getLong(PROLEPTIC_MONTH) * 32L + end.get(DAY_OF_MONTH);  // no overflow
        return (packed2 - packed1) / 32;
!!!8454402.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof ChronoLocalDate) {
            return compareTo((ChronoLocalDate) obj) == 0;
        }
        return false;
!!!8454530.java!!!	hashCode() : int
        long epDay = toEpochDay();
        return getChronology().hashCode() ^ ((int) (epDay ^ (epDay >>> 32)));
!!!8454658.java!!!	toString() : String
        // getLong() reduces chances of exceptions in toString()
        long yoe = getLong(YEAR_OF_ERA);
        long moy = getLong(MONTH_OF_YEAR);
        long dom = getLong(DAY_OF_MONTH);
        StringBuilder buf = new StringBuilder(30);
        buf.append(getChronology().toString())
                .append(" ")
                .append(getEra())
                .append(" ")
                .append(yoe)
                .append(moy < 10 ? "-0" : "-").append(moy)
                .append(dom < 10 ? "-0" : "-").append(dom);
        return buf.toString();
