class Parameter
!!!7357442.java!!!	Parameter(inout name : String, in modifiers : int, inout executable : Executable, in index : int)
        this.name = name;
        this.modifiers = modifiers;
        this.executable = executable;
        this.index = index;
!!!7357570.java!!!	equals(inout obj : Object) : boolean
        if(obj instanceof Parameter) {
            Parameter other = (Parameter)obj;
            return (other.executable.equals(executable) &&
                    other.index == index);
        }
        return false;
!!!7357698.java!!!	hashCode() : int
        return executable.hashCode() ^ index;
!!!7357826.java!!!	isNamePresent() : boolean
        return executable.hasRealParameterData() && name != null;
!!!7357954.java!!!	toString() : String
        final StringBuilder sb = new StringBuilder();
        final Type type = getParameterizedType();
        final String typename = type.getTypeName();

        sb.append(Modifier.toString(getModifiers()));

        if(0 != modifiers)
            sb.append(' ');

        if(isVarArgs())
            sb.append(typename.replaceFirst("\\[\\]$", "..."));
        else
            sb.append(typename);

        sb.append(' ');
        sb.append(getName());

        return sb.toString();
!!!7358082.java!!!	getDeclaringExecutable() : Executable
        return executable;
!!!7358210.java!!!	getModifiers() : int
        return modifiers;
!!!7358338.java!!!	getName() : String
        // Note: empty strings as paramete names are now outlawed.
        // The .equals("") is for compatibility with current JVM
        // behavior.  It may be removed at some point.
        if(name == null || name.equals(""))
            return "arg" + index;
        else
            return name;
!!!7358466.java!!!	getRealName() : String
        return name;
!!!7358594.java!!!	getParameterizedType() : Type
        Type tmp = parameterTypeCache;
        if (null == tmp) {
            tmp = executable.getAllGenericParameterTypes()[index];
            parameterTypeCache = tmp;
        }

        return tmp;
!!!7358722.java!!!	getType() : Class
        Class<?> tmp = parameterClassCache;
        if (null == tmp) {
            tmp = executable.getParameterTypes()[index];
            parameterClassCache = tmp;
        }
        return tmp;
!!!7358850.java!!!	getAnnotatedType() : AnnotatedType
        // no caching for now
        return executable.getAnnotatedParameterTypes()[index];
!!!7358978.java!!!	isImplicit() : boolean
        return Modifier.isMandated(getModifiers());
!!!7359106.java!!!	isSynthetic() : boolean
        return Modifier.isSynthetic(getModifiers());
!!!7359234.java!!!	isVarArgs() : boolean
        return executable.isVarArgs() &&
            index == executable.getParameterCount() - 1;
!!!7359362.java!!!	getAnnotation(inout annotationClass : Class) : T
        Objects.requireNonNull(annotationClass);
        return annotationClass.cast(declaredAnnotations().get(annotationClass));
!!!7359490.java!!!	getAnnotationsByType(inout annotationClass : Class) : T
        Objects.requireNonNull(annotationClass);

        return AnnotationSupport.getDirectlyAndIndirectlyPresent(declaredAnnotations(), annotationClass);
!!!7359618.java!!!	getDeclaredAnnotations() : Annotation
        return executable.getParameterAnnotations()[index];
!!!7359746.java!!!	getDeclaredAnnotation(inout annotationClass : Class) : T
        // Only annotations on classes are inherited, for all other
        // objects getDeclaredAnnotation is the same as
        // getAnnotation.
        return getAnnotation(annotationClass);
!!!7359874.java!!!	getDeclaredAnnotationsByType(inout annotationClass : Class) : T
        // Only annotations on classes are inherited, for all other
        // objects getDeclaredAnnotations is the same as
        // getAnnotations.
        return getAnnotationsByType(annotationClass);
!!!7360002.java!!!	getAnnotations() : Annotation
        return getDeclaredAnnotations();
!!!7360130.java!!!	declaredAnnotations() : Map
        if(null == declaredAnnotations) {
            declaredAnnotations =
                new HashMap<Class<? extends Annotation>, Annotation>();
            Annotation[] ann = getDeclaredAnnotations();
            for(int i = 0; i < ann.length; i++)
                declaredAnnotations.put(ann[i].annotationType(), ann[i]);
        }
        return declaredAnnotations;
