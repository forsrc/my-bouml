class LongBuffer
!!!7644290.java!!!	LongBuffer(in mark : int, in pos : int, in lim : int, in cap : int, inout hb : long [[]], in offset : int)
        super(mark, pos, lim, cap);
        this.hb = hb;
        this.offset = offset;
!!!7644418.java!!!	LongBuffer(in mark : int, in pos : int, in lim : int, in cap : int)
 // package-private
        this(mark, pos, lim, cap, null, 0);
!!!7644546.java!!!	allocate(in capacity : int) : LongBuffer
        if (capacity < 0)
            throw new IllegalArgumentException();
        return new HeapLongBuffer(capacity, capacity);
!!!7644674.java!!!	wrap(inout array : long [[]], in offset : int, in length : int) : LongBuffer
        try {
            return new HeapLongBuffer(array, offset, length);
        } catch (IllegalArgumentException x) {
            throw new IndexOutOfBoundsException();
        }
!!!7644802.java!!!	wrap(inout array : long [[]]) : LongBuffer
        return wrap(array, 0, array.length);
!!!7645826.java!!!	get(inout dst : long [[]], in offset : int, in length : int) : LongBuffer
        checkBounds(offset, length, dst.length);
        if (length > remaining())
            throw new BufferUnderflowException();
        int end = offset + length;
        for (int i = offset; i < end; i++)
            dst[i] = get();
        return this;
!!!7645954.java!!!	get(inout dst : long [[]]) : LongBuffer
        return get(dst, 0, dst.length);
!!!7646082.java!!!	put(inout src : LongBuffer) : LongBuffer
        if (src == this)
            throw new IllegalArgumentException();
        if (isReadOnly())
            throw new ReadOnlyBufferException();
        int n = src.remaining();
        if (n > remaining())
            throw new BufferOverflowException();
        for (int i = 0; i < n; i++)
            put(src.get());
        return this;
!!!7646210.java!!!	put(inout src : long [[]], in offset : int, in length : int) : LongBuffer
        checkBounds(offset, length, src.length);
        if (length > remaining())
            throw new BufferOverflowException();
        int end = offset + length;
        for (int i = offset; i < end; i++)
            this.put(src[i]);
        return this;
!!!7646338.java!!!	put(inout src : long [[]]) : LongBuffer
        return put(src, 0, src.length);
!!!7646466.java!!!	hasArray() : boolean
        return (hb != null) && !isReadOnly;
!!!7646594.java!!!	array() : long
        if (hb == null)
            throw new UnsupportedOperationException();
        if (isReadOnly)
            throw new ReadOnlyBufferException();
        return hb;
!!!7646722.java!!!	arrayOffset() : int
        if (hb == null)
            throw new UnsupportedOperationException();
        if (isReadOnly)
            throw new ReadOnlyBufferException();
        return offset;
!!!7647106.java!!!	toString() : String
        StringBuffer sb = new StringBuffer();
        sb.append(getClass().getName());
        sb.append("[pos=");
        sb.append(position());
        sb.append(" lim=");
        sb.append(limit());
        sb.append(" cap=");
        sb.append(capacity());
        sb.append("]");
        return sb.toString();
!!!7647234.java!!!	hashCode() : int
        int h = 1;
        int p = position();
        for (int i = limit() - 1; i >= p; i--)



            h = 31 * h + (int)get(i);

        return h;
!!!7647362.java!!!	equals(inout ob : Object) : boolean
        if (this == ob)
            return true;
        if (!(ob instanceof LongBuffer))
            return false;
        LongBuffer that = (LongBuffer)ob;
        if (this.remaining() != that.remaining())
            return false;
        int p = this.position();
        for (int i = this.limit() - 1, j = that.limit() - 1; i >= p; i--, j--)
            if (!equals(this.get(i), that.get(j)))
                return false;
        return true;
!!!7647490.java!!!	equals(in x : long, in y : long) : boolean



        return x == y;

!!!7647618.java!!!	compareTo(inout that : LongBuffer) : int
        int n = this.position() + Math.min(this.remaining(), that.remaining());
        for (int i = this.position(), j = that.position(); i < n; i++, j++) {
            int cmp = compare(this.get(i), that.get(j));
            if (cmp != 0)
                return cmp;
        }
        return this.remaining() - that.remaining();
!!!7647746.java!!!	compare(in x : long, in y : long) : int






        return Long.compare(x, y);

