class LdapName
!!!10066818.java!!!	LdapName(inout name : String)
        unparsed = name;
        parse();
!!!10066946.java!!!	LdapName(inout rdns : List)

        // if (rdns instanceof ArrayList<Rdn>) {
        //      this.rdns = rdns.clone();
        // } else if (rdns instanceof List<Rdn>) {
        //      this.rdns = new ArrayList<Rdn>(rdns);
        // } else {
        //      throw IllegalArgumentException(
        //              "Invalid entries, list entries must be of type Rdn");
        //  }

        this.rdns = new ArrayList<>(rdns.size());
        for (int i = 0; i < rdns.size(); i++) {
            Object obj = rdns.get(i);
            if (!(obj instanceof Rdn)) {
                throw new IllegalArgumentException("Entry:" + obj +
                        "  not a valid type;list entries must be of type Rdn");
            }
            this.rdns.add((Rdn)obj);
        }
!!!10067074.java!!!	LdapName(inout name : String, inout rdns : List, in beg : int, in end : int)
        unparsed = name;
        // this.rdns = rdns.subList(beg, end);

        List<Rdn> sList = rdns.subList(beg, end);
        this.rdns = new ArrayList<>(sList);
!!!10067202.java!!!	size() : int
        return rdns.size();
!!!10067330.java!!!	isEmpty() : boolean
        return rdns.isEmpty();
!!!10067458.java!!!	getAll() : Enumeration
        final Iterator<Rdn> iter = rdns.iterator();

        return new Enumeration<String>() {
            public boolean hasMoreElements() {
                return iter.hasNext();
            }
            public String nextElement() {
                return iter.next().toString();
            }
        };
!!!10067586.java!!!	get(in posn : int) : String
        return rdns.get(posn).toString();
!!!10067714.java!!!	getRdn(in posn : int) : Rdn
        return rdns.get(posn);
!!!10067842.java!!!	getPrefix(in posn : int) : Name
        try {
            return new LdapName(null, rdns, 0, posn);
        } catch (IllegalArgumentException e) {
            throw new IndexOutOfBoundsException(
                "Posn: " + posn + ", Size: "+ rdns.size());
        }
!!!10067970.java!!!	getSuffix(in posn : int) : Name
        try {
            return new LdapName(null, rdns, posn, rdns.size());
        } catch (IllegalArgumentException e) {
            throw new IndexOutOfBoundsException(
                "Posn: " + posn + ", Size: "+ rdns.size());
        }
!!!10068098.java!!!	startsWith(inout n : Name) : boolean
        if (n == null) {
            return false;
        }
        int len1 = rdns.size();
        int len2 = n.size();
        return (len1 >= len2 &&
                matches(0, len2, n));
!!!10068226.java!!!	startsWith(inout rdns : List) : boolean
        if (rdns == null) {
            return false;
        }
        int len1 = this.rdns.size();
        int len2 = rdns.size();
        return (len1 >= len2 &&
                doesListMatch(0, len2, rdns));
!!!10068354.java!!!	endsWith(inout n : Name) : boolean
        if (n == null) {
            return false;
        }
        int len1 = rdns.size();
        int len2 = n.size();
        return (len1 >= len2 &&
                matches(len1 - len2, len1, n));
!!!10068482.java!!!	endsWith(inout rdns : List) : boolean
        if (rdns == null) {
            return false;
        }
        int len1 = this.rdns.size();
        int len2 = rdns.size();
        return (len1 >= len2 &&
                doesListMatch(len1 - len2, len1, rdns));
!!!10068610.java!!!	doesListMatch(in beg : int, in end : int, inout rdns : List) : boolean
        for (int i = beg; i < end; i++) {
            if (!this.rdns.get(i).equals(rdns.get(i - beg))) {
                return false;
            }
        }
        return true;
!!!10068738.java!!!	matches(in beg : int, in end : int, inout n : Name) : boolean
        if (n instanceof LdapName) {
            LdapName ln = (LdapName) n;
            return doesListMatch(beg, end, ln.rdns);
        } else {
            for (int i = beg; i < end; i++) {
                Rdn rdn;
                String rdnString = n.get(i - beg);
                try {
                    rdn = (new Rfc2253Parser(rdnString)).parseRdn();
                } catch (InvalidNameException e) {
                    return false;
                }
                if (!rdn.equals(rdns.get(i))) {
                    return false;
                }
            }
        }
        return true;
!!!10068866.java!!!	addAll(inout suffix : Name) : Name
         return addAll(size(), suffix);
!!!10068994.java!!!	addAll(inout suffixRdns : List) : Name
        return addAll(size(), suffixRdns);
!!!10069122.java!!!	addAll(in posn : int, inout suffix : Name) : Name
        unparsed = null;        // no longer valid
        if (suffix instanceof LdapName) {
            LdapName s = (LdapName) suffix;
            rdns.addAll(posn, s.rdns);
        } else {
            Enumeration<String> comps = suffix.getAll();
            while (comps.hasMoreElements()) {
                rdns.add(posn++,
                    (new Rfc2253Parser(comps.nextElement()).
                    parseRdn()));
            }
        }
        return this;
!!!10069250.java!!!	addAll(in posn : int, inout suffixRdns : List) : Name
        unparsed = null;
        for (int i = 0; i < suffixRdns.size(); i++) {
            Object obj = suffixRdns.get(i);
            if (!(obj instanceof Rdn)) {
                throw new IllegalArgumentException("Entry:" + obj +
                "  not a valid type;suffix list entries must be of type Rdn");
            }
            rdns.add(i + posn, (Rdn)obj);
        }
        return this;
!!!10069378.java!!!	add(inout comp : String) : Name
        return add(size(), comp);
!!!10069506.java!!!	add(inout comp : Rdn) : Name
        return add(size(), comp);
!!!10069634.java!!!	add(in posn : int, inout comp : String) : Name
        Rdn rdn = (new Rfc2253Parser(comp)).parseRdn();
        rdns.add(posn, rdn);
        unparsed = null;        // no longer valid
        return this;
!!!10069762.java!!!	add(in posn : int, inout comp : Rdn) : Name
        if (comp == null) {
            throw new NullPointerException("Cannot set comp to null");
        }
        rdns.add(posn, comp);
        unparsed = null;        // no longer valid
        return this;
!!!10069890.java!!!	remove(in posn : int) : Object
        unparsed = null;        // no longer valid
        return rdns.remove(posn).toString();
!!!10070018.java!!!	getRdns() : List
        return Collections.unmodifiableList(rdns);
!!!10070146.java!!!	clone() : Object
        return new LdapName(unparsed, rdns, 0, rdns.size());
!!!10070274.java!!!	toString() : String
        if (unparsed != null) {
            return unparsed;
        }
        StringBuilder builder = new StringBuilder();
        int size = rdns.size();
        if ((size - 1) >= 0) {
            builder.append(rdns.get(size - 1));
        }
        for (int next = size - 2; next >= 0; next--) {
            builder.append(',');
            builder.append(rdns.get(next));
        }
        unparsed = builder.toString();
        return unparsed;
!!!10070402.java!!!	equals(inout obj : Object) : boolean
        // check possible shortcuts
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof LdapName)) {
            return false;
        }
        LdapName that = (LdapName) obj;
        if (rdns.size() != that.rdns.size()) {
            return false;
        }
        if (unparsed != null && unparsed.equalsIgnoreCase(
                that.unparsed)) {
            return true;
        }
        // Compare RDNs one by one for equality
        for (int i = 0; i < rdns.size(); i++) {
            // Compare a single pair of RDNs.
            Rdn rdn1 = rdns.get(i);
            Rdn rdn2 = that.rdns.get(i);
            if (!rdn1.equals(rdn2)) {
                return false;
            }
        }
        return true;
!!!10070530.java!!!	compareTo(inout obj : Object) : int

        if (!(obj instanceof LdapName)) {
            throw new ClassCastException("The obj is not a LdapName");
        }

        // check possible shortcuts
        if (obj == this) {
            return 0;
        }
        LdapName that = (LdapName) obj;

        if (unparsed != null && unparsed.equalsIgnoreCase(
                        that.unparsed)) {
            return 0;
        }

        // Compare RDNs one by one, lexicographically.
        int minSize = Math.min(rdns.size(), that.rdns.size());
        for (int i = 0; i < minSize; i++) {
            // Compare a single pair of RDNs.
            Rdn rdn1 = rdns.get(i);
            Rdn rdn2 = that.rdns.get(i);

            int diff = rdn1.compareTo(rdn2);
            if (diff != 0) {
                return diff;
            }
        }
        return (rdns.size() - that.rdns.size());        // longer DN wins
!!!10070658.java!!!	hashCode() : int
        // Sum up the hash codes of the components.
        int hash = 0;

        // For each RDN...
        for (int i = 0; i < rdns.size(); i++) {
            Rdn rdn = rdns.get(i);
            hash += rdn.hashCode();
        }
        return hash;
!!!10070786.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        s.writeObject(toString());
!!!10070914.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        unparsed = (String)s.readObject();
        try {
            parse();
        } catch (InvalidNameException e) {
            // shouldn't happen
            throw new java.io.StreamCorruptedException(
                    "Invalid name: " + unparsed);
        }
!!!10071042.java!!!	parse() : void
        // rdns = (ArrayList<Rdn>) (new RFC2253Parser(unparsed)).getDN();

        rdns = new Rfc2253Parser(unparsed).parseDn();
