format 222
"atomic" // jdk1.8::java::util::concurrent::atomic
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/util/concurrent/atomic/"
  java_package "java.util.concurrent.atomic"
  classview 135298 "atomic"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 191490 "AtomicInteger"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@code int} value that may be updated atomically.  See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
{@code AtomicInteger} is used in applications such as atomically
incremented counters, and cannot be used as a replacement for an
{@link java.lang.Integer}. However, this class does extend
{@code Number} to allow uniform access by tools and utilities that
deal with numerically-based classes.

@since 1.5
@author Doug Lea
"
      classrelation 3642754 // <generalisation>
	relation 3642754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3642754 // <generalisation>
	  b parent class_ref 398210 // Number
      end

      classrelation 3642882 // <realization>
	relation 3642882 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3642882 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2153602 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6214790243416807050L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2153730 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " setup to use Unsafe.compareAndSwapInt for updates
"
      end

      attribute 2153858 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 176130 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicInteger.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 2153986 "value"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9250434 "AtomicInteger"
	public explicit_return_type ""
	nparams 1
	  param in name "initialValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicInteger with the given initial value.

@param initialValue the initial value
"
      end

      operation 9250562 "AtomicInteger"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicInteger with initial value {@code 0}.
"
      end

      operation 9250690 "get"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value.

@return the current value
"
      end

      operation 9250818 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given value.

@param newValue the new value
"
      end

      operation 9250946 "lazySet"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6
"
      end

      operation 9251074 "getAndSet"
	public explicit_return_type "int"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets to the given value and returns the old value.

@param newValue the new value
@return the previous value
"
      end

      operation 9251202 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

@param expect the expected value
@param update the new value
@return {@code true} if successful. False return indicates that
the actual value was not equal to the expected value.
"
      end

      operation 9251330 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9251458 "getAndIncrement"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the previous value
"
      end

      operation 9251586 "getAndDecrement"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the previous value
"
      end

      operation 9251714 "getAndAdd"
	public explicit_return_type "int"
	nparams 1
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the previous value
"
      end

      operation 9251842 "incrementAndGet"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the updated value
"
      end

      operation 9251970 "decrementAndGet"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the updated value
"
      end

      operation 9252098 "addAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the updated value
"
      end

      operation 9252226 "getAndUpdate"
	public explicit_return_type "int"
	nparams 1
	  param inout name "updateFunction" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9252354 "updateAndGet"
	public explicit_return_type "int"
	nparams 1
	  param inout name "updateFunction" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9252482 "getAndAccumulate"
	public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param inout name "accumulatorFunction" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function to the current and given values,
returning the previous value. The function should be
side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function
is applied with the current value as its first argument,
and the given update as the second argument.

@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9252610 "accumulateAndGet"
	public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param inout name "accumulatorFunction" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function to the current and given values,
returning the updated value. The function should be
side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function
is applied with the current value as its first argument,
and the given update as the second argument.

@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      operation 9252738 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value
"
      end

      operation 9252866 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as an {@code int}.
"
      end

      operation 9252994 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as a {@code long}
after a widening primitive conversion.
@jls 5.1.2 Widening Primitive Conversions
"
      end

      operation 9253122 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as a {@code float}
after a widening primitive conversion.
@jls 5.1.2 Widening Primitive Conversions
"
      end

      operation 9253250 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as a {@code double}
after a widening primitive conversion.
@jls 5.1.2 Widening Primitive Conversions
"
      end
    end

    class 256386 "AtomicLong"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code long} value that may be updated atomically.  See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
{@code AtomicLong} is used in applications such as atomically
incremented sequence numbers, and cannot be used as a replacement
for a {@link java.lang.Long}. However, this class does extend
{@code Number} to allow uniform access by tools and utilities that
deal with numerically-based classes.

@since 1.5
@author Doug Lea
"
      classrelation 3643522 // <generalisation>
	relation 3643522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3643522 // <generalisation>
	  b parent class_ref 398210 // Number
      end

      classrelation 3643650 // <realization>
	relation 3643650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3643650 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2155010 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1927816293512124184L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2155138 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " setup to use Unsafe.compareAndSwapLong for updates
"
      end

      attribute 2155266 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2155394 "VM_SUPPORTS_LONG_CAS"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " VMSupportsCS8()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Records whether the underlying JVM supports lockless
compareAndSwap for longs. While the Unsafe.compareAndSwapLong
method works in either case, some constructions should be
handled at Java level to avoid locking user-visible locks.

"
      end

      operation 9261058 "VMSupportsCS8"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Returns whether underlying JVM supports lockless CompareAndSet
for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.
"
      end

      extra_member 176386 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicLong.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 2155522 "value"
	volatile private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9261186 "AtomicLong"
	public explicit_return_type ""
	nparams 1
	  param in name "initialValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLong with the given initial value.

@param initialValue the initial value
"
      end

      operation 9261314 "AtomicLong"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLong with initial value {@code 0}.
"
      end

      operation 9261442 "get"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value.

@return the current value
"
      end

      operation 9261570 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given value.

@param newValue the new value
"
      end

      operation 9261698 "lazySet"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6
"
      end

      operation 9261826 "getAndSet"
	public explicit_return_type "long"
	nparams 1
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets to the given value and returns the old value.

@param newValue the new value
@return the previous value
"
      end

      operation 9261954 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

@param expect the expected value
@param update the new value
@return {@code true} if successful. False return indicates that
the actual value was not equal to the expected value.
"
      end

      operation 9262082 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9262210 "getAndIncrement"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the previous value
"
      end

      operation 9262338 "getAndDecrement"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the previous value
"
      end

      operation 9262466 "getAndAdd"
	public explicit_return_type "long"
	nparams 1
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the previous value
"
      end

      operation 9262594 "incrementAndGet"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the updated value
"
      end

      operation 9262722 "decrementAndGet"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the updated value
"
      end

      operation 9262850 "addAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the updated value
"
      end

      operation 9262978 "getAndUpdate"
	public explicit_return_type "long"
	nparams 1
	  param inout name "updateFunction" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9263106 "updateAndGet"
	public explicit_return_type "long"
	nparams 1
	  param inout name "updateFunction" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9263234 "getAndAccumulate"
	public explicit_return_type "long"
	nparams 2
	  param in name "x" explicit_type "long"
	  param inout name "accumulatorFunction" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function to the current and given values,
returning the previous value. The function should be
side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function
is applied with the current value as its first argument,
and the given update as the second argument.

@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9263362 "accumulateAndGet"
	public explicit_return_type "long"
	nparams 2
	  param in name "x" explicit_type "long"
	  param inout name "accumulatorFunction" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function to the current and given values,
returning the updated value. The function should be
side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function
is applied with the current value as its first argument,
and the given update as the second argument.

@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      operation 9263490 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value
"
      end

      operation 9263618 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as an {@code int}
after a narrowing primitive conversion.
@jls 5.1.3 Narrowing Primitive Conversions
"
      end

      operation 9263746 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as a {@code long}.
"
      end

      operation 9263874 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as a {@code float}
after a widening primitive conversion.
@jls 5.1.2 Widening Primitive Conversions
"
      end

      operation 9264002 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as a {@code double}
after a widening primitive conversion.
@jls 5.1.2 Widening Primitive Conversions
"
      end
    end

    class 357506 "AtomicBoolean"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code boolean} value that may be updated atomically. See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
{@code AtomicBoolean} is used in applications such as atomically
updated flags, and cannot be used as a replacement for a
{@link java.lang.Boolean}.

@since 1.5
@author Doug Lea
"
      classrelation 3642626 // <realization>
	relation 3642626 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3642626 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2153090 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4654671469794556979L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2153218 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " setup to use Unsafe.compareAndSwapInt for updates
"
      end

      attribute 2153346 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 176002 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicBoolean.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 2153474 "value"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9249282 "AtomicBoolean"
	public explicit_return_type ""
	nparams 1
	  param inout name "initialValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicBoolean} with the given initial value.

@param initialValue the initial value
"
      end

      operation 9249410 "AtomicBoolean"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicBoolean} with initial value {@code false}.
"
      end

      operation 9249538 "get"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value.

@return the current value
"
      end

      operation 9249666 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "boolean"
	  param inout name "update" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

@param expect the expected value
@param update the new value
@return {@code true} if successful. False return indicates that
the actual value was not equal to the expected value.
"
      end

      operation 9249794 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "boolean"
	  param inout name "update" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9249922 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets to the given value.

@param newValue the new value
"
      end

      operation 9250050 "lazySet"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6
"
      end

      operation 9250178 "getAndSet"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets to the given value and returns the previous value.

@param newValue the new value
@return the previous value
"
      end

      operation 9250306 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value
"
      end
    end

    class 921474 "AtomicReferenceFieldUpdater"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A reflection-based utility that enables atomic updates to
designated {@code volatile} reference fields of designated
classes.  This class is designed for use in atomic data structures
in which several reference fields of the same node are
independently subject to atomic updates. For example, a tree node
might be declared as

<pre> {@code
class Node {
  private volatile Node left, right;

  private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater =
    AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");
  private static AtomicReferenceFieldUpdater<Node, Node> rightUpdater =
    AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");

  Node getLeft() { return left; }
  boolean compareAndSetLeft(Node expect, Node update) {
    return leftUpdater.compareAndSet(this, expect, update);
  }
  // ... and so on
}}</pre>

<p>Note that the guarantees of the {@code compareAndSet}
method in this class are weaker than in other atomic classes.
Because this class cannot ensure that all uses of the field
are appropriate for purposes of atomic access, it can
guarantee atomicity only with respect to other invocations of
{@code compareAndSet} and {@code set} on the same updater.

@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field
@param <V> The type of the field
"
      operation 9278466 "newUpdater"
	class_operation cpp_inline public return_type class_ref 921474 // AtomicReferenceFieldUpdater
	nparams 3
	  param inout name "tclass" type class_ref 130818 // Class
	  param inout name "vclass" type class_ref 130818 // Class
	  param inout name "fieldName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U,W> ${type}<U,W> ${name}${(}${t0}<U> ${p0}, ${t1}<W> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Creates and returns an updater for objects with the given field.
The Class arguments are needed to check that reflective types and
generic types match.

@param tclass the class of the objects holding the field
@param vclass the class of the field
@param fieldName the name of the field to be updated
@param <U> the type of instances of tclass
@param <W> the type of instances of vclass
@return the updater
@throws ClassCastException if the field is of the wrong type
@throws IllegalArgumentException if the field is not volatile
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type,
or the field is inaccessible to the caller according to Java language
access control
"
      end

      operation 9278594 "AtomicReferenceFieldUpdater"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses.
"
      end

      operation 9278722 "compareAndSet"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9278850 "weakCompareAndSet"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9278978 "set"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the field of the given object managed by this updater to the
given updated value. This operation is guaranteed to act as a volatile
store with respect to subsequent invocations of {@code compareAndSet}.

@param obj An object whose field to set
@param newValue the new value
"
      end

      operation 9279106 "lazySet"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the field of the given object managed by this
updater to the given updated value.

@param obj An object whose field to set
@param newValue the new value
@since 1.6
"
      end

      operation 9279234 "get"
	abstract cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value held in the field of the given object managed
by this updater.

@param obj An object whose field to get
@return the current value
"
      end

      operation 9279362 "getAndSet"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given value and returns the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value
"
      end

      operation 9279490 "getAndUpdate"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "updateFunction" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this updater
with the results of applying the given function, returning the previous
value. The function should be side-effect-free, since it may be
re-applied when attempted updates fail due to contention among threads.

@param obj An object whose field to get and set
@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9279618 "updateAndGet"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "updateFunction" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this updater
with the results of applying the given function, returning the updated
value. The function should be side-effect-free, since it may be
re-applied when attempted updates fail due to contention among threads.

@param obj An object whose field to get and set
@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9279746 "getAndAccumulate"
	cpp_inline public explicit_return_type "V"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "x" explicit_type "V"
	  param inout name "accumulatorFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this
updater with the results of applying the given function to the
current and given values, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.  The
function is applied with the current value as its first argument,
and the given update as the second argument.

@param obj An object whose field to get and set
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9279874 "accumulateAndGet"
	cpp_inline public explicit_return_type "V"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "x" explicit_type "V"
	  param inout name "accumulatorFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this
updater with the results of applying the given function to the
current and given values, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.  The
function is applied with the current value as its first argument,
and the given update as the second argument.

@param obj An object whose field to get and set
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      class 1128834 "AtomicReferenceFieldUpdaterImpl"
	visibility private 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 921474 // AtomicReferenceFieldUpdater
	  rank 0 explicit_value ""
	actual class class_ref 921474 // AtomicReferenceFieldUpdater
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3645186 // <realization>
	  relation 3645186 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3645186 // <realization>
	    b parent class_ref 921474 // AtomicReferenceFieldUpdater
	end

	attribute 2158466 "U"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  init_value " sun.misc.Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2158594 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3645314 // cclass (<unidirectional association>)
	  relation 3645314 --->
	    a role_name "cclass" const_relation private
	      comment "
if field is protected, the subclass constructing updater, else
the same as tclass

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3645314 // cclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3645442 // tclass (<unidirectional association>)
	  relation 3645442 --->
	    a role_name "tclass" const_relation private
	      comment " class holding the field 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3645442 // tclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3645570 // vclass (<unidirectional association>)
	  relation 3645570 --->
	    a role_name "vclass" const_relation private
	      comment " field value type 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 3645570 // vclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 9280002 "AtomicReferenceFieldUpdaterImpl"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param in name "tclass" type class_ref 130818 // Class
	    param in name "vclass" type class_ref 130818 // Class
	    param in name "fieldName" type class_ref 128130 // String
	    param in name "caller" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0}<T> ${p0}, final ${t1}<V> ${p1}, final ${t2} ${p2}, final ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Internal type checks within all update methods contain
internal inlined optimizations checking for the common
cases where the class is final (in which case a simple
getClass comparison suffices) or is of type Object (in
which case no check is needed because all objects are
instances of Object). The Object case is handled simply by
setting vclass to null in constructor.  The targetCheck and
updateCheck methods are invoked when these faster
screenings fail.
"
	end

	operation 9280130 "isAncestor"
	  class_operation cpp_inline private explicit_return_type "boolean"
	  nparams 2
	    param inout name "first" type class_ref 129026 // ClassLoader
	    param inout name "second" type class_ref 129026 // ClassLoader
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the second classloader can be found in the first
classloader's delegation chain.
Equivalent to the inaccessible: first.isAncestor(second).
"
	end

	operation 9280258 "isSamePackage"
	  class_operation cpp_inline private explicit_return_type "boolean"
	  nparams 2
	    param inout name "class1" type class_ref 130818 // Class
	    param inout name "class2" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the two classes have the same class loader and
package qualifier
"
	end

	operation 9280386 "getPackageName"
	  class_operation cpp_inline private return_type class_ref 128130 // String
	  nparams 1
	    param inout name "cls" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9280514 "accessCheck"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Checks that target argument is instance of cclass.  On
failure, throws cause.
"
	end

	operation 9280642 "throwAccessCheckException"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Throws access exception if accessCheck failed due to
protected access, else ClassCastException.
"
	end

	operation 9280770 "valueCheck"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9280898 "throwCCE"
	  class_operation cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9281026 "compareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param inout name "expect" explicit_type "V"
	    param inout name "update" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9281154 "weakCompareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param inout name "expect" explicit_type "V"
	    param inout name "update" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9281282 "set"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param inout name "newValue" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9281410 "lazySet"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param inout name "newValue" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9281538 "get"
	  cpp_inline public explicit_return_type "V"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9281666 "getAndSet"
	  cpp_inline public explicit_return_type "V"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param inout name "newValue" explicit_type "V"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end
      end
    end

    class 1021954 "AtomicReference"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object reference that may be updated atomically. See the {@link
java.util.concurrent.atomic} package specification for description
of the properties of atomic variables.
@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference
"
      classrelation 3644802 // <realization>
	relation 3644802 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3644802 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2157314 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1848883965231344442L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2157442 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2157570 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 176642 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicReference.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 2157698 "value"
	volatile private explicit_type "V"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9274370 "AtomicReference"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "initialValue" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReference with the given initial value.

@param initialValue the initial value
"
      end

      operation 9274498 "AtomicReference"
	cpp_inline public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReference with null initial value.
"
      end

      operation 9274626 "get"
	cpp_inline public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value.

@return the current value
"
      end

      operation 9274754 "set"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given value.

@param newValue the new value
"
      end

      operation 9274882 "lazySet"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6
"
      end

      operation 9275010 "compareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.
@param expect the expected value
@param update the new value
@return {@code true} if successful. False return indicates that
the actual value was not equal to the expected value.
"
      end

      operation 9275138 "weakCompareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9275266 "getAndSet"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Atomically sets to the given value and returns the old value.

@param newValue the new value
@return the previous value
"
      end

      operation 9275394 "getAndUpdate"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "updateFunction" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9275522 "updateAndGet"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "updateFunction" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9275650 "getAndAccumulate"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "x" explicit_type "V"
	  param inout name "accumulatorFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function to the current and given values,
returning the previous value. The function should be
side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function
is applied with the current value as its first argument,
and the given update as the second argument.

@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9275778 "accumulateAndGet"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "x" explicit_type "V"
	  param inout name "accumulatorFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the current value with the results of
applying the given function to the current and given values,
returning the updated value. The function should be
side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function
is applied with the current value as its first argument,
and the given update as the second argument.

@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      operation 9275906 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value
"
      end
    end

    class 1127426 "AtomicIntegerArray"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@code int} array in which elements may be updated atomically.
See the {@link java.util.concurrent.atomic} package
specification for description of the properties of atomic
variables.
@since 1.5
@author Doug Lea
"
      classrelation 3643010 // <realization>
	relation 3643010 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3643010 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2154114 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2862133569453604235L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2154242 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2154370 "base"
	class_attribute const_attribute private explicit_type "int"
	init_value " unsafe.arrayBaseOffset(int[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2154498 "shift"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2154626 "array"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 176258 "initialization"
	
	cpp "" ""
	java "  static {
        int scale = unsafe.arrayIndexScale(int[].class);
        if ((scale & (scale - 1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        shift = 31 - Integer.numberOfLeadingZeros(scale);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9253378 "checkedByteOffset"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9253506 "byteOffset"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9253634 "AtomicIntegerArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicIntegerArray of the given length, with all
elements initially zero.

@param length the length of the array
"
      end

      operation 9253762 "AtomicIntegerArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicIntegerArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null
"
      end

      operation 9253890 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array
"
      end

      operation 9254018 "get"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value at position {@code i}.

@param i the index
@return the current value
"
      end

      operation 9254146 "getRaw"
	private explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9254274 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
"
      end

      operation 9254402 "lazySet"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
@since 1.6
"
      end

      operation 9254530 "getAndSet"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
value and returns the old value.

@param i the index
@param newValue the new value
@return the previous value
"
      end

      operation 9254658 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

@param i the index
@param expect the expected value
@param update the new value
@return {@code true} if successful. False return indicates that
the actual value was not equal to the expected value.
"
      end

      operation 9254786 "compareAndSetRaw"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "offset" explicit_type "long"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9254914 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param i the index
@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9255042 "getAndIncrement"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the previous value
"
      end

      operation 9255170 "getAndDecrement"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the previous value
"
      end

      operation 9255298 "getAndAdd"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the previous value
"
      end

      operation 9255426 "incrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the updated value
"
      end

      operation 9255554 "decrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the updated value
"
      end

      operation 9255682 "addAndGet"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the updated value
"
      end

      operation 9255810 "getAndUpdate"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "updateFunction" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the results
of applying the given function, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param i the index
@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9255938 "updateAndGet"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "updateFunction" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the results
of applying the given function, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param i the index
@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9256066 "getAndAccumulate"
	public explicit_return_type "int"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param inout name "accumulatorFunction" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the
results of applying the given function to the current and
given values, returning the previous value. The function should
be side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function is
applied with the current value at index {@code i} as its first
argument, and the given update as the second argument.

@param i the index
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9256194 "accumulateAndGet"
	public explicit_return_type "int"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param inout name "accumulatorFunction" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the
results of applying the given function to the current and
given values, returning the updated value. The function should
be side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function is
applied with the current value at index {@code i} as its first
argument, and the given update as the second argument.

@param i the index
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      operation 9256322 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array
"
      end
    end

    class 1127554 "AtomicIntegerFieldUpdater"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A reflection-based utility that enables atomic updates to
designated {@code volatile int} fields of designated classes.
This class is designed for use in atomic data structures in which
several fields of the same node are independently subject to atomic
updates.

<p>Note that the guarantees of the {@code compareAndSet}
method in this class are weaker than in other atomic classes.
Because this class cannot ensure that all uses of the field
are appropriate for purposes of atomic access, it can
guarantee atomicity only with respect to other invocations of
{@code compareAndSet} and {@code set} on the same updater.

@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field
"
      operation 9256450 "newUpdater"
	class_operation cpp_inline public return_type class_ref 1127554 // AtomicIntegerFieldUpdater
	nparams 2
	  param inout name "tclass" type class_ref 130818 // Class
	  param inout name "fieldName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Creates and returns an updater for objects with the given field.
The Class argument is needed to check that reflective types and
generic types match.

@param tclass the class of the objects holding the field
@param fieldName the name of the field to be updated
@param <U> the type of instances of tclass
@return the updater
@throws IllegalArgumentException if the field is not a
volatile integer type
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type,
or the field is inaccessible to the caller according to Java language
access control
"
      end

      operation 9256578 "AtomicIntegerFieldUpdater"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses.
"
      end

      operation 9256706 "compareAndSet"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return {@code true} if successful
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor
"
      end

      operation 9256834 "weakCompareAndSet"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return {@code true} if successful
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor
"
      end

      operation 9256962 "set"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the field of the given object managed by this updater to the
given updated value. This operation is guaranteed to act as a volatile
store with respect to subsequent invocations of {@code compareAndSet}.

@param obj An object whose field to set
@param newValue the new value
"
      end

      operation 9257090 "lazySet"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the field of the given object managed by this
updater to the given updated value.

@param obj An object whose field to set
@param newValue the new value
@since 1.6
"
      end

      operation 9257218 "get"
	abstract cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value held in the field of the given object managed
by this updater.

@param obj An object whose field to get
@return the current value
"
      end

      operation 9257346 "getAndSet"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given value and returns the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value
"
      end

      operation 9257474 "getAndIncrement"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value
"
      end

      operation 9257602 "getAndDecrement"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value
"
      end

      operation 9257730 "getAndAdd"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the previous value
"
      end

      operation 9257858 "incrementAndGet"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value
"
      end

      operation 9257986 "decrementAndGet"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value
"
      end

      operation 9258114 "addAndGet"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the updated value
"
      end

      operation 9258242 "getAndUpdate"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "updateFunction" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this updater
with the results of applying the given function, returning the previous
value. The function should be side-effect-free, since it may be
re-applied when attempted updates fail due to contention among threads.

@param obj An object whose field to get and set
@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9258370 "updateAndGet"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "updateFunction" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this updater
with the results of applying the given function, returning the updated
value. The function should be side-effect-free, since it may be
re-applied when attempted updates fail due to contention among threads.

@param obj An object whose field to get and set
@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9258498 "getAndAccumulate"
	cpp_inline public explicit_return_type "int"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "x" explicit_type "int"
	  param inout name "accumulatorFunction" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this
updater with the results of applying the given function to the
current and given values, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.  The
function is applied with the current value as its first argument,
and the given update as the second argument.

@param obj An object whose field to get and set
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9258626 "accumulateAndGet"
	cpp_inline public explicit_return_type "int"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "x" explicit_type "int"
	  param inout name "accumulatorFunction" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this
updater with the results of applying the given function to the
current and given values, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.  The
function is applied with the current value as its first argument,
and the given update as the second argument.

@param obj An object whose field to get and set
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      class 1127682 "AtomicIntegerFieldUpdaterImpl"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1127554 // AtomicIntegerFieldUpdater
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3643138 // <realization>
	  relation 3643138 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3643138 // <realization>
	    b parent class_ref 1127554 // AtomicIntegerFieldUpdater
	end

	attribute 2154754 "U"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  init_value " sun.misc.Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2154882 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3643266 // cclass (<unidirectional association>)
	  relation 3643266 --->
	    a role_name "cclass" const_relation private
	      comment "
if field is protected, the subclass constructing updater, else
the same as tclass

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3643266 // cclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3643394 // tclass (<unidirectional association>)
	  relation 3643394 --->
	    a role_name "tclass" const_relation private
	      comment " class holding the field 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3643394 // tclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 9258754 "AtomicIntegerFieldUpdaterImpl"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param in name "tclass" type class_ref 130818 // Class
	    param in name "fieldName" type class_ref 128130 // String
	    param in name "caller" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}, final ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9258882 "isAncestor"
	  class_operation cpp_inline private explicit_return_type "boolean"
	  nparams 2
	    param inout name "first" type class_ref 129026 // ClassLoader
	    param inout name "second" type class_ref 129026 // ClassLoader
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the second classloader can be found in the first
classloader's delegation chain.
Equivalent to the inaccessible: first.isAncestor(second).
"
	end

	operation 9259010 "isSamePackage"
	  class_operation cpp_inline private explicit_return_type "boolean"
	  nparams 2
	    param inout name "class1" type class_ref 130818 // Class
	    param inout name "class2" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the two classes have the same class loader and
package qualifier
"
	end

	operation 9259138 "getPackageName"
	  class_operation cpp_inline private return_type class_ref 128130 // String
	  nparams 1
	    param inout name "cls" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9259266 "accessCheck"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Checks that target argument is instance of cclass.  On
failure, throws cause.
"
	end

	operation 9259394 "throwAccessCheckException"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Throws access exception if accessCheck failed due to
protected access, else ClassCastException.
"
	end

	operation 9259522 "compareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "int"
	    param in name "update" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9259650 "weakCompareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "int"
	    param in name "update" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9259778 "set"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9259906 "lazySet"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260034 "get"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260162 "getAndSet"
	  cpp_inline public explicit_return_type "int"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260290 "getAndAdd"
	  cpp_inline public explicit_return_type "int"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "delta" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260418 "getAndIncrement"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260546 "getAndDecrement"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260674 "incrementAndGet"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260802 "decrementAndGet"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9260930 "addAndGet"
	  cpp_inline public explicit_return_type "int"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "delta" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1127938 "AtomicLongArray"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code long} array in which elements may be updated atomically.
See the {@link java.util.concurrent.atomic} package specification
for description of the properties of atomic variables.
@since 1.5
@author Doug Lea
"
      classrelation 3643778 // <realization>
	relation 3643778 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3643778 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2155650 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2308431214976778248L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2155778 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2155906 "base"
	class_attribute const_attribute private explicit_type "int"
	init_value " unsafe.arrayBaseOffset(long[].class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2156034 "shift"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2156162 "array"
	const_attribute private explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 176514 "initialization"
	
	cpp "" ""
	java "  static {
        int scale = unsafe.arrayIndexScale(long[].class);
        if ((scale & (scale - 1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        shift = 31 - Integer.numberOfLeadingZeros(scale);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9264130 "checkedByteOffset"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9264258 "byteOffset"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9264386 "AtomicLongArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLongArray of the given length, with all
elements initially zero.

@param length the length of the array
"
      end

      operation 9264514 "AtomicLongArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "long"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLongArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null
"
      end

      operation 9264642 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array
"
      end

      operation 9264770 "get"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value at position {@code i}.

@param i the index
@return the current value
"
      end

      operation 9264898 "getRaw"
	private explicit_return_type "long"
	nparams 1
	  param in name "offset" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9265026 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
"
      end

      operation 9265154 "lazySet"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
@since 1.6
"
      end

      operation 9265282 "getAndSet"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given value
and returns the old value.

@param i the index
@param newValue the new value
@return the previous value
"
      end

      operation 9265410 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

@param i the index
@param expect the expected value
@param update the new value
@return {@code true} if successful. False return indicates that
the actual value was not equal to the expected value.
"
      end

      operation 9265538 "compareAndSetRaw"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "offset" explicit_type "long"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9265666 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param i the index
@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9265794 "getAndIncrement"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the previous value
"
      end

      operation 9265922 "getAndDecrement"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the previous value
"
      end

      operation 9266050 "getAndAdd"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the previous value
"
      end

      operation 9266178 "incrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the updated value
"
      end

      operation 9266306 "decrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the updated value
"
      end

      operation 9266434 "addAndGet"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the updated value
"
      end

      operation 9266562 "getAndUpdate"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "updateFunction" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the results
of applying the given function, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param i the index
@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9266690 "updateAndGet"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "updateFunction" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the results
of applying the given function, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param i the index
@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9266818 "getAndAccumulate"
	public explicit_return_type "long"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "x" explicit_type "long"
	  param inout name "accumulatorFunction" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the
results of applying the given function to the current and
given values, returning the previous value. The function should
be side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function is
applied with the current value at index {@code i} as its first
argument, and the given update as the second argument.

@param i the index
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9266946 "accumulateAndGet"
	public explicit_return_type "long"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "x" explicit_type "long"
	  param inout name "accumulatorFunction" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the
results of applying the given function to the current and
given values, returning the updated value. The function should
be side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function is
applied with the current value at index {@code i} as its first
argument, and the given update as the second argument.

@param i the index
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      operation 9267074 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array
"
      end
    end

    class 1128066 "AtomicLongFieldUpdater"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A reflection-based utility that enables atomic updates to
designated {@code volatile long} fields of designated classes.
This class is designed for use in atomic data structures in which
several fields of the same node are independently subject to atomic
updates.

<p>Note that the guarantees of the {@code compareAndSet}
method in this class are weaker than in other atomic classes.
Because this class cannot ensure that all uses of the field
are appropriate for purposes of atomic access, it can
guarantee atomicity only with respect to other invocations of
{@code compareAndSet} and {@code set} on the same updater.

@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field
"
      operation 9267202 "newUpdater"
	class_operation cpp_inline public return_type class_ref 1128066 // AtomicLongFieldUpdater
	nparams 2
	  param inout name "tclass" type class_ref 130818 // Class
	  param inout name "fieldName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Creates and returns an updater for objects with the given field.
The Class argument is needed to check that reflective types and
generic types match.

@param tclass the class of the objects holding the field
@param fieldName the name of the field to be updated
@param <U> the type of instances of tclass
@return the updater
@throws IllegalArgumentException if the field is not a
volatile long type
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type,
or the field is inaccessible to the caller according to Java language
access control
"
      end

      operation 9267330 "AtomicLongFieldUpdater"
	cpp_inline protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses.
"
      end

      operation 9267458 "compareAndSet"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return {@code true} if successful
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor
"
      end

      operation 9267586 "weakCompareAndSet"
	abstract cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return {@code true} if successful
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor
"
      end

      operation 9267714 "set"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the field of the given object managed by this updater to the
given updated value. This operation is guaranteed to act as a volatile
store with respect to subsequent invocations of {@code compareAndSet}.

@param obj An object whose field to set
@param newValue the new value
"
      end

      operation 9267842 "lazySet"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the field of the given object managed by this
updater to the given updated value.

@param obj An object whose field to set
@param newValue the new value
@since 1.6
"
      end

      operation 9267970 "get"
	abstract cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value held in the field of the given object managed
by this updater.

@param obj An object whose field to get
@return the current value
"
      end

      operation 9268098 "getAndSet"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given value and returns the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value
"
      end

      operation 9268226 "getAndIncrement"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value
"
      end

      operation 9268354 "getAndDecrement"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value
"
      end

      operation 9268482 "getAndAdd"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the previous value
"
      end

      operation 9268610 "incrementAndGet"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value
"
      end

      operation 9268738 "decrementAndGet"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value
"
      end

      operation 9268866 "addAndGet"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the updated value
"
      end

      operation 9268994 "getAndUpdate"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "updateFunction" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this updater
with the results of applying the given function, returning the previous
value. The function should be side-effect-free, since it may be
re-applied when attempted updates fail due to contention among threads.

@param obj An object whose field to get and set
@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9269122 "updateAndGet"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "updateFunction" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this updater
with the results of applying the given function, returning the updated
value. The function should be side-effect-free, since it may be
re-applied when attempted updates fail due to contention among threads.

@param obj An object whose field to get and set
@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9269250 "getAndAccumulate"
	cpp_inline public explicit_return_type "long"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "x" explicit_type "long"
	  param inout name "accumulatorFunction" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this
updater with the results of applying the given function to the
current and given values, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.  The
function is applied with the current value as its first argument,
and the given update as the second argument.

@param obj An object whose field to get and set
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9269378 "accumulateAndGet"
	cpp_inline public explicit_return_type "long"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "x" explicit_type "long"
	  param inout name "accumulatorFunction" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the field of the given object managed by this
updater with the results of applying the given function to the
current and given values, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.  The
function is applied with the current value as its first argument,
and the given update as the second argument.

@param obj An object whose field to get and set
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      class 1128194 "CASUpdater"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1128066 // AtomicLongFieldUpdater
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3643906 // <realization>
	  relation 3643906 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3643906 // <realization>
	    b parent class_ref 1128066 // AtomicLongFieldUpdater
	end

	attribute 2156290 "U"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  init_value " sun.misc.Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2156418 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3644034 // cclass (<unidirectional association>)
	  relation 3644034 --->
	    a role_name "cclass" const_relation private
	      comment "
if field is protected, the subclass constructing updater, else
the same as tclass

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3644034 // cclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3644162 // tclass (<unidirectional association>)
	  relation 3644162 --->
	    a role_name "tclass" const_relation private
	      comment " class holding the field 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3644162 // tclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 9269506 "CASUpdater"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param in name "tclass" type class_ref 130818 // Class
	    param in name "fieldName" type class_ref 128130 // String
	    param in name "caller" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}, final ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9269634 "accessCheck"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Checks that target argument is instance of cclass.  On
failure, throws cause.
"
	end

	operation 9269762 "throwAccessCheckException"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Throws access exception if accessCheck failed due to
protected access, else ClassCastException.
"
	end

	operation 9269890 "compareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270018 "weakCompareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270146 "set"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270274 "lazySet"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270402 "get"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270530 "getAndSet"
	  cpp_inline public explicit_return_type "long"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270658 "getAndAdd"
	  cpp_inline public explicit_return_type "long"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "delta" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270786 "getAndIncrement"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9270914 "getAndDecrement"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9271042 "incrementAndGet"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9271170 "decrementAndGet"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9271298 "addAndGet"
	  cpp_inline public explicit_return_type "long"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "delta" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1128322 "LockedUpdater"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1128066 // AtomicLongFieldUpdater
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3644290 // <realization>
	  relation 3644290 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3644290 // <realization>
	    b parent class_ref 1128066 // AtomicLongFieldUpdater
	end

	attribute 2156546 "U"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  init_value " sun.misc.Unsafe.getUnsafe()"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2156674 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3644418 // cclass (<unidirectional association>)
	  relation 3644418 --->
	    a role_name "cclass" const_relation private
	      comment "
if field is protected, the subclass constructing updater, else
the same as tclass

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3644418 // cclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3644546 // tclass (<unidirectional association>)
	  relation 3644546 --->
	    a role_name "tclass" const_relation private
	      comment " class holding the field 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3644546 // tclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 9271426 "LockedUpdater"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param in name "tclass" type class_ref 130818 // Class
	    param in name "fieldName" type class_ref 128130 // String
	    param in name "caller" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}, final ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9271554 "accessCheck"
	  cpp_inline private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Checks that target argument is instance of cclass.  On
failure, throws cause.
"
	end

	operation 9271682 "accessCheckException"
	  cpp_inline private return_type class_ref 214786 // RuntimeException
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns access exception if accessCheck failed due to
protected access, else ClassCastException.
"
	end

	operation 9271810 "compareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9271938 "weakCompareAndSet"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9272066 "set"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9272194 "lazySet"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9272322 "get"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9272450 "isAncestor"
	class_operation cpp_inline package explicit_return_type "boolean"
	nparams 2
	  param inout name "first" type class_ref 129026 // ClassLoader
	  param inout name "second" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the second classloader can be found in the first
classloader's delegation chain.
Equivalent to the inaccessible: first.isAncestor(second).
"
      end

      operation 9272578 "isSamePackage"
	class_operation cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "class1" type class_ref 130818 // Class
	  param inout name "class2" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the two classes have the same class loader and
package qualifier
"
      end

      operation 9272706 "getPackageName"
	class_operation cpp_inline private return_type class_ref 128130 // String
	nparams 1
	  param inout name "cls" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1128450 "AtomicMarkableReference"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@code AtomicMarkableReference} maintains an object reference
along with a mark bit, that can be updated atomically.

<p>Implementation note: This implementation maintains markable
references by creating internal objects representing \"boxed\"
[reference, boolean] pairs.

@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference
"
      class 1128578 "Pair"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2156802 "reference"
	  const_attribute package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2156930 "mark"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9272834 "Pair"
	  cpp_inline private explicit_return_type ""
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param inout name "mark" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9272962 "of"
	  class_operation cpp_inline package return_type class_ref 1128578 // Pair
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param inout name "mark" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3644674 // pair (<unidirectional association>)
	relation 3644674 --->
	  a role_name "pair" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 3644674 // pair (<unidirectional association>)
	  b parent class_ref 1128578 // Pair
      end

      operation 9273090 "AtomicMarkableReference"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "initialRef" explicit_type "V"
	  param inout name "initialMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicMarkableReference} with the given
initial values.

@param initialRef the initial reference
@param initialMark the initial mark
"
      end

      operation 9273218 "getReference"
	cpp_inline public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the reference.

@return the current value of the reference
"
      end

      operation 9273346 "isMarked"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the mark.

@return the current value of the mark
"
      end

      operation 9273474 "get"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "markHolder" explicit_type "boolean"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current values of both the reference and the mark.
Typical usage is {@code boolean[1] holder; ref = v.get(holder); }.

@param markHolder an array of size of at least one. On return,
{@code markholder[0]} will hold the value of the mark.
@return the current value of the reference
"
      end

      operation 9273602 "weakCompareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param inout name "expectedMark" explicit_type "boolean"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and mark
to the given update values if the
current reference is {@code ==} to the expected reference
and the current mark is equal to the expected mark.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedMark the expected value of the mark
@param newMark the new value for the mark
@return {@code true} if successful
"
      end

      operation 9273730 "compareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param inout name "expectedMark" explicit_type "boolean"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and mark
to the given update values if the
current reference is {@code ==} to the expected reference
and the current mark is equal to the expected mark.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedMark the expected value of the mark
@param newMark the new value for the mark
@return {@code true} if successful
"
      end

      operation 9273858 "set"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "newReference" explicit_type "V"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets the value of both the reference and mark.

@param newReference the new value for the reference
@param newMark the new value for the mark
"
      end

      operation 9273986 "attemptMark"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newMark" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of the mark to the given update value
if the current reference is {@code ==} to the expected
reference.  Any given invocation of this operation may fail
(return {@code false}) spuriously, but repeated invocation
when the current value holds the expected value and no other
thread is also attempting to set the value will eventually
succeed.

@param expectedReference the expected value of the reference
@param newMark the new value for the mark
@return {@code true} if successful
"
      end

      attribute 2157058 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	init_value " sun.misc.Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2157186 "pairOffset"
	class_attribute const_attribute private explicit_type "long"
	init_value "
        objectFieldOffset(UNSAFE, \"pair\", AtomicMarkableReference.class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9274114 "casPair"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1128578 // Pair
	  param inout name "val" type class_ref 1128578 // Pair
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<V> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9274242 "objectFieldOffset"
	class_operation cpp_inline package explicit_return_type "long"
	nparams 3
	  param inout name "UNSAFE" explicit_type "sun.misc.Unsafe"
	  param inout name "field" type class_ref 128130 // String
	  param inout name "klazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1128706 "AtomicReferenceArray"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An array of object references in which elements may be updated
atomically.  See the {@link java.util.concurrent.atomic} package
specification for description of the properties of atomic
variables.
@since 1.5
@author Doug Lea
@param <E> The base class of elements held in this array
"
      classrelation 3644930 // <realization>
	relation 3644930 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3644930 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2157826 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6209656149925076980L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2157954 "unsafe"
	class_attribute const_attribute private explicit_type "Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2158082 "base"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2158210 "shift"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2158338 "arrayFieldOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3645058 // array (<unidirectional association>)
	relation 3645058 --->
	  a role_name "array" multiplicity "[]" const_relation private
	    comment " must have exact type Object[]"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3645058 // array (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      extra_member 176770 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            unsafe = Unsafe.getUnsafe();
            arrayFieldOffset = unsafe.objectFieldOffset
                (AtomicReferenceArray.class.getDeclaredField(\"array\"));
            base = unsafe.arrayBaseOffset(Object[].class);
            int scale = unsafe.arrayIndexScale(Object[].class);
            if ((scale & (scale - 1)) != 0)
                throw new Error(\"data type scale not a power of two\");
            shift = 31 - Integer.numberOfLeadingZeros(scale);
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9276034 "checkedByteOffset"
	cpp_inline private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9276162 "byteOffset"
	class_operation cpp_inline private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9276290 "AtomicReferenceArray"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReferenceArray of the given length, with all
elements initially null.

@param length the length of the array
"
      end

      operation 9276418 "AtomicReferenceArray"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "E"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReferenceArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null
"
      end

      operation 9276546 "length"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array
"
      end

      operation 9276674 "get"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value at position {@code i}.

@param i the index
@return the current value
"
      end

      operation 9276802 "getRaw"
	cpp_inline private explicit_return_type "E"
	nparams 1
	  param in name "offset" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9276930 "set"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
"
      end

      operation 9277058 "lazySet"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
@since 1.6
"
      end

      operation 9277186 "getAndSet"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
value and returns the old value.

@param i the index
@param newValue the new value
@return the previous value
"
      end

      operation 9277314 "compareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

@param i the index
@param expect the expected value
@param update the new value
@return {@code true} if successful. False return indicates that
the actual value was not equal to the expected value.
"
      end

      operation 9277442 "compareAndSetRaw"
	cpp_inline private explicit_return_type "boolean"
	nparams 3
	  param in name "offset" explicit_type "long"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9277570 "weakCompareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param i the index
@param expect the expected value
@param update the new value
@return {@code true} if successful
"
      end

      operation 9277698 "getAndUpdate"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "updateFunction" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the results
of applying the given function, returning the previous value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param i the index
@param updateFunction a side-effect-free function
@return the previous value
@since 1.8
"
      end

      operation 9277826 "updateAndGet"
	cpp_inline public explicit_return_type "E"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "updateFunction" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the results
of applying the given function, returning the updated value. The
function should be side-effect-free, since it may be re-applied
when attempted updates fail due to contention among threads.

@param i the index
@param updateFunction a side-effect-free function
@return the updated value
@since 1.8
"
      end

      operation 9277954 "getAndAccumulate"
	cpp_inline public explicit_return_type "E"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "x" explicit_type "E"
	  param inout name "accumulatorFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<E> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the
results of applying the given function to the current and
given values, returning the previous value. The function should
be side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function is
applied with the current value at index {@code i} as its first
argument, and the given update as the second argument.

@param i the index
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the previous value
@since 1.8
"
      end

      operation 9278082 "accumulateAndGet"
	cpp_inline public explicit_return_type "E"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "x" explicit_type "E"
	  param inout name "accumulatorFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<E> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically updates the element at index {@code i} with the
results of applying the given function to the current and
given values, returning the updated value. The function should
be side-effect-free, since it may be re-applied when attempted
updates fail due to contention among threads.  The function is
applied with the current value at index {@code i} as its first
argument, and the given update as the second argument.

@param i the index
@param x the update value
@param accumulatorFunction a side-effect-free function of two arguments
@return the updated value
@since 1.8
"
      end

      operation 9278210 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array
"
      end

      operation 9278338 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the instance from a stream (that is, deserializes it).
"
      end
    end

    class 1128962 "AtomicStampedReference"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@code AtomicStampedReference} maintains an object reference
along with an integer \"stamp\", that can be updated atomically.

<p>Implementation note: This implementation maintains stamped
references by creating internal objects representing \"boxed\"
[reference, integer] pairs.

@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference
"
      class 1129090 "Pair"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2158722 "reference"
	  const_attribute package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2158850 "stamp"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9281794 "Pair"
	  cpp_inline private explicit_return_type ""
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param in name "stamp" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9281922 "of"
	  class_operation cpp_inline package return_type class_ref 1129090 // Pair
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param in name "stamp" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3645698 // pair (<unidirectional association>)
	relation 3645698 --->
	  a role_name "pair" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 3645698 // pair (<unidirectional association>)
	  b parent class_ref 1129090 // Pair
      end

      operation 9282050 "AtomicStampedReference"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "initialRef" explicit_type "V"
	  param in name "initialStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicStampedReference} with the given
initial values.

@param initialRef the initial reference
@param initialStamp the initial stamp
"
      end

      operation 9282178 "getReference"
	cpp_inline public explicit_return_type "V"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the reference.

@return the current value of the reference
"
      end

      operation 9282306 "getStamp"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the stamp.

@return the current value of the stamp
"
      end

      operation 9282434 "get"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "stampHolder" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current values of both the reference and the stamp.
Typical usage is {@code int[1] holder; ref = v.get(holder); }.

@param stampHolder an array of size of at least one.  On return,
{@code stampholder[0]} will hold the value of the stamp.
@return the current value of the reference
"
      end

      operation 9282562 "weakCompareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param in name "expectedStamp" explicit_type "int"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and stamp
to the given update values if the
current reference is {@code ==} to the expected reference
and the current stamp is equal to the expected stamp.

<p><a href=\"package-summary.html#weakCompareAndSet\">May fail
spuriously and does not provide ordering guarantees</a>, so is
only rarely an appropriate alternative to {@code compareAndSet}.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedStamp the expected value of the stamp
@param newStamp the new value for the stamp
@return {@code true} if successful
"
      end

      operation 9282690 "compareAndSet"
	cpp_inline public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param in name "expectedStamp" explicit_type "int"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and stamp
to the given update values if the
current reference is {@code ==} to the expected reference
and the current stamp is equal to the expected stamp.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedStamp the expected value of the stamp
@param newStamp the new value for the stamp
@return {@code true} if successful
"
      end

      operation 9282818 "set"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "newReference" explicit_type "V"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets the value of both the reference and stamp.

@param newReference the new value for the reference
@param newStamp the new value for the stamp
"
      end

      operation 9282946 "attemptStamp"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "expectedReference" explicit_type "V"
	  param in name "newStamp" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of the stamp to the given update value
if the current reference is {@code ==} to the expected
reference.  Any given invocation of this operation may fail
(return {@code false}) spuriously, but repeated invocation
when the current value holds the expected value and no other
thread is also attempting to set the value will eventually
succeed.

@param expectedReference the expected value of the reference
@param newStamp the new value for the stamp
@return {@code true} if successful
"
      end

      attribute 2158978 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	init_value " sun.misc.Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2159106 "pairOffset"
	class_attribute const_attribute private explicit_type "long"
	init_value "
        objectFieldOffset(UNSAFE, \"pair\", AtomicStampedReference.class)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9283074 "casPair"
	cpp_inline private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 1129090 // Pair
	  param inout name "val" type class_ref 1129090 // Pair
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<V> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9283202 "objectFieldOffset"
	class_operation cpp_inline package explicit_return_type "long"
	nparams 3
	  param inout name "UNSAFE" explicit_type "sun.misc.Unsafe"
	  param inout name "field" type class_ref 128130 // String
	  param inout name "klazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1129218 "DoubleAccumulator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "One or more variables that together maintain a running {@code double}
value updated using a supplied function.  When updates (method
{@link #accumulate}) are contended across threads, the set of variables
may grow dynamically to reduce contention.  Method {@link #get}
(or, equivalently, {@link #doubleValue}) returns the current value
across the variables maintaining updates.

<p>This class is usually preferable to alternatives when multiple
threads update a common value that is used for purposes such as
summary statistics that are frequently updated but less frequently
read.

<p>The supplied accumulator function should be side-effect-free,
since it may be re-applied when attempted updates fail due to
contention among threads. The function is applied with the current
value as its first argument, and the given update as the second
argument.  For example, to maintain a running maximum value, you
could supply {@code Double::max} along with {@code
Double.NEGATIVE_INFINITY} as the identity. The order of
accumulation within or across threads is not guaranteed. Thus, this
class may not be applicable if numerical stability is required,
especially when combining values of substantially different orders
of magnitude.

<p>Class {@link DoubleAdder} provides analogs of the functionality
of this class for the common special case of maintaining sums.  The
call {@code new DoubleAdder()} is equivalent to {@code new
DoubleAccumulator((x, y) -> x + y, 0.0)}.

<p>This class extends {@link Number}, but does <em>not</em> define
methods such as {@code equals}, {@code hashCode} and {@code
compareTo} because instances are expected to be mutated, and so are
not useful as collection keys.

@since 1.8
@author Doug Lea
"
      classrelation 3646082 // <generalisation>
	relation 3646082 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3646082 // <generalisation>
	  b parent class_ref 1129346 // Striped64
      end

      classrelation 3646210 // <realization>
	relation 3646210 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3646210 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2160514 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7249069246863182397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3646338 // function (<unidirectional association>)
	relation 3646338 --->
	  a role_name "function" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3646338 // function (<unidirectional association>)
	  b parent class_ref 1067138 // DoubleBinaryOperator
      end

      attribute 2160642 "identity"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use long representation"
      end

      operation 9284482 "DoubleAccumulator"
	public explicit_return_type ""
	nparams 2
	  param inout name "accumulatorFunction" type class_ref 1067138 // DoubleBinaryOperator
	  param in name "identity" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance using the given accumulator function
and identity element.
@param accumulatorFunction a side-effect-free function of two arguments
@param identity identity (initial value) for the accumulator function
"
      end

      operation 9284610 "accumulate"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates with the given value.

@param x the value
"
      end

      operation 9284738 "get"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value.  The returned value is <em>NOT</em>
an atomic snapshot; invocation in the absence of concurrent
updates returns an accurate result, but concurrent updates that
occur while the value is being calculated might not be
incorporated.

@return the current value
"
      end

      operation 9284866 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets variables maintaining updates to the identity value.
This method may be a useful alternative to creating a new
updater, but is only effective if there are no concurrent
updates.  Because this method is intrinsically racy, it should
only be used when it is known that no threads are concurrently
updating.
"
      end

      operation 9284994 "getThenReset"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent in effect to {@link #get} followed by {@link
#reset}. This method may apply for example during quiescent
points between multithreaded computations.  If there are
updates concurrent with this method, the returned value is
<em>not</em> guaranteed to be the final value occurring before
the reset.

@return the value before reset
"
      end

      operation 9285122 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value
"
      end

      operation 9285250 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@link #get}.

@return the current value
"
      end

      operation 9285378 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@linkplain #get current value} as a {@code long}
after a narrowing primitive conversion.
"
      end

      operation 9285506 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@linkplain #get current value} as an {@code int}
after a narrowing primitive conversion.
"
      end

      operation 9285634 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@linkplain #get current value} as a {@code float}
after a narrowing primitive conversion.
"
      end

      class 1129602 "SerializationProxy"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3646466 // <realization>
	  relation 3646466 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3646466 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2160770 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7249069246863182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2160898 "value"
	  const_attribute private explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The current value returned by get().
@serial

"
	end

	classrelation 3646594 // function (<unidirectional association>)
	  relation 3646594 --->
	    a role_name "function" const_relation private
	      comment "
The function used for updates.
@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3646594 // function (<unidirectional association>)
	    b parent class_ref 1067138 // DoubleBinaryOperator
	end

	attribute 2161026 "identity"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The identity value
@serial

"
	end

	operation 9285762 "SerializationProxy"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "a" type class_ref 1129218 // DoubleAccumulator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9285890 "readResolve"
	  private return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a {@code DoubleAccumulator} object with initial state
held by this proxy.

@return a {@code DoubleAccumulator} object with initial state
held by this proxy.
"
	end
      end

      operation 9286018 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a
<a href=\"../../../../serialized-form.html#java.util.concurrent.atomic.DoubleAccumulator.SerializationProxy\">
SerializationProxy</a>
representing the state of this instance.

@return a {@link SerializationProxy}
representing the state of this instance
"
      end

      operation 9286146 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param s the stream
@throws java.io.InvalidObjectException always
"
      end
    end

    class 1129346 "Striped64"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A package-local class holding common representation and mechanics
for classes supporting dynamic striping on 64bit values. The class
extends Number so that concrete subclasses must publicly do so.
"
      classrelation 3645826 // <generalisation>
	relation 3645826 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3645826 // <generalisation>
	  b parent class_ref 398210 // Number
      end

      class 1129474 "Cell"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@sun.misc.Contended
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2159234 "value"
	  volatile package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9283330 "Cell"
	  package explicit_return_type ""
	  nparams 1
	    param in name "x" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9283458 "cas"
	  package explicit_return_type "boolean"
	  nparams 2
	    param in name "cmp" explicit_type "long"
	    param in name "val" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 2159362 "UNSAFE"
	  class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Unsafe mechanics
"
	end

	attribute 2159490 "valueOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 176898 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> ak = Cell.class;
                valueOffset = UNSAFE.objectFieldOffset
                    (ak.getDeclaredField(\"value\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      attribute 2159618 "NCPU"
	class_attribute const_attribute package explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of CPUS, to place bound on table size 
"
      end

      classrelation 3645954 // cells (<unidirectional association>)
	relation 3645954 --->
	  a role_name "cells" multiplicity "[]" volatile package
	    comment "
Table of cells. When non-null, size is a power of 2.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3645954 // cells (<unidirectional association>)
	  b parent class_ref 1129474 // Cell
      end

      attribute 2159746 "base"
	volatile package explicit_type "long"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Base value, used mainly when there is no contention, but also as
a fallback during table initialization races. Updated via CAS.

"
      end

      attribute 2159874 "cellsBusy"
	volatile package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Spinlock (locked via CAS) used when resizing and/or creating Cells.

"
      end

      operation 9283586 "Striped64"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private default constructor
"
      end

      operation 9283714 "casBase"
	package explicit_return_type "boolean"
	nparams 2
	  param in name "cmp" explicit_type "long"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CASes the base field.
"
      end

      operation 9283842 "casCellsBusy"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CASes the cellsBusy field from 0 to 1 to acquire lock.
"
      end

      operation 9283970 "getProbe"
	class_operation package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the probe value for the current thread.
Duplicated from ThreadLocalRandom because of packaging restrictions.
"
      end

      operation 9284098 "advanceProbe"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "probe" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pseudo-randomly advances and records the given probe value for the
given thread.
Duplicated from ThreadLocalRandom because of packaging restrictions.
"
      end

      operation 9284226 "longAccumulate"
	package explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "long"
	  param inout name "fn" type class_ref 1066882 // LongBinaryOperator
	  param inout name "wasUncontended" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles cases of updates involving initialization, resizing,
creating new Cells, and/or contention. See above for
explanation. This method suffers the usual non-modularity
problems of optimistic retry code, relying on rechecked sets of
reads.

@param x the value
@param fn the update function, or null for add (this convention
avoids the need for an extra field or function in LongAdder).
@param wasUncontended false if CAS failed before call
"
      end

      operation 9284354 "doubleAccumulate"
	package explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "double"
	  param inout name "fn" type class_ref 1067138 // DoubleBinaryOperator
	  param inout name "wasUncontended" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as longAccumulate, but injecting long/double conversions
in too many places to sensibly merge with long version, given
the low-overhead requirements of this class. So must instead be
maintained by copy/paste/adapt.
"
      end

      attribute 2160002 "UNSAFE"
	class_attribute const_attribute private explicit_type "sun.misc.Unsafe"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unsafe mechanics
"
      end

      attribute 2160130 "BASE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2160258 "CELLSBUSY"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2160386 "PROBE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 177026 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> sk = Striped64.class;
            BASE = UNSAFE.objectFieldOffset
                (sk.getDeclaredField(\"base\"));
            CELLSBUSY = UNSAFE.objectFieldOffset
                (sk.getDeclaredField(\"cellsBusy\"));
            Class<?> tk = Thread.class;
            PROBE = UNSAFE.objectFieldOffset
                (tk.getDeclaredField(\"threadLocalRandomProbe\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 1129730 "DoubleAdder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "One or more variables that together maintain an initially zero
{@code double} sum.  When updates (method {@link #add}) are
contended across threads, the set of variables may grow dynamically
to reduce contention.  Method {@link #sum} (or, equivalently {@link
#doubleValue}) returns the current total combined across the
variables maintaining the sum. The order of accumulation within or
across threads is not guaranteed. Thus, this class may not be
applicable if numerical stability is required, especially when
combining values of substantially different orders of magnitude.

<p>This class is usually preferable to alternatives when multiple
threads update a common value that is used for purposes such as
summary statistics that are frequently updated but less frequently
read.

<p>This class extends {@link Number}, but does <em>not</em> define
methods such as {@code equals}, {@code hashCode} and {@code
compareTo} because instances are expected to be mutated, and so are
not useful as collection keys.

@since 1.8
@author Doug Lea
"
      classrelation 3646722 // <generalisation>
	relation 3646722 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3646722 // <generalisation>
	  b parent class_ref 1129346 // Striped64
      end

      classrelation 3646850 // <realization>
	relation 3646850 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3646850 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2161154 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7249069246863182397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9286274 "DoubleAdder"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Note that we must use \"long\" for underlying representations,
because there is no compareAndSet for double, due to the fact
that the bitwise equals used in any CAS implementation is not
the same as double-precision equals.  However, we use CAS only
to detect and alleviate contention, for which bitwise equals
works best anyway. In principle, the long/double conversions
used here should be essentially free on most platforms since
they just re-interpret bits.


Creates a new adder with initial sum of zero.
"
      end

      operation 9286402 "add"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given value.

@param x the value to add
"
      end

      operation 9286530 "sum"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current sum.  The returned value is <em>NOT</em> an
atomic snapshot; invocation in the absence of concurrent
updates returns an accurate result, but concurrent updates that
occur while the sum is being calculated might not be
incorporated.  Also, because floating-point arithmetic is not
strictly associative, the returned result need not be identical
to the value that would be obtained in a sequential series of
updates to a single variable.

@return the sum
"
      end

      operation 9286658 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets variables maintaining the sum to zero.  This method may
be a useful alternative to creating a new adder, but is only
effective if there are no concurrent updates.  Because this
method is intrinsically racy, it should only be used when it is
known that no threads are concurrently updating.
"
      end

      operation 9286786 "sumThenReset"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent in effect to {@link #sum} followed by {@link
#reset}. This method may apply for example during quiescent
points between multithreaded computations.  If there are
updates concurrent with this method, the returned value is
<em>not</em> guaranteed to be the final value occurring before
the reset.

@return the sum
"
      end

      operation 9286914 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the {@link #sum}.
@return the String representation of the {@link #sum}
"
      end

      operation 9287042 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@link #sum}.

@return the sum
"
      end

      operation 9287170 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link #sum} as a {@code long} after a
narrowing primitive conversion.
"
      end

      operation 9287298 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link #sum} as an {@code int} after a
narrowing primitive conversion.
"
      end

      operation 9287426 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link #sum} as a {@code float}
after a narrowing primitive conversion.
"
      end

      class 1129858 "SerializationProxy"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3646978 // <realization>
	  relation 3646978 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3646978 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2161282 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7249069246863182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2161410 "value"
	  const_attribute private explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The current value returned by sum().
@serial

"
	end

	operation 9287554 "SerializationProxy"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "a" type class_ref 1129730 // DoubleAdder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9287682 "readResolve"
	  private return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a {@code DoubleAdder} object with initial state
held by this proxy.

@return a {@code DoubleAdder} object with initial state
held by this proxy.
"
	end
      end

      operation 9287810 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a
<a href=\"../../../../serialized-form.html#java.util.concurrent.atomic.DoubleAdder.SerializationProxy\">
SerializationProxy</a>
representing the state of this instance.

@return a {@link SerializationProxy}
representing the state of this instance
"
      end

      operation 9287938 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param s the stream
@throws java.io.InvalidObjectException always
"
      end
    end

    class 1129986 "LongAccumulator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "One or more variables that together maintain a running {@code long}
value updated using a supplied function.  When updates (method
{@link #accumulate}) are contended across threads, the set of variables
may grow dynamically to reduce contention.  Method {@link #get}
(or, equivalently, {@link #longValue}) returns the current value
across the variables maintaining updates.

<p>This class is usually preferable to {@link AtomicLong} when
multiple threads update a common value that is used for purposes such
as collecting statistics, not for fine-grained synchronization
control.  Under low update contention, the two classes have similar
characteristics. But under high contention, expected throughput of
this class is significantly higher, at the expense of higher space
consumption.

<p>The order of accumulation within or across threads is not
guaranteed and cannot be depended upon, so this class is only
applicable to functions for which the order of accumulation does
not matter. The supplied accumulator function should be
side-effect-free, since it may be re-applied when attempted updates
fail due to contention among threads. The function is applied with
the current value as its first argument, and the given update as
the second argument.  For example, to maintain a running maximum
value, you could supply {@code Long::max} along with {@code
Long.MIN_VALUE} as the identity.

<p>Class {@link LongAdder} provides analogs of the functionality of
this class for the common special case of maintaining counts and
sums.  The call {@code new LongAdder()} is equivalent to {@code new
LongAccumulator((x, y) -> x + y, 0L}.

<p>This class extends {@link Number}, but does <em>not</em> define
methods such as {@code equals}, {@code hashCode} and {@code
compareTo} because instances are expected to be mutated, and so are
not useful as collection keys.

@since 1.8
@author Doug Lea
"
      classrelation 3647106 // <generalisation>
	relation 3647106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3647106 // <generalisation>
	  b parent class_ref 1129346 // Striped64
      end

      classrelation 3647234 // <realization>
	relation 3647234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3647234 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2161538 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7249069246863182397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3647362 // function (<unidirectional association>)
	relation 3647362 --->
	  a role_name "function" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3647362 // function (<unidirectional association>)
	  b parent class_ref 1066882 // LongBinaryOperator
      end

      attribute 2161666 "identity"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9288066 "LongAccumulator"
	public explicit_return_type ""
	nparams 2
	  param inout name "accumulatorFunction" type class_ref 1066882 // LongBinaryOperator
	  param in name "identity" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance using the given accumulator function
and identity element.
@param accumulatorFunction a side-effect-free function of two arguments
@param identity identity (initial value) for the accumulator function
"
      end

      operation 9288194 "accumulate"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates with the given value.

@param x the value
"
      end

      operation 9288322 "get"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value.  The returned value is <em>NOT</em>
an atomic snapshot; invocation in the absence of concurrent
updates returns an accurate result, but concurrent updates that
occur while the value is being calculated might not be
incorporated.

@return the current value
"
      end

      operation 9288450 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets variables maintaining updates to the identity value.
This method may be a useful alternative to creating a new
updater, but is only effective if there are no concurrent
updates.  Because this method is intrinsically racy, it should
only be used when it is known that no threads are concurrently
updating.
"
      end

      operation 9288578 "getThenReset"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent in effect to {@link #get} followed by {@link
#reset}. This method may apply for example during quiescent
points between multithreaded computations.  If there are
updates concurrent with this method, the returned value is
<em>not</em> guaranteed to be the final value occurring before
the reset.

@return the value before reset
"
      end

      operation 9288706 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value
"
      end

      operation 9288834 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@link #get}.

@return the current value
"
      end

      operation 9288962 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@linkplain #get current value} as an {@code int}
after a narrowing primitive conversion.
"
      end

      operation 9289090 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@linkplain #get current value} as a {@code float}
after a widening primitive conversion.
"
      end

      operation 9289218 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@linkplain #get current value} as a {@code double}
after a widening primitive conversion.
"
      end

      class 1130114 "SerializationProxy"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3647490 // <realization>
	  relation 3647490 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3647490 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2161794 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7249069246863182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2161922 "value"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The current value returned by get().
@serial

"
	end

	classrelation 3647618 // function (<unidirectional association>)
	  relation 3647618 --->
	    a role_name "function" const_relation private
	      comment "
The function used for updates.
@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3647618 // function (<unidirectional association>)
	    b parent class_ref 1066882 // LongBinaryOperator
	end

	attribute 2162050 "identity"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The identity value
@serial

"
	end

	operation 9289346 "SerializationProxy"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "a" type class_ref 1129986 // LongAccumulator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9289474 "readResolve"
	  private return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a {@code LongAccumulator} object with initial state
held by this proxy.

@return a {@code LongAccumulator} object with initial state
held by this proxy.
"
	end
      end

      operation 9289602 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a
<a href=\"../../../../serialized-form.html#java.util.concurrent.atomic.LongAccumulator.SerializationProxy\">
SerializationProxy</a>
representing the state of this instance.

@return a {@link SerializationProxy}
representing the state of this instance
"
      end

      operation 9289730 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param s the stream
@throws java.io.InvalidObjectException always
"
      end
    end

    class 1130242 "LongAdder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "One or more variables that together maintain an initially zero
{@code long} sum.  When updates (method {@link #add}) are contended
across threads, the set of variables may grow dynamically to reduce
contention. Method {@link #sum} (or, equivalently, {@link
#longValue}) returns the current total combined across the
variables maintaining the sum.

<p>This class is usually preferable to {@link AtomicLong} when
multiple threads update a common sum that is used for purposes such
as collecting statistics, not for fine-grained synchronization
control.  Under low update contention, the two classes have similar
characteristics. But under high contention, expected throughput of
this class is significantly higher, at the expense of higher space
consumption.

<p>LongAdders can be used with a {@link
java.util.concurrent.ConcurrentHashMap} to maintain a scalable
frequency map (a form of histogram or multiset). For example, to
add a count to a {@code ConcurrentHashMap<String,LongAdder> freqs},
initializing if not already present, you can use {@code
freqs.computeIfAbsent(k -> new LongAdder()).increment();}

<p>This class extends {@link Number}, but does <em>not</em> define
methods such as {@code equals}, {@code hashCode} and {@code
compareTo} because instances are expected to be mutated, and so are
not useful as collection keys.

@since 1.8
@author Doug Lea
"
      classrelation 3647746 // <generalisation>
	relation 3647746 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3647746 // <generalisation>
	  b parent class_ref 1129346 // Striped64
      end

      classrelation 3647874 // <realization>
	relation 3647874 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3647874 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2162178 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7249069246863182397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9289858 "LongAdder"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new adder with initial sum of zero.
"
      end

      operation 9289986 "add"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given value.

@param x the value to add
"
      end

      operation 9290114 "increment"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code add(1)}.
"
      end

      operation 9290242 "decrement"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code add(-1)}.
"
      end

      operation 9290370 "sum"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current sum.  The returned value is <em>NOT</em> an
atomic snapshot; invocation in the absence of concurrent
updates returns an accurate result, but concurrent updates that
occur while the sum is being calculated might not be
incorporated.

@return the sum
"
      end

      operation 9290498 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets variables maintaining the sum to zero.  This method may
be a useful alternative to creating a new adder, but is only
effective if there are no concurrent updates.  Because this
method is intrinsically racy, it should only be used when it is
known that no threads are concurrently updating.
"
      end

      operation 9290626 "sumThenReset"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent in effect to {@link #sum} followed by {@link
#reset}. This method may apply for example during quiescent
points between multithreaded computations.  If there are
updates concurrent with this method, the returned value is
<em>not</em> guaranteed to be the final value occurring before
the reset.

@return the sum
"
      end

      operation 9290754 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the {@link #sum}.
@return the String representation of the {@link #sum}
"
      end

      operation 9290882 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@link #sum}.

@return the sum
"
      end

      operation 9291010 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link #sum} as an {@code int} after a narrowing
primitive conversion.
"
      end

      operation 9291138 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link #sum} as a {@code float}
after a widening primitive conversion.
"
      end

      operation 9291266 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link #sum} as a {@code double} after a widening
primitive conversion.
"
      end

      class 1130370 "SerializationProxy"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3648002 // <realization>
	  relation 3648002 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3648002 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 2162306 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7249069246863182397L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2162434 "value"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The current value returned by sum().
@serial

"
	end

	operation 9291394 "SerializationProxy"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "a" type class_ref 1130242 // LongAdder
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9291522 "readResolve"
	  private return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return a {@code LongAdder} object with initial state
held by this proxy.

@return a {@code LongAdder} object with initial state
held by this proxy.
"
	end
      end

      operation 9291650 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a
<a href=\"../../../../serialized-form.html#java.util.concurrent.atomic.LongAdder.SerializationProxy\">
SerializationProxy</a>
representing the state of this instance.

@return a {@link SerializationProxy}
representing the state of this instance
"
      end

      operation 9291778 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param s the stream
@throws java.io.InvalidObjectException always
"
      end
    end
  end

  deploymentview 170882 "atomic"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 811010 "AtomicBoolean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 357506 // AtomicBoolean
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 811138 "AtomicInteger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 191490 // AtomicInteger
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 811266 "AtomicIntegerArray"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 1127426 // AtomicIntegerArray
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 811394 "AtomicIntegerFieldUpdater"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Objects;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
${definition}"
      associated_elems
	class_ref 1127554 // AtomicIntegerFieldUpdater
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 811522 "AtomicLong"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.LongUnaryOperator;
import java.util.function.LongBinaryOperator;
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 256386 // AtomicLong
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 811650 "AtomicLongArray"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.LongUnaryOperator;
import java.util.function.LongBinaryOperator;
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 1127938 // AtomicLongArray
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 811778 "AtomicLongFieldUpdater"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Objects;
import java.util.function.LongBinaryOperator;
import java.util.function.LongUnaryOperator;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
${definition}"
      associated_elems
	class_ref 1128066 // AtomicLongFieldUpdater
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 811906 "AtomicMarkableReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1128450 // AtomicMarkableReference
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812034 "AtomicReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 1021954 // AtomicReference
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812162 "AtomicReferenceArray"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.Arrays;
import java.lang.reflect.Array;
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 1128706 // AtomicReferenceArray
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812290 "AtomicReferenceFieldUpdater"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Objects;
import java.util.function.BinaryOperator;
import java.util.function.UnaryOperator;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
${definition}"
      associated_elems
	class_ref 921474 // AtomicReferenceFieldUpdater
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812418 "AtomicStampedReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1128962 // AtomicStampedReference
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812546 "Striped64"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.concurrent.ThreadLocalRandom;
${definition}"
      associated_elems
	class_ref 1129346 // Striped64
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812674 "DoubleAccumulator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.function.DoubleBinaryOperator;
${definition}"
      associated_elems
	class_ref 1129218 // DoubleAccumulator
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812802 "DoubleAdder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 1129730 // DoubleAdder
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 812930 "LongAccumulator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.function.LongBinaryOperator;
${definition}"
      associated_elems
	class_ref 1129986 // LongAccumulator
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end

    artifact 813058 "LongAdder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 1130242 // LongAdder
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/
"
    end
  end
end
