format 222
"ext" // jdk1.8::org::xml::sax::ext
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/org/xml/sax/ext/"
  java_package "org.xml.sax.ext"
  classview 158978 "ext"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 617602 "LexicalHandler"
      abstract visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SAX2 extension handler for lexical events.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
for further information.
</blockquote>

<p>This is an optional extension handler for SAX2 to provide
lexical information about an XML document, such as comments
and CDATA section boundaries.
XML readers are not required to recognize this handler, and it
is not part of core-only SAX2 distributions.</p>

<p>The events in the lexical handler apply to the entire document,
not just to the document element, and all lexical handler events
must appear between the content handler's startDocument and
endDocument events.</p>

<p>To set the LexicalHandler for an XML reader, use the
{@link org.xml.sax.XMLReader#setProperty setProperty} method
with the property name
<code>http://xml.org/sax/properties/lexical-handler</code>
and an object implementing this interface (or null) as the value.
If the reader does not report lexical events, it will throw a
{@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}
when you attempt to register the handler.</p>

@since SAX 2.0 (extensions 1.0)
@author David Megginson
"
      operation 3895554 "startDTD"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the start of DTD declarations, if any.

<p>This method is intended to report the beginning of the
DOCTYPE declaration; if the document has no DOCTYPE declaration,
this method will not be invoked.</p>

<p>All declarations reported through
{@link org.xml.sax.DTDHandler DTDHandler} or
{@link org.xml.sax.ext.DeclHandler DeclHandler} events must appear
between the startDTD and {@link #endDTD endDTD} events.
Declarations are assumed to belong to the internal DTD subset
unless they appear between {@link #startEntity startEntity}
and {@link #endEntity endEntity} events.  Comments and
processing instructions from the DTD should also be reported
between the startDTD and endDTD events, in their original
order of (logical) occurrence; they are not required to
appear in their correct locations relative to DTDHandler
or DeclHandler events, however.</p>

<p>Note that the start/endDTD events will appear within
the start/endDocument events from ContentHandler and
before the first
{@link org.xml.sax.ContentHandler#startElement startElement}
event.</p>

@param name The document type name.
@param publicId The declared public identifier for the
       external DTD subset, or null if none was declared.
@param systemId The declared system identifier for the
       external DTD subset, or null if none was declared.
       (Note that this is not resolved against the document
       base URI.)
@exception SAXException The application may raise an
           exception.
@see #endDTD
@see #startEntity
"
      end

      operation 3895682 "endDTD"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the end of DTD declarations.

<p>This method is intended to report the end of the
DOCTYPE declaration; if the document has no DOCTYPE declaration,
this method will not be invoked.</p>

@exception SAXException The application may raise an exception.
@see #startDTD
"
      end

      operation 3895810 "startEntity"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the beginning of some internal and external XML entities.

<p>The reporting of parameter entities (including
the external DTD subset) is optional, and SAX2 drivers that
report LexicalHandler events may not implement it; you can use the
<code
>http://xml.org/sax/features/lexical-handler/parameter-entities</code>
feature to query or control the reporting of parameter entities.</p>

<p>General entities are reported with their regular names,
parameter entities have '%' prepended to their names, and
the external DTD subset has the pseudo-entity name \"[dtd]\".</p>

<p>When a SAX2 driver is providing these events, all other
events must be properly nested within start/end entity
events.  There is no additional requirement that events from
{@link org.xml.sax.ext.DeclHandler DeclHandler} or
{@link org.xml.sax.DTDHandler DTDHandler} be properly ordered.</p>

<p>Note that skipped entities will be reported through the
{@link org.xml.sax.ContentHandler#skippedEntity skippedEntity}
event, which is part of the ContentHandler interface.</p>

<p>Because of the streaming event model that SAX uses, some
entity boundaries cannot be reported under any
circumstances:</p>

<ul>
<li>general entities within attribute values</li>
<li>parameter entities within declarations</li>
</ul>

<p>These will be silently expanded, with no indication of where
the original entity boundaries were.</p>

<p>Note also that the boundaries of character references (which
are not really entities anyway) are not reported.</p>

<p>All start/endEntity events must be properly nested.

@param name The name of the entity.  If it is a parameter
       entity, the name will begin with '%', and if it is the
       external DTD subset, it will be \"[dtd]\".
@exception SAXException The application may raise an exception.
@see #endEntity
@see org.xml.sax.ext.DeclHandler#internalEntityDecl
@see org.xml.sax.ext.DeclHandler#externalEntityDecl
"
      end

      operation 3895938 "endEntity"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the end of an entity.

@param name The name of the entity that is ending.
@exception SAXException The application may raise an exception.
@see #startEntity
"
      end

      operation 3896066 "startCDATA"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the start of a CDATA section.

<p>The contents of the CDATA section will be reported through
the regular {@link org.xml.sax.ContentHandler#characters
characters} event; this event is intended only to report
the boundary.</p>

@exception SAXException The application may raise an exception.
@see #endCDATA
"
      end

      operation 3896194 "endCDATA"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the end of a CDATA section.

@exception SAXException The application may raise an exception.
@see #startCDATA
"
      end

      operation 3896322 "comment"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an XML comment anywhere in the document.

<p>This callback will be used for comments inside or outside the
document element, including comments in the external DTD
subset (if read).  Comments in the DTD must be properly
nested inside start/endDTD and start/endEntity events (if
used).</p>

@param ch An array holding the characters in the comment.
@param start The starting position in the array.
@param length The number of characters to use from the array.
@exception SAXException The application may raise an exception.
"
      end
    end

    class 617858 "DeclHandler"
      abstract visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SAX2 extension handler for DTD declaration events.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
for further information.
</blockquote>

<p>This is an optional extension handler for SAX2 to provide more
complete information about DTD declarations in an XML document.
XML readers are not required to recognize this handler, and it
is not part of core-only SAX2 distributions.</p>

<p>Note that data-related DTD declarations (unparsed entities and
notations) are already reported through the {@link
org.xml.sax.DTDHandler DTDHandler} interface.</p>

<p>If you are using the declaration handler together with a lexical
handler, all of the events will occur between the
{@link org.xml.sax.ext.LexicalHandler#startDTD startDTD} and the
{@link org.xml.sax.ext.LexicalHandler#endDTD endDTD} events.</p>

<p>To set the DeclHandler for an XML reader, use the
{@link org.xml.sax.XMLReader#setProperty setProperty} method
with the property name
<code>http://xml.org/sax/properties/declaration-handler</code>
and an object implementing this interface (or null) as the value.
If the reader does not report declaration events, it will throw a
{@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}
when you attempt to register the handler.</p>

@since SAX 2.0 (extensions 1.0)
@author David Megginson
"
      operation 3899010 "elementDecl"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "model" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an element type declaration.

<p>The content model will consist of the string \"EMPTY\", the
string \"ANY\", or a parenthesised group, optionally followed
by an occurrence indicator.  The model will be normalized so
that all parameter entities are fully resolved and all whitespace
is removed,and will include the enclosing parentheses.  Other
normalization (such as removing redundant parentheses or
simplifying occurrence indicators) is at the discretion of the
parser.</p>

@param name The element type name.
@param model The content model as a normalized string.
@exception SAXException The application may raise an exception.
"
      end

      operation 3899138 "attributeDecl"
	abstract public explicit_return_type "void"
	nparams 5
	  param inout name "eName" type class_ref 128130 // String
	  param inout name "aName" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "mode" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an attribute type declaration.

<p>Only the effective (first) declaration for an attribute will
be reported.  The type will be one of the strings \"CDATA\",
\"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",
\"ENTITIES\", a parenthesized token group with
the separator \"|\" and all whitespace removed, or the word
\"NOTATION\" followed by a space followed by a parenthesized
token group with all whitespace removed.</p>

<p>The value will be the value as reported to applications,
appropriately normalized and with entity and character
references expanded.  </p>

@param eName The name of the associated element.
@param aName The name of the attribute.
@param type A string representing the attribute type.
@param mode A string representing the attribute defaulting mode
       (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if
       none of these applies.
@param value A string representing the attribute's default value,
       or null if there is none.
@exception SAXException The application may raise an exception.
"
      end

      operation 3899266 "internalEntityDecl"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report an internal entity declaration.

<p>Only the effective (first) declaration for each entity
will be reported.  All parameter entities in the value
will be expanded, but general entities will not.</p>

@param name The name of the entity.  If it is a parameter
       entity, the name will begin with '%'.
@param value The replacement text of the entity.
@exception SAXException The application may raise an exception.
@see #externalEntityDecl
@see org.xml.sax.DTDHandler#unparsedEntityDecl
"
      end

      operation 3899394 "externalEntityDecl"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report a parsed external entity declaration.

<p>Only the effective (first) declaration for each entity
will be reported.</p>

<p>If the system identifier is a URL, the parser must resolve it
fully before passing it to the application.</p>

@param name The name of the entity.  If it is a parameter
       entity, the name will begin with '%'.
@param publicId The entity's public identifier, or null if none
       was given.
@param systemId The entity's system identifier.
@exception SAXException The application may raise an exception.
@see #internalEntityDecl
@see org.xml.sax.DTDHandler#unparsedEntityDecl
"
      end
    end

    class 640898 "Locator2"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SAX2 extension to augment the entity information provided
though a {@link Locator}.
If an implementation supports this extension, the Locator
provided in {@link org.xml.sax.ContentHandler#setDocumentLocator
ContentHandler.setDocumentLocator() } will implement this
interface, and the
<em>http://xml.org/sax/features/use-locator2</em> feature
flag will have the value <em>true</em>.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
</blockquote>

<p> XMLReader implementations are not required to support this
information, and it is not part of core-only SAX2 distributions.</p>

@since SAX 2.0 (extensions 1.1 alpha)
@author David Brownell
"
      classrelation 1747714 // <generalisation>
	relation 1747714 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1747714 // <generalisation>
	  b parent class_ref 606082 // Locator
      end

      operation 4091522 "getXMLVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of XML used for the entity.  This will
normally be the identifier from the current entity's
<em>&lt;?xml&nbsp;version='...'&nbsp;...?&gt;</em> declaration,
or be defaulted by the parser.

@return Identifier for the XML version being used to interpret
the entity's text, or null if that information is not yet
available in the current parsing state.
"
      end

      operation 4091650 "getEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the character encoding for the entity.
If the encoding was declared externally (for example, in a MIME
Content-Type header), that will be the name returned.  Else if there
was an <em>&lt;?xml&nbsp;...encoding='...'?&gt;</em> declaration at
the start of the document, that encoding name will be returned.
Otherwise the encoding will been inferred (normally to be UTF-8, or
some UTF-16 variant), and that inferred name will be returned.

<p>When an {@link org.xml.sax.InputSource InputSource} is used
to provide an entity's character stream, this method returns the
encoding provided in that input stream.

<p> Note that some recent W3C specifications require that text
in some encodings be normalized, using Unicode Normalization
Form C, before processing.  Such normalization must be performed
by applications, and would normally be triggered based on the
value returned by this method.

<p> Encoding names may be those used by the underlying JVM,
and comparisons should be case-insensitive.

@return Name of the character encoding being used to interpret
* the entity's text, or null if this was not provided for a *
character stream passed through an InputSource or is otherwise
not yet available in the current parsing state.
"
      end
    end

    class 722562 "Attributes2"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SAX2 extension to augment the per-attribute information
provided though {@link Attributes}.
If an implementation supports this extension, the attributes
provided in {@link org.xml.sax.ContentHandler#startElement
ContentHandler.startElement() } will implement this interface,
and the <em>http://xml.org/sax/features/use-attributes2</em>
feature flag will have the value <em>true</em>.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
</blockquote>

<p> XMLReader implementations are not required to support this
information, and it is not part of core-only SAX2 distributions.</p>

<p>Note that if an attribute was defaulted (<em>!isSpecified()</em>)
it will of necessity also have been declared (<em>isDeclared()</em>)
in the DTD.
Similarly if an attribute's type is anything except CDATA, then it
must have been declared.
</p>

@since SAX 2.0 (extensions 1.1 alpha)
@author David Brownell
"
      classrelation 2100226 // <generalisation>
	relation 2100226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2100226 // <generalisation>
	  b parent class_ref 593410 // Attributes
      end

      operation 4898050 "isDeclared"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns false unless the attribute was declared in the DTD.
This helps distinguish two kinds of attributes that SAX reports
as CDATA:  ones that were declared (and hence are usually valid),
and those that were not (and which are never valid).

@param index The attribute index (zero-based).
@return true if the attribute was declared in the DTD,
         false otherwise.
@exception java.lang.ArrayIndexOutOfBoundsException When the
           supplied index does not identify an attribute.
"
      end

      operation 4898178 "isDeclared"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "qName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns false unless the attribute was declared in the DTD.
This helps distinguish two kinds of attributes that SAX reports
as CDATA:  ones that were declared (and hence are usually valid),
and those that were not (and which are never valid).

@param qName The XML qualified (prefixed) name.
@return true if the attribute was declared in the DTD,
         false otherwise.
@exception java.lang.IllegalArgumentException When the
           supplied name does not identify an attribute.
"
      end

      operation 4898306 "isDeclared"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns false unless the attribute was declared in the DTD.
This helps distinguish two kinds of attributes that SAX reports
as CDATA:  ones that were declared (and hence are usually valid),
and those that were not (and which are never valid).

<p>Remember that since DTDs do not \"understand\" namespaces, the
namespace URI associated with an attribute may not have come from
the DTD.  The declaration will have applied to the attribute's
<em>qName</em>.

@param uri The Namespace URI, or the empty string if
       the name has no Namespace URI.
@param localName The attribute's local name.
@return true if the attribute was declared in the DTD,
         false otherwise.
@exception java.lang.IllegalArgumentException When the
           supplied names do not identify an attribute.
"
      end

      operation 4898434 "isSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true unless the attribute value was provided
by DTD defaulting.

@param index The attribute index (zero-based).
@return true if the value was found in the XML text,
         false if the value was provided by DTD defaulting.
@exception java.lang.ArrayIndexOutOfBoundsException When the
           supplied index does not identify an attribute.
"
      end

      operation 4898562 "isSpecified"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true unless the attribute value was provided
by DTD defaulting.

<p>Remember that since DTDs do not \"understand\" namespaces, the
namespace URI associated with an attribute may not have come from
the DTD.  The declaration will have applied to the attribute's
<em>qName</em>.

@param uri The Namespace URI, or the empty string if
       the name has no Namespace URI.
@param localName The attribute's local name.
@return true if the value was found in the XML text,
         false if the value was provided by DTD defaulting.
@exception java.lang.IllegalArgumentException When the
           supplied names do not identify an attribute.
"
      end

      operation 4898690 "isSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "qName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true unless the attribute value was provided
by DTD defaulting.

@param qName The XML qualified (prefixed) name.
@return true if the value was found in the XML text,
         false if the value was provided by DTD defaulting.
@exception java.lang.IllegalArgumentException When the
           supplied name does not identify an attribute.
"
      end
    end

    class 728194 "EntityResolver2"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Extended interface for mapping external entity references to input
sources, or providing a missing external subset.  The
{@link XMLReader#setEntityResolver XMLReader.setEntityResolver()} method
is used to provide implementations of this interface to parsers.
When a parser uses the methods in this interface, the
{@link EntityResolver2#resolveEntity EntityResolver2.resolveEntity()}
method (in this interface) is used <em>instead of</em> the older (SAX 1.0)
{@link EntityResolver#resolveEntity EntityResolver.resolveEntity()} method.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
</blockquote>

<p>If a SAX application requires the customized handling which this
interface defines for external entities, it must ensure that it uses
an XMLReader with the
<em>http://xml.org/sax/features/use-entity-resolver2</em> feature flag
set to <em>true</em> (which is its default value when the feature is
recognized).  If that flag is unrecognized, or its value is false,
or the resolver does not implement this interface, then only the
{@link EntityResolver} method will be used.
</p>

<p>That supports three categories of application that modify entity
resolution.  <em>Old Style</em> applications won't know about this interface;
they will provide an EntityResolver.
<em>Transitional Mode</em> provide an EntityResolver2 and automatically
get the benefit of its methods in any systems (parsers or other tools)
supporting it, due to polymorphism.
Both <em>Old Style</em> and <em>Transitional Mode</em> applications will
work with any SAX2 parser.
<em>New style</em> applications will fail to run except on SAX2 parsers
that support this particular feature.
They will insist that feature flag have a value of \"true\", and the
EntityResolver2 implementation they provide  might throw an exception
if the original SAX 1.0 style entity resolution method is invoked.
</p>

@see org.xml.sax.XMLReader#setEntityResolver

@since SAX 2.0 (extensions 1.1 alpha)
@author David Brownell
"
      classrelation 2125954 // <generalisation>
	relation 2125954 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2125954 // <generalisation>
	  b parent class_ref 619138 // EntityResolver
      end

      operation 4973442 "getExternalSubset"
	public return_type class_ref 606594 // InputSource
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "baseURI" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows applications to provide an external subset for documents
that don't explicitly define one.  Documents with DOCTYPE declarations
that omit an external subset can thus augment the declarations
available for validation, entity processing, and attribute processing
(normalization, defaulting, and reporting types including ID).
This augmentation is reported
through the {@link LexicalHandler#startDTD startDTD()} method as if
the document text had originally included the external subset;
this callback is made before any internal subset data or errors
are reported.</p>

<p>This method can also be used with documents that have no DOCTYPE
declaration.  When the root element is encountered,
but no DOCTYPE declaration has been seen, this method is
invoked.  If it returns a value for the external subset, that root
element is declared to be the root element, giving the effect of
splicing a DOCTYPE declaration at the end the prolog of a document
that could not otherwise be valid.  The sequence of parser callbacks
in that case logically resembles this:</p>

<pre>
... comments and PIs from the prolog (as usual)
startDTD (\"rootName\", source.getPublicId (), source.getSystemId ());
startEntity (\"[dtd]\");
... declarations, comments, and PIs from the external subset
endEntity (\"[dtd]\");
endDTD ();
... then the rest of the document (as usual)
startElement (..., \"rootName\", ...);
</pre>

<p>Note that the InputSource gets no further resolution.
Implementations of this method may wish to invoke
{@link #resolveEntity resolveEntity()} to gain benefits such as use
of local caches of DTD entities.  Also, this method will never be
used by a (non-validating) processor that is not including external
parameter entities. </p>

<p>Uses for this method include facilitating data validation when
interoperating with XML processors that would always require
undesirable network accesses for external entities, or which for
other reasons adopt a \"no DTDs\" policy.
Non-validation motives include forcing documents to include DTDs so
that attributes are handled consistently.
For example, an XPath processor needs to know which attibutes have
type \"ID\" before it can process a widely used type of reference.</p>

<p><strong>Warning:</strong> Returning an external subset modifies
the input document.  By providing definitions for general entities,
it can make a malformed document appear to be well formed.
</p>

@param name Identifies the document root element.  This name comes
 from a DOCTYPE declaration (where available) or from the actual
 root element.
@param baseURI The document's base URI, serving as an additional
 hint for selecting the external subset.  This is always an absolute
 URI, unless it is null because the XMLReader was given an InputSource
 without one.

@return An InputSource object describing the new external subset
 to be used by the parser, or null to indicate that no external
 subset is provided.

@exception SAXException Any SAX exception, possibly wrapping
 another exception.
@exception IOException Probably indicating a failure to create
 a new InputStream or Reader, or an illegal URL.
"
      end

      operation 4973570 "resolveEntity"
	public return_type class_ref 606594 // InputSource
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "baseURI" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows applications to map references to external entities into input
sources, or tell the parser it should use conventional URI resolution.
This method is only called for external entities which have been
properly declared.
This method provides more flexibility than the {@link EntityResolver}
interface, supporting implementations of more complex catalogue
schemes such as the one defined by the <a href=
\"http://www.oasis-open.org/committees/entity/spec-2001-08-06.html\"
>OASIS XML Catalogs</a> specification.</p>

<p>Parsers configured to use this resolver method will call it
to determine the input source to use for any external entity
being included because of a reference in the XML text.
That excludes the document entity, and any external entity returned
by {@link #getExternalSubset getExternalSubset()}.
When a (non-validating) processor is configured not to include
a class of entities (parameter or general) through use of feature
flags, this method is not invoked for such entities.  </p>

<p>Note that the entity naming scheme used here is the same one
used in the {@link LexicalHandler}, or in the {@link
org.xml.sax.ContentHandler#skippedEntity
ContentHandler.skippedEntity()}
method. </p>

@param name Identifies the external entity being resolved.
 Either \"[dtd]\" for the external subset, or a name starting
 with \"%\" to indicate a parameter entity, or else the name of
 a general entity.  This is never null when invoked by a SAX2
 parser.
@param publicId The public identifier of the external entity being
 referenced (normalized as required by the XML specification), or
 null if none was supplied.
@param baseURI The URI with respect to which relative systemIDs
 are interpreted.  This is always an absolute URI, unless it is
 null (likely because the XMLReader was given an InputSource without
 one).  This URI is defined by the XML specification to be the one
 associated with the \"&lt;\" starting the relevant declaration.
@param systemId The system identifier of the external entity
 being referenced; either a relative or absolute URI.
 This is never null when invoked by a SAX2 parser; only declared
 entities, and any external subset, are resolved by such parsers.

@return An InputSource object describing the new input source to
 be used by the parser.  Returning null directs the parser to
 resolve the system ID against the base URI and open a connection
 to resulting URI.

@exception SAXException Any SAX exception, possibly wrapping
 another exception.
@exception IOException Probably indicating a failure to create
 a new InputStream or Reader, or an illegal URL.
"
      end
    end

    class 1491202 "Attributes2Impl"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SAX2 extension helper for additional Attributes information,
implementing the {@link Attributes2} interface.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
</blockquote>

<p>This is not part of core-only SAX2 distributions.</p>

<p>The <em>specified</em> flag for each attribute will always
be true, unless it has been set to false in the copy constructor
or using {@link #setSpecified}.
Similarly, the <em>declared</em> flag for each attribute will
always be false, except for defaulted attributes (<em>specified</em>
is false), non-CDATA attributes, or when it is set to true using
{@link #setDeclared}.
If you change an attribute's type by hand, you may need to modify
its <em>declared</em> flag to match.
</p>

@since SAX 2.0 (extensions 1.1 alpha)
@author David Brownell
"
      classrelation 4931970 // <generalisation>
	relation 4931970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4931970 // <generalisation>
	  b parent class_ref 593282 // AttributesImpl
      end

      classrelation 4932098 // <realization>
	relation 4932098 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4932098 // <realization>
	  b parent class_ref 722562 // Attributes2
      end

      attribute 2674562 "declared"
	private explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2674690 "specified"
	private explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 12577666 "Attributes2Impl"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new, empty Attributes2Impl object.
"
      end

      operation 12577794 "Attributes2Impl"
	public explicit_return_type ""
	nparams 1
	  param inout name "atts" type class_ref 593410 // Attributes
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy an existing Attributes or Attributes2 object.
If the object implements Attributes2, values of the
<em>specified</em> and <em>declared</em> flags for each
attribute are copied.
Otherwise the flag values are defaulted to assume no DTD was used,
unless there is evidence to the contrary (such as attributes with
type other than CDATA, which must have been <em>declared</em>).

<p>This constructor is especially useful inside a
{@link org.xml.sax.ContentHandler#startElement startElement} event.</p>

@param atts The existing Attributes object.
"
      end

      operation 12577922 "isDeclared"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Implementation of Attributes2
//////////////////////////////////////////////////////////////////

Returns the current value of the attribute's \"declared\" flag.

 javadoc mostly from interface"
      end

      operation 12578050 "isDeclared"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the attribute's \"declared\" flag.

 javadoc mostly from interface"
      end

      operation 12578178 "isDeclared"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "qName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the attribute's \"declared\" flag.

 javadoc mostly from interface"
      end

      operation 12578306 "isSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of an attribute's \"specified\" flag.

@param index The attribute index (zero-based).
@return current flag value
@exception java.lang.ArrayIndexOutOfBoundsException When the
           supplied index does not identify an attribute.
"
      end

      operation 12578434 "isSpecified"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "uri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of an attribute's \"specified\" flag.

@param uri The Namespace URI, or the empty string if
       the name has no Namespace URI.
@param localName The attribute's local name.
@return current flag value
@exception java.lang.IllegalArgumentException When the
           supplied names do not identify an attribute.
"
      end

      operation 12578562 "isSpecified"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "qName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of an attribute's \"specified\" flag.

@param qName The XML qualified (prefixed) name.
@return current flag value
@exception java.lang.IllegalArgumentException When the
           supplied name does not identify an attribute.
"
      end

      operation 12578690 "setAttributes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "atts" type class_ref 593410 // Attributes
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Manipulators
//////////////////////////////////////////////////////////////////

Copy an entire Attributes object.  The \"specified\" flags are
assigned as true, and \"declared\" flags as false (except when
an attribute's type is not CDATA),
unless the object is an Attributes2 object.
In that case those flag values are all copied.

@see AttributesImpl#setAttributes
"
      end

      operation 12578818 "addAttribute"
	public explicit_return_type "void"
	nparams 5
	  param inout name "uri" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "qName" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an attribute to the end of the list, setting its
\"specified\" flag to true.  To set that flag's value
to false, use {@link #setSpecified}.

<p>Unless the attribute <em>type</em> is CDATA, this attribute
is marked as being declared in the DTD.  To set that flag's value
to true for CDATA attributes, use {@link #setDeclared}.

@see AttributesImpl#addAttribute
"
      end

      operation 12578946 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " javadoc entirely from superclass"
      end

      operation 12579074 "setDeclared"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assign a value to the \"declared\" flag of a specific attribute.
This is normally needed only for attributes of type CDATA,
including attributes whose type is changed to or from CDATA.

@param index The index of the attribute (zero-based).
@param value The desired flag value.
@exception java.lang.ArrayIndexOutOfBoundsException When the
           supplied index does not identify an attribute.
@see #setType
"
      end

      operation 12579202 "setSpecified"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assign a value to the \"specified\" flag of a specific attribute.
This is the only way this flag can be cleared, except clearing
by initialization with the copy constructor.

@param index The index of the attribute (zero-based).
@param value The desired flag value.
@exception java.lang.ArrayIndexOutOfBoundsException When the
           supplied index does not identify an attribute.
"
      end
    end

    class 1491330 "DefaultHandler2"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends the SAX2 base handler class to support the
SAX2 {@link LexicalHandler}, {@link DeclHandler}, and
{@link EntityResolver2} extensions.  Except for overriding the
original SAX1 {@link DefaultHandler#resolveEntity resolveEntity()}
method the added handler methods just return.  Subclassers may
override everything on a method-by-method basis.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
</blockquote>

<p> <em>Note:</em> this class might yet learn that the
<em>ContentHandler.setDocumentLocator()</em> call might be passed a
{@link Locator2} object, and that the
<em>ContentHandler.startElement()</em> call might be passed a
{@link Attributes2} object.

@since SAX 2.0 (extensions 1.1 alpha)
@author David Brownell
"
      classrelation 4932226 // <generalisation>
	relation 4932226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4932226 // <generalisation>
	  b parent class_ref 635906 // DefaultHandler
      end

      classrelation 4932354 // <realization>
	relation 4932354 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4932354 // <realization>
	  b parent class_ref 617602 // LexicalHandler
      end

      classrelation 4932482 // <realization>
	relation 4932482 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4932482 // <realization>
	  b parent class_ref 617858 // DeclHandler
      end

      classrelation 4932610 // <realization>
	relation 4932610 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4932610 // <realization>
	  b parent class_ref 728194 // EntityResolver2
      end

      operation 12579330 "DefaultHandler2"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a handler which ignores all parsing events. "
      end

      operation 12579458 "startCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SAX2 ext-1.0 LexicalHandler"
      end

      operation 12579586 "endCDATA"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12579714 "startDTD"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12579842 "endDTD"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12579970 "startEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12580098 "endEntity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12580226 "comment"
	public explicit_return_type "void"
	nparams 3
	  param inout name "ch" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12580354 "attributeDecl"
	public explicit_return_type "void"
	nparams 5
	  param inout name "eName" type class_ref 128130 // String
	  param inout name "aName" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "mode" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SAX2 ext-1.0 DeclHandler"
      end

      operation 12580482 "elementDecl"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "model" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12580610 "externalEntityDecl"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12580738 "internalEntityDecl"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 379266 // SAXException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12580866 "getExternalSubset"
	public return_type class_ref 606594 // InputSource
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "baseURI" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SAX2 ext-1.1 EntityResolver2

Tells the parser that if no external subset has been declared
in the document text, none should be used.
"
      end

      operation 12580994 "resolveEntity"
	public return_type class_ref 606594 // InputSource
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "baseURI" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells the parser to resolve the systemId against the baseURI
and read the entity text from that resulting absolute URI.
Note that because the older
{@link DefaultHandler#resolveEntity DefaultHandler.resolveEntity()},
method is overridden to call this one, this method may sometimes
be invoked with null <em>name</em> and <em>baseURI</em>, and
with the <em>systemId</em> already absolutized.
"
      end

      operation 12581122 "resolveEntity"
	public return_type class_ref 606594 // InputSource
	nparams 2
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 379266 // SAXException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SAX1 EntityResolver

Invokes
{@link EntityResolver2#resolveEntity EntityResolver2.resolveEntity()}
with null entity name and base URI.
You only need to override that method to use this class.
"
      end
    end

    class 1491458 "Locator2Impl"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SAX2 extension helper for holding additional Entity information,
implementing the {@link Locator2} interface.

<blockquote>
<em>This module, both source code and documentation, is in the
Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
</blockquote>

<p> This is not part of core-only SAX2 distributions.</p>

@since SAX 2.0.2
@author David Brownell
"
      classrelation 4932738 // <generalisation>
	relation 4932738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4932738 // <generalisation>
	  b parent class_ref 792322 // LocatorImpl
      end

      classrelation 4932866 // <realization>
	relation 4932866 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4932866 // <realization>
	  b parent class_ref 640898 // Locator2
      end

      classrelation 4932994 // encoding (<unidirectional association>)
	relation 4932994 --->
	  a role_name "encoding" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4932994 // encoding (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4933122 // version (<unidirectional association>)
	relation 4933122 --->
	  a role_name "version" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4933122 // version (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12581250 "Locator2Impl"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new, empty Locator2Impl object.
This will not normally be useful, since the main purpose
of this class is to make a snapshot of an existing Locator.
"
      end

      operation 12581378 "Locator2Impl"
	public explicit_return_type ""
	nparams 1
	  param inout name "locator" type class_ref 606082 // Locator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy an existing Locator or Locator2 object.
If the object implements Locator2, values of the
<em>encoding</em> and <em>version</em>strings are copied,
otherwise they set to <em>null</em>.

@param locator The existing Locator object.
"
      end

      operation 12581506 "getXMLVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Locator2 method implementations
//////////////////////////////////////////////////////////////////

Returns the current value of the version property.

@see #setXMLVersion
"
      end

      operation 12581634 "getEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the encoding property.

@see #setEncoding
"
      end

      operation 12581762 "setXMLVersion"
	public explicit_return_type "void"
	nparams 1
	  param inout name "version" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////////////////////////////////////
 Setters
//////////////////////////////////////////////////////////////////

Assigns the current value of the version property.

@param version the new \"version\" value
@see #getXMLVersion
"
      end

      operation 12581890 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "encoding" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the current value of the encoding property.

@param encoding the new \"encoding\" value
@see #getEncoding
"
      end
    end
  end

  deploymentview 152322 "ext"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 430210 "LexicalHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.SAXException;
${definition}"
      associated_elems
	class_ref 617602 // LexicalHandler
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 LexicalHandler.java - optional handler for lexical parse events.
 http://www.saxproject.org
 Public Domain: no warranty.
 $Id: LexicalHandler.java,v 1.2 2004/11/03 22:49:08 jsuttor Exp $"
    end

    artifact 430594 "DeclHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.SAXException;
${definition}"
      associated_elems
	class_ref 617858 // DeclHandler
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 DeclHandler.java - Optional handler for DTD declaration events.
 http://www.saxproject.org
 Public Domain: no warranty.
 $Id: DeclHandler.java,v 1.2 2004/11/03 22:49:08 jsuttor Exp $"
    end

    artifact 441986 "Locator2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.Locator;
${definition}"
      associated_elems
	class_ref 640898 // Locator2
      end
      comment "Copyright (c) 2004, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 Locator2.java - extended Locator
 http://www.saxproject.org
 Public Domain: no warranty.
 $Id: Locator2.java,v 1.2 2004/11/03 22:49:08 jsuttor Exp $"
    end

    artifact 501506 "Attributes2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.Attributes;
${definition}"
      associated_elems
	class_ref 722562 // Attributes2
      end
      comment "Copyright (c) 2004, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 Attributes2.java - extended Attributes
 http://www.saxproject.org
 Public Domain: no warranty.
 $Id: Attributes2.java,v 1.2 2004/11/03 22:49:07 jsuttor Exp $"
    end

    artifact 505858 "EntityResolver2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.SAXException;
${definition}"
      associated_elems
	class_ref 728194 // EntityResolver2
      end
      comment "Copyright (c) 2004, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 EntityResolver2.java - Extended SAX entity resolver.
 http://www.saxproject.org
 No warranty; no copyright -- use this as you will.
 $Id: EntityResolver2.java,v 1.2 2004/11/03 22:49:08 jsuttor Exp $"
    end

    artifact 1101570 "Attributes2Impl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.Attributes;
import org.xml.sax.helpers.AttributesImpl;
${definition}"
      associated_elems
	class_ref 1491202 // Attributes2Impl
      end
      comment "Copyright (c) 2004, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 Attributes2Impl.java - extended AttributesImpl
 http://www.saxproject.org
 Public Domain: no warranty.
 $Id: Attributes2Impl.java,v 1.3 2005/02/24 11:20:18 gg156739 Exp $"
    end

    artifact 1101698 "DefaultHandler2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
${definition}"
      associated_elems
	class_ref 1491330 // DefaultHandler2
      end
      comment "Copyright (c) 2004, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 DefaultHandler2.java - extended DefaultHandler
 http://www.saxproject.org
 Public Domain: no warranty.
 $Id: DefaultHandler2.java,v 1.2 2004/11/03 22:49:08 jsuttor Exp $"
    end

    artifact 1101826 "Locator2Impl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.xml.sax.Locator;
import org.xml.sax.helpers.LocatorImpl;
${definition}"
      associated_elems
	class_ref 1491458 // Locator2Impl
      end
      comment "Copyright (c) 2004, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.





















 Locator2Impl.java - extended LocatorImpl
 http://www.saxproject.org
 Public Domain: no warranty.
 $Id: Locator2Impl.java,v 1.2 2004/11/03 22:49:08 jsuttor Exp $"
    end
  end
end
