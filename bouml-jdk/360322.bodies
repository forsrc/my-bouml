class AbstractAction
!!!2017922.java!!!	shouldReconfigure(inout e : PropertyChangeEvent) : boolean
        if (e.getPropertyName() == null) {
            synchronized(AbstractAction.class) {
                if (RECONFIGURE_ON_NULL == null) {
                    RECONFIGURE_ON_NULL = Boolean.valueOf(
                        AccessController.doPrivileged(new GetPropertyAction(
                        "swing.actions.reconfigureOnNull", "false")));
                }
                return RECONFIGURE_ON_NULL;
            }
        }
        return false;
!!!2018050.java!!!	setEnabledFromAction(inout c : JComponent, inout a : Action) : void
        c.setEnabled((a != null) ? a.isEnabled() : true);
!!!2018178.java!!!	setToolTipTextFromAction(inout c : JComponent, inout a : Action) : void
        c.setToolTipText(a != null ?
                         (String)a.getValue(Action.SHORT_DESCRIPTION) : null);
!!!2018306.java!!!	hasSelectedKey(inout a : Action) : boolean
        return (a != null && a.getValue(Action.SELECTED_KEY) != null);
!!!2018434.java!!!	isSelected(inout a : Action) : boolean
        return Boolean.TRUE.equals(a.getValue(Action.SELECTED_KEY));
!!!2018690.java!!!	AbstractAction(inout name : String)
        putValue(Action.NAME, name);
!!!2018818.java!!!	AbstractAction(inout name : String, inout icon : Icon)
        this(name);
        putValue(Action.SMALL_ICON, icon);
!!!2018946.java!!!	getValue(inout key : String) : Object
        if (key == "enabled") {
            return enabled;
        }
        if (arrayTable == null) {
            return null;
        }
        return arrayTable.get(key);
!!!2019074.java!!!	putValue(inout key : String, inout newValue : Object) : void
        Object oldValue = null;
        if (key == "enabled") {
            // Treat putValue("enabled") the same way as a call to setEnabled.
            // If we don't do this it means the two may get out of sync, and a
            // bogus property change notification would be sent.
            //
            // To avoid dependencies between putValue & setEnabled this
            // directly changes enabled. If we instead called setEnabled
            // to change enabled, it would be possible for stack
            // overflow in the case where a developer implemented setEnabled
            // in terms of putValue.
            if (newValue == null || !(newValue instanceof Boolean)) {
                newValue = false;
            }
            oldValue = enabled;
            enabled = (Boolean)newValue;
        } else {
            if (arrayTable == null) {
                arrayTable = new ArrayTable();
            }
            if (arrayTable.containsKey(key))
                oldValue = arrayTable.get(key);
            // Remove the entry for key if newValue is null
            // else put in the newValue for key.
            if (newValue == null) {
                arrayTable.remove(key);
            } else {
                arrayTable.put(key,newValue);
            }
        }
        firePropertyChange(key, oldValue, newValue);
!!!2019202.java!!!	isEnabled() : boolean
        return enabled;
!!!2019330.java!!!	setEnabled(inout newValue : boolean) : void
        boolean oldValue = this.enabled;

        if (oldValue != newValue) {
            this.enabled = newValue;
            firePropertyChange("enabled",
                               Boolean.valueOf(oldValue), Boolean.valueOf(newValue));
        }
!!!2019458.java!!!	getKeys() : Object
        if (arrayTable == null) {
            return null;
        }
        Object[] keys = new Object[arrayTable.size()];
        arrayTable.getKeys(keys);
        return keys;
!!!2019586.java!!!	firePropertyChange(inout propertyName : String, inout oldValue : Object, inout newValue : Object) : void
        if (changeSupport == null ||
            (oldValue != null && newValue != null && oldValue.equals(newValue))) {
            return;
        }
        changeSupport.firePropertyChange(propertyName, oldValue, newValue);
!!!2019714.java!!!	addPropertyChangeListener(inout listener : PropertyChangeListener) : void
        if (changeSupport == null) {
            changeSupport = new SwingPropertyChangeSupport(this);
        }
        changeSupport.addPropertyChangeListener(listener);
!!!2019842.java!!!	removePropertyChangeListener(inout listener : PropertyChangeListener) : void
        if (changeSupport == null) {
            return;
        }
        changeSupport.removePropertyChangeListener(listener);
!!!2019970.java!!!	getPropertyChangeListeners() : PropertyChangeListener
        if (changeSupport == null) {
            return new PropertyChangeListener[0];
        }
        return changeSupport.getPropertyChangeListeners();
!!!2020098.java!!!	clone() : Object
        AbstractAction newAction = (AbstractAction)super.clone();
        synchronized(this) {
            if (arrayTable != null) {
                newAction.arrayTable = (ArrayTable)arrayTable.clone();
            }
        }
        return newAction;
!!!2020226.java!!!	writeObject(inout s : ObjectOutputStream) : void
        // Store the default fields
        s.defaultWriteObject();

        // And the keys
        ArrayTable.writeArrayTable(s, arrayTable);
!!!2020354.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        for (int counter = s.readInt() - 1; counter >= 0; counter--) {
            putValue((String)s.readObject(), s.readObject());
        }
