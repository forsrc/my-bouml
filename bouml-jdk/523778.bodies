class SnmpMibNode
!!!3144578.java!!!	getNextVarId(in id : long, inout userData : Object) : long
        return getNextIdentifier(varList,id);
!!!3144706.java!!!	getNextVarId(in id : long, inout userData : Object, in pduVersion : int) : long
        long varid=id;
        do {
            varid = getNextVarId(varid,userData);
        } while (skipVariable(varid,userData,pduVersion));

        return varid;
!!!3144834.java!!!	skipVariable(in id : long, inout userData : Object, in pduVersion : int) : boolean
        return false;
!!!3144962.java!!!	findHandlingNode(inout varbind : SnmpVarBind, inout oid : long [[]], in depth : int, inout handlers : SnmpRequestTree) : void
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
!!!3145090.java!!!	findNextHandlingNode(inout varbind : SnmpVarBind, inout oid : long [[]], in pos : int, in depth : int, inout handlers : SnmpRequestTree, inout checker : AcmChecker) : long
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
!!!3145602.java!!!	sort(inout array : int [[]]) : void
        QuickSort(array, 0, array.length - 1);
!!!3145730.java!!!	getRootOid(inout result : Vector) : void
        return;
!!!3145858.java!!!	QuickSort(inout a : int [[]], in lo0 : int, in hi0 : int) : void
        int lo = lo0;
        int hi = hi0;
        int mid;

        if ( hi0 > lo0) {

            /* Arbitrarily establishing partition element as the midpoint of
             * the array.
             */
            mid = a[ ( lo0 + hi0 ) / 2 ];

            // loop through the array until indices cross
            while( lo <= hi ) {
                /* find the first element that is greater than or equal to
                 * the partition element starting from the left Index.
                 */
                while( ( lo < hi0 )  && ( a[lo] < mid ))
                    ++lo;

                /* find an element that is smaller than or equal to
                 * the partition element starting from the right Index.
                 */
                while( ( hi > lo0 ) && ( a[hi] > mid ))
                    --hi;

                // if the indexes have not crossed, swap
                if( lo <= hi ) {
                    swap(a, lo, hi);
                    ++lo;
                    --hi;
                }
            }

            /* If the right index has not reached the left side of array
             * must now sort the left partition.
             */
            if( lo0 < hi )
                QuickSort( a, lo0, hi );

            /* If the left index has not reached the right side of array
             * must now sort the right partition.
             */
            if( lo < hi0 )
                QuickSort( a, lo, hi0 );

        }
!!!3145986.java!!!	getNextIdentifier(inout table : int [[]], in value : long) : int

        final int[] a = table;
        final int val= (int) value;

        if (a == null) {
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        }

        int low= 0;
        int max= a.length;
        int curr= low + (max-low)/2;
        int elmt= 0;

        // Basic check
        //
        if (max < 1) {
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        }

        if (a[max-1] <= val) {
            throw new SnmpStatusException(SnmpStatusException.noSuchObject);
        }

        while (low <= max) {
            elmt= a[curr];
            if (val == elmt) {
                // We ned to get the next index ...
                //
                curr++;
                return a[curr];
            }
            if (elmt < val) {
                low= curr +1;
            } else {
                max= curr -1;
            }
            curr= low + (max-low)/2;
        }
        return a[curr];
!!!3146114.java!!!	swap(inout a : int [[]], in i : int, in j : int) : void
        int T;
        T = a[i];
        a[i] = a[j];
        a[j] = T;
