format 222
"x500" // jdk1.8::javax::security::auth::x500
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/security/auth/x500/"
  java_package "javax.security.auth.x500"
  classview 171522 "x500"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 833026 "X500Principal"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p> This class represents an X.500 {@code Principal}.
{@code X500Principal}s are represented by distinguished names such as
\"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\".

<p> This class can be instantiated by using a string representation
of the distinguished name, or by using the ASN.1 DER encoded byte
representation of the distinguished name.  The current specification
for the string representation of a distinguished name is defined in
<a href=\"http://www.ietf.org/rfc/rfc2253.txt\">RFC 2253: Lightweight
Directory Access Protocol (v3): UTF-8 String Representation of
Distinguished Names</a>. This class, however, accepts string formats from
both RFC 2253 and <a href=\"http://www.ietf.org/rfc/rfc1779.txt\">RFC 1779:
A String Representation of Distinguished Names</a>, and also recognizes
attribute type keywords whose OIDs (Object Identifiers) are defined in
<a href=\"http://www.ietf.org/rfc/rfc3280.txt\">RFC 3280: Internet X.509
Public Key Infrastructure Certificate and CRL Profile</a>.

<p> The string representation for this {@code X500Principal}
can be obtained by calling the {@code getName} methods.

<p> Note that the {@code getSubjectX500Principal} and
{@code getIssuerX500Principal} methods of
{@code X509Certificate} return X500Principals representing the
issuer and subject fields of the certificate.

@see java.security.cert.X509Certificate
@since 1.4
"
      classrelation 4026370 // <realization>
	relation 4026370 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4026370 // <realization>
	  b parent class_ref 510594 // Principal
      end

      classrelation 4026498 // <realization>
	relation 4026498 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4026498 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2355970 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -500463348111345721L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 4026626 // RFC1779 (<unidirectional association>)
	relation 4026626 --->
	  a role_name "RFC1779" init_value " \"RFC1779\"" class_relation const_relation public
	    comment "
RFC 1779 String format of Distinguished Names.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4026626 // RFC1779 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4026754 // RFC2253 (<unidirectional association>)
	relation 4026754 --->
	  a role_name "RFC2253" init_value " \"RFC2253\"" class_relation const_relation public
	    comment "
RFC 2253 String format of Distinguished Names.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4026754 // RFC2253 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4026882 // CANONICAL (<unidirectional association>)
	relation 4026882 --->
	  a role_name "CANONICAL" init_value " \"CANONICAL\"" class_relation const_relation public
	    comment "
Canonical String format of Distinguished Names.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4026882 // CANONICAL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2356098 "thisX500Name"
	private explicit_type "X500Name"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The X500Name representing this principal.

NOTE: this field is reflectively accessed from within X500Name.

"
      end

      operation 10244354 "X500Principal"
	package explicit_return_type ""
	nparams 1
	  param inout name "x500Name" explicit_type "X500Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an X500Principal by wrapping an X500Name.

NOTE: The constructor is package private. It is intended to be accessed
using privileged reflection from classes in sun.security.*.
Currently referenced from sun.security.x509.X500Name.asX500Principal().
"
      end

      operation 10244482 "X500Principal"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code X500Principal} from a string representation of
an X.500 distinguished name (ex:
\"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\").
The distinguished name must be specified using the grammar defined in
RFC 1779 or RFC 2253 (either format is acceptable).

<p>This constructor recognizes the attribute type keywords
defined in RFC 1779 and RFC 2253
(and listed in {@link #getName(String format) getName(String format)}),
as well as the T, DNQ or DNQUALIFIER, SURNAME, GIVENNAME, INITIALS,
GENERATION, EMAILADDRESS, and SERIALNUMBER keywords whose Object
Identifiers (OIDs) are defined in RFC 3280 and its successor.
Any other attribute type must be specified as an OID.

<p>This implementation enforces a more restrictive OID syntax than
defined in RFC 1779 and 2253. It uses the more correct syntax defined in
<a href=\"http://www.ietf.org/rfc/rfc4512.txt\">RFC 4512</a>, which
specifies that OIDs contain at least 2 digits:

<p>{@code numericoid = number 1*( DOT number ) }

@param name an X.500 distinguished name in RFC 1779 or RFC 2253 format
@exception NullPointerException if the {@code name}
                 is {@code null}
@exception IllegalArgumentException if the {@code name}
                 is improperly specified
"
      end

      operation 10244610 "X500Principal"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "keywordMap" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String, String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code X500Principal} from a string representation of
an X.500 distinguished name (ex:
\"CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US\").
The distinguished name must be specified using the grammar defined in
RFC 1779 or RFC 2253 (either format is acceptable).

<p> This constructor recognizes the attribute type keywords specified
in {@link #X500Principal(String)} and also recognizes additional
keywords that have entries in the {@code keywordMap} parameter.
Keyword entries in the keywordMap take precedence over the default
keywords recognized by {@code X500Principal(String)}. Keywords
MUST be specified in all upper-case, otherwise they will be ignored.
Improperly specified keywords are ignored; however if a keyword in the
name maps to an improperly specified Object Identifier (OID), an
{@code IllegalArgumentException} is thrown. It is permissible to
have 2 different keywords that map to the same OID.

<p>This implementation enforces a more restrictive OID syntax than
defined in RFC 1779 and 2253. It uses the more correct syntax defined in
<a href=\"http://www.ietf.org/rfc/rfc4512.txt\">RFC 4512</a>, which
specifies that OIDs contain at least 2 digits:

<p>{@code numericoid = number 1*( DOT number ) }

@param name an X.500 distinguished name in RFC 1779 or RFC 2253 format
@param keywordMap an attribute type keyword map, where each key is a
  keyword String that maps to a corresponding object identifier in String
  form (a sequence of nonnegative integers separated by periods). The map
  may be empty but never {@code null}.
@exception NullPointerException if {@code name} or
  {@code keywordMap} is {@code null}
@exception IllegalArgumentException if the {@code name} is
  improperly specified or a keyword in the {@code name} maps to an
  OID that is not in the correct form
@since 1.6
"
      end

      operation 10244738 "X500Principal"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code X500Principal} from a distinguished name in
ASN.1 DER encoded form. The ASN.1 notation for this structure is as
follows.
<pre>{@code
Name ::= CHOICE {
  RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

RelativeDistinguishedName ::=
  SET SIZE (1 .. MAX) OF AttributeTypeAndValue

AttributeTypeAndValue ::= SEQUENCE {
  type     AttributeType,
  value    AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY DEFINED BY AttributeType
....
DirectoryString ::= CHOICE {
      teletexString           TeletexString (SIZE (1..MAX)),
      printableString         PrintableString (SIZE (1..MAX)),
      universalString         UniversalString (SIZE (1..MAX)),
      utf8String              UTF8String (SIZE (1.. MAX)),
      bmpString               BMPString (SIZE (1..MAX)) }
}</pre>

@param name a byte array containing the distinguished name in ASN.1
DER encoded form
@throws IllegalArgumentException if an encoding error occurs
         (incorrect form for DN)
"
      end

      operation 10244866 "X500Principal"
	public explicit_return_type ""
	nparams 1
	  param inout name "is" type class_ref 146434 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code X500Principal} from an {@code InputStream}
containing the distinguished name in ASN.1 DER encoded form.
The ASN.1 notation for this structure is supplied in the
documentation for
{@link #X500Principal(byte[] name) X500Principal(byte[] name)}.

<p> The read position of the input stream is positioned
to the next available byte after the encoded distinguished name.

@param is an {@code InputStream} containing the distinguished
         name in ASN.1 DER encoded form

@exception NullPointerException if the {@code InputStream}
         is {@code null}
@exception IllegalArgumentException if an encoding error occurs
         (incorrect form for DN)
"
      end

      operation 10244994 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the X.500 distinguished name using
the format defined in RFC 2253.

<p>This method is equivalent to calling
{@code getName(X500Principal.RFC2253)}.

@return the distinguished name of this {@code X500Principal}
"
      end

      operation 10245122 "getName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "format" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the X.500 distinguished name
using the specified format. Valid values for the format are
\"RFC1779\", \"RFC2253\", and \"CANONICAL\" (case insensitive).

<p> If \"RFC1779\" is specified as the format,
this method emits the attribute type keywords defined in
RFC 1779 (CN, L, ST, O, OU, C, STREET).
Any other attribute type is emitted as an OID.

<p> If \"RFC2253\" is specified as the format,
this method emits the attribute type keywords defined in
RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID).
Any other attribute type is emitted as an OID.
Under a strict reading, RFC 2253 only specifies a UTF-8 string
representation. The String returned by this method is the
Unicode string achieved by decoding this UTF-8 representation.

<p> If \"CANONICAL\" is specified as the format,
this method returns an RFC 2253 conformant string representation
with the following additional canonicalizations:

<ol>
<li> Leading zeros are removed from attribute types
         that are encoded as dotted decimal OIDs
<li> DirectoryString attribute values of type
         PrintableString and UTF8String are not
         output in hexadecimal format
<li> DirectoryString attribute values of types
         other than PrintableString and UTF8String
         are output in hexadecimal format
<li> Leading and trailing white space characters
         are removed from non-hexadecimal attribute values
         (unless the value consists entirely of white space characters)
<li> Internal substrings of one or more white space characters are
         converted to a single space in non-hexadecimal
         attribute values
<li> Relative Distinguished Names containing more than one
         Attribute Value Assertion (AVA) are output in the
         following order: an alphabetical ordering of AVAs
         containing standard keywords, followed by a numeric
         ordering of AVAs containing OID keywords.
<li> The only characters in attribute values that are escaped are
         those which section 2.4 of RFC 2253 states must be escaped
         (they are escaped using a preceding backslash character)
<li> The entire name is converted to upper case
         using {@code String.toUpperCase(Locale.US)}
<li> The entire name is converted to lower case
         using {@code String.toLowerCase(Locale.US)}
<li> The name is finally normalized using normalization form KD,
         as described in the Unicode Standard and UAX #15
</ol>

<p> Additional standard formats may be introduced in the future.

@param format the format to use

@return a string representation of this {@code X500Principal}
         using the specified format
@throws IllegalArgumentException if the specified format is invalid
         or null
"
      end

      operation 10245250 "getName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "format" type class_ref 128130 // String
	  param inout name "oidMap" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the X.500 distinguished name
using the specified format. Valid values for the format are
\"RFC1779\" and \"RFC2253\" (case insensitive). \"CANONICAL\" is not
permitted and an {@code IllegalArgumentException} will be thrown.

<p>This method returns Strings in the format as specified in
{@link #getName(String)} and also emits additional attribute type
keywords for OIDs that have entries in the {@code oidMap}
parameter. OID entries in the oidMap take precedence over the default
OIDs recognized by {@code getName(String)}.
Improperly specified OIDs are ignored; however if an OID
in the name maps to an improperly specified keyword, an
{@code IllegalArgumentException} is thrown.

<p> Additional standard formats may be introduced in the future.

<p> Warning: additional attribute type keywords may not be recognized
by other implementations; therefore do not use this method if
you are unsure if these keywords will be recognized by other
implementations.

@param format the format to use
@param oidMap an OID map, where each key is an object identifier in
 String form (a sequence of nonnegative integers separated by periods)
 that maps to a corresponding attribute type keyword String.
 The map may be empty but never {@code null}.
@return a string representation of this {@code X500Principal}
         using the specified format
@throws IllegalArgumentException if the specified format is invalid,
 null, or an OID in the name maps to an improperly specified keyword
@throws NullPointerException if {@code oidMap} is {@code null}
@since 1.6
"
      end

      operation 10245378 "getEncoded"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distinguished name in ASN.1 DER encoded form. The ASN.1
notation for this structure is supplied in the documentation for
{@link #X500Principal(byte[] name) X500Principal(byte[] name)}.

<p>Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the distinguished name in ASN.1 DER
encoded form
"
      end

      operation 10245506 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a user-friendly string representation of this
{@code X500Principal}.

@return a string representation of this {@code X500Principal}
"
      end

      operation 10245634 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified {@code Object} with this
{@code X500Principal} for equality.

<p> Specifically, this method returns {@code true} if
the {@code Object} <i>o</i> is an {@code X500Principal}
and if the respective canonical string representations
(obtained via the {@code getName(X500Principal.CANONICAL)} method)
of this object and <i>o</i> are equal.

<p> This implementation is compliant with the requirements of RFC 3280.

@param o Object to be compared for equality with this
         {@code X500Principal}

@return {@code true} if the specified {@code Object} is equal
         to this {@code X500Principal}, {@code false} otherwise
"
      end

      operation 10245762 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a hash code for this {@code X500Principal}.

<p> The hash code is calculated via:
{@code getName(X500Principal.CANONICAL).hashCode()}

@return a hash code for this {@code X500Principal}
"
      end

      operation 10245890 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the X500Principal object to a stream.

@serialData this {@code X500Principal} is serialized
         by writing out its DER-encoded form
         (the value of {@code getEncoded} is serialized).
"
      end

      operation 10246018 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 171522 // NotActiveException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads this object from a stream (i.e., deserializes it).
"
      end
    end

    class 833410 "X500PrivateCredential"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p> This class represents an {@code X500PrivateCredential}.
It associates an X.509 certificate, corresponding private key and the
KeyStore alias used to reference that exact key pair in the KeyStore.
This enables looking up the private credentials for an X.500 principal
in a subject.

"
      classrelation 4027010 // <realization>
	relation 4027010 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4027010 // <realization>
	  b parent class_ref 1019266 // Destroyable
      end

      classrelation 4027138 // cert (<unidirectional association>)
	relation 4027138 --->
	  a role_name "cert" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4027138 // cert (<unidirectional association>)
	  b parent class_ref 767234 // X509Certificate
      end

      classrelation 4027266 // key (<unidirectional association>)
	relation 4027266 --->
	  a role_name "key" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4027266 // key (<unidirectional association>)
	  b parent class_ref 767362 // PrivateKey
      end

      classrelation 4027394 // alias (<unidirectional association>)
	relation 4027394 --->
	  a role_name "alias" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4027394 // alias (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10246146 "X500PrivateCredential"
	public explicit_return_type ""
	nparams 2
	  param inout name "cert" type class_ref 767234 // X509Certificate
	  param inout name "key" type class_ref 767362 // PrivateKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an X500PrivateCredential that associates an X.509 certificate,
a private key and the KeyStore alias.
<p>
@param cert X509Certificate
@param key  PrivateKey for the certificate
@exception IllegalArgumentException if either {@code cert} or
{@code key} is null

"
      end

      operation 10246274 "X500PrivateCredential"
	public explicit_return_type ""
	nparams 3
	  param inout name "cert" type class_ref 767234 // X509Certificate
	  param inout name "key" type class_ref 767362 // PrivateKey
	  param inout name "alias" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an X500PrivateCredential that associates an X.509 certificate,
a private key and the KeyStore alias.
<p>
@param cert X509Certificate
@param key  PrivateKey for the certificate
@param alias KeyStore alias
@exception IllegalArgumentException if either {@code cert},
{@code key} or {@code alias} is null

"
      end

      operation 10246402 "getCertificate"
	public return_type class_ref 767234 // X509Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X.509 certificate.
<p>
@return the X509Certificate
"
      end

      operation 10246530 "getPrivateKey"
	public return_type class_ref 767362 // PrivateKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the PrivateKey.
<p>
@return the PrivateKey
"
      end

      operation 10246658 "getAlias"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the KeyStore alias.
<p>
@return the KeyStore alias
"
      end

      operation 10246786 "destroy"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the references to the X.509 certificate, private key and the
KeyStore alias in this object.
"
      end

      operation 10246914 "isDestroyed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the references to the X.509 certificate and private key
in this object have been cleared.
<p>
@return true if X509Certificate and the PrivateKey are null

"
      end
    end
  end

  deploymentview 174978 "x500"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 908290 "X500Principal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.security.Principal;
import java.util.Collections;
import java.util.Map;
import sun.security.x509.X500Name;
import sun.security.util.*;
${definition}"
      associated_elems
	class_ref 833026 // X500Principal
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 908418 "X500PrivateCredential"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import javax.security.auth.Destroyable;
${definition}"
      associated_elems
	class_ref 833410 // X500PrivateCredential
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
