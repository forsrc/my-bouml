class StreamBuilderImpl
!!!9590914.java!!!	StreamBuilderImpl(inout t : T)
            first = t;
            count = -2;
!!!9591042.java!!!	accept(inout t : T) : void
            if (count == 0) {
                first = t;
                count++;
            }
            else if (count > 0) {
                if (buffer == null) {
                    buffer = new SpinedBuffer<>();
                    buffer.accept(first);
                    count++;
                }

                buffer.accept(t);
            }
            else {
                throw new IllegalStateException();
            }
!!!9591170.java!!!	add(inout t : T) : Stream::Builder
            accept(t);
            return this;
!!!9591298.java!!!	build() : Stream
            int c = count;
            if (c >= 0) {
                // Switch count to negative value signalling the builder is built
                count = -count - 1;
                // Use this spliterator if 0 or 1 elements, otherwise use
                // the spliterator of the spined buffer
                return (c < 2) ? StreamSupport.stream(this, false) : StreamSupport.stream(buffer.spliterator(), false);
            }

            throw new IllegalStateException();
!!!9591426.java!!!	tryAdvance(inout action : Consumer) : boolean
            Objects.requireNonNull(action);

            if (count == -2) {
                action.accept(first);
                count = -1;
                return true;
            }
            else {
                return false;
            }
!!!9591554.java!!!	forEachRemaining(inout action : Consumer) : void
            Objects.requireNonNull(action);

            if (count == -2) {
                action.accept(first);
                count = -1;
            }
