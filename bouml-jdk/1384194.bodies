class WhitespaceBasedBreakIterator
!!!11704450.java!!!	setText(inout ci : CharacterIterator) : void
        int begin = ci.getBeginIndex();
        text = new char[ci.getEndIndex() - begin];
        int[] breaks0 = new int[text.length + 1];
        int brIx = 0;
        breaks0[brIx++] = begin;

        int charIx = 0;
        boolean inWs = false;
        for (char c = ci.first(); c != CharacterIterator.DONE; c = ci.next()) {
            text[charIx] = c;
            boolean ws = Character.isWhitespace(c);
            if (inWs && !ws) {
                breaks0[brIx++] = charIx + begin;
            }
            inWs = ws;
            charIx++;
        }
        if (text.length > 0) {
            breaks0[brIx++] = text.length + begin;
        }
        System.arraycopy(breaks0, 0, breaks = new int[brIx], 0, brIx);
!!!11704578.java!!!	getText() : CharacterIterator
        return new StringCharacterIterator(new String(text));
!!!11704706.java!!!	first() : int
        return breaks[pos = 0];
!!!11704834.java!!!	last() : int
        return breaks[pos = breaks.length - 1];
!!!11704962.java!!!	current() : int
        return breaks[pos];
!!!11705090.java!!!	next() : int
        return (pos == breaks.length - 1 ? DONE : breaks[++pos]);
!!!11705218.java!!!	previous() : int
        return (pos == 0 ? DONE : breaks[--pos]);
!!!11705346.java!!!	next(in n : int) : int
        return checkhit(pos + n);
!!!11705474.java!!!	following(in n : int) : int
        return adjacent(n, 1);
!!!11705602.java!!!	preceding(in n : int) : int
        return adjacent(n, -1);
!!!11705730.java!!!	checkhit(in hit : int) : int
        if ((hit < 0) || (hit >= breaks.length)) {
            return DONE;
        } else {
            return breaks[pos = hit];
        }
!!!11705858.java!!!	adjacent(in n : int, in bias : int) : int
        int hit = Arrays.binarySearch(breaks, n);
        int offset = (hit < 0 ? (bias < 0 ? -1 : -2) : 0);
        return checkhit(Math.abs(hit) + bias + offset);
