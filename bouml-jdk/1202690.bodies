class RoleUnresolvedList
!!!9937922.java!!!	RoleUnresolvedList()
        super();
!!!9938050.java!!!	RoleUnresolvedList(in initialCapacity : int)
        super(initialCapacity);
!!!9938178.java!!!	RoleUnresolvedList(inout list : List)
        // Check for null parameter
        //
        if (list == null)
            throw new IllegalArgumentException("Null parameter");

        // Check for non-RoleUnresolved objects
        //
        checkTypeSafe(list);

        // Build the List<RoleUnresolved>
        //
        super.addAll(list);
!!!9938306.java!!!	asList() : List
        if (!typeSafe) {
            if (tainted)
                checkTypeSafe(this);
            typeSafe = true;
        }
        return Util.cast(this);
!!!9938434.java!!!	add(inout role : RoleUnresolved) : void

        if (role == null) {
            String excMsg = "Invalid parameter";
            throw new IllegalArgumentException(excMsg);
        }
        super.add(role);
!!!9938562.java!!!	add(in index : int, inout role : RoleUnresolved) : void

        if (role == null) {
            String excMsg = "Invalid parameter";
            throw new IllegalArgumentException(excMsg);
        }

        super.add(index, role);
!!!9938690.java!!!	set(in index : int, inout role : RoleUnresolved) : void

        if (role == null) {
            String excMsg = "Invalid parameter";
            throw new IllegalArgumentException(excMsg);
        }

        super.set(index, role);
!!!9938818.java!!!	addAll(inout roleList : RoleUnresolvedList) : boolean

        if (roleList == null) {
            return true;
        }

        return (super.addAll(roleList));
!!!9938946.java!!!	addAll(in index : int, inout roleList : RoleUnresolvedList) : boolean

        if (roleList == null) {
            String excMsg = "Invalid parameter";
            throw new IllegalArgumentException(excMsg);
        }

        return (super.addAll(index, roleList));
!!!9939074.java!!!	add(inout o : Object) : boolean
        if (!tainted)
            tainted = isTainted(o);
        if (typeSafe)
            checkTypeSafe(o);
        return super.add(o);
!!!9939202.java!!!	add(in index : int, inout element : Object) : void
        if (!tainted)
            tainted = isTainted(element);
        if (typeSafe)
            checkTypeSafe(element);
        super.add(index, element);
!!!9939330.java!!!	addAll(inout c : Collection) : boolean
        if (!tainted)
            tainted = isTainted(c);
        if (typeSafe)
            checkTypeSafe(c);
        return super.addAll(c);
!!!9939458.java!!!	addAll(in index : int, inout c : Collection) : boolean
        if (!tainted)
            tainted = isTainted(c);
        if (typeSafe)
            checkTypeSafe(c);
        return super.addAll(index, c);
!!!9939586.java!!!	set(in index : int, inout element : Object) : Object
        if (!tainted)
            tainted = isTainted(element);
        if (typeSafe)
            checkTypeSafe(element);
        return super.set(index, element);
!!!9939714.java!!!	checkTypeSafe(inout o : Object) : void
        try {
            o = (RoleUnresolved) o;
        } catch (ClassCastException e) {
            throw new IllegalArgumentException(e);
        }
!!!9939842.java!!!	checkTypeSafe(inout c : Collection) : void
        try {
            RoleUnresolved r;
            for (Object o : c)
                r = (RoleUnresolved) o;
        } catch (ClassCastException e) {
            throw new IllegalArgumentException(e);
        }
!!!9939970.java!!!	isTainted(inout o : Object) : boolean
        try {
            checkTypeSafe(o);
        } catch (IllegalArgumentException e) {
            return true;
        }
        return false;
!!!9940098.java!!!	isTainted(inout c : Collection) : boolean
        try {
            checkTypeSafe(c);
        } catch (IllegalArgumentException e) {
            return true;
        }
        return false;
