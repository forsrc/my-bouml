class ButtonGroupInfo
!!!2204162.java!!!	ButtonGroupInfo(inout btn : JRadioButton)
            activeBtn = btn;
            btnsInGroup = new HashSet<JRadioButton>();
!!!2204290.java!!!	containsInGroup(inout obj : Object) : boolean
           return btnsInGroup.contains(obj);
!!!2204418.java!!!	getFocusTransferBaseComponent(inout next : boolean) : Component
            Component focusBaseComp = activeBtn;
            Container container = focusBaseComp.getFocusCycleRootAncestor();
            if (container != null) {
                FocusTraversalPolicy policy = container.getFocusTraversalPolicy();
                Component comp = next ? policy.getComponentAfter(container, activeBtn)
                                      : policy.getComponentBefore(container, activeBtn);

                // If next component in the button group, use last/first button as base focus
                // otherwise, use the activeBtn as the base focus
                if (containsInGroup(comp)) {
                    focusBaseComp = next ? lastBtn : firstBtn;
                }
            }

            return focusBaseComp;
!!!2204546.java!!!	getButtonGroupInfo() : boolean
            if (activeBtn == null)
                return false;

            btnsInGroup.clear();

            // Get the button model from the source.
            ButtonModel model = activeBtn.getModel();
            if (!(model instanceof DefaultButtonModel))
                return false;

            // If the button model is DefaultButtonModel, and use it, otherwise return.
            DefaultButtonModel bm = (DefaultButtonModel) model;

            // get the ButtonGroup of the button from the button model
            ButtonGroup group = bm.getGroup();
            if (group == null)
                return false;

            // Get all the buttons in the group
            Enumeration<AbstractButton> e = group.getElements();
            if (e == null)
                return false;

            while (e.hasMoreElements()) {
                AbstractButton curElement = e.nextElement();
                if (!isValidRadioButtonObj(curElement))
                    continue;

                btnsInGroup.add((JRadioButton) curElement);

                // If firstBtn is not set yet, curElement is that first button
                if (null == firstBtn)
                    firstBtn = (JRadioButton) curElement;

                if (activeBtn == curElement)
                    srcFound = true;
                else if (!srcFound) {
                    // The source has not been yet found and the current element
                    // is the last previousBtn
                    previousBtn = (JRadioButton) curElement;
                } else if (nextBtn == null) {
                    // The source has been found and the current element
                    // is the next valid button of the list
                    nextBtn = (JRadioButton) curElement;
                }

                // Set new last "valid" JRadioButton of the list
                lastBtn = (JRadioButton) curElement;
            }

            return true;
!!!2204674.java!!!	selectNewButton(inout next : boolean) : void
            if (!getButtonGroupInfo())
                return;

            if (srcFound) {
                JRadioButton newSelectedBtn = null;
                if (next) {
                    // Select Next button. Cycle to the first button if the source
                    // button is the last of the group.
                    newSelectedBtn = (null == nextBtn) ? firstBtn : nextBtn;
                } else {
                    // Select previous button. Cycle to the last button if the source
                    // button is the first button of the group.
                    newSelectedBtn = (null == previousBtn) ? lastBtn : previousBtn;
                }
                if (newSelectedBtn != null &&
                    (newSelectedBtn != activeBtn)) {
                    newSelectedBtn.requestFocusInWindow();
                    newSelectedBtn.setSelected(true);
                }
            }
!!!2204802.java!!!	jumpToNextComponent(inout next : boolean) : void
            if (!getButtonGroupInfo()){
                // In case the button does not belong to any group, it needs
                // to be treated as a component
                if (activeBtn != null){
                    lastBtn = activeBtn;
                    firstBtn = activeBtn;
                }
                else
                    return;
            }

            // Update the component we will use as base to transfer
            // focus from
            JComponent compTransferFocusFrom = activeBtn;

            // If next component in the parent window is not in
            // the button group, current active button will be
            // base, otherwise, the base will be first or last
            // button in the button group
            Component focusBase = getFocusTransferBaseComponent(next);
            if (focusBase != null){
                if (next) {
                    KeyboardFocusManager.
                        getCurrentKeyboardFocusManager().focusNextComponent(focusBase);
                } else {
                    KeyboardFocusManager.
                        getCurrentKeyboardFocusManager().focusPreviousComponent(focusBase);
                }
            }
