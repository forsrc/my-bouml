class KeyTab
!!!10234370.java!!!	KeyTab(inout princ : KerberosPrincipal, inout file : File, inout bound : boolean)
        this.princ = princ;
        this.file = file;
        this.bound = bound;
!!!10234498.java!!!	getInstance(inout file : File) : KeyTab
        if (file == null) {
            throw new NullPointerException("file must be non null");
        }
        return new KeyTab(null, file, true);
!!!10234626.java!!!	getUnboundInstance(inout file : File) : KeyTab
        if (file == null) {
            throw new NullPointerException("file must be non null");
        }
        return new KeyTab(null, file, false);
!!!10234754.java!!!	getInstance(inout princ : KerberosPrincipal, inout file : File) : KeyTab
        if (princ == null) {
            throw new NullPointerException("princ must be non null");
        }
        if (file == null) {
            throw new NullPointerException("file must be non null");
        }
        return new KeyTab(princ, file, true);
!!!10234882.java!!!	getInstance() : KeyTab
        return new KeyTab(null, null, true);
!!!10235010.java!!!	getUnboundInstance() : KeyTab
        return new KeyTab(null, null, false);
!!!10235138.java!!!	getInstance(inout princ : KerberosPrincipal) : KeyTab
        if (princ == null) {
            throw new NullPointerException("princ must be non null");
        }
        return new KeyTab(princ, null, true);
!!!10235266.java!!!	takeSnapshot() : sun.security.krb5.internal.ktab.KeyTab
        try {
            return sun.security.krb5.internal.ktab.KeyTab.getInstance(file);
        } catch (AccessControlException ace) {
            if (file != null) {
                // It's OK to show the name if caller specified it
                throw ace;
            } else {
                AccessControlException ace2 = new AccessControlException(
                        "Access to default keytab denied (modified exception)");
                ace2.setStackTrace(ace.getStackTrace());
                throw ace2;
            }
        }
!!!10235394.java!!!	getKeys(inout principal : KerberosPrincipal) : KerberosKey
        try {
            if (princ != null && !principal.equals(princ)) {
                return new KerberosKey[0];
            }
            PrincipalName pn = new PrincipalName(principal.getName());
            EncryptionKey[] keys = takeSnapshot().readServiceKeys(pn);
            KerberosKey[] kks = new KerberosKey[keys.length];
            for (int i=0; i<kks.length; i++) {
                Integer tmp = keys[i].getKeyVersionNumber();
                kks[i] = new KerberosKey(
                        principal,
                        keys[i].getBytes(),
                        keys[i].getEType(),
                        tmp == null ? 0 : tmp.intValue());
                keys[i].destroy();
            }
            return kks;
        } catch (RealmException re) {
            return new KerberosKey[0];
        }
!!!10235522.java!!!	getEncryptionKeys(inout principal : PrincipalName) : EncryptionKey
        return takeSnapshot().readServiceKeys(principal);
!!!10235650.java!!!	exists() : boolean
        return !takeSnapshot().isMissing();
!!!10235778.java!!!	toString() : String
        String s = (file == null) ? "Default keytab" : file.toString();
        if (!bound) return s;
        else if (princ == null) return s + " for someone";
        else return s + " for " + princ;
!!!10235906.java!!!	hashCode() : int
        return Objects.hash(file, princ, bound);
!!!10236034.java!!!	equals(inout other : Object) : boolean
        if (other == this)
            return true;

        if (! (other instanceof KeyTab)) {
            return false;
        }

        KeyTab otherKtab = (KeyTab) other;
        return Objects.equals(otherKtab.princ, princ) &&
                Objects.equals(otherKtab.file, file) &&
                bound == otherKtab.bound;
!!!10236162.java!!!	getPrincipal() : KerberosPrincipal
        return princ;
!!!10236290.java!!!	isBound() : boolean
        return bound;
