class NameBase
!!!3737858.java!!!	NameBase(inout fname : QName)
        super(fname);
!!!3737986.java!!!	NameBase(inout fname : QName, inout arguments : Vector)
        super(fname, arguments);
        _param = argument(0);
!!!3738114.java!!!	typeCheck(inout stable : SymbolTable) : Type

        // Check the argument type (if any)
        switch(argumentCount()) {
        case 0:
            _paramType = Type.Node;
            break;
        case 1:
            _paramType = _param.typeCheck(stable);
            break;
        default:
            throw new TypeCheckError(this);
        }

        // The argument has to be a node, a node-set or a node reference
        if ((_paramType != Type.NodeSet) &&
            (_paramType != Type.Node) &&
            (_paramType != Type.Reference)) {
            throw new TypeCheckError(this);
        }

        return (_type = Type.String);
!!!3738242.java!!!	getType() : Type
        return _type;
!!!3738370.java!!!	translate(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();

        il.append(methodGen.loadDOM());

        // Function was called with no parameters
        if (argumentCount() == 0) {
            il.append(methodGen.loadContextNode());
        }
        // Function was called with node parameter
        else if (_paramType == Type.Node) {
            _param.translate(classGen, methodGen);
        }
        else if (_paramType == Type.Reference) {
            _param.translate(classGen, methodGen);
            il.append(new INVOKESTATIC(cpg.addMethodref
                                       (BASIS_LIBRARY_CLASS,
                                        "referenceToNodeSet",
                                        "("
                                        + OBJECT_SIG
                                        + ")"
                                        + NODE_ITERATOR_SIG)));
            il.append(methodGen.nextNode());
        }
        // Function was called with node-set parameter
        else {
            _param.translate(classGen, methodGen);
            _param.startIterator(classGen, methodGen);
            il.append(methodGen.nextNode());
        }
