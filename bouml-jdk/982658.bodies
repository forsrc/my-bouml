class HeapFloatBufferR
!!!7751170.java!!!	HeapFloatBufferR(in cap : int, in lim : int)
            // package-private







        super(cap, lim);
        this.isReadOnly = true;

!!!7751298.java!!!	HeapFloatBufferR(inout buf : float [[]], in off : int, in len : int)
 // package-private







        super(buf, off, len);
        this.isReadOnly = true;

!!!7751426.java!!!	HeapFloatBufferR(inout buf : float [[]], in mark : int, in pos : int, in lim : int, in cap : int, in off : int)







        super(buf, mark, pos, lim, cap, off);
        this.isReadOnly = true;

!!!7751554.java!!!	slice() : FloatBuffer
        return new HeapFloatBufferR(hb,
                                        -1,
                                        0,
                                        this.remaining(),
                                        this.remaining(),
                                        this.position() + offset);
!!!7751682.java!!!	duplicate() : FloatBuffer
        return new HeapFloatBufferR(hb,
                                        this.markValue(),
                                        this.position(),
                                        this.limit(),
                                        this.capacity(),
                                        offset);
!!!7751810.java!!!	asReadOnlyBuffer() : FloatBuffer








        return duplicate();

!!!7751938.java!!!	isReadOnly() : boolean
        return true;
!!!7752066.java!!!	put(in x : float) : FloatBuffer




        throw new ReadOnlyBufferException();

!!!7752194.java!!!	put(in i : int, in x : float) : FloatBuffer




        throw new ReadOnlyBufferException();

!!!7752322.java!!!	put(inout src : float [[]], in offset : int, in length : int) : FloatBuffer








        throw new ReadOnlyBufferException();

!!!7752450.java!!!	put(inout src : FloatBuffer) : FloatBuffer























        throw new ReadOnlyBufferException();

!!!7752578.java!!!	compact() : FloatBuffer







        throw new ReadOnlyBufferException();

!!!7752706.java!!!	order() : ByteOrder
        return ByteOrder.nativeOrder();
