class AbstractSelector
!!!7804930.java!!!	AbstractSelector(inout provider : SelectorProvider)
        this.provider = provider;
!!!7805058.java!!!	cancel(inout k : SelectionKey) : void
                       // package-private
        synchronized (cancelledKeys) {
            cancelledKeys.add(k);
        }
!!!7805186.java!!!	close() : void
        boolean open = selectorOpen.getAndSet(false);
        if (!open)
            return;
        implCloseSelector();
!!!7805442.java!!!	isOpen() : boolean
        return selectorOpen.get();
!!!7805570.java!!!	provider() : SelectorProvider
        return provider;
!!!7805698.java!!!	cancelledKeys() : Set
        return cancelledKeys;
!!!7805954.java!!!	deregister(inout key : AbstractSelectionKey) : void
        ((AbstractSelectableChannel)key.channel()).removeKey(key);
!!!7806082.java!!!	begin() : void
        if (interruptor == null) {
            interruptor = new Interruptible() {
                    public void interrupt(Thread ignore) {
                        AbstractSelector.this.wakeup();
                    }};
        }
        AbstractInterruptibleChannel.blockedOn(interruptor);
        Thread me = Thread.currentThread();
        if (me.isInterrupted())
            interruptor.interrupt(me);
!!!7806210.java!!!	end() : void
        AbstractInterruptibleChannel.blockedOn(null);
