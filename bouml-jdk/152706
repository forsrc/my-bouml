format 222
"text" // jdk1.8::java::text
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/text/"
  java_package "java.text"
  classview 148610 "text"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 372482 "ParseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Signals that an error has been reached unexpectedly
while parsing.
@see java.lang.Exception
@see java.text.Format
@see java.text.FieldPosition
@author      Mark Davis
"
      classrelation 3416194 // <generalisation>
	relation 3416194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3416194 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1931522 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2703218443322787634L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8296578 "ParseException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param in name "errorOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ParseException with the specified detail message and
offset.
A detail message is a String that describes this particular exception.

@param s the detail message
@param errorOffset the position where the error is found while parsing.
"
      end

      operation 8296706 "getErrorOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position where the error was found.

@return the position where the error was found
"
      end

      attribute 1931650 "errorOffset"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "============ privates ============

The zero-based character offset into the string being parsed at which
the error was found during parsing.
@serial

"
      end
    end

    class 428290 "MessageFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>MessageFormat</code> provides a means to produce concatenated
messages in a language-neutral way. Use this to construct messages
displayed for end users.

<p>
<code>MessageFormat</code> takes a set of objects, formats them, then
inserts the formatted strings into the pattern at the appropriate places.

<p>
<strong>Note:</strong>
<code>MessageFormat</code> differs from the other <code>Format</code>
classes in that you create a <code>MessageFormat</code> object with one
of its constructors (not with a <code>getInstance</code> style factory
method). The factory methods aren't necessary because <code>MessageFormat</code>
itself doesn't implement locale specific behavior. Any locale specific
behavior is defined by the pattern that you provide as well as the
subformats used for inserted arguments.

<h3><a name=\"patterns\">Patterns and Their Interpretation</a></h3>

<code>MessageFormat</code> uses patterns of the following form:
<blockquote><pre>
<i>MessageFormatPattern:</i>
        <i>String</i>
        <i>MessageFormatPattern</i> <i>FormatElement</i> <i>String</i>

<i>FormatElement:</i>
        { <i>ArgumentIndex</i> }
        { <i>ArgumentIndex</i> , <i>FormatType</i> }
        { <i>ArgumentIndex</i> , <i>FormatType</i> , <i>FormatStyle</i> }

<i>FormatType: one of </i>
        number date time choice

<i>FormatStyle:</i>
        short
        medium
        long
        full
        integer
        currency
        percent
        <i>SubformatPattern</i>
</pre></blockquote>

<p>Within a <i>String</i>, a pair of single quotes can be used to
quote any arbitrary characters except single quotes. For example,
pattern string <code>\"'{0}'\"</code> represents string
<code>\"{0}\"</code>, not a <i>FormatElement</i>. A single quote itself
must be represented by doubled single quotes {@code ''} throughout a
<i>String</i>.  For example, pattern string <code>\"'{''}'\"</code> is
interpreted as a sequence of <code>'{</code> (start of quoting and a
left curly brace), <code>''</code> (a single quote), and
<code>}'</code> (a right curly brace and end of quoting),
<em>not</em> <code>'{'</code> and <code>'}'</code> (quoted left and
right curly braces): representing string <code>\"{'}\"</code>,
<em>not</em> <code>\"{}\"</code>.

<p>A <i>SubformatPattern</i> is interpreted by its corresponding
subformat, and subformat-dependent pattern rules apply. For example,
pattern string <code>\"{1,number,<u>$'#',##</u>}\"</code>
(<i>SubformatPattern</i> with underline) will produce a number format
with the pound-sign quoted, with a result such as: {@code
\"$#31,45\"}. Refer to each {@code Format} subclass documentation for
details.

<p>Any unmatched quote is treated as closed at the end of the given
pattern. For example, pattern string {@code \"'{0}\"} is treated as
pattern {@code \"'{0}'\"}.

<p>Any curly braces within an unquoted pattern must be balanced. For
example, <code>\"ab {0} de\"</code> and <code>\"ab '}' de\"</code> are
valid patterns, but <code>\"ab {0'}' de\"</code>, <code>\"ab } de\"</code>
and <code>\"''{''\"</code> are not.

<dl><dt><b>Warning:</b><dd>The rules for using quotes within message
format patterns unfortunately have shown to be somewhat confusing.
In particular, it isn't always obvious to localizers whether single
quotes need to be doubled or not. Make sure to inform localizers about
the rules, and tell them (for example, by using comments in resource
bundle source files) which strings will be processed by {@code MessageFormat}.
Note that localizers may need to use single quotes in translated
strings where the original version doesn't have them.
</dl>
<p>
The <i>ArgumentIndex</i> value is a non-negative integer written
using the digits {@code '0'} through {@code '9'}, and represents an index into the
{@code arguments} array passed to the {@code format} methods
or the result array returned by the {@code parse} methods.
<p>
The <i>FormatType</i> and <i>FormatStyle</i> values are used to create
a {@code Format} instance for the format element. The following
table shows how the values map to {@code Format} instances. Combinations not
shown in the table are illegal. A <i>SubformatPattern</i> must
be a valid pattern string for the {@code Format} subclass used.

<table border=1 summary=\"Shows how FormatType and FormatStyle values map to Format instances\">
   <tr>
      <th id=\"ft\" class=\"TableHeadingColor\">FormatType
      <th id=\"fs\" class=\"TableHeadingColor\">FormatStyle
      <th id=\"sc\" class=\"TableHeadingColor\">Subformat Created
   <tr>
      <td headers=\"ft\"><i>(none)</i>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\"><code>null</code>
   <tr>
      <td headers=\"ft\" rowspan=5><code>number</code>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\">{@link NumberFormat#getInstance(Locale) NumberFormat.getInstance}{@code (getLocale())}
   <tr>
      <td headers=\"fs\"><code>integer</code>
      <td headers=\"sc\">{@link NumberFormat#getIntegerInstance(Locale) NumberFormat.getIntegerInstance}{@code (getLocale())}
   <tr>
      <td headers=\"fs\"><code>currency</code>
      <td headers=\"sc\">{@link NumberFormat#getCurrencyInstance(Locale) NumberFormat.getCurrencyInstance}{@code (getLocale())}
   <tr>
      <td headers=\"fs\"><code>percent</code>
      <td headers=\"sc\">{@link NumberFormat#getPercentInstance(Locale) NumberFormat.getPercentInstance}{@code (getLocale())}
   <tr>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\">{@code new} {@link DecimalFormat#DecimalFormat(String,DecimalFormatSymbols) DecimalFormat}{@code (subformatPattern,} {@link DecimalFormatSymbols#getInstance(Locale) DecimalFormatSymbols.getInstance}{@code (getLocale()))}
   <tr>
      <td headers=\"ft\" rowspan=6><code>date</code>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}{@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>short</code>
      <td headers=\"sc\">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}{@code (}{@link DateFormat#SHORT}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>medium</code>
      <td headers=\"sc\">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}{@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>long</code>
      <td headers=\"sc\">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}{@code (}{@link DateFormat#LONG}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>full</code>
      <td headers=\"sc\">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}{@code (}{@link DateFormat#FULL}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\">{@code new} {@link SimpleDateFormat#SimpleDateFormat(String,Locale) SimpleDateFormat}{@code (subformatPattern, getLocale())}
   <tr>
      <td headers=\"ft\" rowspan=6><code>time</code>
      <td headers=\"fs\"><i>(none)</i>
      <td headers=\"sc\">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}{@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>short</code>
      <td headers=\"sc\">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}{@code (}{@link DateFormat#SHORT}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>medium</code>
      <td headers=\"sc\">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}{@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>long</code>
      <td headers=\"sc\">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}{@code (}{@link DateFormat#LONG}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><code>full</code>
      <td headers=\"sc\">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}{@code (}{@link DateFormat#FULL}{@code , getLocale())}
   <tr>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\">{@code new} {@link SimpleDateFormat#SimpleDateFormat(String,Locale) SimpleDateFormat}{@code (subformatPattern, getLocale())}
   <tr>
      <td headers=\"ft\"><code>choice</code>
      <td headers=\"fs\"><i>SubformatPattern</i>
      <td headers=\"sc\">{@code new} {@link ChoiceFormat#ChoiceFormat(String) ChoiceFormat}{@code (subformatPattern)}
</table>

<h4>Usage Information</h4>

<p>
Here are some examples of usage.
In real internationalized programs, the message format pattern and other
static strings will, of course, be obtained from resource bundles.
Other parameters will be dynamically determined at runtime.
<p>
The first example uses the static method <code>MessageFormat.format</code>,
which internally creates a <code>MessageFormat</code> for one-time use:
<blockquote><pre>
int planet = 7;
String event = \"a disturbance in the Force\";

String result = MessageFormat.format(
    \"At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.\",
    planet, new Date(), event);
</pre></blockquote>
The output is:
<blockquote><pre>
At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.
</pre></blockquote>

<p>
The following example creates a <code>MessageFormat</code> instance that
can be used repeatedly:
<blockquote><pre>
int fileCount = 1273;
String diskName = \"MyDisk\";
Object[] testArgs = {new Long(fileCount), diskName};

MessageFormat form = new MessageFormat(
    \"The disk \\\"{1}\\\" contains {0} file(s).\");

System.out.println(form.format(testArgs));
</pre></blockquote>
The output with different values for <code>fileCount</code>:
<blockquote><pre>
The disk \"MyDisk\" contains 0 file(s).
The disk \"MyDisk\" contains 1 file(s).
The disk \"MyDisk\" contains 1,273 file(s).
</pre></blockquote>

<p>
For more sophisticated patterns, you can use a <code>ChoiceFormat</code>
to produce correct forms for singular and plural:
<blockquote><pre>
MessageFormat form = new MessageFormat(\"The disk \\\"{1}\\\" contains {0}.\");
double[] filelimits = {0,1,2};
String[] filepart = {\"no files\",\"one file\",\"{0,number} files\"};
ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
form.setFormatByArgumentIndex(0, fileform);

int fileCount = 1273;
String diskName = \"MyDisk\";
Object[] testArgs = {new Long(fileCount), diskName};

System.out.println(form.format(testArgs));
</pre></blockquote>
The output with different values for <code>fileCount</code>:
<blockquote><pre>
The disk \"MyDisk\" contains no files.
The disk \"MyDisk\" contains one file.
The disk \"MyDisk\" contains 1,273 files.
</pre></blockquote>

<p>
You can create the <code>ChoiceFormat</code> programmatically, as in the
above example, or by using a pattern. See {@link ChoiceFormat}
for more information.
<blockquote><pre>{@code
form.applyPattern(
   \"There {0,choice,0#are no files|1#is one file|1<are {0,number,integer} files}.\");
}</pre></blockquote>

<p>
<strong>Note:</strong> As we see above, the string produced
by a <code>ChoiceFormat</code> in <code>MessageFormat</code> is treated as special;
occurrences of '{' are used to indicate subformats, and cause recursion.
If you create both a <code>MessageFormat</code> and <code>ChoiceFormat</code>
programmatically (instead of using the string patterns), then be careful not to
produce a format that recurses on itself, which will cause an infinite loop.
<p>
When a single argument is parsed more than once in the string, the last match
will be the final result of the parsing.  For example,
<blockquote><pre>
MessageFormat mf = new MessageFormat(\"{0,number,#.##}, {0,number,#.#}\");
Object[] objs = {new Double(3.1415)};
String result = mf.format( objs );
// result now equals \"3.14, 3.1\"
objs = null;
objs = mf.parse(result, new ParsePosition(0));
// objs now equals {new Double(3.1)}
</pre></blockquote>

<p>
Likewise, parsing with a {@code MessageFormat} object using patterns containing
multiple occurrences of the same argument would return the last match.  For
example,
<blockquote><pre>
MessageFormat mf = new MessageFormat(\"{0}, {0}, {0}\");
String forParsing = \"x, y, z\";
Object[] objs = mf.parse(forParsing, new ParsePosition(0));
// result now equals {new String(\"z\")}
</pre></blockquote>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Message formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          java.util.Locale
@see          Format
@see          NumberFormat
@see          DecimalFormat
@see          DecimalFormatSymbols
@see          ChoiceFormat
@see          DateFormat
@see          SimpleDateFormat

@author       Mark Davis
"
      classrelation 3416066 // <generalisation>
	relation 3416066 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3416066 // <generalisation>
	  b parent class_ref 1045250 // Format
      end

      attribute 1930882 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6479157306784022952L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8293378 "MessageFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MessageFormat for the default
{@link java.util.Locale.Category#FORMAT FORMAT} locale and the
specified pattern.
The constructor first sets the locale, then parses the pattern and
creates a list of subformats for the format elements contained in it.
Patterns and their interpretation are specified in the
<a href=\"#patterns\">class description</a>.

@param pattern the pattern for this message format
@exception IllegalArgumentException if the pattern is invalid
"
      end

      operation 8293506 "MessageFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MessageFormat for the specified locale and
pattern.
The constructor first sets the locale, then parses the pattern and
creates a list of subformats for the format elements contained in it.
Patterns and their interpretation are specified in the
<a href=\"#patterns\">class description</a>.

@param pattern the pattern for this message format
@param locale the locale for this message format
@exception IllegalArgumentException if the pattern is invalid
@since 1.4
"
      end

      operation 8293634 "setLocale"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the locale to be used when creating or comparing subformats.
This affects subsequent calls
<ul>
<li>to the {@link #applyPattern applyPattern}
    and {@link #toPattern toPattern} methods if format elements specify
    a format type and therefore have the subformats created in the
    <code>applyPattern</code> method, as well as
<li>to the <code>format</code> and
    {@link #formatToCharacterIterator formatToCharacterIterator} methods
    if format elements do not specify a format type and therefore have
    the subformats created in the formatting methods.
</ul>
Subformats that have already been created are not affected.

@param locale the locale to be used when creating or comparing subformats
"
      end

      operation 8293762 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the locale that's used when creating or comparing subformats.

@return the locale used when creating or comparing subformats
"
      end

      operation 8293890 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Sets the pattern used by this message format.
The method parses the pattern and creates a list of subformats
for the format elements contained in it.
Patterns and their interpretation are specified in the
<a href=\"#patterns\">class description</a>.

@param pattern the pattern for this message format
@exception IllegalArgumentException if the pattern is invalid
"
      end

      operation 8294018 "toPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pattern representing the current state of the message format.
The string is constructed from internal information and therefore
does not necessarily equal the previously applied pattern.

@return a pattern representing the current state of the message format
"
      end

      operation 8294146 "setFormatsByArgumentIndex"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormats" type class_ref 1045250 // Format
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formats to use for the values passed into
<code>format</code> methods or returned from <code>parse</code>
methods. The indices of elements in <code>newFormats</code>
correspond to the argument indices used in the previously set
pattern string.
The order of formats in <code>newFormats</code> thus corresponds to
the order of elements in the <code>arguments</code> array passed
to the <code>format</code> methods or the result array returned
by the <code>parse</code> methods.
<p>
If an argument index is used for more than one format element
in the pattern string, then the corresponding new format is used
for all such format elements. If an argument index is not used
for any format element in the pattern string, then the
corresponding new format is ignored. If fewer formats are provided
than needed, then only the formats for argument indices less
than <code>newFormats.length</code> are replaced.

@param newFormats the new formats to use
@exception NullPointerException if <code>newFormats</code> is null
@since 1.4
"
      end

      operation 8294274 "setFormats"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormats" type class_ref 1045250 // Format
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formats to use for the format elements in the
previously set pattern string.
The order of formats in <code>newFormats</code> corresponds to
the order of format elements in the pattern string.
<p>
If more formats are provided than needed by the pattern string,
the remaining ones are ignored. If fewer formats are provided
than needed, then only the first <code>newFormats.length</code>
formats are replaced.
<p>
Since the order of format elements in a pattern string often
changes during localization, it is generally better to use the
{@link #setFormatsByArgumentIndex setFormatsByArgumentIndex}
method, which assumes an order of formats corresponding to the
order of elements in the <code>arguments</code> array passed to
the <code>format</code> methods or the result array returned by
the <code>parse</code> methods.

@param newFormats the new formats to use
@exception NullPointerException if <code>newFormats</code> is null
"
      end

      operation 8294402 "setFormatByArgumentIndex"
	public explicit_return_type "void"
	nparams 2
	  param in name "argumentIndex" explicit_type "int"
	  param inout name "newFormat" type class_ref 1045250 // Format
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the format to use for the format elements within the
previously set pattern string that use the given argument
index.
The argument index is part of the format element definition and
represents an index into the <code>arguments</code> array passed
to the <code>format</code> methods or the result array returned
by the <code>parse</code> methods.
<p>
If the argument index is used for more than one format element
in the pattern string, then the new format is used for all such
format elements. If the argument index is not used for any format
element in the pattern string, then the new format is ignored.

@param argumentIndex the argument index for which to use the new format
@param newFormat the new format to use
@since 1.4
"
      end

      operation 8294530 "setFormat"
	public explicit_return_type "void"
	nparams 2
	  param in name "formatElementIndex" explicit_type "int"
	  param inout name "newFormat" type class_ref 1045250 // Format
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the format to use for the format element with the given
format element index within the previously set pattern string.
The format element index is the zero-based number of the format
element counting from the start of the pattern string.
<p>
Since the order of format elements in a pattern string often
changes during localization, it is generally better to use the
{@link #setFormatByArgumentIndex setFormatByArgumentIndex}
method, which accesses format elements based on the argument
index they specify.

@param formatElementIndex the index of a format element within the pattern
@param newFormat the format to use for the specified format element
@exception ArrayIndexOutOfBoundsException if {@code formatElementIndex} is equal to or
           larger than the number of format elements in the pattern string
"
      end

      operation 8294658 "getFormatsByArgumentIndex"
	public return_type class_ref 1045250 // Format
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the formats used for the values passed into
<code>format</code> methods or returned from <code>parse</code>
methods. The indices of elements in the returned array
correspond to the argument indices used in the previously set
pattern string.
The order of formats in the returned array thus corresponds to
the order of elements in the <code>arguments</code> array passed
to the <code>format</code> methods or the result array returned
by the <code>parse</code> methods.
<p>
If an argument index is used for more than one format element
in the pattern string, then the format used for the last such
format element is returned in the array. If an argument index
is not used for any format element in the pattern string, then
null is returned in the array.

@return the formats used for the arguments within the pattern
@since 1.4
"
      end

      operation 8294786 "getFormats"
	public return_type class_ref 1045250 // Format
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the formats used for the format elements in the
previously set pattern string.
The order of formats in the returned array corresponds to
the order of format elements in the pattern string.
<p>
Since the order of format elements in a pattern string often
changes during localization, it's generally better to use the
{@link #getFormatsByArgumentIndex getFormatsByArgumentIndex}
method, which assumes an order of formats corresponding to the
order of elements in the <code>arguments</code> array passed to
the <code>format</code> methods or the result array returned by
the <code>parse</code> methods.

@return the formats used for the format elements in the pattern
"
      end

      operation 8294914 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "arguments" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an array of objects and appends the <code>MessageFormat</code>'s
pattern, with format elements replaced by the formatted objects, to the
provided <code>StringBuffer</code>.
<p>
The text substituted for the individual format elements is derived from
the current subformat of the format element and the
<code>arguments</code> element at the format element's argument index
as indicated by the first matching line of the following table. An
argument is <i>unavailable</i> if <code>arguments</code> is
<code>null</code> or has fewer than argumentIndex+1 elements.

<table border=1 summary=\"Examples of subformat,argument,and formatted text\">
   <tr>
      <th>Subformat
      <th>Argument
      <th>Formatted Text
   <tr>
      <td><i>any</i>
      <td><i>unavailable</i>
      <td><code>\"{\" + argumentIndex + \"}\"</code>
   <tr>
      <td><i>any</i>
      <td><code>null</code>
      <td><code>\"null\"</code>
   <tr>
      <td><code>instanceof ChoiceFormat</code>
      <td><i>any</i>
      <td><code>subformat.format(argument).indexOf('{') &gt;= 0 ?<br>
          (new MessageFormat(subformat.format(argument), getLocale())).format(argument) :
          subformat.format(argument)</code>
   <tr>
      <td><code>!= null</code>
      <td><i>any</i>
      <td><code>subformat.format(argument)</code>
   <tr>
      <td><code>null</code>
      <td><code>instanceof Number</code>
      <td><code>NumberFormat.getInstance(getLocale()).format(argument)</code>
   <tr>
      <td><code>null</code>
      <td><code>instanceof Date</code>
      <td><code>DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)</code>
   <tr>
      <td><code>null</code>
      <td><code>instanceof String</code>
      <td><code>argument</code>
   <tr>
      <td><code>null</code>
      <td><i>any</i>
      <td><code>argument.toString()</code>
</table>
<p>
If <code>pos</code> is non-null, and refers to
<code>Field.ARGUMENT</code>, the location of the first formatted
string will be returned.

@param arguments an array of objects to be formatted and substituted.
@param result where text is appended.
@param pos On input: an alignment field, if desired.
           On output: the offsets of the alignment field.
@return the string buffer passed in as {@code result}, with formatted
text appended
@exception IllegalArgumentException if an argument in the
           <code>arguments</code> array is not of the type
           expected by the format element(s) that use it.
"
      end

      operation 8295042 "format"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "arguments" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a MessageFormat with the given pattern and uses it
to format the given arguments. This is equivalent to
<blockquote>
    <code>(new {@link #MessageFormat(String) MessageFormat}(pattern)).{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>
</blockquote>

@param pattern   the pattern string
@param arguments object(s) to format
@return the formatted string
@exception IllegalArgumentException if the pattern is invalid,
           or if an argument in the <code>arguments</code> array
           is not of the type expected by the format element(s)
           that use it.
"
      end

      operation 8295170 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "arguments" type class_ref 129538 // Object
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overrides

Formats an array of objects and appends the <code>MessageFormat</code>'s
pattern, with format elements replaced by the formatted objects, to the
provided <code>StringBuffer</code>.
This is equivalent to
<blockquote>
    <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[]) arguments, result, pos)</code>
</blockquote>

@param arguments an array of objects to be formatted and substituted.
@param result where text is appended.
@param pos On input: an alignment field, if desired.
           On output: the offsets of the alignment field.
@exception IllegalArgumentException if an argument in the
           <code>arguments</code> array is not of the type
           expected by the format element(s) that use it.
"
      end

      operation 8295298 "formatToCharacterIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "arguments" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an array of objects and inserts them into the
<code>MessageFormat</code>'s pattern, producing an
<code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
The text of the returned <code>AttributedCharacterIterator</code> is
the same that would be returned by
<blockquote>
    <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>
</blockquote>
<p>
In addition, the <code>AttributedCharacterIterator</code> contains at
least attributes indicating where text was generated from an
argument in the <code>arguments</code> array. The keys of these attributes are of
type <code>MessageFormat.Field</code>, their values are
<code>Integer</code> objects indicating the index in the <code>arguments</code>
array of the argument from which the text was generated.
<p>
The attributes/value from the underlying <code>Format</code>
instances that <code>MessageFormat</code> uses will also be
placed in the resulting <code>AttributedCharacterIterator</code>.
This allows you to not only find where an argument is placed in the
resulting String, but also which fields it contains in turn.

@param arguments an array of objects to be formatted and substituted.
@return AttributedCharacterIterator describing the formatted value.
@exception NullPointerException if <code>arguments</code> is null.
@exception IllegalArgumentException if an argument in the
           <code>arguments</code> array is not of the type
           expected by the format element(s) that use it.
@since 1.4
"
      end

      operation 8295426 "parse"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string.

<p>Caveats: The parse may fail in a number of circumstances.
For example:
<ul>
<li>If one of the arguments does not occur in the pattern.
<li>If the format of an argument loses information, such as
    with a choice format where a large number formats to \"many\".
<li>Does not yet handle recursion (where
    the substituted strings contain {n} references.)
<li>Will not always find a match (or the correct match)
    if some part of the parse is ambiguous.
    For example, if the pattern \"{1},{2}\" is used with the
    string arguments {\"a,b\", \"c\"}, it will format as \"a,b,c\".
    When the result is parsed, it will return {\"a\", \"b,c\"}.
<li>If a single argument is parsed more than once in the string,
    then the later parse wins.
</ul>
When the parse fails, use ParsePosition.getErrorIndex() to find out
where in the string the parsing failed.  The returned error
index is the starting offset of the sub-patterns that the string
is comparing with.  For example, if the parsing string \"AAA {0} BBB\"
is comparing against the pattern \"AAD {0} BBB\", the error index is
0. When an error occurs, the call to this method will return null.
If the source is null, return an empty array.

@param source the string to parse
@param pos    the parse position
@return an array of parsed objects
"
      end

      operation 8295554 "parse"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce an object
array.
The method may not use the entire text of the given string.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on message parsing.

@param source A <code>String</code> whose beginning should be parsed.
@return An <code>Object</code> array parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed.
"
      end

      operation 8295682 "parseObject"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce an object array.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
object array is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on message parsing.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return An <code>Object</code> array parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null.
"
      end

      operation 8295810 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object.

@return a clone of this instance.
"
      end

      operation 8295938 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equality comparison between two message format objects
"
      end

      operation 8296066 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a hash code for the message format object.
"
      end
    end

    class 429314 "CharacterIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface defines a protocol for bidirectional iteration over text.
The iterator iterates over a bounded sequence of characters.  Characters
are indexed with values beginning with the value returned by getBeginIndex() and
continuing through the value returned by getEndIndex()-1.
<p>
Iterators maintain a current character index, whose valid range is from
getBeginIndex() to getEndIndex(); the value getEndIndex() is included to allow
handling of zero-length text ranges and for historical reasons.
The current index can be retrieved by calling getIndex() and set directly
by calling setIndex(), first(), and last().
<p>
The methods previous() and next() are used for iteration. They return DONE if
they would move outside the range from getBeginIndex() to getEndIndex() -1,
signaling that the iterator has reached the end of the sequence. DONE is
also returned by other methods to indicate that the current index is
outside this range.

<P>Examples:<P>

Traverse the text from start to finish
<pre>{@code
public void traverseForward(CharacterIterator iter) {
    for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) {
        processChar(c);
    }
}
}</pre>

Traverse the text backwards, from end to start
<pre>{@code
public void traverseBackward(CharacterIterator iter) {
    for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) {
        processChar(c);
    }
}
}</pre>

Traverse both forward and backward from a given position in the text.
Calls to notBoundary() in this example represents some
additional stopping criteria.
<pre>{@code
public void traverseOut(CharacterIterator iter, int pos) {
    for (char c = iter.setIndex(pos);
             c != CharacterIterator.DONE && notBoundary(c);
             c = iter.next()) {
    }
    int end = iter.getIndex();
    for (char c = iter.setIndex(pos);
            c != CharacterIterator.DONE && notBoundary(c);
            c = iter.previous()) {
    }
    int start = iter.getIndex();
    processSection(start, end);
}
}</pre>

@see StringCharacterIterator
@see AttributedCharacterIterator
"
      classrelation 811522 // <generalisation>
	relation 811522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 811522 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 540162 "DONE"
	class_attribute const_attribute public explicit_type "char"
	init_value " '\\uFFFF'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant that is returned when the iterator has reached either the end
or the beginning of the text. The value is '\\\\uFFFF', the \"not a
character\" value which should not occur in any valid Unicode string.

"
      end

      operation 2540802 "first"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to getBeginIndex() and returns the character at that
position.
@return the first character in the text, or DONE if the text is empty
@see #getBeginIndex()
"
      end

      operation 2540930 "last"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)
and returns the character at that position.
@return the last character in the text, or DONE if the text is empty
@see #getEndIndex()
"
      end

      operation 2541058 "current"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character at the current position (as returned by getIndex()).
@return the character at the current position or DONE if the current
position is off the end of the text.
@see #getIndex()
"
      end

      operation 2541186 "next"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the iterator's index by one and returns the character
at the new index.  If the resulting index is greater or equal
to getEndIndex(), the current index is reset to getEndIndex() and
a value of DONE is returned.
@return the character at the new position or DONE if the new
position is off the end of the text range.
"
      end

      operation 2541314 "previous"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the iterator's index by one and returns the character
at the new index. If the current index is getBeginIndex(), the index
remains at getBeginIndex() and a value of DONE is returned.
@return the character at the new position or DONE if the current
position is equal to getBeginIndex().
"
      end

      operation 2541442 "setIndex"
	public explicit_return_type "char"
	nparams 1
	  param in name "position" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position to the specified position in the text and returns that
character.
@param position the position within the text.  Valid values range from
getBeginIndex() to getEndIndex().  An IllegalArgumentException is thrown
if an invalid value is supplied.
@return the character at the specified position or DONE if the specified position is equal to getEndIndex()
"
      end

      operation 2541570 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start index of the text.
@return the index at which the text begins.
"
      end

      operation 2541698 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end index of the text.  This index is the index of the first
character following the end of the text.
@return the index after the last character in the text
"
      end

      operation 2541826 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current index.
@return the current index.
"
      end

      operation 2541954 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a copy of this iterator
@return A copy of this
"
      end
    end

    class 472962 "AttributedCharacterIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An {@code AttributedCharacterIterator} allows iteration through both text and
related attribute information.

<p>
An attribute is a key/value pair, identified by the key.  No two
attributes on a given character can have the same key.

<p>The values for an attribute are immutable, or must not be mutated
by clients or storage.  They are always passed by reference, and not
cloned.

<p>A <em>run with respect to an attribute</em> is a maximum text range for
which:
<ul>
<li>the attribute is undefined or {@code null} for the entire range, or
<li>the attribute value is defined and has the same non-{@code null} value for the
    entire range.
</ul>

<p>A <em>run with respect to a set of attributes</em> is a maximum text range for
which this condition is met for each member attribute.

<p>When getting a run with no explicit attributes specified (i.e.,
calling {@link #getRunStart()} and {@link #getRunLimit()}), any
contiguous text segments having the same attributes (the same set
of attribute/value pairs) are treated as separate runs if the
attributes have been given to those text segments separately.

<p>The returned indexes are limited to the range of the iterator.

<p>The returned attribute information is limited to runs that contain
the current character.

<p>
Attribute keys are instances of {@link AttributedCharacterIterator.Attribute} and its
subclasses, such as {@link java.awt.font.TextAttribute}.

@see AttributedCharacterIterator.Attribute
@see java.awt.font.TextAttribute
@see AttributedString
@see Annotation
@since 1.2
"
      class 866050 "Attribute"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3012866 // <realization>
	  relation 3012866 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3012866 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	classrelation 3012994 // name (<unidirectional association>)
	  relation 3012994 --->
	    a role_name "name" private
	      comment "
The name of this {@code Attribute}. The name is used primarily by {@code readResolve}
to look up the corresponding predefined instance when deserializing
an instance.
@serial

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3012994 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3013122 // instanceMap (<unidirectional association>)
	  relation 3013122 --->
	    a role_name "instanceMap" init_value " new HashMap<>(7)" class_relation const_relation private
	      comment " table of all instances in this class, used by readResolve
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Attribute> ${name}${value};
"
	      classrelation_ref 3013122 // instanceMap (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 6475266 "Attribute"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an {@code Attribute} with the given name.

@param name the name of {@code Attribute}
"
	end

	operation 6475394 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compares two objects for equality. This version only returns true
for {@code x.equals(y)} if {@code x} and {@code y} refer
to the same object, and guarantees this for all subclasses.
"
	end

	operation 6475522 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a hash code value for the object. This version is identical to
the one in {@code Object}, but is also final.
"
	end

	operation 6475650 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string representation of the object. This version returns the
concatenation of class name, {@code \"(\"}, a name identifying the attribute
and {@code \")\"}.
"
	end

	operation 6475778 "getName"
	  protected return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the name of the attribute.

@return the name of {@code Attribute}
"
	end

	operation 6475906 "readResolve"
	  protected return_type class_ref 129538 // Object
	  nparams 0
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resolves instances being deserialized to the predefined constants.

@return the resolved {@code Attribute} object
@throws InvalidObjectException if the object to resolve is not
                               an instance of {@code Attribute}
"
	end

	classrelation 3013250 // LANGUAGE (<unidirectional association>)
	  relation 3013250 --->
	    a role_name "LANGUAGE" init_value " new Attribute(\"language\")" class_relation const_relation public
	      comment "
Attribute key for the language of some text.
<p> Values are instances of {@link java.util.Locale Locale}.
@see java.util.Locale

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3013250 // LANGUAGE (<unidirectional association>)
	    b parent class_ref 866050 // Attribute
	end

	classrelation 3013378 // READING (<unidirectional association>)
	  relation 3013378 --->
	    a role_name "READING" init_value " new Attribute(\"reading\")" class_relation const_relation public
	      comment "
Attribute key for the reading of some text. In languages where the written form
and the pronunciation of a word are only loosely related (such as Japanese),
it is often necessary to store the reading (pronunciation) along with the
written form.
<p>Values are instances of {@link Annotation} holding instances of {@link String}.

@see Annotation
@see java.lang.String

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3013378 // READING (<unidirectional association>)
	    b parent class_ref 866050 // Attribute
	end

	classrelation 3013506 // INPUT_METHOD_SEGMENT (<unidirectional association>)
	  relation 3013506 --->
	    a role_name "INPUT_METHOD_SEGMENT" init_value " new Attribute(\"input_method_segment\")" class_relation const_relation public
	      comment "
Attribute key for input method segments. Input methods often break
up text into segments, which usually correspond to words.
<p>Values are instances of {@link Annotation} holding a {@code null} reference.
@see Annotation

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3013506 // INPUT_METHOD_SEGMENT (<unidirectional association>)
	    b parent class_ref 866050 // Attribute
	end

	attribute 1537154 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -9142742483513960612L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " make sure the serial version doesn't change between compiler versions
"
	end
      end

      classrelation 3012738 // <generalisation>
	relation 3012738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3012738 // <generalisation>
	  b parent class_ref 429314 // CharacterIterator
      end

      operation 6476034 "getRunStart"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the run
with respect to all attributes containing the current character.

<p>Any contiguous text segments having the same attributes (the
same set of attribute/value pairs) are treated as separate runs
if the attributes have been given to those text segments separately.

@return the index of the first character of the run
"
      end

      operation 6476162 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attribute" type class_ref 866050 // Attribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the run
with respect to the given {@code attribute} containing the current character.

@param attribute the desired attribute.
@return the index of the first character of the run
"
      end

      operation 6476290 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attributes" type class_ref 192258 // Set
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the run
with respect to the given {@code attributes} containing the current character.

@param attributes a set of the desired attributes.
@return the index of the first character of the run
"
      end

      operation 6476418 "getRunLimit"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the run
with respect to all attributes containing the current character.

<p>Any contiguous text segments having the same attributes (the
same set of attribute/value pairs) are treated as separate runs
if the attributes have been given to those text segments separately.

@return the index of the first character following the run
"
      end

      operation 6476546 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attribute" type class_ref 866050 // Attribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the run
with respect to the given {@code attribute} containing the current character.

@param attribute the desired attribute
@return the index of the first character following the run
"
      end

      operation 6476674 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attributes" type class_ref 192258 // Set
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the run
with respect to the given {@code attributes} containing the current character.

@param attributes a set of the desired attributes
@return the index of the first character following the run
"
      end

      operation 6476802 "getAttributes"
	public return_type class_ref 130178 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute,Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map with the attributes defined on the current
character.

@return a map with the attributes defined on the current character
"
      end

      operation 6476930 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attribute" type class_ref 866050 // Attribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the named {@code attribute} for the current character.
Returns {@code null} if the {@code attribute} is not defined.

@param attribute the desired attribute
@return the value of the named {@code attribute} or {@code null}
"
      end

      operation 6477058 "getAllAttributeKeys"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the keys of all attributes defined on the
iterator's text range. The set is empty if no
attributes are defined.

@return the keys of all attributes
"
      end
    end

    class 473090 "DateFormat"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code DateFormat} is an abstract class for date/time formatting subclasses which
formats and parses dates or time in a language-independent manner.
The date/time formatting subclass, such as {@link SimpleDateFormat}, allows for
formatting (i.e., date &rarr; text), parsing (text &rarr; date), and
normalization.  The date is represented as a <code>Date</code> object or
as the milliseconds since January 1, 1970, 00:00:00 GMT.

<p>{@code DateFormat} provides many class methods for obtaining default date/time
formatters based on the default or a given locale and a number of formatting
styles. The formatting styles include {@link #FULL}, {@link #LONG}, {@link #MEDIUM}, and {@link #SHORT}. More
detail and examples of using these styles are provided in the method
descriptions.

<p>{@code DateFormat} helps you to format and parse dates for any locale.
Your code can be completely independent of the locale conventions for
months, days of the week, or even the calendar format: lunar vs. solar.

<p>To format a date for the current Locale, use one of the
static factory methods:
<blockquote>
<pre>{@code
myString = DateFormat.getDateInstance().format(myDate);
}</pre>
</blockquote>
<p>If you are formatting multiple dates, it is
more efficient to get the format and use it multiple times so that
the system doesn't have to fetch the information about the local
language and country conventions multiple times.
<blockquote>
<pre>{@code
DateFormat df = DateFormat.getDateInstance();
for (int i = 0; i < myDate.length; ++i) {
    output.println(df.format(myDate[i]) + \"; \");
}
}</pre>
</blockquote>
<p>To format a date for a different Locale, specify it in the
call to {@link #getDateInstance(int, Locale) getDateInstance()}.
<blockquote>
<pre>{@code
DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);
}</pre>
</blockquote>
<p>You can use a DateFormat to parse also.
<blockquote>
<pre>{@code
myDate = df.parse(myString);
}</pre>
</blockquote>
<p>Use {@code getDateInstance} to get the normal date format for that country.
There are other static factory methods available.
Use {@code getTimeInstance} to get the time format for that country.
Use {@code getDateTimeInstance} to get a date and time format. You can pass in
different options to these factory methods to control the length of the
result; from {@link #SHORT} to {@link #MEDIUM} to {@link #LONG} to {@link #FULL}. The exact result depends
on the locale, but generally:
<ul><li>{@link #SHORT} is completely numeric, such as {@code 12.13.52} or {@code 3:30pm}
<li>{@link #MEDIUM} is longer, such as {@code Jan 12, 1952}
<li>{@link #LONG} is longer, such as {@code January 12, 1952} or {@code 3:30:32pm}
<li>{@link #FULL} is pretty completely specified, such as
{@code Tuesday, April 12, 1952 AD or 3:30:42pm PST}.
</ul>

<p>You can also set the time zone on the format if you wish.
If you want even more control over the format or parsing,
(or want to give your users more control),
you can try casting the {@code DateFormat} you get from the factory methods
to a {@link SimpleDateFormat}. This will work for the majority
of countries; just remember to put it in a {@code try} block in case you
encounter an unusual one.

<p>You can also use forms of the parse and format methods with
{@link ParsePosition} and {@link FieldPosition} to
allow you to
<ul><li>progressively parse through pieces of a string.
<li>align any particular field, or find out where it is for selection
on the screen.
</ul>

<h3><a name=\"synchronization\">Synchronization</a></h3>

<p>
Date formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          Format
@see          NumberFormat
@see          SimpleDateFormat
@see          java.util.Calendar
@see          java.util.GregorianCalendar
@see          java.util.TimeZone
@author       Mark Davis, Chen-Lieh Huang, Alan Liu
"
      class 473218 "Field"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 3408514 // <generalisation>
	relation 3408514 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3408514 // <generalisation>
	  b parent class_ref 1045250 // Format
      end

      classrelation 3408642 // calendar (<unidirectional association>)
	relation 3408642 --->
	  a role_name "calendar" protected
	    comment "
The {@link Calendar} instance used for calculating the date-time fields
and the instant of time. This field is used for both formatting and
parsing.

<p>Subclasses should initialize this field to a {@link Calendar}
appropriate for the {@link Locale} associated with this
<code>DateFormat</code>.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3408642 // calendar (<unidirectional association>)
	  b parent class_ref 723586 // Calendar
      end

      classrelation 3408770 // numberFormat (<unidirectional association>)
	relation 3408770 --->
	  a role_name "numberFormat" protected
	    comment "
The number formatter that <code>DateFormat</code> uses to format numbers
in dates and times.  Subclasses should initialize this to a number format
appropriate for the locale associated with this <code>DateFormat</code>.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3408770 // numberFormat (<unidirectional association>)
	  b parent class_ref 1045890 // NumberFormat
      end

      attribute 1913730 "ERA_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for ERA field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1913858 "YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for YEAR field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1913986 "MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for MONTH field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1914114 "DATE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for DATE field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1914242 "HOUR_OF_DAY1_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for one-based HOUR_OF_DAY field alignment.
Used in FieldPosition of date/time formatting.
HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.
For example, 23:59 + 01:00 results in 24:59.

"
      end

      attribute 1914370 "HOUR_OF_DAY0_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for zero-based HOUR_OF_DAY field alignment.
Used in FieldPosition of date/time formatting.
HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.
For example, 23:59 + 01:00 results in 00:59.

"
      end

      attribute 1914498 "MINUTE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for MINUTE field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1914626 "SECOND_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for SECOND field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1914754 "MILLISECOND_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for MILLISECOND field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1914882 "DAY_OF_WEEK_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for DAY_OF_WEEK field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1915010 "DAY_OF_YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for DAY_OF_YEAR field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1915138 "DAY_OF_WEEK_IN_MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for DAY_OF_WEEK_IN_MONTH field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1915266 "WEEK_OF_YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for WEEK_OF_YEAR field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1915394 "WEEK_OF_MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for WEEK_OF_MONTH field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1915522 "AM_PM_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for AM_PM field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1915650 "HOUR1_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for one-based HOUR field alignment.
Used in FieldPosition of date/time formatting.
HOUR1_FIELD is used for the one-based 12-hour clock.
For example, 11:30 PM + 1 hour results in 12:30 AM.

"
      end

      attribute 1915778 "HOUR0_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for zero-based HOUR field alignment.
Used in FieldPosition of date/time formatting.
HOUR0_FIELD is used for the zero-based 12-hour clock.
For example, 11:30 PM + 1 hour results in 00:30 AM.

"
      end

      attribute 1915906 "TIMEZONE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Useful constant for TIMEZONE field alignment.
Used in FieldPosition of date/time formatting.

"
      end

      attribute 1916034 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7218322306649953788L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Proclaim serial compatibility with 1.1 FCS
"
      end

      operation 8261890 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "fieldPosition" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Format.
Formats a time object into a time string. Examples of time objects
are a time value expressed in milliseconds and a Date object.
@param obj must be a Number or a Date.
@param toAppendTo the string buffer for the returning time string.
@return the string buffer passed in as toAppendTo, with formatted text appended.
@param fieldPosition keeps track of the position of the field
within the returned string.
On input: an alignment field,
if desired. On output: the offsets of the alignment field. For
example, given a time text \"1996.07.10 AD at 15:08:56 PDT\",
if the given fieldPosition is DateFormat.YEAR_FIELD, the
begin index and end index of fieldPosition will be set to
0 and 4, respectively.
Notice that if the same time field appears
more than once in a pattern, the fieldPosition will be set for the first
occurrence of that time field. For instance, formatting a Date to
the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern
\"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD,
the begin index and end index of fieldPosition will be set to
5 and 8, respectively, for the first occurrence of the timezone
pattern character 'z'.
@see java.text.Format
"
      end

      operation 8262018 "format"
	abstract public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 521474 // Date
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "fieldPosition" type class_ref 637186 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a Date into a date/time string.
@param date a Date to be formatted into a date/time string.
@param toAppendTo the string buffer for the returning date/time string.
@param fieldPosition keeps track of the position of the field
within the returned string.
On input: an alignment field,
if desired. On output: the offsets of the alignment field. For
example, given a time text \"1996.07.10 AD at 15:08:56 PDT\",
if the given fieldPosition is DateFormat.YEAR_FIELD, the
begin index and end index of fieldPosition will be set to
0 and 4, respectively.
Notice that if the same time field appears
more than once in a pattern, the fieldPosition will be set for the first
occurrence of that time field. For instance, formatting a Date to
the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern
\"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD,
the begin index and end index of fieldPosition will be set to
5 and 8, respectively, for the first occurrence of the timezone
pattern character 'z'.
@return the string buffer passed in as toAppendTo, with formatted text appended.
"
      end

      operation 8262146 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "date" type class_ref 521474 // Date
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a Date into a date/time string.
@param date the time value to be formatted into a time string.
@return the formatted time string.
"
      end

      operation 8262274 "parse"
	public return_type class_ref 521474 // Date
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce a date.
The method may not use the entire text of the given string.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on date parsing.

@param source A <code>String</code> whose beginning should be parsed.
@return A <code>Date</code> parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed.
"
      end

      operation 8262402 "parse"
	abstract public return_type class_ref 521474 // Date
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a date/time string according to the given parse position.  For
example, a time text {@code \"07/10/96 4:5 PM, PDT\"} will be parsed into a {@code Date}
that is equivalent to {@code Date(837039900000L)}.

<p> By default, parsing is lenient: If the input is not in the form used
by this object's format method but can still be parsed as a date, then
the parse succeeds.  Clients may insist on strict adherence to the
format by calling {@link #setLenient(boolean) setLenient(false)}.

<p>This parsing operation uses the {@link #calendar} to produce
a {@code Date}. As a result, the {@code calendar}'s date-time
fields and the {@code TimeZone} value may have been
overwritten, depending on subclass implementations. Any {@code
TimeZone} value that has previously been set by a call to
{@link #setTimeZone(java.util.TimeZone) setTimeZone} may need
to be restored for further operations.

@param source  The date/time string to be parsed

@param pos   On input, the position at which to start parsing; on
             output, the position at which parsing terminated, or the
             start position if the parse failed.

@return      A {@code Date}, or {@code null} if the input could not be parsed
"
      end

      operation 8262530 "parseObject"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce a <code>Date</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
date is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on date parsing.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return A <code>Date</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null.
"
      end

      attribute 1916162 "FULL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for full style pattern.

"
      end

      attribute 1916290 "LONG"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for long style pattern.

"
      end

      attribute 1916418 "MEDIUM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for medium style pattern.

"
      end

      attribute 1916546 "SHORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for short style pattern.

"
      end

      attribute 1916674 "DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " MEDIUM"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant for default style pattern.  Its value is MEDIUM.

"
      end

      operation 8262658 "getTimeInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time formatter with the default formatting style
for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getTimeInstance(int, Locale) getTimeInstance(DEFAULT,
    Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@return a time formatter.
"
      end

      operation 8262786 "getTimeInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 1
	  param in name "style" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time formatter with the given formatting style
for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getTimeInstance(int, Locale) getTimeInstance(style,
    Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@param style the given formatting style. For example,
SHORT for \"h:mm a\" in the US locale.
@return a time formatter.
"
      end

      operation 8262914 "getTimeInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 2
	  param in name "style" explicit_type "int"
	  param inout name "aLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time formatter with the given formatting style
for the given locale.
@param style the given formatting style. For example,
SHORT for \"h:mm a\" in the US locale.
@param aLocale the given locale.
@return a time formatter.
"
      end

      operation 8263042 "getDateInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date formatter with the default formatting style
for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getDateInstance(int, Locale) getDateInstance(DEFAULT,
    Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@return a date formatter.
"
      end

      operation 8263170 "getDateInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 1
	  param in name "style" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date formatter with the given formatting style
for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getDateInstance(int, Locale) getDateInstance(style,
    Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@param style the given formatting style. For example,
SHORT for \"M/d/yy\" in the US locale.
@return a date formatter.
"
      end

      operation 8263298 "getDateInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 2
	  param in name "style" explicit_type "int"
	  param inout name "aLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date formatter with the given formatting style
for the given locale.
@param style the given formatting style. For example,
SHORT for \"M/d/yy\" in the US locale.
@param aLocale the given locale.
@return a date formatter.
"
      end

      operation 8263426 "getDateTimeInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date/time formatter with the default formatting style
for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(DEFAULT,
    DEFAULT, Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@return a date/time formatter.
"
      end

      operation 8263554 "getDateTimeInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 2
	  param in name "dateStyle" explicit_type "int"
	  param in name "timeStyle" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date/time formatter with the given date and time
formatting styles for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(dateStyle,
    timeStyle, Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@param dateStyle the given date formatting style. For example,
SHORT for \"M/d/yy\" in the US locale.
@param timeStyle the given time formatting style. For example,
SHORT for \"h:mm a\" in the US locale.
@return a date/time formatter.
"
      end

      operation 8263682 "getDateTimeInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 3
	  param in name "dateStyle" explicit_type "int"
	  param in name "timeStyle" explicit_type "int"
	  param inout name "aLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the date/time formatter with the given formatting styles
for the given locale.
@param dateStyle the given date formatting style.
@param timeStyle the given time formatting style.
@param aLocale the given locale.
@return a date/time formatter.
"
      end

      operation 8263810 "getInstance"
	class_operation public return_type class_ref 473090 // DateFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a default date/time formatter that uses the SHORT style for both the
date and the time.

@return a date/time formatter
"
      end

      operation 8263938 "getAvailableLocales"
	class_operation public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>get*Instance</code> methods of this class can return
localized instances.
The returned array represents the union of locales supported by the Java
runtime and by installed
{@link java.text.spi.DateFormatProvider DateFormatProvider} implementations.
It must contain at least a <code>Locale</code> instance equal to
{@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>DateFormat</code> instances are available.
"
      end

      operation 8264066 "setCalendar"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newCalendar" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the calendar to be used by this date format.  Initially, the default
calendar for the specified or default locale is used.

<p>Any {@link java.util.TimeZone TimeZone} and {@linkplain
#isLenient() leniency} values that have previously been set are
overwritten by {@code newCalendar}'s values.

@param newCalendar the new {@code Calendar} to be used by the date format
"
      end

      operation 8264194 "getCalendar"
	public return_type class_ref 723586 // Calendar
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the calendar associated with this date/time formatter.

@return the calendar associated with this date/time formatter.
"
      end

      operation 8264322 "setNumberFormat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newNumberFormat" type class_ref 1045890 // NumberFormat
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to set the number formatter.
@param newNumberFormat the given new NumberFormat.
"
      end

      operation 8264450 "getNumberFormat"
	public return_type class_ref 1045890 // NumberFormat
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number formatter which this date/time formatter uses to
format and parse a time.
@return the number formatter which this date/time formatter uses.
"
      end

      operation 8264578 "setTimeZone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "zone" type class_ref 723970 // TimeZone
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time zone for the calendar of this {@code DateFormat} object.
This method is equivalent to the following call.
<blockquote><pre>{@code
getCalendar().setTimeZone(zone)
}</pre></blockquote>

<p>The {@code TimeZone} set by this method is overwritten by a
{@link #setCalendar(java.util.Calendar) setCalendar} call.

<p>The {@code TimeZone} set by this method may be overwritten as
a result of a call to the parse method.

@param zone the given new time zone.
"
      end

      operation 8264706 "getTimeZone"
	public return_type class_ref 723970 // TimeZone
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time zone.
This method is equivalent to the following call.
<blockquote><pre>{@code
getCalendar().getTimeZone()
}</pre></blockquote>

@return the time zone associated with the calendar of DateFormat.
"
      end

      operation 8264834 "setLenient"
	public explicit_return_type "void"
	nparams 1
	  param inout name "lenient" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify whether or not date/time parsing is to be lenient.  With
lenient parsing, the parser may use heuristics to interpret inputs that
do not precisely match this object's format.  With strict parsing,
inputs must match this object's format.

<p>This method is equivalent to the following call.
<blockquote><pre>{@code
getCalendar().setLenient(lenient)
}</pre></blockquote>

<p>This leniency value is overwritten by a call to {@link
#setCalendar(java.util.Calendar) setCalendar()}.

@param lenient when {@code true}, parsing is lenient
@see java.util.Calendar#setLenient(boolean)
"
      end

      operation 8264962 "isLenient"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether date/time parsing is to be lenient.
This method is equivalent to the following call.
<blockquote><pre>{@code
getCalendar().isLenient()
}</pre></blockquote>

@return {@code true} if the {@link #calendar} is lenient;
        {@code false} otherwise.
@see java.util.Calendar#isLenient()
"
      end

      operation 8265090 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides hashCode
"
      end

      operation 8265218 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals
"
      end

      operation 8265346 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable
"
      end

      operation 8265474 "get"
	class_operation private return_type class_ref 473090 // DateFormat
	nparams 4
	  param in name "timeStyle" explicit_type "int"
	  param in name "dateStyle" explicit_type "int"
	  param in name "flags" explicit_type "int"
	  param inout name "loc" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DateFormat with the given time and/or date style in the given
locale.
@param timeStyle a value from 0 to 3 indicating the time format,
ignored if flags is 2
@param dateStyle a value from 0 to 3 indicating the time format,
ignored if flags is 1
@param flags either 1 for a time format, 2 for a date format,
or 3 for a date/time format
@param loc the locale for the format
"
      end

      operation 8265602 "get"
	class_operation private return_type class_ref 473090 // DateFormat
	nparams 4
	  param inout name "adapter" explicit_type "LocaleProviderAdapter"
	  param in name "timeStyle" explicit_type "int"
	  param in name "dateStyle" explicit_type "int"
	  param inout name "loc" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8265730 "DateFormat"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new date format.
"
      end
    end

    class 589826 "Collator"
      abstract visibility public 
      nactuals 1
      actual class class_ref 184962 // Comparator
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Collator</code> class performs locale-sensitive
<code>String</code> comparison. You use this class to build
searching and sorting routines for natural language text.

<p>
<code>Collator</code> is an abstract base class. Subclasses
implement specific collation strategies. One subclass,
<code>RuleBasedCollator</code>, is currently provided with
the Java Platform and is applicable to a wide set of languages. Other
subclasses may be created to handle more specialized needs.

<p>
Like other locale-sensitive classes, you can use the static
factory method, <code>getInstance</code>, to obtain the appropriate
<code>Collator</code> object for a given locale. You will only need
to look at the subclasses of <code>Collator</code> if you need
to understand the details of a particular collation strategy or
if you need to modify that strategy.

<p>
The following example shows how to compare two strings using
the <code>Collator</code> for the default locale.
<blockquote>
<pre>{@code
// Compare two strings in the default locale
Collator myCollator = Collator.getInstance();
if( myCollator.compare(\"abc\", \"ABC\") < 0 )
    System.out.println(\"abc is less than ABC\");
else
    System.out.println(\"abc is greater than or equal to ABC\");
}</pre>
</blockquote>

<p>
You can set a <code>Collator</code>'s <em>strength</em> property
to determine the level of difference considered significant in
comparisons. Four strengths are provided: <code>PRIMARY</code>,
<code>SECONDARY</code>, <code>TERTIARY</code>, and <code>IDENTICAL</code>.
The exact assignment of strengths to language features is
locale dependant.  For example, in Czech, \"e\" and \"f\" are considered
primary differences, while \"e\" and \"&#283;\" are secondary differences,
\"e\" and \"E\" are tertiary differences and \"e\" and \"e\" are identical.
The following shows how both case and accents could be ignored for
US English.
<blockquote>
<pre>
//Get the Collator for US English and set its strength to PRIMARY
Collator usCollator = Collator.getInstance(Locale.US);
usCollator.setStrength(Collator.PRIMARY);
if( usCollator.compare(\"abc\", \"ABC\") == 0 ) {
    System.out.println(\"Strings are equivalent\");
}
</pre>
</blockquote>
<p>
For comparing <code>String</code>s exactly once, the <code>compare</code>
method provides the best performance. When sorting a list of
<code>String</code>s however, it is generally necessary to compare each
<code>String</code> multiple times. In this case, <code>CollationKey</code>s
provide better performance. The <code>CollationKey</code> class converts
a <code>String</code> to a series of bits that can be compared bitwise
against other <code>CollationKey</code>s. A <code>CollationKey</code> is
created by a <code>Collator</code> object for a given <code>String</code>.
<br>
<strong>Note:</strong> <code>CollationKey</code>s from different
<code>Collator</code>s can not be compared. See the class description
for {@link CollationKey}
for an example using <code>CollationKey</code>s.

@see         RuleBasedCollator
@see         CollationKey
@see         CollationElementIterator
@see         Locale
@author      Helena Shih, Laura Werner, Richard Gillam
"
      classrelation 3408130 // <realization>
	relation 3408130 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3408130 // <realization>
	  b parent class_ref 184962 // Comparator
      end

      classrelation 3408258 // <realization>
	relation 3408258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3408258 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1912194 "PRIMARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Collator strength value.  When set, only PRIMARY differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for
different base letters (\"a\" vs \"b\") to be considered a PRIMARY difference.
@see java.text.Collator#setStrength
@see java.text.Collator#getStrength

"
      end

      attribute 1912322 "SECONDARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Collator strength value.  When set, only SECONDARY and above differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for
different accented forms of the same base letter (\"a\" vs \"\\u00E4\") to be
considered a SECONDARY difference.
@see java.text.Collator#setStrength
@see java.text.Collator#getStrength

"
      end

      attribute 1912450 "TERTIARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Collator strength value.  When set, only TERTIARY and above differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for
case differences (\"a\" vs \"A\") to be considered a TERTIARY difference.
@see java.text.Collator#setStrength
@see java.text.Collator#getStrength

"
      end

      attribute 1912578 "IDENTICAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Collator strength value.  When set, all differences are
considered significant during comparison. The assignment of strengths
to language features is locale dependant. A common example is for control
characters (\"&#092;u0001\" vs \"&#092;u0002\") to be considered equal at the
PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL
level.  Additionally, differences between pre-composed accents such as
\"&#092;u00C0\" (A-grave) and combining accents such as \"A&#092;u0300\"
(A, combining-grave) will be considered significant at the IDENTICAL
level if decomposition is set to NO_DECOMPOSITION.

"
      end

      attribute 1912706 "NO_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Decomposition mode value. With NO_DECOMPOSITION
set, accented characters will not be decomposed for collation. This
is the default setting and provides the fastest collation but
will only produce correct results for languages that do not use accents.
@see java.text.Collator#getDecomposition
@see java.text.Collator#setDecomposition

"
      end

      attribute 1912834 "CANONICAL_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Decomposition mode value. With CANONICAL_DECOMPOSITION
set, characters that are canonical variants according to Unicode
standard will be decomposed for collation. This should be used to get
correct collation of accented characters.
<p>
CANONICAL_DECOMPOSITION corresponds to Normalization Form D as
described in
<a href=\"http://www.unicode.org/unicode/reports/tr15/tr15-23.html\">Unicode
Technical Report #15</a>.
@see java.text.Collator#getDecomposition
@see java.text.Collator#setDecomposition

"
      end

      attribute 1912962 "FULL_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Decomposition mode value. With FULL_DECOMPOSITION
set, both Unicode canonical variants and Unicode compatibility variants
will be decomposed for collation.  This causes not only accented
characters to be collated, but also characters that have special formats
to be collated with their norminal form. For example, the half-width and
full-width ASCII and Katakana characters are then collated together.
FULL_DECOMPOSITION is the most complete and therefore the slowest
decomposition mode.
<p>
FULL_DECOMPOSITION corresponds to Normalization Form KD as
described in
<a href=\"http://www.unicode.org/unicode/reports/tr15/tr15-23.html\">Unicode
Technical Report #15</a>.
@see java.text.Collator#getDecomposition
@see java.text.Collator#setDecomposition

"
      end

      operation 8259970 "getInstance"
	class_operation public return_type class_ref 589826 // Collator
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Collator for the current default locale.
The default locale is determined by java.util.Locale.getDefault.
@return the Collator for the default locale.(for example, en_US)
@see java.util.Locale#getDefault
"
      end

      operation 8260098 "getInstance"
	class_operation public return_type class_ref 589826 // Collator
	nparams 1
	  param inout name "desiredLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Collator for the desired locale.
@param desiredLocale the desired locale.
@return the Collator for the desired locale.
@see java.util.Locale
@see java.util.ResourceBundle
"
      end

      operation 8260226 "compare"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "target" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the source string to the target string according to the
collation rules for this Collator.  Returns an integer less than,
equal to or greater than zero depending on whether the source String is
less than, equal to or greater than the target string.  See the Collator
class description for an example of use.
<p>
For a one time comparison, this method has the best performance. If a
given String will be involved in multiple comparisons, CollationKey.compareTo
has the best performance. See the Collator class description for an example
using CollationKeys.
@param source the source string.
@param target the target string.
@return Returns an integer value. Value is less than zero if source is less than
target, value is zero if source and target are equal, value is greater than zero
if source is greater than target.
@see java.text.CollationKey
@see java.text.Collator#getCollationKey
"
      end

      operation 8260354 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "o1" type class_ref 129538 // Object
	  param inout name "o2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares its two arguments for order.  Returns a negative integer,
zero, or a positive integer as the first argument is less than, equal
to, or greater than the second.
<p>
This implementation merely returns
 <code> compare((String)o1, (String)o2) </code>.

@return a negative integer, zero, or a positive integer as the
        first argument is less than, equal to, or greater than the
        second.
@exception ClassCastException the arguments cannot be cast to Strings.
@see java.util.Comparator
@since   1.2
"
      end

      operation 8260482 "getCollationKey"
	abstract public return_type class_ref 1046402 // CollationKey
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the String into a series of bits that can be compared bitwise
to other CollationKeys. CollationKeys provide better performance than
Collator.compare when Strings are involved in multiple comparisons.
See the Collator class description for an example using CollationKeys.
@param source the string to be transformed into a collation key.
@return the CollationKey for the given String based on this Collator's collation
rules. If the source String is null, a null CollationKey is returned.
@see java.text.CollationKey
@see java.text.Collator#compare
"
      end

      operation 8260610 "equals"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "target" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for comparing the equality of two strings based on
this Collator's collation rules.
@param source the source string to be compared with.
@param target the target string to be compared with.
@return true if the strings are equal according to the collation
rules.  false, otherwise.
@see java.text.Collator#compare
"
      end

      operation 8260738 "getStrength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this Collator's strength property.  The strength property determines
the minimum level of difference considered significant during comparison.
See the Collator class description for an example of use.
@return this Collator's current strength property.
@see java.text.Collator#setStrength
@see java.text.Collator#PRIMARY
@see java.text.Collator#SECONDARY
@see java.text.Collator#TERTIARY
@see java.text.Collator#IDENTICAL
"
      end

      operation 8260866 "setStrength"
	public explicit_return_type "void"
	nparams 1
	  param in name "newStrength" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this Collator's strength property.  The strength property determines
the minimum level of difference considered significant during comparison.
See the Collator class description for an example of use.
@param newStrength  the new strength value.
@see java.text.Collator#getStrength
@see java.text.Collator#PRIMARY
@see java.text.Collator#SECONDARY
@see java.text.Collator#TERTIARY
@see java.text.Collator#IDENTICAL
@exception  IllegalArgumentException If the new strength value is not one of
PRIMARY, SECONDARY, TERTIARY or IDENTICAL.
"
      end

      operation 8260994 "getDecomposition"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the decomposition mode of this Collator. Decomposition mode
determines how Unicode composed characters are handled. Adjusting
decomposition mode allows the user to select between faster and more
complete collation behavior.
<p>The three values for decomposition mode are:
<UL>
<LI>NO_DECOMPOSITION,
<LI>CANONICAL_DECOMPOSITION
<LI>FULL_DECOMPOSITION.
</UL>
See the documentation for these three constants for a description
of their meaning.
@return the decomposition mode
@see java.text.Collator#setDecomposition
@see java.text.Collator#NO_DECOMPOSITION
@see java.text.Collator#CANONICAL_DECOMPOSITION
@see java.text.Collator#FULL_DECOMPOSITION
"
      end

      operation 8261122 "setDecomposition"
	public explicit_return_type "void"
	nparams 1
	  param in name "decompositionMode" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the decomposition mode of this Collator. See getDecomposition
for a description of decomposition mode.
@param decompositionMode  the new decomposition mode.
@see java.text.Collator#getDecomposition
@see java.text.Collator#NO_DECOMPOSITION
@see java.text.Collator#CANONICAL_DECOMPOSITION
@see java.text.Collator#FULL_DECOMPOSITION
@exception IllegalArgumentException If the given value is not a valid decomposition
mode.
"
      end

      operation 8261250 "getAvailableLocales"
	class_operation public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>getInstance</code> methods of this class can return
localized instances.
The returned array represents the union of locales supported
by the Java runtime and by installed
{@link java.text.spi.CollatorProvider CollatorProvider} implementations.
It must contain at least a Locale instance equal to
{@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>Collator</code> instances are available.
"
      end

      operation 8261378 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Overrides Cloneable
"
      end

      operation 8261506 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the equality of two Collators.
@param that the Collator to be compared with this.
@return true if this Collator is the same as that Collator;
false otherwise.
"
      end

      operation 8261634 "hashCode"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Generates the hash code for this Collator.
"
      end

      operation 8261762 "Collator"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.  This constructor is
protected so subclasses can get access to it. Users typically create
a Collator sub-class by calling the factory method getInstance.
@see java.text.Collator#getInstance
"
      end

      attribute 1913090 "strength"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1913218 "decmp"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3408386 // cache (<unidirectional association>)
	relation 3408386 --->
	  a role_name "cache" init_value " new ConcurrentHashMap<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale, SoftReference<Collator>> ${name}${value};
"
	    classrelation_ref 3408386 // cache (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      attribute 1913346 "LESS"
	class_attribute const_attribute package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " FIXME: These three constants should be removed.


LESS is returned if source string is compared to be less than target
string in the compare() method.
@see java.text.Collator#compare

"
      end

      attribute 1913474 "EQUAL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "EQUAL is returned if source string is compared to be equal to target
string in the compare() method.
@see java.text.Collator#compare

"
      end

      attribute 1913602 "GREATER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "GREATER is returned if source string is compared to be greater than
target string in the compare() method.
@see java.text.Collator#compare

"
      end
    end

    class 636418 "DecimalFormatSymbols"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents the set of symbols (such as the decimal separator,
the grouping separator, and so on) needed by <code>DecimalFormat</code>
to format numbers. <code>DecimalFormat</code> creates for itself an instance of
<code>DecimalFormatSymbols</code> from its locale data.  If you need to change any
of these symbols, you can get the <code>DecimalFormatSymbols</code> object from
your <code>DecimalFormat</code> and modify it.

@see          java.util.Locale
@see          DecimalFormat
@author       Mark Davis
@author       Alan Liu
"
      classrelation 3413250 // <realization>
	relation 3413250 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3413250 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3413378 // <realization>
	relation 3413378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3413378 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      operation 8280450 "DecimalFormatSymbols"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a DecimalFormatSymbols object for the default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
This constructor can only construct instances for the locales
supported by the Java runtime environment, not for those
supported by installed
{@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}
implementations. For full locale coverage, use the
{@link #getInstance(Locale) getInstance} method.
<p>This is equivalent to calling
{@link #DecimalFormatSymbols(Locale)
    DecimalFormatSymbols(Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
"
      end

      operation 8280578 "DecimalFormatSymbols"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a DecimalFormatSymbols object for the given locale.
This constructor can only construct instances for the locales
supported by the Java runtime environment, not for those
supported by installed
{@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}
implementations. For full locale coverage, use the
{@link #getInstance(Locale) getInstance} method.
If the specified locale contains the {@link java.util.Locale#UNICODE_LOCALE_EXTENSION}
for the numbering system, the instance is initialized with the specified numbering
system if the JRE implementation supports it. For example,
<pre>
NumberFormat.getNumberInstance(Locale.forLanguageTag(\"th-TH-u-nu-thai\"))
</pre>
This may return a {@code NumberFormat} instance with the Thai numbering system,
instead of the Latin numbering system.

@param locale the desired locale
@exception NullPointerException if <code>locale</code> is null
"
      end

      operation 8280706 "getAvailableLocales"
	class_operation public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>getInstance</code> methods of this class can return
localized instances.
The returned array represents the union of locales supported by the Java
runtime and by installed
{@link java.text.spi.DecimalFormatSymbolsProvider DecimalFormatSymbolsProvider}
implementations.  It must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return an array of locales for which localized
        <code>DecimalFormatSymbols</code> instances are available.
@since 1.6
"
      end

      operation 8280834 "getInstance"
	class_operation public return_type class_ref 636418 // DecimalFormatSymbols
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>DecimalFormatSymbols</code> instance for the default
locale.  This method provides access to <code>DecimalFormatSymbols</code>
instances for locales supported by the Java runtime itself as well
as for those supported by installed
{@link java.text.spi.DecimalFormatSymbolsProvider
DecimalFormatSymbolsProvider} implementations.
<p>This is equivalent to calling
{@link #getInstance(Locale)
    getInstance(Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@return a <code>DecimalFormatSymbols</code> instance.
@since 1.6
"
      end

      operation 8280962 "getInstance"
	class_operation public return_type class_ref 636418 // DecimalFormatSymbols
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>DecimalFormatSymbols</code> instance for the specified
locale.  This method provides access to <code>DecimalFormatSymbols</code>
instances for locales supported by the Java runtime itself as well
as for those supported by installed
{@link java.text.spi.DecimalFormatSymbolsProvider
DecimalFormatSymbolsProvider} implementations.
If the specified locale contains the {@link java.util.Locale#UNICODE_LOCALE_EXTENSION}
for the numbering system, the instance is initialized with the specified numbering
system if the JRE implementation supports it. For example,
<pre>
NumberFormat.getNumberInstance(Locale.forLanguageTag(\"th-TH-u-nu-thai\"))
</pre>
This may return a {@code NumberFormat} instance with the Thai numbering system,
instead of the Latin numbering system.

@param locale the desired locale.
@return a <code>DecimalFormatSymbols</code> instance.
@exception NullPointerException if <code>locale</code> is null
@since 1.6
"
      end

      operation 8281090 "getZeroDigit"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for zero. Different for Arabic, etc.

@return the character used for zero
"
      end

      operation 8281218 "setZeroDigit"
	public explicit_return_type "void"
	nparams 1
	  param in name "zeroDigit" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for zero. Different for Arabic, etc.

@param zeroDigit the character used for zero
"
      end

      operation 8281346 "getGroupingSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for thousands separator. Different for French, etc.

@return the grouping separator
"
      end

      operation 8281474 "setGroupingSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "groupingSeparator" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for thousands separator. Different for French, etc.

@param groupingSeparator the grouping separator
"
      end

      operation 8281602 "getDecimalSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for decimal sign. Different for French, etc.

@return the character used for decimal sign
"
      end

      operation 8281730 "setDecimalSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "decimalSeparator" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for decimal sign. Different for French, etc.

@param decimalSeparator the character used for decimal sign
"
      end

      operation 8281858 "getPerMill"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for per mille sign. Different for Arabic, etc.

@return the character used for per mille sign
"
      end

      operation 8281986 "setPerMill"
	public explicit_return_type "void"
	nparams 1
	  param in name "perMill" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for per mille sign. Different for Arabic, etc.

@param perMill the character used for per mille sign
"
      end

      operation 8282114 "getPercent"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for percent sign. Different for Arabic, etc.

@return the character used for percent sign
"
      end

      operation 8282242 "setPercent"
	public explicit_return_type "void"
	nparams 1
	  param in name "percent" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for percent sign. Different for Arabic, etc.

@param percent the character used for percent sign
"
      end

      operation 8282370 "getDigit"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used for a digit in a pattern.

@return the character used for a digit in a pattern
"
      end

      operation 8282498 "setDigit"
	public explicit_return_type "void"
	nparams 1
	  param in name "digit" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used for a digit in a pattern.

@param digit the character used for a digit in a pattern
"
      end

      operation 8282626 "getPatternSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used to separate positive and negative subpatterns
in a pattern.

@return the pattern separator
"
      end

      operation 8282754 "setPatternSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "patternSeparator" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used to separate positive and negative subpatterns
in a pattern.

@param patternSeparator the pattern separator
"
      end

      operation 8282882 "getInfinity"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the string used to represent infinity. Almost always left
unchanged.

@return the string representing infinity
"
      end

      operation 8283010 "setInfinity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "infinity" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string used to represent infinity. Almost always left
unchanged.

@param infinity the string representing infinity
"
      end

      operation 8283138 "getNaN"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the string used to represent \"not a number\". Almost always left
unchanged.

@return the string representing \"not a number\"
"
      end

      operation 8283266 "setNaN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "NaN" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string used to represent \"not a number\". Almost always left
unchanged.

@param NaN the string representing \"not a number\"
"
      end

      operation 8283394 "getMinusSign"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character used to represent minus sign. If no explicit
negative format is specified, one is formed by prefixing
minusSign to the positive format.

@return the character representing minus sign
"
      end

      operation 8283522 "setMinusSign"
	public explicit_return_type "void"
	nparams 1
	  param in name "minusSign" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used to represent minus sign. If no explicit
negative format is specified, one is formed by prefixing
minusSign to the positive format.

@param minusSign the character representing minus sign
"
      end

      operation 8283650 "getCurrencySymbol"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currency symbol for the currency of these
DecimalFormatSymbols in their locale.

@return the currency symbol
@since 1.2
"
      end

      operation 8283778 "setCurrencySymbol"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency symbol for the currency of these
DecimalFormatSymbols in their locale.

@param currency the currency symbol
@since 1.2
"
      end

      operation 8283906 "getInternationalCurrencySymbol"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ISO 4217 currency code of the currency of these
DecimalFormatSymbols.

@return the currency code
@since 1.2
"
      end

      operation 8284034 "setInternationalCurrencySymbol"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currencyCode" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ISO 4217 currency code of the currency of these
DecimalFormatSymbols.
If the currency code is valid (as defined by
{@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance}),
this also sets the currency attribute to the corresponding Currency
instance and the currency symbol attribute to the currency's symbol
in the DecimalFormatSymbols' locale. If the currency code is not valid,
then the currency attribute is set to null and the currency symbol
attribute is not modified.

@param currencyCode the currency code
@see #setCurrency
@see #setCurrencySymbol
@since 1.2
"
      end

      operation 8284162 "getCurrency"
	public return_type class_ref 1046018 // Currency
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the currency of these DecimalFormatSymbols. May be null if the
currency symbol attribute was previously set to a value that's not
a valid ISO 4217 currency code.

@return the currency used, or null
@since 1.4
"
      end

      operation 8284290 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 1046018 // Currency
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency of these DecimalFormatSymbols.
This also sets the currency symbol attribute to the currency's symbol
in the DecimalFormatSymbols' locale, and the international currency
symbol attribute to the currency's ISO 4217 currency code.

@param currency the new currency to be used
@exception NullPointerException if <code>currency</code> is null
@since 1.4
@see #setCurrencySymbol
@see #setInternationalCurrencySymbol
"
      end

      operation 8284418 "getMonetaryDecimalSeparator"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the monetary decimal separator.

@return the monetary decimal separator
@since 1.2
"
      end

      operation 8284546 "setMonetaryDecimalSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "sep" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the monetary decimal separator.

@param sep the monetary decimal separator
@since 1.2
"
      end

      operation 8284674 "getExponentialSymbol"
	package explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------------------------
 BEGIN   Package Private methods ... to be made public later
------------------------------------------------------------

Returns the character used to separate the mantissa from the exponent.
"
      end

      operation 8284802 "getExponentSeparator"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string used to separate the mantissa from the exponent.
Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.

@return the exponent separator string
@see #setExponentSeparator(java.lang.String)
@since 1.6
"
      end

      operation 8284930 "setExponentialSymbol"
	package explicit_return_type "void"
	nparams 1
	  param in name "exp" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used to separate the mantissa from the exponent.
"
      end

      operation 8285058 "setExponentSeparator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "exp" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string used to separate the mantissa from the exponent.
Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.

@param exp the exponent separator string
@exception NullPointerException if <code>exp</code> is null
@see #getExponentSeparator()
@since 1.6
"
      end

      operation 8285186 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "------------------------------------------------------------
 END     Package Private methods ... to be made public later
------------------------------------------------------------

Standard override.
"
      end

      operation 8285314 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override equals.
"
      end

      operation 8285442 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override hashCode.
"
      end

      operation 8285570 "initialize"
	private explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the symbols from the FormatData resource bundle.
"
      end

      operation 8285698 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the default serializable fields, provides default values for objects
in older serial versions, and initializes non-serializable fields.
If <code>serialVersionOnStream</code>
is less than 1, initializes <code>monetarySeparator</code> to be
the same as <code>decimalSeparator</code> and <code>exponential</code>
to be 'E'.
If <code>serialVersionOnStream</code> is less than 2,
initializes <code>locale</code>to the root locale, and initializes
If <code>serialVersionOnStream</code> is less than 3, it initializes
<code>exponentialSeparator</code> using <code>exponential</code>.
Sets <code>serialVersionOnStream</code> back to the maximum allowed value so that
default serialization will work properly if this object is streamed out again.
Initializes the currency from the intlCurrencySymbol field.

@since JDK 1.1.6
"
      end

      attribute 1927042 "zeroDigit"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used for zero.

@serial
@see #getZeroDigit

"
      end

      attribute 1927170 "groupingSeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used for thousands separator.

@serial
@see #getGroupingSeparator

"
      end

      attribute 1927298 "decimalSeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used for decimal sign.

@serial
@see #getDecimalSeparator

"
      end

      attribute 1927426 "perMill"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used for per mille sign.

@serial
@see #getPerMill

"
      end

      attribute 1927554 "percent"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used for percent sign.
@serial
@see #getPercent

"
      end

      attribute 1927682 "digit"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used for a digit in a pattern.

@serial
@see #getDigit

"
      end

      attribute 1927810 "patternSeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used to separate positive and negative subpatterns
in a pattern.

@serial
@see #getPatternSeparator

"
      end

      classrelation 3413506 // infinity (<unidirectional association>)
	relation 3413506 --->
	  a role_name "infinity" private
	    comment "
String used to represent infinity.
@serial
@see #getInfinity

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3413506 // infinity (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3413634 // NaN (<unidirectional association>)
	relation 3413634 --->
	  a role_name "NaN" private
	    comment "
String used to represent \"not a number\".
@serial
@see #getNaN

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3413634 // NaN (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1927938 "minusSign"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Character used to represent minus sign.
@serial
@see #getMinusSign

"
      end

      classrelation 3413762 // currencySymbol (<unidirectional association>)
	relation 3413762 --->
	  a role_name "currencySymbol" private
	    comment "
String denoting the local currency, e.g. \"$\".
@serial
@see #getCurrencySymbol

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3413762 // currencySymbol (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3413890 // intlCurrencySymbol (<unidirectional association>)
	relation 3413890 --->
	  a role_name "intlCurrencySymbol" private
	    comment "
ISO 4217 currency code denoting the local currency, e.g. \"USD\".
@serial
@see #getInternationalCurrencySymbol

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3413890 // intlCurrencySymbol (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1928066 "monetarySeparator"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The decimal separator used when formatting currency values.
@serial
@since JDK 1.1.6
@see #getMonetaryDecimalSeparator

 Field new in JDK 1.1.6"
      end

      attribute 1928194 "exponential"
	private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The character used to distinguish the exponent in a number formatted
in exponential notation, e.g. 'E' for a number such as \"1.23E45\".
<p>
Note that the public API provides no way to set this field,
even though it is supported by the implementation and the stream format.
The intent is that this will be added to the API in the future.

@serial
@since JDK 1.1.6

 Field new in JDK 1.1.6"
      end

      classrelation 3414018 // exponentialSeparator (<unidirectional association>)
	relation 3414018 --->
	  a role_name "exponentialSeparator" private
	    comment "
The string used to separate the mantissa from the exponent.
Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.
<p>
If both <code>exponential</code> and <code>exponentialSeparator</code>
exist, this <code>exponentialSeparator</code> has the precedence.

@serial
@since 1.6

 Field new in JDK 1.6"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3414018 // exponentialSeparator (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3414146 // locale (<unidirectional association>)
	relation 3414146 --->
	  a role_name "locale" private
	    comment "
The locale of these currency format symbols.

@serial
@since 1.4

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3414146 // locale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 3414274 // currency (<unidirectional association>)
	relation 3414274 --->
	  a role_name "currency" private
	    comment " currency; only the ISO code is serialized.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3414274 // currency (<unidirectional association>)
	  b parent class_ref 1046018 // Currency
      end

      attribute 1928322 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 5772796243397350300L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Proclaim JDK 1.1 FCS compatibility
"
      end

      attribute 1928450 "currentSerialVersion"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The internal serial version which says which version was written
 - 0 (default) for version up to JDK 1.1.5
 - 1 for version from JDK 1.1.6, which includes two new fields:
     monetarySeparator and exponential.
 - 2 for version from J2SE 1.4, which includes locale field.
 - 3 for version from J2SE 1.6, which includes exponentialSeparator field.
"
      end

      attribute 1928578 "serialVersionOnStream"
	private explicit_type "int"
	init_value " currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Describes the version of <code>DecimalFormatSymbols</code> present on the stream.
Possible values are:
<ul>
<li><b>0</b> (or uninitialized): versions prior to JDK 1.1.6.

<li><b>1</b>: Versions written by JDK 1.1.6 or later, which include
     two new fields: <code>monetarySeparator</code> and <code>exponential</code>.
<li><b>2</b>: Versions written by J2SE 1.4 or later, which include a
     new <code>locale</code> field.
<li><b>3</b>: Versions written by J2SE 1.6 or later, which include a
     new <code>exponentialSeparator</code> field.
</ul>
When streaming out a <code>DecimalFormatSymbols</code>, the most recent format
(corresponding to the highest allowable <code>serialVersionOnStream</code>)
is always written.

@serial
@since JDK 1.1.6

"
      end
    end

    class 636546 "DecimalFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DecimalFormat</code> is a concrete subclass of
<code>NumberFormat</code> that formats decimal numbers. It has a variety of
features designed to make it possible to parse and format numbers in any
locale, including support for Western, Arabic, and Indic digits.  It also
supports different kinds of numbers, including integers (123), fixed-point
numbers (123.4), scientific notation (1.23E4), percentages (12%), and
currency amounts ($123).  All of these can be localized.

<p>To obtain a <code>NumberFormat</code> for a specific locale, including the
default locale, call one of <code>NumberFormat</code>'s factory methods, such
as <code>getInstance()</code>.  In general, do not call the
<code>DecimalFormat</code> constructors directly, since the
<code>NumberFormat</code> factory methods may return subclasses other than
<code>DecimalFormat</code>. If you need to customize the format object, do
something like this:

<blockquote><pre>
NumberFormat f = NumberFormat.getInstance(loc);
if (f instanceof DecimalFormat) {
    ((DecimalFormat) f).setDecimalSeparatorAlwaysShown(true);
}
</pre></blockquote>

<p>A <code>DecimalFormat</code> comprises a <em>pattern</em> and a set of
<em>symbols</em>.  The pattern may be set directly using
<code>applyPattern()</code>, or indirectly using the API methods.  The
symbols are stored in a <code>DecimalFormatSymbols</code> object.  When using
the <code>NumberFormat</code> factory methods, the pattern and symbols are
read from localized <code>ResourceBundle</code>s.

<h3>Patterns</h3>

<code>DecimalFormat</code> patterns have the following syntax:
<blockquote><pre>
<i>Pattern:</i>
        <i>PositivePattern</i>
        <i>PositivePattern</i> ; <i>NegativePattern</i>
<i>PositivePattern:</i>
        <i>Prefix<sub>opt</sub></i> <i>Number</i> <i>Suffix<sub>opt</sub></i>
<i>NegativePattern:</i>
        <i>Prefix<sub>opt</sub></i> <i>Number</i> <i>Suffix<sub>opt</sub></i>
<i>Prefix:</i>
        any Unicode characters except &#92;uFFFE, &#92;uFFFF, and special characters
<i>Suffix:</i>
        any Unicode characters except &#92;uFFFE, &#92;uFFFF, and special characters
<i>Number:</i>
        <i>Integer</i> <i>Exponent<sub>opt</sub></i>
        <i>Integer</i> . <i>Fraction</i> <i>Exponent<sub>opt</sub></i>
<i>Integer:</i>
        <i>MinimumInteger</i>
        #
        # <i>Integer</i>
        # , <i>Integer</i>
<i>MinimumInteger:</i>
        0
        0 <i>MinimumInteger</i>
        0 , <i>MinimumInteger</i>
<i>Fraction:</i>
        <i>MinimumFraction<sub>opt</sub></i> <i>OptionalFraction<sub>opt</sub></i>
<i>MinimumFraction:</i>
        0 <i>MinimumFraction<sub>opt</sub></i>
<i>OptionalFraction:</i>
        # <i>OptionalFraction<sub>opt</sub></i>
<i>Exponent:</i>
        E <i>MinimumExponent</i>
<i>MinimumExponent:</i>
        0 <i>MinimumExponent<sub>opt</sub></i>
</pre></blockquote>

<p>A <code>DecimalFormat</code> pattern contains a positive and negative
subpattern, for example, <code>\"#,##0.00;(#,##0.00)\"</code>.  Each
subpattern has a prefix, numeric part, and suffix. The negative subpattern
is optional; if absent, then the positive subpattern prefixed with the
localized minus sign (<code>'-'</code> in most locales) is used as the
negative subpattern. That is, <code>\"0.00\"</code> alone is equivalent to
<code>\"0.00;-0.00\"</code>.  If there is an explicit negative subpattern, it
serves only to specify the negative prefix and suffix; the number of digits,
minimal digits, and other characteristics are all the same as the positive
pattern. That means that <code>\"#,##0.0#;(#)\"</code> produces precisely
the same behavior as <code>\"#,##0.0#;(#,##0.0#)\"</code>.

<p>The prefixes, suffixes, and various symbols used for infinity, digits,
thousands separators, decimal separators, etc. may be set to arbitrary
values, and they will appear properly during formatting.  However, care must
be taken that the symbols and strings do not conflict, or parsing will be
unreliable.  For example, either the positive and negative prefixes or the
suffixes must be distinct for <code>DecimalFormat.parse()</code> to be able
to distinguish positive from negative values.  (If they are identical, then
<code>DecimalFormat</code> will behave as if no negative subpattern was
specified.)  Another example is that the decimal separator and thousands
separator should be distinct characters, or parsing will be impossible.

<p>The grouping separator is commonly used for thousands, but in some
countries it separates ten-thousands. The grouping size is a constant number
of digits between the grouping characters, such as 3 for 100,000,000 or 4 for
1,0000,0000.  If you supply a pattern with multiple grouping characters, the
interval between the last one and the end of the integer is the one that is
used. So <code>\"#,##,###,####\"</code> == <code>\"######,####\"</code> ==
<code>\"##,####,####\"</code>.

<h4>Special Pattern Characters</h4>

<p>Many characters in a pattern are taken literally; they are matched during
parsing and output unchanged during formatting.  Special characters, on the
other hand, stand for other characters, strings, or classes of characters.
They must be quoted, unless noted otherwise, if they are to appear in the
prefix or suffix as literals.

<p>The characters listed here are used in non-localized patterns.  Localized
patterns use the corresponding characters taken from this formatter's
<code>DecimalFormatSymbols</code> object instead, and these characters lose
their special status.  Two exceptions are the currency sign and quote, which
are not localized.

<blockquote>
<table border=0 cellspacing=3 cellpadding=0 summary=\"Chart showing symbol,
 location, localized, and meaning.\">
    <tr style=\"background-color: rgb(204, 204, 255);\">
         <th align=left>Symbol
         <th align=left>Location
         <th align=left>Localized?
         <th align=left>Meaning
    <tr valign=top>
         <td><code>0</code>
         <td>Number
         <td>Yes
         <td>Digit
    <tr style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
         <td><code>#</code>
         <td>Number
         <td>Yes
         <td>Digit, zero shows as absent
    <tr valign=top>
         <td><code>.</code>
         <td>Number
         <td>Yes
         <td>Decimal separator or monetary decimal separator
    <tr style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
         <td><code>-</code>
         <td>Number
         <td>Yes
         <td>Minus sign
    <tr valign=top>
         <td><code>,</code>
         <td>Number
         <td>Yes
         <td>Grouping separator
    <tr style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
         <td><code>E</code>
         <td>Number
         <td>Yes
         <td>Separates mantissa and exponent in scientific notation.
             <em>Need not be quoted in prefix or suffix.</em>
    <tr valign=top>
         <td><code>;</code>
         <td>Subpattern boundary
         <td>Yes
         <td>Separates positive and negative subpatterns
    <tr style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
         <td><code>%</code>
         <td>Prefix or suffix
         <td>Yes
         <td>Multiply by 100 and show as percentage
    <tr valign=top>
         <td><code>&#92;u2030</code>
         <td>Prefix or suffix
         <td>Yes
         <td>Multiply by 1000 and show as per mille value
    <tr style=\"vertical-align: top; background-color: rgb(238, 238, 255);\">
         <td><code>&#164;</code> (<code>&#92;u00A4</code>)
         <td>Prefix or suffix
         <td>No
         <td>Currency sign, replaced by currency symbol.  If
             doubled, replaced by international currency symbol.
             If present in a pattern, the monetary decimal separator
             is used instead of the decimal separator.
    <tr valign=top>
         <td><code>'</code>
         <td>Prefix or suffix
         <td>No
         <td>Used to quote special characters in a prefix or suffix,
             for example, <code>\"'#'#\"</code> formats 123 to
             <code>\"#123\"</code>.  To create a single quote
             itself, use two in a row: <code>\"# o''clock\"</code>.
</table>
</blockquote>

<h4>Scientific Notation</h4>

<p>Numbers in scientific notation are expressed as the product of a mantissa
and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3.  The
mantissa is often in the range 1.0 &le; x {@literal <} 10.0, but it need not
be.
<code>DecimalFormat</code> can be instructed to format and parse scientific
notation <em>only via a pattern</em>; there is currently no factory method
that creates a scientific notation format.  In a pattern, the exponent
character immediately followed by one or more digit characters indicates
scientific notation.  Example: <code>\"0.###E0\"</code> formats the number
1234 as <code>\"1.234E3\"</code>.

<ul>
<li>The number of digit characters after the exponent character gives the
minimum exponent digit count.  There is no maximum.  Negative exponents are
formatted using the localized minus sign, <em>not</em> the prefix and suffix
from the pattern.  This allows patterns such as <code>\"0.###E0 m/s\"</code>.

<li>The minimum and maximum number of integer digits are interpreted
together:

<ul>
<li>If the maximum number of integer digits is greater than their minimum number
and greater than 1, it forces the exponent to be a multiple of the maximum
number of integer digits, and the minimum number of integer digits to be
interpreted as 1.  The most common use of this is to generate
<em>engineering notation</em>, in which the exponent is a multiple of three,
e.g., <code>\"##0.#####E0\"</code>. Using this pattern, the number 12345
formats to <code>\"12.345E3\"</code>, and 123456 formats to
<code>\"123.456E3\"</code>.

<li>Otherwise, the minimum number of integer digits is achieved by adjusting the
exponent.  Example: 0.00123 formatted with <code>\"00.###E0\"</code> yields
<code>\"12.3E-4\"</code>.
</ul>

<li>The number of significant digits in the mantissa is the sum of the
<em>minimum integer</em> and <em>maximum fraction</em> digits, and is
unaffected by the maximum integer digits.  For example, 12345 formatted with
<code>\"##0.##E0\"</code> is <code>\"12.3E3\"</code>. To show all digits, set
the significant digits count to zero.  The number of significant digits
does not affect parsing.

<li>Exponential patterns may not contain grouping separators.
</ul>

<h4>Rounding</h4>

<code>DecimalFormat</code> provides rounding modes defined in
{@link java.math.RoundingMode} for formatting.  By default, it uses
{@link java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}.

<h4>Digits</h4>

For formatting, <code>DecimalFormat</code> uses the ten consecutive
characters starting with the localized zero digit defined in the
<code>DecimalFormatSymbols</code> object as digits. For parsing, these
digits as well as all Unicode decimal digits, as defined by
{@link Character#digit Character.digit}, are recognized.

<h4>Special Values</h4>

<p><code>NaN</code> is formatted as a string, which typically has a single character
<code>&#92;uFFFD</code>.  This string is determined by the
<code>DecimalFormatSymbols</code> object.  This is the only value for which
the prefixes and suffixes are not used.

<p>Infinity is formatted as a string, which typically has a single character
<code>&#92;u221E</code>, with the positive or negative prefixes and suffixes
applied.  The infinity string is determined by the
<code>DecimalFormatSymbols</code> object.

<p>Negative zero (<code>\"-0\"</code>) parses to
<ul>
<li><code>BigDecimal(0)</code> if <code>isParseBigDecimal()</code> is
true,
<li><code>Long(0)</code> if <code>isParseBigDecimal()</code> is false
    and <code>isParseIntegerOnly()</code> is true,
<li><code>Double(-0.0)</code> if both <code>isParseBigDecimal()</code>
and <code>isParseIntegerOnly()</code> are false.
</ul>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Decimal formats are generally not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

<h4>Example</h4>

<blockquote><pre>{@code
<strong>// Print out a number using the localized number, integer, currency,
// and percent format for each locale</strong>
Locale[] locales = NumberFormat.getAvailableLocales();
double myNumber = -1234.56;
NumberFormat form;
for (int j = 0; j < 4; ++j) {
    System.out.println(\"FORMAT\");
    for (int i = 0; i < locales.length; ++i) {
        if (locales[i].getCountry().length() == 0) {
           continue; // Skip language-only locales
        }
        System.out.print(locales[i].getDisplayName());
        switch (j) {
        case 0:
            form = NumberFormat.getInstance(locales[i]); break;
        case 1:
            form = NumberFormat.getIntegerInstance(locales[i]); break;
        case 2:
            form = NumberFormat.getCurrencyInstance(locales[i]); break;
        default:
            form = NumberFormat.getPercentInstance(locales[i]); break;
        }
        if (form instanceof DecimalFormat) {
            System.out.print(\": \" + ((DecimalFormat) form).toPattern());
        }
        System.out.print(\" -> \" + form.format(myNumber));
        try {
            System.out.println(\" -> \" + form.parse(form.format(myNumber)));
        } catch (ParseException e) {}
    }
}
}</pre></blockquote>

@see          <a href=\"https://docs.oracle.com/javase/tutorial/i18n/format/decimalFormat.html\">Java Tutorial</a>
@see          NumberFormat
@see          DecimalFormatSymbols
@see          ParsePosition
@author       Mark Davis
@author       Alan Liu
"
      classrelation 3410562 // <generalisation>
	relation 3410562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3410562 // <generalisation>
	  b parent class_ref 1045890 // NumberFormat
      end

      operation 8270338 "DecimalFormat"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DecimalFormat using the default pattern and symbols
for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
This is a convenient way to obtain a
DecimalFormat when internationalization is not the main concern.
<p>
To obtain standard formats for a given locale, use the factory methods
on NumberFormat such as getNumberInstance. These factories will
return the most appropriate sub-class of NumberFormat for a given
locale.

@see java.text.NumberFormat#getInstance
@see java.text.NumberFormat#getNumberInstance
@see java.text.NumberFormat#getCurrencyInstance
@see java.text.NumberFormat#getPercentInstance
"
      end

      operation 8270466 "DecimalFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DecimalFormat using the given pattern and the symbols
for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.
This is a convenient way to obtain a
DecimalFormat when internationalization is not the main concern.
<p>
To obtain standard formats for a given locale, use the factory methods
on NumberFormat such as getNumberInstance. These factories will
return the most appropriate sub-class of NumberFormat for a given
locale.

@param pattern a non-localized pattern string.
@exception NullPointerException if <code>pattern</code> is null
@exception IllegalArgumentException if the given pattern is invalid.
@see java.text.NumberFormat#getInstance
@see java.text.NumberFormat#getNumberInstance
@see java.text.NumberFormat#getCurrencyInstance
@see java.text.NumberFormat#getPercentInstance
"
      end

      operation 8270594 "DecimalFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "symbols" type class_ref 636418 // DecimalFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DecimalFormat using the given pattern and symbols.
Use this constructor when you need to completely customize the
behavior of the format.
<p>
To obtain standard formats for a given
locale, use the factory methods on NumberFormat such as
getInstance or getCurrencyInstance. If you need only minor adjustments
to a standard format, you can modify the format returned by
a NumberFormat factory method.

@param pattern a non-localized pattern string
@param symbols the set of symbols to be used
@exception NullPointerException if any of the given arguments is null
@exception IllegalArgumentException if the given pattern is invalid
@see java.text.NumberFormat#getInstance
@see java.text.NumberFormat#getNumberInstance
@see java.text.NumberFormat#getCurrencyInstance
@see java.text.NumberFormat#getPercentInstance
@see java.text.DecimalFormatSymbols
"
      end

      operation 8270722 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 129538 // Object
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Overrides

Formats a number and appends the resulting text to the given string
buffer.
The number can be of any subclass of {@link java.lang.Number}.
<p>
This implementation uses the maximum precision permitted.
@param number     the number to format
@param toAppendTo the <code>StringBuffer</code> to which the formatted
                  text is to be appended
@param pos        On input: an alignment field, if desired.
                  On output: the offsets of the alignment field.
@return           the value passed in as <code>toAppendTo</code>
@exception        IllegalArgumentException if <code>number</code> is
                  null or not an instance of <code>Number</code>.
@exception        NullPointerException if <code>toAppendTo</code> or
                  <code>pos</code> is null
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see              java.text.FieldPosition
"
      end

      operation 8270850 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "fieldPosition" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats a double to produce a string.
@param number    The double to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@exception ArithmeticException if rounding is needed with rounding
           mode being set to RoundingMode.UNNECESSARY
@return The formatted number string
@see java.text.FieldPosition
"
      end

      operation 8270978 "format"
	private return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a double to produce a string.
@param number    The double to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@exception       ArithmeticException if rounding is needed with rounding
                 mode being set to RoundingMode.UNNECESSARY
@return The formatted number string
"
      end

      operation 8271106 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "fieldPosition" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Format a long to produce a string.
@param number    The long to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@exception       ArithmeticException if rounding is needed with rounding
                 mode being set to RoundingMode.UNNECESSARY
@return The formatted number string
@see java.text.FieldPosition
"
      end

      operation 8271234 "format"
	private return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a long to produce a string.
@param number    The long to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@return The formatted number string
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.FieldPosition
"
      end

      operation 8271362 "format"
	private return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 145794 // BigDecimal
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "fieldPosition" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a BigDecimal to produce a string.
@param number    The BigDecimal to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@return The formatted number string
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.FieldPosition
"
      end

      operation 8271490 "format"
	private return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 145794 // BigDecimal
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a BigDecimal to produce a string.
@param number    The BigDecimal to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@return The formatted number string
"
      end

      operation 8271618 "format"
	private return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 686338 // BigInteger
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "fieldPosition" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a BigInteger to produce a string.
@param number    The BigInteger to format
@param result    where the text is to be appended
@param fieldPosition    On input: an alignment field, if desired.
On output: the offsets of the alignment field.
@return The formatted number string
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.FieldPosition
"
      end

      operation 8271746 "format"
	private return_type class_ref 166018 // StringBuffer
	nparams 4
	  param inout name "number" type class_ref 686338 // BigInteger
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	  param inout name "formatLong" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format a BigInteger to produce a string.
@param number    The BigInteger to format
@param result    where the text is to be appended
@param delegate notified of locations of sub fields
@return The formatted number string
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.FieldPosition
"
      end

      operation 8271874 "formatToCharacterIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats an Object producing an <code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
Each attribute key of the AttributedCharacterIterator will be of type
<code>NumberFormat.Field</code>, with the attribute value being the
same as the attribute key.

@exception NullPointerException if obj is null.
@exception IllegalArgumentException when the Format cannot format the
           given object.
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@param obj The object to format
@return AttributedCharacterIterator describing the formatted value.
@since 1.4
"
      end

      operation 8272002 "checkAndSetFastPathStatus"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ==== Begin fast-path formating logic for double =========================
 Fast-path formatting will be used for format(double ...) methods iff a
number of conditions are met (see checkAndSetFastPathStatus()):
- Only if instance properties meet the right predefined conditions.
- The abs value of the double to format is <= Integer.MAX_VALUE.

The basic approach is to split the binary to decimal conversion of a
double value into two phases:
* The conversion of the integer portion of the double.
* The conversion of the fractional portion of the double
  (limited to two or three digits).

The isolation and conversion of the integer portion of the double is
straightforward. The conversion of the fraction is more subtle and relies
on some rounding properties of double to the decimal precisions in
question.  Using the terminology of BigDecimal, this fast-path algorithm
is applied when a double value has a magnitude less than Integer.MAX_VALUE
and rounding is to nearest even and the destination format has two or
three digits of *scale* (digits after the decimal point).

Under a rounding to nearest even policy, the returned result is a digit
string of a number in the (in this case decimal) destination format
closest to the exact numerical value of the (in this case binary) input
value.  If two destination format numbers are equally distant, the one
with the last digit even is returned.  To compute such a correctly rounded
value, some information about digits beyond the smallest returned digit
position needs to be consulted.

In general, a guard digit, a round digit, and a sticky *bit* are needed
beyond the returned digit position.  If the discarded portion of the input
is sufficiently large, the returned digit string is incremented.  In round
to nearest even, this threshold to increment occurs near the half-way
point between digits.  The sticky bit records if there are any remaining
trailing digits of the exact input value in the new format; the sticky bit
is consulted only in close to half-way rounding cases.

Given the computation of the digit and bit values, rounding is then
reduced to a table lookup problem.  For decimal, the even/odd cases look
like this:

Last   Round   Sticky
6      5       0      => 6   // exactly halfway, return even digit.
6      5       1      => 7   // a little bit more than halfway, round up.
7      5       0      => 8   // exactly halfway, round up to even.
7      5       1      => 8   // a little bit more than halfway, round up.
With analogous entries for other even and odd last-returned digits.

However, decimal negative powers of 5 smaller than 0.5 are *not* exactly
representable as binary fraction.  In particular, 0.005 (the round limit
for a two-digit scale) and 0.0005 (the round limit for a three-digit
scale) are not representable. Therefore, for input values near these cases
the sticky bit is known to be set which reduces the rounding logic to:

Last   Round   Sticky
6      5       1      => 7   // a little bit more than halfway, round up.
7      5       1      => 8   // a little bit more than halfway, round up.

In other words, if the round digit is 5, the sticky bit is known to be
set.  If the round digit is something other than 5, the sticky bit is not
relevant.  Therefore, some of the logic about whether or not to increment
the destination *decimal* value can occur based on tests of *binary*
computations of the binary input number.


Check validity of using fast-path for this instance. If fast-path is valid
for this instance, sets fast-path state as true and initializes fast-path
utility fields as needed.

This method is supposed to be called rarely, otherwise that will break the
fast-path performance. That means avoiding frequent changes of the
properties of the instance, since for most properties, each time a change
happens, a call to this method is needed at the next format call.

FAST-PATH RULES:
 Similar to the default DecimalFormat instantiation case.
 More precisely:
 - HALF_EVEN rounding mode,
 - isGroupingUsed() is true,
 - groupingSize of 3,
 - multiplier is 1,
 - Decimal separator not mandatory,
 - No use of exponential notation,
 - minimumIntegerDigits is exactly 1 and maximumIntegerDigits at least 10
 - For number of fractional digits, the exact values found in the default case:
    Currency : min = max = 2.
    Decimal  : min = 0. max = 3.

"
      end

      operation 8272130 "exactRoundUp"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "fractionalPart" explicit_type "double"
	  param in name "scaledFractionalPartAsInt" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if rounding-up must be done on {@code scaledFractionalPartAsInt},
false otherwise.

This is a utility method that takes correct half-even rounding decision on
passed fractional value at the scaled decimal point (2 digits for currency
case and 3 for decimal case), when the approximated fractional part after
scaled decimal point is exactly 0.5d.  This is done by means of exact
calculations on the {@code fractionalPart} floating-point value.

This method is supposed to be called by private {@code fastDoubleFormat}
method only.

The algorithms used for the exact calculations are :

The <b><i>FastTwoSum</i></b> algorithm, from T.J.Dekker, described in the
papers  \"<i>A  Floating-Point   Technique  for  Extending  the  Available
Precision</i>\"  by Dekker, and  in \"<i>Adaptive  Precision Floating-Point
Arithmetic and Fast Robust Geometric Predicates</i>\" from J.Shewchuk.

A modified version of <b><i>Sum2S</i></b> cascaded summation described in
\"<i>Accurate Sum and Dot Product</i>\" from Takeshi Ogita and All.  As
Ogita says in this paper this is an equivalent of the Kahan-Babuska's
summation algorithm because we order the terms by magnitude before summing
them. For this reason we can use the <i>FastTwoSum</i> algorithm rather
than the more expensive Knuth's <i>TwoSum</i>.

We do this to avoid a more expensive exact \"<i>TwoProduct</i>\" algorithm,
like those described in Shewchuk's paper above. See comments in the code
below.

@param  fractionalPart The  fractional value  on which  we  take rounding
decision.
@param scaledFractionalPartAsInt The integral part of the scaled
fractional value.

@return the decision that must be taken regarding half-even rounding.
"
      end

      operation 8272258 "collectIntegralDigits"
	private explicit_return_type "void"
	nparams 3
	  param in name "number" explicit_type "int"
	  param inout name "digitsBuffer" explicit_type "char"
	multiplicity "[]"
	  param in name "backwardIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collects integral digits from passed {@code number}, while setting
grouping chars as needed. Updates {@code firstUsedIndex} accordingly.

Loops downward starting from {@code backwardIndex} position (inclusive).

@param number  The int value from which we collect digits.
@param digitsBuffer The char array container where digits and grouping chars
 are stored.
@param backwardIndex the position from which we start storing digits in
 digitsBuffer.

"
      end

      operation 8272386 "collectFractionalDigits"
	private explicit_return_type "void"
	nparams 3
	  param in name "number" explicit_type "int"
	  param inout name "digitsBuffer" explicit_type "char"
	multiplicity "[]"
	  param in name "startIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collects the 2 (currency) or 3 (decimal) fractional digits from passed
{@code number}, starting at {@code startIndex} position
inclusive.  There is no punctuation to set here (no grouping chars).
Updates {@code fastPathData.lastFreeIndex} accordingly.


@param number  The int value from which we collect digits.
@param digitsBuffer The char array container where digits are stored.
@param startIndex the position from which we start storing digits in
 digitsBuffer.

"
      end

      operation 8272514 "addAffixes"
	private explicit_return_type "void"
	nparams 3
	  param inout name "container" explicit_type "char"
	multiplicity "[]"
	  param inout name "prefix" explicit_type "char"
	multiplicity "[]"
	  param inout name "suffix" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal utility.
Adds the passed {@code prefix} and {@code suffix} to {@code container}.

@param container  Char array container which to prepend/append the
 prefix/suffix.
@param prefix     Char sequence to prepend as a prefix.
@param suffix     Char sequence to append as a suffix.


    private void addAffixes(boolean isNegative, char[] container) {"
      end

      operation 8272642 "prependPrefix"
	private explicit_return_type "void"
	nparams 3
	  param inout name "prefix" explicit_type "char"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param inout name "container" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepends the passed {@code prefix} chars to given result
{@code container}.  Updates {@code fastPathData.firstUsedIndex}
accordingly.

@param prefix The prefix characters to prepend to result.
@param len The number of chars to prepend.
@param container Char array container which to prepend the prefix
"
      end

      operation 8272770 "appendSuffix"
	private explicit_return_type "void"
	nparams 3
	  param inout name "suffix" explicit_type "char"
	multiplicity "[]"
	  param in name "len" explicit_type "int"
	  param inout name "container" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the passed {@code suffix} chars to given result
{@code container}.  Updates {@code fastPathData.lastFreeIndex}
accordingly.

@param suffix The suffix characters to append to result.
@param len The number of chars to append.
@param container Char array container which to append the suffix
"
      end

      operation 8272898 "localizeDigits"
	private explicit_return_type "void"
	nparams 1
	  param inout name "digitsBuffer" explicit_type "char"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts digit chars from {@code digitsBuffer} to current locale.

Must be called before adding affixes since we refer to
{@code fastPathData.firstUsedIndex} and {@code fastPathData.lastFreeIndex},
and do not support affixes (for speed reason).

We loop backward starting from last used index in {@code fastPathData}.

@param digitsBuffer The char array container where the digits are stored.
"
      end

      operation 8273026 "fastDoubleFormat"
	private explicit_return_type "void"
	nparams 2
	  param in name "d" explicit_type "double"
	  param inout name "negative" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is the main entry point for the fast-path format algorithm.

At this point we are sure to be in the expected conditions to run it.
This algorithm builds the formatted result and puts it in the dedicated
{@code fastPathData.fastPathContainer}.

@param d the double value to be formatted.
@param negative Flag precising if {@code d} is negative.
"
      end

      operation 8273154 "fastFormat"
	package return_type class_ref 128130 // String
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A fast-path shortcut of format(double) to be called by NumberFormat, or by
format(double, ...) public methods.

If instance can be applied fast-path and passed double is not NaN or
Infinity, is in the integer range, we call {@code fastDoubleFormat}
after changing {@code d} to its positive value if necessary.

Otherwise returns null by convention since fast-path can't be exercized.

@param d The double value to be formatted

@return the formatted result for {@code d} as a string.
"
      end

      operation 8273282 "subformat"
	private return_type class_ref 166018 // StringBuffer
	nparams 8
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	  param inout name "isNegative" explicit_type "boolean"
	  param inout name "isInteger" explicit_type "boolean"
	  param in name "maxIntDigits" explicit_type "int"
	  param in name "minIntDigits" explicit_type "int"
	  param in name "maxFraDigits" explicit_type "int"
	  param in name "minFraDigits" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ======== End fast-path formating logic for double =========================

Complete the formatting of a finite number.  On entry, the digitList must
be filled in with the correct digits.
"
      end

      operation 8273410 "append"
	private explicit_return_type "void"
	nparams 5
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param inout name "string" type class_ref 128130 // String
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	  param inout name "positions" type class_ref 637186 // FieldPosition
	multiplicity "[]"
	  param inout name "signAttribute" type class_ref 1045634 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the String <code>string</code> to <code>result</code>.
<code>delegate</code> is notified of all  the
<code>FieldPosition</code>s in <code>positions</code>.
<p>
If one of the <code>FieldPosition</code>s in <code>positions</code>
identifies a <code>SIGN</code> attribute, it is mapped to
<code>signAttribute</code>. This is used
to map the <code>SIGN</code> attribute to the <code>EXPONENT</code>
attribute as necessary.
<p>
This is used by <code>subformat</code> to add the prefix/suffix.
"
      end

      operation 8273538 "parse"
	public return_type class_ref 398210 // Number
	nparams 2
	  param inout name "text" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses text from a string to produce a <code>Number</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
number is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
The subclass returned depends on the value of {@link #isParseBigDecimal}
as well as on the string being parsed.
<ul>
  <li>If <code>isParseBigDecimal()</code> is false (the default),
      most integer values are returned as <code>Long</code>
      objects, no matter how they are written: <code>\"17\"</code> and
      <code>\"17.000\"</code> both parse to <code>Long(17)</code>.
      Values that cannot fit into a <code>Long</code> are returned as
      <code>Double</code>s. This includes values with a fractional part,
      infinite values, <code>NaN</code>, and the value -0.0.
      <code>DecimalFormat</code> does <em>not</em> decide whether to
      return a <code>Double</code> or a <code>Long</code> based on the
      presence of a decimal separator in the source string. Doing so
      would prevent integers that overflow the mantissa of a double,
      such as <code>\"-9,223,372,036,854,775,808.00\"</code>, from being
      parsed accurately.
      <p>
      Callers may use the <code>Number</code> methods
      <code>doubleValue</code>, <code>longValue</code>, etc., to obtain
      the type they want.
  <li>If <code>isParseBigDecimal()</code> is true, values are returned
      as <code>BigDecimal</code> objects. The values are the ones
      constructed by {@link java.math.BigDecimal#BigDecimal(String)}
      for corresponding strings in locale-independent format. The
      special cases negative and positive infinity and NaN are returned
      as <code>Double</code> instances holding the values of the
      corresponding <code>Double</code> constants.
</ul>
<p>
<code>DecimalFormat</code> parses all Unicode characters that represent
decimal digits, as defined by <code>Character.digit()</code>. In
addition, <code>DecimalFormat</code> also recognizes as digits the ten
consecutive characters starting with the localized zero digit defined in
the <code>DecimalFormatSymbols</code> object.

@param text the string to be parsed
@param pos  A <code>ParsePosition</code> object with index and error
            index information as described above.
@return     the parsed value, or <code>null</code> if the parse fails
@exception  NullPointerException if <code>text</code> or
            <code>pos</code> is null.
"
      end

      operation 8273666 "getBigIntegerMultiplier"
	private return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a BigInteger multiplier.
"
      end

      classrelation 3410690 // bigIntegerMultiplier (<unidirectional association>)
	relation 3410690 --->
	  a role_name "bigIntegerMultiplier" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3410690 // bigIntegerMultiplier (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      operation 8273794 "getBigDecimalMultiplier"
	private return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a BigDecimal multiplier.
"
      end

      classrelation 3410818 // bigDecimalMultiplier (<unidirectional association>)
	relation 3410818 --->
	  a role_name "bigDecimalMultiplier" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3410818 // bigDecimalMultiplier (<unidirectional association>)
	  b parent class_ref 145794 // BigDecimal
      end

      attribute 1920386 "STATUS_INFINITE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1920514 "STATUS_POSITIVE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1920642 "STATUS_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8273922 "subparse"
	private explicit_return_type "boolean"
	nparams 7
	  param inout name "text" type class_ref 128130 // String
	  param inout name "parsePosition" type class_ref 1045506 // ParsePosition
	  param inout name "positivePrefix" type class_ref 128130 // String
	  param inout name "negativePrefix" type class_ref 128130 // String
	  param inout name "digits" type class_ref 1046658 // DigitList
	  param inout name "isExponent" explicit_type "boolean"
	  param inout name "status" explicit_type "boolean"
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse the given text into a number.  The text is parsed beginning at
parsePosition, until an unparseable character is seen.
@param text The string to parse.
@param parsePosition The position at which to being parsing.  Upon
return, the first unparseable character.
@param digits The DigitList to set to the parsed value.
@param isExponent If true, parse an exponent.  This means no
infinite values and integer only.
@param status Upon return contains boolean status flags indicating
whether the value was infinite and whether it was positive.
"
      end

      operation 8274050 "getDecimalFormatSymbols"
	public return_type class_ref 636418 // DecimalFormatSymbols
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the decimal format symbols, which is generally not
changed by the programmer or user.
@return a copy of the desired DecimalFormatSymbols
@see java.text.DecimalFormatSymbols
"
      end

      operation 8274178 "setDecimalFormatSymbols"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newSymbols" type class_ref 636418 // DecimalFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the decimal format symbols, which is generally not changed
by the programmer or user.
@param newSymbols desired DecimalFormatSymbols
@see java.text.DecimalFormatSymbols
"
      end

      operation 8274306 "getPositivePrefix"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the positive prefix.
<P>Examples: +123, $123, sFr123

@return the positive prefix
"
      end

      operation 8274434 "setPositivePrefix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the positive prefix.
<P>Examples: +123, $123, sFr123

@param newValue the new positive prefix
"
      end

      operation 8274562 "getPositivePrefixFieldPositions"
	private return_type class_ref 637186 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the prefix used for
positive numbers. This is not used if the user has explicitly set
a positive prefix via <code>setPositivePrefix</code>. This is
lazily created.

@return FieldPositions in positive prefix
"
      end

      operation 8274690 "getNegativePrefix"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the negative prefix.
<P>Examples: -123, ($123) (with negative suffix), sFr-123

@return the negative prefix
"
      end

      operation 8274818 "setNegativePrefix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the negative prefix.
<P>Examples: -123, ($123) (with negative suffix), sFr-123

@param newValue the new negative prefix
"
      end

      operation 8274946 "getNegativePrefixFieldPositions"
	private return_type class_ref 637186 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the prefix used for
negative numbers. This is not used if the user has explicitly set
a negative prefix via <code>setNegativePrefix</code>. This is
lazily created.

@return FieldPositions in positive prefix
"
      end

      operation 8275074 "getPositiveSuffix"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the positive suffix.
<P>Example: 123%

@return the positive suffix
"
      end

      operation 8275202 "setPositiveSuffix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the positive suffix.
<P>Example: 123%

@param newValue the new positive suffix
"
      end

      operation 8275330 "getPositiveSuffixFieldPositions"
	private return_type class_ref 637186 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the suffix used for
positive numbers. This is not used if the user has explicitly set
a positive suffix via <code>setPositiveSuffix</code>. This is
lazily created.

@return FieldPositions in positive prefix
"
      end

      operation 8275458 "getNegativeSuffix"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the negative suffix.
<P>Examples: -123%, ($123) (with positive suffixes)

@return the negative suffix
"
      end

      operation 8275586 "setNegativeSuffix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the negative suffix.
<P>Examples: 123%

@param newValue the new negative suffix
"
      end

      operation 8275714 "getNegativeSuffixFieldPositions"
	private return_type class_ref 637186 // FieldPosition
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the FieldPositions of the fields in the suffix used for
negative numbers. This is not used if the user has explicitly set
a negative suffix via <code>setNegativeSuffix</code>. This is
lazily created.

@return FieldPositions in positive prefix
"
      end

      operation 8275842 "getMultiplier"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the multiplier for use in percent, per mille, and similar
formats.

@return the multiplier
@see #setMultiplier(int)
"
      end

      operation 8275970 "setMultiplier"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the multiplier for use in percent, per mille, and similar
formats.
For a percent format, set the multiplier to 100 and the suffixes to
have '%' (for Arabic, use the Arabic percent sign).
For a per mille format, set the multiplier to 1000 and the suffixes to
have '&#92;u2030'.

<P>Example: with multiplier 100, 1.23 is formatted as \"123\", and
\"123\" is parsed into 1.23.

@param newValue the new multiplier
@see #getMultiplier
"
      end

      operation 8276098 "setGroupingUsed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 8276226 "getGroupingSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the grouping size. Grouping size is the number of digits between
grouping separators in the integer portion of a number.  For example,
in the number \"123,456.78\", the grouping size is 3.

@return the grouping size
@see #setGroupingSize
@see java.text.NumberFormat#isGroupingUsed
@see java.text.DecimalFormatSymbols#getGroupingSeparator
"
      end

      operation 8276354 "setGroupingSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the grouping size. Grouping size is the number of digits between
grouping separators in the integer portion of a number.  For example,
in the number \"123,456.78\", the grouping size is 3.
<br>
The value passed in is converted to a byte, which may lose information.

@param newValue the new grouping size
@see #getGroupingSize
@see java.text.NumberFormat#setGroupingUsed
@see java.text.DecimalFormatSymbols#setGroupingSeparator
"
      end

      operation 8276482 "isDecimalSeparatorAlwaysShown"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to get the behavior of the decimal separator with integers.
(The decimal separator will always appear with decimals.)
<P>Example: Decimal ON: 12345 &rarr; 12345.; OFF: 12345 &rarr; 12345

@return {@code true} if the decimal separator is always shown;
        {@code false} otherwise
"
      end

      operation 8276610 "setDecimalSeparatorAlwaysShown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to set the behavior of the decimal separator with integers.
(The decimal separator will always appear with decimals.)
<P>Example: Decimal ON: 12345 &rarr; 12345.; OFF: 12345 &rarr; 12345

@param newValue {@code true} if the decimal separator is always shown;
                {@code false} otherwise
"
      end

      operation 8276738 "isParseBigDecimal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the {@link #parse(java.lang.String, java.text.ParsePosition)}
method returns <code>BigDecimal</code>. The default value is false.

@return {@code true} if the parse method returns BigDecimal;
        {@code false} otherwise
@see #setParseBigDecimal
@since 1.5
"
      end

      operation 8276866 "setParseBigDecimal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the {@link #parse(java.lang.String, java.text.ParsePosition)}
method returns <code>BigDecimal</code>.

@param newValue {@code true} if the parse method returns BigDecimal;
                {@code false} otherwise
@see #isParseBigDecimal
@since 1.5
"
      end

      operation 8276994 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Standard override; no change in semantics.
"
      end

      operation 8277122 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Overrides equals
"
      end

      operation 8277250 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Overrides hashCode
"
      end

      operation 8277378 "toPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synthesizes a pattern string that represents the current state
of this Format object.

@return a pattern string
@see #applyPattern
"
      end

      operation 8277506 "toLocalizedPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synthesizes a localized pattern string that represents the current
state of this Format object.

@return a localized pattern string
@see #applyPattern
"
      end

      operation 8277634 "expandAffixes"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expand the affix pattern strings into the expanded affix strings.  If any
affix pattern string is null, do not expand it.  This method should be
called any time the symbols or the affix patterns change in order to keep
the expanded affix strings up to date.
"
      end

      operation 8277762 "expandAffix"
	private return_type class_ref 128130 // String
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "buffer" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expand an affix pattern into an affix string.  All characters in the
pattern are literal unless prefixed by QUOTE.  The following characters
after QUOTE are recognized: PATTERN_PERCENT, PATTERN_PER_MILLE,
PATTERN_MINUS, and CURRENCY_SIGN.  If CURRENCY_SIGN is doubled (QUOTE +
CURRENCY_SIGN + CURRENCY_SIGN), it is interpreted as an ISO 4217
currency code.  Any other character after a QUOTE represents itself.
QUOTE must be followed by another character; QUOTE may not occur by
itself at the end of the pattern.

@param pattern the non-null, possibly empty pattern
@param buffer a scratch StringBuffer; its contents will be lost
@return the expanded equivalent of pattern
"
      end

      operation 8277890 "expandAffix"
	private return_type class_ref 637186 // FieldPosition
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Expand an affix pattern into an array of FieldPositions describing
how the pattern would be expanded.
All characters in the
pattern are literal unless prefixed by QUOTE.  The following characters
after QUOTE are recognized: PATTERN_PERCENT, PATTERN_PER_MILLE,
PATTERN_MINUS, and CURRENCY_SIGN.  If CURRENCY_SIGN is doubled (QUOTE +
CURRENCY_SIGN + CURRENCY_SIGN), it is interpreted as an ISO 4217
currency code.  Any other character after a QUOTE represents itself.
QUOTE must be followed by another character; QUOTE may not occur by
itself at the end of the pattern.

@param pattern the non-null, possibly empty pattern
@return FieldPosition array of the resulting fields.
"
      end

      operation 8278018 "appendAffix"
	private explicit_return_type "void"
	nparams 4
	  param inout name "buffer" type class_ref 166018 // StringBuffer
	  param inout name "affixPattern" type class_ref 128130 // String
	  param inout name "expAffix" type class_ref 128130 // String
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends an affix pattern to the given StringBuffer, quoting special
characters as needed.  Uses the internal affix pattern, if that exists,
or the literal affix, if the internal affix pattern is null.  The
appended string will generate the same affix pattern (or literal affix)
when passed to toPattern().

@param buffer the affix string is appended to this
@param affixPattern a pattern such as posPrefixPattern; may be null
@param expAffix a corresponding expanded affix, such as positivePrefix.
Ignored unless affixPattern is null.  If affixPattern is null, then
expAffix is appended as a literal affix.
@param localized true if the appended pattern should contain localized
pattern characters; otherwise, non-localized pattern chars are appended
"
      end

      operation 8278146 "appendAffix"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" type class_ref 166018 // StringBuffer
	  param inout name "affix" type class_ref 128130 // String
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an affix to the given StringBuffer, using quotes if
there are special characters.  Single quotes themselves must be
escaped in either case.
"
      end

      operation 8278274 "toPattern"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the real work of generating a pattern.  "
      end

      operation 8278402 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Apply the given pattern to this Format object.  A pattern is a
short-hand specification for the various formatting properties.
These properties can also be changed individually through the
various setter methods.
<p>
There is no limit to integer digits set
by this routine, since that is the typical end-user desire;
use setMaximumInteger if you want to set a real value.
For negative numbers, use a second pattern, separated by a semicolon
<P>Example <code>\"#,#00.0#\"</code> &rarr; 1,234.56
<P>This means a minimum of 2 integer digits, 1 fraction digit, and
a maximum of 2 fraction digits.
<p>Example: <code>\"#,#00.0#;(#,#00.0#)\"</code> for negatives in
parentheses.
<p>In negative patterns, the minimum and maximum counts are ignored;
these are presumed to be set in the positive pattern.

@param pattern a new pattern
@exception NullPointerException if <code>pattern</code> is null
@exception IllegalArgumentException if the given pattern is invalid.
"
      end

      operation 8278530 "applyLocalizedPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Apply the given pattern to this Format object.  The pattern
is assumed to be in a localized notation. A pattern is a
short-hand specification for the various formatting properties.
These properties can also be changed individually through the
various setter methods.
<p>
There is no limit to integer digits set
by this routine, since that is the typical end-user desire;
use setMaximumInteger if you want to set a real value.
For negative numbers, use a second pattern, separated by a semicolon
<P>Example <code>\"#,#00.0#\"</code> &rarr; 1,234.56
<P>This means a minimum of 2 integer digits, 1 fraction digit, and
a maximum of 2 fraction digits.
<p>Example: <code>\"#,#00.0#;(#,#00.0#)\"</code> for negatives in
parentheses.
<p>In negative patterns, the minimum and maximum counts are ignored;
these are presumed to be set in the positive pattern.

@param pattern a new pattern
@exception NullPointerException if <code>pattern</code> is null
@exception IllegalArgumentException if the given pattern is invalid.
"
      end

      operation 8278658 "applyPattern"
	private explicit_return_type "void"
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "localized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the real work of applying a pattern.
"
      end

      operation 8278786 "setMaximumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the maximum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
309 is used. Negative input values are replaced with 0.
@see NumberFormat#setMaximumIntegerDigits
"
      end

      operation 8278914 "setMinimumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the minimum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
309 is used. Negative input values are replaced with 0.
@see NumberFormat#setMinimumIntegerDigits
"
      end

      operation 8279042 "setMaximumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the maximum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
340 is used. Negative input values are replaced with 0.
@see NumberFormat#setMaximumFractionDigits
"
      end

      operation 8279170 "setMinimumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the minimum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of <code>newValue</code> and
340 is used. Negative input values are replaced with 0.
@see NumberFormat#setMinimumFractionDigits
"
      end

      operation 8279298 "getMaximumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the maximum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
309 is used.
@see #setMaximumIntegerDigits
"
      end

      operation 8279426 "getMinimumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the minimum number of digits allowed in the integer portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
309 is used.
@see #setMinimumIntegerDigits
"
      end

      operation 8279554 "getMaximumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the maximum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
340 is used.
@see #setMaximumFractionDigits
"
      end

      operation 8279682 "getMinimumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the minimum number of digits allowed in the fraction portion of a
number.
For formatting numbers other than <code>BigInteger</code> and
<code>BigDecimal</code> objects, the lower of the return value and
340 is used.
@see #setMinimumFractionDigits
"
      end

      operation 8279810 "getCurrency"
	public return_type class_ref 1046018 // Currency
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the currency used by this decimal format when formatting
currency values.
The currency is obtained by calling
{@link DecimalFormatSymbols#getCurrency DecimalFormatSymbols.getCurrency}
on this number format's symbols.

@return the currency used by this decimal format, or <code>null</code>
@since 1.4
"
      end

      operation 8279938 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 1046018 // Currency
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the currency used by this number format when formatting
currency values. This does not update the minimum or maximum
number of fraction digits used by the number format.
The currency is set by calling
{@link DecimalFormatSymbols#setCurrency DecimalFormatSymbols.setCurrency}
on this number format's symbols.

@param currency the new currency to be used by this decimal format
@exception NullPointerException if <code>currency</code> is null
@since 1.4
"
      end

      operation 8280066 "getRoundingMode"
	public return_type class_ref 960898 // RoundingMode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the {@link java.math.RoundingMode} used in this DecimalFormat.

@return The <code>RoundingMode</code> used for this DecimalFormat.
@see #setRoundingMode(RoundingMode)
@since 1.6
"
      end

      operation 8280194 "setRoundingMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "roundingMode" type class_ref 960898 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the {@link java.math.RoundingMode} used in this DecimalFormat.

@param roundingMode The <code>RoundingMode</code> to be used
@see #getRoundingMode()
@exception NullPointerException if <code>roundingMode</code> is null.
@since 1.6
"
      end

      operation 8280322 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the default serializable fields from the stream and performs
validations and adjustments for older serialized versions. The
validations and adjustments are:
<ol>
<li>
Verify that the superclass's digit count fields correctly reflect
the limits imposed on formatting numbers other than
<code>BigInteger</code> and <code>BigDecimal</code> objects. These
limits are stored in the superclass for serialization compatibility
with older versions, while the limits for <code>BigInteger</code> and
<code>BigDecimal</code> objects are kept in this class.
If, in the superclass, the minimum or maximum integer digit count is
larger than <code>DOUBLE_INTEGER_DIGITS</code> or if the minimum or
maximum fraction digit count is larger than
<code>DOUBLE_FRACTION_DIGITS</code>, then the stream data is invalid
and this method throws an <code>InvalidObjectException</code>.
<li>
If <code>serialVersionOnStream</code> is less than 4, initialize
<code>roundingMode</code> to {@link java.math.RoundingMode#HALF_EVEN
RoundingMode.HALF_EVEN}.  This field is new with version 4.
<li>
If <code>serialVersionOnStream</code> is less than 3, then call
the setters for the minimum and maximum integer and fraction digits with
the values of the corresponding superclass getters to initialize the
fields in this class. The fields in this class are new with version 3.
<li>
If <code>serialVersionOnStream</code> is less than 1, indicating that
the stream was written by JDK 1.1, initialize
<code>useExponentialNotation</code>
to false, since it was not present in JDK 1.1.
<li>
Set <code>serialVersionOnStream</code> to the maximum allowed value so
that default serialization will work properly if this object is streamed
out again.
</ol>

<p>Stream versions older than 2 will not have the affix pattern variables
<code>posPrefixPattern</code> etc.  As a result, they will be initialized
to <code>null</code>, which means the affix strings will be taken as
literal values.  This is exactly what we want, since that corresponds to
the pre-version-2 behavior.
"
      end

      classrelation 3410946 // digitList (<unidirectional association>)
	relation 3410946 --->
	  a role_name "digitList" init_value " new DigitList()" private
	    comment "----------------------------------------------------------------------
 INSTANCE VARIABLES
----------------------------------------------------------------------
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3410946 // digitList (<unidirectional association>)
	  b parent class_ref 1046658 // DigitList
      end

      classrelation 3411074 // positivePrefix (<unidirectional association>)
	relation 3411074 --->
	  a role_name "positivePrefix" init_value " \"\"" private
	    comment "
The symbol used as a prefix when formatting positive numbers, e.g. \"+\".

@serial
@see #getPositivePrefix

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411074 // positivePrefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3411202 // positiveSuffix (<unidirectional association>)
	relation 3411202 --->
	  a role_name "positiveSuffix" init_value " \"\"" private
	    comment "
The symbol used as a suffix when formatting positive numbers.
This is often an empty string.

@serial
@see #getPositiveSuffix

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411202 // positiveSuffix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3411330 // negativePrefix (<unidirectional association>)
	relation 3411330 --->
	  a role_name "negativePrefix" init_value " \"-\"" private
	    comment "
The symbol used as a prefix when formatting negative numbers, e.g. \"-\".

@serial
@see #getNegativePrefix

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411330 // negativePrefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3411458 // negativeSuffix (<unidirectional association>)
	relation 3411458 --->
	  a role_name "negativeSuffix" init_value " \"\"" private
	    comment "
The symbol used as a suffix when formatting negative numbers.
This is often an empty string.

@serial
@see #getNegativeSuffix

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411458 // negativeSuffix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3411586 // posPrefixPattern (<unidirectional association>)
	relation 3411586 --->
	  a role_name "posPrefixPattern" private
	    comment "
The prefix pattern for non-negative numbers.  This variable corresponds
to <code>positivePrefix</code>.

<p>This pattern is expanded by the method <code>expandAffix()</code> to
<code>positivePrefix</code> to update the latter to reflect changes in
<code>symbols</code>.  If this variable is <code>null</code> then
<code>positivePrefix</code> is taken as a literal value that does not
change when <code>symbols</code> changes.  This variable is always
<code>null</code> for <code>DecimalFormat</code> objects older than
stream version 2 restored from stream.

@serial
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411586 // posPrefixPattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3411714 // posSuffixPattern (<unidirectional association>)
	relation 3411714 --->
	  a role_name "posSuffixPattern" private
	    comment "
The suffix pattern for non-negative numbers.  This variable corresponds
to <code>positiveSuffix</code>.  This variable is analogous to
<code>posPrefixPattern</code>; see that variable for further
documentation.

@serial
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411714 // posSuffixPattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3411842 // negPrefixPattern (<unidirectional association>)
	relation 3411842 --->
	  a role_name "negPrefixPattern" private
	    comment "
The prefix pattern for negative numbers.  This variable corresponds
to <code>negativePrefix</code>.  This variable is analogous to
<code>posPrefixPattern</code>; see that variable for further
documentation.

@serial
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411842 // negPrefixPattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3411970 // negSuffixPattern (<unidirectional association>)
	relation 3411970 --->
	  a role_name "negSuffixPattern" private
	    comment "
The suffix pattern for negative numbers.  This variable corresponds
to <code>negativeSuffix</code>.  This variable is analogous to
<code>posPrefixPattern</code>; see that variable for further
documentation.

@serial
@since 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3411970 // negSuffixPattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1920770 "multiplier"
	private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The multiplier for use in percent, per mille, etc.

@serial
@see #getMultiplier

"
      end

      attribute 1920898 "groupingSize"
	private explicit_type "byte"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of digits between grouping separators in the integer
portion of a number.  Must be greater than 0 if
<code>NumberFormat.groupingUsed</code> is true.

@serial
@see #getGroupingSize
@see java.text.NumberFormat#isGroupingUsed

 invariant, > 0 if useThousands"
      end

      attribute 1921026 "decimalSeparatorAlwaysShown"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If true, forces the decimal separator to always appear in a formatted
number, even if the fractional part of the number is zero.

@serial
@see #isDecimalSeparatorAlwaysShown

"
      end

      attribute 1921154 "parseBigDecimal"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If true, parse returns BigDecimal wherever possible.

@serial
@see #isParseBigDecimal
@since 1.5

"
      end

      attribute 1921282 "isCurrencyFormat"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if this object represents a currency format.  This determines
whether the monetary decimal separator is used instead of the normal one.

"
      end

      classrelation 3412098 // symbols (<unidirectional association>)
	relation 3412098 --->
	  a role_name "symbols" init_value " null" private
	    comment "
The <code>DecimalFormatSymbols</code> object used by this format.
It contains the symbols used to format numbers, e.g. the grouping separator,
decimal separator, and so on.

@serial
@see #setDecimalFormatSymbols
@see java.text.DecimalFormatSymbols

 LIU new DecimalFormatSymbols();"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3412098 // symbols (<unidirectional association>)
	  b parent class_ref 636418 // DecimalFormatSymbols
      end

      attribute 1921410 "useExponentialNotation"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True to force the use of exponential (i.e. scientific) notation when formatting
numbers.

@serial
@since 1.2

 Newly persistent in the Java 2 platform v.1.2"
      end

      classrelation 3412226 // positivePrefixFieldPositions (<unidirectional association>)
	relation 3412226 --->
	  a role_name "positivePrefixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the positive prefix String. This is
lazily created. Use <code>getPositivePrefixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3412226 // positivePrefixFieldPositions (<unidirectional association>)
	  b parent class_ref 637186 // FieldPosition
      end

      classrelation 3412354 // positiveSuffixFieldPositions (<unidirectional association>)
	relation 3412354 --->
	  a role_name "positiveSuffixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the positive suffix String. This is
lazily created. Use <code>getPositiveSuffixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3412354 // positiveSuffixFieldPositions (<unidirectional association>)
	  b parent class_ref 637186 // FieldPosition
      end

      classrelation 3412482 // negativePrefixFieldPositions (<unidirectional association>)
	relation 3412482 --->
	  a role_name "negativePrefixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the negative prefix String. This is
lazily created. Use <code>getNegativePrefixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3412482 // negativePrefixFieldPositions (<unidirectional association>)
	  b parent class_ref 637186 // FieldPosition
      end

      classrelation 3412610 // negativeSuffixFieldPositions (<unidirectional association>)
	relation 3412610 --->
	  a role_name "negativeSuffixFieldPositions" multiplicity "[]" private
	    comment "
FieldPositions describing the negative suffix String. This is
lazily created. Use <code>getNegativeSuffixFieldPositions</code>
when needed.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3412610 // negativeSuffixFieldPositions (<unidirectional association>)
	  b parent class_ref 637186 // FieldPosition
      end

      attribute 1921538 "minExponentDigits"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of digits used to display the exponent when a number is
formatted in exponential notation.  This field is ignored if
<code>useExponentialNotation</code> is not true.

@serial
@since 1.2

 Newly persistent in the Java 2 platform v.1.2"
      end

      attribute 1921666 "maximumIntegerDigits"
	private explicit_type "int"
	init_value " super.getMaximumIntegerDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of digits allowed in the integer portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>maximumIntegerDigits</code> must be greater than or equal to
<code>minimumIntegerDigits</code>.

@serial
@see #getMaximumIntegerDigits
@since 1.5

"
      end

      attribute 1921794 "minimumIntegerDigits"
	private explicit_type "int"
	init_value " super.getMinimumIntegerDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of digits allowed in the integer portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>minimumIntegerDigits</code> must be less than or equal to
<code>maximumIntegerDigits</code>.

@serial
@see #getMinimumIntegerDigits
@since 1.5

"
      end

      attribute 1921922 "maximumFractionDigits"
	private explicit_type "int"
	init_value " super.getMaximumFractionDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of digits allowed in the fractional portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>maximumFractionDigits</code> must be greater than or equal to
<code>minimumFractionDigits</code>.

@serial
@see #getMaximumFractionDigits
@since 1.5

"
      end

      attribute 1922050 "minimumFractionDigits"
	private explicit_type "int"
	init_value " super.getMinimumFractionDigits()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of digits allowed in the fractional portion of a
<code>BigInteger</code> or <code>BigDecimal</code> number.
<code>minimumFractionDigits</code> must be less than or equal to
<code>maximumFractionDigits</code>.

@serial
@see #getMinimumFractionDigits
@since 1.5

"
      end

      classrelation 3412738 // roundingMode (<unidirectional association>)
	relation 3412738 --->
	  a role_name "roundingMode" init_value " RoundingMode.HALF_EVEN" private
	    comment "
The {@link java.math.RoundingMode} used in this DecimalFormat.

@serial
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3412738 // roundingMode (<unidirectional association>)
	  b parent class_ref 960898 // RoundingMode
      end

      class 1046786 "FastPathData"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1922178 "lastFreeIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " --- Temporary fields used in fast-path, shared by several methods.
 The first unused index at the end of the formatted result. 
"
	end

	attribute 1922306 "firstUsedIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The first used index at the beginning of the formatted result 
"
	end

	attribute 1922434 "zeroDelta"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " --- State fields related to fast-path status. Changes due to a
     property change only. Set by checkAndSetFastPathStatus() only.
 Difference between locale zero and default zero representation. 
"
	end

	attribute 1922562 "groupingChar"
	  package explicit_type "char"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Locale char for grouping separator. 
"
	end

	attribute 1922690 "integralLastIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "  Fixed index position of last integral digit of formatted result 
"
	end

	attribute 1922818 "fractionalFirstIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "  Fixed index position of first fractional digit of formatted result 
"
	end

	attribute 1922946 "fractionalScaleFactor"
	  package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Fractional constants depending on decimal|currency state 
"
	end

	attribute 1923074 "fractionalMaxIntBound"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1923202 "fastPathContainer"
	  package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The char array buffer that will contain the formatted result 
"
	end

	attribute 1923330 "charsPositivePrefix"
	  package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Suffixes recorded as char array for efficiency. 
"
	end

	attribute 1923458 "charsNegativePrefix"
	  package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1923586 "charsPositiveSuffix"
	  package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1923714 "charsNegativeSuffix"
	  package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1923842 "positiveAffixesRequired"
	  package explicit_type "boolean"
	  init_value " true"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1923970 "negativeAffixesRequired"
	  package explicit_type "boolean"
	  init_value " true"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 1924098 "isFastPath"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The format fast-path status of the instance. Logical state. 
"
      end

      attribute 1924226 "fastPathCheckNeeded"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flag stating need of check and reinit fast-path status on next format call. 
"
      end

      classrelation 3412866 // fastPathData (<unidirectional association>)
	relation 3412866 --->
	  a role_name "fastPathData" private
	    comment " DecimalFormat reference to its FastPathData 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3412866 // fastPathData (<unidirectional association>)
	  b parent class_ref 1046786 // FastPathData
      end

      attribute 1924354 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "----------------------------------------------------------------------
"
      end

      attribute 1924482 "serialVersionOnStream"
	private explicit_type "int"
	init_value " currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The internal serial version which says which version was written.
Possible values are:
<ul>
<li><b>0</b> (default): versions before the Java 2 platform v1.2
<li><b>1</b>: version for 1.2, which includes the two new fields
     <code>useExponentialNotation</code> and
     <code>minExponentDigits</code>.
<li><b>2</b>: version for 1.3 and later, which adds four new fields:
     <code>posPrefixPattern</code>, <code>posSuffixPattern</code>,
     <code>negPrefixPattern</code>, and <code>negSuffixPattern</code>.
<li><b>3</b>: version for 1.5 and later, which adds five new fields:
     <code>maximumIntegerDigits</code>,
     <code>minimumIntegerDigits</code>,
     <code>maximumFractionDigits</code>,
     <code>minimumFractionDigits</code>, and
     <code>parseBigDecimal</code>.
<li><b>4</b>: version for 1.6 and later, which adds one new field:
     <code>roundingMode</code>.
</ul>
@since 1.2
@serial

"
      end

      attribute 1924610 "MAX_INT_AS_DOUBLE"
	class_attribute const_attribute private explicit_type "double"
	init_value " (double) Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "----------------------------------------------------------------------
 CONSTANTS
----------------------------------------------------------------------
 ------ Fast-Path for double Constants ------
 Maximum valid integer value for applying fast-path algorithm 
"
      end

      class 1046914 "DigitArrays"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1924738 "DigitOnes1000"
	  class_attribute const_attribute package explicit_type "char"
	  multiplicity "[]"
	  init_value " new char[1000]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1924866 "DigitTens1000"
	  class_attribute const_attribute package explicit_type "char"
	  multiplicity "[]"
	  init_value " new char[1000]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1924994 "DigitHundreds1000"
	  class_attribute const_attribute package explicit_type "char"
	  multiplicity "[]"
	  init_value " new char[1000]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 168450 "initialization"
	  
	  cpp "" ""
	  java "  static {
            int tenIndex = 0;
            int hundredIndex = 0;
            char digitOne = '0';
            char digitTen = '0';
            char digitHundred = '0';
            for (int i = 0;  i < 1000; i++ ) {

                DigitOnes1000[i] = digitOne;
                if (digitOne == '9')
                    digitOne = '0';
                else
                    digitOne++;

                DigitTens1000[i] = digitTen;
                if (i == (tenIndex + 9)) {
                    tenIndex += 10;
                    if (digitTen == '9')
                        digitTen = '0';
                    else
                        digitTen++;
                }

                DigitHundreds1000[i] = digitHundred;
                if (i == (hundredIndex + 99)) {
                    digitHundred++;
                    hundredIndex += 100;
                }
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      attribute 1925122 "PATTERN_ZERO_DIGIT"
	class_attribute const_attribute private explicit_type "char"
	init_value " '0'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ------ Fast-Path for double Constants end ------
 Constants for characters used in programmatic (unlocalized) patterns.
"
      end

      attribute 1925250 "PATTERN_GROUPING_SEPARATOR"
	class_attribute const_attribute private explicit_type "char"
	init_value " ','"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1925378 "PATTERN_DECIMAL_SEPARATOR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '.'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1925506 "PATTERN_PER_MILLE"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u2030'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1925634 "PATTERN_PERCENT"
	class_attribute const_attribute private explicit_type "char"
	init_value " '%'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1925762 "PATTERN_DIGIT"
	class_attribute const_attribute private explicit_type "char"
	init_value " '#'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1925890 "PATTERN_SEPARATOR"
	class_attribute const_attribute private explicit_type "char"
	init_value " ';'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3412994 // PATTERN_EXPONENT (<unidirectional association>)
	relation 3412994 --->
	  a role_name "PATTERN_EXPONENT" init_value " \"E\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3412994 // PATTERN_EXPONENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1926018 "PATTERN_MINUS"
	class_attribute const_attribute private explicit_type "char"
	init_value " '-'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1926146 "CURRENCY_SIGN"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u00A4'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The CURRENCY_SIGN is the standard Unicode symbol for currency.  It
is used in patterns and substituted with either the currency symbol,
or if it is doubled, with the international currency symbol.  If the
CURRENCY_SIGN is seen in a pattern, then the decimal separator is
replaced with the monetary decimal separator.

The CURRENCY_SIGN is not localized.

"
      end

      attribute 1926274 "QUOTE"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\''"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3413122 // EmptyFieldPositionArray (<unidirectional association>)
	relation 3413122 --->
	  a role_name "EmptyFieldPositionArray" multiplicity "[]" init_value " new FieldPosition[0]" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3413122 // EmptyFieldPositionArray (<unidirectional association>)
	  b parent class_ref 637186 // FieldPosition
      end

      attribute 1926402 "DOUBLE_INTEGER_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 309"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Upper limit on integer and fraction digits for a Java double
"
      end

      attribute 1926530 "DOUBLE_FRACTION_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 340"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1926658 "MAXIMUM_INTEGER_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Upper limit on integer and fraction digits for BigDecimal and BigInteger
"
      end

      attribute 1926786 "MAXIMUM_FRACTION_DIGITS"
	class_attribute const_attribute package explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1926914 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 864413376551465018L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Proclaim JDK 1.1 serial compatibility.
"
      end
    end

    class 637186 "FieldPosition"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>FieldPosition</code> is a simple class used by <code>Format</code>
and its subclasses to identify fields in formatted output. Fields can
be identified in two ways:
<ul>
 <li>By an integer constant, whose names typically end with
     <code>_FIELD</code>. The constants are defined in the various
     subclasses of <code>Format</code>.
 <li>By a <code>Format.Field</code> constant, see <code>ERA_FIELD</code>
     and its friends in <code>DateFormat</code> for an example.
</ul>
<p>
<code>FieldPosition</code> keeps track of the position of the
field within the formatted output with two indices: the index
of the first character of the field and the index of the last
character of the field.

<p>
One version of the <code>format</code> method in the various
<code>Format</code> classes requires a <code>FieldPosition</code>
object as an argument. You use this <code>format</code> method
to perform partial formatting or to get information about the
formatted output (such as the position of a field).

<p>
If you are interested in the positions of all attributes in the
formatted string use the <code>Format</code> method
<code>formatToCharacterIterator</code>.

@author      Mark Davis
@see         java.text.Format
"
      attribute 1929602 "field"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Input: Desired field to determine start and end offsets for.
The meaning depends on the subclass of Format.

"
      end

      attribute 1929730 "endIndex"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Output: End offset of field in text.
If the field does not occur in the text, 0 is returned.

"
      end

      attribute 1929858 "beginIndex"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Output: Start offset of field in text.
If the field does not occur in the text, 0 is returned.

"
      end

      classrelation 3414786 // attribute (<unidirectional association>)
	relation 3414786 --->
	  a role_name "attribute" private
	    comment "
Desired field this FieldPosition is for.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3414786 // attribute (<unidirectional association>)
	  b parent class_ref 1045634 // Field
      end

      operation 8289154 "FieldPosition"
	public explicit_return_type ""
	nparams 1
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FieldPosition object for the given field.  Fields are
identified by constants, whose names typically end with _FIELD,
in the various subclasses of Format.

@param field the field identifier
@see java.text.NumberFormat#INTEGER_FIELD
@see java.text.NumberFormat#FRACTION_FIELD
@see java.text.DateFormat#YEAR_FIELD
@see java.text.DateFormat#MONTH_FIELD
"
      end

      operation 8289282 "FieldPosition"
	public explicit_return_type ""
	nparams 1
	  param inout name "attribute" type class_ref 1045634 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FieldPosition object for the given field constant. Fields are
identified by constants defined in the various <code>Format</code>
subclasses. This is equivalent to calling
<code>new FieldPosition(attribute, -1)</code>.

@param attribute Format.Field constant identifying a field
@since 1.4
"
      end

      operation 8289410 "FieldPosition"
	public explicit_return_type ""
	nparams 2
	  param inout name "attribute" type class_ref 1045634 // Field
	  param in name "fieldID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>FieldPosition</code> object for the given field.
The field is identified by an attribute constant from one of the
<code>Field</code> subclasses as well as an integer field ID
defined by the <code>Format</code> subclasses. <code>Format</code>
subclasses that are aware of <code>Field</code> should give precedence
to <code>attribute</code> and ignore <code>fieldID</code> if
<code>attribute</code> is not null. However, older <code>Format</code>
subclasses may not be aware of <code>Field</code> and rely on
<code>fieldID</code>. If the field has no corresponding integer
constant, <code>fieldID</code> should be -1.

@param attribute Format.Field constant identifying a field
@param fieldID integer constant identifying a field
@since 1.4
"
      end

      operation 8289538 "getFieldAttribute"
	public return_type class_ref 1045634 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the field identifier as an attribute constant
from one of the <code>Field</code> subclasses. May return null if
the field is specified only by an integer field ID.

@return Identifier for the field
@since 1.4
"
      end

      operation 8289666 "getField"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the field identifier.

@return the field identifier
"
      end

      operation 8289794 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the index of the first character in the requested field.

@return the begin index
"
      end

      operation 8289922 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the index of the character following the last character in the
requested field.

@return the end index
"
      end

      operation 8290050 "setBeginIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "bi" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the begin index.  For use by subclasses of Format.

@param bi the begin index
@since 1.2
"
      end

      operation 8290178 "setEndIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "ei" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the end index.  For use by subclasses of Format.

@param ei the end index
@since 1.2
"
      end

      operation 8290306 "getFieldDelegate"
	package return_type class_ref 1045378 // FieldDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Format.FieldDelegate</code> instance that is associated
with the FieldPosition. When the delegate is notified of the same
field the FieldPosition is associated with, the begin/end will be
adjusted.
"
      end

      operation 8290434 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals
"
      end

      operation 8290562 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this FieldPosition.
@return a hash code value for this object
"
      end

      operation 8290690 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representation of this FieldPosition.
@return  a string representation of this object
"
      end

      operation 8290818 "matchesField"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "attribute" type class_ref 1045634 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the receiver wants a <code>Format.Field</code> value and
<code>attribute</code> is equal to it.
"
      end

      operation 8290946 "matchesField"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "attribute" type class_ref 1045634 // Field
	  param in name "field" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the receiver wants a <code>Format.Field</code> value and
<code>attribute</code> is equal to it, or true if the receiver
represents an inteter constant and <code>field</code> equals it.
"
      end

      class 1047170 "Delegate"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3414914 // <realization>
	  relation 3414914 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3414914 // <realization>
	    b parent class_ref 1045378 // FieldDelegate
	end

	attribute 1929986 "encounteredField"
	  private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Indicates whether the field has been  encountered before. If this
is true, and <code>formatted</code> is invoked, the begin/end
are not updated.

"
	end

	operation 8291074 "formatted"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "attr" type class_ref 1045634 // Field
	    param inout name "value" type class_ref 129538 // Object
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 166018 // StringBuffer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8291202 "formatted"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "fieldID" explicit_type "int"
	    param inout name "attr" type class_ref 1045634 // Field
	    param inout name "value" type class_ref 129538 // Object
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 166018 // StringBuffer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 798978 "RuleBasedCollator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>RuleBasedCollator</code> class is a concrete subclass of
<code>Collator</code> that provides a simple, data-driven, table
collator.  With this class you can create a customized table-based
<code>Collator</code>.  <code>RuleBasedCollator</code> maps
characters to sort keys.

<p>
<code>RuleBasedCollator</code> has the following restrictions
for efficiency (other subclasses may be used for more complex languages) :
<ol>
<li>If a special collation rule controlled by a &lt;modifier&gt; is
specified it applies to the whole collator object.
<li>All non-mentioned characters are at the end of the
    collation order.
</ol>

<p>
The collation table is composed of a list of collation rules, where each
rule is of one of three forms:
<pre>
   &lt;modifier&gt;
   &lt;relation&gt; &lt;text-argument&gt;
   &lt;reset&gt; &lt;text-argument&gt;
</pre>
The definitions of the rule elements is as follows:
<UL>
   <LI><strong>Text-Argument</strong>: A text-argument is any sequence of
       characters, excluding special characters (that is, common
       whitespace characters [0009-000D, 0020] and rule syntax characters
       [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those
       characters are desired, you can put them in single quotes
       (e.g. ampersand =&gt; '&amp;'). Note that unquoted white space characters
       are ignored; e.g. <code>b c</code> is treated as <code>bc</code>.
   <LI><strong>Modifier</strong>: There are currently two modifiers that
       turn on special collation rules.
       <UL>
           <LI>'@' : Turns on backwards sorting of accents (secondary
                     differences), as in French.
           <LI>'!' : Turns on Thai/Lao vowel-consonant swapping.  If this
                     rule is in force when a Thai vowel of the range
                     &#92;U0E40-&#92;U0E44 precedes a Thai consonant of the range
                     &#92;U0E01-&#92;U0E2E OR a Lao vowel of the range &#92;U0EC0-&#92;U0EC4
                     precedes a Lao consonant of the range &#92;U0E81-&#92;U0EAE then
                     the vowel is placed after the consonant for collation
                     purposes.
       </UL>
       <p>'@' : Indicates that accents are sorted backwards, as in French.
   <LI><strong>Relation</strong>: The relations are the following:
       <UL>
           <LI>'&lt;' : Greater, as a letter difference (primary)
           <LI>';' : Greater, as an accent difference (secondary)
           <LI>',' : Greater, as a case difference (tertiary)
           <LI>'=' : Equal
       </UL>
   <LI><strong>Reset</strong>: There is a single reset
       which is used primarily for contractions and expansions, but which
       can also be used to add a modification at the end of a set of rules.
       <p>'&amp;' : Indicates that the next rule follows the position to where
           the reset text-argument would be sorted.
</UL>

<p>
This sounds more complicated than it is in practice. For example, the
following are equivalent ways of expressing the same thing:
<blockquote>
<pre>
a &lt; b &lt; c
a &lt; b &amp; b &lt; c
a &lt; c &amp; a &lt; b
</pre>
</blockquote>
Notice that the order is important, as the subsequent item goes immediately
after the text-argument. The following are not equivalent:
<blockquote>
<pre>
a &lt; b &amp; a &lt; c
a &lt; c &amp; a &lt; b
</pre>
</blockquote>
Either the text-argument must already be present in the sequence, or some
initial substring of the text-argument must be present. (e.g. \"a &lt; b &amp; ae &lt;
e\" is valid since \"a\" is present in the sequence before \"ae\" is reset). In
this latter case, \"ae\" is not entered and treated as a single character;
instead, \"e\" is sorted as if it were expanded to two characters: \"a\"
followed by an \"e\". This difference appears in natural languages: in
traditional Spanish \"ch\" is treated as though it contracts to a single
character (expressed as \"c &lt; ch &lt; d\"), while in traditional German
a-umlaut is treated as though it expanded to two characters
(expressed as \"a,A &lt; b,B ... &amp;ae;&#92;u00e3&amp;AE;&#92;u00c3\").
[&#92;u00e3 and &#92;u00c3 are, of course, the escape sequences for a-umlaut.]
<p>
<strong>Ignorable Characters</strong>
<p>
For ignorable characters, the first rule must start with a relation (the
examples we have used above are really fragments; \"a &lt; b\" really should be
\"&lt; a &lt; b\"). If, however, the first relation is not \"&lt;\", then all the all
text-arguments up to the first \"&lt;\" are ignorable. For example, \", - &lt; a &lt; b\"
makes \"-\" an ignorable character, as we saw earlier in the word
\"black-birds\". In the samples for different languages, you see that most
accents are ignorable.

<p><strong>Normalization and Accents</strong>
<p>
<code>RuleBasedCollator</code> automatically processes its rule table to
include both pre-composed and combining-character versions of
accented characters.  Even if the provided rule string contains only
base characters and separate combining accent characters, the pre-composed
accented characters matching all canonical combinations of characters from
the rule string will be entered in the table.
<p>
This allows you to use a RuleBasedCollator to compare accented strings
even when the collator is set to NO_DECOMPOSITION.  There are two caveats,
however.  First, if the strings to be collated contain combining
sequences that may not be in canonical order, you should set the collator to
CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of
combining sequences.  Second, if the strings contain characters with
compatibility decompositions (such as full-width and half-width forms),
you must use FULL_DECOMPOSITION, since the rule tables only include
canonical mappings.

<p><strong>Errors</strong>
<p>
The following are errors:
<UL>
    <LI>A text-argument contains unquoted punctuation symbols
       (e.g. \"a &lt; b-c &lt; d\").
    <LI>A relation or reset character not followed by a text-argument
       (e.g. \"a &lt; ,b\").
    <LI>A reset where the text-argument (or an initial substring of the
        text-argument) is not already in the sequence.
        (e.g. \"a &lt; b &amp; e &lt; f\")
</UL>
If you produce one of these errors, a <code>RuleBasedCollator</code> throws
a <code>ParseException</code>.

<p><strong>Examples</strong>
<p>Simple:     \"&lt; a &lt; b &lt; c &lt; d\"
<p>Norwegian:  \"&lt; a, A &lt; b, B &lt; c, C &lt; d, D &lt; e, E &lt; f, F
                &lt; g, G &lt; h, H &lt; i, I &lt; j, J &lt; k, K &lt; l, L
                &lt; m, M &lt; n, N &lt; o, O &lt; p, P &lt; q, Q &lt; r, R
                &lt; s, S &lt; t, T &lt; u, U &lt; v, V &lt; w, W &lt; x, X
                &lt; y, Y &lt; z, Z
                &lt; &#92;u00E6, &#92;u00C6
                &lt; &#92;u00F8, &#92;u00D8
                &lt; &#92;u00E5 = a&#92;u030A, &#92;u00C5 = A&#92;u030A;
                     aa, AA\"

<p>
To create a <code>RuleBasedCollator</code> object with specialized
rules tailored to your needs, you construct the <code>RuleBasedCollator</code>
with the rules contained in a <code>String</code> object. For example:
<blockquote>
<pre>
String simple = \"&lt; a&lt; b&lt; c&lt; d\";
RuleBasedCollator mySimple = new RuleBasedCollator(simple);
</pre>
</blockquote>
Or:
<blockquote>
<pre>
String Norwegian = \"&lt; a, A &lt; b, B &lt; c, C &lt; d, D &lt; e, E &lt; f, F &lt; g, G &lt; h, H &lt; i, I\" +
                   \"&lt; j, J &lt; k, K &lt; l, L &lt; m, M &lt; n, N &lt; o, O &lt; p, P &lt; q, Q &lt; r, R\" +
                   \"&lt; s, S &lt; t, T &lt; u, U &lt; v, V &lt; w, W &lt; x, X &lt; y, Y &lt; z, Z\" +
                   \"&lt; &#92;u00E6, &#92;u00C6\" +     // Latin letter ae &amp; AE
                   \"&lt; &#92;u00F8, &#92;u00D8\" +     // Latin letter o &amp; O with stroke
                   \"&lt; &#92;u00E5 = a&#92;u030A,\" +  // Latin letter a with ring above
                   \"  &#92;u00C5 = A&#92;u030A;\" +  // Latin letter A with ring above
                   \"  aa, AA\";
RuleBasedCollator myNorwegian = new RuleBasedCollator(Norwegian);
</pre>
</blockquote>

<p>
A new collation rules string can be created by concatenating rules
strings. For example, the rules returned by {@link #getRules()} could
be concatenated to combine multiple <code>RuleBasedCollator</code>s.

<p>
The following example demonstrates how to change the order of
non-spacing accents,
<blockquote>
<pre>
// old rule
String oldRules = \"=&#92;u0301;&#92;u0300;&#92;u0302;&#92;u0308\"    // main accents
                + \";&#92;u0327;&#92;u0303;&#92;u0304;&#92;u0305\"    // main accents
                + \";&#92;u0306;&#92;u0307;&#92;u0309;&#92;u030A\"    // main accents
                + \";&#92;u030B;&#92;u030C;&#92;u030D;&#92;u030E\"    // main accents
                + \";&#92;u030F;&#92;u0310;&#92;u0311;&#92;u0312\"    // main accents
                + \"&lt; a , A ; ae, AE ; &#92;u00e6 , &#92;u00c6\"
                + \"&lt; b , B &lt; c, C &lt; e, E &amp; C &lt; d, D\";
// change the order of accent characters
String addOn = \"&amp; &#92;u0300 ; &#92;u0308 ; &#92;u0302\";
RuleBasedCollator myCollator = new RuleBasedCollator(oldRules + addOn);
</pre>
</blockquote>

@see        Collator
@see        CollationElementIterator
@author     Helena Shih, Laura Werner, Richard Gillam
"
      classrelation 3418114 // <generalisation>
	relation 3418114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3418114 // <generalisation>
	  b parent class_ref 589826 // Collator
      end

      operation 8304386 "RuleBasedCollator"
	public explicit_return_type ""
	nparams 1
	  param inout name "rules" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " IMPLEMENTATION NOTES:  The implementation of the collation algorithm is
 divided across three classes: RuleBasedCollator, RBCollationTables, and
 CollationElementIterator.  RuleBasedCollator contains the collator's
 transient state and includes the code that uses the other classes to
 implement comparison and sort-key building.  RuleBasedCollator also
 contains the logic to handle French secondary accent sorting.
 A RuleBasedCollator has two CollationElementIterators.  State doesn't
 need to be preserved in these objects between calls to compare() or
 getCollationKey(), but the objects persist anyway to avoid wasting extra
 creation time.  compare() and getCollationKey() are synchronized to ensure
 thread safety with this scheme.  The CollationElementIterator is responsible
 for generating collation elements from strings and returning one element at
 a time (sometimes there's a one-to-many or many-to-one mapping between
 characters and collation elements-- this class handles that).
 CollationElementIterator depends on RBCollationTables, which contains the
 collator's static state.  RBCollationTables contains the actual data
 tables specifying the collation order of characters for a particular locale
 or use.  It also contains the base logic that CollationElementIterator
 uses to map from characters to collation elements.  A single RBCollationTables
 object is shared among all RuleBasedCollators for the same locale, and
 thus by all the CollationElementIterators they create.

RuleBasedCollator constructor.  This takes the table rules and builds
a collation table out of them.  Please see RuleBasedCollator class
description for more details on the collation rule syntax.
@see java.util.Locale
@param rules the collation rules to build the collation table from.
@exception ParseException A format exception
will be thrown if the build process of the rules fails. For
example, build rule \"a &lt; ? &lt; d\" will cause the constructor to
throw the ParseException because the '?' is not quoted.
"
      end

      operation 8304514 "RuleBasedCollator"
	package explicit_return_type ""
	nparams 2
	  param inout name "rules" type class_ref 128130 // String
	  param in name "decomp" explicit_type "int"
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "RuleBasedCollator constructor.  This takes the table rules and builds
a collation table out of them.  Please see RuleBasedCollator class
description for more details on the collation rule syntax.
@see java.util.Locale
@param rules the collation rules to build the collation table from.
@param decomp the decomposition strength used to build the
collation table and to perform comparisons.
@exception ParseException A format exception
will be thrown if the build process of the rules fails. For
example, build rule \"a < ? < d\" will cause the constructor to
throw the ParseException because the '?' is not quoted.
"
      end

      operation 8304642 "RuleBasedCollator"
	private explicit_return_type ""
	nparams 1
	  param inout name "that" type class_ref 798978 // RuleBasedCollator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"Copy constructor.\"  Used in clone() for performance.
"
      end

      operation 8304770 "getRules"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the table-based rules for the collation object.
@return returns the collation rules that the table collation object
was created from.
"
      end

      operation 8304898 "getCollationElementIterator"
	public return_type class_ref 1046146 // CollationElementIterator
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a CollationElementIterator for the given String.

@param source the string to be collated
@return a {@code CollationElementIterator} object
@see java.text.CollationElementIterator
"
      end

      operation 8305026 "getCollationElementIterator"
	public return_type class_ref 1046146 // CollationElementIterator
	nparams 1
	  param inout name "source" type class_ref 429314 // CharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a CollationElementIterator for the given CharacterIterator.

@param source the character iterator to be collated
@return a {@code CollationElementIterator} object
@see java.text.CollationElementIterator
@since 1.2
"
      end

      operation 8305154 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "target" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the character data stored in two different strings based on the
collation rules.  Returns information about whether a string is less
than, greater than or equal to another string in a language.
This can be overriden in a subclass.

@exception NullPointerException if <code>source</code> or <code>target</code> is null.
"
      end

      operation 8305282 "getCollationKey"
	public return_type class_ref 1046402 // CollationKey
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the string into a series of characters that can be compared
with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey.
It can be overriden in a subclass.
"
      end

      operation 8305410 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Standard override; no change in semantics.
"
      end

      operation 8305538 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the equality of two collation objects.
@param obj the table-based collation object to be compared with this.
@return true if the current table-based collation object is the same
as the table-based collation object obj; false otherwise.
"
      end

      operation 8305666 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the hash code for the table-based collation object
"
      end

      operation 8305794 "getTables"
	package return_type class_ref 1046274 // RBCollationTables
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows CollationElementIterator access to the tables object
"
      end

      attribute 1936514 "CHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x70000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ==============================================================
 private
 ==============================================================
 need look up in .commit()"
      end

      attribute 1936642 "EXPANDCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x7E000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Expand index follows"
      end

      attribute 1936770 "CONTRACTCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x7F000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " contract indexes follow"
      end

      attribute 1936898 "UNMAPPED"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xFFFFFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1937026 "COLLATIONKEYOFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3418242 // tables (<unidirectional association>)
	relation 3418242 --->
	  a role_name "tables" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418242 // tables (<unidirectional association>)
	  b parent class_ref 1046274 // RBCollationTables
      end

      classrelation 3418370 // primResult (<unidirectional association>)
	relation 3418370 --->
	  a role_name "primResult" init_value " null" private
	    comment " Internal objects that are cached across calls so that they don't have to
 be created/destroyed on every call to compare() and getCollationKey()
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418370 // primResult (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      classrelation 3418498 // secResult (<unidirectional association>)
	relation 3418498 --->
	  a role_name "secResult" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418498 // secResult (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      classrelation 3418626 // terResult (<unidirectional association>)
	relation 3418626 --->
	  a role_name "terResult" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418626 // terResult (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      classrelation 3418754 // sourceCursor (<unidirectional association>)
	relation 3418754 --->
	  a role_name "sourceCursor" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418754 // sourceCursor (<unidirectional association>)
	  b parent class_ref 1046146 // CollationElementIterator
      end

      classrelation 3418882 // targetCursor (<unidirectional association>)
	relation 3418882 --->
	  a role_name "targetCursor" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418882 // targetCursor (<unidirectional association>)
	  b parent class_ref 1046146 // CollationElementIterator
      end
    end

    class 877058 "BreakIterator"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>BreakIterator</code> class implements methods for finding
the location of boundaries in text. Instances of <code>BreakIterator</code>
maintain a current position and scan over text
returning the index of characters where boundaries occur.
Internally, <code>BreakIterator</code> scans text using a
<code>CharacterIterator</code>, and is thus able to scan text held
by any object implementing that protocol. A <code>StringCharacterIterator</code>
is used to scan <code>String</code> objects passed to <code>setText</code>.

<p>
You use the factory methods provided by this class to create
instances of various types of break iterators. In particular,
use <code>getWordInstance</code>, <code>getLineInstance</code>,
<code>getSentenceInstance</code>, and <code>getCharacterInstance</code>
to create <code>BreakIterator</code>s that perform
word, line, sentence, and character boundary analysis respectively.
A single <code>BreakIterator</code> can work only on one unit
(word, line, sentence, and so on). You must use a different iterator
for each unit boundary analysis you wish to perform.

<p><a name=\"line\"></a>
Line boundary analysis determines where a text string can be
broken when line-wrapping. The mechanism correctly handles
punctuation and hyphenated words. Actual line breaking needs
to also consider the available line width and is handled by
higher-level software.

<p><a name=\"sentence\"></a>
Sentence boundary analysis allows selection with correct interpretation
of periods within numbers and abbreviations, and trailing punctuation
marks such as quotation marks and parentheses.

<p><a name=\"word\"></a>
Word boundary analysis is used by search and replace functions, as
well as within text editing applications that allow the user to
select words with a double click. Word selection provides correct
interpretation of punctuation marks within and following
words. Characters that are not part of a word, such as symbols
or punctuation marks, have word-breaks on both sides.

<p><a name=\"character\"></a>
Character boundary analysis allows users to interact with characters
as they expect to, for example, when moving the cursor through a text
string. Character boundary analysis provides correct navigation
through character strings, regardless of how the character is stored.
The boundaries returned may be those of supplementary characters,
combining character sequences, or ligature clusters.
For example, an accented character might be stored as a base character
and a diacritical mark. What users consider to be a character can
differ between languages.

<p>
The <code>BreakIterator</code> instances returned by the factory methods
of this class are intended for use with natural languages only, not for
programming language text. It is however possible to define subclasses
that tokenize a programming language.

<P>
<strong>Examples</strong>:<P>
Creating and using text boundaries:
<blockquote>
<pre>
public static void main(String args[]) {
     if (args.length == 1) {
         String stringToExamine = args[0];
         //print each word in order
         BreakIterator boundary = BreakIterator.getWordInstance();
         boundary.setText(stringToExamine);
         printEachForward(boundary, stringToExamine);
         //print each sentence in reverse order
         boundary = BreakIterator.getSentenceInstance(Locale.US);
         boundary.setText(stringToExamine);
         printEachBackward(boundary, stringToExamine);
         printFirst(boundary, stringToExamine);
         printLast(boundary, stringToExamine);
     }
}
</pre>
</blockquote>

Print each element in order:
<blockquote>
<pre>
public static void printEachForward(BreakIterator boundary, String source) {
    int start = boundary.first();
    for (int end = boundary.next();
         end != BreakIterator.DONE;
         start = end, end = boundary.next()) {
         System.out.println(source.substring(start,end));
    }
}
</pre>
</blockquote>

Print each element in reverse order:
<blockquote>
<pre>
public static void printEachBackward(BreakIterator boundary, String source) {
    int end = boundary.last();
    for (int start = boundary.previous();
         start != BreakIterator.DONE;
         end = start, start = boundary.previous()) {
        System.out.println(source.substring(start,end));
    }
}
</pre>
</blockquote>

Print first element:
<blockquote>
<pre>
public static void printFirst(BreakIterator boundary, String source) {
    int start = boundary.first();
    int end = boundary.next();
    System.out.println(source.substring(start,end));
}
</pre>
</blockquote>

Print last element:
<blockquote>
<pre>
public static void printLast(BreakIterator boundary, String source) {
    int end = boundary.last();
    int start = boundary.previous();
    System.out.println(source.substring(start,end));
}
</pre>
</blockquote>

Print the element at a specified position:
<blockquote>
<pre>
public static void printAt(BreakIterator boundary, int pos, String source) {
    int end = boundary.following(pos);
    int start = boundary.previous();
    System.out.println(source.substring(start,end));
}
</pre>
</blockquote>

Find the next word:
<blockquote>
<pre>{@code
public static int nextWordStartAfter(int pos, String text) {
    BreakIterator wb = BreakIterator.getWordInstance();
    wb.setText(text);
    int last = wb.following(pos);
    int current = wb.next();
    while (current != BreakIterator.DONE) {
        for (int p = last; p < current; p++) {
            if (Character.isLetter(text.codePointAt(p)))
                return last;
        }
        last = current;
        current = wb.next();
    }
    return BreakIterator.DONE;
}
}</pre>
(The iterator returned by BreakIterator.getWordInstance() is unique in that
the break positions it returns don't represent both the start and end of the
thing being iterated over.  That is, a sentence-break iterator returns breaks
that each represent the end of one sentence and the beginning of the next.
With the word-break iterator, the characters between two boundaries might be a
word, or they might be the punctuation or whitespace between two words.  The
above code uses a simple heuristic to determine which boundary is the beginning
of a word: If the characters between this boundary and the next boundary
include at least one letter (this can be an alphabetical letter, a CJK ideograph,
a Hangul syllable, a Kana character, etc.), then the text between this boundary
and the next is a word; otherwise, it's the material between words.)
</blockquote>

@see CharacterIterator

"
      classrelation 3405954 // <realization>
	relation 3405954 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3405954 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8241026 "BreakIterator"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor. BreakIterator is stateless and has no default behavior.
"
      end

      operation 8241154 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Create a copy of this iterator
@return A copy of this
"
      end

      attribute 1906050 "DONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "DONE is returned by previous(), next(), next(int), preceding(int)
and following(int) when either the first or last text boundary has been
reached.

"
      end

      operation 8241282 "first"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first boundary. The iterator's current position is set
to the first text boundary.
@return The character index of the first text boundary.
"
      end

      operation 8241410 "last"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last boundary. The iterator's current position is set
to the last text boundary.
@return The character index of the last text boundary.
"
      end

      operation 8241538 "next"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the nth boundary from the current boundary. If either
the first or last text boundary has been reached, it returns
<code>BreakIterator.DONE</code> and the current position is set to either
the first or last text boundary depending on which one is reached. Otherwise,
the iterator's current position is set to the new boundary.
For example, if the iterator's current position is the mth text boundary
and three more boundaries exist from the current boundary to the last text
boundary, the next(2) call will return m + 2. The new text position is set
to the (m + 2)th text boundary. A next(4) call would return
<code>BreakIterator.DONE</code> and the last text boundary would become the
new text position.
@param n which boundary to return.  A value of 0
does nothing.  Negative values move to previous boundaries
and positive values move to later boundaries.
@return The character index of the nth boundary from the current position
or <code>BreakIterator.DONE</code> if either first or last text boundary
has been reached.
"
      end

      operation 8241666 "next"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the boundary following the current boundary. If the current boundary
is the last text boundary, it returns <code>BreakIterator.DONE</code> and
the iterator's current position is unchanged. Otherwise, the iterator's
current position is set to the boundary following the current boundary.
@return The character index of the next text boundary or
<code>BreakIterator.DONE</code> if the current boundary is the last text
boundary.
Equivalent to next(1).
@see #next(int)
"
      end

      operation 8241794 "previous"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the boundary preceding the current boundary. If the current boundary
is the first text boundary, it returns <code>BreakIterator.DONE</code> and
the iterator's current position is unchanged. Otherwise, the iterator's
current position is set to the boundary preceding the current boundary.
@return The character index of the previous text boundary or
<code>BreakIterator.DONE</code> if the current boundary is the first text
boundary.
"
      end

      operation 8241922 "following"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first boundary following the specified character offset. If the
specified offset equals to the last text boundary, it returns
<code>BreakIterator.DONE</code> and the iterator's current position is unchanged.
Otherwise, the iterator's current position is set to the returned boundary.
The value returned is always greater than the offset or the value
<code>BreakIterator.DONE</code>.
@param offset the character offset to begin scanning.
@return The first boundary after the specified offset or
<code>BreakIterator.DONE</code> if the last text boundary is passed in
as the offset.
@exception  IllegalArgumentException if the specified offset is less than
the first text boundary or greater than the last text boundary.
"
      end

      operation 8242050 "preceding"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last boundary preceding the specified character offset. If the
specified offset equals to the first text boundary, it returns
<code>BreakIterator.DONE</code> and the iterator's current position is unchanged.
Otherwise, the iterator's current position is set to the returned boundary.
The value returned is always less than the offset or the value
<code>BreakIterator.DONE</code>.
@param offset the character offset to begin scanning.
@return The last boundary before the specified offset or
<code>BreakIterator.DONE</code> if the first text boundary is passed in
as the offset.
@exception   IllegalArgumentException if the specified offset is less than
the first text boundary or greater than the last text boundary.
@since 1.2
"
      end

      operation 8242178 "isBoundary"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified character offset is a text boundary.
@param offset the character offset to check.
@return <code>true</code> if \"offset\" is a boundary position,
<code>false</code> otherwise.
@exception   IllegalArgumentException if the specified offset is less than
the first text boundary or greater than the last text boundary.
@since 1.2
"
      end

      operation 8242306 "current"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns character index of the text boundary that was most
recently returned by next(), next(int), previous(), first(), last(),
following(int) or preceding(int). If any of these methods returns
<code>BreakIterator.DONE</code> because either first or last text boundary
has been reached, it returns the first or last text boundary depending on
which one is reached.
@return The text boundary returned from the above methods, first or last
text boundary.
@see #next()
@see #next(int)
@see #previous()
@see #first()
@see #last()
@see #following(int)
@see #preceding(int)
"
      end

      operation 8242434 "getText"
	abstract public return_type class_ref 429314 // CharacterIterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the text being scanned
@return the text being scanned
"
      end

      operation 8242562 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new text string to be scanned.  The current scan
position is reset to first().
@param newText new text to scan.
"
      end

      operation 8242690 "setText"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 429314 // CharacterIterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new text for scanning.  The current scan
position is reset to first().
@param newText new text to scan.
"
      end

      attribute 1906178 "CHARACTER_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1906306 "WORD_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1906434 "LINE_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1906562 "SENTENCE_INDEX"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1044866 "BreakIteratorCache"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3406210 // iter (<unidirectional association>)
	  relation 3406210 --->
	    a role_name "iter" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3406210 // iter (<unidirectional association>)
	    b parent class_ref 877058 // BreakIterator
	end

	classrelation 3406338 // locale (<unidirectional association>)
	  relation 3406338 --->
	    a role_name "locale" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3406338 // locale (<unidirectional association>)
	    b parent class_ref 312962 // Locale
	end

	operation 8244354 "BreakIteratorCache"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "locale" type class_ref 312962 // Locale
	    param inout name "iter" type class_ref 877058 // BreakIterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8244482 "getLocale"
	  package return_type class_ref 312962 // Locale
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8244610 "createBreakInstance"
	  package return_type class_ref 877058 // BreakIterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3406082 // iterCache (<unidirectional association>)
	relation 3406082 --->
	  a role_name "iterCache" multiplicity "[]" init_value " (SoftReference<BreakIteratorCache>[]) new SoftReference<?>[4]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<BreakIteratorCache>${multiplicity} ${name}${value};
"
	    java_annotation "@SuppressWarnings(\"unchecked\")
"
	    classrelation_ref 3406082 // iterCache (<unidirectional association>)
	  b parent class_ref 321026 // SoftReference
      end

      operation 8242818 "getWordInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#word\">word breaks</a>
for the {@linkplain Locale#getDefault() default locale}.
@return A break iterator for word breaks
"
      end

      operation 8242946 "getWordInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#word\">word breaks</a>
for the given locale.
@param locale the desired locale
@return A break iterator for word breaks
@exception NullPointerException if <code>locale</code> is null
"
      end

      operation 8243074 "getLineInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#line\">line breaks</a>
for the {@linkplain Locale#getDefault() default locale}.
@return A break iterator for line breaks
"
      end

      operation 8243202 "getLineInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#line\">line breaks</a>
for the given locale.
@param locale the desired locale
@return A break iterator for line breaks
@exception NullPointerException if <code>locale</code> is null
"
      end

      operation 8243330 "getCharacterInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#character\">character breaks</a>
for the {@linkplain Locale#getDefault() default locale}.
@return A break iterator for character breaks
"
      end

      operation 8243458 "getCharacterInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#character\">character breaks</a>
for the given locale.
@param locale the desired locale
@return A break iterator for character breaks
@exception NullPointerException if <code>locale</code> is null
"
      end

      operation 8243586 "getSentenceInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#sentence\">sentence breaks</a>
for the {@linkplain Locale#getDefault() default locale}.
@return A break iterator for sentence breaks
"
      end

      operation 8243714 "getSentenceInstance"
	class_operation public return_type class_ref 877058 // BreakIterator
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>BreakIterator</code> instance
for <a href=\"BreakIterator.html#sentence\">sentence breaks</a>
for the given locale.
@param locale the desired locale
@return A break iterator for sentence breaks
@exception NullPointerException if <code>locale</code> is null
"
      end

      operation 8243842 "getBreakInstance"
	class_operation private return_type class_ref 877058 // BreakIterator
	nparams 2
	  param inout name "locale" type class_ref 312962 // Locale
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8243970 "createBreakInstance"
	class_operation private return_type class_ref 877058 // BreakIterator
	nparams 2
	  param inout name "locale" type class_ref 312962 // Locale
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8244098 "createBreakInstance"
	class_operation private return_type class_ref 877058 // BreakIterator
	nparams 3
	  param inout name "adapter" explicit_type "LocaleProviderAdapter"
	  param inout name "locale" type class_ref 312962 // Locale
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8244226 "getAvailableLocales"
	class_operation public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>get*Instance</code> methods of this class can return
localized instances.
The returned array represents the union of locales supported by the Java
runtime and by installed
{@link java.text.spi.BreakIteratorProvider BreakIteratorProvider} implementations.
It must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>BreakIterator</code> instances are available.
"
      end
    end

    class 890114 "Bidi"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements the Unicode Bidirectional Algorithm.
<p>
A Bidi object provides information on the bidirectional reordering of the text
used to create it.  This is required, for example, to properly display Arabic
or Hebrew text.  These languages are inherently mixed directional, as they order
numbers from left-to-right while ordering most other text from right-to-left.
<p>
Once created, a Bidi object can be queried to see if the text it represents is
all left-to-right or all right-to-left.  Such objects are very lightweight and
this text is relatively easy to process.
<p>
If there are multiple runs of text, information about the runs can be accessed
by indexing to get the start, limit, and level of a run.  The level represents
both the direction and the 'nesting level' of a directional run.  Odd levels
are right-to-left, while even levels are left-to-right.  So for example level
0 represents left-to-right text, while level 1 represents right-to-left text, and
level 2 represents left-to-right text embedded in a right-to-left run.

@since 1.4
"
      attribute 1905410 "DIRECTION_LEFT_TO_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant indicating base direction is left-to-right. 
"
      end

      attribute 1905538 "DIRECTION_RIGHT_TO_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constant indicating base direction is right-to-left. 
"
      end

      attribute 1905666 "DIRECTION_DEFAULT_LEFT_TO_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant indicating that the base direction depends on the first strong
directional character in the text according to the Unicode
Bidirectional Algorithm.  If no strong directional character is present,
the base direction is left-to-right.

"
      end

      attribute 1905794 "DIRECTION_DEFAULT_RIGHT_TO_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Constant indicating that the base direction depends on the first strong
directional character in the text according to the Unicode
Bidirectional Algorithm.  If no strong directional character is present,
the base direction is right-to-left.

"
      end

      attribute 1905922 "bidiBase"
	private explicit_type "BidiBase"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8238722 "Bidi"
	public explicit_return_type ""
	nparams 2
	  param inout name "paragraph" type class_ref 128130 // String
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create Bidi from the given paragraph of text and base direction.
@param paragraph a paragraph of text
@param flags a collection of flags that control the algorithm.  The
algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,
DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.
Other values are reserved.
"
      end

      operation 8238850 "Bidi"
	public explicit_return_type ""
	nparams 1
	  param inout name "paragraph" type class_ref 472962 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create Bidi from the given paragraph of text.
<p>
The RUN_DIRECTION attribute in the text, if present, determines the base
direction (left-to-right or right-to-left).  If not present, the base
direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right
if there are no strong directional characters in the text.  This attribute, if
present, must be applied to all the text in the paragraph.
<p>
The BIDI_EMBEDDING attribute in the text, if present, represents embedding level
information.  Negative values from -1 to -62 indicate overrides at the absolute value
of the level.  Positive values from 1 to 62 indicate embeddings.  Where values are
zero or not defined, the base embedding level as determined by the base direction
is assumed.
<p>
The NUMERIC_SHAPING attribute in the text, if present, converts European digits to
other decimal digits before running the bidi algorithm.  This attribute, if present,
must be applied to all the text in the paragraph.

@param paragraph a paragraph of text with optional character and paragraph attribute information

@see java.awt.font.TextAttribute#BIDI_EMBEDDING
@see java.awt.font.TextAttribute#NUMERIC_SHAPING
@see java.awt.font.TextAttribute#RUN_DIRECTION
"
      end

      operation 8238978 "Bidi"
	public explicit_return_type ""
	nparams 6
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "textStart" explicit_type "int"
	  param inout name "embeddings" explicit_type "byte"
	multiplicity "[]"
	  param in name "embStart" explicit_type "int"
	  param in name "paragraphLength" explicit_type "int"
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create Bidi from the given text, embedding, and direction information.
The embeddings array may be null.  If present, the values represent embedding level
information.  Negative values from -1 to -61 indicate overrides at the absolute value
of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are
zero, the base embedding level as determined by the base direction is assumed.
@param text an array containing the paragraph of text to process.
@param textStart the index into the text array of the start of the paragraph.
@param embeddings an array containing embedding values for each character in the paragraph.
This can be null, in which case it is assumed that there is no external embedding information.
@param embStart the index into the embedding array of the start of the paragraph.
@param paragraphLength the length of the paragraph in the text and embeddings arrays.
@param flags a collection of flags that control the algorithm.  The
algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,
DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.
Other values are reserved.
"
      end

      operation 8239106 "createLineBidi"
	public return_type class_ref 890114 // Bidi
	nparams 2
	  param in name "lineStart" explicit_type "int"
	  param in name "lineLimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a Bidi object representing the bidi information on a line of text within
the paragraph represented by the current Bidi.  This call is not required if the
entire paragraph fits on one line.

@param lineStart the offset from the start of the paragraph to the start of the line.
@param lineLimit the offset from the start of the paragraph to the limit of the line.
@return a {@code Bidi} object
"
      end

      operation 8239234 "isMixed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right
and right-to-left text, or the base direction differs from the direction of the only run of text.

@return true if the line is not left-to-right or right-to-left.
"
      end

      operation 8239362 "isLeftToRight"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the line is all left-to-right text and the base direction is left-to-right.

@return true if the line is all left-to-right text and the base direction is left-to-right
"
      end

      operation 8239490 "isRightToLeft"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the line is all right-to-left text, and the base direction is right-to-left.
@return true if the line is all right-to-left text, and the base direction is right-to-left
"
      end

      operation 8239618 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the length of text in the line.
@return the length of text in the line
"
      end

      operation 8239746 "baseIsLeftToRight"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the base direction is left-to-right.
@return true if the base direction is left-to-right
"
      end

      operation 8239874 "getBaseLevel"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the base level (0 if left-to-right, 1 if right-to-left).
@return the base level
"
      end

      operation 8240002 "getLevelAt"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the resolved level of the character at offset.  If offset is
{@literal <} 0 or &ge; the length of the line, return the base direction
level.

@param offset the index of the character for which to return the level
@return the resolved level of the character at offset
"
      end

      operation 8240130 "getRunCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of level runs.
@return the number of level runs
"
      end

      operation 8240258 "getRunLevel"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the level of the nth logical run in this line.
@param run the index of the run, between 0 and <code>getRunCount()</code>
@return the level of the run
"
      end

      operation 8240386 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the index of the character at the start of the nth logical run in this line, as
an offset from the start of the line.
@param run the index of the run, between 0 and <code>getRunCount()</code>
@return the start of the run
"
      end

      operation 8240514 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the index of the character past the end of the nth logical run in this line, as
an offset from the start of the line.  For example, this will return the length
of the line for the last run on the line.
@param run the index of the run, between 0 and <code>getRunCount()</code>
@return limit the limit of the run
"
      end

      operation 8240642 "requiresBidi"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "text" explicit_type "char"
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the specified text requires bidi analysis.  If this returns false,
the text will display left-to-right.  Clients can then avoid constructing a Bidi object.
Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped
and ordered for display, and so will not cause this function to return true.

@param text the text containing the characters to test
@param start the start of the range of characters to test
@param limit the limit of the range of characters to test
@return true if the range of characters requires bidi analysis
"
      end

      operation 8240770 "reorderVisually"
	class_operation public explicit_return_type "void"
	nparams 5
	  param inout name "levels" explicit_type "byte"
	multiplicity "[]"
	  param in name "levelStart" explicit_type "int"
	  param inout name "objects" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "objectStart" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reorder the objects in the array into visual order based on their levels.
This is a utility function to use when you have a collection of objects
representing runs of text in logical order, each run containing text
at a single level.  The elements at <code>index</code> from
<code>objectStart</code> up to <code>objectStart + count</code>
in the objects array will be reordered into visual order assuming
each run of text has the level indicated by the corresponding element
in the levels array (at <code>index - objectStart + levelStart</code>).

@param levels an array representing the bidi level of each object
@param levelStart the start position in the levels array
@param objects the array of objects to be reordered into visual order
@param objectStart the start position in the objects array
@param count the number of objects to reorder
"
      end

      operation 8240898 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Display the bidi internal state, used in debugging.
"
      end
    end

    class 1044226 "Annotation"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An Annotation object is used as a wrapper for a text attribute value if
the attribute has annotation characteristics. These characteristics are:
<ul>
<li>The text range that the attribute is applied to is critical to the
semantics of the range. That means, the attribute cannot be applied to subranges
of the text range that it applies to, and, if two adjacent text ranges have
the same value for this attribute, the attribute still cannot be applied to
the combined range as a whole with this value.
<li>The attribute or its value usually do no longer apply if the underlying text is
changed.
</ul>

An example is grammatical information attached to a sentence:
For the previous sentence, you can say that \"an example\"
is the subject, but you cannot say the same about \"an\", \"example\", or \"exam\".
When the text is changed, the grammatical information typically becomes invalid.
Another example is Japanese reading information (yomi).

<p>
Wrapping the attribute value into an Annotation object guarantees that
adjacent text runs don't get merged even if the attribute values are equal,
and indicates to text containers that the attribute should be discarded if
the underlying text is modified.

@see AttributedCharacterIterator
@since 1.2
"
      operation 8230530 "Annotation"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an annotation record with the given value, which
may be null.

@param value the value of the attribute
"
      end

      operation 8230658 "getValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the attribute, which may be null.

@return the value of the attribute
"
      end

      operation 8230786 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of this Annotation.

@return the {@code String} representation of this {@code Annotation}
"
      end

      classrelation 3404674 // value (<unidirectional association>)
	relation 3404674 --->
	  a role_name "value" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3404674 // value (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end
    end

    class 1044354 "AttributedString"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An AttributedString holds text and related attribute information. It
may be used as the actual data storage in some cases where a text
reader wants to access attributed text through the AttributedCharacterIterator
interface.

<p>
An attribute is a key/value pair, identified by the key.  No two
attributes on a given character can have the same key.

<p>The values for an attribute are immutable, or must not be mutated
by clients or storage.  They are always passed by reference, and not
cloned.

@see AttributedCharacterIterator
@see Annotation
@since 1.2
"
      attribute 1903746 "ARRAY_SIZE_INCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " since there are no vectors of int, we have to use arrays.
 We allocate them in chunks of 10 elements so we don't have to allocate all the time.
"
      end

      classrelation 3404802 // text (<unidirectional association>)
	relation 3404802 --->
	  a role_name "text" package
	    comment " field holding the text
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3404802 // text (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1903874 "runArraySize"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " fields holding run attribute information
 run attributes are organized by run
 current size of the arrays"
      end

      attribute 1904002 "runCount"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " actual number of runs, <= runArraySize"
      end

      attribute 1904130 "runStarts"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " start index for each run"
      end

      classrelation 3404930 // runAttributes (<unidirectional association>)
	relation 3404930 --->
	  a role_name "runAttributes" multiplicity "[]" package
	    comment " vector of attribute keys for each run"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Attribute>${multiplicity} ${name}${value};
"
	    classrelation_ref 3404930 // runAttributes (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 3405058 // runAttributeValues (<unidirectional association>)
	relation 3405058 --->
	  a role_name "runAttributeValues" multiplicity "[]" package
	    comment " parallel vector of attribute values for each run"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object>${multiplicity} ${name}${value};
"
	    classrelation_ref 3405058 // runAttributeValues (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 8230914 "AttributedString"
	package explicit_return_type ""
	nparams 1
	  param inout name "iterators" type class_ref 472962 // AttributedCharacterIterator
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given
AttributedCharacterIterators.

@param iterators AttributedCharacterIterators to construct
AttributedString from.
@throws NullPointerException if iterators is null
"
      end

      operation 8231042 "AttributedString"
	public explicit_return_type ""
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given text.
@param text The text for this attributed string.
@exception NullPointerException if <code>text</code> is null.
"
      end

      operation 8231170 "AttributedString"
	public explicit_return_type ""
	nparams 2
	  param inout name "text" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? extends Attribute, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given text and attributes.
@param text The text for this attributed string.
@param attributes The attributes that apply to the entire string.
@exception NullPointerException if <code>text</code> or
           <code>attributes</code> is null.
@exception IllegalArgumentException if the text has length 0
and the attributes parameter is not an empty Map (attributes
cannot be applied to a 0-length range).
"
      end

      operation 8231298 "AttributedString"
	public explicit_return_type ""
	nparams 1
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the given attributed
text represented by AttributedCharacterIterator.
@param text The text for this attributed string.
@exception NullPointerException if <code>text</code> is null.
"
      end

      operation 8231426 "AttributedString"
	public explicit_return_type ""
	nparams 3
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the subrange of
the given attributed text represented by
AttributedCharacterIterator. If the given range produces an
empty text, all attributes will be discarded.  Note that any
attributes wrapped by an Annotation object are discarded for a
subrange of the original attribute range.

@param text The text for this attributed string.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last character
of the range.
@exception NullPointerException if <code>text</code> is null.
@exception IllegalArgumentException if the subrange given by
beginIndex and endIndex is out of the text range.
@see java.text.Annotation
"
      end

      operation 8231554 "AttributedString"
	public explicit_return_type ""
	nparams 4
	  param inout name "text" type class_ref 472962 // AttributedCharacterIterator
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	  param inout name "attributes" type class_ref 866050 // Attribute
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AttributedString instance with the subrange of
the given attributed text represented by
AttributedCharacterIterator.  Only attributes that match the
given attributes will be incorporated into the instance. If the
given range produces an empty text, all attributes will be
discarded. Note that any attributes wrapped by an Annotation
object are discarded for a subrange of the original attribute
range.

@param text The text for this attributed string.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last character
of the range.
@param attributes Specifies attributes to be extracted
from the text. If null is specified, all available attributes will
be used.
@exception NullPointerException if <code>text</code> is null.
@exception IllegalArgumentException if the subrange given by
beginIndex and endIndex is out of the text range.
@see java.text.Annotation
"
      end

      operation 8231682 "addAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "attribute" type class_ref 866050 // Attribute
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an attribute to the entire string.
@param attribute the attribute key
@param value the value of the attribute; may be null
@exception NullPointerException if <code>attribute</code> is null.
@exception IllegalArgumentException if the AttributedString has length 0
(attributes cannot be applied to a 0-length range).
"
      end

      operation 8231810 "addAttribute"
	public explicit_return_type "void"
	nparams 4
	  param inout name "attribute" type class_ref 866050 // Attribute
	  param inout name "value" type class_ref 129538 // Object
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an attribute to a subrange of the string.
@param attribute the attribute key
@param value The value of the attribute. May be null.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last character of the range.
@exception NullPointerException if <code>attribute</code> is null.
@exception IllegalArgumentException if beginIndex is less then 0, endIndex is
greater than the length of the string, or beginIndex and endIndex together don't
define a non-empty subrange of the string.
"
      end

      operation 8231938 "addAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "attributes" type class_ref 130178 // Map
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a set of attributes to a subrange of the string.
@param attributes The attributes to be added to the string.
@param beginIndex Index of the first character of the range.
@param endIndex Index of the character following the last
character of the range.
@exception NullPointerException if <code>attributes</code> is null.
@exception IllegalArgumentException if beginIndex is less then
0, endIndex is greater than the length of the string, or
beginIndex and endIndex together don't define a non-empty
subrange of the string and the attributes parameter is not an
empty Map.
"
      end

      operation 8232066 "addAttributeImpl"
	private explicit_return_type "void"
	nparams 4
	  param inout name "attribute" type class_ref 866050 // Attribute
	  param inout name "value" type class_ref 129538 // Object
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8232194 "createRunAttributeDataVectors"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8232322 "ensureRunBreak"
	private explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ensure there's a run break at offset, return the index of the run"
      end

      operation 8232450 "ensureRunBreak"
	private explicit_return_type "int"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "copyAttrs" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures there is a run break at offset, returning the index of
the run. If this results in splitting a run, two things can happen:
<ul>
<li>If copyAttrs is true, the attributes from the existing run
    will be placed in both of the newly created runs.
<li>If copyAttrs is false, the attributes from the existing run
will NOT be copied to the run to the right (>= offset) of the break,
but will exist on the run to the left (< offset).
</ul>
"
      end

      operation 8232578 "addAttributeRunData"
	private explicit_return_type "void"
	nparams 4
	  param inout name "attribute" type class_ref 866050 // Attribute
	  param inout name "value" type class_ref 129538 // Object
	  param in name "beginRunIndex" explicit_type "int"
	  param in name "endRunIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " add the attribute attribute/value to all runs where beginRunIndex <= runIndex < endRunIndex"
      end

      operation 8232706 "getIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator instance that provides access to the entire contents of
this string.

@return An iterator providing access to the text and its attributes.
"
      end

      operation 8232834 "getIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "attributes" type class_ref 866050 // Attribute
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator instance that provides access to
selected contents of this string.
Information about attributes not listed in attributes that the
implementor may have need not be made accessible through the iterator.
If the list is null, all available attribute information should be made
accessible.

@param attributes a list of attributes that the client is interested in
@return an iterator providing access to the entire text and its selected attributes
"
      end

      operation 8232962 "getIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 3
	  param inout name "attributes" type class_ref 866050 // Attribute
	multiplicity "[]"
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator instance that provides access to
selected contents of this string.
Information about attributes not listed in attributes that the
implementor may have need not be made accessible through the iterator.
If the list is null, all available attribute information should be made
accessible.

@param attributes a list of attributes that the client is interested in
@param beginIndex the index of the first character
@param endIndex the index of the character following the last character
@return an iterator providing access to the text and its attributes
@exception IllegalArgumentException if beginIndex is less then 0,
endIndex is greater than the length of the string, or beginIndex is
greater than endIndex.
"
      end

      operation 8233090 "length"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " all (with the exception of length) reading operations are private,
 since AttributedString instances are accessed through iterators.
 length is package private so that CharacterIteratorFieldDelegate can
 access it without creating an AttributedCharacterIterator."
      end

      operation 8233218 "charAt"
	private explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8233346 "getAttribute"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "attribute" type class_ref 866050 // Attribute
	  param in name "runIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8233474 "getAttributeCheckRange"
	private return_type class_ref 129538 // Object
	nparams 4
	  param inout name "attribute" type class_ref 866050 // Attribute
	  param in name "runIndex" explicit_type "int"
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " gets an attribute value, but returns an annotation only if it's range does not extend outside the range beginIndex..endIndex"
      end

      operation 8233602 "attributeValuesMatch"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "attributes" type class_ref 192258 // Set
	  param in name "runIndex1" explicit_type "int"
	  param in name "runIndex2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns whether all specified attributes have equal values in the runs with the given indices"
      end

      operation 8233730 "valuesMatch"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "value1" type class_ref 129538 // Object
	  param inout name "value2" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns whether the two objects are either both null or equal"
      end

      operation 8233858 "appendContents"
	private explicit_return_type "void"
	nparams 2
	  param inout name "buf" type class_ref 166018 // StringBuffer
	  param inout name "iterator" type class_ref 429314 // CharacterIterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the contents of the CharacterIterator iterator into the
StringBuffer buf.
"
      end

      operation 8233986 "setAttributes"
	private explicit_return_type "void"
	nparams 2
	  param inout name "attrs" type class_ref 130178 // Map
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Attribute, Object> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the attributes for the range from offset to the next run break
(typically the end of the text) to the ones specified in attrs.
This is only meant to be called from the constructor!
"
      end

      operation 8234114 "mapsDiffer"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "last" type class_ref 130178 // Map
	  param inout name "attrs" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type} ${name}${(}${t0}<K, V> ${p0}, ${t1}<K, V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the attributes specified in last and attrs differ.
"
      end

      class 1044482 "AttributedStringIterator"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3405186 // <realization>
	  relation 3405186 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3405186 // <realization>
	    b parent class_ref 472962 // AttributedCharacterIterator
	end

	attribute 1904258 "beginIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " note on synchronization:
 we don't synchronize on the iterator, assuming that an iterator is only used in one thread.
 we do synchronize access to the AttributedString however, since it's more likely to be shared between threads.
 start and end index for our iteration
"
	end

	attribute 1904386 "endIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3405314 // relevantAttributes (<unidirectional association>)
	  relation 3405314 --->
	    a role_name "relevantAttributes" multiplicity "[]" private
	      comment " attributes that our client is interested in
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3405314 // relevantAttributes (<unidirectional association>)
	    b parent class_ref 866050 // Attribute
	end

	attribute 1904514 "currentIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " the current index for our iteration
 invariant: beginIndex <= currentIndex <= endIndex
"
	end

	attribute 1904642 "currentRunIndex"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " information about the run that includes currentIndex
"
	end

	attribute 1904770 "currentRunStart"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1904898 "currentRunLimit"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8234242 "AttributedStringIterator"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "attributes" type class_ref 866050 // Attribute
	  multiplicity "[]"
	    param in name "beginIndex" explicit_type "int"
	    param in name "endIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " constructor"
	end

	operation 8234370 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Object methods. See documentation in that class."
	end

	operation 8234498 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8234626 "clone"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8234754 "first"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " CharacterIterator methods. See documentation in that interface."
	end

	operation 8234882 "last"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235010 "current"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235138 "next"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235266 "previous"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235394 "setIndex"
	  public explicit_return_type "char"
	  nparams 1
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235522 "getBeginIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235650 "getEndIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235778 "getIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8235906 "getRunStart"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " AttributedCharacterIterator methods. See documentation in that interface."
	end

	operation 8236034 "getRunStart"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attribute" type class_ref 866050 // Attribute
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8236162 "getRunStart"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attributes" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8236290 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8236418 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attribute" type class_ref 866050 // Attribute
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8236546 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attributes" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8236674 "getAttributes"
	  public return_type class_ref 130178 // Map
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute,Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8236802 "getAllAttributeKeys"
	  public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8236930 "getAttribute"
	  public return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "attribute" type class_ref 866050 // Attribute
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8237058 "getString"
	  private return_type class_ref 1044354 // AttributedString
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " internally used methods"
	end

	operation 8237186 "internalSetIndex"
	  private explicit_return_type "char"
	  nparams 1
	    param in name "position" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " set the current index, update information about the current run if necessary,
 return the character at the current index"
	end

	operation 8237314 "updateRunInfo"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " update the information about the current run"
	end
      end

      class 1044610 "AttributeMap"
	visibility private 
	nactuals 2
	actual class class_ref 192130 // AbstractMap
	  rank 0 explicit_value ""
	actual class class_ref 192130 // AbstractMap
	  rank 1 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3405442 // <realization>
	  relation 3405442 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3405442 // <realization>
	    b parent class_ref 192130 // AbstractMap
	end

	attribute 1905026 "runIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1905154 "beginIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1905282 "endIndex"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8237442 "AttributeMap"
	  package explicit_return_type ""
	  nparams 3
	    param in name "runIndex" explicit_type "int"
	    param in name "beginIndex" explicit_type "int"
	    param in name "endIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8237570 "entrySet"
	  public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<Attribute, Object>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8237698 "get"
	  public return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "key" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1044738 "AttributeEntry"
      visibility package 
      nactuals 4
      actual class class_ref 130178 // Map
        rank 0 explicit_value ""
      actual class class_ref 130178 // Map
        rank 1 explicit_value ""
      actual class class_ref 192386 // Entry
        rank 0 explicit_value ""
      actual class class_ref 192386 // Entry
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3405570 // <realization>
	relation 3405570 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3405570 // <realization>
	  b parent class_ref 192386 // Entry
      end

      classrelation 3405698 // key (<unidirectional association>)
	relation 3405698 --->
	  a role_name "key" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3405698 // key (<unidirectional association>)
	  b parent class_ref 866050 // Attribute
      end

      classrelation 3405826 // value (<unidirectional association>)
	relation 3405826 --->
	  a role_name "value" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3405826 // value (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 8237826 "AttributeEntry"
	package explicit_return_type ""
	nparams 2
	  param inout name "key" type class_ref 866050 // Attribute
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8237954 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8238082 "getKey"
	public return_type class_ref 866050 // Attribute
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8238210 "getValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8238338 "setValue"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "newValue" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8238466 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8238594 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1044994 "CalendarBuilder"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code CalendarBuilder} keeps field-value pairs for setting
the calendar fields of the given {@code Calendar}. It has the
{@link Calendar#FIELD_COUNT FIELD_COUNT}-th field for the week year
support. Also {@code ISO_DAY_OF_WEEK} is used to specify
{@code DAY_OF_WEEK} in the ISO day of week numbering.

<p>{@code CalendarBuilder} retains the semantic of the pseudo
timestamp for fields. {@code CalendarBuilder} uses a single
int array combining fields[] and stamp[] of {@code Calendar}.

@author Masayoshi Okutsu
"
      attribute 1906690 "UNSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Pseudo time stamp constants used in java.util.Calendar

"
      end

      attribute 1906818 "COMPUTED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1906946 "MINIMUM_USER_STAMP"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1907074 "MAX_FIELD"
	class_attribute const_attribute private explicit_type "int"
	init_value " FIELD_COUNT + 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1907202 "WEEK_YEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " FIELD_COUNT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1907330 "ISO_DAY_OF_WEEK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " pseudo field index"
      end

      attribute 1907458 "field"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " stamp[] (lower half) and field[] (upper half) combined
"
      end

      attribute 1907586 "nextStamp"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1907714 "maxFieldIndex"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8244738 "CalendarBuilder"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8244866 "set"
	package return_type class_ref 1044994 // CalendarBuilder
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8244994 "addYear"
	package return_type class_ref 1044994 // CalendarBuilder
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8245122 "isSet"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8245250 "clear"
	package return_type class_ref 1044994 // CalendarBuilder
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8245378 "establish"
	package return_type class_ref 723586 // Calendar
	nparams 1
	  param inout name "cal" type class_ref 723586 // Calendar
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8245506 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8245634 "toISODayOfWeek"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "calendarDayOfWeek" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8245762 "toCalendarDayOfWeek"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "isoDayOfWeek" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8245890 "isValidDayOfWeek"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "dayOfWeek" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1045122 "CharacterIteratorFieldDelegate"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CharacterIteratorFieldDelegate combines the notifications from a Format
into a resulting <code>AttributedCharacterIterator</code>. The resulting
<code>AttributedCharacterIterator</code> can be retrieved by way of
the <code>getIterator</code> method.

"
      classrelation 3406850 // <realization>
	relation 3406850 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3406850 // <realization>
	  b parent class_ref 1045378 // FieldDelegate
      end

      classrelation 3406978 // attributedStrings (<unidirectional association>)
	relation 3406978 --->
	  a role_name "attributedStrings" private
	    comment "
Array of AttributeStrings. Whenever <code>formatted</code> is invoked
for a region > size, a new instance of AttributedString is added to
attributedStrings. Subsequent invocations of <code>formatted</code>
for existing regions result in invoking addAttribute on the existing
AttributedStrings.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AttributedString> ${name}${value};
"
	    classrelation_ref 3406978 // attributedStrings (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      attribute 1908098 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Running count of the number of characters that have
been encountered.

"
      end

      operation 8247810 "CharacterIteratorFieldDelegate"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8247938 "formatted"
	public explicit_return_type "void"
	nparams 5
	  param inout name "attr" type class_ref 1045634 // Field
	  param inout name "value" type class_ref 129538 // Object
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "buffer" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8248066 "formatted"
	public explicit_return_type "void"
	nparams 6
	  param in name "fieldID" explicit_type "int"
	  param inout name "attr" type class_ref 1045634 // Field
	  param inout name "value" type class_ref 129538 // Object
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "buffer" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8248194 "getIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "string" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>AttributedCharacterIterator</code> that can be used
to iterate over the resulting formatted String.

@pararm string Result of formatting.
"
      end
    end

    class 1045250 "Format"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>Format</code> is an abstract base class for formatting locale-sensitive
information such as dates, messages, and numbers.

<p>
<code>Format</code> defines the programming interface for formatting
locale-sensitive objects into <code>String</code>s (the
<code>format</code> method) and for parsing <code>String</code>s back
into objects (the <code>parseObject</code> method).

<p>
Generally, a format's <code>parseObject</code> method must be able to parse
any string formatted by its <code>format</code> method. However, there may
be exceptional cases where this is not possible. For example, a
<code>format</code> method might create two adjacent integer numbers with
no separator in between, and in this case the <code>parseObject</code> could
not tell which digits belong to which number.

<h3>Subclassing</h3>

<p>
The Java Platform provides three specialized subclasses of <code>Format</code>--
<code>DateFormat</code>, <code>MessageFormat</code>, and
<code>NumberFormat</code>--for formatting dates, messages, and numbers,
respectively.
<p>
Concrete subclasses must implement three methods:
<ol>
<li> <code>format(Object obj, StringBuffer toAppendTo, FieldPosition pos)</code>
<li> <code>formatToCharacterIterator(Object obj)</code>
<li> <code>parseObject(String source, ParsePosition pos)</code>
</ol>
These general methods allow polymorphic parsing and formatting of objects
and are used, for example, by <code>MessageFormat</code>.
Subclasses often also provide additional <code>format</code> methods for
specific input types as well as <code>parse</code> methods for specific
result types. Any <code>parse</code> method that does not take a
<code>ParsePosition</code> argument should throw <code>ParseException</code>
when no text in the required format is at the beginning of the input text.

<p>
Most subclasses will also implement the following factory methods:
<ol>
<li>
<code>getInstance</code> for getting a useful format object appropriate
for the current locale
<li>
<code>getInstance(Locale)</code> for getting a useful format
object appropriate for the specified locale
</ol>
In addition, some subclasses may also implement other
<code>getXxxxInstance</code> methods for more specialized control. For
example, the <code>NumberFormat</code> class provides
<code>getPercentInstance</code> and <code>getCurrencyInstance</code>
methods for getting specialized number formatters.

<p>
Subclasses of <code>Format</code> that allow programmers to create objects
for locales (with <code>getInstance(Locale)</code> for example)
must also implement the following class method:
<blockquote>
<pre>
public static Locale[] getAvailableLocales()
</pre>
</blockquote>

<p>
And finally subclasses may define a set of constants to identify the various
fields in the formatted output. These constants are used to create a FieldPosition
object which identifies what information is contained in the field and its
position in the formatted result. These constants should be named
<code><em>item</em>_FIELD</code> where <code><em>item</em></code> identifies
the field. For examples of these constants, see <code>ERA_FIELD</code> and its
friends in {@link DateFormat}.

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Formats are generally not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          java.text.ParsePosition
@see          java.text.FieldPosition
@see          java.text.NumberFormat
@see          java.text.DateFormat
@see          java.text.MessageFormat
@author       Mark Davis
"
      class 1045378 "FieldDelegate"
	visibility package stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 8247554 "formatted"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "attr" type class_ref 1045634 // Field
	    param inout name "value" type class_ref 129538 // Object
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 166018 // StringBuffer
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notified when a particular region of the String is formatted. This
method will be invoked if there is no corresponding integer field id
matching <code>attr</code>.

@param attr Identifies the field matched
@param value Value associated with the field
@param start Beginning location of the field, will be >= 0
@param end End of the field, will be >= start and <= buffer.length()
@param buffer Contains current formatted value, receiver should
       NOT modify it.
"
	end

	operation 8247682 "formatted"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "fieldID" explicit_type "int"
	    param inout name "attr" type class_ref 1045634 // Field
	    param inout name "value" type class_ref 129538 // Object
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "buffer" type class_ref 166018 // StringBuffer
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notified when a particular region of the String is formatted.

@param fieldID Identifies the field by integer
@param attr Identifies the field matched
@param value Value associated with the field
@param start Beginning location of the field, will be >= 0
@param end End of the field, will be >= start and <= buffer.length()
@param buffer Contains current formatted value, receiver should
       NOT modify it.
"
	end
      end

      classrelation 3406466 // <realization>
	relation 3406466 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3406466 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3406594 // <realization>
	relation 3406594 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3406594 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1907842 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -299282585814624189L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8246018 "Format"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)
"
      end

      operation 8246146 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an object to produce a string. This is equivalent to
<blockquote>
{@link #format(Object, StringBuffer, FieldPosition) format}<code>(obj,
        new StringBuffer(), new FieldPosition(0)).toString();</code>
</blockquote>

@param obj    The object to format
@return       Formatted string.
@exception IllegalArgumentException if the Format cannot format the given
           object
"
      end

      operation 8246274 "format"
	abstract public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an object and appends the resulting text to a given string
buffer.
If the <code>pos</code> argument identifies a field used by the format,
then its indices are set to the beginning and end of the first such
field encountered.

@param obj    The object to format
@param toAppendTo    where the text is to be appended
@param pos    A <code>FieldPosition</code> identifying a field
              in the formatted text
@return       the string buffer passed in as <code>toAppendTo</code>,
              with formatted text appended
@exception NullPointerException if <code>toAppendTo</code> or
           <code>pos</code> is null
@exception IllegalArgumentException if the Format cannot format the given
           object
"
      end

      operation 8246402 "formatToCharacterIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats an Object producing an <code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
Each attribute key of the AttributedCharacterIterator will be of type
<code>Field</code>. It is up to each <code>Format</code> implementation
to define what the legal values are for each attribute in the
<code>AttributedCharacterIterator</code>, but typically the attribute
key is also used as the attribute value.
<p>The default implementation creates an
<code>AttributedCharacterIterator</code> with no attributes. Subclasses
that support fields should override this and create an
<code>AttributedCharacterIterator</code> with meaningful attributes.

@exception NullPointerException if obj is null.
@exception IllegalArgumentException when the Format cannot format the
           given object.
@param obj The object to format
@return AttributedCharacterIterator describing the formatted value.
@since 1.4
"
      end

      operation 8246530 "parseObject"
	abstract public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from a string to produce an object.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
object is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return An <code>Object</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null.
"
      end

      operation 8246658 "parseObject"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce an object.
The method may not use the entire text of the given string.

@param source A <code>String</code> whose beginning should be parsed.
@return An <code>Object</code> parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed.
"
      end

      operation 8246786 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object.

@return a clone of this instance.
"
      end

      operation 8246914 "createAttributedCharacterIterator"
	package return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convenience methods for creating AttributedCharacterIterators from
 different parameters.


Creates an <code>AttributedCharacterIterator</code> for the String
<code>s</code>.

@param s String to create AttributedCharacterIterator from
@return AttributedCharacterIterator wrapping s
"
      end

      operation 8247042 "createAttributedCharacterIterator"
	package return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "iterators" type class_ref 472962 // AttributedCharacterIterator
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>AttributedCharacterIterator</code> containing the
concatenated contents of the passed in
<code>AttributedCharacterIterator</code>s.

@param iterators AttributedCharacterIterators used to create resulting
                 AttributedCharacterIterators
@return AttributedCharacterIterator wrapping passed in
        AttributedCharacterIterators
"
      end

      operation 8247170 "createAttributedCharacterIterator"
	package return_type class_ref 472962 // AttributedCharacterIterator
	nparams 3
	  param inout name "string" type class_ref 128130 // String
	  param inout name "key" type class_ref 866050 // Attribute
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an AttributedCharacterIterator with the String
<code>string</code> and additional key/value pair <code>key</code>,
<code>value</code>.

@param string String to create AttributedCharacterIterator from
@param key Key for AttributedCharacterIterator
@param value Value associated with key in AttributedCharacterIterator
@return AttributedCharacterIterator wrapping args
"
      end

      operation 8247298 "createAttributedCharacterIterator"
	package return_type class_ref 472962 // AttributedCharacterIterator
	nparams 3
	  param inout name "iterator" type class_ref 472962 // AttributedCharacterIterator
	  param inout name "key" type class_ref 866050 // Attribute
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AttributedCharacterIterator with the contents of
<code>iterator</code> and the additional attribute <code>key</code>
<code>value</code>.

@param iterator Initial AttributedCharacterIterator to add arg to
@param key Key for AttributedCharacterIterator
@param value Value associated with key in AttributedCharacterIterator
@return AttributedCharacterIterator wrapping args
"
      end

      class 1045634 "Field"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3406722 // <generalisation>
	  relation 3406722 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3406722 // <generalisation>
	    b parent class_ref 866050 // Attribute
	end

	attribute 1907970 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 276966692217360283L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Proclaim serial compatibility with 1.4 FCS
"
	end

	operation 8247426 "Field"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a Field with the specified name.

@param name Name of the attribute
"
	end
      end
    end

    class 1045506 "ParsePosition"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>ParsePosition</code> is a simple class used by <code>Format</code>
and its subclasses to keep track of the current position during parsing.
The <code>parseObject</code> method in the various <code>Format</code>
classes requires a <code>ParsePosition</code> object as an argument.

<p>
By design, as you parse through a string with different formats,
you can use the same <code>ParsePosition</code>, since the index parameter
records the current position.

@author      Mark Davis
@see         java.text.Format
"
      attribute 1931778 "index"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Input: the place you start parsing.
<br>Output: position where the parse stopped.
This is designed to be used serially,
with each call setting index up for the next one.

"
      end

      attribute 1931906 "errorIndex"
	package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8296834 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current parse position.  On input to a parse method, this
is the index of the character at which parsing will begin; on output, it
is the index of the character following the last character parsed.

@return the current parse position
"
      end

      operation 8296962 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the current parse position.

@param index the current parse position
"
      end

      operation 8297090 "ParsePosition"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new ParsePosition with the given initial index.

@param index initial index
"
      end

      operation 8297218 "setErrorIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "ei" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the index at which a parse error occurred.  Formatters
should set this before returning an error code from their
parseObject method.  The default value is -1 if this is not set.

@param ei the index at which an error occurred
@since 1.2
"
      end

      operation 8297346 "getErrorIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the index at which an error occurred, or -1 if the
error index has not been set.

@return the index at which an error occurred
@since 1.2
"
      end

      operation 8297474 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides equals
"
      end

      operation 8297602 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this ParsePosition.
@return a hash code value for this object
"
      end

      operation 8297730 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string representation of this ParsePosition.
@return  a string representation of this object
"
      end
    end

    class 1045762 "ChoiceFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>ChoiceFormat</code> allows you to attach a format to a range of numbers.
It is generally used in a <code>MessageFormat</code> for handling plurals.
The choice is specified with an ascending list of doubles, where each item
specifies a half-open interval up to the next item:
<blockquote>
<pre>
X matches j if and only if limit[j] &le; X &lt; limit[j+1]
</pre>
</blockquote>
If there is no match, then either the first or last index is used, depending
on whether the number (X) is too low or too high.  If the limit array is not
in ascending order, the results of formatting will be incorrect.  ChoiceFormat
also accepts <code>&#92;u221E</code> as equivalent to infinity(INF).

<p>
<strong>Note:</strong>
<code>ChoiceFormat</code> differs from the other <code>Format</code>
classes in that you create a <code>ChoiceFormat</code> object with a
constructor (not with a <code>getInstance</code> style factory
method). The factory methods aren't necessary because <code>ChoiceFormat</code>
doesn't require any complex setup for a given locale. In fact,
<code>ChoiceFormat</code> doesn't implement any locale specific behavior.

<p>
When creating a <code>ChoiceFormat</code>, you must specify an array of formats
and an array of limits. The length of these arrays must be the same.
For example,
<ul>
<li>
    <em>limits</em> = {1,2,3,4,5,6,7}<br>
    <em>formats</em> = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"}
<li>
    <em>limits</em> = {0, 1, ChoiceFormat.nextDouble(1)}<br>
    <em>formats</em> = {\"no files\", \"one file\", \"many files\"}<br>
    (<code>nextDouble</code> can be used to get the next higher double, to
    make the half-open interval.)
</ul>

<p>
Here is a simple example that shows formatting and parsing:
<blockquote>
<pre>{@code
double[] limits = {1,2,3,4,5,6,7};
String[] dayOfWeekNames = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"};
ChoiceFormat form = new ChoiceFormat(limits, dayOfWeekNames);
ParsePosition status = new ParsePosition(0);
for (double i = 0.0; i <= 8.0; ++i) {
    status.setIndex(0);
    System.out.println(i + \" -> \" + form.format(i) + \" -> \"
                             + form.parse(form.format(i),status));
}
}</pre>
</blockquote>
Here is a more complex example, with a pattern format:
<blockquote>
<pre>{@code
double[] filelimits = {0,1,2};
String[] filepart = {\"are no files\",\"is one file\",\"are {2} files\"};
ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
Format[] testFormats = {fileform, null, NumberFormat.getInstance()};
MessageFormat pattform = new MessageFormat(\"There {0} on {1}\");
pattform.setFormats(testFormats);
Object[] testArgs = {null, \"ADisk\", null};
for (int i = 0; i < 4; ++i) {
    testArgs[0] = new Integer(i);
    testArgs[2] = testArgs[0];
    System.out.println(pattform.format(testArgs));
}
}</pre>
</blockquote>
<p>
Specifying a pattern for ChoiceFormat objects is fairly straightforward.
For example:
<blockquote>
<pre>{@code
ChoiceFormat fmt = new ChoiceFormat(
     \"-1#is negative| 0#is zero or fraction | 1#is one |1.0<is 1+ |2#is two |2<is more than 2.\");
System.out.println(\"Formatter Pattern : \" + fmt.toPattern());

System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));
System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));
System.out.println(\"Format with 0 : \" + fmt.format(0));
System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));
System.out.println(\"Format with 1.0 : \" + fmt.format(1));
System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));
System.out.println(\"Format with 2 : \" + fmt.format(2));
System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));
System.out.println(\"Format with NaN : \" + fmt.format(Double.NaN));
System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));
}</pre>
</blockquote>
And the output result would be like the following:
<blockquote>
<pre>{@code
Format with -INF : is negative
Format with -1.0 : is negative
Format with 0 : is zero or fraction
Format with 0.9 : is zero or fraction
Format with 1.0 : is one
Format with 1.5 : is 1+
Format with 2 : is two
Format with 2.1 : is more than 2.
Format with NaN : is negative
Format with +INF : is more than 2.
}</pre>
</blockquote>

<h3><a name=\"synchronization\">Synchronization</a></h3>

<p>
Choice formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.


@see          DecimalFormat
@see          MessageFormat
@author       Mark Davis
"
      classrelation 3407234 // <generalisation>
	relation 3407234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3407234 // <generalisation>
	  b parent class_ref 1045890 // NumberFormat
      end

      attribute 1910786 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1795184449645032964L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Proclaim serial compatibility with 1.1 FCS
"
      end

      operation 8254210 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newPattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the pattern.
@param newPattern See the class description.
"
      end

      operation 8254338 "toPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the pattern.

@return the pattern string
"
      end

      operation 8254466 "ChoiceFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "newPattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs with limits and corresponding formats based on the pattern.

@param newPattern the new pattern string
@see #applyPattern
"
      end

      operation 8254594 "ChoiceFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "limits" explicit_type "double"
	multiplicity "[]"
	  param inout name "formats" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs with the limits and the corresponding formats.

@param limits limits in ascending order
@param formats corresponding format strings
@see #setChoices
"
      end

      operation 8254722 "setChoices"
	public explicit_return_type "void"
	nparams 2
	  param inout name "limits" explicit_type "double"
	multiplicity "[]"
	  param inout name "formats" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the choices to be used in formatting.
@param limits contains the top value that you want
parsed with that format, and should be in ascending sorted order. When
formatting X, the choice will be the i, where
limit[i] &le; X {@literal <} limit[i+1].
If the limit array is not in ascending order, the results of formatting
will be incorrect.
@param formats are the formats you want to use for each limit.
They can be either Format objects or Strings.
When formatting with object Y,
if the object is a NumberFormat, then ((NumberFormat) Y).format(X)
is called. Otherwise Y.toString() is called.
"
      end

      operation 8254850 "getLimits"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the limits passed in the constructor.
@return the limits.
"
      end

      operation 8254978 "getFormats"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the formats passed in the constructor.
@return the formats.
"
      end

      operation 8255106 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "status" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overrides

Specialization of format. This method really calls
<code>format(double, StringBuffer, FieldPosition)</code>
thus the range of longs that are supported is only equal to
the range that can be stored by double. This will never be
a practical limitation.
"
      end

      operation 8255234 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "status" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns pattern with formatted double.
@param number number to be formatted and substituted.
@param toAppendTo where text is appended.
@param status ignore no useful status is returned.
"
      end

      operation 8255362 "parse"
	public return_type class_ref 398210 // Number
	nparams 2
	  param inout name "text" type class_ref 128130 // String
	  param inout name "status" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a Number from the input text.
@param text the source text.
@param status an input-output parameter.  On input, the
status.index field indicates the first character of the
source text that should be parsed.  On exit, if no error
occurred, status.index is set to the first unparsed character
in the source text.  On exit, if an error did occur,
status.index is unchanged and status.errorIndex is set to the
first index of the character that caused the parse to fail.
@return A Number representing the value of the number parsed.
"
      end

      operation 8255490 "nextDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the least double greater than {@code d}.
If {@code NaN}, returns same value.
<p>Used to make half-open intervals.

@param d the reference value
@return the least double value greather than {@code d}
@see #previousDouble
"
      end

      operation 8255618 "previousDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the greatest double less than {@code d}.
If {@code NaN}, returns same value.

@param d the reference value
@return the greatest double value less than {@code d}
@see #nextDouble
"
      end

      operation 8255746 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable
"
      end

      operation 8255874 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a hash code for the message format object.
"
      end

      operation 8256002 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equality comparision between two
"
      end

      operation 8256130 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "After reading an object from the input stream, do a simple verification
to maintain class invariants.
@throws InvalidObjectException if the objects read from the stream is invalid.
"
      end

      attribute 1910914 "choiceLimits"
	private explicit_type "double"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ===============privates===========================

A list of lower bounds for the choices.  The formatter will return
<code>choiceFormats[i]</code> if the number being formatted is greater than or equal to
<code>choiceLimits[i]</code> and less than <code>choiceLimits[i+1]</code>.
@serial

"
      end

      classrelation 3407362 // choiceFormats (<unidirectional association>)
	relation 3407362 --->
	  a role_name "choiceFormats" multiplicity "[]" private
	    comment "
A list of choice strings.  The formatter will return
<code>choiceFormats[i]</code> if the number being formatted is greater than or equal to
<code>choiceLimits[i]</code> and less than <code>choiceLimits[i+1]</code>.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3407362 // choiceFormats (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1911042 "SIGN"
	class_attribute const_attribute package explicit_type "long"
	init_value " 0x8000000000000000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "static final long SIGN          = 0x8000000000000000L;
static final long EXPONENT      = 0x7FF0000000000000L;
static final long SIGNIFICAND   = 0x000FFFFFFFFFFFFFL;

private static double nextDouble (double d, boolean positive) {
if (Double.isNaN(d) || Double.isInfinite(d)) {
return d;
}
long bits = Double.doubleToLongBits(d);
long significand = bits & SIGNIFICAND;
if (bits < 0) {
significand |= (SIGN | EXPONENT);
}
long exponent = bits & EXPONENT;
if (positive) {
significand += 1;
// FIXME fix overflow & underflow
} else {
significand -= 1;
// FIXME fix overflow & underflow
}
bits = exponent | (significand & ~EXPONENT);
return Double.longBitsToDouble(bits);
}

"
      end

      attribute 1911170 "EXPONENT"
	class_attribute const_attribute package explicit_type "long"
	init_value " 0x7FF0000000000000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1911298 "POSITIVEINFINITY"
	class_attribute const_attribute package explicit_type "long"
	init_value " 0x7FF0000000000000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8256258 "nextDouble"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "d" explicit_type "double"
	  param inout name "positive" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the least double greater than {@code d} (if {@code positive} is
{@code true}), or the greatest double less than {@code d} (if
{@code positive} is {@code false}).
If {@code NaN}, returns same value.

Does not affect floating-point flags,
provided these member functions do not:
         Double.longBitsToDouble(long)
         Double.doubleToLongBits(double)
         Double.isNaN(double)

@param d        the reference value
@param positive {@code true} if the least double is desired;
                {@code false} otherwise
@return the least or greater double value
"
      end

      operation 8256386 "doubleArraySize"
	class_operation private explicit_return_type "double"
	nparams 1
	  param inout name "array" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8256514 "doubleArraySize"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "array" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1045890 "NumberFormat"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>NumberFormat</code> is the abstract base class for all number
formats. This class provides the interface for formatting and parsing
numbers. <code>NumberFormat</code> also provides methods for determining
which locales have number formats, and what their names are.

<p>
<code>NumberFormat</code> helps you to format and parse numbers for any locale.
Your code can be completely independent of the locale conventions for
decimal points, thousands-separators, or even the particular decimal
digits used, or whether the number format is even decimal.

<p>
To format a number for the current Locale, use one of the factory
class methods:
<blockquote>
<pre>{@code
myString = NumberFormat.getInstance().format(myNumber);
}</pre>
</blockquote>
If you are formatting multiple numbers, it is
more efficient to get the format and use it multiple times so that
the system doesn't have to fetch the information about the local
language and country conventions multiple times.
<blockquote>
<pre>{@code
NumberFormat nf = NumberFormat.getInstance();
for (int i = 0; i < myNumber.length; ++i) {
    output.println(nf.format(myNumber[i]) + \"; \");
}
}</pre>
</blockquote>
To format a number for a different Locale, specify it in the
call to <code>getInstance</code>.
<blockquote>
<pre>{@code
NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH);
}</pre>
</blockquote>
You can also use a <code>NumberFormat</code> to parse numbers:
<blockquote>
<pre>{@code
myNumber = nf.parse(myString);
}</pre>
</blockquote>
Use <code>getInstance</code> or <code>getNumberInstance</code> to get the
normal number format. Use <code>getIntegerInstance</code> to get an
integer number format. Use <code>getCurrencyInstance</code> to get the
currency number format. And use <code>getPercentInstance</code> to get a
format for displaying percentages. With this format, a fraction like
0.53 is displayed as 53%.

<p>
You can also control the display of numbers with such methods as
<code>setMinimumFractionDigits</code>.
If you want even more control over the format or parsing,
or want to give your users more control,
you can try casting the <code>NumberFormat</code> you get from the factory methods
to a <code>DecimalFormat</code>. This will work for the vast majority
of locales; just remember to put it in a <code>try</code> block in case you
encounter an unusual one.

<p>
NumberFormat and DecimalFormat are designed such that some controls
work for formatting and others work for parsing.  The following is
the detailed description for each these control methods,
<p>
setParseIntegerOnly : only affects parsing, e.g.
if true,  \"3456.78\" &rarr; 3456 (and leaves the parse position just after index 6)
if false, \"3456.78\" &rarr; 3456.78 (and leaves the parse position just after index 8)
This is independent of formatting.  If you want to not show a decimal point
where there might be no digits after the decimal point, use
setDecimalSeparatorAlwaysShown.
<p>
setDecimalSeparatorAlwaysShown : only affects formatting, and only where
there might be no digits after the decimal point, such as with a pattern
like \"#,##0.##\", e.g.,
if true,  3456.00 &rarr; \"3,456.\"
if false, 3456.00 &rarr; \"3456\"
This is independent of parsing.  If you want parsing to stop at the decimal
point, use setParseIntegerOnly.

<p>
You can also use forms of the <code>parse</code> and <code>format</code>
methods with <code>ParsePosition</code> and <code>FieldPosition</code> to
allow you to:
<ul>
<li> progressively parse through pieces of a string
<li> align the decimal point and other areas
</ul>
For example, you can align numbers in two ways:
<ol>
<li> If you are using a monospaced font with spacing for alignment,
     you can pass the <code>FieldPosition</code> in your format call, with
     <code>field</code> = <code>INTEGER_FIELD</code>. On output,
     <code>getEndIndex</code> will be set to the offset between the
     last character of the integer and the decimal. Add
     (desiredSpaceCount - getEndIndex) spaces at the front of the string.

<li> If you are using proportional fonts,
     instead of padding with spaces, measure the width
     of the string in pixels from the start to <code>getEndIndex</code>.
     Then move the pen by
     (desiredPixelWidth - widthToAlignmentPoint) before drawing the text.
     It also works where there is no decimal, but possibly additional
     characters at the end, e.g., with parentheses in negative
     numbers: \"(12)\" for -12.
</ol>

<h3><a name=\"synchronization\">Synchronization</a></h3>

<p>
Number formats are generally not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          DecimalFormat
@see          ChoiceFormat
@author       Mark Davis
@author       Helena Shih
"
      classrelation 3407106 // <generalisation>
	relation 3407106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3407106 // <generalisation>
	  b parent class_ref 1045250 // Format
      end

      attribute 1908226 "INTEGER_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Field constant used to construct a FieldPosition object. Signifies that
the position of the integer part of a formatted number should be returned.
@see java.text.FieldPosition

"
      end

      attribute 1908354 "FRACTION_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Field constant used to construct a FieldPosition object. Signifies that
the position of the fraction part of a formatted number should be returned.
@see java.text.FieldPosition

"
      end

      operation 8248322 "NumberFormat"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  (For invocation by subclass constructors, typically
implicit.)
"
      end

      operation 8248450 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 129538 // Object
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats a number and appends the resulting text to the given string
buffer.
The number can be of any subclass of {@link java.lang.Number}.
<p>
This implementation extracts the number's value using
{@link java.lang.Number#longValue()} for all integral type values that
can be converted to <code>long</code> without loss of information,
including <code>BigInteger</code> values with a
{@link java.math.BigInteger#bitLength() bit length} of less than 64,
and {@link java.lang.Number#doubleValue()} for all other types. It
then calls
{@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)}
or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}.
This may result in loss of magnitude information and precision for
<code>BigInteger</code> and <code>BigDecimal</code> values.
@param number     the number to format
@param toAppendTo the <code>StringBuffer</code> to which the formatted
                  text is to be appended
@param pos        On input: an alignment field, if desired.
                  On output: the offsets of the alignment field.
@return           the value passed in as <code>toAppendTo</code>
@exception        IllegalArgumentException if <code>number</code> is
                  null or not an instance of <code>Number</code>.
@exception        NullPointerException if <code>toAppendTo</code> or
                  <code>pos</code> is null
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see              java.text.FieldPosition
"
      end

      operation 8248578 "parseObject"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses text from a string to produce a <code>Number</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
number is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on number parsing.

@param source A <code>String</code>, part of which should be parsed.
@param pos A <code>ParsePosition</code> object with index and error
           index information as described above.
@return A <code>Number</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>pos</code> is null.
"
      end

      operation 8248706 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "number" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.

@param number the double number to format
@return the formatted String
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.Format#format
"
      end

      operation 8248834 "fastFormat"
	package return_type class_ref 128130 // String
	nparams 1
	  param in name "number" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "fastFormat() is supposed to be implemented in concrete subclasses only.
Default implem always returns null.
"
      end

      operation 8248962 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "number" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.

@param number the long number to format
@return the formatted String
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.Format#format
"
      end

      operation 8249090 "format"
	abstract public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "double"
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.

@param number     the double number to format
@param toAppendTo the StringBuffer to which the formatted text is to be
                  appended
@param pos        the field position
@return the formatted StringBuffer
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.Format#format
"
      end

      operation 8249218 "format"
	abstract public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param in name "number" explicit_type "long"
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialization of format.

@param number     the long number to format
@param toAppendTo the StringBuffer to which the formatted text is to be
                  appended
@param pos        the field position
@return the formatted StringBuffer
@exception        ArithmeticException if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
@see java.text.Format#format
"
      end

      operation 8249346 "parse"
	abstract public return_type class_ref 398210 // Number
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "parsePosition" type class_ref 1045506 // ParsePosition
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,
Long.MAX_VALUE] and with no decimals), otherwise a Double.
If IntegerOnly is set, will stop at a decimal
point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop
after the 1).
Does not throw an exception; if no object can be parsed, index is
unchanged!

@param source the String to parse
@param parsePosition the parse position
@return the parsed value
@see java.text.NumberFormat#isParseIntegerOnly
@see java.text.Format#parseObject
"
      end

      operation 8249474 "parse"
	public return_type class_ref 398210 // Number
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses text from the beginning of the given string to produce a number.
The method may not use the entire text of the given string.
<p>
See the {@link #parse(String, ParsePosition)} method for more information
on number parsing.

@param source A <code>String</code> whose beginning should be parsed.
@return A <code>Number</code> parsed from the string.
@exception ParseException if the beginning of the specified string
           cannot be parsed.
"
      end

      operation 8249602 "isParseIntegerOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this format will parse numbers as integers only.
For example in the English locale, with ParseIntegerOnly true, the
string \"1234.\" would be parsed as the integer value 1234 and parsing
would stop at the \".\" character.  Of course, the exact format accepted
by the parse operation is locale dependant and determined by sub-classes
of NumberFormat.

@return {@code true} if numbers should be parsed as integers only;
        {@code false} otherwise
"
      end

      operation 8249730 "setParseIntegerOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether or not numbers should be parsed as integers only.

@param value {@code true} if numbers should be parsed as integers only;
             {@code false} otherwise
@see #isParseIntegerOnly
"
      end

      operation 8249858 "getInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "============== Locale Stuff =====================

Returns a general-purpose number format for the current default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
This is the same as calling
{@link #getNumberInstance() getNumberInstance()}.

@return the {@code NumberFormat} instance for general-purpose number
formatting
"
      end

      operation 8249986 "getInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a general-purpose number format for the specified locale.
This is the same as calling
{@link #getNumberInstance(java.util.Locale) getNumberInstance(inLocale)}.

@param inLocale the desired locale
@return the {@code NumberFormat} instance for general-purpose number
formatting
"
      end

      operation 8250114 "getNumberInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a general-purpose number format for the current default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getNumberInstance(Locale)
    getNumberInstance(Locale.getDefault(Locale.Category.FORMAT))}.

@return the {@code NumberFormat} instance for general-purpose number
formatting
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
"
      end

      operation 8250242 "getNumberInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a general-purpose number format for the specified locale.

@param inLocale the desired locale
@return the {@code NumberFormat} instance for general-purpose number
formatting
"
      end

      operation 8250370 "getIntegerInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an integer number format for the current default
{@link java.util.Locale.Category#FORMAT FORMAT} locale. The
returned number format is configured to round floating point numbers
to the nearest integer using half-even rounding (see {@link
java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,
and to parse only the integer part of an input string (see {@link
#isParseIntegerOnly isParseIntegerOnly}).
<p>This is equivalent to calling
{@link #getIntegerInstance(Locale)
    getIntegerInstance(Locale.getDefault(Locale.Category.FORMAT))}.

@see #getRoundingMode()
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@return a number format for integer values
@since 1.4
"
      end

      operation 8250498 "getIntegerInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an integer number format for the specified locale. The
returned number format is configured to round floating point numbers
to the nearest integer using half-even rounding (see {@link
java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,
and to parse only the integer part of an input string (see {@link
#isParseIntegerOnly isParseIntegerOnly}).

@param inLocale the desired locale
@see #getRoundingMode()
@return a number format for integer values
@since 1.4
"
      end

      operation 8250626 "getCurrencyInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a currency format for the current default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getCurrencyInstance(Locale)
    getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT))}.

@return the {@code NumberFormat} instance for currency formatting
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
"
      end

      operation 8250754 "getCurrencyInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a currency format for the specified locale.

@param inLocale the desired locale
@return the {@code NumberFormat} instance for currency formatting
"
      end

      operation 8250882 "getPercentInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a percentage format for the current default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
<p>This is equivalent to calling
{@link #getPercentInstance(Locale)
    getPercentInstance(Locale.getDefault(Locale.Category.FORMAT))}.

@return the {@code NumberFormat} instance for percentage formatting
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
"
      end

      operation 8251010 "getPercentInstance"
	class_operation public return_type class_ref 1045890 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a percentage format for the specified locale.

@param inLocale the desired locale
@return the {@code NumberFormat} instance for percentage formatting
"
      end

      operation 8251138 "getScientificInstance"
	class_operation package return_type class_ref 1045890 // NumberFormat
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a scientific format for the current default locale.

public"
      end

      operation 8251266 "getScientificInstance"
	class_operation package return_type class_ref 1045890 // NumberFormat
	nparams 1
	  param inout name "inLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a scientific format for the specified locale.

@param inLocale the desired locale

public"
      end

      operation 8251394 "getAvailableLocales"
	class_operation public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>get*Instance</code> methods of this class can return
localized instances.
The returned array represents the union of locales supported by the Java
runtime and by installed
{@link java.text.spi.NumberFormatProvider NumberFormatProvider} implementations.
It must contain at least a <code>Locale</code> instance equal to
{@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>NumberFormat</code> instances are available.
"
      end

      operation 8251522 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Overrides hashCode.
"
      end

      operation 8251650 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Overrides equals.
"
      end

      operation 8251778 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Overrides Cloneable.
"
      end

      operation 8251906 "isGroupingUsed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if grouping is used in this format. For example, in the
English locale, with grouping on, the number 1234567 might be formatted
as \"1,234,567\". The grouping separator as well as the size of each group
is locale dependant and is determined by sub-classes of NumberFormat.

@return {@code true} if grouping is used;
        {@code false} otherwise
@see #setGroupingUsed
"
      end

      operation 8252034 "setGroupingUsed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set whether or not grouping will be used in this format.

@param newValue {@code true} if grouping is used;
                {@code false} otherwise
@see #isGroupingUsed
"
      end

      operation 8252162 "getMaximumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of digits allowed in the integer portion of a
number.

@return the maximum number of digits
@see #setMaximumIntegerDigits
"
      end

      operation 8252290 "setMaximumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of digits allowed in the integer portion of a
number. maximumIntegerDigits must be &ge; minimumIntegerDigits.  If the
new value for maximumIntegerDigits is less than the current value
of minimumIntegerDigits, then minimumIntegerDigits will also be set to
the new value.

@param newValue the maximum number of integer digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMaximumIntegerDigits
"
      end

      operation 8252418 "getMinimumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum number of digits allowed in the integer portion of a
number.

@return the minimum number of digits
@see #setMinimumIntegerDigits
"
      end

      operation 8252546 "setMinimumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of digits allowed in the integer portion of a
number. minimumIntegerDigits must be &le; maximumIntegerDigits.  If the
new value for minimumIntegerDigits exceeds the current value
of maximumIntegerDigits, then maximumIntegerDigits will also be set to
the new value

@param newValue the minimum number of integer digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMinimumIntegerDigits
"
      end

      operation 8252674 "getMaximumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of digits allowed in the fraction portion of a
number.

@return the maximum number of digits.
@see #setMaximumFractionDigits
"
      end

      operation 8252802 "setMaximumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of digits allowed in the fraction portion of a
number. maximumFractionDigits must be &ge; minimumFractionDigits.  If the
new value for maximumFractionDigits is less than the current value
of minimumFractionDigits, then minimumFractionDigits will also be set to
the new value.

@param newValue the maximum number of fraction digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMaximumFractionDigits
"
      end

      operation 8252930 "getMinimumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum number of digits allowed in the fraction portion of a
number.

@return the minimum number of digits
@see #setMinimumFractionDigits
"
      end

      operation 8253058 "setMinimumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of digits allowed in the fraction portion of a
number. minimumFractionDigits must be &le; maximumFractionDigits.  If the
new value for minimumFractionDigits exceeds the current value
of maximumFractionDigits, then maximumIntegerDigits will also be set to
the new value

@param newValue the minimum number of fraction digits to be shown; if
less than zero, then zero is used. The concrete subclass may enforce an
upper limit to this value appropriate to the numeric type being formatted.
@see #getMinimumFractionDigits
"
      end

      operation 8253186 "getCurrency"
	public return_type class_ref 1046018 // Currency
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the currency used by this number format when formatting
currency values. The initial value is derived in a locale dependent
way. The returned value may be null if no valid
currency could be determined and no currency has been set using
{@link #setCurrency(java.util.Currency) setCurrency}.
<p>
The default implementation throws
<code>UnsupportedOperationException</code>.

@return the currency used by this number format, or <code>null</code>
@exception UnsupportedOperationException if the number format class
doesn't implement currency formatting
@since 1.4
"
      end

      operation 8253314 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 1046018 // Currency
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency used by this number format when formatting
currency values. This does not update the minimum or maximum
number of fraction digits used by the number format.
<p>
The default implementation throws
<code>UnsupportedOperationException</code>.

@param currency the new currency to be used by this number format
@exception UnsupportedOperationException if the number format class
doesn't implement currency formatting
@exception NullPointerException if <code>currency</code> is null
@since 1.4
"
      end

      operation 8253442 "getRoundingMode"
	public return_type class_ref 960898 // RoundingMode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@link java.math.RoundingMode} used in this NumberFormat.
The default implementation of this method in NumberFormat
always throws {@link java.lang.UnsupportedOperationException}.
Subclasses which handle different rounding modes should override
this method.

@exception UnsupportedOperationException The default implementation
    always throws this exception
@return The <code>RoundingMode</code> used for this NumberFormat.
@see #setRoundingMode(RoundingMode)
@since 1.6
"
      end

      operation 8253570 "setRoundingMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "roundingMode" type class_ref 960898 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@link java.math.RoundingMode} used in this NumberFormat.
The default implementation of this method in NumberFormat always
throws {@link java.lang.UnsupportedOperationException}.
Subclasses which handle different rounding modes should override
this method.

@exception UnsupportedOperationException The default implementation
    always throws this exception
@exception NullPointerException if <code>roundingMode</code> is null
@param roundingMode The <code>RoundingMode</code> to be used
@see #getRoundingMode()
@since 1.6
"
      end

      operation 8253698 "getInstance"
	class_operation private return_type class_ref 1045890 // NumberFormat
	nparams 2
	  param inout name "desiredLocale" type class_ref 312962 // Locale
	  param in name "choice" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " =======================privates==============================="
      end

      operation 8253826 "getInstance"
	class_operation private return_type class_ref 1045890 // NumberFormat
	nparams 3
	  param inout name "adapter" explicit_type "LocaleProviderAdapter"
	  param inout name "locale" type class_ref 312962 // Locale
	  param in name "choice" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8253954 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "First, read in the default serializable data.

Then, if <code>serialVersionOnStream</code> is less than 1, indicating that
the stream was written by JDK 1.1,
set the <code>int</code> fields such as <code>maximumIntegerDigits</code>
to be equal to the <code>byte</code> fields such as <code>maxIntegerDigits</code>,
since the <code>int</code> fields were not present in JDK 1.1.
Finally, set serialVersionOnStream back to the maximum allowed value so that
default serialization will work properly if this object is streamed out again.

<p>If <code>minimumIntegerDigits</code> is greater than
<code>maximumIntegerDigits</code> or <code>minimumFractionDigits</code>
is greater than <code>maximumFractionDigits</code>, then the stream data
is invalid and this method throws an <code>InvalidObjectException</code>.
In addition, if any of these values is negative, then this method throws
an <code>InvalidObjectException</code>.

@since 1.2
"
      end

      operation 8254082 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write out the default serializable data, after first setting
the <code>byte</code> fields such as <code>maxIntegerDigits</code> to be
equal to the <code>int</code> fields such as <code>maximumIntegerDigits</code>
(or to <code>Byte.MAX_VALUE</code>, whichever is smaller), for compatibility
with the JDK 1.1 version of the stream format.

@since 1.2
"
      end

      attribute 1908482 "NUMBERSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants used by factory methods to specify a style of format.
"
      end

      attribute 1908610 "CURRENCYSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1908738 "PERCENTSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1908866 "SCIENTIFICSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1908994 "INTEGERSTYLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1909122 "groupingUsed"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if the grouping (i.e. thousands) separator is used when
formatting and parsing numbers.

@serial
@see #isGroupingUsed

"
      end

      attribute 1909250 "maxIntegerDigits"
	private explicit_type "byte"
	init_value " 40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of digits allowed in the integer portion of a
number.  <code>maxIntegerDigits</code> must be greater than or equal to
<code>minIntegerDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>maximumIntegerDigits</code> is used instead.
When writing to a stream, <code>maxIntegerDigits</code> is set to
<code>maximumIntegerDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1.

@serial
@see #getMaximumIntegerDigits

"
      end

      attribute 1909378 "minIntegerDigits"
	private explicit_type "byte"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of digits allowed in the integer portion of a
number.  <code>minimumIntegerDigits</code> must be less than or equal to
<code>maximumIntegerDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>minimumIntegerDigits</code> is used instead.
When writing to a stream, <code>minIntegerDigits</code> is set to
<code>minimumIntegerDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1.

@serial
@see #getMinimumIntegerDigits

"
      end

      attribute 1909506 "maxFractionDigits"
	private explicit_type "byte"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of digits allowed in the fractional portion of a
number.  <code>maximumFractionDigits</code> must be greater than or equal to
<code>minimumFractionDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>maximumFractionDigits</code> is used instead.
When writing to a stream, <code>maxFractionDigits</code> is set to
<code>maximumFractionDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1.

@serial
@see #getMaximumFractionDigits

 invariant, >= minFractionDigits"
      end

      attribute 1909634 "minFractionDigits"
	private explicit_type "byte"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of digits allowed in the fractional portion of a
number.  <code>minimumFractionDigits</code> must be less than or equal to
<code>maximumFractionDigits</code>.
<p>
<strong>Note:</strong> This field exists only for serialization
compatibility with JDK 1.1.  In Java platform 2 v1.2 and higher, the new
<code>int</code> field <code>minimumFractionDigits</code> is used instead.
When writing to a stream, <code>minFractionDigits</code> is set to
<code>minimumFractionDigits</code> or <code>Byte.MAX_VALUE</code>,
whichever is smaller.  When reading from a stream, this field is used
only if <code>serialVersionOnStream</code> is less than 1.

@serial
@see #getMinimumFractionDigits

"
      end

      attribute 1909762 "parseIntegerOnly"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if this format will parse numbers as integers only.

@serial
@see #isParseIntegerOnly

"
      end

      attribute 1909890 "maximumIntegerDigits"
	private explicit_type "int"
	init_value " 40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " new fields for 1.2.  byte is too small for integer digits.

The maximum number of digits allowed in the integer portion of a
number.  <code>maximumIntegerDigits</code> must be greater than or equal to
<code>minimumIntegerDigits</code>.

@serial
@since 1.2
@see #getMaximumIntegerDigits

"
      end

      attribute 1910018 "minimumIntegerDigits"
	private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of digits allowed in the integer portion of a
number.  <code>minimumIntegerDigits</code> must be less than or equal to
<code>maximumIntegerDigits</code>.

@serial
@since 1.2
@see #getMinimumIntegerDigits

"
      end

      attribute 1910146 "maximumFractionDigits"
	private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of digits allowed in the fractional portion of a
number.  <code>maximumFractionDigits</code> must be greater than or equal to
<code>minimumFractionDigits</code>.

@serial
@since 1.2
@see #getMaximumFractionDigits

 invariant, >= minFractionDigits"
      end

      attribute 1910274 "minimumFractionDigits"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum number of digits allowed in the fractional portion of a
number.  <code>minimumFractionDigits</code> must be less than or equal to
<code>maximumFractionDigits</code>.

@serial
@since 1.2
@see #getMinimumFractionDigits

"
      end

      attribute 1910402 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1910530 "serialVersionOnStream"
	private explicit_type "int"
	init_value " currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Describes the version of <code>NumberFormat</code> present on the stream.
Possible values are:
<ul>
<li><b>0</b> (or uninitialized): the JDK 1.1 version of the stream format.
    In this version, the <code>int</code> fields such as
    <code>maximumIntegerDigits</code> were not present, and the <code>byte</code>
    fields such as <code>maxIntegerDigits</code> are used instead.

<li><b>1</b>: the 1.2 version of the stream format.  The values of the
    <code>byte</code> fields such as <code>maxIntegerDigits</code> are ignored,
    and the <code>int</code> fields such as <code>maximumIntegerDigits</code>
    are used instead.
</ul>
When streaming out a <code>NumberFormat</code>, the most recent format
(corresponding to the highest allowable <code>serialVersionOnStream</code>)
is always written.

@serial
@since 1.2

"
      end

      attribute 1910658 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -2308460125733713944L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Removed \"implements Cloneable\" clause.  Needs to update serialization
 ID for backward compatibility.
"
      end

      class 1290370 "Field"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end
    end

    class 1046146 "CollationElementIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>CollationElementIterator</code> class is used as an iterator
to walk through each character of an international string. Use the iterator
to return the ordering priority of the positioned character. The ordering
priority of a character, which we refer to as a key, defines how a character
is collated in the given collation object.

<p>
For example, consider the following in Spanish:
<blockquote>
<pre>
\"ca\" &rarr; the first key is key('c') and second key is key('a').
\"cha\" &rarr; the first key is key('ch') and second key is key('a').
</pre>
</blockquote>
And in German,
<blockquote>
<pre>
\"\\u00e4b\" &rarr; the first key is key('a'), the second key is key('e'), and
the third key is key('b').
</pre>
</blockquote>
The key of a character is an integer composed of primary order(short),
secondary order(byte), and tertiary order(byte). Java strictly defines
the size and signedness of its primitive data types. Therefore, the static
functions <code>primaryOrder</code>, <code>secondaryOrder</code>, and
<code>tertiaryOrder</code> return <code>int</code>, <code>short</code>,
and <code>short</code> respectively to ensure the correctness of the key
value.

<p>
Example of the iterator usage,
<blockquote>
<pre>

 String testString = \"This is a test\";
 Collator col = Collator.getInstance();
 if (col instanceof RuleBasedCollator) {
     RuleBasedCollator ruleBasedCollator = (RuleBasedCollator)col;
     CollationElementIterator collationElementIterator = ruleBasedCollator.getCollationElementIterator(testString);
     int primaryOrder = CollationElementIterator.primaryOrder(collationElementIterator.next());
         :
 }
</pre>
</blockquote>

<p>
<code>CollationElementIterator.next</code> returns the collation order
of the next character. A collation order consists of primary order,
secondary order and tertiary order. The data type of the collation
order is <strong>int</strong>. The first 16 bits of a collation order
is its primary order; the next 8 bits is the secondary order and the
last 8 bits is the tertiary order.

<p><b>Note:</b> <code>CollationElementIterator</code> is a part of
<code>RuleBasedCollator</code> implementation. It is only usable
with <code>RuleBasedCollator</code> instances.

@see                Collator
@see                RuleBasedCollator
@author             Helena Shih, Laura Werner, Richard Gillam
"
      attribute 1911426 "NULLORDER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xffffffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Null order which indicates the end of string is reached by the
cursor.

"
      end

      operation 8256642 "CollationElementIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "sourceText" type class_ref 128130 // String
	  param inout name "owner" type class_ref 798978 // RuleBasedCollator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CollationElementIterator constructor.  This takes the source string and
the collation object.  The cursor will walk thru the source string based
on the predefined collation rules.  If the source string is empty,
NULLORDER will be returned on the calls to next().
@param sourceText the source string.
@param owner the collation object.
"
      end

      operation 8256770 "CollationElementIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "sourceText" type class_ref 429314 // CharacterIterator
	  param inout name "owner" type class_ref 798978 // RuleBasedCollator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CollationElementIterator constructor.  This takes the source string and
the collation object.  The cursor will walk thru the source string based
on the predefined collation rules.  If the source string is empty,
NULLORDER will be returned on the calls to next().
@param sourceText the source string.
@param owner the collation object.
"
      end

      operation 8256898 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the cursor to the beginning of the string.  The next call
to next() will return the first collation element in the string.
"
      end

      operation 8257026 "next"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next collation element in the string.  <p>This iterator iterates
over a sequence of collation elements that were built from the string.
Because there isn't necessarily a one-to-one mapping from characters to
collation elements, this doesn't mean the same thing as \"return the
collation element [or ordering priority] of the next character in the
string\".</p>
<p>This function returns the collation element that the iterator is currently
pointing to and then updates the internal pointer to point to the next element.
previous() updates the pointer first and then returns the element.  This
means that when you change direction while iterating (i.e., call next() and
then call previous(), or call previous() and then call next()), you'll get
back the same element twice.</p>

@return the next collation element
"
      end

      operation 8257154 "previous"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the previous collation element in the string.  <p>This iterator iterates
over a sequence of collation elements that were built from the string.
Because there isn't necessarily a one-to-one mapping from characters to
collation elements, this doesn't mean the same thing as \"return the
collation element [or ordering priority] of the previous character in the
string\".</p>
<p>This function updates the iterator's internal pointer to point to the
collation element preceding the one it's currently pointing to and then
returns that element, while next() returns the current element and then
updates the pointer.  This means that when you change direction while
iterating (i.e., call next() and then call previous(), or call previous()
and then call next()), you'll get back the same element twice.</p>

@return the previous collation element
@since 1.2
"
      end

      operation 8257282 "primaryOrder"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the primary component of a collation element.
@param order the collation element
@return the element's primary component
"
      end

      operation 8257410 "secondaryOrder"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the secondary component of a collation element.
@param order the collation element
@return the element's secondary component
"
      end

      operation 8257538 "tertiaryOrder"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the tertiary component of a collation element.
@param order the collation element
@return the element's tertiary component
"
      end

      operation 8257666 "strengthOrder"
	package explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the comparison order in the desired strength.  Ignore the other
 differences.
 @param order The order value
"
      end

      operation 8257794 "setOffset"
	public explicit_return_type "void"
	nparams 1
	  param in name "newOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	
	
	
	comment "Sets the iterator to point to the collation element corresponding to
the specified character (the parameter is a CHARACTER offset in the
original string, not an offset into its corresponding sequence of
collation elements).  The value returned by the next call to next()
will be the collation element corresponding to the specified position
in the text.  If that position is in the middle of a contracting
character sequence, the result of the next call to next() is the
collation element for that sequence.  This means that getOffset()
is not guaranteed to return the same value as was passed to a preceding
call to setOffset().

@param newOffset The new character offset into the original text.
@since 1.2
"
      end

      operation 8257922 "getOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character offset in the original text corresponding to the next
collation element.  (That is, getOffset() returns the position in the text
corresponding to the collation element that will be returned by the next
call to next().)  This value will always be the index of the FIRST character
corresponding to the collation element (a contracting character sequence is
when two or more characters all correspond to the same collation element).
This means if you do setOffset(x) followed immediately by getOffset(), getOffset()
won't necessarily return x.

@return The character offset in the original text corresponding to the collation
element that will be returned by the next call to next().
@since 1.2
"
      end

      operation 8258050 "getMaxExpansion"
	public explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum length of any expansion sequences that end
with the specified comparison order.
@param order a collation order returned by previous or next.
@return the maximum length of any expansion sequences ending
        with the specified order.
@since 1.2
"
      end

      operation 8258178 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new string over which to iterate.

@param source  the new source text
@since 1.2
"
      end

      operation 8258306 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 429314 // CharacterIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new string over which to iterate.

@param source  the new source text.
@since 1.2
"
      end

      operation 8258434 "isThaiPreVowel"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "============================================================
 privates
============================================================

Determine if a character is a Thai vowel (which sorts after
its base consonant).
"
      end

      operation 8258562 "isThaiBaseConsonant"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a character is a Thai base consonant
"
      end

      operation 8258690 "isLaoPreVowel"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a character is a Lao vowel (which sorts after
its base consonant).
"
      end

      operation 8258818 "isLaoBaseConsonant"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a character is a Lao base consonant
"
      end

      operation 8258946 "makeReorderedBuffer"
	private explicit_return_type "int"
	nparams 4
	  param in name "colFirst" explicit_type "int"
	  param in name "lastValue" explicit_type "int"
	  param inout name "lastExpansion" explicit_type "int"
	multiplicity "[]"
	  param inout name "forward" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method produces a buffer which contains the collation
elements for the two characters, with colFirst's values preceding
another character's.  Presumably, the other character precedes colFirst
in logical order (otherwise you wouldn't need this method would you?).
The assumption is that the other char's value(s) have already been
computed.  If this char has a single element it is passed to this
method as lastValue, and lastExpansion is null.  If it has an
expansion it is passed in lastExpansion, and colLastValue is ignored.
"
      end

      operation 8259074 "isIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check if a comparison order is ignorable.
 @return true if a character is ignorable, false otherwise.
"
      end

      operation 8259202 "nextContractChar"
	private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the ordering priority of the next contracting character in the
string.
@param ch the starting character of a contracting character token
@return the next contracting character's ordering.  Returns NULLORDER
if the end of string is reached.
"
      end

      operation 8259330 "prevContractChar"
	private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the ordering priority of the previous contracting character in the
string.
@param ch the starting character of a contracting character token
@return the next contracting character's ordering.  Returns NULLORDER
if the end of string is reached.
"
      end

      attribute 1911554 "UNMAPPEDCHARVALUE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x7FFF0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1911682 "text"
	private explicit_type "NormalizerBase"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1911810 "buffer"
	private explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1911938 "expIndex"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3407490 // key (<unidirectional association>)
	relation 3407490 --->
	  a role_name "key" init_value " new StringBuffer(5)" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3407490 // key (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      attribute 1912066 "swapOrder"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3407618 // ordering (<unidirectional association>)
	relation 3407618 --->
	  a role_name "ordering" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3407618 // ordering (<unidirectional association>)
	  b parent class_ref 1046274 // RBCollationTables
      end

      classrelation 3407746 // owner (<unidirectional association>)
	relation 3407746 --->
	  a role_name "owner" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3407746 // owner (<unidirectional association>)
	  b parent class_ref 798978 // RuleBasedCollator
      end
    end

    class 1046274 "RBCollationTables"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains the static state of a RuleBasedCollator: The various
tables that are used by the collation routines.  Several RuleBasedCollators
can share a single RBCollationTables object, easing memory requirements and
improving performance.
"
      operation 8299650 "RBCollationTables"
	public explicit_return_type ""
	nparams 2
	  param inout name "rules" type class_ref 128130 // String
	  param in name "decmp" explicit_type "int"
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "===========================================================================================
  The following diagram shows the data structure of the RBCollationTables object.
  Suppose we have the rule, where 'o-umlaut' is the unicode char 0x00F6.
  \"a, A < b, B < c, C, ch, cH, Ch, CH < d, D ... < o, O; 'o-umlaut'/E, 'O-umlaut'/E ...\".
  What the rule says is, sorts 'ch'ligatures and 'c' only with tertiary difference and
  sorts 'o-umlaut' as if it's always expanded with 'e'.

 mapping table                     contracting list           expanding list
 (contains all unicode char
  entries)                   ___    ____________       _________________________
  ________                +>|_*_|->|'c' |v('c') |  +>|v('o')|v('umlaut')|v('e')|
 |_\\u0001_|-> v('\\u0001') | |_:_|  |------------|  | |-------------------------|
 |_\\u0002_|-> v('\\u0002') | |_:_|  |'ch'|v('ch')|  | |             :           |
 |____:___|               | |_:_|  |------------|  | |-------------------------|
 |____:___|               |        |'cH'|v('cH')|  | |             :           |
 |__'a'___|-> v('a')      |        |------------|  | |-------------------------|
 |__'b'___|-> v('b')      |        |'Ch'|v('Ch')|  | |             :           |
 |____:___|               |        |------------|  | |-------------------------|
 |____:___|               |        |'CH'|v('CH')|  | |             :           |
 |___'c'__|----------------         ------------   | |-------------------------|
 |____:___|                                        | |             :           |
 |o-umlaut|----------------------------------------  |_________________________|
 |____:___|

 Noted by Helena Shih on 6/23/97
============================================================================================"
      end

      class 1048066 "BuildAPI"
	visibility package 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 8299778 "BuildAPI"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Private constructor.  Prevents anyone else besides RBTableBuilder
from gaining direct access to the internals of this class.
"
	end

	operation 8299906 "fillInTables"
	  package explicit_return_type "void"
	  nparams 8
	    param inout name "f2ary" explicit_type "boolean"
	    param inout name "swap" explicit_type "boolean"
	    param inout name "map" explicit_type "UCompactIntArray"
	    param inout name "cTbl" type class_ref 141442 // Vector
	    param inout name "eTbl" type class_ref 141442 // Vector
	    param inout name "cFlgs" explicit_type "IntHashtable"
	    param in name "mso" explicit_type "short"
	    param in name "mto" explicit_type "short"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<Vector<EntryPair>> ${p3}, ${t4}<int[]> ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This function is used by RBTableBuilder to fill in all the members of this
object.  (Effectively, the builder class functions as a \"friend\" of this
class, but to avoid changing too much of the logic, it carries around \"shadow\"
copies of all these variables until the end of the build process and then
copies them en masse into the actual tables object once all the construction
logic is complete.  This function does that \"copying en masse\".
@param f2ary The value for frenchSec (the French-secondary flag)
@param swap The value for SE Asian swapping rule
@param map The collator's character-mapping table (the value for mapping)
@param cTbl The collator's contracting-character table (the value for contractTable)
@param eTbl The collator's expanding-character table (the value for expandTable)
@param cFlgs The hash table of characters that participate in contracting-
             character sequences (the value for contractFlags)
@param mso The value for maxSecOrder
@param mto The value for maxTerOrder
"
	end
      end

      operation 8300034 "getRules"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the table-based rules for the collation object.
@return returns the collation rules that the table collation object
was created from.
"
      end

      operation 8300162 "isFrenchSec"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8300290 "isSEAsianSwapping"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8300418 "getContractValues"
	package return_type class_ref 141442 // Vector
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<EntryPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ==============================================================
 internal (for use by CollationElementIterator)
 ==============================================================

 Get the entry of hash table of the contracting string in the collation
 table.
 @param ch the starting character of the contracting string
"
      end

      operation 8300546 "getContractValuesImpl"
	private return_type class_ref 141442 // Vector
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<EntryPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "get contract values from contractTable by index"
      end

      operation 8300674 "usedInContractSeq"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this character appears anywhere in a contracting
character sequence.  (Used by CollationElementIterator.setOffset().)
"
      end

      operation 8300802 "getMaxExpansion"
	package explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum length of any expansion sequences that end
with the specified comparison order.

@param order a collation order returned by previous or next.
@return the maximum length of any expansion seuences ending
        with the specified order.

@see CollationElementIterator#getMaxExpansion
"
      end

      operation 8300930 "getExpandValueList"
	package explicit_return_type "int"
	nparams 1
	  param in name "idx" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the entry of hash table of the expanding string in the collation
table.
@param idx the index of the expanding string value list
"
      end

      operation 8301058 "getUnicodeOrder"
	package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the comarison order of a character from the collation table.
@return the comparison order of a character.
"
      end

      operation 8301186 "getMaxSecOrder"
	package explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8301314 "getMaxTerOrder"
	package explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8301442 "reverse"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "result" type class_ref 166018 // StringBuffer
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reverse a string.

shemran/Note: this is used for secondary order value reverse, no
              need to consider supplementary pair."
      end

      operation 8301570 "getEntry"
	class_operation package explicit_return_type "int"
	nparams 3
	  param inout name "list" type class_ref 141442 // Vector
	  param inout name "name" type class_ref 128130 // String
	  param inout name "fwd" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<EntryPair> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1932546 "EXPANDCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x7E000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ==============================================================
 constants
 ==============================================================
sherman/Todo: is the value big enough?????
 Expand index follows"
      end

      attribute 1932674 "CONTRACTCHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x7F000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " contract indexes follow"
      end

      attribute 1932802 "UNMAPPED"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xFFFFFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1932930 "PRIMARYORDERMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffff0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1933058 "SECONDARYORDERMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x0000ff00"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1933186 "TERTIARYORDERMASK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x000000ff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1933314 "PRIMARYDIFFERENCEONLY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffff0000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1933442 "SECONDARYDIFFERENCEONLY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xffffff00"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1933570 "PRIMARYORDERSHIFT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1933698 "SECONDARYORDERSHIFT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3416962 // rules (<unidirectional association>)
	relation 3416962 --->
	  a role_name "rules" init_value " null" private
	    comment " ==============================================================
 instance variables
 ==============================================================
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416962 // rules (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1933826 "frenchSec"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1933954 "seAsianSwapping"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1934082 "mapping"
	private explicit_type "UCompactIntArray"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3417090 // contractTable (<unidirectional association>)
	relation 3417090 --->
	  a role_name "contractTable" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Vector<EntryPair>> ${name}${value};
"
	    classrelation_ref 3417090 // contractTable (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 3417218 // expandTable (<unidirectional association>)
	relation 3417218 --->
	  a role_name "expandTable" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<int[]> ${name}${value};
"
	    classrelation_ref 3417218 // expandTable (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 1934210 "contractFlags"
	private explicit_type "IntHashtable"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1934338 "maxSecOrder"
	private explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1934466 "maxTerOrder"
	private explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1046402 "CollationKey"
      abstract visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>CollationKey</code> represents a <code>String</code> under the
rules of a specific <code>Collator</code> object. Comparing two
<code>CollationKey</code>s returns the relative order of the
<code>String</code>s they represent. Using <code>CollationKey</code>s
to compare <code>String</code>s is generally faster than using
<code>Collator.compare</code>. Thus, when the <code>String</code>s
must be compared multiple times, for example when sorting a list
of <code>String</code>s. It's more efficient to use <code>CollationKey</code>s.

<p>
You can not create <code>CollationKey</code>s directly. Rather,
generate them by calling <code>Collator.getCollationKey</code>.
You can only compare <code>CollationKey</code>s generated from
the same <code>Collator</code> object.

<p>
Generating a <code>CollationKey</code> for a <code>String</code>
involves examining the entire <code>String</code>
and converting it to series of bits that can be compared bitwise. This
allows fast comparisons once the keys are generated. The cost of generating
keys is recouped in faster comparisons when <code>String</code>s need
to be compared many times. On the other hand, the result of a comparison
is often determined by the first couple of characters of each <code>String</code>.
<code>Collator.compare</code> examines only as many characters as it needs which
allows it to be faster when doing single comparisons.
<p>
The following example shows how <code>CollationKey</code>s might be used
to sort a list of <code>String</code>s.
<blockquote>
<pre>{@code
// Create an array of CollationKeys for the Strings to be sorted.
Collator myCollator = Collator.getInstance();
CollationKey[] keys = new CollationKey[3];
keys[0] = myCollator.getCollationKey(\"Tom\");
keys[1] = myCollator.getCollationKey(\"Dick\");
keys[2] = myCollator.getCollationKey(\"Harry\");
sort(keys);

//...

// Inside body of sort routine, compare keys this way
if (keys[i].compareTo(keys[j]) > 0)
   // swap keys[i] and keys[j]

//...

// Finally, when we've returned from sort.
System.out.println(keys[0].getSourceString());
System.out.println(keys[1].getSourceString());
System.out.println(keys[2].getSourceString());
}</pre>
</blockquote>

@see          Collator
@see          RuleBasedCollator
@author       Helena Shih
"
      classrelation 3407874 // <realization>
	relation 3407874 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3407874 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      operation 8259458 "compareTo"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 1046402 // CollationKey
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this CollationKey to the target CollationKey. The collation rules of the
Collator object which created these keys are applied. <strong>Note:</strong>
CollationKeys created by different Collators can not be compared.
@param target target CollationKey
@return Returns an integer value. Value is less than zero if this is less
than target, value is zero if this and target are equal and value is greater than
zero if this is greater than target.
@see java.text.Collator#compare
"
      end

      operation 8259586 "getSourceString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String that this CollationKey represents.

@return the source string of this CollationKey
"
      end

      operation 8259714 "toByteArray"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the CollationKey to a sequence of bits. If two CollationKeys
could be legitimately compared, then one could compare the byte arrays
for each of those keys to obtain the same result.  Byte arrays are
organized most significant byte first.

@return a byte array representation of the CollationKey
"
      end

      operation 8259842 "CollationKey"
	protected explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CollationKey constructor.

@param source the source string
@exception NullPointerException if {@code source} is null
@since 1.6
"
      end

      classrelation 3408002 // source (<unidirectional association>)
	relation 3408002 --->
	  a role_name "source" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3408002 // source (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 1046530 "DateFormatSymbols"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DateFormatSymbols</code> is a public class for encapsulating
localizable date-time formatting data, such as the names of the
months, the names of the days of the week, and the time zone data.
<code>SimpleDateFormat</code> uses
<code>DateFormatSymbols</code> to encapsulate this information.

<p>
Typically you shouldn't use <code>DateFormatSymbols</code> directly.
Rather, you are encouraged to create a date-time formatter with the
<code>DateFormat</code> class's factory methods: <code>getTimeInstance</code>,
<code>getDateInstance</code>, or <code>getDateTimeInstance</code>.
These methods automatically create a <code>DateFormatSymbols</code> for
the formatter so that you don't have to. After the
formatter is created, you may modify its format pattern using the
<code>setPattern</code> method. For more information about
creating formatters using <code>DateFormat</code>'s factory methods,
see {@link DateFormat}.

<p>
If you decide to create a date-time formatter with a specific
format pattern for a specific locale, you can do so with:
<blockquote>
<pre>
new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)).
</pre>
</blockquote>

<p>
<code>DateFormatSymbols</code> objects are cloneable. When you obtain
a <code>DateFormatSymbols</code> object, feel free to modify the
date-time formatting data. For instance, you can replace the localized
date-time format pattern characters with the ones that you feel easy
to remember. Or you can change the representative cities
to your favorite ones.

<p>
New <code>DateFormatSymbols</code> subclasses may be added to support
<code>SimpleDateFormat</code> for date-time formatting for additional locales.

@see          DateFormat
@see          SimpleDateFormat
@see          java.util.SimpleTimeZone
@author       Chen-Lieh Huang
"
      classrelation 3408898 // <realization>
	relation 3408898 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3408898 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3409026 // <realization>
	relation 3409026 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3409026 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8265858 "DateFormatSymbols"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DateFormatSymbols object by loading format data from
resources for the default {@link java.util.Locale.Category#FORMAT FORMAT}
locale. This constructor can only
construct instances for the locales supported by the Java
runtime environment, not for those supported by installed
{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
implementations. For full locale coverage, use the
{@link #getInstance(Locale) getInstance} method.
<p>This is equivalent to calling
{@link #DateFormatSymbols(Locale)
    DateFormatSymbols(Locale.getDefault(Locale.Category.FORMAT))}.
@see #getInstance()
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@exception  java.util.MissingResourceException
            if the resources for the default locale cannot be
            found or cannot be loaded.
"
      end

      operation 8265986 "DateFormatSymbols"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a DateFormatSymbols object by loading format data from
resources for the given locale. This constructor can only
construct instances for the locales supported by the Java
runtime environment, not for those supported by installed
{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
implementations. For full locale coverage, use the
{@link #getInstance(Locale) getInstance} method.

@param locale the desired locale
@see #getInstance(Locale)
@exception  java.util.MissingResourceException
            if the resources for the specified locale cannot be
            found or cannot be loaded.
"
      end

      operation 8266114 "DateFormatSymbols"
	private explicit_return_type ""
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an uninitialized DateFormatSymbols.
"
      end

      classrelation 3409154 // eras (<unidirectional association>)
	relation 3409154 --->
	  a role_name "eras" multiplicity "[]" init_value " null" package
	    comment "
Era strings. For example: \"AD\" and \"BC\".  An array of 2 strings,
indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3409154 // eras (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3409282 // months (<unidirectional association>)
	relation 3409282 --->
	  a role_name "months" multiplicity "[]" init_value " null" package
	    comment "
Month strings. For example: \"January\", \"February\", etc.  An array
of 13 strings (some calendars have 13 months), indexed by
<code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3409282 // months (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3409410 // shortMonths (<unidirectional association>)
	relation 3409410 --->
	  a role_name "shortMonths" multiplicity "[]" init_value " null" package
	    comment "
Short month strings. For example: \"Jan\", \"Feb\", etc.  An array of
13 strings (some calendars have 13 months), indexed by
<code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3409410 // shortMonths (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3409538 // weekdays (<unidirectional association>)
	relation 3409538 --->
	  a role_name "weekdays" multiplicity "[]" init_value " null" package
	    comment "
Weekday strings. For example: \"Sunday\", \"Monday\", etc.  An array
of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc.
The element <code>weekdays[0]</code> is ignored.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3409538 // weekdays (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3409666 // shortWeekdays (<unidirectional association>)
	relation 3409666 --->
	  a role_name "shortWeekdays" multiplicity "[]" init_value " null" package
	    comment "
Short weekday strings. For example: \"Sun\", \"Mon\", etc.  An array
of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc.
The element <code>shortWeekdays[0]</code> is ignored.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3409666 // shortWeekdays (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3409794 // ampms (<unidirectional association>)
	relation 3409794 --->
	  a role_name "ampms" multiplicity "[]" init_value " null" package
	    comment "
AM and PM strings. For example: \"AM\" and \"PM\".  An array of
2 strings, indexed by <code>Calendar.AM</code> and
<code>Calendar.PM</code>.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3409794 // ampms (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3409922 // zoneStrings (<unidirectional association>)
	relation 3409922 --->
	  a role_name "zoneStrings" multiplicity "[][]" init_value " null" package
	    comment "
Localized names of time zones in this locale.  This is a
two-dimensional array of strings of size <em>n</em> by <em>m</em>,
where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
entry containing the localized names for a single <code>TimeZone</code>.
Each such row contains (with <code>i</code> ranging from
0..<em>n</em>-1):
<ul>
<li><code>zoneStrings[i][0]</code> - time zone ID</li>
<li><code>zoneStrings[i][1]</code> - long name of zone in standard
time</li>
<li><code>zoneStrings[i][2]</code> - short name of zone in
standard time</li>
<li><code>zoneStrings[i][3]</code> - long name of zone in daylight
saving time</li>
<li><code>zoneStrings[i][4]</code> - short name of zone in daylight
saving time</li>
</ul>
The zone ID is <em>not</em> localized; it's one of the valid IDs of
the {@link java.util.TimeZone TimeZone} class that are not
<a href=\"../java/util/TimeZone.html#CustomID\">custom IDs</a>.
All other entries are localized names.
@see java.util.TimeZone
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3409922 // zoneStrings (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1916802 "isZoneStringsSet"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that zoneStrings is set externally with setZoneStrings() method.

"
      end

      classrelation 3410050 // patternChars (<unidirectional association>)
	relation 3410050 --->
	  a role_name "patternChars" init_value " \"GyMdkHmsSEDFwWahKzZYuXL\"" class_relation const_relation package
	    comment "
Unlocalized date-time pattern characters. For example: 'y', 'd', etc.
All locales use the same these unlocalized pattern characters.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3410050 // patternChars (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1916930 "PATTERN_ERA"
	class_attribute const_attribute package explicit_type "int"
	init_value "  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " G"
      end

      attribute 1917058 "PATTERN_YEAR"
	class_attribute const_attribute package explicit_type "int"
	init_value "  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " y"
      end

      attribute 1917186 "PATTERN_MONTH"
	class_attribute const_attribute package explicit_type "int"
	init_value "  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " M"
      end

      attribute 1917314 "PATTERN_DAY_OF_MONTH"
	class_attribute const_attribute package explicit_type "int"
	init_value "  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " d"
      end

      attribute 1917442 "PATTERN_HOUR_OF_DAY1"
	class_attribute const_attribute package explicit_type "int"
	init_value "  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " k"
      end

      attribute 1917570 "PATTERN_HOUR_OF_DAY0"
	class_attribute const_attribute package explicit_type "int"
	init_value "  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " H"
      end

      attribute 1917698 "PATTERN_MINUTE"
	class_attribute const_attribute package explicit_type "int"
	init_value "  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " m"
      end

      attribute 1917826 "PATTERN_SECOND"
	class_attribute const_attribute package explicit_type "int"
	init_value "  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " s"
      end

      attribute 1917954 "PATTERN_MILLISECOND"
	class_attribute const_attribute package explicit_type "int"
	init_value "  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " S"
      end

      attribute 1918082 "PATTERN_DAY_OF_WEEK"
	class_attribute const_attribute package explicit_type "int"
	init_value "  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " E"
      end

      attribute 1918210 "PATTERN_DAY_OF_YEAR"
	class_attribute const_attribute package explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " D"
      end

      attribute 1918338 "PATTERN_DAY_OF_WEEK_IN_MONTH"
	class_attribute const_attribute package explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " F"
      end

      attribute 1918466 "PATTERN_WEEK_OF_YEAR"
	class_attribute const_attribute package explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " w"
      end

      attribute 1918594 "PATTERN_WEEK_OF_MONTH"
	class_attribute const_attribute package explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " W"
      end

      attribute 1918722 "PATTERN_AM_PM"
	class_attribute const_attribute package explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " a"
      end

      attribute 1918850 "PATTERN_HOUR1"
	class_attribute const_attribute package explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " h"
      end

      attribute 1918978 "PATTERN_HOUR0"
	class_attribute const_attribute package explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " K"
      end

      attribute 1919106 "PATTERN_ZONE_NAME"
	class_attribute const_attribute package explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " z"
      end

      attribute 1919234 "PATTERN_ZONE_VALUE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Z"
      end

      attribute 1919362 "PATTERN_WEEK_YEAR"
	class_attribute const_attribute package explicit_type "int"
	init_value " 19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Y"
      end

      attribute 1919490 "PATTERN_ISO_DAY_OF_WEEK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " u"
      end

      attribute 1919618 "PATTERN_ISO_ZONE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 21"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " X"
      end

      attribute 1919746 "PATTERN_MONTH_STANDALONE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 22"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " L"
      end

      classrelation 3410178 // localPatternChars (<unidirectional association>)
	relation 3410178 --->
	  a role_name "localPatternChars" init_value " null" package
	    comment "
Localized date-time pattern characters. For example, a locale may
wish to use 'u' rather than 'y' to represent years in its date format
pattern strings.
This string must be exactly 18 characters long, with the index of
the characters described by <code>DateFormat.ERA_FIELD</code>,
<code>DateFormat.YEAR_FIELD</code>, etc.  Thus, if the string were
\"Xz...\", then localized patterns would use 'X' for era and 'z' for year.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3410178 // localPatternChars (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3410306 // locale (<unidirectional association>)
	relation 3410306 --->
	  a role_name "locale" init_value " null" package
	    comment "
The locale which is used for initializing this DateFormatSymbols object.

@since 1.6
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3410306 // locale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      attribute 1919874 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -5987973545549424702L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.1.4 for interoperability 
"
      end

      operation 8266242 "getAvailableLocales"
	class_operation public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all locales for which the
<code>getInstance</code> methods of this class can return
localized instances.
The returned array represents the union of locales supported by the
Java runtime and by installed
{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
implementations.  It must contain at least a <code>Locale</code>
instance equal to {@link java.util.Locale#US Locale.US}.

@return An array of locales for which localized
        <code>DateFormatSymbols</code> instances are available.
@since 1.6
"
      end

      operation 8266370 "getInstance"
	class_operation public return_type class_ref 1046530 // DateFormatSymbols
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>DateFormatSymbols</code> instance for the default
locale.  This method provides access to <code>DateFormatSymbols</code>
instances for locales supported by the Java runtime itself as well
as for those supported by installed
{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
implementations.
<p>This is equivalent to calling {@link #getInstance(Locale)
    getInstance(Locale.getDefault(Locale.Category.FORMAT))}.
@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@return a <code>DateFormatSymbols</code> instance.
@since 1.6
"
      end

      operation 8266498 "getInstance"
	class_operation public return_type class_ref 1046530 // DateFormatSymbols
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>DateFormatSymbols</code> instance for the specified
locale.  This method provides access to <code>DateFormatSymbols</code>
instances for locales supported by the Java runtime itself as well
as for those supported by installed
{@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
implementations.
@param locale the given locale.
@return a <code>DateFormatSymbols</code> instance.
@exception NullPointerException if <code>locale</code> is null
@since 1.6
"
      end

      operation 8266626 "getInstanceRef"
	class_operation package return_type class_ref 1046530 // DateFormatSymbols
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a DateFormatSymbols provided by a provider or found in
the cache. Note that this method returns a cached instance,
not its clone. Therefore, the instance should never be given to
an application.
"
      end

      operation 8266754 "getProviderInstance"
	class_operation private return_type class_ref 1046530 // DateFormatSymbols
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8266882 "getEras"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets era strings. For example: \"AD\" and \"BC\".
@return the era strings.
"
      end

      operation 8267010 "setEras"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newEras" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets era strings. For example: \"AD\" and \"BC\".
@param newEras the new era strings.
"
      end

      operation 8267138 "getMonths"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets month strings. For example: \"January\", \"February\", etc.

<p>If the language requires different forms for formatting and
stand-alone usages, this method returns month names in the
formatting form. For example, the preferred month name for
January in the Czech language is <em>ledna</em> in the
formatting form, while it is <em>leden</em> in the stand-alone
form. This method returns {@code \"ledna\"} in this case. Refer
to the <a href=\"http://unicode.org/reports/tr35/#Calendar_Elements\">
Calendar Elements in the Unicode Locale Data Markup Language
(LDML) specification</a> for more details.

@return the month strings.
"
      end

      operation 8267266 "setMonths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newMonths" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets month strings. For example: \"January\", \"February\", etc.
@param newMonths the new month strings.
"
      end

      operation 8267394 "getShortMonths"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets short month strings. For example: \"Jan\", \"Feb\", etc.

<p>If the language requires different forms for formatting and
stand-alone usages, This method returns short month names in
the formatting form. For example, the preferred abbreviation
for January in the Catalan language is <em>de gen.</em> in the
formatting form, while it is <em>gen.</em> in the stand-alone
form. This method returns {@code \"de gen.\"} in this case. Refer
to the <a href=\"http://unicode.org/reports/tr35/#Calendar_Elements\">
Calendar Elements in the Unicode Locale Data Markup Language
(LDML) specification</a> for more details.

@return the short month strings.
"
      end

      operation 8267522 "setShortMonths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newShortMonths" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets short month strings. For example: \"Jan\", \"Feb\", etc.
@param newShortMonths the new short month strings.
"
      end

      operation 8267650 "getWeekdays"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets weekday strings. For example: \"Sunday\", \"Monday\", etc.
@return the weekday strings. Use <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc. to index the result array.
"
      end

      operation 8267778 "setWeekdays"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newWeekdays" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.
@param newWeekdays the new weekday strings. The array should
be indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc.
"
      end

      operation 8267906 "getShortWeekdays"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets short weekday strings. For example: \"Sun\", \"Mon\", etc.
@return the short weekday strings. Use <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc. to index the result array.
"
      end

      operation 8268034 "setShortWeekdays"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newShortWeekdays" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets short weekday strings. For example: \"Sun\", \"Mon\", etc.
@param newShortWeekdays the new short weekday strings. The array should
be indexed by <code>Calendar.SUNDAY</code>,
<code>Calendar.MONDAY</code>, etc.
"
      end

      operation 8268162 "getAmPmStrings"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets ampm strings. For example: \"AM\" and \"PM\".
@return the ampm strings.
"
      end

      operation 8268290 "setAmPmStrings"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newAmpms" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets ampm strings. For example: \"AM\" and \"PM\".
@param newAmpms the new ampm strings.
"
      end

      operation 8268418 "getZoneStrings"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets time zone strings.  Use of this method is discouraged; use
{@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()}
instead.
<p>
The value returned is a
two-dimensional array of strings of size <em>n</em> by <em>m</em>,
where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
entry containing the localized names for a single <code>TimeZone</code>.
Each such row contains (with <code>i</code> ranging from
0..<em>n</em>-1):
<ul>
<li><code>zoneStrings[i][0]</code> - time zone ID</li>
<li><code>zoneStrings[i][1]</code> - long name of zone in standard
time</li>
<li><code>zoneStrings[i][2]</code> - short name of zone in
standard time</li>
<li><code>zoneStrings[i][3]</code> - long name of zone in daylight
saving time</li>
<li><code>zoneStrings[i][4]</code> - short name of zone in daylight
saving time</li>
</ul>
The zone ID is <em>not</em> localized; it's one of the valid IDs of
the {@link java.util.TimeZone TimeZone} class that are not
<a href=\"../util/TimeZone.html#CustomID\">custom IDs</a>.
All other entries are localized names.  If a zone does not implement
daylight saving time, the daylight saving time names should not be used.
<p>
If {@link #setZoneStrings(String[][]) setZoneStrings} has been called
on this <code>DateFormatSymbols</code> instance, then the strings
provided by that call are returned. Otherwise, the returned array
contains names provided by the Java runtime and by installed
{@link java.util.spi.TimeZoneNameProvider TimeZoneNameProvider}
implementations.

@return the time zone strings.
@see #setZoneStrings(String[][])
"
      end

      operation 8268546 "setZoneStrings"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newZoneStrings" type class_ref 128130 // String
	multiplicity "[][]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[][] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets time zone strings.  The argument must be a
two-dimensional array of strings of size <em>n</em> by <em>m</em>,
where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
entry containing the localized names for a single <code>TimeZone</code>.
Each such row contains (with <code>i</code> ranging from
0..<em>n</em>-1):
<ul>
<li><code>zoneStrings[i][0]</code> - time zone ID</li>
<li><code>zoneStrings[i][1]</code> - long name of zone in standard
time</li>
<li><code>zoneStrings[i][2]</code> - short name of zone in
standard time</li>
<li><code>zoneStrings[i][3]</code> - long name of zone in daylight
saving time</li>
<li><code>zoneStrings[i][4]</code> - short name of zone in daylight
saving time</li>
</ul>
The zone ID is <em>not</em> localized; it's one of the valid IDs of
the {@link java.util.TimeZone TimeZone} class that are not
<a href=\"../util/TimeZone.html#CustomID\">custom IDs</a>.
All other entries are localized names.

@param newZoneStrings the new time zone strings.
@exception IllegalArgumentException if the length of any row in
   <code>newZoneStrings</code> is less than 5
@exception NullPointerException if <code>newZoneStrings</code> is null
@see #getZoneStrings()
"
      end

      operation 8268674 "getLocalPatternChars"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets localized date-time pattern characters. For example: 'u', 't', etc.
@return the localized date-time pattern characters.
"
      end

      operation 8268802 "setLocalPatternChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLocalPatternChars" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets localized date-time pattern characters. For example: 'u', 't', etc.
@param newLocalPatternChars the new localized date-time
pattern characters.
"
      end

      operation 8268930 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides Cloneable
"
      end

      operation 8269058 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override hashCode.
Generates a hash code for the DateFormatSymbols object.
"
      end

      operation 8269186 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Override equals
"
      end

      attribute 1920002 "millisPerHour"
	class_attribute const_attribute package explicit_type "int"
	init_value " 60*60*1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " =======================privates===============================

Useful constant for defining time zone offsets.

"
      end

      classrelation 3410434 // cachedInstances (<unidirectional association>)
	relation 3410434 --->
	  a role_name "cachedInstances" init_value " new ConcurrentHashMap<>(3)" class_relation const_relation private
	    comment "
Cache to hold DateFormatSymbols instances per Locale.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale, SoftReference<DateFormatSymbols>> ${name}${value};
"
	    classrelation_ref 3410434 // cachedInstances (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      attribute 1920130 "lastZoneIndex"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1920258 "cachedHashCode"
	volatile package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Cached hash code

"
      end

      operation 8269314 "initializeData"
	private explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this DateFormatSymbols with the locale data. This method uses
a cached DateFormatSymbols instance for the given locale if available. If
there's no cached one, this method creates an uninitialized instance and
populates its fields from the resource bundle for the locale, and caches
the instance. Note: zoneStrings isn't initialized in this method.
"
      end

      operation 8269442 "toOneBasedArray"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "src" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8269570 "getZoneIndex"
	package explicit_return_type "int"
	nparams 1
	  param inout name "ID" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package private: used by SimpleDateFormat
Gets the index for the given time zone ID to obtain the time zone
strings for formatting. The time zone ID is just for programmatic
lookup. NOT LOCALIZED!!!
@param ID the given time zone ID.
@return the index of the given time zone ID.  Returns -1 if
the given time zone ID can't be located in the DateFormatSymbols object.
@see java.util.SimpleTimeZone
"
      end

      operation 8269698 "getZoneStringsWrapper"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wrapper method to the getZoneStrings(), which is called from inside
the java.text package and not to mutate the returned arrays, so that
it does not need to create a defensive copy.
"
      end

      operation 8269826 "getZoneStringsImpl"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "needsCopy" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8269954 "isSubclassObject"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8270082 "copyMembers"
	private explicit_return_type "void"
	nparams 2
	  param inout name "src" type class_ref 1046530 // DateFormatSymbols
	  param inout name "dst" type class_ref 1046530 // DateFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones all the data members from the source DateFormatSymbols to
the target DateFormatSymbols.

@param src the source DateFormatSymbols.
@param dst the target DateFormatSymbols.
"
      end

      operation 8270210 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write out the default serializable data, after ensuring the
<code>zoneStrings</code> field is initialized in order to make
sure the backward compatibility.

@since 1.6
"
      end
    end

    class 1046658 "DigitList"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Digit List. Private to DecimalFormat.
Handles the transcoding
between numeric values and strings of characters.  Only handles
non-negative numbers.  The division of labor between DigitList and
DecimalFormat is that DigitList handles the radix 10 representation
issues; DecimalFormat handles the locale-specific issues such as
positive/negative, grouping, decimal point, currency, and so on.

A DigitList is really a representation of a floating point value.
It may be an integer value; we assume that a double has sufficient
precision to represent all digits of a long.

The DigitList representation consists of a string of characters,
which are the digits radix 10, from '0' to '9'.  It also has a radix
10 exponent associated with it.  The value represented by a DigitList
object can be computed by mulitplying the fraction f, where 0 <= f < 1,
derived by placing all the digits of the list to the right of the
decimal point, by 10^exponent.

@see  Locale
@see  Format
@see  NumberFormat
@see  DecimalFormat
@see  ChoiceFormat
@see  MessageFormat
@author       Mark Davis, Alan Liu
"
      classrelation 3414402 // <realization>
	relation 3414402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3414402 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1928706 "MAX_COUNT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of significant digits in an IEEE 754 double, that
is, in a Java double.  This must not be increased, or garbage digits
will be generated, and should not be decreased, or accuracy will be lost.

 == Long.toString(Long.MAX_VALUE).length()"
      end

      attribute 1928834 "decimalAt"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "These data members are intentionally public and can be set directly.

The value represented is given by placing the decimal point before
digits[decimalAt].  If decimalAt is < 0, then leading zeros between
the decimal point and the first nonzero digit are implied.  If decimalAt
is > count, then trailing zeros between the digits[count-1] and the
decimal point are implied.

Equivalently, the represented value is given by f * 10^decimalAt.  Here
f is a value 0.1 <= f < 1 arrived at by placing the digits in Digits to
the right of the decimal.

DigitList is normalized, so if it is non-zero, figits[0] is non-zero.  We
don't allow denormalized numbers because our exponent is effectively of
unlimited magnitude.  The count value contains the number of significant
digits present in digits[].

Zero is represented by any DigitList with count == 0 or with each digits[i]
for all i <= count == '0'.

"
      end

      attribute 1928962 "count"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1929090 "digits"
	public explicit_type "char"
	multiplicity "[]"
	init_value " new char[MAX_COUNT]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1929218 "data"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3414530 // roundingMode (<unidirectional association>)
	relation 3414530 --->
	  a role_name "roundingMode" init_value " RoundingMode.HALF_EVEN" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3414530 // roundingMode (<unidirectional association>)
	  b parent class_ref 960898 // RoundingMode
      end

      attribute 1929346 "isNegative"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8285826 "isZero"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the represented number is zero.
"
      end

      operation 8285954 "setRoundingMode"
	package explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 960898 // RoundingMode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the rounding mode
"
      end

      operation 8286082 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears out the digits.
Use before appending them.
Typically, you set a series of digits with append, then at the point
you hit the decimal point, you set myDigitList.decimalAt = myDigitList.count;
then go on appending digits.
"
      end

      operation 8286210 "append"
	public explicit_return_type "void"
	nparams 1
	  param in name "digit" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a digit to the list, extending the list when necessary.
"
      end

      operation 8286338 "getDouble"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to get the value of the digit list
If (count == 0) this throws a NumberFormatException, which
mimics Long.parseLong().
"
      end

      operation 8286466 "getLong"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to get the value of the digit list.
If (count == 0) this returns 0, unlike Long.parseLong().
"
      end

      operation 8286594 "getBigDecimal"
	public return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8286722 "fitsIntoLong"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "isPositive" explicit_type "boolean"
	  param inout name "ignoreNegativeZero" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the number represented by this object can fit into
a long.
@param isPositive true if this number should be regarded as positive
@param ignoreNegativeZero true if -0 should be regarded as identical to
+0; otherwise they are considered distinct
@return true if this number fits into a Java long
"
      end

      operation 8286850 "set"
	package explicit_return_type "void"
	nparams 3
	  param inout name "isNegative" explicit_type "boolean"
	  param in name "source" explicit_type "double"
	  param in name "maximumFractionDigits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given double value.
This method supports fixed-point notation.
@param isNegative Boolean value indicating whether the number is negative.
@param source Value to be converted; must not be Inf, -Inf, Nan,
or a value <= 0.
@param maximumFractionDigits The most fractional digits which should
be converted.
"
      end

      operation 8286978 "set"
	package explicit_return_type "void"
	nparams 4
	  param inout name "isNegative" explicit_type "boolean"
	  param in name "source" explicit_type "double"
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "fixedPoint" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given double value.
This method supports both fixed-point and exponential notation.
@param isNegative Boolean value indicating whether the number is negative.
@param source Value to be converted; must not be Inf, -Inf, Nan,
or a value <= 0.
@param maximumDigits The most fractional or total digits which should
be converted.
@param fixedPoint If true, then maximumDigits is the maximum
fractional digits to be converted.  If false, total digits.
"
      end

      operation 8287106 "set"
	private explicit_return_type "void"
	nparams 6
	  param inout name "isNegative" explicit_type "boolean"
	  param inout name "s" type class_ref 128130 // String
	  param inout name "roundedUp" explicit_type "boolean"
	  param inout name "valueExactAsDecimal" explicit_type "boolean"
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "fixedPoint" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a representation of the form DDDDD, DDDDD.DDDDD, or
DDDDDE+/-DDDDD.
@param roundedUp whether or not rounding up has already happened.
@param valueExactAsDecimal whether or not collected digits provide
an exact decimal representation of the value.
"
      end

      operation 8287234 "round"
	private explicit_return_type "void"
	nparams 3
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "alreadyRounded" explicit_type "boolean"
	  param inout name "valueExactAsDecimal" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Round the representation to the given number of digits.
@param maximumDigits The maximum number of digits to be shown.
@param alreadyRounded whether or not rounding up has already happened.
@param valueExactAsDecimal whether or not collected digits provide
an exact decimal representation of the value.

Upon return, count will be less than or equal to maximumDigits.
"
      end

      operation 8287362 "shouldRoundUp"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "alreadyRounded" explicit_type "boolean"
	  param inout name "valueExactAsDecimal" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if truncating the representation to the given number
of digits will result in an increment to the last digit.  This
method implements the rounding modes defined in the
java.math.RoundingMode class.
[bnf]
@param maximumDigits the number of digits to keep, from 0 to
<code>count-1</code>.  If 0, then all digits are rounded away, and
this method returns true if a one should be generated (e.g., formatting
0.09 with \"#.#\").
@param alreadyRounded whether or not rounding up has already happened.
@param valueExactAsDecimal whether or not collected digits provide
an exact decimal representation of the value.
@exception ArithmeticException if rounding is needed with rounding
           mode being set to RoundingMode.UNNECESSARY
@return true if digit <code>maximumDigits-1</code> should be
incremented
"
      end

      operation 8287490 "set"
	package explicit_return_type "void"
	nparams 2
	  param inout name "isNegative" explicit_type "boolean"
	  param in name "source" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility routine to set the value of the digit list from a long
"
      end

      operation 8287618 "set"
	package explicit_return_type "void"
	nparams 3
	  param inout name "isNegative" explicit_type "boolean"
	  param in name "source" explicit_type "long"
	  param in name "maximumDigits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given long value.
@param isNegative Boolean value indicating whether the number is negative.
@param source Value to be converted; must be >= 0 or ==
Long.MIN_VALUE.
@param maximumDigits The most digits which should be converted.
If maximumDigits is lower than the number of significant digits
in source, the representation will be rounded.  Ignored if <= 0.
"
      end

      operation 8287746 "set"
	package explicit_return_type "void"
	nparams 4
	  param inout name "isNegative" explicit_type "boolean"
	  param inout name "source" type class_ref 145794 // BigDecimal
	  param in name "maximumDigits" explicit_type "int"
	  param inout name "fixedPoint" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given BigDecimal value.
This method supports both fixed-point and exponential notation.
@param isNegative Boolean value indicating whether the number is negative.
@param source Value to be converted; must not be a value <= 0.
@param maximumDigits The most fractional or total digits which should
be converted.
@param fixedPoint If true, then maximumDigits is the maximum
fractional digits to be converted.  If false, total digits.
"
      end

      operation 8287874 "set"
	package explicit_return_type "void"
	nparams 3
	  param inout name "isNegative" explicit_type "boolean"
	  param inout name "source" type class_ref 686338 // BigInteger
	  param in name "maximumDigits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the digit list to a representation of the given BigInteger value.
@param isNegative Boolean value indicating whether the number is negative.
@param source Value to be converted; must be >= 0.
@param maximumDigits The most digits which should be converted.
If maximumDigits is lower than the number of significant digits
in source, the representation will be rounded.  Ignored if <= 0.
"
      end

      operation 8288002 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "equality test between two digit lists.
"
      end

      operation 8288130 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the hash code for the digit list.
"
      end

      operation 8288258 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this object.
@return a clone of this instance.
"
      end

      operation 8288386 "isLongMIN_VALUE"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this DigitList represents Long.MIN_VALUE;
false, otherwise.  This is required so that getLong() works.
"
      end

      operation 8288514 "parseInt"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "str" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "strLen" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1929474 "LONG_MIN_REP"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " \"9223372036854775808\".toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The digit part of -9223372036854775808L
"
      end

      operation 8288642 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3414658 // tempBuffer (<unidirectional association>)
	relation 3414658 --->
	  a role_name "tempBuffer" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3414658 // tempBuffer (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      operation 8288770 "getStringBuffer"
	private return_type class_ref 166018 // StringBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8288898 "extendDigits"
	private explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8289026 "getDataChars"
	private explicit_return_type "char"
	nparams 1
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1047042 "DontCareFieldPosition"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "DontCareFieldPosition defines no-op FieldDelegate. Its
singleton is used for the format methods that don't take a
FieldPosition.
"
      classrelation 3415042 // <generalisation>
	relation 3415042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3415042 // <generalisation>
	  b parent class_ref 637186 // FieldPosition
      end

      classrelation 3415170 // INSTANCE (<unidirectional association>)
	relation 3415170 --->
	  a role_name "INSTANCE" init_value " new DontCareFieldPosition()" class_relation const_relation package
	    comment " The singleton of DontCareFieldPosition.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415170 // INSTANCE (<unidirectional association>)
	  b parent class_ref 637186 // FieldPosition
      end

      classrelation 3415298 // noDelegate (<unidirectional association>)
	relation 3415298 --->
	  a role_name "noDelegate" init_value " new Format.FieldDelegate() {
        public void formatted(Format.Field attr, Object value, int start,
                              int end, StringBuffer buffer) {
        }
        public void formatted(int fieldID, Format.Field attr, Object value,
                              int start, int end, StringBuffer buffer) {
        }
    }" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415298 // noDelegate (<unidirectional association>)
	  b parent class_ref 1045378 // FieldDelegate
      end

      operation 8291330 "DontCareFieldPosition"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8291458 "getFieldDelegate"
	package return_type class_ref 1045378 // FieldDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1047298 "EntryPair"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is used for building contracting character tables.  entryName
is the contracting character name and value is its collation
order.
"
      classrelation 3415426 // entryName (<unidirectional association>)
	relation 3415426 --->
	  a role_name "entryName" public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415426 // entryName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1930114 "value"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1930242 "fwd"
	public explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8291586 "EntryPair"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8291714 "EntryPair"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "value" explicit_type "int"
	  param inout name "fwd" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1047426 "MergeCollation"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class for normalizing and merging patterns for collation.
Patterns are strings of the form <entry>*, where <entry> has the
form:
<pattern> := <entry>*
<entry> := <separator><chars>{\"/\"<extension>}
<separator> := \"=\", \",\", \";\", \"<\", \"&\"
<chars>, and <extension> are both arbitrary strings.
unquoted whitespaces are ignored.
'xxx' can be used to quote characters
One difference from Collator is that & is used to reset to a current
point. Or, in other words, it introduces a new sequence which is to
be added to the old.
That is: \"a < b < c < d\" is the same as \"a < b & b < c & c < d\" OR
\"a < b < d & b < c\"
XXX: make '' be a single quote.
@see PatternEntry
@author             Mark Davis, Helena Shih
"
      operation 8291842 "MergeCollation"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates from a pattern
@exception ParseException If the input pattern is incorrect.
"
      end

      operation 8291970 "getPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "recovers current pattern
"
      end

      operation 8292098 "getPattern"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "withWhiteSpace" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "recovers current pattern.
@param withWhiteSpace puts spacing around the entries, and \\n
before & and <
"
      end

      operation 8292226 "findLastWithNoExtension"
	private return_type class_ref 1047554 // PatternEntry
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8292354 "emitPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "emits the pattern for collation builder.
@return emits the string in the format understable to the collation
builder.
"
      end

      operation 8292482 "emitPattern"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "withWhiteSpace" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "emits the pattern for collation builder.
@param withWhiteSpace puts spacing around the entries, and \\n
before & and <
@return emits the string in the format understable to the collation
builder.
"
      end

      operation 8292610 "setPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "sets the pattern.
"
      end

      operation 8292738 "addPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "adds a pattern to the current one.
@param pattern the new pattern to be added
"
      end

      operation 8292866 "getCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "gets count of separate entries
@return the size of pattern entries
"
      end

      operation 8292994 "getItemAt"
	public return_type class_ref 1047554 // PatternEntry
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "gets count of separate entries
@param index the offset of the desired pattern entry
@return the requested pattern entry
"
      end

      classrelation 3415554 // patterns (<unidirectional association>)
	relation 3415554 --->
	  a role_name "patterns" init_value " new ArrayList<>()" package
	    comment "============================================================
 privates
============================================================
 a list of PatternEntries"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PatternEntry> ${name}${value};
"
	    classrelation_ref 3415554 // patterns (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 3415682 // saveEntry (<unidirectional association>)
	relation 3415682 --->
	  a role_name "saveEntry" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415682 // saveEntry (<unidirectional association>)
	  b parent class_ref 1047554 // PatternEntry
      end

      classrelation 3415810 // lastEntry (<unidirectional association>)
	relation 3415810 --->
	  a role_name "lastEntry" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415810 // lastEntry (<unidirectional association>)
	  b parent class_ref 1047554 // PatternEntry
      end

      classrelation 3415938 // excess (<unidirectional association>)
	relation 3415938 --->
	  a role_name "excess" init_value " new StringBuffer()" private
	    comment " This is really used as a local variable inside fixEntry, but we cache
 it here to avoid newing it up every time the method is called.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415938 // excess (<unidirectional association>)
	  b parent class_ref 166018 // StringBuffer
      end

      attribute 1930370 "statusArray"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[8192]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " When building a MergeCollation, we need to do lots of searches to see
 whether a given entry is already in the table.  Since we're using an
 array, this would make the algorithm O(N*N).  To speed things up, we
 use this bit array to remember whether the array contains any entries
 starting with each Unicode character.  If not, we can avoid the search.
 Using BitSet would make this easier, but it's significantly slower.

"
      end

      attribute 1930498 "BITARRAYMASK"
	const_attribute private explicit_type "byte"
	init_value " (byte)0x1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1930626 "BYTEPOWER"
	const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1930754 "BYTEMASK"
	const_attribute private explicit_type "int"
	init_value " (1 << BYTEPOWER) - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8293122 "fixEntry"
	private explicit_return_type "void"
	nparams 1
	  param inout name "newEntry" type class_ref 1047554 // PatternEntry
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the strength is RESET, then just change the lastEntry to
be the current. (If the current is not in patterns, signal an error).
If not, then remove the current entry, and add it after lastEntry
(which is usually at the end).
"
      end

      operation 8293250 "findLastEntry"
	private explicit_return_type "int"
	nparams 2
	  param inout name "entry" type class_ref 1047554 // PatternEntry
	  param inout name "excessChars" type class_ref 166018 // StringBuffer
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1047554 "PatternEntry"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class for normalizing and merging patterns for collation.
This is to be used with MergeCollation for adding patterns to an
existing rule table.
@see        MergeCollation
@author     Mark Davis, Helena Shih
"
      operation 8297858 "appendQuotedExtension"
	public explicit_return_type "void"
	nparams 1
	  param inout name "toAddTo" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current extension, quoted
"
      end

      operation 8297986 "appendQuotedChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "toAddTo" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current chars, quoted
"
      end

      operation 8298114 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "WARNING this is used for searching in a Vector.
Because Vector.indexOf doesn't take a comparator,
this method is ill-defined and ignores strength.
"
      end

      operation 8298242 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8298370 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For debugging.
"
      end

      operation 8298498 "getStrength"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the strength of the entry.
"
      end

      operation 8298626 "getExtension"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the expanding characters of the entry.
"
      end

      operation 8298754 "getChars"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the core characters of the entry.
"
      end

      operation 8298882 "addToBuffer"
	package explicit_return_type "void"
	nparams 4
	  param inout name "toAddTo" type class_ref 166018 // StringBuffer
	  param inout name "showExtension" explicit_type "boolean"
	  param inout name "showWhiteSpace" explicit_type "boolean"
	  param inout name "lastEntry" type class_ref 1047554 // PatternEntry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ===== privates ====="
      end

      operation 8299010 "appendQuoted"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "chars" type class_ref 128130 // String
	  param inout name "toAddTo" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8299138 "PatternEntry"
	package explicit_return_type ""
	nparams 3
	  param in name "strength" explicit_type "int"
	  param inout name "chars" type class_ref 166018 // StringBuffer
	  param inout name "extension" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "========================================================================
 Parsing a pattern into a list of PatternEntries....
========================================================================"
      end

      class 1047938 "Parser"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3416322 // pattern (<unidirectional association>)
	  relation 3416322 --->
	    a role_name "pattern" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3416322 // pattern (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1932034 "i"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8299266 "Parser"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "pattern" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8299394 "next"
	  public return_type class_ref 1047554 // PatternEntry
	  nparams 0
	  nexceptions 1
	    exception class_ref 372482 // ParseException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3416450 // newChars (<unidirectional association>)
	  relation 3416450 --->
	    a role_name "newChars" init_value " new StringBuffer()" private
	      comment " We re-use these objects in order to improve performance
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3416450 // newChars (<unidirectional association>)
	    b parent class_ref 166018 // StringBuffer
	end

	classrelation 3416578 // newExtension (<unidirectional association>)
	  relation 3416578 --->
	    a role_name "newExtension" init_value " new StringBuffer()" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3416578 // newExtension (<unidirectional association>)
	    b parent class_ref 166018 // StringBuffer
	end
      end

      operation 8299522 "isSpecialChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1932162 "RESET"
	class_attribute const_attribute package explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1932290 "UNSET"
	class_attribute const_attribute package explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1932418 "strength"
	package explicit_type "int"
	init_value " UNSET"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3416706 // chars (<unidirectional association>)
	relation 3416706 --->
	  a role_name "chars" init_value " \"\"" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416706 // chars (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3416834 // extension (<unidirectional association>)
	relation 3416834 --->
	  a role_name "extension" init_value " \"\"" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416834 // extension (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 1047682 "Normalizer"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides the method <code>normalize</code> which transforms Unicode
text into an equivalent composed or decomposed form, allowing for easier
sorting and searching of text.
The <code>normalize</code> method supports the standard normalization forms
described in
<a href=\"http://www.unicode.org/unicode/reports/tr15/tr15-23.html\">
Unicode Standard Annex #15 &mdash; Unicode Normalization Forms</a>.
<p>
Characters with accents or other adornments can be encoded in
several different ways in Unicode.  For example, take the character A-acute.
In Unicode, this can be encoded as a single character (the \"composed\" form):

<pre>
     U+00C1    LATIN CAPITAL LETTER A WITH ACUTE</pre>

or as two separate characters (the \"decomposed\" form):

<pre>
     U+0041    LATIN CAPITAL LETTER A
     U+0301    COMBINING ACUTE ACCENT</pre>

To a user of your program, however, both of these sequences should be
treated as the same \"user-level\" character \"A with acute accent\".  When you
are searching or comparing text, you must ensure that these two sequences are
treated as equivalent.  In addition, you must handle characters with more than
one accent. Sometimes the order of a character's combining accents is
significant, while in other cases accent sequences in different orders are
really equivalent.
<p>
Similarly, the string \"ffi\" can be encoded as three separate letters:

<pre>
     U+0066    LATIN SMALL LETTER F
     U+0066    LATIN SMALL LETTER F
     U+0069    LATIN SMALL LETTER I</pre>

or as the single character

<pre>
     U+FB03    LATIN SMALL LIGATURE FFI</pre>

The ffi ligature is not a distinct semantic character, and strictly speaking
it shouldn't be in Unicode at all, but it was included for compatibility
with existing character sets that already provided it.  The Unicode standard
identifies such characters by giving them \"compatibility\" decompositions
into the corresponding semantic characters.  When sorting and searching, you
will often want to use these mappings.
<p>
The <code>normalize</code> method helps solve these problems by transforming
text into the canonical composed and decomposed forms as shown in the first
example above. In addition, you can have it perform compatibility
decompositions so that you can treat compatibility characters the same as
their equivalents.
Finally, the <code>normalize</code> method rearranges accents into the
proper canonical order, so that you do not have to worry about accent
rearrangement on your own.
<p>
The W3C generally recommends to exchange texts in NFC.
Note also that most legacy character encodings use only precomposed forms and
often do not encode any combining marks by themselves. For conversion to such
character encodings the Unicode text needs to be normalized to NFC.
For more usage examples, see the Unicode Standard Annex.

@since 1.6
"
      operation 8296194 "Normalizer"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1047810 "Form"
	visibility public stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1931010 "NFD"
	  public type class_ref 1047810 // Form
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Canonical decomposition.

"
	end

	attribute 1931138 "NFC"
	  public type class_ref 1047810 // Form
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Canonical decomposition, followed by canonical composition.

"
	end

	attribute 1931266 "NFKD"
	  public type class_ref 1047810 // Form
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Compatibility decomposition.

"
	end

	attribute 1931394 "NFKC"
	  public type class_ref 1047810 // Form
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Compatibility decomposition, followed by canonical composition.
"
	end
      end

      operation 8296322 "normalize"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "src" type class_ref 429442 // CharSequence
	  param inout name "form" type class_ref 1047810 // Form
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Normalize a sequence of char values.
The sequence will be normalized according to the specified normalization
from.
@param src        The sequence of char values to normalize.
@param form       The normalization form; one of
                  {@link java.text.Normalizer.Form#NFC},
                  {@link java.text.Normalizer.Form#NFD},
                  {@link java.text.Normalizer.Form#NFKC},
                  {@link java.text.Normalizer.Form#NFKD}
@return The normalized String
@throws NullPointerException If <code>src</code> or <code>form</code>
is null.
"
      end

      operation 8296450 "isNormalized"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "src" type class_ref 429442 // CharSequence
	  param inout name "form" type class_ref 1047810 // Form
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given sequence of char values is normalized.
@param src        The sequence of char values to be checked.
@param form       The normalization form; one of
                  {@link java.text.Normalizer.Form#NFC},
                  {@link java.text.Normalizer.Form#NFD},
                  {@link java.text.Normalizer.Form#NFKC},
                  {@link java.text.Normalizer.Form#NFKD}
@return true if the sequence of char values is normalized;
false otherwise.
@throws NullPointerException If <code>src</code> or <code>form</code>
is null.
"
      end
    end

    class 1048194 "RBTableBuilder"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains all the code to parse a RuleBasedCollator pattern
and build a RBCollationTables object from it.  A particular instance
of tis class exists only during the actual build process-- once an
RBCollationTables object has been built, the RBTableBuilder object
goes away.  This object carries all of the state which is only needed
during the build process, plus a \"shadow\" copy of all of the state
that will go into the tables object itself.  This object communicates
with RBCollationTables through a separate class, RBCollationTables.BuildAPI,
this is an inner class of RBCollationTables and provides a separate
private API for communication with RBTableBuilder.
This class isn't just an inner class of RBCollationTables itself because
of its large size.  For source-code readability, it seemed better for the
builder to have its own source file.
"
      operation 8301698 "RBTableBuilder"
	public explicit_return_type ""
	nparams 1
	  param inout name "tables" type class_ref 1048066 // BuildAPI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8301826 "build"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param in name "decmp" explicit_type "int"
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a table-based collation object with the given rules.
This is the main function that actually builds the tables and
stores them back in the RBCollationTables object.  It is called
ONLY by the RBCollationTables constructor.
@see RuleBasedCollator#RuleBasedCollator
@exception ParseException If the rules format is incorrect.
"
      end

      operation 8301954 "addComposedChars"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add expanding entries for pre-composed unicode characters so that this
collator can be used reasonably well with decomposition turned off.
"
      end

      operation 8302082 "commit"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up for unmapped values in the expanded character table.

When the expanding character tables are built by addExpandOrder,
it doesn't know what the final ordering of each character
in the expansion will be.  Instead, it just puts the raw character
code into the table, adding CHARINDEX as a flag.  Now that we've
finished building the mapping table, we can go back and look up
that character to see what its real collation order is and
stick that into the expansion table.  That lets us avoid doing
a two-stage lookup later.
"
      end

      operation 8302210 "increment"
	private explicit_return_type "int"
	nparams 2
	  param in name "aStrength" explicit_type "int"
	  param in name "lastValue" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Increment of the last order based on the comparison level.
"
      end

      operation 8302338 "addOrder"
	private explicit_return_type "void"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "anOrder" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a character and its designated order into the collation table.
"
      end

      operation 8302466 "addContractOrder"
	private explicit_return_type "void"
	nparams 2
	  param inout name "groupChars" type class_ref 128130 // String
	  param in name "anOrder" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8302594 "addContractOrder"
	private explicit_return_type "void"
	nparams 3
	  param inout name "groupChars" type class_ref 128130 // String
	  param in name "anOrder" explicit_type "int"
	  param inout name "fwd" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds the contracting string into the collation table.
"
      end

      operation 8302722 "getContractOrder"
	private explicit_return_type "int"
	nparams 1
	  param inout name "groupChars" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the given string has been specified as a contracting string
in this collation table, return its ordering.
Otherwise return UNMAPPED.
"
      end

      operation 8302850 "getCharOrder"
	private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8302978 "getContractValues"
	private return_type class_ref 141442 // Vector
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<EntryPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the entry of hash table of the contracting string in the collation
 table.
 @param ch the starting character of the contracting string
"
      end

      operation 8303106 "getContractValuesImpl"
	private return_type class_ref 141442 // Vector
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<EntryPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8303234 "addExpandOrder"
	private explicit_return_type "void"
	nparams 3
	  param inout name "contractChars" type class_ref 128130 // String
	  param inout name "expandChars" type class_ref 128130 // String
	  param in name "anOrder" explicit_type "int"
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds the expanding string into the collation table.
"
      end

      operation 8303362 "addExpandOrder"
	private explicit_return_type "void"
	nparams 3
	  param in name "ch" explicit_type "int"
	  param inout name "expandChars" type class_ref 128130 // String
	  param in name "anOrder" explicit_type "int"
	nexceptions 1
	  exception class_ref 372482 // ParseException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8303490 "addExpansion"
	private explicit_return_type "int"
	nparams 2
	  param in name "anOrder" explicit_type "int"
	  param inout name "expandChars" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new entry in the expansion table that contains the orderings
for the given characers.  If anOrder is valid, it is added to the
beginning of the expanded list of orders.
"
      end

      operation 8303618 "addContractFlags"
	private explicit_return_type "void"
	nparams 1
	  param inout name "chars" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1934594 "CHARINDEX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x70000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ==============================================================
 constants
 ==============================================================
 need look up in .commit()"
      end

      attribute 1934722 "IGNORABLEMASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x0000ffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1934850 "PRIMARYORDERINCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00010000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1934978 "SECONDARYORDERINCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00000100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1935106 "TERTIARYORDERINCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00000001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1935234 "INITIALTABLESIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1935362 "MAXKEYSIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3417346 // tables (<unidirectional association>)
	relation 3417346 --->
	  a role_name "tables" init_value " null" private
	    comment " ==============================================================
 instance variables
 ==============================================================
 variables used by the build process
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417346 // tables (<unidirectional association>)
	  b parent class_ref 1048066 // BuildAPI
      end

      classrelation 3417474 // mPattern (<unidirectional association>)
	relation 3417474 --->
	  a role_name "mPattern" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417474 // mPattern (<unidirectional association>)
	  b parent class_ref 1047426 // MergeCollation
      end

      attribute 1935490 "isOverIgnore"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1935618 "keyBuf"
	private explicit_type "char"
	multiplicity "[]"
	init_value " new char[MAXKEYSIZE]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1935746 "contractFlags"
	private explicit_type "IntHashtable"
	init_value " new IntHashtable(100)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1935874 "frenchSec"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " \"shadow\" copies of the instance variables in RBCollationTables
 (the values in these variables are copied back into RBCollationTables
 at the end of the build process)
"
      end

      attribute 1936002 "seAsianSwapping"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1936130 "mapping"
	private explicit_type "UCompactIntArray"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3417602 // contractTable (<unidirectional association>)
	relation 3417602 --->
	  a role_name "contractTable" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Vector<EntryPair>> ${name}${value};
"
	    classrelation_ref 3417602 // contractTable (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 3417730 // expandTable (<unidirectional association>)
	relation 3417730 --->
	  a role_name "expandTable" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<int[]> ${name}${value};
"
	    classrelation_ref 3417730 // expandTable (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 1936258 "maxSecOrder"
	private explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1936386 "maxTerOrder"
	private explicit_type "short"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1048322 "RuleBasedCollationKey"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RuleBasedCollationKey is a concrete implementation of CollationKey class.
The RuleBasedCollationKey class is used by the RuleBasedCollator class.
"
      classrelation 3417858 // <generalisation>
	relation 3417858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3417858 // <generalisation>
	  b parent class_ref 1046402 // CollationKey
      end

      operation 8303746 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 1046402 // CollationKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this RuleBasedCollationKey to target. The collation rules of the
Collator object which created these keys are applied. <strong>Note:</strong>
RuleBasedCollationKeys created by different Collators can not be compared.
@param target target RuleBasedCollationKey
@return Returns an integer value. Value is less than zero if this is less
than target, value is zero if this and target are equal and value is greater than
zero if this is greater than target.
@see java.text.Collator#compare
"
      end

      operation 8303874 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "target" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this RuleBasedCollationKey and the target for equality.
The collation rules of the Collator object which created these keys are applied.
<strong>Note:</strong> RuleBasedCollationKeys created by different Collators can not be
compared.
@param target the RuleBasedCollationKey to compare to.
@return Returns true if two objects are equal, false otherwise.
"
      end

      operation 8304002 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a hash code for this RuleBasedCollationKey. The hash value is calculated on the
key itself, not the String from which the key was created.  Thus
if x and y are RuleBasedCollationKeys, then x.hashCode(x) == y.hashCode() if
x.equals(y) is true.  This allows language-sensitive comparison in a hash table.
See the CollatinKey class description for an example.
@return the hash value based on the string's collation order.
"
      end

      operation 8304130 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the RuleBasedCollationKey to a sequence of bits. If two RuleBasedCollationKeys
could be legitimately compared, then one could compare the byte arrays
for each of those keys to obtain the same result.  Byte arrays are
organized most significant byte first.
"
      end

      operation 8304258 "RuleBasedCollationKey"
	package explicit_return_type ""
	nparams 2
	  param inout name "source" type class_ref 128130 // String
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A RuleBasedCollationKey can only be generated by Collator objects.
"
      end

      classrelation 3417986 // key (<unidirectional association>)
	relation 3417986 --->
	  a role_name "key" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417986 // key (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 1048450 "SimpleDateFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>SimpleDateFormat</code> is a concrete class for formatting and
parsing dates in a locale-sensitive manner. It allows for formatting
(date &rarr; text), parsing (text &rarr; date), and normalization.

<p>
<code>SimpleDateFormat</code> allows you to start by choosing
any user-defined patterns for date-time formatting. However, you
are encouraged to create a date-time formatter with either
<code>getTimeInstance</code>, <code>getDateInstance</code>, or
<code>getDateTimeInstance</code> in <code>DateFormat</code>. Each
of these class methods can return a date/time formatter initialized
with a default format pattern. You may modify the format pattern
using the <code>applyPattern</code> methods as desired.
For more information on using these methods, see
{@link DateFormat}.

<h3>Date and Time Patterns</h3>
<p>
Date and time formats are specified by <em>date and time pattern</em>
strings.
Within date and time pattern strings, unquoted letters from
<code>'A'</code> to <code>'Z'</code> and from <code>'a'</code> to
<code>'z'</code> are interpreted as pattern letters representing the
components of a date or time string.
Text can be quoted using single quotes (<code>'</code>) to avoid
interpretation.
<code>\"''\"</code> represents a single quote.
All other characters are not interpreted; they're simply copied into the
output string during formatting or matched against the input string
during parsing.
<p>
The following pattern letters are defined (all other characters from
<code>'A'</code> to <code>'Z'</code> and from <code>'a'</code> to
<code>'z'</code> are reserved):
<blockquote>
<table border=0 cellspacing=3 cellpadding=0 summary=\"Chart shows pattern letters, date/time component, presentation, and examples.\">
    <tr style=\"background-color: rgb(204, 204, 255);\">
        <th align=left>Letter
        <th align=left>Date or Time Component
        <th align=left>Presentation
        <th align=left>Examples
    <tr>
        <td><code>G</code>
        <td>Era designator
        <td><a href=\"#text\">Text</a>
        <td><code>AD</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>y</code>
        <td>Year
        <td><a href=\"#year\">Year</a>
        <td><code>1996</code>; <code>96</code>
    <tr>
        <td><code>Y</code>
        <td>Week year
        <td><a href=\"#year\">Year</a>
        <td><code>2009</code>; <code>09</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>M</code>
        <td>Month in year (context sensitive)
        <td><a href=\"#month\">Month</a>
        <td><code>July</code>; <code>Jul</code>; <code>07</code>
    <tr>
        <td><code>L</code>
        <td>Month in year (standalone form)
        <td><a href=\"#month\">Month</a>
        <td><code>July</code>; <code>Jul</code>; <code>07</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>w</code>
        <td>Week in year
        <td><a href=\"#number\">Number</a>
        <td><code>27</code>
    <tr>
        <td><code>W</code>
        <td>Week in month
        <td><a href=\"#number\">Number</a>
        <td><code>2</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>D</code>
        <td>Day in year
        <td><a href=\"#number\">Number</a>
        <td><code>189</code>
    <tr>
        <td><code>d</code>
        <td>Day in month
        <td><a href=\"#number\">Number</a>
        <td><code>10</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>F</code>
        <td>Day of week in month
        <td><a href=\"#number\">Number</a>
        <td><code>2</code>
    <tr>
        <td><code>E</code>
        <td>Day name in week
        <td><a href=\"#text\">Text</a>
        <td><code>Tuesday</code>; <code>Tue</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>u</code>
        <td>Day number of week (1 = Monday, ..., 7 = Sunday)
        <td><a href=\"#number\">Number</a>
        <td><code>1</code>
    <tr>
        <td><code>a</code>
        <td>Am/pm marker
        <td><a href=\"#text\">Text</a>
        <td><code>PM</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>H</code>
        <td>Hour in day (0-23)
        <td><a href=\"#number\">Number</a>
        <td><code>0</code>
    <tr>
        <td><code>k</code>
        <td>Hour in day (1-24)
        <td><a href=\"#number\">Number</a>
        <td><code>24</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>K</code>
        <td>Hour in am/pm (0-11)
        <td><a href=\"#number\">Number</a>
        <td><code>0</code>
    <tr>
        <td><code>h</code>
        <td>Hour in am/pm (1-12)
        <td><a href=\"#number\">Number</a>
        <td><code>12</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>m</code>
        <td>Minute in hour
        <td><a href=\"#number\">Number</a>
        <td><code>30</code>
    <tr>
        <td><code>s</code>
        <td>Second in minute
        <td><a href=\"#number\">Number</a>
        <td><code>55</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>S</code>
        <td>Millisecond
        <td><a href=\"#number\">Number</a>
        <td><code>978</code>
    <tr>
        <td><code>z</code>
        <td>Time zone
        <td><a href=\"#timezone\">General time zone</a>
        <td><code>Pacific Standard Time</code>; <code>PST</code>; <code>GMT-08:00</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>Z</code>
        <td>Time zone
        <td><a href=\"#rfc822timezone\">RFC 822 time zone</a>
        <td><code>-0800</code>
    <tr>
        <td><code>X</code>
        <td>Time zone
        <td><a href=\"#iso8601timezone\">ISO 8601 time zone</a>
        <td><code>-08</code>; <code>-0800</code>;  <code>-08:00</code>
</table>
</blockquote>
Pattern letters are usually repeated, as their number determines the
exact presentation:
<ul>
<li><strong><a name=\"text\">Text:</a></strong>
    For formatting, if the number of pattern letters is 4 or more,
    the full form is used; otherwise a short or abbreviated form
    is used if available.
    For parsing, both forms are accepted, independent of the number
    of pattern letters.<br><br></li>
<li><strong><a name=\"number\">Number:</a></strong>
    For formatting, the number of pattern letters is the minimum
    number of digits, and shorter numbers are zero-padded to this amount.
    For parsing, the number of pattern letters is ignored unless
    it's needed to separate two adjacent fields.<br><br></li>
<li><strong><a name=\"year\">Year:</a></strong>
    If the formatter's {@link #getCalendar() Calendar} is the Gregorian
    calendar, the following rules are applied.<br>
    <ul>
    <li>For formatting, if the number of pattern letters is 2, the year
        is truncated to 2 digits; otherwise it is interpreted as a
        <a href=\"#number\">number</a>.
    <li>For parsing, if the number of pattern letters is more than 2,
        the year is interpreted literally, regardless of the number of
        digits. So using the pattern \"MM/dd/yyyy\", \"01/11/12\" parses to
        Jan 11, 12 A.D.
    <li>For parsing with the abbreviated year pattern (\"y\" or \"yy\"),
        <code>SimpleDateFormat</code> must interpret the abbreviated year
        relative to some century.  It does this by adjusting dates to be
        within 80 years before and 20 years after the time the <code>SimpleDateFormat</code>
        instance is created. For example, using a pattern of \"MM/dd/yy\" and a
        <code>SimpleDateFormat</code> instance created on Jan 1, 1997,  the string
        \"01/11/12\" would be interpreted as Jan 11, 2012 while the string \"05/04/64\"
        would be interpreted as May 4, 1964.
        During parsing, only strings consisting of exactly two digits, as defined by
        {@link Character#isDigit(char)}, will be parsed into the default century.
        Any other numeric string, such as a one digit string, a three or more digit
        string, or a two digit string that isn't all digits (for example, \"-1\"), is
        interpreted literally.  So \"01/02/3\" or \"01/02/003\" are parsed, using the
        same pattern, as Jan 2, 3 AD.  Likewise, \"01/02/-3\" is parsed as Jan 2, 4 BC.
    </ul>
    Otherwise, calendar system specific forms are applied.
    For both formatting and parsing, if the number of pattern
    letters is 4 or more, a calendar specific {@linkplain
    Calendar#LONG long form} is used. Otherwise, a calendar
    specific {@linkplain Calendar#SHORT short or abbreviated form}
    is used.<br>
    <br>
    If week year {@code 'Y'} is specified and the {@linkplain
    #getCalendar() calendar} doesn't support any <a
    href=\"../util/GregorianCalendar.html#week_year\"> week
    years</a>, the calendar year ({@code 'y'}) is used instead. The
    support of week years can be tested with a call to {@link
    DateFormat#getCalendar() getCalendar()}.{@link
    java.util.Calendar#isWeekDateSupported()
    isWeekDateSupported()}.<br><br></li>
<li><strong><a name=\"month\">Month:</a></strong>
    If the number of pattern letters is 3 or more, the month is
    interpreted as <a href=\"#text\">text</a>; otherwise,
    it is interpreted as a <a href=\"#number\">number</a>.<br>
    <ul>
    <li>Letter <em>M</em> produces context-sensitive month names, such as the
        embedded form of names. If a {@code DateFormatSymbols} has been set
        explicitly with constructor {@link #SimpleDateFormat(String,
        DateFormatSymbols)} or method {@link
        #setDateFormatSymbols(DateFormatSymbols)}, the month names given by
        the {@code DateFormatSymbols} are used.</li>
    <li>Letter <em>L</em> produces the standalone form of month names.</li>
    </ul>
    <br></li>
<li><strong><a name=\"timezone\">General time zone:</a></strong>
    Time zones are interpreted as <a href=\"#text\">text</a> if they have
    names. For time zones representing a GMT offset value, the
    following syntax is used:
    <pre>
    <a name=\"GMTOffsetTimeZone\"><i>GMTOffsetTimeZone:</i></a>
            <code>GMT</code> <i>Sign</i> <i>Hours</i> <code>:</code> <i>Minutes</i>
    <i>Sign:</i> one of
            <code>+ -</code>
    <i>Hours:</i>
            <i>Digit</i>
            <i>Digit</i> <i>Digit</i>
    <i>Minutes:</i>
            <i>Digit</i> <i>Digit</i>
    <i>Digit:</i> one of
            <code>0 1 2 3 4 5 6 7 8 9</code></pre>
    <i>Hours</i> must be between 0 and 23, and <i>Minutes</i> must be between
    00 and 59. The format is locale independent and digits must be taken
    from the Basic Latin block of the Unicode standard.
    <p>For parsing, <a href=\"#rfc822timezone\">RFC 822 time zones</a> are also
    accepted.<br><br></li>
<li><strong><a name=\"rfc822timezone\">RFC 822 time zone:</a></strong>
    For formatting, the RFC 822 4-digit time zone format is used:

    <pre>
    <i>RFC822TimeZone:</i>
            <i>Sign</i> <i>TwoDigitHours</i> <i>Minutes</i>
    <i>TwoDigitHours:</i>
            <i>Digit Digit</i></pre>
    <i>TwoDigitHours</i> must be between 00 and 23. Other definitions
    are as for <a href=\"#timezone\">general time zones</a>.

    <p>For parsing, <a href=\"#timezone\">general time zones</a> are also
    accepted.
<li><strong><a name=\"iso8601timezone\">ISO 8601 Time zone:</a></strong>
    The number of pattern letters designates the format for both formatting
    and parsing as follows:
    <pre>
    <i>ISO8601TimeZone:</i>
            <i>OneLetterISO8601TimeZone</i>
            <i>TwoLetterISO8601TimeZone</i>
            <i>ThreeLetterISO8601TimeZone</i>
    <i>OneLetterISO8601TimeZone:</i>
            <i>Sign</i> <i>TwoDigitHours</i>
            {@code Z}
    <i>TwoLetterISO8601TimeZone:</i>
            <i>Sign</i> <i>TwoDigitHours</i> <i>Minutes</i>
            {@code Z}
    <i>ThreeLetterISO8601TimeZone:</i>
            <i>Sign</i> <i>TwoDigitHours</i> {@code :} <i>Minutes</i>
            {@code Z}</pre>
    Other definitions are as for <a href=\"#timezone\">general time zones</a> or
    <a href=\"#rfc822timezone\">RFC 822 time zones</a>.

    <p>For formatting, if the offset value from GMT is 0, {@code \"Z\"} is
    produced. If the number of pattern letters is 1, any fraction of an hour
    is ignored. For example, if the pattern is {@code \"X\"} and the time zone is
    {@code \"GMT+05:30\"}, {@code \"+05\"} is produced.

    <p>For parsing, {@code \"Z\"} is parsed as the UTC time zone designator.
    <a href=\"#timezone\">General time zones</a> are <em>not</em> accepted.

    <p>If the number of pattern letters is 4 or more, {@link
    IllegalArgumentException} is thrown when constructing a {@code
    SimpleDateFormat} or {@linkplain #applyPattern(String) applying a
    pattern}.
</ul>
<code>SimpleDateFormat</code> also supports <em>localized date and time
pattern</em> strings. In these strings, the pattern letters described above
may be replaced with other, locale dependent, pattern letters.
<code>SimpleDateFormat</code> does not deal with the localization of text
other than the pattern letters; that's up to the client of the class.

<h4>Examples</h4>

The following examples show how date and time patterns are interpreted in
the U.S. locale. The given date and time are 2001-07-04 12:08:56 local time
in the U.S. Pacific Time time zone.
<blockquote>
<table border=0 cellspacing=3 cellpadding=0 summary=\"Examples of date and time patterns interpreted in the U.S. locale\">
    <tr style=\"background-color: rgb(204, 204, 255);\">
        <th align=left>Date and Time Pattern
        <th align=left>Result
    <tr>
        <td><code>\"yyyy.MM.dd G 'at' HH:mm:ss z\"</code>
        <td><code>2001.07.04 AD at 12:08:56 PDT</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>\"EEE, MMM d, ''yy\"</code>
        <td><code>Wed, Jul 4, '01</code>
    <tr>
        <td><code>\"h:mm a\"</code>
        <td><code>12:08 PM</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>\"hh 'o''clock' a, zzzz\"</code>
        <td><code>12 o'clock PM, Pacific Daylight Time</code>
    <tr>
        <td><code>\"K:mm a, z\"</code>
        <td><code>0:08 PM, PDT</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>\"yyyyy.MMMMM.dd GGG hh:mm aaa\"</code>
        <td><code>02001.July.04 AD 12:08 PM</code>
    <tr>
        <td><code>\"EEE, d MMM yyyy HH:mm:ss Z\"</code>
        <td><code>Wed, 4 Jul 2001 12:08:56 -0700</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>\"yyMMddHHmmssZ\"</code>
        <td><code>010704120856-0700</code>
    <tr>
        <td><code>\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"</code>
        <td><code>2001-07-04T12:08:56.235-0700</code>
    <tr style=\"background-color: rgb(238, 238, 255);\">
        <td><code>\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"</code>
        <td><code>2001-07-04T12:08:56.235-07:00</code>
    <tr>
        <td><code>\"YYYY-'W'ww-u\"</code>
        <td><code>2001-W27-3</code>
</table>
</blockquote>

<h4><a name=\"synchronization\">Synchronization</a></h4>

<p>
Date formats are not synchronized.
It is recommended to create separate format instances for each thread.
If multiple threads access a format concurrently, it must be synchronized
externally.

@see          <a href=\"https://docs.oracle.com/javase/tutorial/i18n/format/simpleDateFormat.html\">Java Tutorial</a>
@see          java.util.Calendar
@see          java.util.TimeZone
@see          DateFormat
@see          DateFormatSymbols
@author       Mark Davis, Chen-Lieh Huang, Alan Liu
"
      classrelation 3419010 // <generalisation>
	relation 3419010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3419010 // <generalisation>
	  b parent class_ref 473090 // DateFormat
      end

      attribute 1937154 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4774881970558875024L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the official serial version ID which says cryptically
 which version we're compatible with
"
      end

      attribute 1937282 "currentSerialVersion"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the internal serial version which says which version was written
 - 0 (default) for version up to JDK 1.1.3
 - 1 for version from JDK 1.1.4, which includes a new field
"
      end

      attribute 1937410 "serialVersionOnStream"
	private explicit_type "int"
	init_value " currentSerialVersion"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version of the serialized data on the stream.  Possible values:
<ul>
<li><b>0</b> or not present on stream: JDK 1.1.3.  This version
has no <code>defaultCenturyStart</code> on stream.
<li><b>1</b> JDK 1.1.4 or later.  This version adds
<code>defaultCenturyStart</code>.
</ul>
When streaming out this class, the most recent format
and the highest allowable <code>serialVersionOnStream</code>
is written.
@serial
@since JDK1.1.4

"
      end

      classrelation 3419138 // pattern (<unidirectional association>)
	relation 3419138 --->
	  a role_name "pattern" private
	    comment "
The pattern string of this formatter.  This is always a non-localized
pattern.  May not be null.  See class documentation for details.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419138 // pattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3419266 // originalNumberFormat (<unidirectional association>)
	relation 3419266 --->
	  a role_name "originalNumberFormat" private
	    comment "
Saved numberFormat and pattern.
@see SimpleDateFormat#checkNegativeNumberExpression

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419266 // originalNumberFormat (<unidirectional association>)
	  b parent class_ref 1045890 // NumberFormat
      end

      classrelation 3419394 // originalNumberPattern (<unidirectional association>)
	relation 3419394 --->
	  a role_name "originalNumberPattern" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419394 // originalNumberPattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1937538 "minusSign"
	private explicit_type "char"
	init_value " '-'"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minus sign to be used with format and parse.

"
      end

      attribute 1937666 "hasFollowingMinusSign"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True when a negative sign follows a number.
(True as default in Arabic.)

"
      end

      attribute 1937794 "forceStandaloneForm"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if standalone form needs to be used.

"
      end

      attribute 1937922 "compiledPattern"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The compiled pattern.

"
      end

      attribute 1938050 "TAG_QUOTE_ASCII_CHAR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tags for the compiled pattern.

"
      end

      attribute 1938178 "TAG_QUOTE_CHARS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 101"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1938306 "zeroDigit"
	private explicit_type "char"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Locale dependent digit zero.
@see #zeroPaddingNumber
@see java.text.DecimalFormatSymbols#getZeroDigit

"
      end

      classrelation 3419522 // formatData (<unidirectional association>)
	relation 3419522 --->
	  a role_name "formatData" private
	    comment "
The symbols used by this formatter for week names, month names,
etc.  May not be null.
@serial
@see java.text.DateFormatSymbols

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419522 // formatData (<unidirectional association>)
	  b parent class_ref 1046530 // DateFormatSymbols
      end

      classrelation 3419650 // defaultCenturyStart (<unidirectional association>)
	relation 3419650 --->
	  a role_name "defaultCenturyStart" private
	    comment "
We map dates with two-digit years into the century starting at
<code>defaultCenturyStart</code>, which may be any date.  May
not be null.
@serial
@since JDK1.1.4

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419650 // defaultCenturyStart (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      attribute 1938434 "defaultCenturyStartYear"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1938562 "MILLIS_PER_MINUTE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 60 * 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3419778 // GMT (<unidirectional association>)
	relation 3419778 --->
	  a role_name "GMT" init_value " \"GMT\"" class_relation const_relation private
	    comment " For time zones that have no names, use strings GMT+minutes and
 GMT-minutes. For instance, in France the time zone is GMT+60.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419778 // GMT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3419906 // cachedNumberFormatData (<unidirectional association>)
	relation 3419906 --->
	  a role_name "cachedNumberFormatData" init_value " new ConcurrentHashMap<>(3)" class_relation const_relation private
	    comment "
Cache NumberFormat instances with Locale key.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale, NumberFormat> ${name}${value};
"
	    classrelation_ref 3419906 // cachedNumberFormatData (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3420034 // locale (<unidirectional association>)
	relation 3420034 --->
	  a role_name "locale" private
	    comment "
The Locale used to instantiate this
<code>SimpleDateFormat</code>. The value may be null if this object
has been created by an older <code>SimpleDateFormat</code> and
deserialized.

@serial
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3420034 // locale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      attribute 1938690 "useDateFormatSymbols"
	package explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether this <code>SimpleDateFormat</code> should use
the DateFormatSymbols. If true, the format and parse methods
use the DateFormatSymbols values. If false, the format and
parse methods call Calendar.getDisplayName or
Calendar.getDisplayNames.

"
      end

      operation 8305922 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the default pattern and
date format symbols for the default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
<b>Note:</b> This constructor may not support all locales.
For full coverage, use the factory methods in the {@link DateFormat}
class.
"
      end

      operation 8306050 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the given pattern and
the default date format symbols for the default
{@link java.util.Locale.Category#FORMAT FORMAT} locale.
<b>Note:</b> This constructor may not support all locales.
For full coverage, use the factory methods in the {@link DateFormat}
class.
<p>This is equivalent to calling
{@link #SimpleDateFormat(String, Locale)
    SimpleDateFormat(pattern, Locale.getDefault(Locale.Category.FORMAT))}.

@see java.util.Locale#getDefault(java.util.Locale.Category)
@see java.util.Locale.Category#FORMAT
@param pattern the pattern describing the date and time format
@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid
"
      end

      operation 8306178 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the given pattern and
the default date format symbols for the given locale.
<b>Note:</b> This constructor may not support all locales.
For full coverage, use the factory methods in the {@link DateFormat}
class.

@param pattern the pattern describing the date and time format
@param locale the locale whose date format symbols should be used
@exception NullPointerException if the given pattern or locale is null
@exception IllegalArgumentException if the given pattern is invalid
"
      end

      operation 8306306 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "formatSymbols" type class_ref 1046530 // DateFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SimpleDateFormat</code> using the given pattern and
date format symbols.

@param pattern the pattern describing the date and time format
@param formatSymbols the date format symbols to be used for formatting
@exception NullPointerException if the given pattern or formatSymbols is null
@exception IllegalArgumentException if the given pattern is invalid
"
      end

      operation 8306434 "initialize"
	private explicit_return_type "void"
	nparams 1
	  param inout name "loc" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize compiledPattern and numberFormat fields "
      end

      operation 8306562 "initializeCalendar"
	private explicit_return_type "void"
	nparams 1
	  param inout name "loc" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8306690 "compile"
	private explicit_return_type "char"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the compiled form of the given pattern. The syntax of
the compiled pattern is:
<blockquote>
CompiledPattern:
    EntryList
EntryList:
    Entry
    EntryList Entry
Entry:
    TagField
    TagField data
TagField:
    Tag Length
    TaggedData
Tag:
    pattern_char_index
    TAG_QUOTE_CHARS
Length:
    short_length
    long_length
TaggedData:
    TAG_QUOTE_ASCII_CHAR ascii_char

</blockquote>

where `short_length' is an 8-bit unsigned integer between 0 and
254.  `long_length' is a sequence of an 8-bit integer 255 and a
32-bit signed integer value which is split into upper and lower
16-bit fields in two char's. `pattern_char_index' is an 8-bit
integer between 0 and 18. `ascii_char' is an 7-bit ASCII
character value. `data' depends on its Tag value.
<p>
If Length is short_length, Tag and short_length are packed in a
single char, as illustrated below.
<blockquote>
    char[0] = (Tag << 8) | short_length;
</blockquote>

If Length is long_length, Tag and 255 are packed in the first
char and a 32-bit integer, as illustrated below.
<blockquote>
    char[0] = (Tag << 8) | 255;
    char[1] = (char) (long_length >>> 16);
    char[2] = (char) (long_length & 0xffff);
</blockquote>
<p>
If Tag is a pattern_char_index, its Length is the number of
pattern characters. For example, if the given pattern is
\"yyyy\", Tag is 1 and Length is 4, followed by no data.
<p>
If Tag is TAG_QUOTE_CHARS, its Length is the number of char's
following the TagField. For example, if the given pattern is
\"'o''clock'\", Length is 7 followed by a char sequence of
<code>o&nbs;'&nbs;c&nbs;l&nbs;o&nbs;c&nbs;k</code>.
<p>
TAG_QUOTE_ASCII_CHAR is a special tag and has an ASCII
character in place of Length. For example, if the given pattern
is \"'o'\", the TaggedData entry is
<code>((TAG_QUOTE_ASCII_CHAR&nbs;<<&nbs;8)&nbs;|&nbs;'o')</code>.

@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid
"
      end

      operation 8306818 "encode"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "tag" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "buffer" type class_ref 173058 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes the given tag and length and puts encoded char(s) into buffer.
"
      end

      operation 8306946 "initializeDefaultCentury"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize the fields we use to disambiguate ambiguous years. Separate
so we can call it from readObject().
"
      end

      operation 8307074 "parseAmbiguousDatesAsAfter"
	private explicit_return_type "void"
	nparams 1
	  param inout name "startDate" type class_ref 521474 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Define one-century window into which to disambiguate dates using
two-digit years.
"
      end

      operation 8307202 "set2DigitYearStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "startDate" type class_ref 521474 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the 100-year period 2-digit years will be interpreted as being in
to begin on the date the user specifies.

@param startDate During parsing, two digit years will be placed in the range
<code>startDate</code> to <code>startDate + 100 years</code>.
@see #get2DigitYearStart
@since 1.2
"
      end

      operation 8307330 "get2DigitYearStart"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the beginning date of the 100-year period 2-digit years are interpreted
as being within.

@return the start of the 100-year period into which two digit years are
parsed
@see #set2DigitYearStart
@since 1.2
"
      end

      operation 8307458 "format"
	public return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 521474 // Date
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "pos" type class_ref 637186 // FieldPosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats the given <code>Date</code> into a date/time string and appends
the result to the given <code>StringBuffer</code>.

@param date the date-time value to be formatted into a date-time string.
@param toAppendTo where the new date-time text is to be appended.
@param pos the formatting position. On input: an alignment field,
if desired. On output: the offsets of the alignment field.
@return the formatted date-time string.
@exception NullPointerException if the given {@code date} is {@code null}.
"
      end

      operation 8307586 "format"
	private return_type class_ref 166018 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 521474 // Date
	  param inout name "toAppendTo" type class_ref 166018 // StringBuffer
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called from Format after creating a FieldDelegate"
      end

      operation 8307714 "formatToCharacterIterator"
	public return_type class_ref 472962 // AttributedCharacterIterator
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats an Object producing an <code>AttributedCharacterIterator</code>.
You can use the returned <code>AttributedCharacterIterator</code>
to build the resulting String, as well as to determine information
about the resulting String.
<p>
Each attribute key of the AttributedCharacterIterator will be of type
<code>DateFormat.Field</code>, with the corresponding attribute value
being the same as the attribute key.

@exception NullPointerException if obj is null.
@exception IllegalArgumentException if the Format cannot format the
           given object, or if the Format's pattern string is invalid.
@param obj The object to format
@return AttributedCharacterIterator describing the formatted value.
@since 1.4
"
      end

      attribute 1938818 "PATTERN_INDEX_TO_CALENDAR_FIELD"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        Calendar.ERA,
        Calendar.YEAR,
        Calendar.MONTH,
        Calendar.DATE,
        Calendar.HOUR_OF_DAY,
        Calendar.HOUR_OF_DAY,
        Calendar.MINUTE,
        Calendar.SECOND,
        Calendar.MILLISECOND,
        Calendar.DAY_OF_WEEK,
        Calendar.DAY_OF_YEAR,
        Calendar.DAY_OF_WEEK_IN_MONTH,
        Calendar.WEEK_OF_YEAR,
        Calendar.WEEK_OF_MONTH,
        Calendar.AM_PM,
        Calendar.HOUR,
        Calendar.HOUR,
        Calendar.ZONE_OFFSET,
        Calendar.ZONE_OFFSET,
        CalendarBuilder.WEEK_YEAR,         // Pseudo Calendar field
        CalendarBuilder.ISO_DAY_OF_WEEK,   // Pseudo Calendar field
        Calendar.ZONE_OFFSET,
        Calendar.MONTH
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Map index into pattern character string to Calendar field number
"
      end

      attribute 1938946 "PATTERN_INDEX_TO_DATE_FORMAT_FIELD"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        DateFormat.ERA_FIELD,
        DateFormat.YEAR_FIELD,
        DateFormat.MONTH_FIELD,
        DateFormat.DATE_FIELD,
        DateFormat.HOUR_OF_DAY1_FIELD,
        DateFormat.HOUR_OF_DAY0_FIELD,
        DateFormat.MINUTE_FIELD,
        DateFormat.SECOND_FIELD,
        DateFormat.MILLISECOND_FIELD,
        DateFormat.DAY_OF_WEEK_FIELD,
        DateFormat.DAY_OF_YEAR_FIELD,
        DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD,
        DateFormat.WEEK_OF_YEAR_FIELD,
        DateFormat.WEEK_OF_MONTH_FIELD,
        DateFormat.AM_PM_FIELD,
        DateFormat.HOUR1_FIELD,
        DateFormat.HOUR0_FIELD,
        DateFormat.TIMEZONE_FIELD,
        DateFormat.TIMEZONE_FIELD,
        DateFormat.YEAR_FIELD,
        DateFormat.DAY_OF_WEEK_FIELD,
        DateFormat.TIMEZONE_FIELD,
        DateFormat.MONTH_FIELD
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Map index into pattern character string to DateFormat field number
"
      end

      classrelation 3420162 // PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID (<unidirectional association>)
	relation 3420162 --->
	  a role_name "PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID" multiplicity "[]" init_value " {
        Field.ERA,
        Field.YEAR,
        Field.MONTH,
        Field.DAY_OF_MONTH,
        Field.HOUR_OF_DAY1,
        Field.HOUR_OF_DAY0,
        Field.MINUTE,
        Field.SECOND,
        Field.MILLISECOND,
        Field.DAY_OF_WEEK,
        Field.DAY_OF_YEAR,
        Field.DAY_OF_WEEK_IN_MONTH,
        Field.WEEK_OF_YEAR,
        Field.WEEK_OF_MONTH,
        Field.AM_PM,
        Field.HOUR1,
        Field.HOUR0,
        Field.TIME_ZONE,
        Field.TIME_ZONE,
        Field.YEAR,
        Field.DAY_OF_WEEK,
        Field.TIME_ZONE,
        Field.MONTH
    }" class_relation const_relation private
	    comment " Maps from DecimalFormatSymbols index to Field constant
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3420162 // PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID (<unidirectional association>)
	  b parent class_ref 1045634 // Field
      end

      operation 8307842 "subFormat"
	private explicit_return_type "void"
	nparams 5
	  param in name "patternCharIndex" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "delegate" type class_ref 1045378 // FieldDelegate
	  param inout name "buffer" type class_ref 166018 // StringBuffer
	  param inout name "useDateFormatSymbols" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private member function that does the real date/time formatting.
"
      end

      operation 8307970 "zeroPaddingNumber"
	private explicit_return_type "void"
	nparams 4
	  param in name "value" explicit_type "int"
	  param in name "minDigits" explicit_type "int"
	  param in name "maxDigits" explicit_type "int"
	  param inout name "buffer" type class_ref 166018 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a number with the specified minimum and maximum number of digits.
"
      end

      operation 8308098 "parse"
	public return_type class_ref 521474 // Date
	nparams 2
	  param inout name "text" type class_ref 128130 // String
	  param inout name "pos" type class_ref 1045506 // ParsePosition
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses text from a string to produce a <code>Date</code>.
<p>
The method attempts to parse text starting at the index given by
<code>pos</code>.
If parsing succeeds, then the index of <code>pos</code> is updated
to the index after the last character used (parsing does not necessarily
use all characters up to the end of the string), and the parsed
date is returned. The updated <code>pos</code> can be used to
indicate the starting point for the next call to this method.
If an error occurs, then the index of <code>pos</code> is not
changed, the error index of <code>pos</code> is set to the index of
the character where the error occurred, and null is returned.

<p>This parsing operation uses the {@link DateFormat#calendar
calendar} to produce a {@code Date}. All of the {@code
calendar}'s date-time fields are {@linkplain Calendar#clear()
cleared} before parsing, and the {@code calendar}'s default
values of the date-time fields are used for any missing
date-time information. For example, the year value of the
parsed {@code Date} is 1970 with {@link GregorianCalendar} if
no year value is given from the parsing operation.  The {@code
TimeZone} value may be overwritten, depending on the given
pattern and the time zone value in {@code text}. Any {@code
TimeZone} value that has previously been set by a call to
{@link #setTimeZone(java.util.TimeZone) setTimeZone} may need
to be restored for further operations.

@param text  A <code>String</code>, part of which should be parsed.
@param pos   A <code>ParsePosition</code> object with index and error
             index information as described above.
@return A <code>Date</code> parsed from the string. In case of
        error, returns null.
@exception NullPointerException if <code>text</code> or <code>pos</code> is null.
"
      end

      operation 8308226 "matchString"
	private explicit_return_type "int"
	nparams 5
	  param inout name "text" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param in name "field" explicit_type "int"
	  param inout name "data" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "calb" type class_ref 1044994 // CalendarBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private code-size reduction function used by subParse.
@param text the time text being parsed.
@param start where to start parsing.
@param field the date field being parsed.
@param data the string array to parsed.
@return the new start position if matching succeeded; a negative number
indicating matching failure, otherwise.
"
      end

      operation 8308354 "matchString"
	private explicit_return_type "int"
	nparams 5
	  param inout name "text" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param in name "field" explicit_type "int"
	  param inout name "data" type class_ref 130178 // Map
	  param inout name "calb" type class_ref 1044994 // CalendarBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String,Integer> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the same thing as matchString(String, int, int,
String[]). This method takes a Map<String, Integer> instead of
String[].
"
      end

      operation 8308482 "matchZoneString"
	private explicit_return_type "int"
	nparams 3
	  param inout name "text" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param inout name "zoneNames" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8308610 "matchDSTString"
	private explicit_return_type "boolean"
	nparams 5
	  param inout name "text" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param in name "zoneIndex" explicit_type "int"
	  param in name "standardIndex" explicit_type "int"
	  param inout name "zoneStrings" type class_ref 128130 // String
	multiplicity "[][]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[][] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8308738 "subParseZoneString"
	private explicit_return_type "int"
	nparams 3
	  param inout name "text" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param inout name "calb" type class_ref 1044994 // CalendarBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "find time zone 'text' matched zoneStrings and set to internal
calendar.
"
      end

      operation 8308866 "subParseNumericZone"
	private explicit_return_type "int"
	nparams 6
	  param inout name "text" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param in name "sign" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "colon" explicit_type "boolean"
	  param inout name "calb" type class_ref 1044994 // CalendarBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses numeric forms of time zone offset, such as \"hh:mm\", and
sets calb to the parsed value.

@param text  the text to be parsed
@param start the character position to start parsing
@param sign  1: positive; -1: negative
@param count 0: 'Z' or \"GMT+hh:mm\" parsing; 1 - 3: the number of 'X's
@param colon true - colon required between hh and mm; false - no colon required
@param calb  a CalendarBuilder in which the parsed value is stored
@return updated parsed position, or its negative value to indicate a parsing error
"
      end

      operation 8308994 "isDigit"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8309122 "subParse"
	private explicit_return_type "int"
	nparams 9
	  param inout name "text" type class_ref 128130 // String
	  param in name "start" explicit_type "int"
	  param in name "patternCharIndex" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "obeyCount" explicit_type "boolean"
	  param inout name "ambiguousYear" explicit_type "boolean"
	multiplicity "[]"
	  param inout name "origPos" type class_ref 1045506 // ParsePosition
	  param inout name "useFollowingMinusSignAsDelimiter" explicit_type "boolean"
	  param inout name "calb" type class_ref 1044994 // CalendarBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private member function that converts the parsed date strings into
timeFields. Returns -start (for ParsePosition) if failed.
@param text the time text to be parsed.
@param start where to start parsing.
@param patternCharIndex the index of the pattern character.
@param count the count of a pattern character.
@param obeyCount if true, then the next field directly abuts this one,
and we should use the count to know when to stop parsing.
@param ambiguousYear return parameter; upon return, if ambiguousYear[0]
is true, then a two-digit year was parsed and may need to be readjusted.
@param origPos origPos.errorIndex is used to return an error index
at which a parse error occurred, if matching failure occurs.
@return the new start position if matching succeeded; -1 indicating
matching failure, otherwise. In case matching failure occurred,
an error index is set to origPos.errorIndex.
"
      end

      operation 8309250 "useDateFormatSymbols"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the DateFormatSymbols has been set explicitly or locale
is null.
"
      end

      operation 8309378 "translatePattern"
	private return_type class_ref 128130 // String
	nparams 3
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "from" type class_ref 128130 // String
	  param inout name "to" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a pattern, mapping each character in the from string to the
corresponding character in the to string.

@exception IllegalArgumentException if the given pattern is invalid
"
      end

      operation 8309506 "toPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pattern string describing this date format.

@return a pattern string describing this date format.
"
      end

      operation 8309634 "toLocalizedPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a localized pattern string describing this date format.

@return a localized pattern string describing this date format.
"
      end

      operation 8309762 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the given pattern string to this date format.

@param pattern the new date and time pattern for this date format
@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid
"
      end

      operation 8309890 "applyPatternImpl"
	private explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310018 "applyLocalizedPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the given localized pattern string to this date format.

@param pattern a String to be mapped to the new date and time format
       pattern for this format
@exception NullPointerException if the given pattern is null
@exception IllegalArgumentException if the given pattern is invalid
"
      end

      operation 8310146 "getDateFormatSymbols"
	public return_type class_ref 1046530 // DateFormatSymbols
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a copy of the date and time format symbols of this date format.

@return the date and time format symbols of this date format
@see #setDateFormatSymbols
"
      end

      operation 8310274 "setDateFormatSymbols"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormatSymbols" type class_ref 1046530 // DateFormatSymbols
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the date and time format symbols of this date format.

@param newFormatSymbols the new date and time format symbols
@exception NullPointerException if the given newFormatSymbols is null
@see #getDateFormatSymbols
"
      end

      operation 8310402 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Creates a copy of this <code>SimpleDateFormat</code>. This also
clones the format's date format symbols.

@return a clone of this <code>SimpleDateFormat</code>
"
      end

      operation 8310530 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash code value for this <code>SimpleDateFormat</code> object.

@return the hash code value for this <code>SimpleDateFormat</code> object.
"
      end

      operation 8310658 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the given object with this <code>SimpleDateFormat</code> for
equality.

@return true if the given object is equal to this
<code>SimpleDateFormat</code>
"
      end

      attribute 1939074 "REST_OF_STYLES"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        Calendar.SHORT_STANDALONE, Calendar.LONG_FORMAT, Calendar.LONG_STANDALONE,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8310786 "getDisplayNamesMap"
	private return_type class_ref 130178 // Map
	nparams 2
	  param in name "field" explicit_type "int"
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Integer> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8310914 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "After reading an object from the input stream, the format
pattern in the object is verified.
<p>
@exception InvalidObjectException if the pattern is invalid
"
      end

      operation 8311042 "checkNegativeNumberExpression"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Analyze the negative subpattern of DecimalFormat and set/update values
as necessary.
"
      end
    end

    class 1048578 "StringCharacterIterator"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>StringCharacterIterator</code> implements the
<code>CharacterIterator</code> protocol for a <code>String</code>.
The <code>StringCharacterIterator</code> class iterates over the
entire <code>String</code>.

@see CharacterIterator
"
      classrelation 3420290 // <realization>
	relation 3420290 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3420290 // <realization>
	  b parent class_ref 429314 // CharacterIterator
      end

      classrelation 3420418 // text (<unidirectional association>)
	relation 3420418 --->
	  a role_name "text" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3420418 // text (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1939202 "begin"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1939330 "end"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1939458 "pos"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " invariant: begin <= pos <= end
"
      end

      operation 8311170 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an iterator with an initial index of 0.

@param text the {@code String} to be iterated over
"
      end

      operation 8311298 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 2
	  param inout name "text" type class_ref 128130 // String
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an iterator with the specified initial index.

@param  text   The String to be iterated over
@param  pos    Initial iterator position
"
      end

      operation 8311426 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 4
	  param inout name "text" type class_ref 128130 // String
	  param in name "begin" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an iterator over the given range of the given string, with the
index set at the specified position.

@param  text   The String to be iterated over
@param  begin  Index of the first character
@param  end    Index of the character following the last character
@param  pos    Initial iterator position
"
      end

      operation 8311554 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset this iterator to point to a new string.  This package-visible
method is used by other java.text classes that want to avoid allocating
new StringCharacterIterator objects every time their setText method
is called.

@param  text   The String to be iterated over
@since 1.2
"
      end

      operation 8311682 "first"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.first() for String.
@see CharacterIterator#first
"
      end

      operation 8311810 "last"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.last() for String.
@see CharacterIterator#last
"
      end

      operation 8311938 "setIndex"
	public explicit_return_type "char"
	nparams 1
	  param in name "p" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.setIndex() for String.
@see CharacterIterator#setIndex
"
      end

      operation 8312066 "current"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.current() for String.
@see CharacterIterator#current
"
      end

      operation 8312194 "next"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.next() for String.
@see CharacterIterator#next
"
      end

      operation 8312322 "previous"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.previous() for String.
@see CharacterIterator#previous
"
      end

      operation 8312450 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.getBeginIndex() for String.
@see CharacterIterator#getBeginIndex
"
      end

      operation 8312578 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.getEndIndex() for String.
@see CharacterIterator#getEndIndex
"
      end

      operation 8312706 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements CharacterIterator.getIndex() for String.
@see CharacterIterator#getIndex
"
      end

      operation 8312834 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the equality of two StringCharacterIterator objects.
@param obj the StringCharacterIterator object to be compared with.
@return true if the given obj is the same as this
StringCharacterIterator object; false otherwise.
"
      end

      operation 8312962 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a hashcode for this iterator.
@return A hash code
"
      end

      operation 8313090 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this iterator.
@return A copy of this
"
      end
    end
  end

  deploymentview 144514 "text"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 297602 "CharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 429314 // CharacterIterator
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 641026 "AttributedCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 472962 // AttributedCharacterIterator
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 777218 "Annotation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1044226 // Annotation
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 777346 "AttributedString"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.text.AttributedCharacterIterator.Attribute;
${definition}"
      associated_elems
	class_ref 1044354 // AttributedString
	class_ref 1044738 // AttributeEntry
      end
      comment "Copyright (c) 1997, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 777474 "Bidi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.text.bidi.BidiBase;
${definition}"
      associated_elems
	class_ref 890114 // Bidi
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright IBM Corp. 1999-2003 - All Rights Reserved

The original version of this source code and documentation is
copyrighted and owned by IBM. These materials are provided
under terms of a License Agreement between IBM and Sun.
This technology is protected by multiple US and International
patents. This notice and attribution to IBM may not be removed.
"
    end

    artifact 777602 "BreakIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.SoftReference;
import java.text.spi.BreakIteratorProvider;
import java.util.Locale;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleServiceProviderPool;
${definition}"
      associated_elems
	class_ref 877058 // BreakIterator
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 777730 "CalendarBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Calendar;
import static java.util.GregorianCalendar.*;
${definition}"
      associated_elems
	class_ref 1044994 // CalendarBuilder
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 777858 "Format"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 1045250 // Format
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 777986 "CharacterIteratorFieldDelegate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
${definition}"
      associated_elems
	class_ref 1045122 // CharacterIteratorFieldDelegate
      end
      comment "Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 778114 "ChoiceFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 1045762 // ChoiceFormat
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 778242 "CollationElementIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.Character;
import java.util.Vector;
import sun.text.CollatorUtilities;
import sun.text.normalizer.NormalizerBase;
${definition}"
      associated_elems
	class_ref 1046146 // CollationElementIterator
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 778370 "CollationKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1046402 // CollationKey
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 778498 "Collator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.SoftReference;
import java.text.spi.CollatorProvider;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleServiceProviderPool;
${definition}"
      associated_elems
	class_ref 589826 // Collator
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996-1998 -  All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 778626 "DateFormatSymbols"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.ref.SoftReference;
import java.text.spi.DateFormatSymbolsProvider;
import java.util.Arrays;
import java.util.Locale;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleServiceProviderPool;
import sun.util.locale.provider.ResourceBundleBasedAdapter;
import sun.util.locale.provider.TimeZoneNameUtility;
${definition}"
      associated_elems
	class_ref 1046530 // DateFormatSymbols
      end
      comment "Copyright (c) 1996, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 778754 "DecimalFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.text.spi.NumberFormatProvider;
import java.util.ArrayList;
import java.util.Currency;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.ResourceBundleBasedAdapter;
${definition}"
      associated_elems
	class_ref 636546 // DecimalFormat
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 778882 "DecimalFormatSymbols"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.text.spi.DecimalFormatSymbolsProvider;
import java.util.ArrayList;
import java.util.Currency;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleServiceProviderPool;
import sun.util.locale.provider.ResourceBundleBasedAdapter;
${definition}"
      associated_elems
	class_ref 636418 // DecimalFormatSymbols
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 779010 "DigitList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import sun.misc.FloatingDecimal;
${definition}"
      associated_elems
	class_ref 1046658 // DigitList
      end
      comment "Copyright (c) 1996, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 779138 "FieldPosition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 637186 // FieldPosition
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 779266 "DontCareFieldPosition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1047042 // DontCareFieldPosition
      end
      comment "Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 779394 "EntryPair"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1047298 // EntryPair
      end
      comment "Copyright (c) 1996, 1998, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 779522 "MergeCollation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
${definition}"
      associated_elems
	class_ref 1047426 // MergeCollation
      end
      comment "Copyright (c) 1996, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996, 1997 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 779650 "Normalizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.text.normalizer.NormalizerBase;
import sun.text.normalizer.NormalizerImpl;
${definition}"
      associated_elems
	class_ref 1047682 // Normalizer
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















******************************************************************************
(C) Copyright IBM Corp. 1996-2005 - All Rights Reserved                     *
                                                                            *
The original version of this source code and documentation is copyrighted   *
and owned by IBM, These materials are provided under terms of a License     *
Agreement between IBM and Sun. This technology is protected by multiple     *
US and International patents. This notice and attribution to IBM may not    *
to removed.                                                                 *
******************************************************************************
"
    end

    artifact 779778 "ParseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 372482 // ParseException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 779906 "ParsePosition"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1045506 // ParsePosition
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 780034 "PatternEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.Character;
${definition}"
      associated_elems
	class_ref 1047554 // PatternEntry
      end
      comment "Copyright (c) 1996, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996, 1997 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 780162 "RBCollationTables"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import sun.text.UCompactIntArray;
import sun.text.IntHashtable;
${definition}"
      associated_elems
	class_ref 1046274 // RBCollationTables
      end
      comment "Copyright (c) 1999, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 780290 "RBTableBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import sun.text.UCompactIntArray;
import sun.text.IntHashtable;
import sun.text.ComposedCharIter;
import sun.text.CollatorUtilities;
import sun.text.normalizer.NormalizerImpl;
${definition}"
      associated_elems
	class_ref 1048194 // RBTableBuilder
      end
      comment "Copyright (c) 1999, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 780418 "RuleBasedCollationKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1048322 // RuleBasedCollationKey
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 780546 "RuleBasedCollator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.Normalizer;
import java.util.Vector;
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 798978 // RuleBasedCollator
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 780674 "SimpleDateFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.util.calendar.CalendarUtils;
import sun.util.calendar.ZoneInfoFile;
import sun.util.locale.provider.LocaleProviderAdapter;
import static java.text.DateFormatSymbols.*;
${definition}"
      associated_elems
	class_ref 1048450 // SimpleDateFormat
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996 - All Rights Reserved
(C) Copyright IBM Corp. 1996-1998 - All Rights Reserved

  The original version of this source code and documentation is copyrighted
and owned by Taligent, Inc., a wholly-owned subsidiary of IBM. These
materials are provided under terms of a License Agreement between Taligent
and Sun. This technology is protected by multiple US and International
patents. This notice and attribution to Taligent may not be removed.
  Taligent is a registered trademark of Taligent, Inc.

"
    end

    artifact 780802 "StringCharacterIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1048578 // StringCharacterIterator
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















(C) Copyright Taligent, Inc. 1996, 1997 - All Rights Reserved
(C) Copyright IBM Corp. 1996 - 1998 - All Rights Reserved

The original version of this source code and documentation
is copyrighted and owned by Taligent, Inc., a wholly-owned
subsidiary of IBM. These materials are provided under terms
of a License Agreement between Taligent and Sun. This technology
is protected by multiple US and International patents.

This notice and attribution to Taligent may not be removed.
Taligent is a registered trademark of Taligent, Inc.

"
    end
  end

  package_ref 183298 // spi
end
