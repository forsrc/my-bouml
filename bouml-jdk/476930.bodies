class JFrame
!!!10621826.java!!!	JFrame()
        super();
        frameInit();
!!!10621954.java!!!	JFrame(inout gc : GraphicsConfiguration)
        super(gc);
        frameInit();
!!!10622082.java!!!	JFrame(inout title : String)
        super(title);
        frameInit();
!!!10622210.java!!!	JFrame(inout title : String, inout gc : GraphicsConfiguration)
        super(title, gc);
        frameInit();
!!!10622338.java!!!	frameInit() : void
        enableEvents(AWTEvent.KEY_EVENT_MASK | AWTEvent.WINDOW_EVENT_MASK);
        setLocale( JComponent.getDefaultLocale() );
        setRootPane(createRootPane());
        setBackground(UIManager.getColor("control"));
        setRootPaneCheckingEnabled(true);
        if (JFrame.isDefaultLookAndFeelDecorated()) {
            boolean supportsWindowDecorations =
            UIManager.getLookAndFeel().getSupportsWindowDecorations();
            if (supportsWindowDecorations) {
                setUndecorated(true);
                getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
            }
        }
        sun.awt.SunToolkit.checkAndSetPolicy(this);
!!!10622466.java!!!	createRootPane() : JRootPane
        JRootPane rp = new JRootPane();
        // NOTE: this uses setOpaque vs LookAndFeel.installProperty as there
        // is NO reason for the RootPane not to be opaque. For painting to
        // work the contentPane must be opaque, therefor the RootPane can
        // also be opaque.
        rp.setOpaque(true);
        return rp;
!!!10622594.java!!!	processWindowEvent(in e : WindowEvent) : void
        super.processWindowEvent(e);

        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            switch (defaultCloseOperation) {
                case HIDE_ON_CLOSE:
                    setVisible(false);
                    break;
                case DISPOSE_ON_CLOSE:
                    dispose();
                    break;
                case EXIT_ON_CLOSE:
                    // This needs to match the checkExit call in
                    // setDefaultCloseOperation
                    System.exit(0);
                    break;
                case DO_NOTHING_ON_CLOSE:
                default:
            }
        }
!!!10622722.java!!!	setDefaultCloseOperation(in operation : int) : void
        if (operation != DO_NOTHING_ON_CLOSE &&
            operation != HIDE_ON_CLOSE &&
            operation != DISPOSE_ON_CLOSE &&
            operation != EXIT_ON_CLOSE) {
            throw new IllegalArgumentException("defaultCloseOperation must be one of: DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE, DISPOSE_ON_CLOSE, or EXIT_ON_CLOSE");
        }

        if (operation == EXIT_ON_CLOSE) {
            SecurityManager security = System.getSecurityManager();
            if (security != null) {
                security.checkExit(0);
            }
        }
        if (this.defaultCloseOperation != operation) {
            int oldValue = this.defaultCloseOperation;
            this.defaultCloseOperation = operation;
            firePropertyChange("defaultCloseOperation", oldValue, operation);
        }
!!!10622850.java!!!	getDefaultCloseOperation() : int
        return defaultCloseOperation;
!!!10622978.java!!!	setTransferHandler(inout newHandler : TransferHandler) : void
        TransferHandler oldHandler = transferHandler;
        transferHandler = newHandler;
        SwingUtilities.installSwingDropTargetAsNecessary(this, transferHandler);
        firePropertyChange("transferHandler", oldHandler, newHandler);
!!!10623106.java!!!	getTransferHandler() : TransferHandler
        return transferHandler;
!!!10623234.java!!!	update(inout g : Graphics) : void
        paint(g);
!!!10623362.java!!!	setJMenuBar(inout menubar : JMenuBar) : void
        getRootPane().setMenuBar(menubar);
!!!10623490.java!!!	getJMenuBar() : JMenuBar
        return getRootPane().getMenuBar();
!!!10623618.java!!!	isRootPaneCheckingEnabled() : boolean
        return rootPaneCheckingEnabled;
!!!10623746.java!!!	setRootPaneCheckingEnabled(inout enabled : boolean) : void
        rootPaneCheckingEnabled = enabled;
!!!10623874.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().add(comp, constraints, index);
        }
        else {
            super.addImpl(comp, constraints, index);
        }
!!!10624002.java!!!	remove(inout comp : Component) : void
        if (comp == rootPane) {
            super.remove(comp);
        } else {
            getContentPane().remove(comp);
        }
!!!10624130.java!!!	setLayout(inout manager : LayoutManager) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().setLayout(manager);
        }
        else {
            super.setLayout(manager);
        }
!!!10624258.java!!!	getRootPane() : JRootPane
        return rootPane;
!!!10624386.java!!!	setRootPane(inout root : JRootPane) : void
        if(rootPane != null) {
            remove(rootPane);
        }
        rootPane = root;
        if(rootPane != null) {
            boolean checkingEnabled = isRootPaneCheckingEnabled();
            try {
                setRootPaneCheckingEnabled(false);
                add(rootPane, BorderLayout.CENTER);
            }
            finally {
                setRootPaneCheckingEnabled(checkingEnabled);
            }
        }
!!!10624514.java!!!	setIconImage(inout image : Image) : void
        super.setIconImage(image);
!!!10624642.java!!!	getContentPane() : Container
        return getRootPane().getContentPane();
!!!10624770.java!!!	setContentPane(inout contentPane : Container) : void
        getRootPane().setContentPane(contentPane);
!!!10624898.java!!!	getLayeredPane() : JLayeredPane
        return getRootPane().getLayeredPane();
!!!10625026.java!!!	setLayeredPane(inout layeredPane : JLayeredPane) : void
        getRootPane().setLayeredPane(layeredPane);
!!!10625154.java!!!	getGlassPane() : Component
        return getRootPane().getGlassPane();
!!!10625282.java!!!	setGlassPane(inout glassPane : Component) : void
        getRootPane().setGlassPane(glassPane);
!!!10625410.java!!!	getGraphics() : Graphics
        JComponent.getGraphicsInvoked(this);
        return super.getGraphics();
!!!10625538.java!!!	repaint(in time : long, in x : int, in y : int, in width : int, in height : int) : void
        if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {
            RepaintManager.currentManager(this).addDirtyRegion(
                              this, x, y, width, height);
        }
        else {
            super.repaint(time, x, y, width, height);
        }
!!!10625666.java!!!	setDefaultLookAndFeelDecorated(inout defaultLookAndFeelDecorated : boolean) : void
        if (defaultLookAndFeelDecorated) {
            SwingUtilities.appContextPut(defaultLookAndFeelDecoratedKey, Boolean.TRUE);
        } else {
            SwingUtilities.appContextPut(defaultLookAndFeelDecoratedKey, Boolean.FALSE);
        }
!!!10625794.java!!!	isDefaultLookAndFeelDecorated() : boolean
        Boolean defaultLookAndFeelDecorated =
            (Boolean) SwingUtilities.appContextGet(defaultLookAndFeelDecoratedKey);
        if (defaultLookAndFeelDecorated == null) {
            defaultLookAndFeelDecorated = Boolean.FALSE;
        }
        return defaultLookAndFeelDecorated.booleanValue();
!!!10625922.java!!!	paramString() : String
        String defaultCloseOperationString;
        if (defaultCloseOperation == HIDE_ON_CLOSE) {
            defaultCloseOperationString = "HIDE_ON_CLOSE";
        } else if (defaultCloseOperation == DISPOSE_ON_CLOSE) {
            defaultCloseOperationString = "DISPOSE_ON_CLOSE";
        } else if (defaultCloseOperation == DO_NOTHING_ON_CLOSE) {
            defaultCloseOperationString = "DO_NOTHING_ON_CLOSE";
        } else if (defaultCloseOperation == 3) {
            defaultCloseOperationString = "EXIT_ON_CLOSE";
        } else defaultCloseOperationString = "";
        String rootPaneString = (rootPane != null ?
                                 rootPane.toString() : "");
        String rootPaneCheckingEnabledString = (rootPaneCheckingEnabled ?
                                                "true" : "false");

        return super.paramString() +
        ",defaultCloseOperation=" + defaultCloseOperationString +
        ",rootPane=" + rootPaneString +
        ",rootPaneCheckingEnabled=" + rootPaneCheckingEnabledString;
!!!10626050.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJFrame();
        }
        return accessibleContext;
